begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Base class for artifact discoverers.  *  * @author John Casey  * @author Brett Porter  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractArtifactDiscoverer
extends|extends
name|AbstractDiscoverer
implements|implements
name|ArtifactDiscoverer
block|{
comment|/**      * Standard patterns to exclude from discovery as they are not artifacts.      */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|STANDARD_DISCOVERY_EXCLUDES
init|=
block|{
literal|"bin/**"
block|,
literal|"reports/**"
block|,
literal|".maven/**"
block|,
literal|"**/*.md5"
block|,
literal|"**/*.MD5"
block|,
literal|"**/*.sha1"
block|,
literal|"**/*.SHA1"
block|,
literal|"**/*snapshot-version"
block|,
literal|"*/website/**"
block|,
literal|"*/licenses/**"
block|,
literal|"*/licences/**"
block|,
literal|"**/.htaccess"
block|,
literal|"**/*.html"
block|,
literal|"**/*.asc"
block|,
literal|"**/*.txt"
block|,
literal|"**/*.xml"
block|,
literal|"**/README*"
block|,
literal|"**/CHANGELOG*"
block|,
literal|"**/KEYS*"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|POM
init|=
literal|".pom"
decl_stmt|;
comment|/**      * Scan the repository for artifact paths.      */
specifier|private
name|String
index|[]
name|scanForArtifactPaths
parameter_list|(
name|File
name|repositoryBase
parameter_list|,
name|String
name|blacklistedPatterns
parameter_list|)
block|{
return|return
name|scanForArtifactPaths
argument_list|(
name|repositoryBase
argument_list|,
name|blacklistedPatterns
argument_list|,
literal|null
argument_list|,
name|STANDARD_DISCOVERY_EXCLUDES
argument_list|)
return|;
block|}
comment|/**      * Return a list of artifacts found in a specified repository      *      * @param repository The ArtifactRepository to discover artifacts      * @param blacklistedPatterns Comma-delimited list of string paths that will be excluded in the discovery      * @param includeSnapshots if the repository contains snapshots which should also be included      * @return list of artifacts      */
specifier|public
name|List
name|discoverArtifacts
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|String
name|blacklistedPatterns
parameter_list|,
name|boolean
name|includeSnapshots
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|repository
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Only filesystem repositories are supported"
argument_list|)
throw|;
block|}
name|File
name|repositoryBase
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
index|[]
name|artifactPaths
init|=
name|scanForArtifactPaths
argument_list|(
name|repositoryBase
argument_list|,
name|blacklistedPatterns
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifactPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|artifactPaths
index|[
name|i
index|]
decl_stmt|;
name|Artifact
name|artifact
decl_stmt|;
try|try
block|{
name|artifact
operator|=
name|buildArtifactFromPath
argument_list|(
name|path
argument_list|,
name|repository
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeSnapshots
operator|||
operator|!
name|artifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
name|addKickedOutPath
argument_list|(
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|artifacts
return|;
block|}
comment|/**      * Returns a list of pom packaging artifacts found in a specified repository      *      * @param repository The ArtifactRepository to discover artifacts      * @param blacklistedPatterns Comma-delimited list of string paths that will be excluded in the discovery      * @param includeSnapshots if the repository contains snapshots which should also be included      * @return list of pom artifacts      */
specifier|public
name|List
name|discoverStandalonePoms
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|String
name|blacklistedPatterns
parameter_list|,
name|boolean
name|includeSnapshots
parameter_list|)
block|{
name|List
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|File
name|repositoryBase
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|artifactPaths
init|=
name|scanForArtifactPaths
argument_list|(
name|repositoryBase
argument_list|,
name|blacklistedPatterns
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifactPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|artifactPaths
index|[
name|i
index|]
decl_stmt|;
name|String
name|filename
init|=
name|repositoryBase
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|path
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|POM
argument_list|)
condition|)
block|{
try|try
block|{
name|Artifact
name|pomArtifact
init|=
name|buildArtifactFromPath
argument_list|(
name|path
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|MavenXpp3Reader
name|mavenReader
init|=
operator|new
name|MavenXpp3Reader
argument_list|()
decl_stmt|;
name|Model
name|model
init|=
name|mavenReader
operator|.
name|read
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pomArtifact
operator|!=
literal|null
operator|&&
literal|"pom"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getPackaging
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|includeSnapshots
operator|||
operator|!
name|pomArtifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// this should never happen
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error finding file during POM discovery: "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error reading file during POM discovery: "
operator|+
name|filename
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Parse error reading file during POM discovery: "
operator|+
name|filename
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|artifacts
return|;
block|}
comment|/**      * Returns an artifact object that is represented by the specified path in a repository      *      * @param path The path that is pointing to an artifact      * @param repository The repository of the artifact      * @return Artifact      * @throws DiscovererException when the specified path does correspond to an artifact      */
specifier|public
name|Artifact
name|buildArtifactFromPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|DiscovererException
block|{
name|Artifact
name|artifact
init|=
name|buildArtifact
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifact
return|;
block|}
block|}
end_class

end_unit

