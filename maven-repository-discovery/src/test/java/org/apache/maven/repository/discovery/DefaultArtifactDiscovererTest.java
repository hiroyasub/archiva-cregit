begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test the default artifact discoverer.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DefaultArtifactDiscovererTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|ArtifactDiscoverer
name|discoverer
decl_stmt|;
specifier|private
name|File
name|repositoryLocation
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|discoverer
operator|=
operator|(
name|ArtifactDiscoverer
operator|)
name|lookup
argument_list|(
name|ArtifactDiscoverer
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|repositoryLocation
operator|=
name|getTestFile
argument_list|(
literal|"src/test/repository"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDefaultExcludes
parameter_list|()
block|{
name|List
name|artifacts
init|=
name|discoverer
operator|.
name|discoverArtifacts
argument_list|(
name|repositoryLocation
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Check artifacts returned"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check no artifacts returned"
argument_list|,
name|artifacts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|discoverer
operator|.
name|getExcludedPathsIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|".svn"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Check the excluded path"
argument_list|,
literal|"KEYS"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
condition|)
block|{
name|fail
argument_list|(
literal|"KEYS entry found twice"
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Check exclusion was found"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

