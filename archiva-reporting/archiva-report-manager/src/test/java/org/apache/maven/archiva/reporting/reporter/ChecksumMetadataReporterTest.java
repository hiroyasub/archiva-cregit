begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|reporter
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
operator|.
name|ArtifactResultsDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
operator|.
name|MetadataResultsDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|MetadataResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|processor
operator|.
name|ArtifactReportProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|processor
operator|.
name|MetadataReportProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|GroupRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|DigesterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * ChecksumMetadataReporterTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumMetadataReporterTest
extends|extends
name|AbstractChecksumArtifactReporterTestCase
block|{
specifier|private
name|ArtifactReportProcessor
name|artifactReportProcessor
decl_stmt|;
specifier|private
name|MetadataReportProcessor
name|metadataReportProcessor
decl_stmt|;
specifier|private
name|MetadataResultsDatabase
name|database
decl_stmt|;
specifier|private
name|ArtifactResultsDatabase
name|artifactsDatabase
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|metadataReportProcessor
operator|=
operator|(
name|MetadataReportProcessor
operator|)
name|lookup
argument_list|(
name|MetadataReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"checksum-metadata"
argument_list|)
expr_stmt|;
name|artifactReportProcessor
operator|=
operator|(
name|ArtifactReportProcessor
operator|)
name|lookup
argument_list|(
name|ArtifactReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"checksum"
argument_list|)
expr_stmt|;
name|database
operator|=
operator|(
name|MetadataResultsDatabase
operator|)
name|lookup
argument_list|(
name|MetadataResultsDatabase
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|artifactsDatabase
operator|=
operator|(
name|ArtifactResultsDatabase
operator|)
name|lookup
argument_list|(
name|ArtifactResultsDatabase
operator|.
name|ROLE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the valid checksum of a metadata file.      * The reportingDatabase should report 2 success validation.      */
specifier|public
name|void
name|testChecksumMetadataReporterSuccess
parameter_list|()
throws|throws
name|DigesterException
throws|,
name|IOException
block|{
name|createMetadataFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|createMetadataFile
argument_list|(
literal|"INVALID"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//Version level metadata
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
comment|//Artifact level metadata
name|metadata
operator|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
comment|//Group level metadata
name|metadata
operator|=
operator|new
name|GroupRepositoryMetadata
argument_list|(
literal|"checksumTest"
argument_list|)
expr_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the corrupted checksum of a metadata file.      * The reportingDatabase must report 2 failures.      */
specifier|public
name|void
name|testChecksumMetadataReporterFailure
parameter_list|()
block|{
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"invalidArtifact"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|Iterator
name|failures
init|=
name|database
operator|.
name|getIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|failures
operator|=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the conditional when the checksum files of the artifact& metadata do not exist.      */
specifier|public
name|void
name|testChecksumFilesDoNotExist
parameter_list|()
throws|throws
name|DigesterException
throws|,
name|IOException
block|{
name|createChecksumFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|createMetadataFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|deleteChecksumFiles
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactsDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|Iterator
name|failures
init|=
name|database
operator|.
name|getIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|failures
operator|=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|deleteTestDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
operator|+
literal|"checksumTest"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

