begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|record
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An index record type for the minimal index.  *  * @author Edwin Punzalan  * @author Brett Porter  * @plexus.component role="org.apache.maven.repository.indexing.record.RepositoryIndexRecordFactory" role-hint="minimal"  */
end_comment

begin_class
specifier|public
class|class
name|MinimalArtifactIndexRecordFactory
extends|extends
name|AbstractArtifactIndexRecordFactory
block|{
comment|/* List of types to index. */
specifier|private
specifier|static
specifier|final
name|Set
name|INDEXED_TYPES
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"jar"
block|,
literal|"maven-plugin"
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="sha1"      */
specifier|protected
name|Digester
name|sha1Digester
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="md5"      */
specifier|protected
name|Digester
name|md5Digester
decl_stmt|;
specifier|public
name|RepositoryIndexRecord
name|createRecord
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|MinimalArtifactIndexRecord
name|record
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|INDEXED_TYPES
operator|.
name|contains
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|md5
init|=
name|readChecksum
argument_list|(
name|file
argument_list|,
name|md5Digester
argument_list|)
decl_stmt|;
name|List
name|files
init|=
literal|null
decl_stmt|;
try|try
block|{
name|files
operator|=
name|readFilesInArchive
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error reading artifact file, omitting from index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|record
operator|=
operator|new
name|MinimalArtifactIndexRecord
argument_list|()
expr_stmt|;
name|record
operator|.
name|setMd5Checksum
argument_list|(
name|md5
argument_list|)
expr_stmt|;
name|record
operator|.
name|setFilename
argument_list|(
name|artifact
operator|.
name|getRepository
argument_list|()
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|setLastModified
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|setSize
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|setClasses
argument_list|(
name|getClassesFromFiles
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|record
return|;
block|}
specifier|private
name|List
name|getClassesFromFiles
parameter_list|(
name|List
name|files
parameter_list|)
block|{
name|List
name|classes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|files
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isClass
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classes
return|;
block|}
block|}
end_class

end_unit

