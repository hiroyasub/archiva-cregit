begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|InvalidArtifactRTException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * ArchivaArtifact   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.model.ArchivaArtifact"  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaArtifact
implements|implements
name|RepositoryContent
block|{
specifier|private
name|Map
name|attached
decl_stmt|;
specifier|private
name|String
name|classifier
decl_stmt|;
specifier|private
name|RepositoryContentKey
name|key
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|public
name|ArchivaArtifact
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
operator|new
name|RepositoryContentKey
argument_list|(
name|repository
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|this
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|validateIdentity
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addAttached
parameter_list|(
name|ArchivaArtifact
name|attachedArtifact
parameter_list|)
block|{
name|attached
operator|.
name|put
argument_list|(
name|attachedArtifact
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|attachedArtifact
argument_list|)
expr_stmt|;
comment|// Naughty, Attached shouldn't have it's own attached artifacts!
name|attachedArtifact
operator|.
name|clearAttached
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearAttached
parameter_list|()
block|{
name|attached
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
name|getAttached
parameter_list|()
block|{
return|return
name|attached
return|;
block|}
specifier|public
name|String
name|getClassifier
parameter_list|()
block|{
return|return
name|classifier
return|;
block|}
specifier|public
name|RepositoryContentKey
name|getRepositoryContentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|boolean
name|hasClassifier
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|classifier
argument_list|)
return|;
block|}
specifier|public
name|void
name|setAttached
parameter_list|(
name|Map
name|attached
parameter_list|)
block|{
name|this
operator|.
name|attached
operator|=
name|attached
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryContentKey
parameter_list|(
name|RepositoryContentKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|key
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|appendArtifactTypeClassifierString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|key
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|appendArtifactTypeClassifierString
parameter_list|(
name|StringBuffer
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|key
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasClassifier
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|empty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|1
return|;
block|}
specifier|private
name|void
name|validateIdentity
parameter_list|()
block|{
if|if
condition|(
name|empty
argument_list|(
name|key
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|key
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|key
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|key
operator|.
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The groupId cannot be empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|.
name|getArtifactId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|key
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|key
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|key
operator|.
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The artifactId cannot be empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|key
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|key
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|key
operator|.
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The type cannot be empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|key
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|key
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|key
operator|.
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The version cannot be empty."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

