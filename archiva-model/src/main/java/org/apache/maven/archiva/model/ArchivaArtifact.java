begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|InvalidArtifactRTException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|ArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|ArtifactVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|OverConstrainedVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * ArchivaArtifact   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.model.ArchivaArtifact"  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaArtifact
implements|implements
name|Artifact
block|{
specifier|private
name|ArtifactHandler
name|artifactHandler
decl_stmt|;
specifier|private
name|String
name|artifactId
decl_stmt|;
specifier|private
name|Map
name|attached
decl_stmt|;
specifier|private
name|List
name|availableVersions
decl_stmt|;
comment|/**      * The resolved version for the artifact after conflict resolution, that has not been transformed.      *      * @todo should be final      */
specifier|private
name|String
name|baseVersion
decl_stmt|;
specifier|private
name|String
name|classifier
decl_stmt|;
specifier|private
name|ArtifactFilter
name|dependencyFilter
decl_stmt|;
specifier|private
name|List
name|dependencyTrail
decl_stmt|;
specifier|private
name|String
name|downloadUrl
decl_stmt|;
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|Map
name|metadataMap
decl_stmt|;
specifier|private
name|boolean
name|optional
decl_stmt|;
specifier|private
name|boolean
name|release
decl_stmt|;
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
specifier|private
name|boolean
name|resolved
decl_stmt|;
specifier|private
name|String
name|scope
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|VersionRange
name|versionRange
decl_stmt|;
specifier|public
name|ArchivaArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|VersionRange
name|versionRange
parameter_list|,
name|String
name|scope
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|classifier
parameter_list|,
name|ArtifactHandler
name|artifactHandler
parameter_list|)
block|{
name|this
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|versionRange
argument_list|,
name|scope
argument_list|,
name|type
argument_list|,
name|classifier
argument_list|,
name|artifactHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArchivaArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|VersionRange
name|versionRange
parameter_list|,
name|String
name|scope
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|classifier
parameter_list|,
name|ArtifactHandler
name|artifactHandler
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
name|versionRange
expr_stmt|;
name|selectVersionFromNewRangeIfAvailable
argument_list|()
expr_stmt|;
name|this
operator|.
name|artifactHandler
operator|=
name|artifactHandler
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|classifier
operator|==
literal|null
condition|)
block|{
name|classifier
operator|=
name|artifactHandler
operator|.
name|getClassifier
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
name|validateIdentity
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addAttached
parameter_list|(
name|ArchivaArtifact
name|attachedArtifact
parameter_list|)
block|{
name|attached
operator|.
name|put
argument_list|(
name|attachedArtifact
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|attachedArtifact
argument_list|)
expr_stmt|;
comment|// Naughty, Attached shouldn't have it's own attached artifacts!
name|attachedArtifact
operator|.
name|clearAttached
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addMetadata
parameter_list|(
name|ArtifactMetadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadataMap
operator|==
literal|null
condition|)
block|{
name|metadataMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|ArtifactMetadata
name|m
init|=
operator|(
name|ArtifactMetadata
operator|)
name|metadataMap
operator|.
name|get
argument_list|(
name|metadata
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|merge
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataMap
operator|.
name|put
argument_list|(
name|metadata
operator|.
name|getKey
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearAttached
parameter_list|()
block|{
name|attached
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Artifact
name|a
init|=
operator|(
name|Artifact
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|groupId
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|artifactId
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|type
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|classifier
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|classifier
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
comment|// We don't consider the version range in the comparison, just the resolved version
name|result
operator|=
name|version
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Artifact
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Artifact
name|a
init|=
operator|(
name|Artifact
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|a
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|a
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|a
operator|.
name|getClassifier
argument_list|()
operator|==
literal|null
condition|?
name|classifier
operator|!=
literal|null
else|:
operator|!
name|a
operator|.
name|getClassifier
argument_list|()
operator|.
name|equals
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We don't consider the version range in the comparison, just the resolved version
return|return
literal|true
return|;
block|}
specifier|public
name|ArtifactHandler
name|getArtifactHandler
parameter_list|()
block|{
return|return
name|artifactHandler
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
specifier|public
name|Map
name|getAttached
parameter_list|()
block|{
return|return
name|attached
return|;
block|}
specifier|public
name|List
name|getAvailableVersions
parameter_list|()
block|{
return|return
name|availableVersions
return|;
block|}
specifier|public
name|String
name|getBaseVersion
parameter_list|()
block|{
if|if
condition|(
name|baseVersion
operator|==
literal|null
condition|)
block|{
name|baseVersion
operator|=
name|version
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"version was null for "
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
argument_list|)
throw|;
block|}
block|}
return|return
name|baseVersion
return|;
block|}
specifier|public
name|String
name|getClassifier
parameter_list|()
block|{
return|return
name|classifier
return|;
block|}
specifier|public
name|String
name|getDependencyConflictId
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|appendArtifactTypeClassifierString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ArtifactFilter
name|getDependencyFilter
parameter_list|()
block|{
return|return
name|dependencyFilter
return|;
block|}
specifier|public
name|List
name|getDependencyTrail
parameter_list|()
block|{
return|return
name|dependencyTrail
return|;
block|}
comment|// ----------------------------------------------------------------------
comment|//
comment|// ----------------------------------------------------------------------
specifier|public
name|String
name|getDownloadUrl
parameter_list|()
block|{
return|return
name|downloadUrl
return|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getDependencyConflictId
argument_list|()
operator|+
literal|":"
operator|+
name|getBaseVersion
argument_list|()
return|;
block|}
specifier|public
name|Collection
name|getMetadataList
parameter_list|()
block|{
return|return
name|metadataMap
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|metadataMap
operator|.
name|values
argument_list|()
return|;
block|}
comment|// ----------------------------------------------------------------------
comment|// Object overrides
comment|// ----------------------------------------------------------------------
specifier|public
name|ArtifactRepository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
specifier|public
name|ArtifactVersion
name|getSelectedVersion
parameter_list|()
throws|throws
name|OverConstrainedVersionException
block|{
return|return
name|versionRange
operator|.
name|getSelectedVersion
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|VersionRange
name|getVersionRange
parameter_list|()
block|{
return|return
name|versionRange
return|;
block|}
specifier|public
name|boolean
name|hasClassifier
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|classifier
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|17
decl_stmt|;
name|result
operator|=
literal|37
operator|*
name|result
operator|+
name|groupId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|37
operator|*
name|result
operator|+
name|artifactId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|37
operator|*
name|result
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|37
operator|*
name|result
operator|+
name|version
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
literal|37
operator|*
name|result
operator|+
operator|(
name|classifier
operator|!=
literal|null
condition|?
name|classifier
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
specifier|public
name|boolean
name|isRelease
parameter_list|()
block|{
return|return
name|release
return|;
block|}
specifier|public
name|boolean
name|isResolved
parameter_list|()
block|{
return|return
name|resolved
return|;
block|}
specifier|public
name|boolean
name|isSelectedVersionKnown
parameter_list|()
throws|throws
name|OverConstrainedVersionException
block|{
return|return
name|versionRange
operator|.
name|isSelectedVersionKnown
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSnapshot
parameter_list|()
block|{
if|if
condition|(
name|version
operator|!=
literal|null
operator|||
name|baseVersion
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|VERSION_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|getBaseVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|setBaseVersion
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"-"
operator|+
name|SNAPSHOT_VERSION
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|getBaseVersion
argument_list|()
operator|.
name|endsWith
argument_list|(
name|SNAPSHOT_VERSION
argument_list|)
operator|||
name|getBaseVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|LATEST_VERSION
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|selectVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|baseVersion
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|void
name|setArtifactHandler
parameter_list|(
name|ArtifactHandler
name|artifactHandler
parameter_list|)
block|{
name|this
operator|.
name|artifactHandler
operator|=
name|artifactHandler
expr_stmt|;
block|}
specifier|public
name|void
name|setArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
block|}
specifier|public
name|void
name|setAttached
parameter_list|(
name|Map
name|attached
parameter_list|)
block|{
name|this
operator|.
name|attached
operator|=
name|attached
expr_stmt|;
block|}
specifier|public
name|void
name|setAvailableVersions
parameter_list|(
name|List
name|availableVersions
parameter_list|)
block|{
name|this
operator|.
name|availableVersions
operator|=
name|availableVersions
expr_stmt|;
block|}
specifier|public
name|void
name|setBaseVersion
parameter_list|(
name|String
name|baseVersion
parameter_list|)
block|{
name|this
operator|.
name|baseVersion
operator|=
name|baseVersion
expr_stmt|;
block|}
specifier|public
name|void
name|setDependencyFilter
parameter_list|(
name|ArtifactFilter
name|artifactFilter
parameter_list|)
block|{
name|this
operator|.
name|dependencyFilter
operator|=
name|artifactFilter
expr_stmt|;
block|}
specifier|public
name|void
name|setDependencyTrail
parameter_list|(
name|List
name|dependencyTrail
parameter_list|)
block|{
name|this
operator|.
name|dependencyTrail
operator|=
name|dependencyTrail
expr_stmt|;
block|}
specifier|public
name|void
name|setDownloadUrl
parameter_list|(
name|String
name|downloadUrl
parameter_list|)
block|{
name|this
operator|.
name|downloadUrl
operator|=
name|downloadUrl
expr_stmt|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
specifier|public
name|void
name|setOptional
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
block|}
specifier|public
name|void
name|setRelease
parameter_list|(
name|boolean
name|release
parameter_list|)
block|{
name|this
operator|.
name|release
operator|=
name|release
expr_stmt|;
block|}
specifier|public
name|void
name|setRepository
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|void
name|setResolved
parameter_list|(
name|boolean
name|resolved
parameter_list|)
block|{
name|this
operator|.
name|resolved
operator|=
name|resolved
expr_stmt|;
block|}
specifier|public
name|void
name|setResolvedVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
comment|// retain baseVersion
block|}
specifier|public
name|void
name|setScope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|baseVersion
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setVersionRange
parameter_list|(
name|VersionRange
name|versionRange
parameter_list|)
block|{
name|this
operator|.
name|versionRange
operator|=
name|versionRange
expr_stmt|;
name|selectVersionFromNewRangeIfAvailable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|appendArtifactTypeClassifierString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|||
name|baseVersion
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|versionRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|updateVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|)
block|{
name|setResolvedVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|localRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|localRepository
operator|.
name|pathOf
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendArtifactTypeClassifierString
parameter_list|(
name|StringBuffer
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasClassifier
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|empty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|1
return|;
block|}
specifier|private
name|void
name|selectVersionFromNewRangeIfAvailable
parameter_list|()
block|{
if|if
condition|(
name|versionRange
operator|!=
literal|null
operator|&&
name|versionRange
operator|.
name|getRecommendedVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|selectVersion
argument_list|(
name|versionRange
operator|.
name|getRecommendedVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|version
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|baseVersion
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateIdentity
parameter_list|()
block|{
if|if
condition|(
name|empty
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The groupId cannot be empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|artifactId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The artifactId cannot be empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The type cannot be empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
operator|&&
name|versionRange
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidArtifactRTException
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|type
argument_list|,
literal|"The version cannot be empty."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

