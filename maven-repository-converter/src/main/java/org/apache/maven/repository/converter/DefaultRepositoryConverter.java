begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|converter
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|converter
operator|.
name|ArtifactPomRewriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of repository conversion class.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @plexus.component role="org.apache.maven.repository.converter.RepositoryConverter" role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryConverter
implements|implements
name|RepositoryConverter
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactPomRewriter
name|rewriter
decl_stmt|;
comment|/**      * @plexus.configuration      */
specifier|private
name|boolean
name|force
decl_stmt|;
comment|/**      * @plexus.configuration      */
specifier|private
name|boolean
name|dryrun
decl_stmt|;
specifier|public
name|void
name|convert
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|)
throws|throws
name|RepositoryConversionException
block|{
name|copyArtifact
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|copyPom
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyPom
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|)
throws|throws
name|RepositoryConversionException
block|{
name|Artifact
name|pom
init|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
name|artifact
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOf
argument_list|(
name|pom
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// TODO: utility methods in the model converter
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pom
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|contents
decl_stmt|;
try|try
block|{
name|contents
operator|=
name|FileUtils
operator|.
name|fileRead
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Unable to read source POM: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|contents
operator|.
name|indexOf
argument_list|(
literal|"modelVersion"
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// v4 POM
try|try
block|{
name|boolean
name|matching
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|targetFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|targetContents
init|=
name|FileUtils
operator|.
name|fileRead
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|matching
operator|=
name|targetContents
operator|.
name|equals
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|||
operator|!
name|matching
condition|)
block|{
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
name|targetFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|fileWrite
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Unable to write target POM: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// v3 POM
name|StringReader
name|stringReader
init|=
operator|new
name|StringReader
argument_list|(
name|contents
argument_list|)
decl_stmt|;
name|Writer
name|fileWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileWriter
operator|=
operator|new
name|FileWriter
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
comment|// TODO: this api could be improved - is it worth having or go back to modelConverter?
name|rewriter
operator|.
name|rewrite
argument_list|(
name|stringReader
argument_list|,
name|fileWriter
argument_list|,
literal|false
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtil
operator|.
name|close
argument_list|(
name|fileWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|fileWriter
operator|!=
literal|null
condition|)
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|fileWriter
argument_list|)
expr_stmt|;
name|targetFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Unable to write converted POM"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|copyArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|)
throws|throws
name|RepositoryConversionException
block|{
name|File
name|sourceFile
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|matching
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|targetFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|matching
operator|=
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|||
operator|!
name|matching
condition|)
block|{
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Error copying artifact"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|convert
parameter_list|(
name|List
name|artifacts
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|)
throws|throws
name|RepositoryConversionException
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

