begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|converter
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * Test the repository converter.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @todo what about deletions from the source repository?  * @todo use artifact-test instead  * @todo should reject if dependencies are missing - rely on reporting?  * @todo group metadata  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryConverterTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|ArtifactRepository
name|sourceRepository
decl_stmt|;
specifier|private
name|ArtifactRepository
name|targetRepository
decl_stmt|;
specifier|private
name|RepositoryConverter
name|repositoryConverter
decl_stmt|;
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SLEEP_MILLIS
init|=
literal|100
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ArtifactRepositoryFactory
name|factory
init|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|ArtifactRepositoryLayout
name|layout
init|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"legacy"
argument_list|)
decl_stmt|;
name|File
name|sourceBase
init|=
name|getTestFile
argument_list|(
literal|"src/test/source-repository"
argument_list|)
decl_stmt|;
name|sourceRepository
operator|=
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"source"
argument_list|,
name|sourceBase
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|layout
operator|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|File
name|targetBase
init|=
name|getTestFile
argument_list|(
literal|"target/test-target-repository"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyDirectoryStructure
argument_list|(
name|getTestFile
argument_list|(
literal|"src/test/target-repository"
argument_list|)
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|targetRepository
operator|=
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"target"
argument_list|,
name|targetBase
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|repositoryConverter
operator|=
operator|(
name|RepositoryConverter
operator|)
name|lookup
argument_list|(
name|RepositoryConverter
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|artifactFactory
operator|=
operator|(
name|ArtifactFactory
operator|)
name|lookup
argument_list|(
name|ArtifactFactory
operator|.
name|ROLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV4PomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that it is copied as is
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v4artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|versionMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-version-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|versionMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3PomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that the pom is coverted
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|versionMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-version-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|versionMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3PomWarningsOnConvert
parameter_list|()
throws|throws
name|RepositoryConversionException
throws|,
name|IOException
block|{
comment|// test that the pom is converted but that warnings are reported
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3-warnings-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|List
name|warnings
init|=
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
decl_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3-warnings.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check number of warnings"
argument_list|,
literal|2
argument_list|,
name|warnings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: check 2 warnings (extend and versions) matched on i18n key
block|}
specifier|public
name|void
name|testV4SnapshotPomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that it is copied as is
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v4artifact"
argument_list|,
literal|"1.0.0-SNAPSHOT"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3SnapshotPomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that the pom is coverted
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3artifact"
argument_list|,
literal|"1.0.0-SNAPSHOT"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3-snapshot.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV4TimestampedSnapshotPomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that it is copied as is
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v4artifact"
argument_list|,
literal|"1.0.0-20060111.120115-1"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-timestamped-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3TimestampedSnapshotPomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that the pom is coverted
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3artifact"
argument_list|,
literal|"1.0.0-20060105.130101-3"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3-timestamped-snapshot.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact snapshotMetadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot snapshotMetadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-timestamped-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoPomConvert
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryConversionException
block|{
comment|// test that a POM is created when there was none at the source
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"noPomArtifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: should we fail? Warn?
name|assertFalse
argument_list|(
literal|"Check no POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No source POM"
argument_list|,
name|sourcePomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidSourceChecksumMd5
parameter_list|()
throws|throws
name|RepositoryConversionException
block|{
comment|// test that it fails when the source md5 is not a valid md5
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"invalidMd5Artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
comment|// TODO: check for failure
block|}
specifier|public
name|void
name|testInvalidSourceChecksumSha1
parameter_list|()
block|{
comment|// test that it fails when the source sha1 is not a valid sha1
comment|// TODO: using exceptions at this level, or passing in reporter?
block|}
specifier|public
name|void
name|testIncorrectSourceChecksumMd5
parameter_list|()
block|{
comment|// test that it fails when the source md5 is wrong
comment|// TODO: using exceptions at this level, or passing in reporter?
block|}
specifier|public
name|void
name|testIncorrectSourceChecksumSha1
parameter_list|()
block|{
comment|// test that it fails when the source sha1 is wrong
comment|// TODO: using exceptions at this level, or passing in reporter?
block|}
specifier|public
name|void
name|testUnmodifiedArtifact
parameter_list|()
throws|throws
name|RepositoryConversionException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// test the unmodified artifact is untouched
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"unmodified-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check target file exists"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check target POM exists"
argument_list|,
name|targetPomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePomFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|origTime
init|=
name|targetFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|long
name|origPomTime
init|=
name|targetPomFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
comment|// Need to guarantee last modified is not equal
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|targetPomFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check unmodified"
argument_list|,
name|origTime
argument_list|,
name|targetFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check unmodified"
argument_list|,
name|origPomTime
argument_list|,
name|targetPomFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testModifedArtifactFails
parameter_list|()
block|{
comment|// test that it fails when the source artifact has changed and is different to the existing artifact in the
comment|// target repository
comment|// TODO
block|}
specifier|public
name|void
name|testForcedUnmodifiedArtifact
parameter_list|()
throws|throws
name|Exception
throws|,
name|IOException
block|{
comment|// test unmodified artifact is still converted when set to force
name|repositoryConverter
operator|=
operator|(
name|RepositoryConverter
operator|)
name|lookup
argument_list|(
name|RepositoryConverter
operator|.
name|ROLE
argument_list|,
literal|"force-repository-converter"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"unmodified-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|origTime
init|=
name|targetFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|long
name|origPomTime
init|=
name|targetPomFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|sourceFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePomFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Need to guarantee last modified is not equal
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|targetPomFile
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check modified"
argument_list|,
name|origTime
operator|==
name|targetFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check modified"
argument_list|,
name|origPomTime
operator|==
name|targetPomFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDryRunSuccess
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test dry run does nothing on a run that will be successful, and returns success
name|repositoryConverter
operator|=
operator|(
name|RepositoryConverter
operator|)
name|lookup
argument_list|(
name|RepositoryConverter
operator|.
name|ROLE
argument_list|,
literal|"dryrun-repository-converter"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"dryrun-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check source file exists"
argument_list|,
name|sourceFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check source POM exists"
argument_list|,
name|sourcePomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check target file doesn't exist"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check target POM doesn't exist"
argument_list|,
name|targetPomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDryRunFailure
parameter_list|()
block|{
comment|// test dry run does nothing on a run that will fail, and returns failure
comment|// TODO
block|}
specifier|public
name|void
name|testRollbackArtifactCreated
parameter_list|()
block|{
comment|// test rollback can remove a created artifact, including checksums
comment|// TODO
block|}
specifier|public
name|void
name|testRollbackArtifactChanged
parameter_list|()
block|{
comment|// test rollback can undo changes to an artifact, including checksums
comment|// TODO
block|}
specifier|public
name|void
name|testRollbackMetadataCreated
parameter_list|()
block|{
comment|// test rollback can remove a created artifact's metadata, including checksums
comment|// TODO
block|}
specifier|public
name|void
name|testRollbackMetadataChanged
parameter_list|()
block|{
comment|// test rollback can undo changes to an artifact's metadata, including checksums
comment|// TODO
block|}
specifier|public
name|void
name|testMultipleArtifacts
parameter_list|()
throws|throws
name|RepositoryConversionException
throws|,
name|IOException
block|{
comment|// test multiple artifacts are converted
name|List
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"artifact-one"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"artifact-two"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"artifact-three"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifacts
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|".pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testInvalidSourceArtifactMetadata
parameter_list|()
block|{
comment|// test artifact is not converted when source metadata is invalid, and returns failure
comment|// TODO
block|}
specifier|public
name|void
name|testInvalidSourceSnapshotMetadata
parameter_list|()
block|{
comment|// test artifact is not converted when source snapshot metadata is invalid and returns failure
comment|// TODO
block|}
specifier|public
name|void
name|testMergeArtifactMetadata
parameter_list|()
throws|throws
name|RepositoryConversionException
throws|,
name|IOException
block|{
comment|// test artifact level metadata is merged when it already exists on successful conversion
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"newversion-artifact"
argument_list|,
literal|"1.0.1"
argument_list|)
decl_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/newversion-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSourceAndTargetRepositoriesMatch
parameter_list|()
block|{
comment|// test that it fails if the same (initially - later we might allow this with extra checks)
comment|// TODO
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|Artifact
operator|.
name|VERSION_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|String
name|baseVersion
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|baseVersion
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"-SNAPSHOT"
expr_stmt|;
block|}
else|else
block|{
name|baseVersion
operator|=
name|version
expr_stmt|;
block|}
return|return
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|baseVersion
argument_list|,
name|version
argument_list|,
literal|"jar"
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|baseVersion
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|artifactFactory
operator|.
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|null
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|setBaseVersion
argument_list|(
name|baseVersion
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepository
argument_list|(
name|sourceRepository
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|private
name|Artifact
name|createPomArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|createArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|"pom"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|compareFiles
parameter_list|(
name|File
name|expectedPomFile
parameter_list|,
name|File
name|pomFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|expectedContent
init|=
name|normalizeString
argument_list|(
name|FileUtils
operator|.
name|fileRead
argument_list|(
name|expectedPomFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|targetContent
init|=
name|normalizeString
argument_list|(
name|FileUtils
operator|.
name|fileRead
argument_list|(
name|pomFile
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file match"
argument_list|,
name|expectedContent
argument_list|,
name|targetContent
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|normalizeString
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
return|;
block|}
block|}
end_class

end_unit

