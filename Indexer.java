begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|maven
operator|.
name|indexer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_comment
comment|/**  * Indexer utility used to create repository index   * for using in the repository search (e.g. from IDE plugins).   *   * @author Eugene Kuleshov  */
end_comment

begin_class
specifier|public
class|class
name|Indexer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JAR_NAME
init|=
literal|"j"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAR_SIZE
init|=
literal|"s"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAR_DATE
init|=
literal|"d"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMES
init|=
literal|"c"
decl_stmt|;
specifier|private
specifier|static
name|long
name|totalClasses
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|long
name|totalFiles
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|command
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"index"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|String
name|repositoryPath
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|String
name|indexPath
init|=
name|args
operator|.
name|length
operator|==
literal|2
condition|?
literal|"index"
else|:
name|args
index|[
literal|2
index|]
decl_stmt|;
name|Indexer
operator|.
name|reindex
argument_list|(
operator|new
name|File
argument_list|(
name|indexPath
argument_list|)
argument_list|,
name|repositoryPath
argument_list|)
expr_stmt|;
comment|//    } else if( "search".equals( command)) {
comment|//      String query = args[ 1];
comment|//      String indexPath = args.length==2 ? "index" : args[ 2];
comment|//
comment|//      indexer = new Indexer( new File[] { new File( indexPath)});
comment|//      Map res = indexer.search( query, NAMES);
comment|//
comment|//      for( Iterator it = res.entrySet().iterator(); it.hasNext();) {
comment|//        Map.Entry e = ( Map.Entry) it.next();
comment|//        System.err.println( e);
comment|//      }
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not implemented yet"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"indexer<command><args>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  index<repository path><index path>"
argument_list|)
expr_stmt|;
comment|//    System.err.println( "  search<query><index path>");
block|}
specifier|public
specifier|static
name|void
name|reindex
parameter_list|(
name|File
name|indexPath
parameter_list|,
name|String
name|repositoryPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|StandardAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexPath
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|l1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|processDir
argument_list|(
operator|new
name|File
argument_list|(
name|repositoryPath
argument_list|)
argument_list|,
name|w
argument_list|,
name|repositoryPath
argument_list|)
expr_stmt|;
name|long
name|l2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Done. "
operator|+
operator|(
operator|(
name|l2
operator|-
name|l1
operator|)
operator|/
literal|1000f
operator|)
argument_list|)
expr_stmt|;
name|long
name|l3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Optimizing..."
argument_list|)
expr_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|l4
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Done. "
operator|+
operator|(
operator|(
name|l4
operator|-
name|l3
operator|)
operator|/
literal|1000f
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Total classes: "
operator|+
name|totalClasses
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Total jars:    "
operator|+
name|totalFiles
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Total size:    "
operator|+
operator|(
name|totalSize
operator|/
literal|1024
operator|/
literal|1024
operator|)
operator|+
literal|" Mb"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Speed:         "
operator|+
operator|(
name|totalSize
operator|/
operator|(
operator|(
name|l2
operator|-
name|l1
operator|)
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|" b/sec"
argument_list|)
expr_stmt|;
name|createArchive
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
comment|// TODO close all files and streams in try/finally
specifier|private
specifier|static
name|void
name|createArchive
parameter_list|(
name|File
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|indexPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|indexPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
operator|+
literal|".zip"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|zos
operator|.
name|setLevel
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|indexPath
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ZipEntry
name|e
init|=
operator|new
name|ZipEntry
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|zos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|zos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|processDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|IndexWriter
name|w
parameter_list|,
name|String
name|repositoryPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
return|return;
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|f
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
name|processDir
argument_list|(
name|f
argument_list|,
name|w
argument_list|,
name|repositoryPath
argument_list|)
expr_stmt|;
else|else
name|processFile
argument_list|(
name|f
argument_list|,
name|w
argument_list|,
name|repositoryPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|processFile
parameter_list|(
name|File
name|f
parameter_list|,
name|IndexWriter
name|w
parameter_list|,
name|String
name|repositoryPath
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
condition|)
block|{
comment|// TODO
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
name|String
name|absolutePath
init|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|jarFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|size
operator|=
name|jarFile
operator|.
name|length
argument_list|()
expr_stmt|;
name|absolutePath
operator|=
name|jarFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|totalFiles
operator|++
expr_stmt|;
name|totalSize
operator|+=
name|size
expr_stmt|;
if|if
condition|(
operator|(
name|totalFiles
operator|%
literal|100
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Indexing "
operator|+
name|totalFiles
operator|+
literal|" "
operator|+
name|f
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|substring
argument_list|(
name|repositoryPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|JAR_NAME
argument_list|,
name|absolutePath
operator|.
name|substring
argument_list|(
name|repositoryPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|JAR_DATE
argument_list|,
name|DateField
operator|.
name|timeToString
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|JAR_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO calculate jar's sha1 or md5
comment|//      ZipFile jar = null;
try|try
block|{
comment|/*               jar = new ZipFile( f);                  StringBuffer sb = new StringBuffer();         for( Enumeration en = jar.entries(); en.hasMoreElements();) {           ZipEntry e = ( ZipEntry) en.nextElement();           String name = e.getName();           if( name.endsWith( ".class")) {             totalClasses++;             // TODO verify if class is public or protected             // TODO skipp all inner classes for now             int i = name.lastIndexOf( "$");             if( i==-1) {               sb.append( name.substring( 0, name.length() - 6)).append( "\n");             }           }         }         doc.add( Field.Text( NAMES, sb.toString()));                 } finally {         try {           jar.close();         } catch( Exception e) {         } */
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error for file "
operator|+
name|f
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

