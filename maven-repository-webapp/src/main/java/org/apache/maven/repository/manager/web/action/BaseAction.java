begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|action
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionSupport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|webwork
operator|.
name|interceptor
operator|.
name|ParameterAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|execution
operator|.
name|DiscovererExecution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|job
operator|.
name|DiscovererScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|utils
operator|.
name|ConfigurationManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * This is the Action class of index.jsp, which is the initial page of the web application.  * It invokes the DiscovererScheduler to set the DiscoverJob in the scheduler.  *  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="org.apache.maven.repository.manager.web.action.BaseAction"  */
end_comment

begin_class
specifier|public
class|class
name|BaseAction
extends|extends
name|ActionSupport
implements|implements
name|ParameterAware
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|DiscovererExecution
name|execution
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|DiscovererScheduler
name|discovererScheduler
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ConfigurationManager
name|configManager
decl_stmt|;
specifier|private
name|Map
name|parameters
decl_stmt|;
specifier|public
name|Map
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/**      * Method that executes the action      *      * @return a String that specifies if the action executed was a success or a failure      */
specifier|public
name|String
name|execute
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|config
init|=
name|configManager
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Map
name|parameters
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|ConfigurationManager
operator|.
name|INDEXPATH
argument_list|,
name|config
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|ConfigurationManager
operator|.
name|MIN_INDEXPATH
argument_list|,
name|config
operator|.
name|getMinimalIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|ConfigurationManager
operator|.
name|DISCOVERY_BLACKLIST_PATTERNS
argument_list|,
name|config
operator|.
name|getDiscoveryBlackListPatterns
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|ConfigurationManager
operator|.
name|DISCOVER_SNAPSHOTS
argument_list|,
operator|new
name|Boolean
argument_list|(
name|config
operator|.
name|isDiscoverSnapshots
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
comment|//Configuration configuration = new Configuration(); // TODO!
name|execution
operator|.
name|executeDiscovererIfIndexDoesNotExist
argument_list|(
operator|new
name|File
argument_list|(
name|config
operator|.
name|getIndexPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|discovererScheduler
operator|.
name|setSchedule
argument_list|(
name|config
operator|.
name|getDiscoveryCronExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: better exception handling!
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|ERROR
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
block|}
end_class

end_unit

