begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|action
operator|.
name|admin
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|webwork
operator|.
name|interceptor
operator|.
name|ParameterAware
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionSupport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ModelDriven
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|ConfigurationChangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|ConfigurationStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|ConfigurationStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|InvalidConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Configures the application repositories.  *  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="configureRepositoryAction"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigureRepositoryAction
extends|extends
name|ActionSupport
implements|implements
name|ModelDriven
implements|,
name|Preparable
implements|,
name|ParameterAware
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ConfigurationStore
name|configurationStore
decl_stmt|;
comment|/**      * The repository.      */
specifier|private
name|RepositoryConfiguration
name|repository
decl_stmt|;
comment|/**      * The repository ID to lookup when editing a repository.      */
specifier|private
name|String
name|repoId
decl_stmt|;
comment|/**      * The previously read configuration.      */
specifier|private
name|Configuration
name|configuration
decl_stmt|;
specifier|public
name|String
name|add
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
block|{
comment|// TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
name|RepositoryConfiguration
name|existingRepository
init|=
name|configuration
operator|.
name|getRepositoryById
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingRepository
operator|!=
literal|null
condition|)
block|{
name|addFieldError
argument_list|(
literal|"id"
argument_list|,
literal|"A repository with that id already exists"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
return|return
name|addRepository
argument_list|()
return|;
block|}
specifier|public
name|String
name|edit
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
block|{
comment|// TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
name|RepositoryConfiguration
name|existingRepository
init|=
name|configuration
operator|.
name|getRepositoryById
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|removeRepository
argument_list|(
name|existingRepository
argument_list|)
expr_stmt|;
return|return
name|addRepository
argument_list|()
return|;
block|}
specifier|private
name|String
name|addRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
block|{
name|normalizeRepository
argument_list|()
expr_stmt|;
comment|// Just double checking that our validation routines line up with what is expected in the configuration
assert|assert
name|repository
operator|.
name|isValid
argument_list|()
assert|;
name|configuration
operator|.
name|addRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|storeConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// TODO: do we need to check if indexing is needed?
name|addActionMessage
argument_list|(
literal|"Successfully saved configuration"
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
specifier|private
name|void
name|normalizeRepository
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Normalize the path
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setDirectory
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// TODO: error handling when this fails, or is not a directory
block|}
block|}
specifier|public
name|String
name|input
parameter_list|()
block|{
return|return
name|INPUT
return|;
block|}
specifier|public
name|Object
name|getModel
parameter_list|()
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|configuration
operator|.
name|getRepositoryById
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
operator|new
name|RepositoryConfiguration
argument_list|()
expr_stmt|;
name|repository
operator|.
name|setIndexed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|repository
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|ConfigurationStoreException
block|{
name|configuration
operator|=
name|configurationStore
operator|.
name|getConfigurationFromStore
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getRepoId
parameter_list|()
block|{
return|return
name|repoId
return|;
block|}
specifier|public
name|void
name|setRepoId
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|repoId
expr_stmt|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
comment|// TODO! can I replace with repository.id or something?
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"repoId"
argument_list|)
condition|)
block|{
name|repoId
operator|=
operator|(
operator|(
name|String
index|[]
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"repoId"
argument_list|)
operator|)
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

