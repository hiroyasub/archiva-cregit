begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|io
operator|.
name|xpp3
operator|.
name|ConfigurationXpp3Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * This class updates the configuration in plexus.xml  *  * @plexus.component role="org.apache.maven.repository.manager.web.utils.ConfigurationManager"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WEB_XML_FILE
init|=
literal|"web.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_CONFIG_FILE
init|=
literal|"mrm-admin-config.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION
init|=
literal|"configuration"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DISCOVER_SNAPSHOTS
init|=
literal|"discoverSnapshots"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DISCOVERY_CRON_EXPRESSION
init|=
literal|"discoveryCronExpression"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEXPATH
init|=
literal|"indexPath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_INDEXPATH
init|=
literal|"minimalIndexPath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_LAYOUT
init|=
literal|"repositoryLayout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_DIRECTORY
init|=
literal|"repositoryDirectory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DISCOVERY_BLACKLIST_PATTERNS
init|=
literal|"discoveryBlacklistPatterns"
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|private
name|File
name|plexusDescriptor
decl_stmt|;
specifier|private
name|Document
name|document
decl_stmt|;
comment|/**      * Method for updating the configuration in plexus.xml      *      * @param map   contains the fields and the values to be updated in the configuration      */
specifier|public
name|void
name|updateConfiguration
parameter_list|(
name|Map
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|getConfigFile
argument_list|()
decl_stmt|;
try|try
block|{
name|document
operator|=
name|readXmlDocument
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|de
parameter_list|)
block|{
name|de
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|Element
name|rootElement
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter2
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DISCOVERY_CRON_EXPRESSION
argument_list|)
condition|)
block|{
name|config
operator|.
name|setDiscoveryCronExpression
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|REPOSITORY_LAYOUT
argument_list|)
condition|)
block|{
name|config
operator|.
name|setRepositoryLayout
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DISCOVER_SNAPSHOTS
argument_list|)
condition|)
block|{
name|config
operator|.
name|setDiscoverSnapshots
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|REPOSITORY_DIRECTORY
argument_list|)
condition|)
block|{
name|config
operator|.
name|setRepositoryDirectory
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|INDEXPATH
argument_list|)
condition|)
block|{
name|config
operator|.
name|setIndexPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|MIN_INDEXPATH
argument_list|)
condition|)
block|{
name|config
operator|.
name|setMinimalIndexPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DISCOVERY_BLACKLIST_PATTERNS
argument_list|)
condition|)
block|{
name|config
operator|.
name|setDiscoveryBlackListPatterns
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|writeXmlDocument
argument_list|(
name|getConfigFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method that gets the properties set in the index-config.xml for the configuration fields      * used in the schedule, indexing and discovery      *      * @return a Map that contains the elements in the properties of the configuration object      */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
name|map
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
name|getConfigFile
argument_list|()
decl_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|writeXmlDocument
argument_list|(
name|getConfigFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|document
operator|=
name|readXmlDocument
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|de
parameter_list|)
block|{
name|de
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|map
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Element
name|rootElement
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter2
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|DISCOVERY_CRON_EXPRESSION
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|DISCOVERY_CRON_EXPRESSION
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setDiscoveryCronExpression
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|DISCOVERY_CRON_EXPRESSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|REPOSITORY_LAYOUT
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|REPOSITORY_LAYOUT
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setRepositoryLayout
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|REPOSITORY_LAYOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|DISCOVER_SNAPSHOTS
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|DISCOVER_SNAPSHOTS
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setDiscoverSnapshots
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|map
operator|.
name|get
argument_list|(
name|DISCOVER_SNAPSHOTS
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|REPOSITORY_DIRECTORY
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|REPOSITORY_DIRECTORY
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setRepositoryDirectory
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|REPOSITORY_DIRECTORY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|INDEXPATH
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|INDEXPATH
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setIndexPath
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|INDEXPATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|MIN_INDEXPATH
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|MIN_INDEXPATH
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setMinimalIndexPath
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|MIN_INDEXPATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|DISCOVERY_BLACKLIST_PATTERNS
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|DISCOVERY_BLACKLIST_PATTERNS
argument_list|)
argument_list|)
condition|)
block|{
name|config
operator|.
name|setDiscoveryBlackListPatterns
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|DISCOVERY_BLACKLIST_PATTERNS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|config
return|;
block|}
comment|/**      * Method that reads the xml file and puts it in a Document object      *      * @param file  the xml file to be read      * @return      a Document object that represents the contents of the xml file      * @throws DocumentException      */
specifier|protected
name|Document
name|readXmlDocument
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|DocumentException
block|{
name|SAXReader
name|reader
init|=
operator|new
name|SAXReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|reader
operator|.
name|read
argument_list|(
name|file
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Method for removing the specified element from the document      *      * @param element      * @param name      */
specifier|protected
name|void
name|removeElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|children
init|=
name|element
operator|.
name|elementIterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|child
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|element
operator|.
name|remove
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Element
name|addElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|element
operator|.
name|addElement
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setElementValue
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|element
operator|.
name|setText
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Element
name|addAndSetElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|elementName
parameter_list|,
name|String
name|elementValue
parameter_list|)
block|{
name|Element
name|retElement
init|=
name|addElement
argument_list|(
name|element
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|setElementValue
argument_list|(
name|retElement
argument_list|,
name|elementValue
argument_list|)
expr_stmt|;
return|return
name|retElement
return|;
block|}
comment|/**      * Method for writing the document object into its corresponding      * xml file.      *      * @param file      the file where the document will be written to      */
specifier|protected
name|void
name|writeXmlDocument
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ConfigurationXpp3Writer
name|configWriter
init|=
operator|new
name|ConfigurationXpp3Writer
argument_list|()
decl_stmt|;
name|configWriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method that returns the index-config.xml file      *      * @return a File that references the plexus.xml      */
specifier|protected
name|File
name|getConfigFile
parameter_list|()
block|{
name|URL
name|indexConfigXml
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"../"
operator|+
name|INDEX_CONFIG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConfigXml
operator|!=
literal|null
condition|)
block|{
name|plexusDescriptor
operator|=
operator|new
name|File
argument_list|(
name|indexConfigXml
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URL
name|xmlPath
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"../"
operator|+
name|WEB_XML_FILE
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|xmlPath
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|+
name|INDEX_CONFIG_FILE
expr_stmt|;
name|plexusDescriptor
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|plexusDescriptor
return|;
block|}
specifier|protected
name|Document
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
block|}
end_class

end_unit

