begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|manager
operator|.
name|web
operator|.
name|job
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|ArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|DefaultArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|DefaultMetadataDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|LegacyArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|MetadataDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|ArtifactRepositoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|MetadataRepositoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|PomRepositoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndexingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|scheduler
operator|.
name|AbstractJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class executes the discoverer and the indexer.  *  * @plexus.component role="org.apache.maven.repository.manager.web.job.DiscovererJob"  */
end_comment

begin_class
specifier|public
class|class
name|DiscovererJob
extends|extends
name|AbstractJob
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROLE
init|=
name|DiscovererJob
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|ArtifactDiscoverer
name|defaultArtifactDiscoverer
decl_stmt|;
specifier|private
name|ArtifactDiscoverer
name|legacyArtifactDiscoverer
decl_stmt|;
specifier|private
name|MetadataDiscoverer
name|defaultMetadataDiscoverer
decl_stmt|;
specifier|private
name|RepositoryIndexingFactory
name|indexFactory
decl_stmt|;
specifier|private
name|ArtifactRepositoryLayout
name|layout
decl_stmt|;
specifier|private
name|ArtifactRepositoryFactory
name|repoFactory
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_INDEXPATH
init|=
literal|"INDEXPATH"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_LAYOUT
init|=
literal|"LAYOUT"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_DEFAULT_REPOSITORY
init|=
literal|"DEFAULT_REPOSITORY"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_BLACKLIST
init|=
literal|"BLACKLISTED_PATTERNS"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_SNAPSHOTS
init|=
literal|"INCLUDE_SNAPSHOTS"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_CONVERT
init|=
literal|"CONVERT_SNAPSHOTS"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_DEF_ARTIFACT_DISCOVERER
init|=
literal|"DEFAULT_ARTIFACT_DISCOVERER"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_LEG_ARTIFACT_DISCOVERER
init|=
literal|"LEGACY_ARTIFACT_DISCOVERER"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_DEF_METADATA_DISCOVERER
init|=
literal|"DEFAULT_METADATA_DISCOVERER"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_IDX_FACTORY
init|=
literal|"INDEX_FACTORY"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_REPO_LAYOUT
init|=
literal|"REPOSITORY_LAYOUT"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MAP_REPO_FACTORY
init|=
literal|"REPOSITORY_FACTORY"
decl_stmt|;
comment|/**      * Execute the discoverer and the indexer.      *      * @param context      * @throws org.quartz.JobExecutionException      *      */
specifier|public
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|context
parameter_list|)
throws|throws
name|JobExecutionException
block|{
name|JobDataMap
name|dataMap
init|=
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|setJobDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"[DiscovererJob] Start execution of DiscovererJob.."
argument_list|)
expr_stmt|;
comment|//configuration values specified in properties file
name|String
name|indexPath
init|=
operator|(
name|String
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_INDEXPATH
argument_list|)
decl_stmt|;
name|ArtifactRepository
name|defaultRepository
init|=
operator|(
name|ArtifactRepository
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_DEFAULT_REPOSITORY
argument_list|)
decl_stmt|;
name|String
name|blacklistedPatterns
init|=
operator|(
name|String
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_BLACKLIST
argument_list|)
decl_stmt|;
name|boolean
name|includeSnapshots
init|=
operator|(
operator|(
name|Boolean
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_SNAPSHOTS
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|convertSnapshots
init|=
operator|(
operator|(
name|Boolean
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_CONVERT
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
comment|//plexus components created in BaseAction
name|defaultArtifactDiscoverer
operator|=
operator|(
name|DefaultArtifactDiscoverer
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_DEF_ARTIFACT_DISCOVERER
argument_list|)
expr_stmt|;
name|legacyArtifactDiscoverer
operator|=
operator|(
name|LegacyArtifactDiscoverer
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_LEG_ARTIFACT_DISCOVERER
argument_list|)
expr_stmt|;
name|defaultMetadataDiscoverer
operator|=
operator|(
name|DefaultMetadataDiscoverer
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_DEF_METADATA_DISCOVERER
argument_list|)
expr_stmt|;
name|indexFactory
operator|=
operator|(
name|RepositoryIndexingFactory
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_IDX_FACTORY
argument_list|)
expr_stmt|;
name|layout
operator|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_REPO_LAYOUT
argument_list|)
expr_stmt|;
name|repoFactory
operator|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_REPO_FACTORY
argument_list|)
expr_stmt|;
try|try
block|{
name|List
name|artifacts
decl_stmt|;
if|if
condition|(
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_LAYOUT
argument_list|)
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|artifacts
operator|=
name|defaultArtifactDiscoverer
operator|.
name|discoverArtifacts
argument_list|(
name|defaultRepository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|includeSnapshots
argument_list|)
expr_stmt|;
name|indexArtifact
argument_list|(
name|artifacts
argument_list|,
name|indexPath
argument_list|,
name|defaultRepository
argument_list|)
expr_stmt|;
name|List
name|models
init|=
name|defaultArtifactDiscoverer
operator|.
name|discoverStandalonePoms
argument_list|(
name|defaultRepository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|convertSnapshots
argument_list|)
decl_stmt|;
name|indexPom
argument_list|(
name|models
argument_list|,
name|indexPath
argument_list|,
name|defaultRepository
argument_list|)
expr_stmt|;
name|List
name|metadataList
init|=
name|defaultMetadataDiscoverer
operator|.
name|discoverMetadata
argument_list|(
operator|new
name|File
argument_list|(
name|defaultRepository
operator|.
name|getBasedir
argument_list|()
argument_list|)
argument_list|,
name|blacklistedPatterns
argument_list|)
decl_stmt|;
name|indexMetadata
argument_list|(
name|metadataList
argument_list|,
name|indexPath
argument_list|,
operator|new
name|File
argument_list|(
name|defaultRepository
operator|.
name|getBasedir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|get
argument_list|(
name|MAP_LAYOUT
argument_list|)
operator|.
name|equals
argument_list|(
literal|"legacy"
argument_list|)
condition|)
block|{
name|artifacts
operator|=
name|legacyArtifactDiscoverer
operator|.
name|discoverArtifacts
argument_list|(
name|defaultRepository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|includeSnapshots
argument_list|)
expr_stmt|;
name|indexArtifact
argument_list|(
name|artifacts
argument_list|,
name|indexPath
argument_list|,
name|defaultRepository
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|me
parameter_list|)
block|{
name|me
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"[DiscovererJob] DiscovererJob has finished executing."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Index the artifacts in the list      *      * @param artifacts  the artifacts to be indexed      * @param indexPath  the path to the index file      * @param repository the repository where the artifacts are located      */
specifier|private
name|void
name|indexArtifact
parameter_list|(
name|List
name|artifacts
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
name|ArtifactRepositoryIndex
name|artifactIndex
init|=
name|indexFactory
operator|.
name|createArtifactRepositoryIndex
argument_list|(
name|indexPath
argument_list|,
name|repository
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|artifactIndex
operator|.
name|indexArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RepositoryIndexException
condition|)
block|{
throw|throw
operator|(
name|RepositoryIndexException
operator|)
name|e
throw|;
block|}
block|}
if|if
condition|(
name|artifactIndex
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|artifactIndex
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|artifactIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Index the metadata in the list      *      * @param metadataList   the metadata to be indexed      * @param indexPath      the path to the index file      * @param repositoryBase the repository where the metadata are located      */
specifier|private
name|void
name|indexMetadata
parameter_list|(
name|List
name|metadataList
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|File
name|repositoryBase
parameter_list|)
throws|throws
name|RepositoryIndexException
throws|,
name|MalformedURLException
block|{
name|String
name|repoDir
init|=
name|repositoryBase
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
name|repoFactory
operator|.
name|createArtifactRepository
argument_list|(
literal|"repository"
argument_list|,
name|repoDir
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MetadataRepositoryIndex
name|metadataIndex
init|=
name|indexFactory
operator|.
name|createMetadataRepositoryIndex
argument_list|(
name|indexPath
argument_list|,
name|repository
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|metadataList
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryMetadata
name|repoMetadata
init|=
operator|(
name|RepositoryMetadata
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|metadataIndex
operator|.
name|index
argument_list|(
name|repoMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RepositoryIndexException
condition|)
block|{
throw|throw
operator|(
name|RepositoryIndexException
operator|)
name|e
throw|;
block|}
block|}
if|if
condition|(
name|metadataIndex
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|metadataIndex
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|metadataIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Index the poms in the list      *      * @param models     list of poms that will be indexed      * @param indexPath  the path to the index      * @param repository the artifact repository where the poms were discovered      */
specifier|private
name|void
name|indexPom
parameter_list|(
name|List
name|models
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
name|PomRepositoryIndex
name|pomIndex
init|=
name|indexFactory
operator|.
name|createPomRepositoryIndex
argument_list|(
name|indexPath
argument_list|,
name|repository
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|models
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Model
name|model
init|=
operator|(
name|Model
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|pomIndex
operator|.
name|indexPom
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RepositoryIndexException
condition|)
block|{
throw|throw
operator|(
name|RepositoryIndexException
operator|)
name|e
throw|;
block|}
block|}
if|if
condition|(
name|pomIndex
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|pomIndex
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|pomIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

