begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|web
operator|.
name|action
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|ProxyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|ProxyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|configuration
operator|.
name|MavenProxyPropertyLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|configuration
operator|.
name|ProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|configuration
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ResourceDoesNotExistException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_comment
comment|/**  * This is the Action class responsible for processing artifact request,  * relies on the RestfulActionMapper to map the artifact request to this action.  *  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="org.apache.maven.repository.manager.web.action.RepositoryProxyAction"  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryProxyAction
implements|implements
name|Action
block|{
comment|/**      * logger instance      */
specifier|protected
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RepositoryProxyAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NOTFOUND
init|=
literal|"notFound"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROXYERROR
init|=
literal|"proxyError"
decl_stmt|;
comment|/**      * file requested by the client,      * TODO: validate the requestd file using na interceptor      */
specifier|private
name|String
name|requestedFile
decl_stmt|;
comment|/**      * main proxy logic      *      * @plexus.requirement role="org.apache.maven.repository.proxy.ProxyManager"      */
specifier|private
name|ProxyManager
name|repositoryProxyManager
decl_stmt|;
comment|/**      * configuration for the ProxyManager      *      * @plexus.requirement      */
specifier|private
name|ProxyConfiguration
name|proxyConfig
decl_stmt|;
comment|/**      * the inputstream for the artifact file      */
specifier|private
name|FileInputStream
name|artifactStream
decl_stmt|;
comment|/**      * the cached artifact file      */
specifier|private
name|File
name|cachedFile
decl_stmt|;
comment|/**      * proxy configuration file      * TODO: recode the configuration part when Configuration is finalized      * TODO: this is only temporary      */
specifier|private
name|String
name|configFile
decl_stmt|;
comment|// setters and getters
specifier|public
name|void
name|setProxyManager
parameter_list|(
name|ProxyManager
name|manager
parameter_list|)
block|{
name|repositoryProxyManager
operator|=
name|manager
expr_stmt|;
block|}
specifier|public
name|void
name|setRequestedFile
parameter_list|(
name|String
name|reqFile
parameter_list|)
block|{
name|requestedFile
operator|=
name|reqFile
expr_stmt|;
block|}
specifier|public
name|String
name|getRequestedFile
parameter_list|()
block|{
return|return
name|requestedFile
return|;
block|}
specifier|public
name|FileInputStream
name|getArtifactStream
parameter_list|()
block|{
return|return
name|artifactStream
return|;
block|}
specifier|public
name|File
name|getCachedFile
parameter_list|()
block|{
return|return
name|cachedFile
return|;
block|}
specifier|public
name|void
name|setConfigFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|configFile
operator|=
name|fileName
expr_stmt|;
block|}
comment|/**      * entry-point      */
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|IOException
throws|,
name|ValidationException
block|{
try|try
block|{
name|MavenProxyPropertyLoader
name|loader
init|=
operator|new
name|MavenProxyPropertyLoader
argument_list|()
decl_stmt|;
name|proxyConfig
operator|=
name|loader
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProxyManager
operator|.
name|setConfiguration
argument_list|(
name|proxyConfig
argument_list|)
expr_stmt|;
name|cachedFile
operator|=
name|repositoryProxyManager
operator|.
name|get
argument_list|(
name|requestedFile
argument_list|)
expr_stmt|;
name|artifactStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|cachedFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[not found] "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|NOTFOUND
return|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[proxy error] "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|PROXYERROR
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[not found] "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|NOTFOUND
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
block|}
end_class

end_unit

