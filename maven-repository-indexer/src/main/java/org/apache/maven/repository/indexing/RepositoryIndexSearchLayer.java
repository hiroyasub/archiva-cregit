begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|ReportPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|SinglePhraseQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  *<p/>  * This class is to be invoked or called by the action class for  * general and advanced searching. It uses the DefaultRepositoryIndexSearcher  * to perform the search and constructs the search result objects to be  * returned to tha webapp action class.  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryIndexSearchLayer
block|{
specifier|private
name|RepositoryIndex
name|index
decl_stmt|;
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
specifier|private
name|List
name|searchResults
decl_stmt|;
specifier|private
name|List
name|generalSearchResults
decl_stmt|;
comment|/**      * Class constructor      *      * @param index      */
specifier|public
name|RepositoryIndexSearchLayer
parameter_list|(
name|RepositoryIndex
name|index
parameter_list|,
name|ArtifactFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
comment|/**      * Method for searching the keyword in all the fields in the index. "Query everything" search.      * The index fields will be retrieved and query objects will be constructed using the      * optional (OR) CompoundQuery.      *      * @param keyword      * @return      * @throws RepositoryIndexSearchException      */
specifier|public
name|List
name|searchGeneral
parameter_list|(
name|String
name|keyword
parameter_list|)
throws|throws
name|RepositoryIndexSearchException
block|{
name|generalSearchResults
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RepositoryIndex
operator|.
name|FIELDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|qry
init|=
operator|new
name|SinglePhraseQuery
argument_list|(
name|RepositoryIndex
operator|.
name|FIELDS
index|[
name|i
index|]
argument_list|,
name|keyword
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|searchAdvanced
argument_list|(
name|qry
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SearchResult
name|result
init|=
operator|(
name|SearchResult
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|map
init|=
name|result
operator|.
name|getFieldMatches
argument_list|()
decl_stmt|;
name|Set
name|entrySet
init|=
name|map
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|entrySet
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|SearchResult
name|result2
init|=
name|createSearchResult
argument_list|(
name|result
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|map
argument_list|,
name|keyword
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|generalSearchResults
operator|.
name|add
argument_list|(
name|result2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|generalSearchResults
return|;
block|}
comment|/**      * Method for "advanced search" of the index      *      * @param qry the query object that will be used for searching the index      * @return      * @throws RepositoryIndexSearchException      */
specifier|public
name|List
name|searchAdvanced
parameter_list|(
name|Query
name|qry
parameter_list|)
throws|throws
name|RepositoryIndexSearchException
block|{
name|RepositoryIndexSearcher
name|searcher
init|=
operator|new
name|DefaultRepositoryIndexSearcher
argument_list|(
name|index
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|searchResults
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|List
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|qry
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|hits
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryIndexSearchHit
name|hit
init|=
operator|(
name|RepositoryIndexSearchHit
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|SearchResult
name|result
init|=
operator|new
name|SearchResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|hit
operator|.
name|isHashMap
argument_list|()
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|hit
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|setArtifact
argument_list|(
operator|(
name|Artifact
operator|)
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|ARTIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|fields
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_CLASSES
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_CLASSES
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGES
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGES
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_FILES
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGING
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGING
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_SHA1
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_SHA1
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_MD5
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_MD5
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFieldMatches
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|searchResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hit
operator|.
name|isModel
argument_list|()
condition|)
block|{
name|Model
name|model
init|=
operator|(
name|Model
operator|)
name|hit
operator|.
name|getObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RepositoryIndex
operator|.
name|MODEL_FIELDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|createSearchResult
argument_list|(
name|model
argument_list|,
name|RepositoryIndex
operator|.
name|MODEL_FIELDS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|searchResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|hit
operator|.
name|isMetadata
argument_list|()
condition|)
block|{
comment|//@todo what about metadata objects?
comment|//                RepositoryMetadata metadata = (RepositoryMetadata) hit.getObject();
block|}
block|}
return|return
name|searchResults
return|;
block|}
comment|/**      * Method for checking if the artifact already exists in the search result list.      *      * @param groupId    the group id of the artifact      * @param artifactId the artifact id of the artifact      * @param version    the version of the artifact      * @return the int index number of the artifact in the search result      */
specifier|private
name|int
name|getListIndex
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|List
name|list
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SearchResult
name|result
init|=
operator|(
name|SearchResult
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
name|artifact
init|=
name|result
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|groupId
argument_list|)
operator|&&
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactId
argument_list|)
operator|&&
name|artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|index
return|;
block|}
name|index
operator|++
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Method to create the unique artifact id to represent the artifact in the repository      *      * @param groupId    the artifact groupId      * @param artifactId the artifact artifactId      * @param version    the artifact version      * @return the String id to uniquely represent the artifact      */
specifier|private
name|String
name|getId
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
return|;
block|}
comment|/**      * Method to get the matching values (packages, classes and files) in the      * given string to be tokenized.      *      * @param tokenizeStr the string to be tokenized      * @param key         the map key      * @param resultMap   the map to be populated      * @param keyword     the value to be matched      * @return the map that contains the matched values      */
specifier|private
name|Map
name|getArtifactHits
parameter_list|(
name|String
name|tokenizeStr
parameter_list|,
name|String
name|key
parameter_list|,
name|Map
name|resultMap
parameter_list|,
name|String
name|keyword
parameter_list|)
block|{
name|List
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|tokenizeStr
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|str
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|keyword
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resultMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|resultMap
return|;
block|}
comment|/**      * Method to create SearchResult object from a given HashMap. Used for general search results      *      * @param artifact the retrieved artifact from the index      * @param map      the HashMap object that contains the values for the search result      * @param keyword  the query term      * @return the SearchResult object      */
specifier|private
name|SearchResult
name|createSearchResult
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Map
name|map
parameter_list|,
name|String
name|keyword
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|int
name|index
init|=
name|getListIndex
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|generalSearchResults
argument_list|)
decl_stmt|;
name|SearchResult
name|result
decl_stmt|;
name|Map
name|resultMap
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|result
operator|=
operator|(
name|SearchResult
operator|)
name|generalSearchResults
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|generalSearchResults
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|resultMap
operator|=
name|result
operator|.
name|getFieldMatches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|SearchResult
argument_list|()
expr_stmt|;
name|result
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|resultMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
comment|// the searched field is either the class, package or file field
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_CLASSES
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGES
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_FILES
argument_list|)
condition|)
block|{
name|resultMap
operator|=
name|getArtifactHits
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|,
name|field
argument_list|,
name|resultMap
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_SHA1
argument_list|)
operator|||
operator|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_MD5
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGING
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// the searched field is either the md5, sha1 or packaging field
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|keyword
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
operator|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|keyword
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|resultMap
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_DEPENDENCIES
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PLUGINS_BUILD
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PLUGINS_REPORT
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_LICENSE_URLS
argument_list|)
condition|)
block|{
name|List
name|contents
init|=
operator|(
name|List
operator|)
name|map
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|List
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|contents
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|str
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|keyword
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|resultMap
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|setFieldMatches
argument_list|(
name|resultMap
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Method to create a SearchResult object from the given model. Used for advanced search results      *      * @param model the Model object that contains the values for the search result      * @param field the field whose value is to be retrieved      * @return a SearchResult object      */
specifier|private
name|SearchResult
name|createSearchResult
parameter_list|(
name|Model
name|model
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|int
name|index
init|=
name|getListIndex
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|,
name|searchResults
argument_list|)
decl_stmt|;
name|SearchResult
name|result
decl_stmt|;
name|Map
name|map
decl_stmt|;
comment|// the object already exists in the search result list
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|result
operator|=
operator|(
name|SearchResult
operator|)
name|searchResults
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|searchResults
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|map
operator|=
name|result
operator|.
name|getFieldMatches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|SearchResult
argument_list|()
expr_stmt|;
name|result
operator|.
name|setArtifact
argument_list|(
name|factory
operator|.
name|createBuildArtifact
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|,
name|model
operator|.
name|getPackaging
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
comment|// get the matched value with the query term
name|List
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_LICENSE_URLS
argument_list|)
condition|)
block|{
name|values
operator|=
name|getLicenseUrls
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_DEPENDENCIES
argument_list|)
condition|)
block|{
name|values
operator|=
name|getDependencies
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PLUGINS_BUILD
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getBuild
argument_list|()
operator|!=
literal|null
operator|&&
name|model
operator|.
name|getBuild
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
name|getBuildPlugins
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PLUGINS_REPORT
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getReporting
argument_list|()
operator|!=
literal|null
operator|&&
name|model
operator|.
name|getReporting
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
name|getReportPlugins
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGING
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getPackaging
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|RepositoryIndex
operator|.
name|FLD_PACKAGING
argument_list|,
name|model
operator|.
name|getPackaging
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setFieldMatches
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Method for getting the query term hits or matches in the pom's license urls.      *      * @param model the Model object that contains the pom values      * @return a List of matched license urls      */
specifier|private
name|List
name|getLicenseUrls
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|List
name|licenseUrls
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|licenseList
init|=
name|model
operator|.
name|getLicenses
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|licenseList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|License
name|license
init|=
operator|(
name|License
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|licenseUrls
operator|.
name|add
argument_list|(
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|licenseUrls
return|;
block|}
comment|/**      * Method for getting the hits or matches in the dependencies specified in the pom      *      * @param model the Model object that contains the pom values      * @return a List of matched dependencies      */
specifier|private
name|List
name|getDependencies
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|List
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|dependencyList
init|=
name|model
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|dependencyList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|getId
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dependencies
return|;
block|}
comment|/**      * Method for getting the hits or matches in the build plugins specified in the pom      *      * @param model the Model object that contains the pom values      * @return a List of matched build plugins      */
specifier|private
name|List
name|getBuildPlugins
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|List
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|plugins
init|=
name|model
operator|.
name|getBuild
argument_list|()
operator|.
name|getPlugins
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|plugins
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Plugin
name|plugin
init|=
operator|(
name|Plugin
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|getId
argument_list|(
name|plugin
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Method for getting the hits or matches in the reporting plugins specified in the pom      *      * @param model the Model object that contains the pom values      * @return a List of matched reporting plugins      */
specifier|private
name|List
name|getReportPlugins
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|List
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|plugins
init|=
name|model
operator|.
name|getReporting
argument_list|()
operator|.
name|getPlugins
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|plugins
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ReportPlugin
name|plugin
init|=
operator|(
name|ReportPlugin
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|getId
argument_list|(
name|plugin
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

