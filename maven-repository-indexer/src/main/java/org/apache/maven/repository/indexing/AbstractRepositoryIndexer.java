begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0    *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_comment
comment|/**  *  * @author Edwin Punzalan  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRepositoryIndexer
implements|implements
name|RepositoryIndexer
block|{
specifier|protected
name|String
name|indexPath
decl_stmt|;
specifier|protected
name|boolean
name|indexOpen
decl_stmt|;
specifier|protected
name|IndexReader
name|indexReader
decl_stmt|;
specifier|protected
name|IndexWriter
name|indexWriter
decl_stmt|;
specifier|public
name|void
name|optimize
parameter_list|()
throws|throws
name|RepositoryIndexerException
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
literal|"Unable to optimize index on a closed index"
argument_list|)
throw|;
block|}
try|try
block|{
name|indexWriter
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
literal|"Failed to optimize index"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|indexOpen
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|RepositoryIndexerException
block|{
if|if
condition|(
name|indexOpen
condition|)
block|{
try|try
block|{
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexWriter
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|indexReader
operator|!=
literal|null
condition|)
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexReader
operator|=
literal|null
expr_stmt|;
block|}
name|indexOpen
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|RepositoryIndexerException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|indexOpen
condition|)
block|{
name|validateIndex
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|getIndexWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexWriter
operator|==
literal|null
condition|)
block|{
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|indexPath
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|getIndexReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexReader
operator|==
literal|null
condition|)
block|{
name|indexReader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
operator|new
name|StandardAnalyzer
argument_list|()
return|;
block|}
specifier|protected
name|void
name|validateIndex
parameter_list|()
throws|throws
name|RepositoryIndexerException
block|{
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|indexDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|indexDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
try|try
block|{
name|getIndexReader
argument_list|()
expr_stmt|;
name|Collection
name|fields
init|=
name|indexReader
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|indexFields
init|=
name|getIndexFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|indexFields
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fields
operator|.
name|contains
argument_list|(
name|indexFields
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
literal|"The Field "
operator|+
name|indexFields
index|[
name|idx
index|]
operator|+
literal|" does not exist in "
operator|+
literal|"index path "
operator|+
name|indexPath
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping validation of an empty index in: "
operator|+
name|indexDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
literal|"Specified index path is not a directory: "
operator|+
name|indexDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|indexPath
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New index directory created in: "
operator|+
name|indexDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|indexOpen
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

