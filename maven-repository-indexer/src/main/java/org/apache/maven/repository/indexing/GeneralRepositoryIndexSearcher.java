begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|CompoundQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|SinglePhraseQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Maria Odea Ching  *<p/>  *         This class is for "query everything" search in the repository index.  *         It creates the Query object that will be passed to the DefaultRepositoryIndexSearcher  *         for searching through all the fields in the index.  */
end_comment

begin_class
specifier|public
class|class
name|GeneralRepositoryIndexSearcher
block|{
specifier|private
name|RepositoryIndex
name|index
decl_stmt|;
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
comment|/**      * Class constructor      *      * @param index      */
specifier|public
name|GeneralRepositoryIndexSearcher
parameter_list|(
name|RepositoryIndex
name|index
parameter_list|,
name|ArtifactFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
comment|/**      * Method for searching the keyword in all the fields in the index. The index fields will be retrieved      * and query objects will be constructed using the optional (OR) CompoundQuery.      *      * @param keyword      * @return      * @throws RepositoryIndexSearchException      */
specifier|public
name|List
name|search
parameter_list|(
name|String
name|keyword
parameter_list|)
throws|throws
name|RepositoryIndexSearchException
block|{
name|List
name|qryList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|FIELDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|qry
init|=
operator|new
name|SinglePhraseQuery
argument_list|(
name|index
operator|.
name|FIELDS
index|[
name|i
index|]
argument_list|,
name|keyword
argument_list|)
decl_stmt|;
name|qryList
operator|.
name|add
argument_list|(
name|qry
argument_list|)
expr_stmt|;
block|}
name|CompoundQuery
name|cQry
init|=
operator|new
name|CompoundQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|qryList
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|cQry
operator|.
name|or
argument_list|(
operator|(
name|Query
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RepositoryIndexSearcher
name|searcher
init|=
operator|new
name|DefaultRepositoryIndexSearcher
argument_list|(
name|index
argument_list|,
name|factory
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|cQry
argument_list|)
return|;
block|}
block|}
end_class

end_unit

