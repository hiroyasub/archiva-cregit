begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndex
import|;
end_import

begin_comment
comment|/**  * Query object that handles range queries (presently used for dates).  *  * @author Maria Odea Ching  * @author Brett Porter  */
end_comment

begin_class
specifier|public
class|class
name|RangeQuery
implements|implements
name|Query
block|{
comment|/**      * Whether values equal to the boundaries are included in the query results.      */
specifier|private
specifier|final
name|boolean
name|inclusive
decl_stmt|;
comment|/**      * The lower bound.      */
specifier|private
specifier|final
name|QueryTerm
name|begin
decl_stmt|;
comment|/**      * The upper bound.      */
specifier|private
specifier|final
name|QueryTerm
name|end
decl_stmt|;
comment|/**      * Constructor.      *      * @param begin     the lower bound      * @param end       the upper bound      * @param inclusive whether to include the boundaries in the query      */
specifier|private
name|RangeQuery
parameter_list|(
name|QueryTerm
name|begin
parameter_list|,
name|QueryTerm
name|end
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|inclusive
operator|=
name|inclusive
expr_stmt|;
block|}
comment|/**      * Create an open range, including all results.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createOpenRange
parameter_list|()
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a bounded range, excluding the endpoints.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createExclusiveRange
parameter_list|(
name|QueryTerm
name|begin
parameter_list|,
name|QueryTerm
name|end
parameter_list|)
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a bounded range, including the endpoints.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createInclusiveRange
parameter_list|(
name|QueryTerm
name|begin
parameter_list|,
name|QueryTerm
name|end
parameter_list|)
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a range that is greater than or equal to a given term.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createGreaterThanOrEqualToRange
parameter_list|(
name|QueryTerm
name|begin
parameter_list|)
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
name|begin
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a range that is greater than a given term.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createGreaterThanRange
parameter_list|(
name|QueryTerm
name|begin
parameter_list|)
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
name|begin
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a range that is less than or equal to a given term.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createLessThanOrEqualToRange
parameter_list|(
name|QueryTerm
name|end
parameter_list|)
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
literal|null
argument_list|,
name|end
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a range that is less than a given term.      *      * @return the query object      */
specifier|public
specifier|static
name|RangeQuery
name|createLessThanRange
parameter_list|(
name|QueryTerm
name|end
parameter_list|)
block|{
return|return
operator|new
name|RangeQuery
argument_list|(
literal|null
argument_list|,
name|end
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|QueryTerm
name|getBegin
parameter_list|()
block|{
return|return
name|begin
return|;
block|}
specifier|public
name|QueryTerm
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
specifier|public
name|boolean
name|isInclusive
parameter_list|()
block|{
return|return
name|inclusive
return|;
block|}
comment|/**      * @todo! this seems like the wrong place for this (it's back to front - create the query from the index      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|createLuceneQuery
parameter_list|(
name|RepositoryIndex
name|index
parameter_list|)
block|{
name|Term
name|beginTerm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|begin
operator|!=
literal|null
condition|)
block|{
name|beginTerm
operator|=
operator|new
name|Term
argument_list|(
name|begin
operator|.
name|getField
argument_list|()
argument_list|,
name|begin
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Term
name|endTerm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|end
operator|!=
literal|null
condition|)
block|{
name|endTerm
operator|=
operator|new
name|Term
argument_list|(
name|end
operator|.
name|getField
argument_list|()
argument_list|,
name|end
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RangeQuery
argument_list|(
name|beginTerm
argument_list|,
name|endTerm
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
block|}
end_class

end_unit

