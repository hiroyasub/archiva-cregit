begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_comment
comment|/**  * Class created specifically to index artifacts  *  * @author Edwin Punzalan  */
end_comment

begin_class
specifier|public
class|class
name|ArtifactRepositoryIndexAnalyzer
extends|extends
name|Analyzer
block|{
specifier|private
name|Analyzer
name|defaultAnalyzer
decl_stmt|;
comment|/**      * constructor to for this analyzer      *      * @param defaultAnalyzer the analyzer to use as default for the general fields of the artifact indeces      */
specifier|public
name|ArtifactRepositoryIndexAnalyzer
parameter_list|(
name|Analyzer
name|defaultAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|defaultAnalyzer
operator|=
name|defaultAnalyzer
expr_stmt|;
block|}
comment|/**      * Method called by lucence during indexing operations      *      * @param fieldName the field name that the lucene object is currently processing      * @param reader    a Reader object to the index stream      * @return an analyzer to specific to the field name or the default analyzer if none is present      */
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|TokenStream
name|tokenStream
decl_stmt|;
if|if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|tokenStream
operator|=
operator|new
name|VersionTokenizer
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenStream
operator|=
name|defaultAnalyzer
operator|.
name|tokenStream
argument_list|(
name|fieldName
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStream
return|;
block|}
comment|/**      * Class used to tokenize an artifact's version.      */
specifier|private
specifier|static
class|class
name|VersionTokenizer
extends|extends
name|CharTokenizer
block|{
comment|/**          * Constructor with the required reader to the index stream          *          * @param reader the Reader object of the index stream          */
name|VersionTokenizer
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
comment|/**          * method that lucene calls to check tokenization of a stream character          *          * @param character char currently being processed          * @return true if the char is a token, false if the char is a stop char          */
specifier|protected
name|boolean
name|isTokenChar
parameter_list|(
name|char
name|character
parameter_list|)
block|{
return|return
name|character
operator|!=
literal|'.'
operator|&&
name|character
operator|!=
literal|'-'
return|;
block|}
block|}
block|}
end_class

end_unit

