begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumberTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|record
operator|.
name|RepositoryIndexRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|record
operator|.
name|StandardArtifactIndexRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Convert the standard index record to a Lucene document.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @todo use enum for field names  */
end_comment

begin_class
specifier|public
class|class
name|LuceneStandardIndexRecordConverter
implements|implements
name|LuceneIndexRecordConverter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FLD_FILENAME
init|=
literal|"filename"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_GROUPID
init|=
literal|"groupId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_ARTIFACTID
init|=
literal|"artifactId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_TYPE
init|=
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_CLASSIFIER
init|=
literal|"classifier"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_PACKAGING
init|=
literal|"packaging"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_REPOSITORY
init|=
literal|"repo"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_LAST_MODIFIED
init|=
literal|"lastModified"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_FILE_SIZE
init|=
literal|"fileSize"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_MD5
init|=
literal|"md5"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_SHA1
init|=
literal|"sha1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_CLASSES
init|=
literal|"classes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_PLUGINPREFIX
init|=
literal|"pluginPrefix"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_FILES
init|=
literal|"files"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_INCEPTION_YEAR
init|=
literal|"inceptionYear"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_PROJECT_NAME
init|=
literal|"projectName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLD_PROJECT_DESCRIPTION
init|=
literal|"projectDesc"
decl_stmt|;
specifier|public
name|Document
name|convert
parameter_list|(
name|RepositoryIndexRecord
name|record
parameter_list|)
block|{
name|StandardArtifactIndexRecord
name|standardIndexRecord
init|=
operator|(
name|StandardArtifactIndexRecord
operator|)
name|record
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_FILENAME
argument_list|,
name|standardIndexRecord
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_GROUPID
argument_list|,
name|standardIndexRecord
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_ARTIFACTID
argument_list|,
name|standardIndexRecord
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_VERSION
argument_list|,
name|standardIndexRecord
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_TYPE
argument_list|,
name|standardIndexRecord
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_CLASSIFIER
argument_list|,
name|standardIndexRecord
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_PACKAGING
argument_list|,
name|standardIndexRecord
operator|.
name|getPackaging
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_REPOSITORY
argument_list|,
name|standardIndexRecord
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_LAST_MODIFIED
argument_list|,
name|DateTools
operator|.
name|timeToString
argument_list|(
name|standardIndexRecord
operator|.
name|getLastModified
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_FILE_SIZE
argument_list|,
name|NumberTools
operator|.
name|longToString
argument_list|(
name|standardIndexRecord
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_MD5
argument_list|,
name|standardIndexRecord
operator|.
name|getMd5Checksum
argument_list|()
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_SHA1
argument_list|,
name|standardIndexRecord
operator|.
name|getSha1Checksum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|standardIndexRecord
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_CLASSES
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|standardIndexRecord
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|standardIndexRecord
operator|.
name|getFiles
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_FILES
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|standardIndexRecord
operator|.
name|getFiles
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_PLUGINPREFIX
argument_list|,
name|standardIndexRecord
operator|.
name|getPluginPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|addUntokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_INCEPTION_YEAR
argument_list|,
name|standardIndexRecord
operator|.
name|getInceptionYear
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_PROJECT_NAME
argument_list|,
name|standardIndexRecord
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
name|addTokenizedField
argument_list|(
name|document
argument_list|,
name|FLD_PROJECT_DESCRIPTION
argument_list|,
name|standardIndexRecord
operator|.
name|getProjectDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|/* TODO: add later         document.add( Field.Keyword( FLD_LICENSE_URLS, "" ) );         document.add( Field.Keyword( FLD_DEPENDENCIES, "" ) );         document.add( Field.Keyword( FLD_PLUGINS_REPORT, "" ) );         document.add( Field.Keyword( FLD_PLUGINS_BUILD, "" ) ); */
return|return
name|document
return|;
block|}
specifier|private
specifier|static
name|void
name|addUntokenizedField
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addTokenizedField
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

