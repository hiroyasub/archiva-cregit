begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|DefaultArtifactVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|ReportPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|DigesterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_comment
comment|/**  * Class used to index Artifact objects in a specific repository  *  * @author Edwin Punzalan  */
end_comment

begin_class
specifier|public
class|class
name|ArtifactRepositoryIndex
extends|extends
name|AbstractRepositoryIndex
block|{
specifier|private
name|Digester
name|digester
decl_stmt|;
comment|/**      * Class constructor      *      * @param indexPath  the path where the lucene index will be created/updated.      * @param repository the repository where the indexed artifacts are located      * @param digester   the digester object to generate the checksum strings      */
specifier|public
name|ArtifactRepositoryIndex
parameter_list|(
name|File
name|indexPath
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|,
name|Digester
name|digester
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
name|super
argument_list|(
name|indexPath
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|this
operator|.
name|digester
operator|=
name|digester
expr_stmt|;
block|}
comment|/**      * Indexes the artifacts found within the specified list.  Deletes existing indices for the same artifacts first,      * before proceeding on adding them into the index.      *      * @param artifactList      * @throws RepositoryIndexException      */
specifier|public
name|void
name|indexArtifacts
parameter_list|(
name|List
name|artifactList
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
try|try
block|{
name|deleteDocuments
argument_list|(
name|getTermList
argument_list|(
name|artifactList
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexException
argument_list|(
literal|"Failed to delete an index document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|addDocuments
argument_list|(
name|getDocumentList
argument_list|(
name|artifactList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a list of Lucene Term object used in index deletion      *      * @param artifactList      * @return List of Term object      */
specifier|private
name|List
name|getTermList
parameter_list|(
name|List
name|artifactList
parameter_list|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|artifacts
init|=
name|artifactList
operator|.
name|iterator
argument_list|()
init|;
name|artifacts
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|artifacts
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FLD_ID
argument_list|,
name|ARTIFACT
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"pom"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FLD_ID
argument_list|,
name|POM
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Creates a list of Lucene documents, used for index additions      *      * @param artifactList      * @return      */
specifier|private
name|List
name|getDocumentList
parameter_list|(
name|List
name|artifactList
parameter_list|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|artifacts
init|=
name|artifactList
operator|.
name|iterator
argument_list|()
init|;
name|artifacts
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|artifacts
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|list
operator|.
name|add
argument_list|(
name|createDocument
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
comment|// TODO: log the problem and record it as a repository error
comment|// We log the problem, but do not add the document to the list to be added to the index
block|}
if|if
condition|(
literal|"pom"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|Model
name|model
init|=
operator|new
name|MavenXpp3Reader
argument_list|()
operator|.
name|read
argument_list|(
operator|new
name|FileReader
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createDocument
argument_list|(
name|artifact
argument_list|,
name|model
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: log the problem and record it as a repository error
comment|// We log the problem, but do not add the document to the list to be added to the index
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
comment|// TODO: log the problem and record it as a repository error
comment|// We log the problem, but do not add the document to the list to be added to the index
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
comment|// TODO: log the problem and record it as a repository error
comment|// We log the problem, but do not add the document to the list to be added to the index
block|}
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Method to index a given artifact      *      * @param artifact the Artifact object to be indexed      * @throws RepositoryIndexException      */
specifier|public
name|void
name|indexArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
name|indexArtifacts
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Lucene Document from an artifact; used for index additions      *      * @param artifact      * @return      * @throws RepositoryIndexException      */
specifier|private
name|Document
name|createDocument
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
name|StringBuffer
name|classes
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|packages
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|files
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|sha1sum
decl_stmt|;
name|String
name|md5sum
decl_stmt|;
try|try
block|{
name|sha1sum
operator|=
name|digester
operator|.
name|createChecksum
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|,
name|Digester
operator|.
name|SHA1
argument_list|)
expr_stmt|;
name|md5sum
operator|=
name|digester
operator|.
name|createChecksum
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|,
name|Digester
operator|.
name|MD5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexException
argument_list|(
literal|"Unable to create a checksum"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|// TODO: improve
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|ZipFile
name|jar
init|=
operator|new
name|ZipFile
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|entries
init|=
name|jar
operator|.
name|entries
argument_list|()
init|;
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
operator|(
name|ZipEntry
operator|)
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|addIfClassEntry
argument_list|(
name|entry
argument_list|,
name|classes
argument_list|)
condition|)
block|{
name|addClassPackage
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|packages
argument_list|)
expr_stmt|;
block|}
name|addFile
argument_list|(
name|entry
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ZipException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexException
argument_list|(
literal|"Error reading from artifact file: "
operator|+
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexException
argument_list|(
literal|"Error reading from artifact file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_ID
argument_list|,
name|ARTIFACT
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_NAME
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_GROUPID
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_ARTIFACTID
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_VERSION
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_SHA1
argument_list|,
name|sha1sum
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_MD5
argument_list|,
name|md5sum
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_CLASSES
argument_list|,
name|classes
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PACKAGES
argument_list|,
name|packages
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_FILES
argument_list|,
name|files
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
name|FLD_DOCTYPE
argument_list|,
name|ARTIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_LASTUPDATE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PLUGINPREFIX
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_LICENSE_URLS
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_DEPENDENCIES
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_PLUGINS_REPORT
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_PLUGINS_BUILD
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_PLUGINS_ALL
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|artifact
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PACKAGING
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Method to add a class package to the buffer of packages      *      * @param name     the complete path name of the class      * @param packages the packages buffer      */
specifier|private
name|void
name|addClassPackage
parameter_list|(
name|String
name|name
parameter_list|,
name|StringBuffer
name|packages
parameter_list|)
block|{
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|packageName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
if|if
condition|(
name|packages
operator|.
name|indexOf
argument_list|(
name|packageName
argument_list|)
operator|<
literal|0
condition|)
block|{
name|packages
operator|.
name|append
argument_list|(
name|packageName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Method to add the zip entry as a file list      *      * @param entry the zip entry to be added      * @param files the buffer of files to update      */
specifier|private
name|void
name|addFile
parameter_list|(
name|ZipEntry
name|entry
parameter_list|,
name|StringBuffer
name|files
parameter_list|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|files
operator|.
name|indexOf
argument_list|(
name|name
operator|+
literal|"\n"
argument_list|)
operator|<
literal|0
condition|)
block|{
name|files
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|enumerateGroupIds
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|indexReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|getIndexPath
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|groups
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexReader
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|indexReader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|FLD_GROUPID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
name|sortedGroups
init|=
operator|new
name|ArrayList
argument_list|(
name|groups
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedGroups
argument_list|)
expr_stmt|;
return|return
name|sortedGroups
return|;
block|}
specifier|public
name|List
name|getArtifacts
parameter_list|(
name|String
name|groupId
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|indexReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|getIndexPath
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|artifactIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexReader
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|indexReader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getField
argument_list|(
name|FLD_GROUPID
argument_list|)
operator|.
name|stringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
name|artifactIds
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|FLD_ARTIFACTID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
name|sortedArtifactIds
init|=
operator|new
name|ArrayList
argument_list|(
name|artifactIds
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedArtifactIds
argument_list|)
expr_stmt|;
return|return
name|sortedArtifactIds
return|;
block|}
specifier|public
name|List
name|getVersions
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|indexReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|getIndexPath
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|versions
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexReader
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|indexReader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getField
argument_list|(
name|FLD_GROUPID
argument_list|)
operator|.
name|stringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|groupId
argument_list|)
operator|&&
name|doc
operator|.
name|getField
argument_list|(
name|FLD_ARTIFACTID
argument_list|)
operator|.
name|stringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
comment|// DefaultArtifactVersion is used for correct ordering
name|versions
operator|.
name|add
argument_list|(
operator|new
name|DefaultArtifactVersion
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|FLD_VERSION
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
name|sortedVersions
init|=
operator|new
name|ArrayList
argument_list|(
name|versions
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedVersions
argument_list|)
expr_stmt|;
return|return
name|sortedVersions
return|;
block|}
comment|/**      * Creates a Lucene Document from a Model; used for index additions      *      * @param pom      * @return      * @throws RepositoryIndexException      */
specifier|private
name|Document
name|createDocument
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Model
name|pom
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
name|String
name|version
init|=
name|pom
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// It was inherited
name|version
operator|=
name|pom
operator|.
name|getParent
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
comment|// TODO: do we need to use the general inheritence mechanism or do we only want to search within those defined in this pom itself?
comment|// I think searching just this one is adequate, and it is only necessary to inherit the version and group ID [BP]
block|}
name|String
name|groupId
init|=
name|pom
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupId
operator|==
literal|null
condition|)
block|{
name|groupId
operator|=
name|pom
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_ID
argument_list|,
name|POM
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_GROUPID
argument_list|,
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_ARTIFACTID
argument_list|,
name|pom
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_VERSION
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_PACKAGING
argument_list|,
name|pom
operator|.
name|getPackaging
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_SHA1
argument_list|,
name|getChecksum
argument_list|(
name|Digester
operator|.
name|SHA1
argument_list|,
name|pomFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_MD5
argument_list|,
name|getChecksum
argument_list|(
name|Digester
operator|.
name|MD5
argument_list|,
name|pomFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexLicenseUrls
argument_list|(
name|doc
argument_list|,
name|pom
argument_list|)
expr_stmt|;
name|indexDependencies
argument_list|(
name|doc
argument_list|,
name|pom
argument_list|)
expr_stmt|;
name|boolean
name|hasPlugins
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pom
operator|.
name|getBuild
argument_list|()
operator|!=
literal|null
operator|&&
name|pom
operator|.
name|getBuild
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|!=
literal|null
operator|&&
name|pom
operator|.
name|getBuild
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasPlugins
operator|=
literal|true
expr_stmt|;
name|indexPlugins
argument_list|(
name|doc
argument_list|,
name|FLD_PLUGINS_BUILD
argument_list|,
name|pom
operator|.
name|getBuild
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|indexPlugins
argument_list|(
name|doc
argument_list|,
name|FLD_PLUGINS_ALL
argument_list|,
name|pom
operator|.
name|getBuild
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PLUGINS_BUILD
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pom
operator|.
name|getReporting
argument_list|()
operator|!=
literal|null
operator|&&
name|pom
operator|.
name|getReporting
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|!=
literal|null
operator|&&
name|pom
operator|.
name|getReporting
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasPlugins
operator|=
literal|true
expr_stmt|;
name|indexReportPlugins
argument_list|(
name|doc
argument_list|,
name|FLD_PLUGINS_REPORT
argument_list|,
name|pom
operator|.
name|getReporting
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|indexReportPlugins
argument_list|(
name|doc
argument_list|,
name|FLD_PLUGINS_ALL
argument_list|,
name|pom
operator|.
name|getReporting
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PLUGINS_REPORT
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasPlugins
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PLUGINS_ALL
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
name|FLD_DOCTYPE
argument_list|,
name|POM
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: do we need to add all these empty fields?
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_PLUGINPREFIX
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_LASTUPDATE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_CLASSES
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_PACKAGES
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|FLD_FILES
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Method to index license urls found inside the passed pom      *      * @param doc the index object to create the fields for the license urls      * @param pom the Model object to be indexed      */
specifier|private
name|void
name|indexLicenseUrls
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Model
name|pom
parameter_list|)
block|{
name|List
name|licenseList
init|=
name|pom
operator|.
name|getLicenses
argument_list|()
decl_stmt|;
if|if
condition|(
name|licenseList
operator|!=
literal|null
operator|&&
name|licenseList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|licenses
init|=
name|licenseList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|licenses
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|License
name|license
init|=
operator|(
name|License
operator|)
name|licenses
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|license
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_LICENSE_URLS
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_LICENSE_URLS
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Method to index declared dependencies found inside the passed pom      *      * @param doc the index object to create the fields for the dependencies      * @param pom the Model object to be indexed      */
specifier|private
name|void
name|indexDependencies
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Model
name|pom
parameter_list|)
block|{
name|List
name|dependencyList
init|=
name|pom
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencyList
operator|!=
literal|null
operator|&&
name|dependencyList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|dependencies
init|=
name|dependencyList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|dependencies
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|dependencies
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|getId
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_DEPENDENCIES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|FLD_DEPENDENCIES
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Method to index plugins to a specified index field      *      * @param doc     the index object to create the fields for the plugins      * @param field   the index field to store the passed plugin      * @param plugins the iterator to the list of plugins to be indexed      */
specifier|private
name|void
name|indexPlugins
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|field
parameter_list|,
name|Iterator
name|plugins
parameter_list|)
block|{
while|while
condition|(
name|plugins
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Plugin
name|plugin
init|=
operator|(
name|Plugin
operator|)
name|plugins
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|getId
argument_list|(
name|plugin
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|field
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Method to index report plugins to a specified index field      *      * @param doc     the index object to create the fields for the report plugins      * @param field   the index field to store the passed report plugin      * @param plugins the iterator to the list of report plugins to be indexed      */
specifier|private
name|void
name|indexReportPlugins
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|field
parameter_list|,
name|Iterator
name|plugins
parameter_list|)
block|{
while|while
condition|(
name|plugins
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReportPlugin
name|plugin
init|=
operator|(
name|ReportPlugin
operator|)
name|plugins
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|getId
argument_list|(
name|plugin
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|plugin
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|field
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Method to generate the computed checksum of an existing file using the specified algorithm.      *      * @param algorithm the algorithm to be used to generate the checksum      * @param file      the file to match the generated checksum      * @return a string representing the checksum      * @throws RepositoryIndexException      */
specifier|private
name|String
name|getChecksum
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|RepositoryIndexException
block|{
try|try
block|{
return|return
name|digester
operator|.
name|createChecksum
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|)
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexException
argument_list|(
literal|"Failed to create checksum"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Method to create the unique artifact id to represent the artifact in the repository      *      * @param groupId    the artifact groupId      * @param artifactId the artifact artifactId      * @param version    the artifact version      * @return the String id to uniquely represent the artifact      */
specifier|private
name|String
name|getId
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
return|;
block|}
specifier|public
name|void
name|deleteArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryIndexException
block|{
name|deleteDocuments
argument_list|(
name|getTermList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

