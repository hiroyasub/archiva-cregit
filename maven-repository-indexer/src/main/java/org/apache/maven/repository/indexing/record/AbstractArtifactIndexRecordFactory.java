begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|record
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|DigesterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_comment
comment|/**  * Base class for the index record factories.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractArtifactIndexRecordFactory
extends|extends
name|AbstractLogEnabled
implements|implements
name|RepositoryIndexRecordFactory
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|Digester
name|digester
decl_stmt|;
specifier|protected
name|String
name|readChecksum
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
name|String
name|checksum
decl_stmt|;
try|try
block|{
name|checksum
operator|=
name|digester
operator|.
name|createChecksum
argument_list|(
name|file
argument_list|,
name|algorithm
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error getting checksum for artifact file, leaving empty in index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|checksum
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|checksum
return|;
block|}
specifier|protected
name|List
name|readFilesInArchive
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipFile
name|zipFile
init|=
operator|new
name|ZipFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|List
name|files
decl_stmt|;
try|try
block|{
name|files
operator|=
operator|new
name|ArrayList
argument_list|(
name|zipFile
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|entries
init|=
name|zipFile
operator|.
name|entries
argument_list|()
init|;
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
operator|(
name|ZipEntry
operator|)
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|zipFile
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// TODO: verify if class is public or protected (this might require the original ZipEntry)
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
operator|&&
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"$"
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|protected
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|ZipFile
name|zipFile
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|zipFile
operator|!=
literal|null
condition|)
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
end_class

end_unit

