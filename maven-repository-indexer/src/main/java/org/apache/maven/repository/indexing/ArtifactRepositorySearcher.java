begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0    *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|DefaultArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|ArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|DefaultArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_comment
comment|/**  * This class searches the index for existing artifacts that contains the  * specified query string.  *   */
end_comment

begin_class
specifier|public
class|class
name|ArtifactRepositorySearcher
implements|implements
name|RepositorySearcher
block|{
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUPID
init|=
literal|"groupId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACTID
init|=
literal|"artifactId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAR_TYPE
init|=
literal|"jar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_TYPE
init|=
literal|"xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|POM_TYPE
init|=
literal|"pom"
decl_stmt|;
comment|/** 	 * Constructor 	 *  	 * @param indexPath 	 * @param repository 	 */
specifier|public
name|ArtifactRepositorySearcher
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|factory
operator|=
operator|new
name|DefaultArtifactFactory
argument_list|()
expr_stmt|;
try|try
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|ie
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
operator|new
name|ArtifactRepositoryIndexAnalyzer
argument_list|(
operator|new
name|SimpleAnalyzer
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Search the artifact that contains the query string in the specified 	 * search field. 	 *  	 * @param queryString 	 * @param searchField 	 * @return 	 */
specifier|public
name|List
name|searchArtifact
parameter_list|(
name|String
name|queryString
parameter_list|,
name|String
name|searchField
parameter_list|)
block|{
name|List
name|artifactList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|searchField
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|qry
init|=
name|parser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|qry
argument_list|)
decl_stmt|;
comment|//System.out.println("HITS SIZE --> " + hits.length());
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// System.out.println("===========================");
comment|// System.out.println("NAME :: " + (String) doc.get(NAME));
comment|// System.out.println("GROUP ID :: " + (String)
comment|// doc.get(GROUPID));
comment|// System.out.println("ARTIFACT ID :: " + (String)
comment|// doc.get(ARTIFACTID));
comment|//System.out.println("VERSION :: " + (String)
comment|// doc.get(VERSION));
comment|// System.out.println("SHA! :: " + (String) doc.get(SHA1));
comment|// System.out.println("MD5 :: " + (String) doc.get(MD5));
comment|// System.out.println("CLASSES :: " + (String)
comment|// doc.get(CLASSES));
comment|// System.out.println("PACKAGES :: " + (String)
comment|// doc.get(PACKAGES));
comment|// System.out.println("FILES :: " + (String) doc.get(FILES));
comment|// System.out.println("===========================");
name|String
name|name
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|JAR_TYPE
argument_list|)
condition|)
block|{
name|type
operator|=
name|JAR_TYPE
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|XML_TYPE
argument_list|)
operator|||
operator|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|POM_TYPE
argument_list|)
condition|)
block|{
name|type
operator|=
name|POM_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
name|VERSION
argument_list|)
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
name|GROUPID
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
name|ARTIFACTID
argument_list|)
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
name|type
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
comment|/* 					 * Artifact artifact = factory.createArtifact((String) 					 * doc.get(GROUPID), (String) doc.get(ARTIFACTID), (String) 					 * doc.get(VERSION), "", type); 					 */
name|artifact
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
operator|+
literal|"/"
operator|+
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|artifactList
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|artifactList
return|;
block|}
block|}
end_class

end_unit

