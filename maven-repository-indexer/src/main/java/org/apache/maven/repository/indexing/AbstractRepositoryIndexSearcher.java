begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|CompoundQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|CompoundQueryTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|SinglePhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Abstract Class to hold common codes for the different RepositoryIndexSearcher  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRepositoryIndexSearcher
extends|extends
name|AbstractLogEnabled
implements|implements
name|RepositoryIndexSearcher
block|{
specifier|protected
name|RepositoryIndex
name|index
decl_stmt|;
comment|/**      * Constructor      *      * @param index the index object      */
specifier|protected
name|AbstractRepositoryIndexSearcher
parameter_list|(
name|RepositoryIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
comment|/**      * @see RepositoryIndexSearcher#search(org.apache.maven.repository.indexing.query.Query)      */
specifier|public
name|List
name|search
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|RepositoryIndexSearchException
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|luceneQuery
decl_stmt|;
try|try
block|{
name|luceneQuery
operator|=
name|createLuceneQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexSearchException
argument_list|(
literal|"Unable to construct query: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IndexSearcher
name|searcher
decl_stmt|;
try|try
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|index
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexSearchException
argument_list|(
literal|"Unable to open index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
name|docs
decl_stmt|;
try|try
block|{
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|luceneQuery
argument_list|)
decl_stmt|;
name|docs
operator|=
name|buildList
argument_list|(
name|hits
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryIndexSearchException
argument_list|(
literal|"Unable to search index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Unable to close index searcher"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docs
return|;
block|}
comment|/**      * Method to create a lucene Query object from a single query phrase      *      * @param field the index field name to search into      * @param value the index field value to match the field with      * @return a lucene Query object representing the query phrase field = value      * @throws ParseException      */
specifier|private
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|createLuceneQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ParseException
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|qry
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isKeywordField
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|qry
operator|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|field
argument_list|,
name|index
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qry
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|qry
return|;
block|}
comment|/**      * Method to create a lucene Query object by converting a prepared Query object      *      * @param query the prepared Query object to be converted into a lucene Query object      * @return a lucene Query object to represent the passed Query object      * @throws ParseException      */
specifier|private
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|createLuceneQuery
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|retVal
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|CompoundQuery
condition|)
block|{
name|BooleanQuery
name|booleanQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|CompoundQuery
name|compoundQuery
init|=
operator|(
name|CompoundQuery
operator|)
name|query
decl_stmt|;
name|List
name|queries
init|=
name|compoundQuery
operator|.
name|getQueries
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|queries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CompoundQueryTerm
name|subquery
init|=
operator|(
name|CompoundQueryTerm
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|luceneQuery
init|=
name|createLuceneQuery
argument_list|(
name|subquery
operator|.
name|getQuery
argument_list|()
argument_list|)
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|luceneQuery
argument_list|,
name|subquery
operator|.
name|isRequired
argument_list|()
argument_list|,
name|subquery
operator|.
name|isProhibited
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|retVal
operator|=
name|booleanQuery
expr_stmt|;
block|}
else|else
block|{
name|SinglePhraseQuery
name|singlePhraseQuery
init|=
operator|(
name|SinglePhraseQuery
operator|)
name|query
decl_stmt|;
name|retVal
operator|=
name|createLuceneQuery
argument_list|(
name|singlePhraseQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|singlePhraseQuery
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * Create a list of artifact objects from the result set.      *      * @param hits the search result set      * @return List      * @throws IOException      */
specifier|private
name|List
name|buildList
parameter_list|(
name|Hits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|List
name|artifactList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|artifactList
operator|.
name|add
argument_list|(
name|createSearchedObjectFromIndexDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifactList
return|;
block|}
specifier|protected
specifier|abstract
name|Object
name|createSearchedObjectFromIndexDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
function_decl|;
block|}
end_class

end_unit

