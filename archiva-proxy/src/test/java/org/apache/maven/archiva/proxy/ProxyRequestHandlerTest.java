begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Versioning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MetadataXpp3Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ResourceDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|TransferFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|Wagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Test the proxy handler.  *  * @author Brett Porter  */
end_comment

begin_class
specifier|public
class|class
name|ProxyRequestHandlerTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|ProxyRequestHandler
name|requestHandler
decl_stmt|;
specifier|private
name|List
name|proxiedRepositories
decl_stmt|;
specifier|private
name|List
name|legacyProxiedRepositories
decl_stmt|;
specifier|private
name|ArtifactRepository
name|defaultManagedRepository
decl_stmt|;
specifier|private
name|ArtifactRepository
name|legacyManagedRepository
decl_stmt|;
specifier|private
name|ArtifactRepository
name|proxiedRepository1
decl_stmt|;
specifier|private
name|ArtifactRepository
name|proxiedRepository2
decl_stmt|;
specifier|private
name|ArtifactRepository
name|legacyProxiedRepository
decl_stmt|;
specifier|private
name|ArtifactRepositoryLayout
name|defaultLayout
decl_stmt|;
specifier|private
name|ArtifactRepositoryFactory
name|factory
decl_stmt|;
specifier|private
name|MockControl
name|wagonMockControl
decl_stmt|;
specifier|private
name|Wagon
name|wagonMock
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ArtifactRepositoryPolicy
name|DEFAULT_POLICY
init|=
operator|new
name|ArtifactRepositoryPolicy
argument_list|(
literal|true
argument_list|,
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_NEVER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ArtifactRepositoryPolicy
name|ALWAYS_UPDATE_POLICY
init|=
operator|new
name|ArtifactRepositoryPolicy
argument_list|(
literal|true
argument_list|,
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|UTC_TIMEZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|requestHandler
operator|=
operator|(
name|ProxyRequestHandler
operator|)
name|lookup
argument_list|(
name|ProxyRequestHandler
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryFactory
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|File
name|repoLocation
init|=
name|getTestFile
argument_list|(
literal|"target/test-repository/managed"
argument_list|)
decl_stmt|;
comment|// faster only to delete this one before copying, the others are done case by case
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|repoLocation
argument_list|,
literal|"org/apache/maven/test/get-merged-metadata"
argument_list|)
argument_list|)
expr_stmt|;
name|copyDirectoryStructure
argument_list|(
name|getTestFile
argument_list|(
literal|"src/test/repositories/managed"
argument_list|)
argument_list|,
name|repoLocation
argument_list|)
expr_stmt|;
name|defaultLayout
operator|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|defaultManagedRepository
operator|=
name|createRepository
argument_list|(
literal|"managed-repository"
argument_list|,
name|repoLocation
argument_list|)
expr_stmt|;
name|repoLocation
operator|=
name|getTestFile
argument_list|(
literal|"target/test-repository/legacy-managed"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoLocation
argument_list|)
expr_stmt|;
name|copyDirectoryStructure
argument_list|(
name|getTestFile
argument_list|(
literal|"src/test/repositories/legacy-managed"
argument_list|)
argument_list|,
name|repoLocation
argument_list|)
expr_stmt|;
name|ArtifactRepositoryLayout
name|legacyLayout
init|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"legacy"
argument_list|)
decl_stmt|;
name|legacyManagedRepository
operator|=
name|createRepository
argument_list|(
literal|"managed-repository"
argument_list|,
name|repoLocation
argument_list|,
name|legacyLayout
argument_list|)
expr_stmt|;
name|File
name|location
init|=
name|getTestFile
argument_list|(
literal|"src/test/repositories/proxied1"
argument_list|)
decl_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
name|getTestFile
argument_list|(
literal|"src/test/repositories/proxied2"
argument_list|)
expr_stmt|;
name|proxiedRepository2
operator|=
name|createRepository
argument_list|(
literal|"proxied2"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|=
name|getTestFile
argument_list|(
literal|"src/test/repositories/legacy-proxied"
argument_list|)
expr_stmt|;
name|legacyProxiedRepository
operator|=
name|createRepository
argument_list|(
literal|"legacy-proxied"
argument_list|,
name|location
argument_list|,
name|legacyLayout
argument_list|)
expr_stmt|;
name|legacyProxiedRepositories
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|createProxiedRepository
argument_list|(
name|legacyProxiedRepository
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|=
name|MockControl
operator|.
name|createNiceControl
argument_list|(
name|Wagon
operator|.
name|class
argument_list|)
expr_stmt|;
name|wagonMock
operator|=
operator|(
name|Wagon
operator|)
name|wagonMockControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|WagonDelegate
name|delegate
init|=
operator|(
name|WagonDelegate
operator|)
name|lookup
argument_list|(
name|Wagon
operator|.
name|ROLE
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|delegate
operator|.
name|setDelegate
argument_list|(
name|wagonMock
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetDefaultLayoutNotPresent
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: timestamp preservation requires support for that in wagon
comment|//        assertEquals( "Check file timestamp", proxiedFile.lastModified(), file.lastModified() );
block|}
specifier|public
name|void
name|testGetDefaultLayoutAlreadyPresent
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|originalModificationTime
init|=
name|expectedFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file timestamp is not that of proxy"
argument_list|,
name|proxiedFile
operator|.
name|lastModified
argument_list|()
operator|==
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file timestamp is that of original managed file"
argument_list|,
name|originalModificationTime
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetDefaultLayoutRemoteUpdate
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFile
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetWhenInBothProxiedRepos
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-both-proxies/1.0/get-in-both-proxies-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|proxiedFile
operator|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetInSecondProxiedRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-second-proxy/1.0/get-in-second-proxy-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNotFoundInAnyProxies
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/does-not-exist/1.0/does-not-exist-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"File returned was: "
operator|+
name|file
operator|+
literal|"; should have got a not found exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// expected, but check file was not created
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetInSecondProxiedRepoFirstFails
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-second-proxy/1.0/get-in-second-proxy-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetButAllRepositoriesFail
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-second-proxy/1.0/get-in-second-proxy-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepository2
operator|=
name|createRepository
argument_list|(
literal|"proxied2"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository1
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository1
argument_list|)
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository2
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository2
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// as expected
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository1
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository2
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: do not want failures to present as a not found!
comment|// TODO: How much information on each failure should we pass back to the user vs. logging in the proxy?
block|}
block|}
specifier|public
name|void
name|testGetInSecondProxiedRepoFirstHardFails
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-second-proxy/1.0/get-in-second-proxy-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createHardFailProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|TransferFailedException
name|failedException
init|=
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
decl_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
name|failedException
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
comment|// expect a failure
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check cause"
argument_list|,
name|failedException
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetInSecondProxiedRepoFirstFailsFromCache
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
comment|// fail from the cache, even though it is in the first repo now
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-both-proxies/1.0/get-in-both-proxies-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|,
name|DEFAULT_POLICY
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|proxiedFile
operator|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetInSecondProxiedRepoFirstHardFailsFromCache
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
comment|// fail from the cache, even though it is in the first repo now
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-both-proxies/1.0/get-in-both-proxies-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createHardFailProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|,
name|DEFAULT_POLICY
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
comment|// expect a failure
name|assertTrue
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetInSecondProxiedRepoFirstFailsDisabledCacheFailure
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-second-proxy/1.0/get-in-second-proxy-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|,
name|DEFAULT_POLICY
argument_list|)
expr_stmt|;
name|proxiedArtifactRepository
operator|.
name|setCacheFailures
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetWhenInBothProxiedReposFirstHasExpiredCacheFailure
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-in-both-proxies/1.0/get-in-both-proxies-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|,
name|ALWAYS_UPDATE_POLICY
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|proxiedFile
operator|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAlwaysAlreadyPresent
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAlwaysAlreadyPresentRemovedFromProxies
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-removed-from-proxies/1.0/get-removed-from-proxies-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAlwaysWithCachedFailure
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|,
name|DEFAULT_POLICY
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRemovesTemporaryFileOnSuccess
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check temporary file removed"
argument_list|,
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRemovesTemporaryFileOnError
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository1
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository1
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// as expected
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check temporary file removed"
argument_list|,
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetRemovesTemporaryChecksumFileOnSuccess
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-only/1.0/get-checksum-sha1-only-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1.tmp"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check temporary file removed"
argument_list|,
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRemovesTemporaryChecksumFileOnError
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-only/1.0/get-checksum-sha1-only-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository1
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository1
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|mockFailedChecksums
argument_list|(
name|path
argument_list|,
name|expectedFile
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// as expected
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check temporary file removed"
argument_list|,
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tempFile
operator|=
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1.tmp"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check temporary file removed"
argument_list|,
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetChecksumBothCorrect
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-both-right/1.0/get-checksum-both-right-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|checksumFile
init|=
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|checksumFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check checksum"
argument_list|,
literal|"066d76e459f7782c312c31e8a11b3c0f1e3e43a7 *get-checksum-both-right-1.0.jar"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|checksumFile
argument_list|,
literal|null
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCorrectSha1NoMd5
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-only/1.0/get-checksum-sha1-only-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|checksumFile
init|=
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|checksumFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check checksum"
argument_list|,
literal|"748a3a013bf5eacf2bbb40a2ac7d37889b728837 *get-checksum-sha1-only-1.0.jar"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|checksumFile
argument_list|,
literal|null
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCorrectSha1BadMd5
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-bad-md5/1.0/get-checksum-sha1-bad-md5-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|checksumFile
init|=
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|checksumFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check checksum"
argument_list|,
literal|"3dd1a3a57b807d3ef3fbc6013d926c891cbb8670 *get-checksum-sha1-bad-md5-1.0.jar"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|checksumFile
argument_list|,
literal|null
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCorrectMd5NoSha1
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-md5-only/1.0/get-checksum-md5-only-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|checksumFile
init|=
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|checksumFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check checksum"
argument_list|,
literal|"f3af5201bf8da801da37db8842846e1c *get-checksum-md5-only-1.0.jar"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|checksumFile
argument_list|,
literal|null
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCorrectMd5BadSha1
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-md5-bad-sha1/1.0/get-checksum-md5-bad-sha1-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|checksumFile
init|=
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|checksumFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check checksum"
argument_list|,
literal|"8a02aa67549d27b2a03cd4547439c6d3 *get-checksum-md5-bad-sha1-1.0.jar"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|checksumFile
argument_list|,
literal|null
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetWithNoChecksums
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetBadMd5BadSha1
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-both-bad/1.0/get-checksum-both-bad-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// expect a failure
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|expectedFile
argument_list|,
literal|"md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|expectedFile
argument_list|,
literal|"sha1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetChecksumTransferFailed
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|TransferFailedException
throws|,
name|AuthorizationException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-only/1.0/get-checksum-sha1-only-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|=
name|createRepository
argument_list|(
literal|"proxied1"
argument_list|,
literal|"test://..."
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository1
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository1
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|mockFailedChecksums
argument_list|(
name|path
argument_list|,
name|expectedFile
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// as expected
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|expectedFile
argument_list|,
literal|"md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file not created"
argument_list|,
name|getChecksumFile
argument_list|(
name|expectedFile
argument_list|,
literal|"sha1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetAlwaysBadChecksumPresentLocallyAbsentRemote
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-bad-local-checksum/1.0/get-bad-local-checksum-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check checksum removed"
argument_list|,
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check checksum removed"
argument_list|,
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".md5"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetChecksumPresentInManagedRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-from-managed-repo/1.0/get-checksum-from-managed-repo-1.0.jar.sha1"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAlwaysChecksumPresentInManagedRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-from-managed-repo/1.0/get-checksum-from-managed-repo-1.0.jar.sha1"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetChecksumNotPresentInManagedRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-only/1.0/get-checksum-sha1-only-1.0.jar.sha1"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// expected
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetAlwaysChecksumNotPresentInManagedRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-checksum-sha1-only/1.0/get-checksum-sha1-only-1.0.jar.sha1"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// expected
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetMetadataNotPresent
parameter_list|()
throws|throws
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/dummy-artifact/1.0/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Found file: "
operator|+
name|file
operator|+
literal|"; but was expecting a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// expected
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetMetadataProxied
parameter_list|()
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-metadata/1.0/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|getExpectedMetadata
argument_list|(
literal|"get-default-metadata"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataMergeRepos
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-merged-metadata/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|getExpectedMetadata
argument_list|(
literal|"get-merged-metadata"
argument_list|,
name|getVersioning
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0.9"
block|,
literal|"1.0"
block|,
literal|"2.0"
block|,
literal|"3.0"
block|,
literal|"5.0"
block|,
literal|"4.0"
block|}
argument_list|)
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataRemovedFromProxies
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-removed-metadata/1.0/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetReleaseMetadataNotExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-updated-metadata/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".metadata-proxied1"
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getReleases
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_NEVER
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getSnapshots
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check content doesn't match proxy version"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetSnapshotMetadataNotExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-updated-metadata/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".metadata-proxied1"
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getReleases
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getSnapshots
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_NEVER
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check content doesn't match proxy version"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetReleaseMetadataExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-updated-metadata/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".metadata-proxied1"
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getReleases
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getSnapshots
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_NEVER
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|getExpectedMetadata
argument_list|(
literal|"get-updated-metadata"
argument_list|,
name|getVersioning
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"2.0"
block|}
argument_list|)
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check content doesn't match proxy version"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetSnapshotMetadataExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-updated-metadata/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".metadata-proxied1"
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getReleases
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_NEVER
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getSnapshots
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|getExpectedMetadata
argument_list|(
literal|"get-updated-metadata"
argument_list|,
literal|"1.0-SNAPSHOT"
argument_list|,
name|getVersioning
argument_list|(
literal|"20050831.111213"
argument_list|,
literal|2
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check content doesn't match proxy version"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* TODO: test keeps failing in the reactor - needs to be made more robust before re-enabling     public void testGetMetadataNotUpdated()         throws ResourceDoesNotExistException, ProxyException, IOException     {         String path = "org/apache/maven/test/get-updated-metadata/maven-metadata.xml";         File expectedFile = new File( defaultManagedRepository.getBasedir(), path );         String expectedContents =             FileUtils.readFileToString( new File( defaultManagedRepository.getBasedir(), path ), null );          assertTrue( expectedFile.exists() );          File proxiedFile = new File( proxiedRepository1.getBasedir(), path );         new File( expectedFile.getParentFile(), ".metadata-proxied1" ).setLastModified( proxiedFile.lastModified() );          proxiedRepository1.getReleases().setUpdatePolicy( ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS );         File file = requestHandler.get( path, proxiedRepositories, defaultManagedRepository );         assertEquals( "Check file matches", expectedFile, file );         assertTrue( "Check file created", file.exists() );         assertEquals( "Check content matches", expectedContents, FileUtils.readFileToString( file, null ) );          String unexpectedContents = FileUtils.readFileToString( proxiedFile, null );         assertFalse( "Check content doesn't match proxy version",                      unexpectedContents.equals( FileUtils.readFileToString( file, null ) ) );     } */
specifier|public
name|void
name|testGetMetadataUpdated
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-updated-metadata/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".metadata-proxied1"
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|getExpectedMetadata
argument_list|(
literal|"get-updated-metadata"
argument_list|,
name|getVersioning
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"2.0"
block|}
argument_list|)
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check content doesn't match old version"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAlwaysMetadata
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-updated-metadata/maven-metadata.xml"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|getExpectedMetadata
argument_list|(
literal|"get-updated-metadata"
argument_list|,
name|getVersioning
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"2.0"
block|}
argument_list|)
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check content matches"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check content doesn't match old version"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSnapshotNonExistant
parameter_list|()
throws|throws
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/does-not-exist/1.0-SNAPSHOT/does-not-exist-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"File returned was: "
operator|+
name|file
operator|+
literal|"; should have got a not found exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
comment|// expected, but check file was not created
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTimestampDrivenSnapshotNotPresentAlready
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-timestamped-snapshot/1.0-SNAPSHOT/get-timestamped-snapshot-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNewerTimestampDrivenSnapshotOnFirstRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-present-timestamped-snapshot/1.0-SNAPSHOT/get-present-timestamped-snapshot-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFile
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOlderTimestampDrivenSnapshotOnFirstRepo
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-present-timestamped-snapshot/1.0-SNAPSHOT/get-present-timestamped-snapshot-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFile
operator|.
name|setLastModified
argument_list|(
name|getFutureDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getSnapshots
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* TODO: won't pass until Wagon preserves timestamp on download     public void testNewerTimestampDrivenSnapshotOnSecondRepoThanFirstNotPresentAlready()         throws ResourceDoesNotExistException, ProxyException, IOException, ParseException     {         String path =             "org/apache/maven/test/get-timestamped-snapshot-in-both/1.0-SNAPSHOT/get-timestamped-snapshot-in-both-1.0-SNAPSHOT.jar";         File expectedFile = new File( defaultManagedRepository.getBasedir(), path );          assertFalse( expectedFile.exists() );          File repoLocation = getTestFile( "target/test-repository/proxied1" );         FileUtils.deleteDirectory( repoLocation );         copyDirectoryStructure( getTestFile( "src/test/repositories/proxied1" ), repoLocation );         proxiedRepository1 = createRepository( "proxied1", repoLocation );          new File( proxiedRepository1.getBasedir(), path ).setLastModified( getPastDate().getTime() );          proxiedRepositories.clear();         proxiedRepositories.add( createProxiedRepository( proxiedRepository1 ) );         proxiedRepositories.add( createProxiedRepository( proxiedRepository2 ) );          File file = requestHandler.get( path, proxiedRepositories, defaultManagedRepository );          assertEquals( "Check file matches", expectedFile, file );         assertTrue( "Check file created", file.exists() );          File proxiedFile = new File( proxiedRepository2.getBasedir(), path );         String expectedContents = FileUtils.readFileToString( proxiedFile, null );         assertEquals( "Check file contents", expectedContents, FileUtils.readFileToString( file, null ) );          proxiedFile = new File( proxiedRepository1.getBasedir(), path );         String unexpectedContents = FileUtils.readFileToString( proxiedFile, null );         assertFalse( "Check file contents", unexpectedContents.equals( FileUtils.readFileToString( file, null ) ) );     } */
specifier|public
name|void
name|testOlderTimestampDrivenSnapshotOnSecondRepoThanFirstNotPresentAlready
parameter_list|()
throws|throws
name|ParseException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-timestamped-snapshot-in-both/1.0-SNAPSHOT/get-timestamped-snapshot-in-both-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|repoLocation
init|=
name|getTestFile
argument_list|(
literal|"target/test-repository/proxied2"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoLocation
argument_list|)
expr_stmt|;
name|copyDirectoryStructure
argument_list|(
name|getTestFile
argument_list|(
literal|"src/test/repositories/proxied2"
argument_list|)
argument_list|,
name|repoLocation
argument_list|)
expr_stmt|;
name|proxiedRepository2
operator|=
name|createRepository
argument_list|(
literal|"proxied2"
argument_list|,
name|repoLocation
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|proxiedFile
operator|=
operator|new
name|File
argument_list|(
name|proxiedRepository2
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimestampDrivenSnapshotNotExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-present-timestamped-snapshot/1.0-SNAPSHOT/get-present-timestamped-snapshot-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|proxiedFile
operator|.
name|setLastModified
argument_list|(
name|getFutureDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimestampDrivenSnapshotNotUpdated
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-present-timestamped-snapshot/1.0-SNAPSHOT/get-present-timestamped-snapshot-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|setLastModified
argument_list|(
name|proxiedFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepository1
operator|.
name|getSnapshots
argument_list|()
operator|.
name|setUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimestampDrivenSnapshotNotPresentAlreadyExpiredCacheFailure
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-timestamped-snapshot/1.0-SNAPSHOT/get-timestamped-snapshot-1.0-SNAPSHOT.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|proxiedRepository1
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|,
name|ALWAYS_UPDATE_POLICY
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|proxiedArtifactRepository
argument_list|)
expr_stmt|;
name|proxiedRepositories
operator|.
name|add
argument_list|(
name|createProxiedRepository
argument_list|(
name|proxiedRepository2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check failure"
argument_list|,
name|proxiedArtifactRepository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataDrivenSnapshotNotPresentAlready
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-metadata-snapshot/1.0-SNAPSHOT/get-metadata-snapshot-1.0-20050831.101112-1.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataDrivenSnapshotRemoteUpdate
parameter_list|()
throws|throws
name|ResourceDoesNotExistException
throws|,
name|ProxyException
throws|,
name|IOException
throws|,
name|ParseException
block|{
comment|// Metadata driven snapshots (using a full timestamp) are treated like a release. It is the timing of the
comment|// updates to the metadata files that triggers which will be downloaded
name|String
name|path
init|=
literal|"org/apache/maven/test/get-present-metadata-snapshot/1.0-SNAPSHOT/get-present-metadata-snapshot-1.0-20050831.101112-1.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFile
operator|.
name|setLastModified
argument_list|(
name|getPastDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLegacyManagedRepoGetNotPresent
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|legacyManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|legacyManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: timestamp preservation requires support for that in wagon
comment|//        assertEquals( "Check file timestamp", proxiedFile.lastModified(), file.lastModified() );
block|}
specifier|public
name|void
name|testLegacyManagedRepoGetAlreadyPresent
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|legacyManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|originalModificationTime
init|=
name|expectedFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|legacyManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|proxiedRepository1
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file timestamp is not that of proxy"
argument_list|,
name|proxiedFile
operator|.
name|lastModified
argument_list|()
operator|==
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file timestamp is that of original managed file"
argument_list|,
name|originalModificationTime
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLegacyProxyRepoGetNotPresent
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|expectedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|legacyProxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|legacyProxiedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"org.apache.maven.test/jars/get-default-layout-1.0.jar"
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: timestamp preservation requires support for that in wagon
comment|//        assertEquals( "Check file timestamp", proxiedFile.lastModified(), file.lastModified() );
block|}
specifier|public
name|void
name|testLegacyProxyRepoGetAlreadyPresent
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|originalModificationTime
init|=
name|expectedFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|legacyProxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|legacyProxiedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file timestamp is not that of proxy"
argument_list|,
name|proxiedFile
operator|.
name|lastModified
argument_list|()
operator|==
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file timestamp is that of original managed file"
argument_list|,
name|originalModificationTime
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLegacyManagedAndProxyRepoGetNotPresent
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|legacyManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|legacyProxiedRepositories
argument_list|,
name|legacyManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|legacyProxiedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: timestamp preservation requires support for that in wagon
comment|//        assertEquals( "Check file timestamp", proxiedFile.lastModified(), file.lastModified() );
block|}
specifier|public
name|void
name|testLegacyManagedAndProxyRepoGetAlreadyPresent
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|legacyManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|expectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|originalModificationTime
init|=
name|expectedFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|legacyProxiedRepositories
argument_list|,
name|legacyManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check file created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file contents"
argument_list|,
name|expectedContents
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|legacyProxiedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|unexpectedContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|proxiedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check file contents"
argument_list|,
name|unexpectedContents
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check file timestamp is not that of proxy"
argument_list|,
name|proxiedFile
operator|.
name|lastModified
argument_list|()
operator|==
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check file timestamp is that of original managed file"
argument_list|,
name|originalModificationTime
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLegacyRequestConvertedToDefaultPathInManagedRepo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check that a Maven1 legacy request is translated to a maven2 path in
comment|// the managed repository.
name|String
name|legacyPath
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|legacyPath
argument_list|,
name|legacyProxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDefaultRequestConvertedToLegacyPathInManagedRepo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check that a Maven2 default request is translated to a legacy path in
comment|// the managed repository.
name|String
name|legacyPath
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|String
name|path
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|legacyManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|legacyPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|legacyManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRelocateMaven1Request
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-relocated-artefact-1.0.jar"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoublyRelocateMaven1Request
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-doubly-relocated-artefact-1.0.jar"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRelocateMaven1PomRequest
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/poms/get-relocated-artefact-with-pom-1.0.pom"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org/apache/maven/test/get-default-layout-present-with-pom/1.0/get-default-layout-present-with-pom-1.0.pom"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRelocateMaven1PomRequestMissingTarget
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/poms/get-relocated-artefact-1.0.pom"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.pom"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to find target POM"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRelocateMaven1ChecksumRequest
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-relocated-artefact-1.0.jar.md5"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar.md5"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
literal|"org.apache.maven.test/jars/get-relocated-artefact-1.0.jar.sha1"
expr_stmt|;
name|relocatedPath
operator|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar.sha1"
expr_stmt|;
name|expectedFile
operator|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Checksum was not present, should not be found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRelocateMaven2Request
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-relocated-artefact/1.0/get-relocated-artefact-1.0.jar"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|defaultManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|defaultManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRelocateMaven2RequestInLegacyManagedRepo
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceDoesNotExistException
throws|,
name|ProxyException
block|{
name|String
name|path
init|=
literal|"org/apache/maven/test/get-relocated-artefact/1.0/get-relocated-artefact-1.0.jar"
decl_stmt|;
name|String
name|relocatedPath
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|legacyManagedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|relocatedPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|requestHandler
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|legacyManagedRepository
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file matches"
argument_list|,
name|expectedFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Versioning
name|getVersioning
parameter_list|(
name|List
name|versions
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|Versioning
name|versioning
init|=
operator|new
name|Versioning
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|versions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|v
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|versioning
operator|.
name|addVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|setLastUpdatedTimestamp
argument_list|(
name|versioning
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|versioning
return|;
block|}
specifier|private
specifier|static
name|String
name|getExpectedMetadata
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|Versioning
name|versioning
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getExpectedMetadata
argument_list|(
name|artifactId
argument_list|,
literal|null
argument_list|,
name|versioning
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getExpectedMetadata
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|Versioning
name|versioning
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|expectedContents
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.maven.test"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|m
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|m
operator|.
name|setVersioning
argument_list|(
name|versioning
argument_list|)
expr_stmt|;
name|m
operator|.
name|setModelEncoding
argument_list|(
literal|null
argument_list|)
expr_stmt|;
operator|new
name|MetadataXpp3Writer
argument_list|()
operator|.
name|write
argument_list|(
name|expectedContents
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|expectedContents
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getExpectedMetadata
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getExpectedMetadata
argument_list|(
name|artifactId
argument_list|,
name|version
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Versioning
name|getVersioning
parameter_list|(
name|String
name|timestamp
parameter_list|,
name|int
name|buildNumber
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|Versioning
name|versioning
init|=
operator|new
name|Versioning
argument_list|()
decl_stmt|;
name|versioning
operator|.
name|setSnapshot
argument_list|(
operator|new
name|Snapshot
argument_list|()
argument_list|)
expr_stmt|;
name|versioning
operator|.
name|getSnapshot
argument_list|()
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|versioning
operator|.
name|getSnapshot
argument_list|()
operator|.
name|setBuildNumber
argument_list|(
name|buildNumber
argument_list|)
expr_stmt|;
name|setLastUpdatedTimestamp
argument_list|(
name|versioning
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|versioning
return|;
block|}
specifier|private
specifier|static
name|void
name|setLastUpdatedTimestamp
parameter_list|(
name|Versioning
name|versioning
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|DateFormat
name|fmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|fmt
operator|.
name|setTimeZone
argument_list|(
name|UTC_TIMEZONE
argument_list|)
expr_stmt|;
name|versioning
operator|.
name|setLastUpdated
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Date
name|getPastDate
parameter_list|()
throws|throws
name|ParseException
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|parse
argument_list|(
literal|"2000-01-01"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Date
name|getFutureDate
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|private
name|void
name|mockFailedChecksums
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|expectedFile
parameter_list|)
throws|throws
name|TransferFailedException
throws|,
name|ResourceDoesNotExistException
throws|,
name|AuthorizationException
block|{
comment|// must do it twice as it will re-attempt it
name|wagonMock
operator|.
name|get
argument_list|(
name|path
operator|+
literal|".sha1"
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1.tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
operator|+
literal|".md5"
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".md5.tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
operator|+
literal|".sha1"
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1.tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|path
operator|+
literal|".md5"
argument_list|,
operator|new
name|File
argument_list|(
name|expectedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|expectedFile
operator|.
name|getName
argument_list|()
operator|+
literal|".md5.tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|setThrowable
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"transfer failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|getChecksumFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|algorithm
argument_list|)
return|;
block|}
comment|/**      * A faster recursive copy that omits .svn directories.      *      * @param sourceDirectory the source directory to copy      * @param destDirectory   the target location      * @throws java.io.IOException if there is a copying problem      * @todo get back into plexus-utils, share with converter module      */
specifier|private
specifier|static
name|void
name|copyDirectoryStructure
parameter_list|(
name|File
name|sourceDirectory
parameter_list|,
name|File
name|destDirectory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sourceDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source directory doesn't exists ("
operator|+
name|sourceDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|")."
argument_list|)
throw|;
block|}
name|File
index|[]
name|files
init|=
name|sourceDirectory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|String
name|sourcePath
init|=
name|sourceDirectory
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|String
name|dest
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|dest
operator|=
name|dest
operator|.
name|substring
argument_list|(
name|sourcePath
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|File
name|destination
init|=
operator|new
name|File
argument_list|(
name|destDirectory
argument_list|,
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|destination
operator|=
name|destination
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
operator|new
name|File
argument_list|(
name|destination
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: Change when there is a FileUtils.copyFileToDirectory(file, destination, boolean) option
comment|//FileUtils.copyFileToDirectory( file, destination );
block|}
if|else if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
literal|".svn"
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|destination
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|destination
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create destination directory '"
operator|+
name|destination
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|copyDirectoryStructure
argument_list|(
name|file
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown file type: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|ProxiedArtifactRepository
name|createProxiedRepository
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
operator|new
name|ProxiedArtifactRepository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|setName
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedArtifactRepository
operator|.
name|setCacheFailures
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|proxiedArtifactRepository
return|;
block|}
specifier|private
specifier|static
name|ProxiedArtifactRepository
name|createHardFailProxiedRepository
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|ProxiedArtifactRepository
name|proxiedArtifactRepository
init|=
name|createProxiedRepository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|proxiedArtifactRepository
operator|.
name|setHardFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|proxiedArtifactRepository
return|;
block|}
specifier|private
name|ArtifactRepository
name|createRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|repoLocation
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
name|createRepository
argument_list|(
name|id
argument_list|,
name|repoLocation
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ArtifactRepository
name|createRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|location
parameter_list|,
name|ArtifactRepositoryLayout
name|layout
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
name|createRepository
argument_list|(
name|id
argument_list|,
name|location
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|layout
argument_list|)
return|;
block|}
specifier|private
name|ArtifactRepository
name|createRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|url
parameter_list|)
block|{
return|return
name|createRepository
argument_list|(
name|id
argument_list|,
name|url
argument_list|,
name|defaultLayout
argument_list|)
return|;
block|}
specifier|private
name|ArtifactRepository
name|createRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|url
parameter_list|,
name|ArtifactRepositoryLayout
name|repositoryLayout
parameter_list|)
block|{
return|return
name|factory
operator|.
name|createArtifactRepository
argument_list|(
name|id
argument_list|,
name|url
argument_list|,
name|repositoryLayout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

