begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|component
operator|.
name|repository
operator|.
name|exception
operator|.
name|ComponentLookupException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|configuration
operator|.
name|ProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ResourceDoesNotExistException
import|;
end_import

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * @author Edwin Punzalan  */
end_comment

begin_class
specifier|public
class|class
name|DefaultProxyManagerTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|ProxyManager
name|proxy
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ProxyManagerFactory
name|factory
init|=
operator|(
name|ProxyManagerFactory
operator|)
name|container
operator|.
name|lookup
argument_list|(
name|ProxyManagerFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|proxy
operator|=
name|factory
operator|.
name|getProxyManager
argument_list|(
literal|"default"
argument_list|,
name|getTestConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExceptions
parameter_list|()
block|{
name|proxy
operator|.
name|setConfiguration
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|proxy
operator|.
name|get
argument_list|(
literal|"/invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected empty configuration error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected Exception not thrown."
argument_list|,
literal|"No proxy configuration defined."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected Exception not thrown."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proxy
operator|.
name|getRemoteFile
argument_list|(
literal|"/invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected empty configuration error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected Exception not thrown."
argument_list|,
literal|"No proxy configuration defined."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected Exception not thrown."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCache
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|release
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ProxyConfiguration
name|getTestConfiguration
parameter_list|()
throws|throws
name|ComponentLookupException
block|{
name|ProxyConfiguration
name|config
init|=
operator|(
name|ProxyConfiguration
operator|)
name|container
operator|.
name|lookup
argument_list|(
name|ProxyConfiguration
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|config
operator|.
name|setRepositoryCachePath
argument_list|(
literal|"target/proxy-cache"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

