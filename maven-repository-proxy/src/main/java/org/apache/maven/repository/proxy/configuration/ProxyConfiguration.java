begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|LegacyRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|repository
operator|.
name|ProxyRepository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class to represent the configuration file for the proxy  *  * @author Edwin Punzalan  * @plexus.component role="org.apache.maven.repository.proxy.configuration.ProxyConfiguration"  */
end_comment

begin_class
specifier|public
class|class
name|ProxyConfiguration
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROLE
init|=
name|ProxyConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactRepositoryFactory
name|artifactRepositoryFactory
decl_stmt|;
specifier|private
name|boolean
name|browsable
decl_stmt|;
specifier|private
name|ArtifactRepository
name|repoCache
decl_stmt|;
specifier|private
name|List
name|repositories
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ArtifactRepositoryLayout
name|layout
decl_stmt|;
comment|/**      * Method to set/unset the web-view of the repository cache      *      * @param browsable set to true to enable the web-view of the proxy repository cache      */
specifier|public
name|void
name|setBrowsable
parameter_list|(
name|boolean
name|browsable
parameter_list|)
block|{
name|this
operator|.
name|browsable
operator|=
name|browsable
expr_stmt|;
block|}
comment|/**      * Used to determine if the repsented configuration allows web view of the repository cache      *      * @return true if the repository cache is configured for web view.      */
specifier|public
name|boolean
name|isBrowsable
parameter_list|()
block|{
return|return
name|browsable
return|;
block|}
comment|/**      * Used to set the location where the proxy should cache the configured repositories      *      * @param path      */
specifier|public
name|void
name|setRepositoryCachePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|ArtifactRepositoryPolicy
name|standardPolicy
decl_stmt|;
name|standardPolicy
operator|=
operator|new
name|ArtifactRepositoryPolicy
argument_list|(
literal|true
argument_list|,
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|,
name|ArtifactRepositoryPolicy
operator|.
name|CHECKSUM_POLICY_IGNORE
argument_list|)
expr_stmt|;
name|repoCache
operator|=
name|artifactRepositoryFactory
operator|.
name|createArtifactRepository
argument_list|(
literal|"localCache"
argument_list|,
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|getLayout
argument_list|()
argument_list|,
name|standardPolicy
argument_list|,
name|standardPolicy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to retrieve an ArtifactRepository Object of the proxy cache      *      * @return the ArtifactRepository representation of the proxy cache      */
specifier|public
name|ArtifactRepository
name|getRepositoryCache
parameter_list|()
block|{
return|return
name|repoCache
return|;
block|}
comment|/**      * Used to retrieved the absolute path of the repository cache      *      * @return path to the proxy cache      */
specifier|public
name|String
name|getRepositoryCachePath
parameter_list|()
block|{
return|return
name|repoCache
operator|.
name|getBasedir
argument_list|()
return|;
block|}
comment|/**      * Used to add proxied repositories.      *      * @param repository the repository to be proxied      */
specifier|public
name|void
name|addRepository
parameter_list|(
name|ProxyRepository
name|repository
parameter_list|)
block|{
name|repositories
operator|.
name|add
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to retrieve an unmodifyable list of proxied repositories. They returned list determines the search sequence      * for retrieving artifacts.      *      * @return a list of ProxyRepository objects representing proxied repositories      */
specifier|public
name|List
name|getRepositories
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|repositories
argument_list|)
return|;
block|}
comment|/**      * Used to set the list of repositories to be proxied.  This replaces any repositories already added to this      * configuraion instance.  Useful for re-arranging an existing proxied list.      *      * @param repositories      */
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
comment|/**      * Uses maven-proxy classes to read a maven-proxy properties configuration      *      * @param mavenProxyConfigurationFile The location of the maven-proxy configuration file      * @throws ValidationException When a problem occured while processing the properties file      * @throws IOException         When a problem occured while reading the property file      */
specifier|public
name|void
name|loadMavenProxyConfiguration
parameter_list|(
name|File
name|mavenProxyConfigurationFile
parameter_list|)
throws|throws
name|ValidationException
throws|,
name|IOException
block|{
name|MavenProxyPropertyLoader
name|loader
init|=
operator|new
name|MavenProxyPropertyLoader
argument_list|()
decl_stmt|;
name|RetrievalComponentConfiguration
name|rcc
init|=
name|loader
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|mavenProxyConfigurationFile
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|setRepositoryCachePath
argument_list|(
name|rcc
operator|.
name|getLocalStore
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setBrowsable
argument_list|(
name|rcc
operator|.
name|isBrowsable
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|repoList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|repos
init|=
name|rcc
operator|.
name|getRepos
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|repos
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepoConfiguration
name|repoConfig
init|=
operator|(
name|RepoConfiguration
operator|)
name|repos
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//skip local store repo
if|if
condition|(
operator|!
name|repoConfig
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"global"
argument_list|)
condition|)
block|{
name|ProxyRepository
name|repo
init|=
operator|new
name|ProxyRepository
argument_list|(
name|repoConfig
operator|.
name|getKey
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getUrl
argument_list|()
argument_list|,
name|getLayout
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setCacheFailures
argument_list|(
name|repoConfig
operator|.
name|getCacheFailures
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setCachePeriod
argument_list|(
name|repoConfig
operator|.
name|getCachePeriod
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setHardfail
argument_list|(
name|repoConfig
operator|.
name|getHardFail
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repoConfig
operator|instanceof
name|HttpRepoConfiguration
condition|)
block|{
name|HttpRepoConfiguration
name|httpRepo
init|=
operator|(
name|HttpRepoConfiguration
operator|)
name|repoConfig
decl_stmt|;
name|MavenProxyConfiguration
name|httpProxy
init|=
name|httpRepo
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setProxy
argument_list|(
name|httpProxy
operator|.
name|getHost
argument_list|()
argument_list|,
name|httpProxy
operator|.
name|getPort
argument_list|()
argument_list|,
name|httpProxy
operator|.
name|getUsername
argument_list|()
argument_list|,
name|httpProxy
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|repoList
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|setRepositories
argument_list|(
name|repoList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArtifactRepositoryLayout
name|getLayout
parameter_list|()
block|{
if|if
condition|(
name|layout
operator|==
literal|null
condition|)
block|{
name|setLayout
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
return|return
name|layout
return|;
block|}
specifier|public
name|void
name|setLayout
parameter_list|(
name|String
name|layout
parameter_list|)
block|{
if|if
condition|(
literal|"legacy"
operator|.
name|equalsIgnoreCase
argument_list|(
name|layout
argument_list|)
condition|)
block|{
name|this
operator|.
name|layout
operator|=
operator|new
name|LegacyRepositoryLayout
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|layout
operator|=
operator|new
name|DefaultRepositoryLayout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repoCache
operator|!=
literal|null
condition|)
block|{
name|setRepositoryCachePath
argument_list|(
name|repoCache
operator|.
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

