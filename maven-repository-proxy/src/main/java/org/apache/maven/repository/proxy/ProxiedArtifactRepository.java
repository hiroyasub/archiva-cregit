begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A proxied artifact repository - contains the artifact repository and additional information about  * the proxied repository.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
class|class
name|ProxiedArtifactRepository
block|{
comment|/**      * Whether to cache failures or not.      */
specifier|private
name|boolean
name|cacheFailures
decl_stmt|;
comment|/**      * Whether failures on this repository cause the whole group to fail.      */
specifier|private
name|boolean
name|hardFail
decl_stmt|;
comment|/**      * Whether to use the network proxy for any requests.      */
specifier|private
name|boolean
name|useNetworkProxy
decl_stmt|;
comment|/**      * The artifact repository on the other end of the proxy.      */
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
comment|/**      * Cache of failures that have already occurred, containing paths from the repository root.      */
specifier|private
name|Set
comment|/*<String>*/
name|failureCache
init|=
operator|new
name|HashSet
comment|/*<String>*/
argument_list|()
decl_stmt|;
comment|/**      * A user friendly name for the repository.      */
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|boolean
name|isHardFail
parameter_list|()
block|{
return|return
name|hardFail
return|;
block|}
specifier|public
name|boolean
name|isUseNetworkProxy
parameter_list|()
block|{
return|return
name|useNetworkProxy
return|;
block|}
specifier|public
name|boolean
name|isCacheFailures
parameter_list|()
block|{
return|return
name|cacheFailures
return|;
block|}
specifier|public
name|ArtifactRepository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|boolean
name|isCachedFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|cacheFailures
operator|&&
name|failureCache
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|addFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|cacheFailures
condition|)
block|{
name|failureCache
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|cacheFailures
condition|)
block|{
name|failureCache
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

