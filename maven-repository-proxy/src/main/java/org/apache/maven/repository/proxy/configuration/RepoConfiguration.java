begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Copyright 2003-2004 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_comment
comment|/**  * Immutable.  *<p/>  * hardfail - if a repository is set to hard fail, then the download engine will terminate the whole download  * process (with a status 500) if any of the repositories have unexpected errors.  *<p/>  * if a repository expects an error - eg. 400 (not found) - then it is not required to terminate the  * download process.  *  * @author Ben Walding  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RepoConfiguration
extends|extends
name|AbstractLogEnabled
block|{
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|copy
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hardFail
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cacheFailures
decl_stmt|;
specifier|private
specifier|final
name|long
name|cachePeriod
decl_stmt|;
specifier|public
name|RepoConfiguration
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|description
parameter_list|,
name|boolean
name|copy
parameter_list|,
name|boolean
name|hardFail
parameter_list|,
name|boolean
name|cacheFailures
parameter_list|,
name|long
name|cachePeriod
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|copy
operator|=
name|copy
expr_stmt|;
name|this
operator|.
name|hardFail
operator|=
name|hardFail
expr_stmt|;
name|this
operator|.
name|cacheFailures
operator|=
name|cacheFailures
expr_stmt|;
name|this
operator|.
name|cachePeriod
operator|=
name|cachePeriod
expr_stmt|;
block|}
comment|/**      *      */
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
comment|/**      *      */
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * If a file repository is set to "copy" mode, it will copy the found files into      * the main repository store.      */
specifier|public
name|boolean
name|getCopy
parameter_list|()
block|{
return|return
name|copy
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|boolean
name|getHardFail
parameter_list|()
block|{
return|return
name|hardFail
return|;
block|}
specifier|public
name|boolean
name|getCacheFailures
parameter_list|()
block|{
return|return
name|cacheFailures
return|;
block|}
specifier|public
name|long
name|getCachePeriod
parameter_list|()
block|{
return|return
name|cachePeriod
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Repo["
operator|+
name|getKey
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

