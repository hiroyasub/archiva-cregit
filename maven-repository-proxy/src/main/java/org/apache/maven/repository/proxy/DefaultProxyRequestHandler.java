begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|manager
operator|.
name|ChecksumFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|ArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|discovery
operator|.
name|DiscovererException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ResourceDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|TransferFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|Wagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|observers
operator|.
name|ChecksumObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|proxy
operator|.
name|ProxyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An implementation of the proxy handler.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @plexus.component  * @todo this currently duplicates a lot of the wagon manager, and doesn't do things like snapshot resolution, etc.  * Should we have a more artifact based one? This will merge metadata so should behave correctly, and it is able to  * correct some limitations of the wagon manager (eg, it can retrieve newer SNAPSHOT files without metadata)  */
end_comment

begin_class
specifier|public
class|class
name|DefaultProxyRequestHandler
extends|extends
name|AbstractLogEnabled
implements|implements
name|ProxyRequestHandler
block|{
comment|/**      * @plexus.requirement role-hint="default"      * @todo use a map, and have priorities in them      */
specifier|private
name|ArtifactDiscoverer
name|defaultArtifactDiscoverer
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="legacy"      */
specifier|private
name|ArtifactDiscoverer
name|legacyArtifactDiscoverer
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.wagon.Wagon"      */
specifier|private
name|Map
comment|/*<String,Wagon>*/
name|wagons
decl_stmt|;
specifier|public
name|File
name|get
parameter_list|(
name|String
name|path
parameter_list|,
name|List
name|proxiedRepositories
parameter_list|,
name|ArtifactRepository
name|managedRepository
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
block|{
return|return
name|get
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|managedRepository
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|File
name|get
parameter_list|(
name|String
name|path
parameter_list|,
name|List
name|proxiedRepositories
parameter_list|,
name|ArtifactRepository
name|managedRepository
parameter_list|,
name|ProxyInfo
name|wagonProxy
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
block|{
comment|//@todo use wagonManager for cache use file:// as URL
name|File
name|cachedFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cachedFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cachedFile
operator|=
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|managedRepository
argument_list|,
name|wagonProxy
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedFile
return|;
block|}
specifier|public
name|File
name|getAlways
parameter_list|(
name|String
name|path
parameter_list|,
name|List
name|proxiedRepositories
parameter_list|,
name|ArtifactRepository
name|managedRepository
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
block|{
return|return
name|getAlways
argument_list|(
name|path
argument_list|,
name|proxiedRepositories
argument_list|,
name|managedRepository
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|File
name|getAlways
parameter_list|(
name|String
name|path
parameter_list|,
name|List
name|proxiedRepositories
parameter_list|,
name|ArtifactRepository
name|managedRepository
parameter_list|,
name|ProxyInfo
name|wagonProxy
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
block|{
name|File
name|remoteFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|proxiedRepositories
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxiedArtifactRepository
name|repository
init|=
operator|(
name|ProxiedArtifactRepository
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repository
operator|.
name|isCachedFailure
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Skipping repository "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|" for a cached path failure."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".md5"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|".sha1"
argument_list|)
condition|)
block|{
comment|// always read from the managed repository
name|remoteFile
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"maven-metadata.xml"
argument_list|)
condition|)
block|{
name|remoteFile
operator|=
name|getFromRepository
argument_list|(
name|path
argument_list|,
name|repository
argument_list|,
name|managedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|wagonProxy
argument_list|,
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getReleases
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Artifact
name|artifact
init|=
literal|null
decl_stmt|;
try|try
block|{
name|artifact
operator|=
name|defaultArtifactDiscoverer
operator|.
name|buildArtifact
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Failed to build artifact using default layout with message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|artifact
operator|=
name|legacyArtifactDiscoverer
operator|.
name|buildArtifact
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Failed to build artifact using legacy layout with message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|getArtifact
argument_list|(
name|artifact
argument_list|,
name|repository
argument_list|,
name|managedRepository
argument_list|,
name|wagonProxy
argument_list|)
expr_stmt|;
name|remoteFile
operator|=
name|artifact
operator|.
name|getFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Some other unknown file in the repository, proxy as is
name|getFromRepository
argument_list|(
name|path
argument_list|,
name|repository
argument_list|,
name|managedRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|wagonProxy
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|remoteFile
operator|!=
literal|null
operator|&&
operator|!
name|remoteFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|repository
operator|.
name|addFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceDoesNotExistException
argument_list|(
literal|"Could not find "
operator|+
name|path
operator|+
literal|" in any of the repositories."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// in case it previously failed and we've since found it
name|repository
operator|.
name|clearFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|remoteFile
return|;
block|}
specifier|private
name|File
name|getFromRepository
parameter_list|(
name|String
name|path
parameter_list|,
name|ProxiedArtifactRepository
name|repository
parameter_list|,
name|String
name|repositoryCachePath
parameter_list|,
name|ProxyInfo
name|httpProxy
parameter_list|,
name|ArtifactRepositoryPolicy
name|policy
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|repositoryCachePath
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
operator|||
name|isOutOfDate
argument_list|(
name|policy
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
name|Map
name|checksums
init|=
literal|null
decl_stmt|;
name|Wagon
name|wagon
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|protocol
init|=
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|wagon
operator|=
operator|(
name|Wagon
operator|)
name|wagons
operator|.
name|get
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
if|if
condition|(
name|wagon
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unsupported remote protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
comment|//@todo configure wagon (ssh settings, etc)
name|checksums
operator|=
name|prepareChecksumListeners
argument_list|(
name|wagon
argument_list|)
expr_stmt|;
name|connected
operator|=
name|connectToRepository
argument_list|(
name|wagon
argument_list|,
name|repository
argument_list|,
name|httpProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|connected
condition|)
block|{
name|File
name|temp
init|=
operator|new
name|File
argument_list|(
name|target
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|temp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|boolean
name|success
decl_stmt|;
do|do
block|{
name|tries
operator|++
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Trying "
operator|+
name|path
operator|+
literal|" from "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|wagon
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wagon
operator|.
name|getIfNewer
argument_list|(
name|path
argument_list|,
name|temp
argument_list|,
name|target
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|doChecksumCheck
argument_list|(
name|checksums
argument_list|,
name|path
argument_list|,
name|wagon
argument_list|,
name|repositoryCachePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|tries
operator|>
literal|1
operator|&&
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Checksum failures occurred while downloading "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|success
condition|)
do|;
name|disconnectWagon
argument_list|(
name|wagon
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|moveTempToTarget
argument_list|(
name|temp
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
comment|//try next repository
block|}
catch|catch
parameter_list|(
name|TransferFailedException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Skipping repository "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|processRepositoryFailure
argument_list|(
name|repository
argument_list|,
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Skipping repository "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|processRepositoryFailure
argument_list|(
name|repository
argument_list|,
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wagon
operator|!=
literal|null
operator|&&
name|checksums
operator|!=
literal|null
condition|)
block|{
name|releaseChecksumListeners
argument_list|(
name|wagon
argument_list|,
name|checksums
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connected
condition|)
block|{
name|disconnectWagon
argument_list|(
name|wagon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|target
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isOutOfDate
parameter_list|(
name|ArtifactRepositoryPolicy
name|policy
parameter_list|,
name|File
name|target
parameter_list|)
block|{
return|return
name|policy
operator|!=
literal|null
operator|&&
name|policy
operator|.
name|checkOutOfDate
argument_list|(
operator|new
name|Date
argument_list|(
name|target
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Used to add checksum observers as transfer listeners to the wagonManager object      *      * @param wagon the wagonManager object to use the checksum with      * @return map of ChecksumObservers added into the wagonManager transfer listeners      */
specifier|private
name|Map
name|prepareChecksumListeners
parameter_list|(
name|Wagon
name|wagon
parameter_list|)
block|{
name|Map
name|checksums
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
try|try
block|{
name|ChecksumObserver
name|checksum
init|=
operator|new
name|ChecksumObserver
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|wagon
operator|.
name|addTransferListener
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
name|checksums
operator|.
name|put
argument_list|(
literal|"sha1"
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
name|checksum
operator|=
operator|new
name|ChecksumObserver
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
name|wagon
operator|.
name|addTransferListener
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
name|checksums
operator|.
name|put
argument_list|(
literal|"md5"
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"An error occurred while preparing checksum observers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|checksums
return|;
block|}
specifier|private
name|void
name|releaseChecksumListeners
parameter_list|(
name|Wagon
name|wagon
parameter_list|,
name|Map
name|checksumMap
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|checksums
init|=
name|checksumMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|checksums
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ChecksumObserver
name|listener
init|=
operator|(
name|ChecksumObserver
operator|)
name|checksums
operator|.
name|next
argument_list|()
decl_stmt|;
name|wagon
operator|.
name|removeTransferListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|connectToRepository
parameter_list|(
name|Wagon
name|wagon
parameter_list|,
name|ProxiedArtifactRepository
name|repository
parameter_list|,
name|ProxyInfo
name|httpProxy
parameter_list|)
block|{
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ArtifactRepository
name|artifactRepository
init|=
name|repository
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|Repository
name|wagonRepository
init|=
operator|new
name|Repository
argument_list|(
name|artifactRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|.
name|isUseNetworkProxy
argument_list|()
operator|&&
name|httpProxy
operator|!=
literal|null
condition|)
block|{
name|wagon
operator|.
name|connect
argument_list|(
name|wagonRepository
argument_list|,
name|httpProxy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wagon
operator|.
name|connect
argument_list|(
name|wagonRepository
argument_list|)
expr_stmt|;
block|}
name|connected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Could not connect to "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Could not connect to "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|connected
return|;
block|}
specifier|private
name|boolean
name|doChecksumCheck
parameter_list|(
name|Map
name|checksumMap
parameter_list|,
name|String
name|path
parameter_list|,
name|Wagon
name|wagon
parameter_list|,
name|String
name|repositoryCachePath
parameter_list|)
throws|throws
name|ProxyException
block|{
name|releaseChecksumListeners
argument_list|(
name|wagon
argument_list|,
name|checksumMap
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|checksums
init|=
name|checksumMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|checksums
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|checksumExt
init|=
operator|(
name|String
operator|)
name|checksums
operator|.
name|next
argument_list|()
decl_stmt|;
name|ChecksumObserver
name|checksum
init|=
operator|(
name|ChecksumObserver
operator|)
name|checksumMap
operator|.
name|get
argument_list|(
name|checksumExt
argument_list|)
decl_stmt|;
name|String
name|checksumPath
init|=
name|path
operator|+
literal|"."
operator|+
name|checksumExt
decl_stmt|;
name|File
name|checksumFile
init|=
operator|new
name|File
argument_list|(
name|repositoryCachePath
argument_list|,
name|checksumPath
argument_list|)
decl_stmt|;
try|try
block|{
name|File
name|tempChecksumFile
init|=
operator|new
name|File
argument_list|(
name|checksumFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|wagon
operator|.
name|get
argument_list|(
name|checksumPath
argument_list|,
name|tempChecksumFile
argument_list|)
expr_stmt|;
name|String
name|remoteChecksum
init|=
name|FileUtils
operator|.
name|fileRead
argument_list|(
name|tempChecksumFile
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteChecksum
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>
literal|0
condition|)
block|{
name|remoteChecksum
operator|=
name|remoteChecksum
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|remoteChecksum
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|checksumCheck
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|remoteChecksum
operator|.
name|toUpperCase
argument_list|()
operator|.
name|equals
argument_list|(
name|checksum
operator|.
name|getActualChecksum
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|moveTempToTarget
argument_list|(
name|tempChecksumFile
argument_list|,
name|checksumFile
argument_list|)
expr_stmt|;
name|checksumCheck
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|checksumCheck
return|;
block|}
catch|catch
parameter_list|(
name|ChecksumFailedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|TransferFailedException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"An error occurred during the download of "
operator|+
name|checksumPath
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// do nothing try the next checksum
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"An error occurred during the download of "
operator|+
name|checksumPath
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// do nothing try the next checksum
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"An error occurred during the download of "
operator|+
name|checksumPath
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// do nothing try the next checksum
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"An error occurred while reading the temporary checksum file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Skipping checksum validation for "
operator|+
name|path
operator|+
literal|": No remote checksums available."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Used to move the temporary file to its real destination.  This is patterned from the way WagonManager handles      * its downloaded files.      *      * @param temp   The completed download file      * @param target The final location of the downloaded file      * @throws ProxyException when the temp file cannot replace the target file      */
specifier|private
name|void
name|moveTempToTarget
parameter_list|(
name|File
name|temp
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|target
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unable to overwrite existing target file: "
operator|+
name|target
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|temp
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to rename tmp file to its final name... resorting to copy command."
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|temp
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Cannot copy tmp file to its final location"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|temp
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Used to disconnect the wagonManager from its repository      *      * @param wagon the connected wagonManager object      */
specifier|private
name|void
name|disconnectWagon
parameter_list|(
name|Wagon
name|wagon
parameter_list|)
block|{
try|try
block|{
name|wagon
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Problem disconnecting from wagonManager - ignoring: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Queries the configuration on how to handle a repository download failure      *      * @param repository the repository object where the failure occurred      * @param message    the message/reason for the failure      * @param t          the cause for the exception      * @throws ProxyException if hard failure is enabled on the repository causing the failure      */
specifier|private
name|void
name|processRepositoryFailure
parameter_list|(
name|ProxiedArtifactRepository
name|repository
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|repository
operator|.
name|isHardFail
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"An error occurred in hardfailing repository "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|"...\n    "
operator|+
name|message
argument_list|,
name|t
argument_list|)
throw|;
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ProxiedArtifactRepository
name|repository
parameter_list|,
name|ArtifactRepository
name|repoCache
parameter_list|,
name|ProxyInfo
name|httpProxy
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|ResourceDoesNotExistException
block|{
name|ArtifactRepository
name|artifactRepository
init|=
name|repository
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|ArtifactRepositoryPolicy
name|policy
init|=
name|artifact
operator|.
name|isSnapshot
argument_list|()
condition|?
name|artifactRepository
operator|.
name|getSnapshots
argument_list|()
else|:
name|artifactRepository
operator|.
name|getReleases
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|policy
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Skipping disabled repository "
operator|+
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Trying repository "
operator|+
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't use releases policy, we don't want to perform updates on them (only metadata, as used above)
name|getFromRepository
argument_list|(
name|artifactRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
argument_list|,
name|repoCache
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|httpProxy
argument_list|,
name|artifact
operator|.
name|isSnapshot
argument_list|()
condition|?
name|artifactRepository
operator|.
name|getSnapshots
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"  Artifact resolved"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setResolved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

