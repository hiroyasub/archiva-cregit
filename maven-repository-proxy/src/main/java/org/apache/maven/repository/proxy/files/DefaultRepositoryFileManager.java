begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
operator|.
name|files
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * @author Edwin Punzalan  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryFileManager
block|{
comment|/* @plexus.requirement */
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
specifier|public
name|Object
name|getRequestedObjectFromPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
condition|)
block|{
return|return
name|getArtifactFromPath
argument_list|(
name|path
argument_list|)
return|;
block|}
if|else if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"ar"
argument_list|)
condition|)
block|{
return|return
name|getArtifactFromPath
argument_list|(
name|path
argument_list|)
return|;
block|}
if|else if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".md5"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Checksum
argument_list|(
literal|"MD5"
argument_list|)
return|;
block|}
if|else if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".sha1"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Checksum
argument_list|(
literal|"SHA-1"
argument_list|)
return|;
block|}
else|else
block|{
comment|//@todo handle metadata file requests
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Artifact
name|getArtifactFromPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
name|pathInfo
init|=
name|getReversedPathInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|getPathToken
argument_list|(
name|pathInfo
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|getPathToken
argument_list|(
name|pathInfo
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|getPathToken
argument_list|(
name|pathInfo
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|pathInfo
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|groupId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|groupId
operator|=
literal|"."
operator|+
name|groupId
expr_stmt|;
block|}
else|else
block|{
name|groupId
operator|=
name|getPathToken
argument_list|(
name|pathInfo
argument_list|)
operator|+
literal|"."
operator|+
name|groupId
expr_stmt|;
block|}
block|}
return|return
name|factory
operator|.
name|createBuildArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|getFileExtension
argument_list|(
name|filename
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
name|getReversedPathInfo
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
name|reversedPath
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|reversedPath
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reversedPath
return|;
block|}
specifier|private
name|String
name|getPathToken
parameter_list|(
name|List
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
name|getFileExtension
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|int
name|idx
init|=
name|filename
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
name|filename
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

