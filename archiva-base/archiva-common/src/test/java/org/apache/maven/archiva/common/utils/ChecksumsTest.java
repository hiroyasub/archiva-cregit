begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_comment
comment|/**  * ChecksumsTest  *   * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumsTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GOOD
init|=
literal|"good"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BAD
init|=
literal|"bad"
decl_stmt|;
specifier|public
name|void
name|testCheckOnFileOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithBadMd5AndBadSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|false
argument_list|,
name|BAD
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithBadMd5AndGoodSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|false
argument_list|,
name|BAD
argument_list|,
name|GOOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithBadMd5Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|false
argument_list|,
name|BAD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithBadSha1Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithGoodMd5AndBadSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|false
argument_list|,
name|GOOD
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithGoodMd5AndGoodSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|true
argument_list|,
name|GOOD
argument_list|,
name|GOOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithGoodMd5Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|true
argument_list|,
name|GOOD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckOnFileWithGoodSha1Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCheck
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|GOOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithBadMd5AndBadSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
name|BAD
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithBadMd5AndGoodSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
name|BAD
argument_list|,
name|GOOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithBadMd5Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
name|BAD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithBadSha1Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithGoodMd5AndBadSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
name|GOOD
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithGoodMd5AndGoodSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
name|GOOD
argument_list|,
name|GOOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithGoodMd5Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
name|GOOD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateOnFileWithGoodSha1Only
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|GOOD
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCheck
parameter_list|(
name|boolean
name|expectedResult
parameter_list|,
name|String
name|md5State
parameter_list|,
name|String
name|sha1State
parameter_list|)
throws|throws
name|Exception
block|{
name|Checksums
name|checksums
init|=
name|lookupChecksums
argument_list|()
decl_stmt|;
name|File
name|localFile
init|=
name|createTestableFiles
argument_list|(
name|md5State
argument_list|,
name|sha1State
argument_list|)
decl_stmt|;
name|boolean
name|actualResult
init|=
name|checksums
operator|.
name|check
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|createMessage
argument_list|(
literal|"check"
argument_list|,
name|md5State
argument_list|,
name|sha1State
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualResult
operator|==
literal|false
condition|)
block|{
name|assertFalse
argument_list|(
name|msg
operator|+
literal|" local file should not exist:"
argument_list|,
name|localFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|md5File
init|=
operator|new
name|File
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".sha1"
argument_list|)
decl_stmt|;
name|File
name|sha1File
init|=
operator|new
name|File
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".md5"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
operator|+
literal|" local md5 file should not exist:"
argument_list|,
name|md5File
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|msg
operator|+
literal|" local sha1 file should not exist:"
argument_list|,
name|sha1File
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expectedResult
argument_list|,
name|actualResult
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertUpdate
parameter_list|(
name|boolean
name|expectedResult
parameter_list|,
name|String
name|md5State
parameter_list|,
name|String
name|sha1State
parameter_list|)
throws|throws
name|Exception
block|{
name|Checksums
name|checksums
init|=
name|lookupChecksums
argument_list|()
decl_stmt|;
name|File
name|localFile
init|=
name|createTestableFiles
argument_list|(
name|md5State
argument_list|,
name|sha1State
argument_list|)
decl_stmt|;
name|boolean
name|actualResult
init|=
name|checksums
operator|.
name|update
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|createMessage
argument_list|(
literal|"update"
argument_list|,
name|md5State
argument_list|,
name|sha1State
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expectedResult
argument_list|,
name|actualResult
argument_list|)
expr_stmt|;
comment|// End result should be legitimate SHA1 and MD5 files.
name|File
name|md5File
init|=
operator|new
name|File
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".md5"
argument_list|)
decl_stmt|;
name|File
name|sha1File
init|=
operator|new
name|File
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".sha1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ChecksumPolicy.apply(FIX) md5 should exist."
argument_list|,
name|md5File
operator|.
name|exists
argument_list|()
operator|&&
name|md5File
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ChecksumPolicy.apply(FIX) sha1 should exist."
argument_list|,
name|sha1File
operator|.
name|exists
argument_list|()
operator|&&
name|sha1File
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|actualMd5Contents
init|=
name|readChecksumFile
argument_list|(
name|md5File
argument_list|)
decl_stmt|;
name|String
name|actualSha1Contents
init|=
name|readChecksumFile
argument_list|(
name|sha1File
argument_list|)
decl_stmt|;
name|String
name|expectedMd5Contents
init|=
literal|"360ccd01d8a0a2d94b86f9802c2fc548  artifact.jar"
decl_stmt|;
name|String
name|expectedSha1Contents
init|=
literal|"7dd8929150664f182db60ad15f20359d875f059f  artifact.jar"
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|": md5 contents:"
argument_list|,
name|expectedMd5Contents
argument_list|,
name|actualMd5Contents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|": sha1 contents:"
argument_list|,
name|expectedSha1Contents
argument_list|,
name|actualSha1Contents
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read the first line from the checksum file, and return it (trimmed).      */
specifier|private
name|String
name|readChecksumFile
parameter_list|(
name|File
name|checksumFile
parameter_list|)
throws|throws
name|Exception
block|{
name|FileReader
name|freader
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|buf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|freader
operator|=
operator|new
name|FileReader
argument_list|(
name|checksumFile
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|BufferedReader
argument_list|(
name|freader
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|readLine
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|freader
operator|!=
literal|null
condition|)
block|{
name|freader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|createMessage
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|md5State
parameter_list|,
name|String
name|sha1State
parameter_list|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Expected result of Checksums."
argument_list|)
operator|.
name|append
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"() when working with "
argument_list|)
expr_stmt|;
if|if
condition|(
name|md5State
operator|==
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"NO"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"a "
argument_list|)
operator|.
name|append
argument_list|(
name|md5State
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|" MD5 and "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sha1State
operator|==
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"NO"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"a "
argument_list|)
operator|.
name|append
argument_list|(
name|sha1State
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|" SHA1:"
argument_list|)
expr_stmt|;
return|return
name|msg
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|File
name|createTestableFiles
parameter_list|(
name|String
name|md5State
parameter_list|,
name|String
name|sha1State
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
literal|"target/checksum-tests/"
operator|+
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
name|ResourceUtils
operator|.
name|getResource
argument_list|(
literal|"/checksums/artifact.jar"
argument_list|)
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|md5State
operator|!=
literal|null
condition|)
block|{
name|File
name|md5File
init|=
name|ResourceUtils
operator|.
name|getResource
argument_list|(
literal|"/checksums/artifact.jar.md5-"
operator|+
name|md5State
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Testable file exists: "
operator|+
name|md5File
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
name|md5File
operator|.
name|exists
argument_list|()
operator|&&
name|md5File
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
literal|"artifact.jar.md5"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|md5File
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sha1State
operator|!=
literal|null
condition|)
block|{
name|File
name|sha1File
init|=
name|ResourceUtils
operator|.
name|getResource
argument_list|(
literal|"/checksums/artifact.jar.sha1-"
operator|+
name|sha1State
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Testable file exists: "
operator|+
name|sha1File
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
name|sha1File
operator|.
name|exists
argument_list|()
operator|&&
name|sha1File
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
literal|"artifact.jar.sha1"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|sha1File
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
literal|"artifact.jar"
argument_list|)
decl_stmt|;
return|return
name|localFile
return|;
block|}
specifier|private
name|Checksums
name|lookupChecksums
parameter_list|()
throws|throws
name|Exception
block|{
name|Checksums
name|checksums
init|=
operator|(
name|Checksums
operator|)
name|lookup
argument_list|(
name|Checksums
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|checksums
argument_list|)
expr_stmt|;
return|return
name|checksums
return|;
block|}
block|}
end_class

end_unit

