begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|artifact
operator|.
name|builder
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|component
operator|.
name|repository
operator|.
name|exception
operator|.
name|ComponentLookupException
import|;
end_import

begin_comment
comment|/**  * LegacyLayoutArtifactBuilderTest   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|LegacyLayoutArtifactBuilderTest
extends|extends
name|AbstractLayoutArtifactBuilderTestCase
block|{
name|LayoutArtifactBuilder
name|builder
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|(
name|LayoutArtifactBuilder
operator|)
name|lookup
argument_list|(
name|LayoutArtifactBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"legacy"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|release
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testPathNormal
parameter_list|()
throws|throws
name|BuilderException
block|{
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"javax.sql/jars/jdbc-2.0.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
literal|"javax.sql"
argument_list|,
literal|"jdbc"
argument_list|,
literal|"2.0"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPathFinal
parameter_list|()
throws|throws
name|BuilderException
block|{
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"org.apache.maven.test/jars/maven-model-1.0-final-20060606.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
literal|"org.apache.maven.test"
argument_list|,
literal|"maven-model"
argument_list|,
literal|"1.0-final-20060606"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPathSnapshot
parameter_list|()
throws|throws
name|BuilderException
block|{
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"org.apache.maven.test/jars/maven-model-1.0-SNAPSHOT.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
literal|"org.apache.maven.test"
argument_list|,
literal|"maven-model"
argument_list|,
literal|"1.0-SNAPSHOT"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPathJavadoc
parameter_list|()
throws|throws
name|BuilderException
block|{
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"javax.sql/javadoc.jars/jdbc-2.0-javadoc.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
literal|"javax.sql"
argument_list|,
literal|"jdbc"
argument_list|,
literal|"2.0"
argument_list|,
literal|"javadoc.jar"
argument_list|,
literal|"javadoc"
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPathSources
parameter_list|()
throws|throws
name|BuilderException
block|{
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"javax.sql/java-sources/jdbc-2.0-sources.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
literal|"javax.sql"
argument_list|,
literal|"jdbc"
argument_list|,
literal|"2.0"
argument_list|,
literal|"java-source"
argument_list|,
literal|"sources"
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPathPlugin
parameter_list|()
throws|throws
name|BuilderException
block|{
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"maven/plugins/maven-test-plugin-1.8.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
literal|"maven"
argument_list|,
literal|"maven-test-plugin"
argument_list|,
literal|"1.8"
argument_list|,
literal|"plugin"
argument_list|,
literal|null
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProblemNoType
parameter_list|()
block|{
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
literal|"invalid/invalid/1/invalid-1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected no type."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuilderException
name|e
parameter_list|)
block|{
comment|/* expected path */
name|assertEquals
argument_list|(
literal|"Path does not match a legacy repository path for an artifact"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testProblemWrongArtifactPackaging
parameter_list|()
throws|throws
name|ComponentLookupException
block|{
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
literal|"org.apache.maven.test/jars/artifactId-1.0.jar.md5"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected wrong package extension."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuilderException
name|e
parameter_list|)
block|{
comment|/* expected path */
name|assertEquals
argument_list|(
literal|"Path type does not match the extension"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testProblemNoArtifactId
parameter_list|()
block|{
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
literal|"groupId/jars/-1.0.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected artifactId is missing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuilderException
name|e
parameter_list|)
block|{
comment|/* expected path */
name|assertEquals
argument_list|(
literal|"Path filename artifactId is empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
literal|"groupId/jars/1.0.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected artifactId is missing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuilderException
name|e
parameter_list|)
block|{
comment|/* expected path */
name|assertEquals
argument_list|(
literal|"Path filename artifactId is empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

