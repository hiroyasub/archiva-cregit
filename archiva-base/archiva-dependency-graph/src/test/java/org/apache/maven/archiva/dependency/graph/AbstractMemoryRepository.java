begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * AbstractMemoryRepository   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMemoryRepository
implements|implements
name|MemoryRepository
block|{
specifier|private
name|Map
name|modelMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|AbstractMemoryRepository
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addModel
parameter_list|(
name|ArchivaProjectModel
name|model
parameter_list|)
block|{
name|String
name|key
init|=
name|Keys
operator|.
name|toKey
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|modelMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArchivaProjectModel
name|getProjectModel
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|String
name|key
init|=
name|Keys
operator|.
name|toKey
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
operator|(
name|ArchivaProjectModel
operator|)
name|modelMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|void
name|initialize
parameter_list|()
function_decl|;
specifier|protected
name|void
name|addExclusion
parameter_list|(
name|Dependency
name|dependency
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Exclusion key ["
operator|+
name|key
operator|+
literal|"] should be 2 parts. (detected "
operator|+
name|parts
operator|.
name|length
operator|+
literal|" instead)"
argument_list|)
throw|;
block|}
name|Exclusion
name|exclusion
init|=
operator|new
name|Exclusion
argument_list|()
decl_stmt|;
name|exclusion
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exclusion
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|addExclusion
argument_list|(
name|exclusion
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Dependency
name|toDependency
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Dependency key ["
operator|+
name|key
operator|+
literal|"] should be 5 parts. (detected "
operator|+
name|parts
operator|.
name|length
operator|+
literal|" instead)"
argument_list|)
throw|;
block|}
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setClassifier
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setType
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
specifier|protected
name|Dependency
name|toDependency
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|Dependency
name|dependency
init|=
name|toDependency
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
return|return
name|dependency
return|;
block|}
specifier|protected
name|ArchivaProjectModel
name|toModel
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|toModel
argument_list|(
name|key
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
return|;
block|}
specifier|protected
name|ArchivaProjectModel
name|toModel
parameter_list|(
name|String
name|key
parameter_list|,
name|Dependency
name|deps
index|[]
parameter_list|)
block|{
name|List
name|depList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|deps
operator|!=
literal|null
condition|)
block|{
name|depList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|toModel
argument_list|(
name|key
argument_list|,
name|depList
argument_list|)
return|;
block|}
specifier|protected
name|ArchivaProjectModel
name|toModel
parameter_list|(
name|String
name|key
parameter_list|,
name|List
name|deps
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project/Model key ["
operator|+
name|key
operator|+
literal|"] should be 3 parts. (detected "
operator|+
name|parts
operator|.
name|length
operator|+
literal|" instead)"
argument_list|)
throw|;
block|}
name|ArchivaProjectModel
name|model
init|=
operator|new
name|ArchivaProjectModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|model
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|model
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|model
operator|.
name|setOrigin
argument_list|(
literal|"testcase"
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPackaging
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|deps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|model
operator|.
name|addDependency
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
return|return
name|model
return|;
block|}
specifier|protected
name|VersionedReference
name|toParent
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parent key ["
operator|+
name|key
operator|+
literal|"] should be 3 parts. (detected "
operator|+
name|parts
operator|.
name|length
operator|+
literal|" instead)"
argument_list|)
throw|;
block|}
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
block|}
end_class

end_unit

