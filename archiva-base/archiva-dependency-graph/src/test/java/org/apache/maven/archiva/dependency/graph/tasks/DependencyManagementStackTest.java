begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|DependencyManagementStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|DependencyManagementStack
operator|.
name|Rules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * DependencyManagementStackTest   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyManagementStackTest
extends|extends
name|TestCase
block|{
specifier|public
name|DependencyGraphNode
name|toNode
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"toNode("
operator|+
name|key
operator|+
literal|") requires 5 parts"
argument_list|,
literal|5
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArtifactReference
name|ref
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setClassifier
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setType
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
return|return
operator|new
name|DependencyGraphNode
argument_list|(
name|ref
argument_list|)
return|;
block|}
specifier|protected
name|Dependency
name|toDependency
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Dependency key ["
operator|+
name|key
operator|+
literal|"] should be 5 parts."
argument_list|,
literal|5
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setClassifier
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setType
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
specifier|public
name|void
name|testPushPopSimple
parameter_list|()
block|{
name|DependencyGraphNode
name|node
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-testcase:1.0::jar"
argument_list|)
decl_stmt|;
name|Dependency
name|dep
init|=
name|toDependency
argument_list|(
literal|"junit:junit:3.8.1::jar"
argument_list|)
decl_stmt|;
name|dep
operator|.
name|setScope
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|DependencyManagementStack
name|stack
init|=
operator|new
name|DependencyManagementStack
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|DependencyGraphNode
name|oldnode
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"added node to old node"
argument_list|,
name|node
argument_list|,
name|oldnode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPushPopTwoDeep
parameter_list|()
block|{
name|DependencyManagementStack
name|stack
init|=
operator|new
name|DependencyManagementStack
argument_list|()
decl_stmt|;
name|Dependency
name|dep
decl_stmt|;
comment|// top node.
name|DependencyGraphNode
name|projectNode
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-testcase:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"junit:junit:3.8.1::jar"
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setScope
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|projectNode
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|projectNode
argument_list|)
expr_stmt|;
comment|// direct node.
name|DependencyGraphNode
name|directNode
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-common:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"junit:junit:3.7::jar"
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setScope
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|directNode
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|directNode
argument_list|)
expr_stmt|;
comment|// transitive node.
name|DependencyGraphNode
name|transNode
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-model:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"junit:junit:3.7::jar"
argument_list|)
expr_stmt|;
name|transNode
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|transNode
argument_list|)
expr_stmt|;
comment|// Test it
name|assertEquals
argument_list|(
literal|"popped node is trans node"
argument_list|,
name|transNode
argument_list|,
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"popped node is direct node"
argument_list|,
name|directNode
argument_list|,
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"popped node is project node"
argument_list|,
name|projectNode
argument_list|,
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testApplyNodeVersionParentWins
parameter_list|()
block|{
name|DependencyManagementStack
name|stack
init|=
operator|new
name|DependencyManagementStack
argument_list|()
decl_stmt|;
name|Dependency
name|dep
decl_stmt|;
comment|// top node.
name|DependencyGraphNode
name|projectNode
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-testcase:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"junit:junit:3.8.1::jar"
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setScope
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|projectNode
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|projectNode
argument_list|)
expr_stmt|;
comment|// direct node.
name|DependencyGraphNode
name|directNode
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-common:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"junit:junit:3.7::jar"
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setScope
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|directNode
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|directNode
argument_list|)
expr_stmt|;
comment|// transitive node.
name|DependencyGraphNode
name|transNode
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:depmanstack-model:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"junit:junit:3.7.1::jar"
argument_list|)
expr_stmt|;
name|transNode
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|transNode
argument_list|)
expr_stmt|;
comment|// Test it
name|DependencyGraphNode
name|junitNode
init|=
name|toNode
argument_list|(
literal|"junit:junit:1.0::jar"
argument_list|)
decl_stmt|;
name|assertRules
argument_list|(
literal|"junit (lvl:trans)"
argument_list|,
name|stack
argument_list|,
name|junitNode
argument_list|,
literal|"3.8.1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|assertRules
argument_list|(
literal|"junit (lvl:direct)"
argument_list|,
name|stack
argument_list|,
name|junitNode
argument_list|,
literal|"3.8.1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|assertRules
argument_list|(
literal|"junit (lvl:project)"
argument_list|,
name|stack
argument_list|,
name|junitNode
argument_list|,
literal|"3.8.1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test is based off of Carlos Sanchez's depman example use case.      *      * In a simple project chain of A:1.0 -&gt; B:1.0 -&gt; C:1.0 -&gt; D:1.0      * If B:1.0 has a dependency management section stating dep D should be version 2.0      * Then the dep D when viewed from A should be version 2.0       */
specifier|public
name|void
name|testApplyNodeVersionCarlosABCD
parameter_list|()
block|{
name|DependencyManagementStack
name|stack
init|=
operator|new
name|DependencyManagementStack
argument_list|()
decl_stmt|;
name|Dependency
name|dep
decl_stmt|;
comment|// project node, A
name|DependencyGraphNode
name|nodeA
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:carlos-A:1.0::jar"
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
comment|// sub node, B
name|DependencyGraphNode
name|nodeB
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:carlos-B:1.0::jar"
argument_list|)
decl_stmt|;
name|dep
operator|=
name|toDependency
argument_list|(
literal|"org.apache.maven.archiva:carlos-D:2.0::jar"
argument_list|)
expr_stmt|;
name|nodeB
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|nodeB
argument_list|)
expr_stmt|;
comment|// sub node, C
name|DependencyGraphNode
name|nodeC
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:carlos-C:1.0::jar"
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|nodeC
argument_list|)
expr_stmt|;
comment|// sub node, D
comment|// Not added to the stack, as this is the node that is having the rules applied to it.
name|DependencyGraphNode
name|nodeD
init|=
name|toNode
argument_list|(
literal|"org.apache.maven.archiva:carlos-D:1.0::jar"
argument_list|)
decl_stmt|;
comment|// Test it
name|assertRules
argument_list|(
literal|"node D (lvl:C)"
argument_list|,
name|stack
argument_list|,
name|nodeD
argument_list|,
literal|"2.0"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|assertRules
argument_list|(
literal|"node D (lvl:B)"
argument_list|,
name|stack
argument_list|,
name|nodeD
argument_list|,
literal|"2.0"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|assertNoRules
argument_list|(
literal|"node D (lvl:A)"
argument_list|,
name|stack
argument_list|,
name|nodeD
argument_list|,
literal|"2.0"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for expected rules, that should be enforced for the provided node.      * NOTE: This test will update the node.artifact.version to whatever is stated in the rules.      */
specifier|private
name|void
name|assertRules
parameter_list|(
name|String
name|msg
parameter_list|,
name|DependencyManagementStack
name|stack
parameter_list|,
name|DependencyGraphNode
name|node
parameter_list|,
name|String
name|expectedVersion
parameter_list|,
name|String
name|expectedScope
parameter_list|,
name|String
name|expectedExclusions
index|[]
parameter_list|)
block|{
name|Rules
name|rules
init|=
name|stack
operator|.
name|getRules
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" rules should not be null."
argument_list|,
name|rules
argument_list|)
expr_stmt|;
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersion
argument_list|(
name|rules
operator|.
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|": version"
argument_list|,
name|expectedVersion
argument_list|,
name|rules
operator|.
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|": scope"
argument_list|,
name|expectedScope
argument_list|,
name|rules
operator|.
name|scope
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedExclusions
operator|!=
literal|null
condition|)
block|{
comment|// TODO: test for exclusion settings.
block|}
block|}
comment|/**      * Test for when there are no rules being enforced for the provided node.      * Similar to assertRules() above.      */
specifier|private
name|void
name|assertNoRules
parameter_list|(
name|String
name|msg
parameter_list|,
name|DependencyManagementStack
name|stack
parameter_list|,
name|DependencyGraphNode
name|node
parameter_list|,
name|String
name|expectedVersion
parameter_list|,
name|String
name|expectedScope
parameter_list|,
name|String
name|expectedExclusions
index|[]
parameter_list|)
block|{
name|Rules
name|rules
init|=
name|stack
operator|.
name|getRules
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|msg
operator|+
literal|" rules should be null."
argument_list|,
name|rules
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|": version"
argument_list|,
name|expectedVersion
argument_list|,
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedExclusions
operator|!=
literal|null
condition|)
block|{
comment|// TODO: test for exclusion settings.
block|}
block|}
block|}
end_class

end_unit

