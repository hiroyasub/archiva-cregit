begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphPhaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphTaskException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|PotentialCyclicEdgeProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|FlagCyclicEdgesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|FlagExcludedEdgesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|PopulateGraphMasterTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|ReduceEnabledEdgesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|ReduceScopeTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|ReduceTransitiveEdgesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|RefineConflictsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
operator|.
name|UpdateScopesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|DependencyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DependencyGraphFactory   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.dependency.DependencyGraphFactory"  */
end_comment

begin_class
specifier|public
class|class
name|DependencyGraphFactory
block|{
specifier|private
name|GraphTask
name|taskFlagCyclicEdges
decl_stmt|;
specifier|private
name|PopulateGraphMasterTask
name|taskPopulateGraph
decl_stmt|;
specifier|private
name|ReduceScopeTask
name|taskReduceScope
decl_stmt|;
specifier|private
name|List
name|listeners
decl_stmt|;
specifier|private
name|DependencyGraphBuilder
name|graphBuilder
decl_stmt|;
specifier|private
name|List
name|tasks
decl_stmt|;
specifier|public
name|DependencyGraphFactory
parameter_list|()
block|{
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|taskFlagCyclicEdges
operator|=
operator|new
name|FlagCyclicEdgesTask
argument_list|()
expr_stmt|;
name|taskPopulateGraph
operator|=
operator|new
name|PopulateGraphMasterTask
argument_list|()
expr_stmt|;
name|taskReduceScope
operator|=
operator|new
name|ReduceScopeTask
argument_list|(
name|DependencyScope
operator|.
name|TEST
argument_list|)
expr_stmt|;
name|tasks
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
comment|/* Take the basic graph, and expand the nodes fully, including depman.          */
name|tasks
operator|.
name|add
argument_list|(
name|taskPopulateGraph
argument_list|)
expr_stmt|;
comment|/* Identify, flag, and disable excluded edges.          */
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|FlagExcludedEdgesTask
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Reduce the edges of the graph to only those that are enabled.          */
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|ReduceEnabledEdgesTask
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Identify dependencies that conflict, resolve to single node.          *           * This will ...          * 1) filter the distant conflicts away for the nearer ones.          * 2) same distance nodes will pick 'newest' version.          *           * This can cause a collapsing of node versions.          */
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|RefineConflictsTask
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Reduce the scope of the graph to those visible by the 'test' scope.          */
name|tasks
operator|.
name|add
argument_list|(
name|taskReduceScope
argument_list|)
expr_stmt|;
comment|/* Reduce the edges of the graph.  Use the transitive reduction algorithm          * to remove redundant edges.          */
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|ReduceTransitiveEdgesTask
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Update the scopes of the edges to conform to the parent setting.           */
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|UpdateScopesTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addGraphListener
parameter_list|(
name|GraphListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Graph for a specific Versioned Project Reference.      *       * @param versionedProjectReference      * @return      */
specifier|public
name|DependencyGraph
name|getGraph
parameter_list|(
name|VersionedReference
name|versionedProjectReference
parameter_list|)
throws|throws
name|GraphTaskException
block|{
name|DependencyGraph
name|graph
init|=
name|graphBuilder
operator|.
name|createGraph
argument_list|(
name|versionedProjectReference
argument_list|)
decl_stmt|;
name|triggerGraphPhase
argument_list|(
name|GraphPhaseEvent
operator|.
name|GRAPH_NEW
argument_list|,
literal|null
argument_list|,
name|graph
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|this
operator|.
name|tasks
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|GraphTask
name|task
init|=
operator|(
name|GraphTask
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|triggerGraphPhase
argument_list|(
name|GraphPhaseEvent
operator|.
name|GRAPH_TASK_PRE
argument_list|,
name|task
argument_list|,
name|graph
argument_list|)
expr_stmt|;
name|task
operator|.
name|executeTask
argument_list|(
name|graph
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|instanceof
name|PotentialCyclicEdgeProducer
condition|)
block|{
name|taskFlagCyclicEdges
operator|.
name|executeTask
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
name|triggerGraphPhase
argument_list|(
name|GraphPhaseEvent
operator|.
name|GRAPH_TASK_POST
argument_list|,
name|task
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GraphTaskException
name|e
parameter_list|)
block|{
name|triggerGraphError
argument_list|(
name|e
argument_list|,
name|graph
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GraphTaskException
name|gte
init|=
operator|new
name|GraphTaskException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|triggerGraphError
argument_list|(
name|gte
argument_list|,
name|graph
argument_list|)
expr_stmt|;
throw|throw
name|gte
throw|;
block|}
block|}
name|triggerGraphPhase
argument_list|(
name|GraphPhaseEvent
operator|.
name|GRAPH_DONE
argument_list|,
literal|null
argument_list|,
name|graph
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
specifier|public
name|void
name|removeGraphListener
parameter_list|(
name|GraphListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDesiredScope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|taskReduceScope
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setGraphBuilder
parameter_list|(
name|DependencyGraphBuilder
name|graphBuilder
parameter_list|)
block|{
name|this
operator|.
name|graphBuilder
operator|=
name|graphBuilder
expr_stmt|;
name|taskPopulateGraph
operator|.
name|setBuilder
argument_list|(
name|graphBuilder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|triggerGraphError
parameter_list|(
name|GraphTaskException
name|e
parameter_list|,
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|GraphListener
name|listener
init|=
operator|(
name|GraphListener
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|graphError
argument_list|(
name|e
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|triggerGraphPhase
parameter_list|(
name|int
name|type
parameter_list|,
name|GraphTask
name|task
parameter_list|,
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|GraphPhaseEvent
name|evt
init|=
operator|new
name|GraphPhaseEvent
argument_list|(
name|type
argument_list|,
name|task
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|GraphListener
name|listener
init|=
operator|(
name|GraphListener
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|graphPhaseEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

