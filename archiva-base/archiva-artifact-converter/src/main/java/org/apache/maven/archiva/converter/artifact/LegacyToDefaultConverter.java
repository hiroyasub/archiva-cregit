begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|artifact
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|transaction
operator|.
name|FileTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|transaction
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|manager
operator|.
name|ArtifactHandlerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Versioning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MetadataXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MetadataXpp3Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DistributionManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Relocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|converter
operator|.
name|ModelConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|converter
operator|.
name|PomTranslationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|DigesterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * LegacyToDefaultConverter   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.converter.artifact.ArtifactConverter"   *      role-hint="legacy-to-default"  */
end_comment

begin_class
specifier|public
class|class
name|LegacyToDefaultConverter
implements|implements
name|ArtifactConverter
block|{
comment|/**      * {@link List}&lt;{@link Digester}>      *       * @plexus.requirement role="org.codehaus.plexus.digest.Digester"      */
specifier|private
name|List
name|digesters
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ModelConverter
name|translator
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactHandlerManager
name|artifactHandlerManager
decl_stmt|;
comment|/**      * @plexus.configuration default-value="false"      */
specifier|private
name|boolean
name|force
decl_stmt|;
comment|/**      * @plexus.configuration default-value="false"      */
specifier|private
name|boolean
name|dryrun
decl_stmt|;
specifier|private
name|Map
name|warnings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|void
name|convert
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|)
throws|throws
name|ArtifactConversionException
block|{
if|if
condition|(
name|artifact
operator|.
name|getRepository
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|targetRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"exception.repositories.match"
argument_list|)
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
if|if
condition|(
operator|!
name|validateMetadata
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"unable.to.validate.metadata"
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
return|return;
block|}
name|FileTransaction
name|transaction
init|=
operator|new
name|FileTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|copyPom
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|,
name|transaction
argument_list|)
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"unable.to.copy.pom"
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
return|return;
block|}
if|if
condition|(
operator|!
name|copyArtifact
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|,
name|transaction
argument_list|)
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"unable.to.copy.artifact"
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
return|return;
block|}
name|Metadata
name|metadata
init|=
name|createBaseMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|Versioning
name|versioning
init|=
operator|new
name|Versioning
argument_list|()
decl_stmt|;
name|versioning
operator|.
name|addVersion
argument_list|(
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setVersioning
argument_list|(
name|versioning
argument_list|)
expr_stmt|;
name|updateMetadata
argument_list|(
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|targetRepository
argument_list|,
name|metadata
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|createBaseMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
name|versioning
operator|=
operator|new
name|Versioning
argument_list|()
expr_stmt|;
name|Matcher
name|matcher
init|=
name|Artifact
operator|.
name|VERSION_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|()
decl_stmt|;
name|snapshot
operator|.
name|setBuildNumber
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|setTimestamp
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|versioning
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
comment|// TODO: merge latest/release/snapshot from source instead
name|metadata
operator|.
name|setVersioning
argument_list|(
name|versioning
argument_list|)
expr_stmt|;
name|updateMetadata
argument_list|(
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|targetRepository
argument_list|,
name|metadata
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
try|try
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"transaction.failure"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
block|}
block|}
specifier|private
name|boolean
name|copyPom
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|,
name|FileTransaction
name|transaction
parameter_list|)
throws|throws
name|ArtifactConversionException
block|{
name|Artifact
name|pom
init|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|pom
operator|.
name|setBaseVersion
argument_list|(
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepository
name|repository
init|=
name|artifact
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOf
argument_list|(
name|pom
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pom
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
name|boolean
name|checksumsValid
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|testChecksums
argument_list|(
name|artifact
argument_list|,
name|file
argument_list|)
condition|)
block|{
name|checksumsValid
operator|=
literal|true
expr_stmt|;
block|}
comment|// Even if the checksums for the POM are invalid we should still convert the POM
name|contents
operator|=
name|AsciiFileUtil
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"unable.to.read.source.pom"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
if|if
condition|(
name|checksumsValid
operator|&&
name|contents
operator|.
name|indexOf
argument_list|(
literal|"modelVersion"
argument_list|)
operator|>=
literal|0
condition|)
comment|//$NON-NLS-1$
block|{
comment|// v4 POM
try|try
block|{
name|boolean
name|matching
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|targetFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|targetContents
init|=
name|AsciiFileUtil
operator|.
name|readFile
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|matching
operator|=
name|targetContents
operator|.
name|equals
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|||
operator|!
name|matching
condition|)
block|{
name|transaction
operator|.
name|createFile
argument_list|(
name|contents
argument_list|,
name|targetFile
argument_list|,
name|digesters
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"unable.to.write.target.pom"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
block|}
else|else
block|{
comment|// v3 POM
name|StringReader
name|stringReader
init|=
operator|new
name|StringReader
argument_list|(
name|contents
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|v3_0_0
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
name|v3Reader
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|v3_0_0
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|v3_0_0
operator|.
name|Model
name|v3Model
init|=
name|v3Reader
operator|.
name|read
argument_list|(
name|stringReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|doRelocation
argument_list|(
name|artifact
argument_list|,
name|v3Model
argument_list|,
name|targetRepository
argument_list|,
name|transaction
argument_list|)
condition|)
block|{
name|Artifact
name|relocatedPom
init|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|targetFile
operator|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|relocatedPom
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Model
name|v4Model
init|=
name|translator
operator|.
name|translate
argument_list|(
name|v3Model
argument_list|)
decl_stmt|;
name|translator
operator|.
name|validateV4Basics
argument_list|(
name|v4Model
argument_list|,
name|v3Model
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|v3Model
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|v3Model
operator|.
name|getVersion
argument_list|()
argument_list|,
name|v3Model
operator|.
name|getPackage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|MavenXpp3Writer
name|Xpp3Writer
init|=
operator|new
name|MavenXpp3Writer
argument_list|()
decl_stmt|;
name|Xpp3Writer
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|v4Model
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|createFile
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|,
name|targetFile
argument_list|,
name|digesters
argument_list|)
expr_stmt|;
name|List
name|warnings
init|=
name|translator
operator|.
name|getWarnings
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|warnings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|message
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"invalid.source.pom"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
name|result
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"unable.to.write.converted.pom"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
catch|catch
parameter_list|(
name|PomTranslationException
name|e
parameter_list|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"invalid.source.pom"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
name|result
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"warning.missing.pom"
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|testChecksums
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|Iterator
name|it
init|=
name|digesters
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Digester
name|digester
init|=
operator|(
name|Digester
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|&=
name|verifyChecksum
argument_list|(
name|file
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getDigesterFileExtension
argument_list|(
name|digester
argument_list|)
argument_list|,
name|digester
argument_list|,
comment|//$NON-NLS-1$
name|artifact
argument_list|,
literal|"failure.incorrect."
operator|+
name|getDigesterFileExtension
argument_list|(
name|digester
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|verifyChecksum
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|fileName
parameter_list|,
name|Digester
name|digester
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|File
name|checksumFile
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksumFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|checksum
init|=
name|AsciiFileUtil
operator|.
name|readFile
argument_list|(
name|checksumFile
argument_list|)
decl_stmt|;
try|try
block|{
name|digester
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * File extension for checksums      * TODO should be moved to plexus-digester ?      */
specifier|private
name|String
name|getDigesterFileExtension
parameter_list|(
name|Digester
name|digester
parameter_list|)
block|{
return|return
name|digester
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
return|;
comment|//$NON-NLS-1$ //$NON-NLS-2$
block|}
specifier|private
name|boolean
name|copyArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|,
name|FileTransaction
name|transaction
parameter_list|)
throws|throws
name|ArtifactConversionException
block|{
name|File
name|sourceFile
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"/plugins/"
argument_list|)
operator|>
operator|-
literal|1
condition|)
comment|//$NON-NLS-1$
block|{
name|artifact
operator|.
name|setArtifactHandler
argument_list|(
name|artifactHandlerManager
operator|.
name|getArtifactHandler
argument_list|(
literal|"maven-plugin"
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
block|}
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
try|try
block|{
name|boolean
name|matching
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|targetFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|matching
operator|=
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|matching
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.target.already.exists"
argument_list|)
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|force
operator|||
operator|!
name|matching
condition|)
block|{
if|if
condition|(
name|testChecksums
argument_list|(
name|artifact
argument_list|,
name|sourceFile
argument_list|)
condition|)
block|{
name|transaction
operator|.
name|copyFile
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|,
name|digesters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"error.copying.artifact"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Metadata
name|createBaseMetadata
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
specifier|private
name|Metadata
name|readMetadata
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|ArtifactConversionException
block|{
name|Metadata
name|metadata
decl_stmt|;
name|MetadataXpp3Reader
name|reader
init|=
operator|new
name|MetadataXpp3Reader
argument_list|()
decl_stmt|;
name|FileReader
name|fileReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileReader
operator|=
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|reader
operator|.
name|read
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"error.reading.target.metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"error.reading.target.metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"error.reading.target.metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
specifier|private
name|boolean
name|validateMetadata
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|ArtifactConversionException
block|{
name|ArtifactRepository
name|repository
init|=
name|artifact
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|RepositoryMetadata
name|repositoryMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|repositoryMetadata
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Metadata
name|metadata
init|=
name|readMetadata
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|result
operator|=
name|validateMetadata
argument_list|(
name|metadata
argument_list|,
name|repositoryMetadata
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
name|repositoryMetadata
operator|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|repositoryMetadata
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Metadata
name|metadata
init|=
name|readMetadata
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|&&
name|validateMetadata
argument_list|(
name|metadata
argument_list|,
name|repositoryMetadata
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|validateMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|RepositoryMetadata
name|repositoryMetadata
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|groupIdKey
decl_stmt|;
name|String
name|artifactIdKey
init|=
literal|null
decl_stmt|;
name|String
name|snapshotKey
init|=
literal|null
decl_stmt|;
name|String
name|versionKey
init|=
literal|null
decl_stmt|;
name|String
name|versionsKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repositoryMetadata
operator|.
name|storedInGroupDirectory
argument_list|()
condition|)
block|{
name|groupIdKey
operator|=
literal|"failure.incorrect.groupMetadata.groupId"
expr_stmt|;
comment|//$NON-NLS-1$
block|}
if|else if
condition|(
name|repositoryMetadata
operator|.
name|storedInArtifactVersionDirectory
argument_list|()
condition|)
block|{
name|groupIdKey
operator|=
literal|"failure.incorrect.snapshotMetadata.groupId"
expr_stmt|;
comment|//$NON-NLS-1$
name|artifactIdKey
operator|=
literal|"failure.incorrect.snapshotMetadata.artifactId"
expr_stmt|;
comment|//$NON-NLS-1$
name|versionKey
operator|=
literal|"failure.incorrect.snapshotMetadata.version"
expr_stmt|;
comment|//$NON-NLS-1$
name|snapshotKey
operator|=
literal|"failure.incorrect.snapshotMetadata.snapshot"
expr_stmt|;
comment|//$NON-NLS-1$
block|}
else|else
block|{
name|groupIdKey
operator|=
literal|"failure.incorrect.artifactMetadata.groupId"
expr_stmt|;
comment|//$NON-NLS-1$
name|artifactIdKey
operator|=
literal|"failure.incorrect.artifactMetadata.artifactId"
expr_stmt|;
comment|//$NON-NLS-1$
name|versionsKey
operator|=
literal|"failure.incorrect.artifactMetadata.versions"
expr_stmt|;
comment|//$NON-NLS-1$
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
name|groupIdKey
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|repositoryMetadata
operator|.
name|storedInGroupDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|metadata
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
name|artifactIdKey
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|repositoryMetadata
operator|.
name|storedInArtifactVersionDirectory
argument_list|()
condition|)
block|{
comment|// artifact metadata
name|boolean
name|foundVersion
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getVersioning
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|metadata
operator|.
name|getVersioning
argument_list|()
operator|.
name|getVersions
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundVersion
condition|;
control|)
block|{
name|String
name|version
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
condition|)
block|{
name|foundVersion
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundVersion
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
name|versionsKey
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// snapshot metadata
if|if
condition|(
operator|!
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
name|versionKey
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|Matcher
name|matcher
init|=
name|Artifact
operator|.
name|VERSION_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|boolean
name|correct
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getVersioning
argument_list|()
operator|!=
literal|null
operator|&&
name|metadata
operator|.
name|getVersioning
argument_list|()
operator|.
name|getSnapshot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Snapshot
name|snapshot
init|=
name|metadata
operator|.
name|getVersioning
argument_list|()
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|int
name|build
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|String
name|ts
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|build
operator|==
name|snapshot
operator|.
name|getBuildNumber
argument_list|()
operator|&&
name|ts
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|getTimestamp
argument_list|()
argument_list|)
condition|)
block|{
name|correct
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|correct
condition|)
block|{
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
name|snapshotKey
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|updateMetadata
parameter_list|(
name|RepositoryMetadata
name|artifactMetadata
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|,
name|Metadata
name|newMetadata
parameter_list|,
name|FileTransaction
name|transaction
parameter_list|)
throws|throws
name|ArtifactConversionException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
decl_stmt|;
name|boolean
name|changed
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|metadata
operator|=
name|readMetadata
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|changed
operator|=
name|metadata
operator|.
name|merge
argument_list|(
name|newMetadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|metadata
operator|=
name|newMetadata
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|StringWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|MetadataXpp3Writer
name|mappingWriter
init|=
operator|new
name|MetadataXpp3Writer
argument_list|()
decl_stmt|;
name|mappingWriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|createFile
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|,
name|file
argument_list|,
name|digesters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactConversionException
argument_list|(
name|Messages
operator|.
name|getString
argument_list|(
literal|"error.writing.target.metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
comment|//$NON-NLS-1$
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|doRelocation
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|v3_0_0
operator|.
name|Model
name|v3Model
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|,
name|FileTransaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
name|v3Model
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"relocated.groupId"
argument_list|)
operator|||
name|properties
operator|.
name|containsKey
argument_list|(
literal|"relocated.artifactId"
argument_list|)
comment|//$NON-NLS-1$ //$NON-NLS-2$
operator|||
name|properties
operator|.
name|containsKey
argument_list|(
literal|"relocated.version"
argument_list|)
condition|)
comment|//$NON-NLS-1$
block|{
name|String
name|newGroupId
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"relocated.groupId"
argument_list|,
name|v3Model
operator|.
name|getGroupId
argument_list|()
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
name|properties
operator|.
name|remove
argument_list|(
literal|"relocated.groupId"
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
name|String
name|newArtifactId
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"relocated.artifactId"
argument_list|,
name|v3Model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
name|properties
operator|.
name|remove
argument_list|(
literal|"relocated.artifactId"
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
name|String
name|newVersion
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"relocated.version"
argument_list|,
name|v3Model
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
name|properties
operator|.
name|remove
argument_list|(
literal|"relocated.version"
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
name|String
name|message
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"relocated.message"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$ //$NON-NLS-2$
name|properties
operator|.
name|remove
argument_list|(
literal|"relocated.message"
argument_list|)
expr_stmt|;
comment|//$NON-NLS-1$
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|v3Model
operator|.
name|setProperties
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|writeRelocationPom
argument_list|(
name|v3Model
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|v3Model
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|v3Model
operator|.
name|getVersion
argument_list|()
argument_list|,
name|newGroupId
argument_list|,
name|newArtifactId
argument_list|,
name|newVersion
argument_list|,
name|message
argument_list|,
name|repository
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
name|v3Model
operator|.
name|setGroupId
argument_list|(
name|newGroupId
argument_list|)
expr_stmt|;
name|v3Model
operator|.
name|setArtifactId
argument_list|(
name|newArtifactId
argument_list|)
expr_stmt|;
name|v3Model
operator|.
name|setVersion
argument_list|(
name|newVersion
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setGroupId
argument_list|(
name|newGroupId
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setArtifactId
argument_list|(
name|newArtifactId
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|newVersion
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|writeRelocationPom
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|newGroupId
parameter_list|,
name|String
name|newArtifactId
parameter_list|,
name|String
name|newVersion
parameter_list|,
name|String
name|message
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|,
name|FileTransaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|Model
name|pom
init|=
operator|new
name|Model
argument_list|()
decl_stmt|;
name|pom
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|pom
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|pom
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|DistributionManagement
name|dMngt
init|=
operator|new
name|DistributionManagement
argument_list|()
decl_stmt|;
name|Relocation
name|relocation
init|=
operator|new
name|Relocation
argument_list|()
decl_stmt|;
name|relocation
operator|.
name|setGroupId
argument_list|(
name|newGroupId
argument_list|)
expr_stmt|;
name|relocation
operator|.
name|setArtifactId
argument_list|(
name|newArtifactId
argument_list|)
expr_stmt|;
name|relocation
operator|.
name|setVersion
argument_list|(
name|newVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|relocation
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|dMngt
operator|.
name|setRelocation
argument_list|(
name|relocation
argument_list|)
expr_stmt|;
name|pom
operator|.
name|setDistributionManagement
argument_list|(
name|dMngt
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|artifactFactory
operator|.
name|createBuildArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|"pom"
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|MavenXpp3Writer
name|pomWriter
init|=
operator|new
name|MavenXpp3Writer
argument_list|()
decl_stmt|;
name|pomWriter
operator|.
name|write
argument_list|(
name|strWriter
argument_list|,
name|pom
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|createFile
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|,
name|pomFile
argument_list|,
name|digesters
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addWarning
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|List
name|messages
init|=
operator|(
name|List
operator|)
name|warnings
operator|.
name|get
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|messages
operator|==
literal|null
condition|)
block|{
name|messages
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|warnings
operator|.
name|put
argument_list|(
name|artifact
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearWarnings
parameter_list|()
block|{
name|warnings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
name|getWarnings
parameter_list|()
block|{
return|return
name|warnings
return|;
block|}
block|}
end_class

end_unit

