begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * LatinEntityResolutionReader - Read a Character Stream.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|LatinEntityResolutionReader
extends|extends
name|Reader
block|{
specifier|private
name|BufferedReader
name|originalReader
decl_stmt|;
specifier|private
name|char
name|leftover
index|[]
decl_stmt|;
specifier|private
name|Pattern
name|entityPattern
decl_stmt|;
specifier|public
name|LatinEntityResolutionReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|originalReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\&[a-zA-Z]+\\;"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read characters into a portion of an array. This method will block until some input is available,       * an I/O error occurs, or the end of the stream is reached.      *       * @param destbuf Destination buffer      * @param offset Offset (in destination buffer) at which to start storing characters      * @param length Maximum number of characters to read      * @return The number of characters read, or -1 if the end of the stream has been reached      * @throws IOException if an I/O error occurs.      */
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|destbuf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tmp_length
decl_stmt|;
name|int
name|current_requested_offset
init|=
name|offset
decl_stmt|;
name|int
name|current_requested_length
init|=
name|length
decl_stmt|;
comment|// Drain leftover from last read request.
if|if
condition|(
name|leftover
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|leftover
operator|.
name|length
operator|>
name|length
condition|)
block|{
comment|// Copy partial leftover.
name|System
operator|.
name|arraycopy
argument_list|(
name|leftover
argument_list|,
literal|0
argument_list|,
name|destbuf
argument_list|,
name|current_requested_offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// Create new leftover of remaining.
name|char
name|tmp
index|[]
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|leftover
argument_list|,
name|length
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|leftover
operator|=
operator|new
name|char
index|[
name|tmp
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|leftover
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// Return len
return|return
name|length
return|;
block|}
else|else
block|{
name|tmp_length
operator|=
name|leftover
operator|.
name|length
expr_stmt|;
comment|// Copy full leftover
name|System
operator|.
name|arraycopy
argument_list|(
name|leftover
argument_list|,
literal|0
argument_list|,
name|destbuf
argument_list|,
name|current_requested_offset
argument_list|,
name|tmp_length
argument_list|)
expr_stmt|;
comment|// Empty out leftover (as there is now none left)
name|leftover
operator|=
literal|null
expr_stmt|;
comment|// Adjust offset and lengths.
name|current_requested_offset
operator|+=
name|tmp_length
expr_stmt|;
name|current_requested_length
operator|-=
name|tmp_length
expr_stmt|;
block|}
block|}
name|StringBuffer
name|sbuf
init|=
name|getExpandedBuffer
argument_list|(
name|current_requested_length
argument_list|)
decl_stmt|;
comment|// Have we reached the end of the buffer?
if|if
condition|(
name|sbuf
operator|==
literal|null
condition|)
block|{
comment|// Do we have content?
if|if
condition|(
name|current_requested_offset
operator|>
name|offset
condition|)
block|{
comment|// Signal that we do, by calculating length.
return|return
operator|(
name|current_requested_offset
operator|-
name|offset
operator|)
return|;
block|}
comment|// No content. signal end of buffer.
return|return
operator|-
literal|1
return|;
block|}
comment|// Copy from expanded buf whatever length we can accomodate.
name|tmp_length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sbuf
operator|.
name|length
argument_list|()
argument_list|,
name|current_requested_length
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|tmp_length
argument_list|,
name|destbuf
argument_list|,
name|current_requested_offset
argument_list|)
expr_stmt|;
comment|// Create the leftover (if any)
if|if
condition|(
name|tmp_length
operator|<
name|sbuf
operator|.
name|length
argument_list|()
condition|)
block|{
name|leftover
operator|=
operator|new
name|char
index|[
name|sbuf
operator|.
name|length
argument_list|()
operator|-
name|tmp_length
index|]
expr_stmt|;
name|sbuf
operator|.
name|getChars
argument_list|(
name|tmp_length
argument_list|,
name|tmp_length
operator|+
name|leftover
operator|.
name|length
argument_list|,
name|leftover
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Calculate Actual Length and return.
return|return
operator|(
name|current_requested_offset
operator|-
name|offset
operator|)
operator|+
name|tmp_length
return|;
block|}
specifier|private
name|StringBuffer
name|getExpandedBuffer
parameter_list|(
name|int
name|minimum_length
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|buf
init|=
literal|null
decl_stmt|;
name|String
name|line
init|=
name|this
operator|.
name|originalReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
operator|(
name|line
operator|==
literal|null
operator|)
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
name|buf
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|expandLine
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add newline only if there is more data.
if|if
condition|(
name|this
operator|.
name|originalReader
operator|.
name|ready
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
name|minimum_length
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|this
operator|.
name|originalReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|done
operator|=
operator|(
name|line
operator|==
literal|null
operator|)
expr_stmt|;
block|}
block|}
return|return
name|buf
return|;
block|}
specifier|private
name|String
name|expandLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|String
name|entity
decl_stmt|;
name|Matcher
name|mat
init|=
name|this
operator|.
name|entityPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|mat
operator|.
name|find
argument_list|(
name|offset
argument_list|)
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|mat
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entity
operator|=
name|mat
operator|.
name|group
argument_list|()
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|LatinEntities
operator|.
name|resolveEntity
argument_list|(
name|entity
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|mat
operator|.
name|start
argument_list|()
operator|+
name|entity
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|originalReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

