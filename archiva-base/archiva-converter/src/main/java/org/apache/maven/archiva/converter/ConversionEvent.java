begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|legacy
operator|.
name|LegacyRepositoryConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_comment
comment|/**  * ConversionEvent   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ConversionEvent
block|{
specifier|public
specifier|static
specifier|final
name|int
name|STARTED
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PROCESSED
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|WARNING
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ERROR
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FINISHED
init|=
literal|4
decl_stmt|;
specifier|private
name|int
name|type
decl_stmt|;
specifier|private
name|String
name|message
decl_stmt|;
specifier|private
name|Artifact
name|artifact
decl_stmt|;
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
specifier|private
name|Exception
name|exception
decl_stmt|;
specifier|public
name|ConversionEvent
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|ConversionEvent
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|int
name|type
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
name|this
argument_list|(
name|repository
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|ConversionEvent
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|int
name|type
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|repository
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|ConversionEvent
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|int
name|type
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|this
argument_list|(
name|repository
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
specifier|public
name|Artifact
name|getArtifact
parameter_list|()
block|{
return|return
name|artifact
return|;
block|}
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|ArtifactRepository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
comment|/**      *<p>      * The type of event.      *</p>      *       *<p>      * Can be one of the following ...      *</p>      *       *<ul>      *<li>{@link #STARTED} - the whole repository conversion process has started.      *      only seen when using the whole repository conversion technique with the      *      {@link LegacyRepositoryConverter#convertLegacyRepository(java.io.File, java.io.File, java.util.List, boolean)}       *      method.</li>      *<li>{@link #PROCESSED} - a specific artifact has been processed.</li>      *<li>{@link #WARNING} - a warning has been detected for a specific artifact during the conversion process.</li>      *<li>{@link #ERROR} - an error in the processing of an artifact has been detected.</li>      *<li>{@link #FINISHED} - the whole repository conversion process has finished.      *      only seen when using the whole repository conversion technique with the      *      {@link LegacyRepositoryConverter#convertLegacyRepository(java.io.File, java.io.File, java.util.List, boolean)}       *      method.</li>      *</ul>      * @return      */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

