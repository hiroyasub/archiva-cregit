begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|legacy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|RepositoryConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DefaultLegacyRepositoryConverter   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  * @plexus.component   */
end_comment

begin_class
specifier|public
class|class
name|DefaultLegacyRepositoryConverter
implements|implements
name|LegacyRepositoryConverter
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactRepositoryFactory
name|artifactRepositoryFactory
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|private
name|ArtifactRepositoryLayout
name|defaultLayout
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.consumers.RepositoryContentConsumer"       *                     role-hint="artifact-legacy-to-default-converter"      */
specifier|private
name|LegacyConverterArtifactConsumer
name|legacyConverterConsumer
decl_stmt|;
specifier|public
name|void
name|convertLegacyRepository
parameter_list|(
name|File
name|legacyRepositoryDirectory
parameter_list|,
name|File
name|repositoryDirectory
parameter_list|,
name|List
name|fileExclusionPatterns
parameter_list|)
throws|throws
name|RepositoryConversionException
block|{
try|try
block|{
name|String
name|legacyRepositoryUrl
init|=
name|PathUtil
operator|.
name|toUrl
argument_list|(
name|legacyRepositoryDirectory
argument_list|)
decl_stmt|;
name|String
name|defaultRepositoryUrl
init|=
name|PathUtil
operator|.
name|toUrl
argument_list|(
name|repositoryDirectory
argument_list|)
decl_stmt|;
comment|// workaround for spaces non converted by PathUtils in wagon
comment|// TODO: remove it when PathUtils will be fixed
if|if
condition|(
name|legacyRepositoryUrl
operator|.
name|indexOf
argument_list|(
literal|"%20"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|legacyRepositoryUrl
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|legacyRepositoryUrl
argument_list|,
literal|"%20"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultRepositoryUrl
operator|.
name|indexOf
argument_list|(
literal|"%20"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|defaultRepositoryUrl
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|defaultRepositoryUrl
argument_list|,
literal|"%20"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|ArchivaRepository
name|legacyRepository
init|=
operator|new
name|ArchivaRepository
argument_list|(
literal|"legacy"
argument_list|,
literal|"Legacy Repository"
argument_list|,
name|legacyRepositoryUrl
argument_list|)
decl_stmt|;
name|legacyRepository
operator|.
name|getModel
argument_list|()
operator|.
name|setLayoutName
argument_list|(
literal|"legacy"
argument_list|)
expr_stmt|;
name|ArtifactRepository
name|repository
init|=
name|artifactRepositoryFactory
operator|.
name|createArtifactRepository
argument_list|(
literal|"default"
argument_list|,
name|defaultRepositoryUrl
argument_list|,
name|defaultLayout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|legacyConverterConsumer
operator|.
name|setExcludes
argument_list|(
name|fileExclusionPatterns
argument_list|)
expr_stmt|;
name|legacyConverterConsumer
operator|.
name|setDestinationRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|List
name|consumers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|legacyConverterConsumer
argument_list|)
expr_stmt|;
name|RepositoryScanner
name|scanner
init|=
operator|new
name|RepositoryScanner
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|scan
argument_list|(
name|legacyRepository
argument_list|,
name|consumers
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Error convering legacy repository."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

