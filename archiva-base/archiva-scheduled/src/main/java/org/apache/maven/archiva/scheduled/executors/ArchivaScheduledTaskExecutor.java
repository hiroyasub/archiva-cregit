begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|executors
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|DatabaseTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:jmcconnell@apache.org">Jesse McConnell</a>  * @version $Id:$  *   * @plexus.component role="org.codehaus.plexus.taskqueue.execution.TaskExecutor"   *      role-hint="archiva-task-executor"  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaScheduledTaskExecutor
extends|extends
name|AbstractLogEnabled
implements|implements
name|TaskExecutor
block|{
comment|/**      * Configuration store.      *      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|DatabaseUpdater
name|databaseUpdater
decl_stmt|;
specifier|public
name|void
name|executeTask
parameter_list|(
name|Task
name|task
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
if|if
condition|(
name|task
operator|instanceof
name|DatabaseTask
condition|)
block|{
name|executeDatabaseTask
argument_list|(
operator|(
name|DatabaseTask
operator|)
name|task
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|task
operator|instanceof
name|RepositoryTask
condition|)
block|{
name|executeRepositoryTask
argument_list|(
operator|(
name|RepositoryTask
operator|)
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Unknown Task: "
operator|+
name|task
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|executeDatabaseTask
parameter_list|(
name|DatabaseTask
name|task
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Executing task from queue with job name: "
operator|+
name|task
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|databaseUpdater
operator|.
name|updateAllUnprocessed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Error running unprocessed updater"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|databaseUpdater
operator|.
name|updateAllProcessed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Error running processed updater"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Finished database task in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeRepositoryTask
parameter_list|(
name|RepositoryTask
name|task
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Executing task from queue with job name: "
operator|+
name|task
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// insert repository scanning codelets here
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Finished repository task for "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

