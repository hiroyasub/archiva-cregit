begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|executors
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Mutable list of consumer for the Data Refresh.  *   * NOTE: This class only exists to minimize the requirements of manual component management.  *       This approach allows for a small and simple component definition in the application.xml  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.scheduler.executors.DataRefreshConsumers"  */
end_comment

begin_class
specifier|public
class|class
name|DataRefreshConsumers
block|{
comment|/**      * @plexus.configuration      */
specifier|private
name|List
name|consumerNames
decl_stmt|;
specifier|public
name|List
name|getConsumerNames
parameter_list|()
block|{
if|if
condition|(
name|consumerNames
operator|==
literal|null
condition|)
block|{
name|consumerNames
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|consumerNames
operator|.
name|add
argument_list|(
literal|"index-artifact"
argument_list|)
expr_stmt|;
name|consumerNames
operator|.
name|add
argument_list|(
literal|"artifact-health"
argument_list|)
expr_stmt|;
name|consumerNames
operator|.
name|add
argument_list|(
literal|"metadata-health"
argument_list|)
expr_stmt|;
block|}
return|return
name|consumerNames
return|;
block|}
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|getConsumerNames
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

