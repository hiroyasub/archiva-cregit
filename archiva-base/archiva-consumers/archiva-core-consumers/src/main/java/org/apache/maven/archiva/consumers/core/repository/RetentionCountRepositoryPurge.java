begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *  http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArtifactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|BidirectionalRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|FilenameParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Purge the repository by retention count. Retain only the specified number of snapshots.  *  * @author<a href="mailto:oching@apache.org">Maria Odea Ching</a>  */
end_comment

begin_class
specifier|public
class|class
name|RetentionCountRepositoryPurge
extends|extends
name|AbstractRepositoryPurge
block|{
specifier|private
name|int
name|retentionCount
decl_stmt|;
specifier|public
name|RetentionCountRepositoryPurge
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|BidirectionalRepositoryLayout
name|layout
parameter_list|,
name|ArtifactDAO
name|artifactDao
parameter_list|,
name|int
name|retentionCount
parameter_list|)
block|{
name|super
argument_list|(
name|repository
argument_list|,
name|layout
argument_list|,
name|artifactDao
argument_list|)
expr_stmt|;
name|this
operator|.
name|retentionCount
operator|=
name|retentionCount
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryPurgeException
block|{
try|try
block|{
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|FilenameParts
name|parts
init|=
name|getFilenameParts
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|parts
operator|.
name|version
argument_list|)
condition|)
block|{
name|File
name|parentDir
init|=
name|artifactFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|parentDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|List
name|uniqueVersionFilenames
init|=
name|getUniqueVersions
argument_list|(
name|files
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|uniqueVersionFilenames
argument_list|)
expr_stmt|;
if|if
condition|(
name|uniqueVersionFilenames
operator|.
name|size
argument_list|()
operator|>
name|retentionCount
condition|)
block|{
name|int
name|count
init|=
name|uniqueVersionFilenames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|uniqueVersionFilenames
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|filename
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|retentionCount
condition|)
block|{
name|File
index|[]
name|artifactFiles
init|=
name|getFiles
argument_list|(
name|parentDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|purge
argument_list|(
name|artifactFiles
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryPurgeException
argument_list|(
name|le
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
name|getUniqueVersions
parameter_list|(
name|File
index|[]
name|files
parameter_list|)
block|{
name|List
name|uniqueVersions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|)
operator|.
name|endsWith
argument_list|(
literal|"SHA1"
argument_list|)
operator|&&
operator|!
operator|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|)
operator|.
name|endsWith
argument_list|(
literal|"MD5"
argument_list|)
condition|)
block|{
name|FilenameParts
name|filenameParts
init|=
literal|null
decl_stmt|;
comment|// skip those files that have layout exception (no artifact id/no version/no extension)
try|try
block|{
name|filenameParts
operator|=
name|getFilenameParts
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|le
parameter_list|)
block|{
block|}
if|if
condition|(
name|filenameParts
operator|!=
literal|null
operator|&&
operator|!
name|uniqueVersions
operator|.
name|contains
argument_list|(
name|filenameParts
operator|.
name|artifactId
operator|+
literal|"-"
operator|+
name|filenameParts
operator|.
name|version
argument_list|)
condition|)
block|{
name|uniqueVersions
operator|.
name|add
argument_list|(
name|filenameParts
operator|.
name|artifactId
operator|+
literal|"-"
operator|+
name|filenameParts
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|uniqueVersions
return|;
block|}
block|}
end_class

end_unit

