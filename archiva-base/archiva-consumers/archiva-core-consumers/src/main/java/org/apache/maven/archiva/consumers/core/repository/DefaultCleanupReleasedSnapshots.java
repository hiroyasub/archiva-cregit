begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|FilenameParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * M2 implementation for cleaning up the released snapshots.  *  * @author<a href="mailto:oching@apache.org">Maria Odea Ching</a>  */
end_comment

begin_class
specifier|public
class|class
name|DefaultCleanupReleasedSnapshots
extends|extends
name|AbstractRepositoryPurge
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT
init|=
literal|"-SNAPSHOT"
decl_stmt|;
specifier|private
name|RepositoryMetadataReader
name|metadataReader
decl_stmt|;
specifier|public
name|DefaultCleanupReleasedSnapshots
parameter_list|()
block|{
name|metadataReader
operator|=
operator|new
name|RepositoryMetadataReader
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|String
name|path
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryPurgeException
block|{
try|try
block|{
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|getRepository
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|FilenameParts
name|parts
init|=
name|getFilenameParts
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|parts
operator|.
name|version
argument_list|)
condition|)
block|{
comment|// version
name|File
name|versionDir
init|=
name|artifactFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
comment|// artifactID - scan for other versions
name|File
name|artifactIdDir
init|=
name|versionDir
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
name|List
name|versions
init|=
name|getVersionsInDir
argument_list|(
name|artifactIdDir
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|versions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|versions
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|version
init|=
operator|(
name|String
operator|)
name|versions
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionComparator
operator|.
name|getInstance
argument_list|()
operator|.
name|compare
argument_list|(
name|version
argument_list|,
name|versionDir
operator|.
name|getName
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|purge
argument_list|(
name|versionDir
operator|.
name|listFiles
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|versionDir
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|updated
condition|)
block|{
name|updateMetadata
argument_list|(
name|artifactIdDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryPurgeException
argument_list|(
name|le
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryPurgeException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryPurgeException
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateMetadata
parameter_list|(
name|File
name|artifactIdDir
parameter_list|)
throws|throws
name|RepositoryPurgeException
block|{
name|File
index|[]
name|metadataFiles
init|=
name|getFiles
argument_list|(
name|artifactIdDir
argument_list|,
literal|"maven-metadata"
argument_list|)
decl_stmt|;
name|List
name|availableVersions
init|=
name|getVersionsInDir
argument_list|(
name|artifactIdDir
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|availableVersions
argument_list|)
expr_stmt|;
name|String
name|latestReleased
init|=
name|getLatestReleased
argument_list|(
name|availableVersions
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadataFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|metadataFiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|)
operator|.
name|endsWith
argument_list|(
literal|"SHA1"
argument_list|)
operator|&&
operator|!
operator|(
name|metadataFiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|)
operator|.
name|endsWith
argument_list|(
literal|"MD5"
argument_list|)
condition|)
block|{
try|try
block|{
name|Date
name|lastUpdated
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|metadata
init|=
name|metadataReader
operator|.
name|read
argument_list|(
name|metadataFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|setAvailableVersions
argument_list|(
name|availableVersions
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLatestVersion
argument_list|(
operator|(
name|String
operator|)
name|availableVersions
operator|.
name|get
argument_list|(
name|availableVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setReleasedVersion
argument_list|(
name|latestReleased
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLastUpdatedTimestamp
argument_list|(
name|lastUpdated
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLastUpdated
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lastUpdated
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|metadata
argument_list|,
name|metadataFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|rme
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error updating metadata "
operator|+
name|metadataFiles
index|[
name|i
index|]
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getLatestReleased
parameter_list|(
name|List
name|availableVersions
parameter_list|)
block|{
name|List
name|reversedOrder
init|=
operator|new
name|ArrayList
argument_list|(
name|availableVersions
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reversedOrder
argument_list|)
expr_stmt|;
name|String
name|latestReleased
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|reversedOrder
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|version
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|version
argument_list|)
operator|.
name|endsWith
argument_list|(
name|SNAPSHOT
argument_list|)
condition|)
block|{
name|latestReleased
operator|=
name|version
expr_stmt|;
return|return
name|latestReleased
return|;
block|}
block|}
return|return
name|latestReleased
return|;
block|}
specifier|private
name|List
name|getVersionsInDir
parameter_list|(
name|File
name|artifactIdDir
parameter_list|)
block|{
name|String
index|[]
name|versionsAndMore
init|=
name|artifactIdDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
name|versions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|versionsAndMore
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|VersionUtil
operator|.
name|isVersion
argument_list|(
name|versionsAndMore
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|versionsAndMore
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|versions
return|;
block|}
block|}
end_class

end_unit

