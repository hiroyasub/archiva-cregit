begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|database
operator|.
name|project
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelResolver
import|;
end_import

begin_comment
comment|/**  * Wrapped {@link ProjectModelResolver} to allow for insertion of resolved project models on discovery.   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|WrappedDatabaseProjectModelResolver
implements|implements
name|ProjectModelResolver
block|{
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
specifier|private
name|ProjectModelResolver
name|resolver
decl_stmt|;
specifier|public
name|WrappedDatabaseProjectModelResolver
parameter_list|(
name|ArchivaDAO
name|dao
parameter_list|,
name|ProjectModelResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|dao
operator|=
name|dao
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
specifier|public
name|ArchivaProjectModel
name|resolveProjectModel
parameter_list|(
name|VersionedReference
name|reference
parameter_list|)
throws|throws
name|ProjectModelException
block|{
name|ArchivaProjectModel
name|model
init|=
name|resolver
operator|.
name|resolveProjectModel
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
return|return
name|model
return|;
block|}
comment|// Test if it exists.
if|if
condition|(
name|existsInDatabase
argument_list|(
name|model
argument_list|)
condition|)
block|{
name|removeFromDatabase
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
name|saveInDatabase
argument_list|(
name|model
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|private
name|void
name|saveInDatabase
parameter_list|(
name|ArchivaProjectModel
name|model
parameter_list|)
throws|throws
name|ProjectModelException
block|{
try|try
block|{
name|dao
operator|.
name|getProjectModelDAO
argument_list|()
operator|.
name|saveProjectModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Unable to save model to database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|removeFromDatabase
parameter_list|(
name|ArchivaProjectModel
name|model
parameter_list|)
throws|throws
name|ProjectModelException
block|{
try|try
block|{
name|dao
operator|.
name|getProjectModelDAO
argument_list|()
operator|.
name|deleteProjectModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Unable to remove existing model from database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|existsInDatabase
parameter_list|(
name|ArchivaProjectModel
name|model
parameter_list|)
throws|throws
name|ProjectModelException
block|{
try|try
block|{
name|ArchivaProjectModel
name|dbmodel
init|=
name|dao
operator|.
name|getProjectModelDAO
argument_list|()
operator|.
name|getProjectModel
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|dbmodel
operator|!=
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Unable to check for existing model from database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

