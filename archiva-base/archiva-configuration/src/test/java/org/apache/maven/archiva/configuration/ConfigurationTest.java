begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Test the generated Configuration class from Modello. This is primarily to test the hand coded methods.  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationTest
extends|extends
name|TestCase
block|{
specifier|private
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|public
name|void
name|testNetworkProxyRetrieval
parameter_list|()
block|{
name|NetworkProxyConfiguration
name|proxy1
init|=
name|createNetworkProxy
argument_list|(
literal|"id1"
argument_list|,
literal|"host1"
argument_list|,
literal|8080
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addNetworkProxy
argument_list|(
name|proxy1
argument_list|)
expr_stmt|;
name|NetworkProxyConfiguration
name|proxy2
init|=
name|createNetworkProxy
argument_list|(
literal|"id2"
argument_list|,
literal|"host2"
argument_list|,
literal|9090
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addNetworkProxy
argument_list|(
name|proxy2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxyConfiguration
argument_list|>
name|map
init|=
name|configuration
operator|.
name|getNetworkProxiesAsMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|)
argument_list|)
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|proxy1
argument_list|,
name|proxy2
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NetworkProxyConfiguration
name|createNetworkProxy
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|NetworkProxyConfiguration
name|proxy
init|=
operator|new
name|NetworkProxyConfiguration
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setProtocol
argument_list|(
literal|"http"
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
specifier|public
name|void
name|testRemoteRepositoryRetrieval
parameter_list|()
block|{
name|RemoteRepositoryConfiguration
name|repo1
init|=
name|createRemoteRepository
argument_list|(
literal|"id1"
argument_list|,
literal|"name 1"
argument_list|,
literal|"url 1"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|repo1
argument_list|)
expr_stmt|;
name|RemoteRepositoryConfiguration
name|repo2
init|=
name|createRemoteRepository
argument_list|(
literal|"id2"
argument_list|,
literal|"name 2"
argument_list|,
literal|"url 2"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|repo2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|map
init|=
name|configuration
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|)
argument_list|)
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|repo1
argument_list|,
name|repo2
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repo1
argument_list|,
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
literal|"id1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repo2
argument_list|,
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
literal|"id2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
literal|"id3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RemoteRepositoryConfiguration
name|createRemoteRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|public
name|void
name|testManagedRepositoryRetrieval
parameter_list|()
block|{
name|ManagedRepositoryConfiguration
name|repo1
init|=
name|createManagedRepository
argument_list|(
literal|"id1"
argument_list|,
literal|"name 1"
argument_list|,
literal|"path 1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|repo1
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repo2
init|=
name|createManagedRepository
argument_list|(
literal|"id2"
argument_list|,
literal|"name 2"
argument_list|,
literal|"path 2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|repo2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|map
init|=
name|configuration
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|)
argument_list|)
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|repo1
argument_list|,
name|repo2
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repo1
argument_list|,
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"id1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repo2
argument_list|,
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"id2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"id3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|boolean
name|scanned
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setScanned
argument_list|(
name|scanned
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|public
name|void
name|testNetworkProxyRetrievalWhenEmpty
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxyConfiguration
argument_list|>
name|map
init|=
name|configuration
operator|.
name|getNetworkProxiesAsMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoteRepositoryRetrievalWhenEmpty
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|map
init|=
name|configuration
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testManagedRepositoryRetrievalWhenEmpty
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|map
init|=
name|configuration
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

