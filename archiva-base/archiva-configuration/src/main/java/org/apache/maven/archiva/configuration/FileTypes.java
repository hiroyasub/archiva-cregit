begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
operator|.
name|FiletypeSelectionPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|ElementTextListClosure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * FileTypes   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.configuration.FileTypes"  */
end_comment

begin_class
specifier|public
class|class
name|FileTypes
implements|implements
name|Initializable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ARTIFACTS
init|=
literal|"artifacts"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_REMOVE
init|=
literal|"auto-remove"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEXABLE_CONTENT
init|=
literal|"indexable-content"
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * Map of default values for the file types.      */
specifier|private
name|Map
name|defaultTypeMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      *<p>      * Get the list of patterns for a specified filetype.      *</p>      *       *<p>      * You will always get a list.  In this order.      *<ul>      *<li>The Configured List</li>      *<li>The Default List</li>      *<li>A single item list of<code>"**<span>/</span>*"</code></li>      *</ul>      *</p>      *       * @param id the id to lookup.      * @return the list of patterns.      */
specifier|public
name|List
name|getFileTypePatterns
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Predicate
name|selectedFiletype
init|=
operator|new
name|FiletypeSelectionPredicate
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FileType
name|filetype
init|=
operator|(
name|FileType
operator|)
name|CollectionUtils
operator|.
name|find
argument_list|(
name|config
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getFileTypes
argument_list|()
argument_list|,
name|selectedFiletype
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|filetype
operator|!=
literal|null
operator|)
operator|&&
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|filetype
operator|.
name|getPatterns
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|filetype
operator|.
name|getPatterns
argument_list|()
return|;
block|}
name|List
name|defaultPatterns
init|=
operator|(
name|List
operator|)
name|defaultTypeMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|defaultPatterns
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*"
argument_list|)
return|;
block|}
return|return
name|defaultPatterns
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|defaultTypeMap
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|URL
name|defaultArchivaXml
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|XMLReader
name|reader
init|=
operator|new
name|XMLReader
argument_list|(
literal|"configuration"
argument_list|,
name|defaultArchivaXml
argument_list|)
decl_stmt|;
name|List
name|resp
init|=
name|reader
operator|.
name|getElementList
argument_list|(
literal|"//configuration/repositoryScanning/fileTypes/fileType"
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|resp
argument_list|,
operator|new
name|AddFileTypeToDefaultMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InitializationException
argument_list|(
literal|"Unable to setup default filetype maps."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
class|class
name|AddFileTypeToDefaultMap
implements|implements
name|Closure
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|instanceof
name|Element
operator|)
condition|)
block|{
comment|// Not an element. skip.
return|return;
block|}
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|input
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"fileType"
argument_list|,
name|elem
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Not a 'fileType' element. skip.
return|return;
block|}
name|String
name|id
init|=
name|elem
operator|.
name|elementText
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|Element
name|patternsElem
init|=
name|elem
operator|.
name|element
argument_list|(
literal|"patterns"
argument_list|)
decl_stmt|;
if|if
condition|(
name|patternsElem
operator|==
literal|null
condition|)
block|{
comment|// No patterns. skip.
return|return;
block|}
name|List
name|patternElemList
init|=
name|patternsElem
operator|.
name|elements
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|ElementTextListClosure
name|elemTextList
init|=
operator|new
name|ElementTextListClosure
argument_list|()
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|patternElemList
argument_list|,
name|elemTextList
argument_list|)
expr_stmt|;
name|List
name|patterns
init|=
name|elemTextList
operator|.
name|getList
argument_list|()
decl_stmt|;
name|defaultTypeMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|patterns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

