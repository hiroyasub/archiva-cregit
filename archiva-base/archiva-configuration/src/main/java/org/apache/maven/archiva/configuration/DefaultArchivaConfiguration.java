begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
operator|.
name|ProxyConnectorConfigurationOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|io
operator|.
name|registry
operator|.
name|ConfigurationRegistryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|io
operator|.
name|registry
operator|.
name|ConfigurationRegistryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of configuration holder that retrieves it from the registry.  *<p/>  * The registry layers and merges the 2 configuration files: user, and application server.  *<p/>  * Instead of relying on the model defaults, if the registry is empty a default configuration file is loaded and  * applied from a resource. The defaults are not loaded into the registry as the lists (eg repositories) could no longer  * be removed if that was the case.  *<p/>  * When saving the configuration, it is saved to the location it was read from. If it was read from the defaults, it  * will be saved to the user location.  * However, if the configuration contains information from both sources, an exception is raised as this is currently  * unsupported. The reason for this is that it is not possible to identify where to re-save elements, and can result  * in list configurations (eg repositories) becoming inconsistent.  *<p/>  * If the configuration is outdated, it will be upgraded when it is loaded. This is done by checking the version flag  * before reading it from the registry.  *  * @plexus.component role="org.apache.maven.archiva.configuration.ArchivaConfiguration"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultArchivaConfiguration
extends|extends
name|AbstractLogEnabled
implements|implements
name|ArchivaConfiguration
implements|,
name|RegistryListener
implements|,
name|Initializable
block|{
comment|/**      * Plexus registry to read the configuration from.      *      * @plexus.requirement role-hint="commons-configuration"      */
specifier|private
name|Registry
name|registry
decl_stmt|;
comment|/**      * The configuration that has been converted.      */
specifier|private
name|Configuration
name|configuration
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"org.apache.maven.archiva"
decl_stmt|;
comment|/**      * @plexus.configuration default-value="${user.home}/.m2/archiva.xml"      */
specifier|private
name|String
name|userConfigFilename
decl_stmt|;
comment|/**      * Listeners we've registered.      */
specifier|private
name|List
argument_list|<
name|RegistryListener
argument_list|>
name|listeners
init|=
operator|new
name|LinkedList
argument_list|<
name|RegistryListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getFilteredUserConfigFilename
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|userConfigFilename
argument_list|,
literal|"${user.home}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Configuration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
name|load
argument_list|()
expr_stmt|;
name|configuration
operator|=
name|processExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
specifier|private
name|Configuration
name|load
parameter_list|()
block|{
comment|// TODO: should this be the same as section? make sure unnamed sections still work (eg, sys properties)
name|Registry
name|subset
init|=
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|subset
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// a little autodetection of v1, even if version is omitted (this was previously allowed)
if|if
condition|(
name|subset
operator|.
name|getSubset
argument_list|(
literal|"repositoryScanning"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only for empty, or v< 1
name|subset
operator|=
name|readDefaultConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
name|Configuration
name|config
init|=
operator|new
name|ConfigurationRegistryReader
argument_list|()
operator|.
name|read
argument_list|(
name|subset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|getRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|V1RepositoryConfiguration
argument_list|>
name|i
init|=
name|config
operator|.
name|getRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|V1RepositoryConfiguration
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|setScanned
argument_list|(
name|r
operator|.
name|isIndexed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getUrl
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file://"
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLocation
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|.
name|getUrl
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLocation
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
name|r
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRemoteRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Normalize the order fields in the proxy connectors.
if|if
condition|(
operator|!
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
name|config
operator|.
name|getProxyConnectorAsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|proxyConnectorMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|connectors
init|=
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Sort connectors by order field.
name|Collections
operator|.
name|sort
argument_list|(
name|connectors
argument_list|,
name|ProxyConnectorConfigurationOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normalize the order field values.
name|int
name|order
init|=
literal|1
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|connector
range|:
name|connectors
control|)
block|{
name|connector
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|config
return|;
block|}
specifier|private
name|Registry
name|readDefaultConfiguration
parameter_list|()
block|{
comment|// if it contains some old configuration, remove it (Archiva 0.9)
name|registry
operator|.
name|removeSubset
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|addConfigurationFromResource
argument_list|(
literal|"org/apache/maven/archiva/configuration/default-archiva.xml"
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationRuntimeException
argument_list|(
literal|"Fatal error: Unable to find the built-in default configuration and load it into the registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|save
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RegistryException
throws|,
name|IndeterminateConfigurationException
block|{
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
name|Registry
name|baseSection
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
name|baseSection
expr_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
name|createDefaultConfigurationFile
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|baseSection
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|baseSection
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|boolean
name|foundList
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundList
condition|;
control|)
block|{
name|String
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// a little aggressive with the repositoryScanning and databaseScanning - should be no need to split
comment|// that configuration
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositories"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"proxyConnectors"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"networkProxies"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositoryScanning"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"databaseScanning"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"remoteRepositories"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"managedRepositories"
argument_list|)
condition|)
block|{
name|foundList
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundList
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IndeterminateConfigurationException
argument_list|(
literal|"Configuration can not be saved when it is loaded from two sources"
argument_list|)
throw|;
block|}
block|}
comment|// escape all cron expressions to handle ','
for|for
control|(
name|Iterator
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|i
init|=
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagedRepositoryConfiguration
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setRefreshCronExpression
argument_list|(
name|escapeCronExpression
argument_list|(
name|c
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getDatabaseScanning
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|getDatabaseScanning
argument_list|()
operator|.
name|setCronExpression
argument_list|(
name|escapeCronExpression
argument_list|(
name|configuration
operator|.
name|getDatabaseScanning
argument_list|()
operator|.
name|getCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|new
name|ConfigurationRegistryWriter
argument_list|()
operator|.
name|write
argument_list|(
name|configuration
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|section
operator|.
name|save
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|processExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Registry
name|createDefaultConfigurationFile
parameter_list|()
throws|throws
name|RegistryException
block|{
comment|// TODO: may not be needed under commons-configuration 1.4 - check
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getFilteredUserConfigFilename
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|file
argument_list|,
literal|"<configuration/>"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Unable to create configuration file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
operator|(
operator|(
name|Initializable
operator|)
name|registry
operator|)
operator|.
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RegistryListener
argument_list|>
name|i
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RegistryListener
name|l
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addRegistryChangeListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InitializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Unable to reinitialize configuration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
return|;
block|}
specifier|public
name|void
name|addChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|addRegistryChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// keep track for later
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRegistryChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|addChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|section
operator|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|addChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|registry
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|// nothing to do here
block|}
specifier|public
specifier|synchronized
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
name|configuration
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|String
name|removeExpressions
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|String
name|value
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|directory
argument_list|,
literal|"${appserver.base}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|,
literal|"${appserver.base}"
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|value
argument_list|,
literal|"${appserver.home}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.home"
argument_list|,
literal|"${appserver.home}"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|private
name|String
name|unescapeCronExpression
parameter_list|(
name|String
name|cronExpression
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|cronExpression
argument_list|,
literal|"\\,"
argument_list|,
literal|","
argument_list|)
return|;
block|}
specifier|private
name|String
name|escapeCronExpression
parameter_list|(
name|String
name|cronExpression
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|cronExpression
argument_list|,
literal|","
argument_list|,
literal|"\\,"
argument_list|)
return|;
block|}
specifier|private
name|Configuration
name|processExpressions
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|// TODO: for commons-configuration 1.3 only
for|for
control|(
name|Iterator
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|i
init|=
name|config
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagedRepositoryConfiguration
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setLocation
argument_list|(
name|removeExpressions
argument_list|(
name|c
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRefreshCronExpression
argument_list|(
name|unescapeCronExpression
argument_list|(
name|c
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DatabaseScanningConfiguration
name|databaseScanning
init|=
name|config
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
if|if
condition|(
name|databaseScanning
operator|!=
literal|null
condition|)
block|{
name|String
name|cron
init|=
name|databaseScanning
operator|.
name|getCronExpression
argument_list|()
decl_stmt|;
name|databaseScanning
operator|.
name|setCronExpression
argument_list|(
name|unescapeCronExpression
argument_list|(
name|cron
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

