begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * A component that is first in the plexus startup that ensure that the configuration  * file format has been upgraded properly.   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.configuration.ConfigurationUpgrade"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationUpgrade
extends|extends
name|AbstractLogEnabled
block|{
specifier|public
specifier|static
specifier|final
name|int
name|CURRENT_CONFIG_VERSION
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|performed
init|=
literal|false
decl_stmt|;
comment|/**      * Perform the upgrade (if needed).      *       * NOTE: This component should *NOT USE* the configuration api to do it's upgrade      */
specifier|public
name|void
name|performUpgrade
parameter_list|()
block|{
name|performed
operator|=
literal|true
expr_stmt|;
name|File
name|userConfigFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".m2/archiva.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|userConfigFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|writeDefaultConfigFile
argument_list|(
name|userConfigFile
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|configOk
init|=
literal|false
decl_stmt|;
try|try
block|{
name|XMLReader
name|xml
init|=
operator|new
name|XMLReader
argument_list|(
literal|"configuration"
argument_list|,
name|userConfigFile
argument_list|)
decl_stmt|;
name|String
name|configVersion
init|=
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//configuration/version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|configVersion
argument_list|)
condition|)
block|{
name|configOk
operator|=
literal|true
expr_stmt|;
comment|// Found an embedded configuration version.
name|int
name|version
init|=
name|NumberUtils
operator|.
name|toInt
argument_list|(
name|configVersion
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|<
name|CURRENT_CONFIG_VERSION
condition|)
block|{
name|upgradeVersion
argument_list|(
name|userConfigFile
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to read user configuration XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|configOk
condition|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|userConfigFile
argument_list|,
operator|new
name|File
argument_list|(
name|userConfigFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".bak"
argument_list|)
argument_list|)
expr_stmt|;
name|writeDefaultConfigFile
argument_list|(
name|userConfigFile
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to create backup of your configuration file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
specifier|private
name|void
name|upgradeVersion
parameter_list|(
name|File
name|userConfigFile
parameter_list|,
name|XMLReader
name|xml
parameter_list|)
block|{
comment|// TODO: write implementation when we have a current version greater than 1.
block|}
specifier|private
name|void
name|writeDefaultConfigFile
parameter_list|(
name|File
name|userConfigFile
parameter_list|)
block|{
name|URL
name|defaultConfigURL
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/org/apache/maven/archiva/configuration/default-archiva.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultConfigURL
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|userConfigFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<configuration />"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to write default (generic) configuration file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write default to user config file location.
try|try
block|{
name|FileOutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|userConfigFile
argument_list|)
decl_stmt|;
name|InputStream
name|input
init|=
name|defaultConfigURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to write default configuration file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasPerformed
parameter_list|()
block|{
return|return
name|this
operator|.
name|performed
return|;
block|}
block|}
end_class

end_unit

