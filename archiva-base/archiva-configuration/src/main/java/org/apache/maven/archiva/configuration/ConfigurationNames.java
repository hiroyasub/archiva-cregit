begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility methods for testing the configuration property name.   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationNames
block|{
specifier|private
specifier|static
specifier|final
name|Set
name|networkProxies
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|repositoryScanning
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|repositories
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|proxyConnectors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|repositories
operator|.
name|add
argument_list|(
literal|"repositories"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"repository"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"layout"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"releases"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"snapshots"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"indexed"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
literal|"refreshCronExpression"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"networkProxies"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"networkProxy"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|networkProxies
operator|.
name|add
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"repositoryScanning"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"fileTypes"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"fileType"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"patterns"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"goodConsumers"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"goodConsumer"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"badConsumers"
argument_list|)
expr_stmt|;
name|repositoryScanning
operator|.
name|add
argument_list|(
literal|"badConsumer"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"proxyConnectors"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"proxyConnector"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"sourceRepoId"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"targetRepoId"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"proxyId"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"snapshotsPolicy"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"releasePolicy"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"checksumPolicy"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"whiteListPatterns"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"whiteListPattern"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"blackListPatterns"
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
literal|"blackListPattern"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isNetworkProxy
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|networkProxies
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isRepositoryScanning
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|repositoryScanning
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isRepositories
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|repositories
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isProxyConnector
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|proxyConnectors
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|empty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|name
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

