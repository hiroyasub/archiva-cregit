begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|NetworkProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|policy
operator|.
name|PostfetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|policy
operator|.
name|PrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|BidirectionalRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|BidirectionalRepositoryLayoutFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|Wagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|WagonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|proxy
operator|.
name|ProxyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|SelectorUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DefaultRepositoryProxyConnectors   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryProxyConnectors
extends|extends
name|AbstractLogEnabled
implements|implements
name|RepositoryProxyConnectors
implements|,
name|RegistryListener
implements|,
name|Initializable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FILENAME_MAVEN_METADATA
init|=
literal|"maven-metadata.xml"
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.wagon.Wagon"      */
specifier|private
name|Map
comment|/*<String,Wagon>*/
name|wagons
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|BidirectionalRepositoryLayoutFactory
name|layoutFactory
decl_stmt|;
comment|/**      * @plexus.requirement role="checksum"      */
specifier|private
name|PrefetchPolicy
name|checksumPolicy
decl_stmt|;
comment|/**      * @plexus.requirement role="artifact-update"      */
specifier|private
name|PostfetchPolicy
name|updatePolicy
decl_stmt|;
specifier|private
name|Map
name|proxyConnectorMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|networkProxyMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|List
name|propertyNameTriggers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|fetchFromProxies
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
operator|!
name|repository
operator|.
name|isManaged
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Can only proxy managed repositories."
argument_list|)
throw|;
block|}
name|File
name|localFile
decl_stmt|;
try|try
block|{
name|BidirectionalRepositoryLayout
name|sourceLayout
init|=
name|layoutFactory
operator|.
name|getLayout
argument_list|(
name|repository
operator|.
name|getLayoutType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sourcePath
init|=
name|sourceLayout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|localFile
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getUrl
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unable to proxy due to bad source repository layout definition: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|isSnapshot
init|=
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|connectors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProxyConnector
name|connector
init|=
operator|(
name|ProxyConnector
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArchivaRepository
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
try|try
block|{
name|BidirectionalRepositoryLayout
name|targetLayout
init|=
name|layoutFactory
operator|.
name|getLayout
argument_list|(
name|targetRepository
operator|.
name|getLayoutType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|targetPath
init|=
name|targetLayout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
argument_list|,
name|targetPath
argument_list|,
name|localFile
argument_list|,
name|isSnapshot
argument_list|)
condition|)
block|{
comment|// Transfer was successful.  return.
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Unable to proxy due to bad layout definition: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|fetchFromProxies
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|,
name|ProjectReference
name|metadata
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
operator|!
name|repository
operator|.
name|isManaged
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Can only proxy managed repositories."
argument_list|)
throw|;
block|}
name|File
name|localFile
decl_stmt|;
try|try
block|{
name|BidirectionalRepositoryLayout
name|sourceLayout
init|=
name|layoutFactory
operator|.
name|getLayout
argument_list|(
name|repository
operator|.
name|getLayoutType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sourcePath
init|=
name|sourceLayout
operator|.
name|toPath
argument_list|(
name|metadata
argument_list|)
operator|+
name|FILENAME_MAVEN_METADATA
decl_stmt|;
name|localFile
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getUrl
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unable to proxy due to bad source repository layout definition: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|connectors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProxyConnector
name|connector
init|=
operator|(
name|ProxyConnector
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArchivaRepository
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
try|try
block|{
name|BidirectionalRepositoryLayout
name|targetLayout
init|=
name|layoutFactory
operator|.
name|getLayout
argument_list|(
name|targetRepository
operator|.
name|getLayoutType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|targetPath
init|=
name|targetLayout
operator|.
name|toPath
argument_list|(
name|metadata
argument_list|)
operator|+
name|FILENAME_MAVEN_METADATA
decl_stmt|;
if|if
condition|(
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
argument_list|,
name|targetPath
argument_list|,
name|localFile
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Transfer was successful.  return.
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Unable to proxy due to bad layout definition: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Perform the transfer of the file.      *       * @param connector      * @param targetRepository      * @param targetPath      * @param localFile      * @param isSnapshot      * @return      * @throws ProxyException       */
specifier|private
name|boolean
name|transferFile
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|,
name|ArchivaRepository
name|targetRepository
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|File
name|localFile
parameter_list|,
name|boolean
name|isSnapshot
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|isSnapshot
condition|)
block|{
comment|// Handle Snapshot Policy
if|if
condition|(
operator|!
name|updatePolicy
operator|.
name|applyPolicy
argument_list|(
name|connector
operator|.
name|getSnapshotsPolicy
argument_list|()
argument_list|,
name|localFile
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Handle Release Policy
if|if
condition|(
operator|!
name|updatePolicy
operator|.
name|applyPolicy
argument_list|(
name|connector
operator|.
name|getReleasesPolicy
argument_list|()
argument_list|,
name|localFile
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Is a whitelist defined?
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|connector
operator|.
name|getWhitelist
argument_list|()
argument_list|)
condition|)
block|{
comment|// Path must belong to whitelist.
if|if
condition|(
operator|!
name|matchesPattern
argument_list|(
name|targetPath
argument_list|,
name|connector
operator|.
name|getWhitelist
argument_list|()
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Path ["
operator|+
name|targetPath
operator|+
literal|"] is not part of defined whitelist (skipping transfer)."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Is target path part of blacklist?
if|if
condition|(
name|matchesPattern
argument_list|(
name|targetPath
argument_list|,
name|connector
operator|.
name|getBlacklist
argument_list|()
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Path ["
operator|+
name|targetPath
operator|+
literal|"] is part of blacklist (skipping transfer)."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Transfer the file.
name|Wagon
name|wagon
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|temp
init|=
operator|new
name|File
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|temp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|protocol
init|=
name|targetRepository
operator|.
name|getUrl
argument_list|()
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|wagon
operator|=
operator|(
name|Wagon
operator|)
name|wagons
operator|.
name|get
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
if|if
condition|(
name|wagon
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unsupported target repository protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
name|boolean
name|connected
init|=
name|connectToRepository
argument_list|(
name|connector
argument_list|,
name|wagon
argument_list|,
name|targetRepository
argument_list|)
decl_stmt|;
if|if
condition|(
name|connected
condition|)
block|{
if|if
condition|(
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Retrieving "
operator|+
name|targetPath
operator|+
literal|" from "
operator|+
name|targetRepository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|wagon
operator|.
name|get
argument_list|(
name|targetPath
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Retrieving "
operator|+
name|targetPath
operator|+
literal|" from "
operator|+
name|targetRepository
operator|.
name|getName
argument_list|()
operator|+
literal|" if updated"
argument_list|)
expr_stmt|;
name|wagon
operator|.
name|getIfNewer
argument_list|(
name|targetPath
argument_list|,
name|temp
argument_list|,
name|localFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// temp won't exist if we called getIfNewer and it was older, but its still a successful return
if|if
condition|(
name|temp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|moveTempToTarget
argument_list|(
name|temp
argument_list|,
name|localFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Attempt to retrieving "
operator|+
name|targetPath
operator|+
literal|" from "
operator|+
name|targetRepository
operator|.
name|getName
argument_list|()
operator|+
literal|" failed: local file does not exist."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Successfully downloaded"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WagonException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Download failure:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Handle checksum Policy.
return|return
name|checksumPolicy
operator|.
name|applyPolicy
argument_list|(
name|connector
operator|.
name|getChecksumPolicy
argument_list|()
argument_list|,
name|localFile
argument_list|)
return|;
block|}
comment|/**      * Used to move the temporary file to its real destination.  This is patterned from the way WagonManager handles      * its downloaded files.      *      * @param temp   The completed download file      * @param target The final location of the downloaded file      * @throws ProxyException when the temp file cannot replace the target file      */
specifier|private
name|void
name|moveTempToTarget
parameter_list|(
name|File
name|temp
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|target
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unable to overwrite existing target file: "
operator|+
name|target
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|temp
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to rename tmp file to its final name... resorting to copy command."
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|temp
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Cannot copy tmp file to its final location"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|temp
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|connectToRepository
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|,
name|Wagon
name|wagon
parameter_list|,
name|ArchivaRepository
name|targetRepository
parameter_list|)
block|{
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
name|ProxyInfo
name|networkProxy
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|networkProxyMap
init|)
block|{
name|networkProxy
operator|=
operator|(
name|ProxyInfo
operator|)
name|this
operator|.
name|networkProxyMap
operator|.
name|get
argument_list|(
name|connector
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Repository
name|wagonRepository
init|=
operator|new
name|Repository
argument_list|(
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkProxy
operator|!=
literal|null
condition|)
block|{
name|wagon
operator|.
name|connect
argument_list|(
name|wagonRepository
argument_list|,
name|networkProxy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wagon
operator|.
name|connect
argument_list|(
name|wagonRepository
argument_list|)
expr_stmt|;
block|}
name|connected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Could not connect to "
operator|+
name|targetRepository
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Could not connect to "
operator|+
name|targetRepository
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|connected
return|;
block|}
specifier|private
name|boolean
name|matchesPattern
parameter_list|(
name|String
name|path
parameter_list|,
name|List
name|patterns
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|patterns
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
name|it
init|=
name|patterns
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SelectorUtils
operator|.
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
name|getProxyConnectors
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
name|List
name|ret
init|=
operator|(
name|List
operator|)
name|this
operator|.
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|boolean
name|hasProxies
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
return|return
name|this
operator|.
name|proxyConnectorMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|propertyNameTriggers
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|initConnectorsAndNetworkProxies
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* do nothing */
block|}
specifier|private
name|void
name|initConnectorsAndNetworkProxies
parameter_list|()
block|{
name|Iterator
name|it
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
name|this
operator|.
name|proxyConnectorMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
name|proxyConfigs
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProxyConnectors
argument_list|()
decl_stmt|;
name|it
operator|=
name|proxyConfigs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryProxyConnectorConfiguration
name|proxyConfig
init|=
operator|(
name|RepositoryProxyConnectorConfiguration
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
comment|// Create connector object.
name|ProxyConnector
name|connector
init|=
operator|new
name|ProxyConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setSourceRepository
argument_list|(
name|getRepository
argument_list|(
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setTargetRepository
argument_list|(
name|getRepository
argument_list|(
name|proxyConfig
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSnapshotsPolicy
argument_list|(
name|proxyConfig
operator|.
name|getSnapshotsPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setReleasesPolicy
argument_list|(
name|proxyConfig
operator|.
name|getReleasesPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setChecksumPolicy
argument_list|(
name|proxyConfig
operator|.
name|getChecksumPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy any blacklist patterns.
name|List
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|proxyConfig
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
condition|)
block|{
name|blacklist
operator|.
name|addAll
argument_list|(
name|proxyConfig
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setBlacklist
argument_list|(
name|blacklist
argument_list|)
expr_stmt|;
comment|// Copy any whitelist patterns.
name|List
name|whitelist
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|proxyConfig
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
condition|)
block|{
name|whitelist
operator|.
name|addAll
argument_list|(
name|proxyConfig
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setWhitelist
argument_list|(
name|whitelist
argument_list|)
expr_stmt|;
comment|// Get other connectors
name|List
name|connectors
init|=
operator|(
name|List
operator|)
name|this
operator|.
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectors
operator|==
literal|null
condition|)
block|{
comment|// Create if we are the first.
name|connectors
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
comment|// Add the connector.
name|connectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
comment|// Set the key to the list of connectors.
name|this
operator|.
name|proxyConnectorMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|connectors
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|networkProxyMap
init|)
block|{
name|this
operator|.
name|networkProxyMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
name|networkProxies
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getNetworkProxies
argument_list|()
decl_stmt|;
name|it
operator|=
name|networkProxies
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NetworkProxyConfiguration
name|networkProxyConfig
init|=
operator|(
name|NetworkProxyConfiguration
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|networkProxyConfig
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ProxyInfo
name|proxy
init|=
operator|new
name|ProxyInfo
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|setType
argument_list|(
name|networkProxyConfig
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setHost
argument_list|(
name|networkProxyConfig
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPort
argument_list|(
name|networkProxyConfig
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setUserName
argument_list|(
name|networkProxyConfig
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPassword
argument_list|(
name|networkProxyConfig
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|networkProxyMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ArchivaRepository
name|getRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|RepositoryConfiguration
name|repoConfig
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArchivaRepository
name|repo
init|=
operator|new
name|ArchivaRepository
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|repo
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"repositories"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"repository"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"layout"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"releases"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"snapshots"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"indexed"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"proxyConnectors"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"proxyConnector"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"sourceRepoId"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"targetRepoId"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"proxyId"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"snapshotsPolicy"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"releasePolicy"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"checksumPolicy"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"whiteListPatterns"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"whiteListPattern"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"blackListPatterns"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"blackListPattern"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"networkProxies"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"networkProxy"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|initConnectorsAndNetworkProxies
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

