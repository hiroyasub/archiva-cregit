begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|policy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * ArtifactUpdatePolicy - tests the local file to see if the transfer should  * occur or not.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role-hint="artifact-update"  */
end_comment

begin_class
specifier|public
class|class
name|ArtifactUpdatePolicy
extends|extends
name|AbstractLogEnabled
implements|implements
name|PrefetchPolicy
block|{
comment|/**      * The DISABLED policy means that the artifact retrieval isn't even attempted,      * let alone updated locally.      */
specifier|public
specifier|static
specifier|final
name|String
name|DISABLED
init|=
literal|"disabled"
decl_stmt|;
comment|/**      *<p>      * The DAILY policy means that the artifact retrieval occurs only if one of      * the following conditions are met...      *</p>      *<ul>      *<li>The local artifact is not present.</li>      *<li>The local artifact has a last modified timestamp older than (now - 1 day).</li>      *</ul>      */
specifier|public
specifier|static
specifier|final
name|String
name|DAILY
init|=
literal|"daily"
decl_stmt|;
comment|/**      *<p>      * The HOURLY policy means that the artifact retrieval occurs only if one of      * the following conditions are met...      *</p>      *<ul>      *<li>The local artifact is not present.</li>      *<li>The local artifact has a last modified timestamp older than (now - 1 hour).</li>      *</ul>      */
specifier|public
specifier|static
specifier|final
name|String
name|HOURLY
init|=
literal|"hourly"
decl_stmt|;
comment|/**      * The ONCE policy means that the artifact retrieval occurs only if the      * local artifact is not present.  This means that the retreival can only      * occur once.      */
specifier|public
specifier|static
specifier|final
name|String
name|ONCE
init|=
literal|"once"
decl_stmt|;
specifier|private
name|Set
name|validPolicyCodes
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|public
name|ArtifactUpdatePolicy
parameter_list|()
block|{
name|validPolicyCodes
operator|.
name|add
argument_list|(
name|DISABLED
argument_list|)
expr_stmt|;
name|validPolicyCodes
operator|.
name|add
argument_list|(
name|DAILY
argument_list|)
expr_stmt|;
name|validPolicyCodes
operator|.
name|add
argument_list|(
name|HOURLY
argument_list|)
expr_stmt|;
name|validPolicyCodes
operator|.
name|add
argument_list|(
name|ONCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|applyPolicy
parameter_list|(
name|String
name|policyCode
parameter_list|,
name|File
name|localFile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validPolicyCodes
operator|.
name|contains
argument_list|(
name|policyCode
argument_list|)
condition|)
block|{
comment|// No valid code? false it is then.
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Unknown policyCode ["
operator|+
name|policyCode
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|DISABLED
operator|.
name|equals
argument_list|(
name|policyCode
argument_list|)
condition|)
block|{
comment|// Disabled means no.
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// No file means it's ok.
return|return
literal|true
return|;
block|}
if|if
condition|(
name|ONCE
operator|.
name|equals
argument_list|(
name|policyCode
argument_list|)
condition|)
block|{
comment|// File exists, but policy is once.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|DAILY
operator|.
name|equals
argument_list|(
name|policyCode
argument_list|)
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Calendar
name|fileCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fileCal
operator|.
name|setTimeInMillis
argument_list|(
name|localFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|after
argument_list|(
name|fileCal
argument_list|)
return|;
block|}
if|if
condition|(
name|HOURLY
operator|.
name|equals
argument_list|(
name|policyCode
argument_list|)
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Calendar
name|fileCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fileCal
operator|.
name|setTimeInMillis
argument_list|(
name|localFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|after
argument_list|(
name|fileCal
argument_list|)
return|;
block|}
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Unhandled policyCode ["
operator|+
name|policyCode
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

