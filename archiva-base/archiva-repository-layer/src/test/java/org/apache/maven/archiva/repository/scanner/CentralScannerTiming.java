begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|DateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|RepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryContentStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModel400Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * CentralScannerTiming   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|CentralScannerTiming
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|pathToCentral
init|=
literal|"/home/repo1/ibiblio"
decl_stmt|;
operator|(
operator|new
name|CentralScannerTiming
argument_list|()
operator|)
operator|.
name|scanIt
argument_list|(
name|pathToCentral
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|scanIt
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|ArchivaRepository
name|centralRepo
init|=
operator|new
name|ArchivaRepository
argument_list|(
literal|"central"
argument_list|,
literal|"Central Mirror"
argument_list|,
literal|"file://"
operator|+
name|path
argument_list|)
decl_stmt|;
name|List
name|consumerList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// Basic - find the artifacts (no real processing)
name|consumerList
operator|.
name|add
argument_list|(
operator|new
name|BasicConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|timeIt
argument_list|(
literal|"Basic Scan"
argument_list|,
name|centralRepo
argument_list|,
name|consumerList
argument_list|)
expr_stmt|;
comment|// POM - find the poms and read them.
name|consumerList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|consumerList
operator|.
name|add
argument_list|(
operator|new
name|POMConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|timeIt
argument_list|(
literal|"POM Read"
argument_list|,
name|centralRepo
argument_list|,
name|consumerList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|timeIt
parameter_list|(
name|String
name|type
parameter_list|,
name|ArchivaRepository
name|repo
parameter_list|,
name|List
name|consumerList
parameter_list|)
block|{
name|RepositoryScanner
name|scanner
init|=
operator|new
name|RepositoryScanner
argument_list|()
decl_stmt|;
try|try
block|{
name|RepositoryContentStatistics
name|stats
init|=
name|scanner
operator|.
name|scan
argument_list|(
name|repo
argument_list|,
name|consumerList
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|".\\ "
operator|+
name|type
operator|+
literal|" \\.__________________________________________"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Repository ID   : "
operator|+
name|stats
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Duration        : "
operator|+
name|DateUtil
operator|.
name|getDuration
argument_list|(
name|stats
operator|.
name|getDuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  When Gathered   : "
operator|+
name|df
operator|.
name|format
argument_list|(
name|stats
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Total File Count: "
operator|+
name|stats
operator|.
name|getTotalFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  New File Count  : "
operator|+
name|stats
operator|.
name|getNewFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"______________________________________________________________"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|POMConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|RepositoryContentConsumer
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|ProjectModelReader
name|reader
decl_stmt|;
specifier|private
name|ArchivaRepository
name|repo
decl_stmt|;
specifier|public
name|POMConsumer
parameter_list|()
block|{
name|reader
operator|=
operator|new
name|ProjectModel400Reader
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
name|getExcludes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
specifier|public
name|List
name|getIncludes
parameter_list|()
block|{
name|List
name|includes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.pom"
argument_list|)
expr_stmt|;
return|return
name|includes
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"pom-consumer"
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Basic POM Consumer"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|repo
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files Processed: "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|repo
operator|.
name|getUrl
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|ArchivaProjectModel
name|model
init|=
name|reader
operator|.
name|read
argument_list|(
name|pomFile
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|ProjectModelException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to process: "
operator|+
name|pomFile
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
comment|/* do nothing */
block|}
block|}
class|class
name|BasicConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|RepositoryContentConsumer
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|public
name|List
name|getExcludes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
specifier|public
name|List
name|getIncludes
parameter_list|()
block|{
name|List
name|includes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.pom"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.jar"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.war"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.ear"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.sar"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.car"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.mar"
argument_list|)
expr_stmt|;
comment|//            includes.add( "**/*.sha1" );
comment|//            includes.add( "**/*.md5" );
comment|//            includes.add( "**/*.asc" );
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.dtd"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.tld"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.gz"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.bz2"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"**/*.zip"
argument_list|)
expr_stmt|;
return|return
name|includes
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"test-scan-timing"
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Basic No-op Consumer"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|)
throws|throws
name|ConsumerException
block|{
comment|/* do nothing */
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files Processed: "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
comment|/* do nothing */
block|}
block|}
block|}
end_class

end_unit

