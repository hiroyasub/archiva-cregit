begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|InvalidRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|RepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * RepositoryContentConsumerUtilTest  *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryContentConsumerUtilTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|RepositoryContentConsumers
name|lookupRepositoryConsumerUtil
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerUtil
init|=
operator|(
name|RepositoryContentConsumers
operator|)
name|lookup
argument_list|(
name|RepositoryContentConsumers
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"RepositoryContentConsumerUtil should not be null."
argument_list|,
name|consumerUtil
argument_list|)
expr_stmt|;
return|return
name|consumerUtil
return|;
block|}
specifier|public
name|void
name|testGetSelectedIds
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumerUtil
argument_list|()
decl_stmt|;
name|List
name|knownConsumers
init|=
name|consumerutil
operator|.
name|getSelectedKnownConsumerIds
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known Consumer IDs should not be null"
argument_list|,
name|knownConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known Consumer IDs.size"
argument_list|,
literal|9
argument_list|,
name|knownConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|invalidConsumers
init|=
name|consumerutil
operator|.
name|getSelectedInvalidConsumerIds
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Invalid Consumer IDs should not be null"
argument_list|,
name|invalidConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Consumer IDs.size"
argument_list|,
literal|1
argument_list|,
name|invalidConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetSelectedConsumersMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumerUtil
argument_list|()
decl_stmt|;
name|Map
name|knownConsumerMap
init|=
name|consumerutil
operator|.
name|getSelectedKnownConsumersMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known Consumer Map should not be null"
argument_list|,
name|knownConsumerMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known Consumer Map.size"
argument_list|,
literal|1
argument_list|,
name|knownConsumerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|knownConsumerMap
operator|.
name|get
argument_list|(
literal|"sample-known"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known[sample-known] should not be null."
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|assertInstanceof
argument_list|(
literal|"Known[sample-known]"
argument_list|,
name|RepositoryContentConsumer
operator|.
name|class
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|assertInstanceof
argument_list|(
literal|"Known[sample-known]"
argument_list|,
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|Map
name|invalidConsumerMap
init|=
name|consumerutil
operator|.
name|getSelectedInvalidConsumersMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Invalid Consumer Map should not be null"
argument_list|,
name|invalidConsumerMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Consumer Map.size"
argument_list|,
literal|0
argument_list|,
name|invalidConsumerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertInstanceof
parameter_list|(
name|String
name|msg
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
name|msg
operator|+
literal|": Object ["
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] should have been an instanceof ["
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetAvailableLists
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumerUtil
argument_list|()
decl_stmt|;
name|List
name|knownConsumers
init|=
name|consumerutil
operator|.
name|getAvailableKnownConsumers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known consumers should not be null."
argument_list|,
name|knownConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"known consumers"
argument_list|,
literal|1
argument_list|,
name|knownConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInstanceof
argument_list|(
literal|"Available Known Consumers"
argument_list|,
name|RepositoryContentConsumer
operator|.
name|class
argument_list|,
name|knownConsumers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|invalidConsumers
init|=
name|consumerutil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"invalid consumers should not be null."
argument_list|,
name|invalidConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"invalid consumers"
argument_list|,
literal|0
argument_list|,
name|invalidConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|MockControl
name|knownControl
init|=
name|MockControl
operator|.
name|createNiceControl
argument_list|(
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|RepositoryContentConsumers
name|consumers
init|=
name|lookupRepositoryConsumerUtil
argument_list|()
decl_stmt|;
name|KnownRepositoryContentConsumer
name|knownConsumer
init|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|knownControl
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|setAvailableKnownConsumers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|knownConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|MockControl
name|invalidControl
init|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|InvalidRepositoryContentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|InvalidRepositoryContentConsumer
name|invalidConsumer
init|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|invalidControl
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|setAvailableInvalidConsumers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|invalidConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|ArchivaRepository
name|repo
init|=
operator|new
name|ArchivaRepository
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
name|getTestFile
argument_list|(
literal|"target/test-repo"
argument_list|)
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-repo/path/to/test-file.txt"
argument_list|)
decl_stmt|;
name|knownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|knownConsumer
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|knownConsumer
operator|.
name|getIncludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|knownConsumer
operator|.
name|processFile
argument_list|(
literal|"path/to/test-file.txt"
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|File
name|notIncludedTestFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-repo/path/to/test-file.xml"
argument_list|)
decl_stmt|;
name|knownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|knownConsumer
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|knownConsumer
operator|.
name|getIncludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|invalidConsumer
operator|.
name|processFile
argument_list|(
literal|"path/to/test-file.xml"
argument_list|)
expr_stmt|;
name|invalidConsumer
operator|.
name|getId
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|setReturnValue
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|notIncludedTestFile
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|File
name|excludedTestFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-repo/path/to/test-file.txt"
argument_list|)
decl_stmt|;
name|knownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|knownConsumer
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/test-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|invalidConsumer
operator|.
name|processFile
argument_list|(
literal|"path/to/test-file.txt"
argument_list|)
expr_stmt|;
name|invalidConsumer
operator|.
name|getId
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|setReturnValue
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|excludedTestFile
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

