begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|BidirectionalRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_comment
comment|/**  * DefaultBidirectionalRepositoryLayoutTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DefaultBidirectionalRepositoryLayoutTest
extends|extends
name|AbstractBidirectionalRepositoryLayoutTestCase
block|{
specifier|private
name|BidirectionalRepositoryLayout
name|layout
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|layout
operator|=
operator|(
name|BidirectionalRepositoryLayout
operator|)
name|lookup
argument_list|(
name|BidirectionalRepositoryLayout
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToPathBasic
parameter_list|()
block|{
name|ArchivaArtifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"com.foo"
argument_list|,
literal|"foo-tool"
argument_list|,
literal|"1.0"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com/foo/foo-tool/1.0/foo-tool-1.0.jar"
argument_list|,
name|layout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToPathEjbClient
parameter_list|()
block|{
name|ArchivaArtifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"com.foo"
argument_list|,
literal|"foo-client"
argument_list|,
literal|"1.0"
argument_list|,
literal|""
argument_list|,
literal|"ejb-client"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com/foo/foo-client/1.0/foo-client-1.0.jar"
argument_list|,
name|layout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToPathWithClassifier
parameter_list|()
block|{
name|ArchivaArtifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"com.foo.lib"
argument_list|,
literal|"foo-lib"
argument_list|,
literal|"2.1-alpha-1"
argument_list|,
literal|"sources"
argument_list|,
literal|"java-source"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com/foo/lib/foo-lib/2.1-alpha-1/foo-lib-2.1-alpha-1-sources.jar"
argument_list|,
name|layout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToPathUsingUniqueSnapshot
parameter_list|()
block|{
name|ArchivaArtifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"com.foo"
argument_list|,
literal|"foo-connector"
argument_list|,
literal|"2.1-20060822.123456-35"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com/foo/foo-connector/2.1-SNAPSHOT/foo-connector-2.1-20060822.123456-35.jar"
argument_list|,
name|layout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimestampedSnapshotRoundtrip
parameter_list|()
throws|throws
name|LayoutException
block|{
name|String
name|originalPath
init|=
literal|"org/apache/maven/test/get-metadata-snapshot/1.0-SNAPSHOT/get-metadata-snapshot-1.0-20050831.101112-1.jar"
decl_stmt|;
name|ArchivaArtifact
name|artifact
init|=
name|layout
operator|.
name|toArtifact
argument_list|(
name|originalPath
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
name|artifact
argument_list|,
literal|"org.apache.maven.test"
argument_list|,
literal|"get-metadata-snapshot"
argument_list|,
literal|"1.0-20050831.101112-1"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalPath
argument_list|,
name|layout
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|ArtifactReference
name|aref
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|aref
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|aref
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|aref
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|aref
operator|.
name|setClassifier
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|aref
operator|.
name|setType
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalPath
argument_list|,
name|layout
operator|.
name|toPath
argument_list|(
name|aref
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToArtifactBasicSimpleGroupId
parameter_list|()
throws|throws
name|LayoutException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"commons-lang/commons-lang/2.1/commons-lang-2.1.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
name|artifact
argument_list|,
literal|"commons-lang"
argument_list|,
literal|"commons-lang"
argument_list|,
literal|"2.1"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToArtifactBasicLongGroupId
parameter_list|()
throws|throws
name|LayoutException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"com/foo/foo-tool/1.0/foo-tool-1.0.jar"
argument_list|)
decl_stmt|;
name|assertArtifact
argument_list|(
name|artifact
argument_list|,
literal|"com.foo"
argument_list|,
literal|"foo-tool"
argument_list|,
literal|"1.0"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToArtifactEjbClient
parameter_list|()
throws|throws
name|LayoutException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"com/foo/foo-client/1.0/foo-client-1.0.jar"
argument_list|)
decl_stmt|;
comment|// The type is correct. as we cannot possibly know this is an ejb client without parsing the pom
name|assertArtifact
argument_list|(
name|artifact
argument_list|,
literal|"com.foo"
argument_list|,
literal|"foo-client"
argument_list|,
literal|"1.0"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToArtifactWithClassifier
parameter_list|()
throws|throws
name|LayoutException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"com/foo/lib/foo-lib/2.1-alpha-1/foo-lib-2.1-alpha-1-sources.jar"
argument_list|)
decl_stmt|;
comment|// The 'java-source' type is correct.  You might be thinking of extension, which we are not testing here.
name|assertArtifact
argument_list|(
name|artifact
argument_list|,
literal|"com.foo.lib"
argument_list|,
literal|"foo-lib"
argument_list|,
literal|"2.1-alpha-1"
argument_list|,
literal|"sources"
argument_list|,
literal|"java-source"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToArtifactUsingUniqueSnapshot
parameter_list|()
throws|throws
name|LayoutException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"com/foo/foo-connector/2.1-SNAPSHOT/foo-connector-2.1-20060822.123456-35.jar"
argument_list|)
decl_stmt|;
name|assertSnapshotArtifact
argument_list|(
name|artifact
argument_list|,
literal|"com.foo"
argument_list|,
literal|"foo-connector"
argument_list|,
literal|"2.1-20060822.123456-35"
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidMissingType
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"invalid/invalid/1/invalid-1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected missing type."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
specifier|public
name|void
name|testInvalidNonSnapshotInSnapshotDir
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"invalid/invalid/1.0-SNAPSHOT/invalid-1.0.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected non snapshot artifact inside of a snapshot dir."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
specifier|public
name|void
name|testInvalidPathTooShort
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"invalid/invalid-1.0.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected that path is too short."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
specifier|public
name|void
name|testInvalidTimestampSnapshotNotInSnapshotDir
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"invalid/invalid/1.0-20050611.123456-1/invalid-1.0-20050611.123456-1.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shoult have detected Timestamped Snapshot artifact not inside of an Snapshot dir is invalid."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
specifier|public
name|void
name|testInvalidVersionPathMismatch
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"invalid/invalid/1.0/invalid-2.0.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected version mismatch between path and artifact."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
specifier|public
name|void
name|testInvalidVersionPathMismatchAlt
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"invalid/invalid/1.0/invalid-1.0b.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have version mismatch between directory and artifact."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
specifier|public
name|void
name|testInvalidArtifactIdForPath
parameter_list|()
block|{
try|try
block|{
name|layout
operator|.
name|toArtifact
argument_list|(
literal|"org/apache/maven/test/1.0-SNAPSHOT/wrong-artifactId-1.0-20050611.112233-1.jar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have detected wrong artifact Id."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* expected path */
block|}
block|}
block|}
end_class

end_unit

