begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|filters
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|filters
operator|.
name|EffectiveProjectModelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|readers
operator|.
name|ProjectModel400Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|resolvers
operator|.
name|RepositoryProjectResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * EffectiveProjectModelFilterTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|EffectiveProjectModelFilterTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_REPOSITORY
init|=
literal|"src/test/repositories/default-repository"
decl_stmt|;
specifier|private
name|EffectiveProjectModelFilter
name|lookupEffective
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|EffectiveProjectModelFilter
operator|)
name|lookup
argument_list|(
name|ProjectModelFilter
operator|.
name|class
argument_list|,
literal|"effective"
argument_list|)
return|;
block|}
specifier|private
name|ArchivaProjectModel
name|createArchivaProjectModel
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|ProjectModelException
block|{
name|ProjectModelReader
name|reader
init|=
operator|new
name|ProjectModel400Reader
argument_list|()
decl_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|read
argument_list|(
name|pomFile
argument_list|)
return|;
block|}
specifier|private
name|ProjectModelResolver
name|createDefaultRepositoryResolver
parameter_list|()
block|{
name|File
name|defaultRepoDir
init|=
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
name|DEFAULT_REPOSITORY
argument_list|)
decl_stmt|;
name|ArchivaRepository
name|repo
init|=
operator|new
name|ArchivaRepository
argument_list|(
literal|"defaultTestRepo"
argument_list|,
literal|"Default Test Repo"
argument_list|,
literal|"file://"
operator|+
name|defaultRepoDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryProjectResolver
name|resolver
init|=
operator|new
name|RepositoryProjectResolver
argument_list|(
name|repo
argument_list|)
decl_stmt|;
return|return
name|resolver
return|;
block|}
specifier|public
name|void
name|testBuildEffectiveProject
parameter_list|()
throws|throws
name|Exception
block|{
name|EffectiveProjectModelFilter
name|filter
init|=
name|lookupEffective
argument_list|()
decl_stmt|;
name|filter
operator|.
name|addProjectModelResolver
argument_list|(
name|createDefaultRepositoryResolver
argument_list|()
argument_list|)
expr_stmt|;
name|ArchivaProjectModel
name|startModel
init|=
name|createArchivaProjectModel
argument_list|(
name|DEFAULT_REPOSITORY
operator|+
literal|"/org/apache/maven/archiva/archiva-model/1.0-SNAPSHOT/archiva-model-1.0-SNAPSHOT.pom"
argument_list|)
decl_stmt|;
name|ArchivaProjectModel
name|effectiveModel
init|=
name|filter
operator|.
name|filter
argument_list|(
name|startModel
argument_list|)
decl_stmt|;
name|ArchivaProjectModel
name|expectedModel
init|=
name|createArchivaProjectModel
argument_list|(
literal|"src/test/effective-poms/"
operator|+
literal|"/archiva-model-effective.pom"
argument_list|)
decl_stmt|;
name|assertModel
argument_list|(
name|expectedModel
argument_list|,
name|effectiveModel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertModel
parameter_list|(
name|ArchivaProjectModel
name|expectedModel
parameter_list|,
name|ArchivaProjectModel
name|effectiveModel
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Equivalent Models"
argument_list|,
name|expectedModel
argument_list|,
name|effectiveModel
argument_list|)
expr_stmt|;
name|assertContainsSame
argument_list|(
literal|"Individuals"
argument_list|,
name|expectedModel
operator|.
name|getIndividuals
argument_list|()
argument_list|,
name|effectiveModel
operator|.
name|getIndividuals
argument_list|()
argument_list|)
expr_stmt|;
name|dumpDependencyList
argument_list|(
literal|"Expected"
argument_list|,
name|expectedModel
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|dumpDependencyList
argument_list|(
literal|"Effective"
argument_list|,
name|effectiveModel
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertContainsSame
argument_list|(
literal|"Dependencies"
argument_list|,
name|expectedModel
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|effectiveModel
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertContainsSame
argument_list|(
literal|"DependencyManagement"
argument_list|,
name|expectedModel
operator|.
name|getDependencyManagement
argument_list|()
argument_list|,
name|effectiveModel
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dumpDependencyList
parameter_list|(
name|String
name|type
parameter_list|,
name|List
name|deps
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|".\\ ["
operator|+
name|type
operator|+
literal|"] Dependency List (size:"
operator|+
name|deps
operator|.
name|size
argument_list|()
operator|+
literal|") \\.________________"
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|deps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|toDependencyKey
argument_list|(
name|dep
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toDependencyKey
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|dep
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|dep
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|dep
operator|.
name|getVersion
argument_list|()
operator|+
literal|":"
operator|+
name|dep
operator|.
name|getClassifier
argument_list|()
operator|+
literal|":"
operator|+
name|dep
operator|.
name|getType
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|private
name|void
name|assertContainsSame
parameter_list|(
name|String
name|listId
parameter_list|,
name|List
name|expectedList
parameter_list|,
name|List
name|effectiveList
parameter_list|)
block|{
if|if
condition|(
operator|(
name|expectedList
operator|==
literal|null
operator|)
operator|&&
operator|(
name|effectiveList
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|(
name|expectedList
operator|==
literal|null
operator|)
operator|&&
operator|(
name|effectiveList
operator|!=
literal|null
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Effective ["
operator|+
name|listId
operator|+
literal|"] List is instantiated, while expected List is null."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|expectedList
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|effectiveList
operator|==
literal|null
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Effective ["
operator|+
name|listId
operator|+
literal|"] List is null, while expected List is instantiated."
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"["
operator|+
name|listId
operator|+
literal|"] List Size"
argument_list|,
name|expectedList
operator|.
name|size
argument_list|()
argument_list|,
name|expectedList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|expectedList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should exist in Effective ["
operator|+
name|listId
operator|+
literal|"] list: "
operator|+
name|o
argument_list|,
name|effectiveList
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

