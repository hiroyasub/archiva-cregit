begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_comment
comment|/**  * RepositoryLayoutUtils - utility methods common for most BidirectionalRepositoryLayout implementation.   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  *   * @deprecated use {@link RepositoryContentFactory} and {@link ManagedRepositoryContent}   *             or {@link RemoteRepositoryContent} instead.  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryLayoutUtils
block|{
comment|/**      * Complex 2+ part extensions.      * Do not include initial "." character in extension names here.      */
specifier|private
specifier|static
specifier|final
name|String
name|ComplexExtensions
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"tar.gz"
block|,
literal|"tar.bz2"
block|}
decl_stmt|;
comment|/**      * Filename Parsing Mode - Artifact Id.      */
specifier|private
specifier|static
specifier|final
name|int
name|ARTIFACTID
init|=
literal|1
decl_stmt|;
comment|/**      * Filename Parsing Mode - Version.      */
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|2
decl_stmt|;
comment|/**      * Filename Parsing Mode - Classifier.      */
specifier|private
specifier|static
specifier|final
name|int
name|CLASSIFIER
init|=
literal|3
decl_stmt|;
comment|/**      * Split the provided filename into 4 String parts. Simply delegate to       * splitFilename( filename, possibleArtifactId, possibleVersion ) with no possibleVersion      * proposal.      *      * @param filename the filename to split.      * @param possibleArtifactId the optional artifactId to aide in splitting the filename.      *                  (null to allow algorithm to calculate one)      * @return the parts of the filename.      * @throws LayoutException      * @deprecated to not use directly. Use {@link ManagedRepositoryContent} or {@link RemoteRepositoryContent} instead.      */
specifier|public
specifier|static
name|FilenameParts
name|splitFilename
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|possibleArtifactId
parameter_list|)
throws|throws
name|LayoutException
block|{
return|return
name|splitFilename
argument_list|(
name|filename
argument_list|,
name|possibleArtifactId
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Split the provided filename into 4 String parts.      *      *<pre>      * String part[] = splitFilename( filename );      * artifactId = part[0];      * version = part[1];      * classifier = part[2];      * extension = part[3];      *</pre>      *      * @param filename the filename to split.      * @param possibleArtifactId the optional artifactId to aide in splitting the filename.      *                  (null to allow algorithm to calculate one)      * @param possibleVersion the optional version to aide in splitting the filename.      *                  (null to allow algorithm to calculate one)      * @return the parts of the filename.      * @throws LayoutException      * @deprecated to not use directly. Use {@link ManagedRepositoryContent} or {@link RemoteRepositoryContent} instead.      */
specifier|public
specifier|static
name|FilenameParts
name|splitFilename
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|possibleArtifactId
parameter_list|,
name|String
name|possibleVersion
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|filename
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to split blank filename."
argument_list|)
throw|;
block|}
name|String
name|filestring
init|=
name|filename
operator|.
name|trim
argument_list|()
decl_stmt|;
name|FilenameParts
name|parts
init|=
operator|new
name|FilenameParts
argument_list|()
decl_stmt|;
comment|// I like working backwards.
comment|// Find the extension.
comment|// Work on multipart extensions first.
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|lowercaseFilename
init|=
name|filestring
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ComplexExtensions
operator|.
name|length
operator|&&
operator|!
name|found
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lowercaseFilename
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|ComplexExtensions
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|parts
operator|.
name|extension
operator|=
name|ComplexExtensions
index|[
name|i
index|]
expr_stmt|;
name|filestring
operator|=
name|filestring
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filestring
operator|.
name|length
argument_list|()
operator|-
name|ComplexExtensions
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
comment|// Default to 1 part extension.
name|int
name|index
init|=
name|filestring
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<=
literal|0
condition|)
block|{
comment|// Bad Filename - No Extension
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Unable to determine extension from filename "
operator|+
name|filename
argument_list|)
throw|;
block|}
name|parts
operator|.
name|extension
operator|=
name|filestring
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|filestring
operator|=
name|filestring
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
comment|// Work on version string.
name|int
name|mode
init|=
name|ARTIFACTID
decl_stmt|;
if|if
condition|(
name|startsWith
argument_list|(
name|filename
argument_list|,
name|possibleArtifactId
argument_list|)
condition|)
block|{
name|parts
operator|.
name|artifactId
operator|=
name|possibleArtifactId
expr_stmt|;
name|filestring
operator|=
name|filestring
operator|.
name|substring
argument_list|(
name|possibleArtifactId
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mode
operator|=
name|VERSION
expr_stmt|;
block|}
if|if
condition|(
name|startsWith
argument_list|(
name|filestring
argument_list|,
name|possibleVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|filestring
operator|.
name|length
argument_list|()
operator|>
name|possibleVersion
operator|.
name|length
argument_list|()
condition|)
block|{
name|filestring
operator|=
name|filestring
operator|.
name|substring
argument_list|(
name|possibleVersion
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filestring
operator|=
literal|""
expr_stmt|;
block|}
name|parts
operator|.
name|version
operator|=
name|possibleVersion
expr_stmt|;
name|mode
operator|=
name|CLASSIFIER
expr_stmt|;
block|}
name|String
name|fileParts
index|[]
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|filestring
argument_list|,
literal|'-'
argument_list|)
decl_stmt|;
name|int
name|versionStart
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|versionEnd
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|fileParts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSimpleVersionKeyword
argument_list|(
name|part
argument_list|)
condition|)
block|{
comment|// It is a potential version part.
if|if
condition|(
name|versionStart
operator|<
literal|0
condition|)
block|{
name|versionStart
operator|=
name|i
expr_stmt|;
block|}
name|versionEnd
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versionStart
operator|<
literal|0
operator|&&
name|parts
operator|.
name|version
operator|==
literal|null
condition|)
block|{
comment|// Assume rest of string is the version Id.
if|if
condition|(
name|fileParts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|versionStart
operator|=
literal|0
expr_stmt|;
name|versionEnd
operator|=
name|fileParts
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Unable to determine version from filename "
operator|+
name|filename
argument_list|)
throw|;
block|}
block|}
comment|// Gather up the ArtifactID - Version - Classifier pieces found.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|fileParts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|mode
operator|==
name|ARTIFACTID
operator|)
operator|&&
operator|(
name|i
operator|>=
name|versionStart
operator|)
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|parts
operator|.
name|artifactId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"No Artifact Id detected."
argument_list|)
throw|;
block|}
name|mode
operator|=
name|VERSION
expr_stmt|;
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|ARTIFACTID
case|:
name|parts
operator|.
name|appendArtifactId
argument_list|(
name|part
argument_list|)
expr_stmt|;
break|break;
case|case
name|VERSION
case|:
name|parts
operator|.
name|appendVersion
argument_list|(
name|part
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLASSIFIER
case|:
name|parts
operator|.
name|appendClassifier
argument_list|(
name|part
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|i
operator|>=
name|versionEnd
condition|)
block|{
name|mode
operator|=
name|CLASSIFIER
expr_stmt|;
block|}
block|}
return|return
name|parts
return|;
block|}
comment|/**      * Check if the string starts with the proposed token, with no more char      * expeect the '-' separator.      * @param string string to test      * @param possible proposed startOf      * @return true if the possible matches      */
specifier|private
specifier|static
name|boolean
name|startsWith
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|possible
parameter_list|)
block|{
if|if
condition|(
name|possible
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|length
init|=
name|possible
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|string
operator|.
name|startsWith
argument_list|(
name|possible
argument_list|)
operator|&&
operator|(
name|string
operator|.
name|length
argument_list|()
operator|==
name|length
operator|||
name|string
operator|.
name|charAt
argument_list|(
name|length
argument_list|)
operator|==
literal|'-'
operator|)
return|;
block|}
block|}
end_class

end_unit

