begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_comment
comment|/**  * ArchivaConfigurationAdaptor  *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  * @todo the whole need for 2 objects is a consequence of using jpox. hopefully JPA will address some of this mess.  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaConfigurationAdaptor
block|{
specifier|private
name|ArchivaConfigurationAdaptor
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|ArchivaRepository
name|toArchivaRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to convert null repository config to archiva repository."
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to repository config with blank ID to archiva repository."
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|config
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to convert repository config with blank location to archiva repository."
argument_list|)
throw|;
block|}
name|ArchivaRepository
name|repository
init|=
operator|new
name|ArchivaRepository
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|PathUtil
operator|.
name|toUrl
argument_list|(
name|config
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|repository
operator|.
name|getModel
argument_list|()
operator|.
name|setLayoutName
argument_list|(
name|config
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|getModel
argument_list|()
operator|.
name|setReleasePolicy
argument_list|(
name|config
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|getModel
argument_list|()
operator|.
name|setSnapshotPolicy
argument_list|(
name|config
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
block|}
end_class

end_unit

