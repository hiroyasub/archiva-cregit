begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|DependencyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ProjectModel400Reader   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ProjectModel400Reader
implements|implements
name|ProjectModelReader
block|{
specifier|public
name|ArchivaProjectModel
name|read
parameter_list|(
name|File
name|pomFile
parameter_list|)
throws|throws
name|ProjectModelException
block|{
try|try
block|{
name|XMLReader
name|xml
init|=
operator|new
name|XMLReader
argument_list|(
literal|"project"
argument_list|,
name|pomFile
argument_list|)
decl_stmt|;
name|ArchivaProjectModel
name|model
init|=
operator|new
name|ArchivaProjectModel
argument_list|()
decl_stmt|;
name|RepositoryContent
name|contentKey
init|=
operator|new
name|RepositoryContent
argument_list|()
decl_stmt|;
name|contentKey
operator|.
name|setGroupId
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|contentKey
operator|.
name|setArtifactId
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|contentKey
operator|.
name|setVersion
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/version"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setContentKey
argument_list|(
name|contentKey
argument_list|)
expr_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/name"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDescription
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/description"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUrl
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/url"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPackaging
argument_list|(
name|StringUtils
operator|.
name|defaultIfEmpty
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//project/packaging"
argument_list|)
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setParentContentKey
argument_list|(
name|getParentContentKey
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setCiManagement
argument_list|(
name|getCiManagement
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setIndividuals
argument_list|(
name|getIndividuals
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setIssueManagement
argument_list|(
name|getIssueManagement
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setLicenses
argument_list|(
name|getLicenses
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setOrganization
argument_list|(
name|getOrganization
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setScm
argument_list|(
name|getSCM
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setRepositories
argument_list|(
name|getRepositories
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDependencies
argument_list|(
name|getDependencies
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPlugins
argument_list|(
name|getPlugins
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setReports
argument_list|(
name|getReports
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|CiManagement
name|getCiManagement
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|Element
name|elemCiMgmt
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//project/ciManagement"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemCiMgmt
operator|!=
literal|null
condition|)
block|{
name|CiManagement
name|ciManagement
init|=
operator|new
name|CiManagement
argument_list|()
decl_stmt|;
name|ciManagement
operator|.
name|setSystem
argument_list|(
name|elemCiMgmt
operator|.
name|elementTextTrim
argument_list|(
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
name|ciManagement
operator|.
name|setUrl
argument_list|(
name|elemCiMgmt
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ciManagement
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
name|getDependencies
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|xml
operator|.
name|getElementList
argument_list|(
literal|"//project/dependencies/dependency"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemDependency
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dependency
operator|.
name|setContentKey
argument_list|(
name|getContentKey
argument_list|(
name|elemDependency
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setClassifier
argument_list|(
name|elemDependency
operator|.
name|elementTextTrim
argument_list|(
literal|"classifier"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|StringUtils
operator|.
name|defaultIfEmpty
argument_list|(
name|elemDependency
operator|.
name|elementTextTrim
argument_list|(
literal|"type"
argument_list|)
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|StringUtils
operator|.
name|defaultIfEmpty
argument_list|(
name|elemDependency
operator|.
name|elementTextTrim
argument_list|(
literal|"scope"
argument_list|)
argument_list|,
literal|"compile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not for v4.0.0 -> dependency.setUrl( elemDependency.elementTextTrim( "url" ) );
name|dependency
operator|.
name|setOptional
argument_list|(
name|toBoolean
argument_list|(
name|elemDependency
operator|.
name|elementTextTrim
argument_list|(
literal|"optional"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|DependencyScope
operator|.
name|isSystemScoped
argument_list|(
name|dependency
argument_list|)
condition|)
block|{
name|dependency
operator|.
name|setSystemPath
argument_list|(
name|elemDependency
operator|.
name|elementTextTrim
argument_list|(
literal|"systemPath"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dependency
operator|.
name|setExclusions
argument_list|(
name|getExclusions
argument_list|(
name|elemDependency
argument_list|)
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
return|return
name|dependencies
return|;
block|}
specifier|private
name|List
name|getExclusions
parameter_list|(
name|Element
name|elemDependency
parameter_list|)
block|{
name|List
name|exclusions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Element
name|elemExclusions
init|=
name|elemDependency
operator|.
name|element
argument_list|(
literal|"exclusions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemExclusions
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|elemExclusions
operator|.
name|elementIterator
argument_list|(
literal|"exclusion"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemExclusion
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exclusion
name|exclusion
init|=
operator|new
name|Exclusion
argument_list|()
decl_stmt|;
name|exclusion
operator|.
name|setGroupId
argument_list|(
name|elemExclusion
operator|.
name|elementTextTrim
argument_list|(
literal|"groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|exclusion
operator|.
name|setArtifactId
argument_list|(
name|elemExclusion
operator|.
name|elementTextTrim
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|exclusion
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exclusions
return|;
block|}
specifier|private
name|List
name|getIndividuals
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|individuals
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|individuals
operator|.
name|addAll
argument_list|(
name|getIndividuals
argument_list|(
name|xml
argument_list|,
literal|true
argument_list|,
literal|"//project/developers/developer"
argument_list|)
argument_list|)
expr_stmt|;
name|individuals
operator|.
name|addAll
argument_list|(
name|getIndividuals
argument_list|(
name|xml
argument_list|,
literal|false
argument_list|,
literal|"//project/contributors/contributor"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|individuals
return|;
block|}
specifier|private
name|List
name|getIndividuals
parameter_list|(
name|XMLReader
name|xml
parameter_list|,
name|boolean
name|isCommitor
parameter_list|,
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|modelPersonList
init|=
name|xml
operator|.
name|getElementList
argument_list|(
name|xpathExpr
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|modelPersonList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemPerson
init|=
operator|(
name|Element
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Individual
name|individual
init|=
operator|new
name|Individual
argument_list|()
decl_stmt|;
name|individual
operator|.
name|setCommitor
argument_list|(
name|isCommitor
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setEmail
argument_list|(
name|elemPerson
operator|.
name|elementTextTrim
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setName
argument_list|(
name|elemPerson
operator|.
name|elementTextTrim
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setOrganization
argument_list|(
name|elemPerson
operator|.
name|elementTextTrim
argument_list|(
literal|"organization"
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setOrganizationUrl
argument_list|(
name|elemPerson
operator|.
name|elementTextTrim
argument_list|(
literal|"organizationUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setUrl
argument_list|(
name|elemPerson
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setTimezone
argument_list|(
name|elemPerson
operator|.
name|elementTextTrim
argument_list|(
literal|"timezone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Roles
name|Element
name|elemRoles
init|=
name|elemPerson
operator|.
name|element
argument_list|(
literal|"roles"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemRoles
operator|!=
literal|null
condition|)
block|{
name|List
name|roleNames
init|=
name|elemRoles
operator|.
name|elements
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|Iterator
name|itRole
init|=
name|roleNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itRole
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|role
init|=
operator|(
name|Element
operator|)
name|itRole
operator|.
name|next
argument_list|()
decl_stmt|;
name|individual
operator|.
name|addRole
argument_list|(
name|role
operator|.
name|getTextTrim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Properties
name|Element
name|elemProperties
init|=
name|elemPerson
operator|.
name|element
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemProperties
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|itProps
init|=
name|elemProperties
operator|.
name|elements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itProps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemProp
init|=
operator|(
name|Element
operator|)
name|itProps
operator|.
name|next
argument_list|()
decl_stmt|;
name|individual
operator|.
name|addProperty
argument_list|(
name|elemProp
operator|.
name|getName
argument_list|()
argument_list|,
name|elemProp
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
name|individual
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|IssueManagement
name|getIssueManagement
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|Element
name|elemIssueMgmt
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//project/issueManagement"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemIssueMgmt
operator|!=
literal|null
condition|)
block|{
name|IssueManagement
name|issueMgmt
init|=
operator|new
name|IssueManagement
argument_list|()
decl_stmt|;
name|issueMgmt
operator|.
name|setSystem
argument_list|(
name|elemIssueMgmt
operator|.
name|elementTextTrim
argument_list|(
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
name|issueMgmt
operator|.
name|setUrl
argument_list|(
name|elemIssueMgmt
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|issueMgmt
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
name|getLicenses
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|licenses
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Element
name|elemLicenses
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//project/licenses"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemLicenses
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|itLicense
init|=
name|elemLicenses
operator|.
name|elements
argument_list|(
literal|"license"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itLicense
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemLicense
init|=
operator|(
name|Element
operator|)
name|itLicense
operator|.
name|next
argument_list|()
decl_stmt|;
name|License
name|license
init|=
operator|new
name|License
argument_list|()
decl_stmt|;
comment|// TODO: Create LicenseIdentity class to managed license ids.
comment|// license.setId( elemLicense.elementTextTrim( "id" ) );
name|license
operator|.
name|setName
argument_list|(
name|elemLicense
operator|.
name|elementTextTrim
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|license
operator|.
name|setUrl
argument_list|(
name|elemLicense
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|license
operator|.
name|setComments
argument_list|(
name|elemLicense
operator|.
name|elementTextTrim
argument_list|(
literal|"comments"
argument_list|)
argument_list|)
expr_stmt|;
name|licenses
operator|.
name|add
argument_list|(
name|license
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|licenses
return|;
block|}
specifier|private
name|Organization
name|getOrganization
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|Element
name|elemOrg
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//project/organization"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemOrg
operator|!=
literal|null
condition|)
block|{
name|Organization
name|org
init|=
operator|new
name|Organization
argument_list|()
decl_stmt|;
name|org
operator|.
name|setName
argument_list|(
name|elemOrg
operator|.
name|elementTextTrim
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|setUrl
argument_list|(
name|elemOrg
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|org
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|RepositoryContent
name|getParentContentKey
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|Element
name|elemParent
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//project/parent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemParent
operator|!=
literal|null
condition|)
block|{
return|return
name|getContentKey
argument_list|(
name|elemParent
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|RepositoryContent
name|getContentKey
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
name|RepositoryContent
name|contentKey
init|=
operator|new
name|RepositoryContent
argument_list|()
decl_stmt|;
name|contentKey
operator|.
name|setGroupId
argument_list|(
name|elem
operator|.
name|elementTextTrim
argument_list|(
literal|"groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|contentKey
operator|.
name|setArtifactId
argument_list|(
name|elem
operator|.
name|elementTextTrim
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|contentKey
operator|.
name|setVersion
argument_list|(
name|elem
operator|.
name|elementTextTrim
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|contentKey
return|;
block|}
specifier|private
name|List
name|getPlugins
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
return|return
name|getPlugins
argument_list|(
name|xml
argument_list|,
literal|"//project/build/plugins/plugin"
argument_list|)
return|;
block|}
specifier|private
name|List
name|getReports
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
return|return
name|getPlugins
argument_list|(
name|xml
argument_list|,
literal|"//project/reporting/plugins/plugin"
argument_list|)
return|;
block|}
comment|/**      * Get List of {@link RepositoryContent} objects from plugin definitions.      */
specifier|private
name|List
name|getPlugins
parameter_list|(
name|XMLReader
name|xml
parameter_list|,
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|plugins
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|xml
operator|.
name|getElementList
argument_list|(
name|xpathExpr
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemPlugin
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|plugins
operator|.
name|add
argument_list|(
name|getContentKey
argument_list|(
name|elemPlugin
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|plugins
return|;
block|}
specifier|private
name|List
name|getRepositories
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|repos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|repos
operator|.
name|addAll
argument_list|(
name|getRepositories
argument_list|(
name|xml
argument_list|,
literal|false
argument_list|,
literal|"//project/repositories/repository"
argument_list|)
argument_list|)
expr_stmt|;
name|repos
operator|.
name|addAll
argument_list|(
name|getRepositories
argument_list|(
name|xml
argument_list|,
literal|true
argument_list|,
literal|"//project/pluginRepositories/pluginRepository"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|repos
return|;
block|}
specifier|private
name|List
name|getRepositories
parameter_list|(
name|XMLReader
name|xml
parameter_list|,
name|boolean
name|isPluginRepo
parameter_list|,
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|repositoriesList
init|=
name|xml
operator|.
name|getElementList
argument_list|(
name|xpathExpr
argument_list|)
decl_stmt|;
name|Iterator
name|itRepos
init|=
name|repositoriesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itRepos
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elemRepo
init|=
operator|(
name|Element
operator|)
name|itRepos
operator|.
name|next
argument_list|()
decl_stmt|;
name|ProjectRepository
name|repo
init|=
operator|new
name|ProjectRepository
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|elemRepo
operator|.
name|elementTextTrim
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|elemRepo
operator|.
name|elementTextTrim
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|elemRepo
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
name|StringUtils
operator|.
name|defaultIfEmpty
argument_list|(
name|elemRepo
operator|.
name|elementTextTrim
argument_list|(
literal|"layout"
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setPlugins
argument_list|(
name|isPluginRepo
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setReleases
argument_list|(
name|toBoolean
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
name|elemRepo
argument_list|,
literal|"releases/enabled"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setReleases
argument_list|(
name|toBoolean
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
name|elemRepo
argument_list|,
literal|"snapshots/enabled"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Scm
name|getSCM
parameter_list|(
name|XMLReader
name|xml
parameter_list|)
throws|throws
name|XMLException
block|{
name|Element
name|elemScm
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//project/scm"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemScm
operator|!=
literal|null
condition|)
block|{
name|Scm
name|scm
init|=
operator|new
name|Scm
argument_list|()
decl_stmt|;
name|scm
operator|.
name|setConnection
argument_list|(
name|elemScm
operator|.
name|elementTextTrim
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setDeveloperConnection
argument_list|(
name|elemScm
operator|.
name|elementTextTrim
argument_list|(
literal|"developerConnection"
argument_list|)
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setUrl
argument_list|(
name|elemScm
operator|.
name|elementTextTrim
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scm
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|toBoolean
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|,
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|,
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// If unset, or not "true" or "false".
return|return
name|defaultValue
return|;
block|}
block|}
block|}
end_class

end_unit

