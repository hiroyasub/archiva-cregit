begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|filters
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaModelCloner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|DefaultExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|EvaluatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|ExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|sources
operator|.
name|PropertiesExpressionSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|sources
operator|.
name|SystemPropertyExpressionSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * ProjectModelExpressionFilter   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  * @plexus.component role="org.apache.maven.archiva.repository.project.ProjectModelFilter"  *                   role-hint="expression"   *                   instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|ProjectModelExpressionFilter
implements|implements
name|ProjectModelFilter
block|{
specifier|private
name|ExpressionEvaluator
name|evaluator
init|=
operator|new
name|DefaultExpressionEvaluator
argument_list|()
decl_stmt|;
comment|/**      * Find and Evaluate the Expressions present in the model.      *       * @param model the model to correct.      */
specifier|public
name|ArchivaProjectModel
name|filter
parameter_list|(
specifier|final
name|ArchivaProjectModel
name|model
parameter_list|)
throws|throws
name|ProjectModelException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|putAll
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.artifactId"
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.groupId"
argument_list|,
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.version"
argument_list|,
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PropertiesExpressionSource
name|propsSource
init|=
operator|new
name|PropertiesExpressionSource
argument_list|()
decl_stmt|;
name|propsSource
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|evaluator
operator|.
name|addExpressionSource
argument_list|(
name|propsSource
argument_list|)
expr_stmt|;
name|evaluator
operator|.
name|addExpressionSource
argument_list|(
operator|new
name|SystemPropertyExpressionSource
argument_list|()
argument_list|)
expr_stmt|;
name|ArchivaProjectModel
name|ret
init|=
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|model
argument_list|)
decl_stmt|;
try|try
block|{
name|ret
operator|.
name|setVersion
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setGroupId
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|ret
operator|.
name|getDependencies
argument_list|()
argument_list|)
condition|)
block|{
name|evaluateExpressionsInDependencyList
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|evaluateExpressionsInDependencyList
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EvaluatorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Unable to evaluate expression in model: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|void
name|evaluateExpressionsInDependencyList
parameter_list|(
name|ExpressionEvaluator
name|evaluator
parameter_list|,
name|List
name|dependencies
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|dependencies
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Iterator
name|it
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|dependency
operator|.
name|setGroupId
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

