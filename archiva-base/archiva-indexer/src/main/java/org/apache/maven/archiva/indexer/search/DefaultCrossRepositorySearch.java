begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|bytecode
operator|.
name|BytecodeKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|filecontent
operator|.
name|FileContentKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|hashcodes
operator|.
name|HashcodesKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
operator|.
name|LuceneQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ArchivaConfigurationAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * DefaultCrossRepositorySearch   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  * @plexus.component role="org.apache.maven.archiva.indexer.search.CrossRepositorySearch" role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultCrossRepositorySearch
extends|extends
name|AbstractLogEnabled
implements|implements
name|CrossRepositorySearch
implements|,
name|RegistryListener
implements|,
name|Initializable
block|{
specifier|private
specifier|static
specifier|final
name|int
name|UNKNOWN
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FILE_CONTENT
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BYTECODE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HASHCODE
init|=
literal|3
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="lucene"      */
specifier|private
name|RepositoryContentIndexFactory
name|indexFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|private
name|Map
name|repositoryMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|SearchResults
name|searchForMd5
parameter_list|(
name|String
name|md5
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|SearchResults
name|searchForTerm
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|List
name|indexes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|addAll
argument_list|(
name|getBytecodeIndexes
argument_list|()
argument_list|)
expr_stmt|;
name|indexes
operator|.
name|addAll
argument_list|(
name|getFileContentIndexes
argument_list|()
argument_list|)
expr_stmt|;
name|indexes
operator|.
name|addAll
argument_list|(
name|getHashcodeIndexes
argument_list|()
argument_list|)
expr_stmt|;
name|SearchResults
name|results
init|=
operator|new
name|SearchResults
argument_list|()
decl_stmt|;
name|results
operator|.
name|getRepositories
argument_list|()
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|repositoryMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|indexes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryContentIndex
name|index
init|=
operator|(
name|RepositoryContentIndex
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|QueryParser
name|parser
init|=
name|index
operator|.
name|getQueryParser
argument_list|()
decl_stmt|;
name|LuceneQuery
name|query
init|=
operator|new
name|LuceneQuery
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|term
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|hits
init|=
name|index
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getIndexId
argument_list|(
name|index
argument_list|)
condition|)
block|{
case|case
name|BYTECODE
case|:
name|results
operator|.
name|getBytecodeHits
argument_list|()
operator|.
name|addAll
argument_list|(
name|hits
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILE_CONTENT
case|:
name|results
operator|.
name|getContentHits
argument_list|()
operator|.
name|addAll
argument_list|(
name|hits
argument_list|)
expr_stmt|;
break|break;
case|case
name|HASHCODE
case|:
name|results
operator|.
name|getHashcodeHits
argument_list|()
operator|.
name|addAll
argument_list|(
name|hits
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to parse query ["
operator|+
name|term
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexSearchException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to search index ["
operator|+
name|index
operator|+
literal|"] for term ["
operator|+
name|term
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
specifier|private
name|int
name|getIndexId
parameter_list|(
name|RepositoryContentIndex
name|index
parameter_list|)
block|{
if|if
condition|(
name|FileContentKeys
operator|.
name|ID
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|FILE_CONTENT
return|;
block|}
if|if
condition|(
name|BytecodeKeys
operator|.
name|ID
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|BYTECODE
return|;
block|}
if|if
condition|(
name|HashcodesKeys
operator|.
name|ID
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HASHCODE
return|;
block|}
return|return
name|UNKNOWN
return|;
block|}
specifier|public
name|List
name|getBytecodeIndexes
parameter_list|()
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|repositoryMap
init|)
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|repositoryMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaRepository
name|repo
init|=
operator|(
name|ArchivaRepository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSearchAllowed
argument_list|(
name|repo
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|indexFactory
operator|.
name|createBytecodeIndex
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
name|getFileContentIndexes
parameter_list|()
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|repositoryMap
init|)
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|repositoryMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaRepository
name|repo
init|=
operator|(
name|ArchivaRepository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSearchAllowed
argument_list|(
name|repo
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|indexFactory
operator|.
name|createFileContentIndex
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
name|getHashcodeIndexes
parameter_list|()
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|repositoryMap
init|)
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|repositoryMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaRepository
name|repo
init|=
operator|(
name|ArchivaRepository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSearchAllowed
argument_list|(
name|repo
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|indexFactory
operator|.
name|createHashcodeIndex
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isSearchAllowed
parameter_list|(
name|ArchivaRepository
name|repo
parameter_list|)
block|{
comment|// TODO: test if user has permissions to search in this repo.
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ConfigurationNames
operator|.
name|isRepositories
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|initRepositoryMap
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* Nothing to do here */
block|}
specifier|private
name|void
name|initRepositoryMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|repositoryMap
init|)
block|{
name|this
operator|.
name|repositoryMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|createRepositoryMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RepositoryConfiguration
name|repoConfig
init|=
operator|(
name|RepositoryConfiguration
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ArchivaRepository
name|repository
init|=
name|ArchivaConfigurationAdaptor
operator|.
name|toArchivaRepository
argument_list|(
name|repoConfig
argument_list|)
decl_stmt|;
name|this
operator|.
name|repositoryMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|initRepositoryMap
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

