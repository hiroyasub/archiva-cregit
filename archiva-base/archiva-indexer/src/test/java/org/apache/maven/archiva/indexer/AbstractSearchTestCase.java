begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
operator|.
name|LuceneQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
operator|.
name|LuceneRepositoryContentRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|ComparisonFailure
import|;
end_import

begin_comment
comment|/**  * AbstractSearchTestCase   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSearchTestCase
extends|extends
name|AbstractIndexerTestCase
block|{
specifier|protected
name|Map
name|records
decl_stmt|;
specifier|protected
specifier|abstract
name|Map
name|createSampleRecordsMap
parameter_list|()
function_decl|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|records
operator|=
name|createSampleRecordsMap
argument_list|()
expr_stmt|;
name|index
operator|.
name|indexRecords
argument_list|(
name|records
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Query
name|createExactMatchQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Query
name|createMatchQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryParser
name|queryParser
init|=
operator|new
name|QueryParser
argument_list|(
name|field
argument_list|,
name|indexHandlers
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|queryParser
operator|.
name|setLowercaseExpandedTerms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|queryParser
operator|.
name|parse
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|protected
name|void
name|assertResults
parameter_list|(
name|String
name|expectedKeys
index|[]
parameter_list|,
name|List
name|actualResults
parameter_list|)
block|{
if|if
condition|(
name|actualResults
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Got null results, expected<"
operator|+
name|expectedKeys
operator|.
name|length
operator|+
literal|"> results."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Got empty results, expected<"
operator|+
name|expectedKeys
operator|.
name|length
operator|+
literal|"> results."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedKeys
operator|.
name|length
operator|!=
name|actualResults
operator|.
name|size
argument_list|()
condition|)
block|{
name|dumpResults
argument_list|(
name|actualResults
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ComparisonFailure
argument_list|(
literal|"Results count"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|expectedKeys
operator|.
name|length
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|actualResults
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
literal|"Results count"
argument_list|,
name|expectedKeys
operator|.
name|length
argument_list|,
name|actualResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|expectedKeys
index|[
name|i
index|]
decl_stmt|;
name|LuceneRepositoryContentRecord
name|record
init|=
operator|(
name|LuceneRepositoryContentRecord
operator|)
name|records
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
name|dumpResults
argument_list|(
name|actualResults
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected record<"
operator|+
name|key
operator|+
literal|"> not in records map (smack the unit test developer, tell them to fix method "
operator|+
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|actualResults
operator|.
name|contains
argument_list|(
name|record
argument_list|)
condition|)
block|{
name|dumpResults
argument_list|(
name|actualResults
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Results should contain expected record: "
operator|+
name|record
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|dumpResults
parameter_list|(
name|List
name|results
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results<"
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|"> - "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|result
init|=
operator|(
name|Object
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Result ["
operator|+
operator|(
name|i
operator|++
operator|)
operator|+
literal|"] : "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertNoResults
parameter_list|(
name|List
name|results
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dumpResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected no results, but actually got<"
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|"> entries."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertQueryExactMatchNoResults
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|term
parameter_list|)
throws|throws
name|RepositoryIndexSearchException
block|{
name|Query
name|query
init|=
name|createExactMatchQuery
argument_list|(
name|key
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|index
operator|.
name|search
argument_list|(
operator|new
name|LuceneQuery
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertQueryExactMatch
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|names
index|[]
parameter_list|,
name|String
name|term
parameter_list|)
throws|throws
name|RepositoryIndexSearchException
block|{
name|Query
name|query
init|=
name|createExactMatchQuery
argument_list|(
name|key
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|index
operator|.
name|search
argument_list|(
operator|new
name|LuceneQuery
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|assertResults
argument_list|(
name|names
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertQueryMatch
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|names
index|[]
parameter_list|,
name|String
name|term
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createMatchQuery
argument_list|(
name|key
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|index
operator|.
name|search
argument_list|(
operator|new
name|LuceneQuery
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|assertResults
argument_list|(
name|names
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertQueryMatchNoResults
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|term
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createMatchQuery
argument_list|(
name|key
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|index
operator|.
name|search
argument_list|(
operator|new
name|LuceneQuery
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

