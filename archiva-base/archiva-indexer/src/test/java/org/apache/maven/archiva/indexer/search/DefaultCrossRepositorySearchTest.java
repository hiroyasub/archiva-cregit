begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|MockConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DefaultCrossRepositorySearchTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DefaultCrossRepositorySearchTest
extends|extends
name|PlexusTestCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|RepositoryContentIndexFactory
name|indexFactory
init|=
operator|(
name|RepositoryContentIndexFactory
operator|)
name|lookup
argument_list|(
name|RepositoryContentIndexFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"lucene"
argument_list|)
decl_stmt|;
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
literal|"src/test/managed-repository"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Default Test Repository should exist."
argument_list|,
name|repoDir
operator|.
name|exists
argument_list|()
operator|&&
name|repoDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|repoUri
init|=
literal|"file://"
operator|+
name|StringUtils
operator|.
name|replace
argument_list|(
name|repoDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|ArchivaRepository
name|repository
init|=
operator|new
name|ArchivaRepository
argument_list|(
literal|"testDefaultRepo"
argument_list|,
literal|"Test Default Repository"
argument_list|,
name|repoUri
argument_list|)
decl_stmt|;
name|File
name|indexLocation
init|=
operator|new
name|File
argument_list|(
literal|"target/index-crossrepo-"
operator|+
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|MockConfiguration
name|config
init|=
operator|(
name|MockConfiguration
operator|)
name|lookup
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"mock"
argument_list|)
decl_stmt|;
name|RepositoryConfiguration
name|repoConfig
init|=
operator|new
name|RepositoryConfiguration
argument_list|()
decl_stmt|;
name|repoConfig
operator|.
name|setId
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setName
argument_list|(
name|repository
operator|.
name|getModel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setUrl
argument_list|(
name|repository
operator|.
name|getModel
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setIndexDir
argument_list|(
name|indexLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexLocation
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexLocation
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|addRepository
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
comment|// Create the (empty) indexes.
name|RepositoryContentIndex
name|indexHashcode
init|=
name|indexFactory
operator|.
name|createHashcodeIndex
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|RepositoryContentIndex
name|indexBytecode
init|=
name|indexFactory
operator|.
name|createBytecodeIndex
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|RepositoryContentIndex
name|indexContents
init|=
name|indexFactory
operator|.
name|createFileContentIndex
argument_list|(
name|repository
argument_list|)
decl_stmt|;
comment|// Now populate them.
name|Map
name|hashcodesMap
init|=
operator|(
operator|new
name|HashcodesIndexPopulator
argument_list|()
operator|)
operator|.
name|populate
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexHashcode
operator|.
name|indexRecords
argument_list|(
name|hashcodesMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|bytecodeMap
init|=
operator|(
operator|new
name|BytecodeIndexPopulator
argument_list|()
operator|)
operator|.
name|populate
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexBytecode
operator|.
name|indexRecords
argument_list|(
name|bytecodeMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|contentMap
init|=
operator|(
operator|new
name|FileContentIndexPopulator
argument_list|()
operator|)
operator|.
name|populate
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexContents
operator|.
name|indexRecords
argument_list|(
name|contentMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CrossRepositorySearch
name|lookupCrossRepositorySearch
parameter_list|()
throws|throws
name|Exception
block|{
name|CrossRepositorySearch
name|search
init|=
operator|(
name|CrossRepositorySearch
operator|)
name|lookup
argument_list|(
name|CrossRepositorySearch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"CrossRepositorySearch:default should not be null."
argument_list|,
name|search
argument_list|)
expr_stmt|;
return|return
name|search
return|;
block|}
specifier|public
name|void
name|testSearchTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|CrossRepositorySearch
name|search
init|=
name|lookupCrossRepositorySearch
argument_list|()
decl_stmt|;
name|SearchResults
name|results
init|=
name|search
operator|.
name|searchForTerm
argument_list|(
literal|"org"
argument_list|)
decl_stmt|;
name|assertHitCounts
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|results
operator|=
name|search
operator|.
name|searchForTerm
argument_list|(
literal|"junit"
argument_list|)
expr_stmt|;
name|assertHitCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|results
operator|=
name|search
operator|.
name|searchForTerm
argument_list|(
literal|"monosodium"
argument_list|)
expr_stmt|;
name|assertHitCounts
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertHitCounts
parameter_list|(
name|int
name|repoCount
parameter_list|,
name|int
name|bytecodeCount
parameter_list|,
name|int
name|hashcodeCount
parameter_list|,
name|int
name|contentCount
parameter_list|,
name|SearchResults
name|results
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Search Results should not be null."
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repository Hits"
argument_list|,
name|repoCount
argument_list|,
name|results
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|bytecodeCount
operator|!=
name|results
operator|.
name|getBytecodeHits
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|||
operator|(
name|hashcodeCount
operator|!=
name|results
operator|.
name|getHashcodeHits
argument_list|()
operator|.
name|size
argument_list|()
operator|)
comment|/* || ( contentCount != results.getContentHits().size() ) */
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to get expected results hit count.  Expected: (bytecode,hashcode,content)<"
operator|+
name|bytecodeCount
operator|+
literal|","
operator|+
name|hashcodeCount
operator|+
literal|","
operator|+
name|contentCount
operator|+
literal|">, but got<"
operator|+
name|results
operator|.
name|getBytecodeHits
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|","
operator|+
name|results
operator|.
name|getHashcodeHits
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|","
operator|+
name|results
operator|.
name|getContentHits
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"> instead."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

