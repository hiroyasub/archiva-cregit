begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|MultiValueMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * DependencyScope - utility methods and constants for working with scopes.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyScope
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM
init|=
literal|"system"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPILE
init|=
literal|"compile"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROVIDED
init|=
literal|"provided"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RUNTIME
init|=
literal|"runtime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MultiValueMap
name|scopeMap
decl_stmt|;
static|static
block|{
comment|// Store the map of scopes to what other scopes are 'within' that scope.
name|scopeMap
operator|=
operator|new
name|MultiValueMap
argument_list|()
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|COMPILE
argument_list|,
name|COMPILE
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|COMPILE
argument_list|,
name|RUNTIME
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|COMPILE
argument_list|,
name|PROVIDED
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|COMPILE
argument_list|,
name|SYSTEM
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|TEST
argument_list|,
name|COMPILE
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|TEST
argument_list|,
name|RUNTIME
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|TEST
argument_list|,
name|PROVIDED
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|TEST
argument_list|,
name|SYSTEM
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|TEST
argument_list|,
name|TEST
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|RUNTIME
argument_list|,
name|RUNTIME
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|RUNTIME
argument_list|,
name|PROVIDED
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|RUNTIME
argument_list|,
name|SYSTEM
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|PROVIDED
argument_list|,
name|RUNTIME
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|PROVIDED
argument_list|,
name|PROVIDED
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|PROVIDED
argument_list|,
name|SYSTEM
argument_list|)
expr_stmt|;
name|scopeMap
operator|.
name|put
argument_list|(
name|SYSTEM
argument_list|,
name|SYSTEM
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isSystemScoped
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|equals
argument_list|(
name|SYSTEM
argument_list|,
name|dep
operator|.
name|getScope
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Test the provided scope against the desired scope to see if it is      * within that scope's pervue.      *       * Examples:       * actual:compile,  desired:test = true      * actual:compile,  desired:compile = true      * actual:test,     desired:compile = false      * actual:provided, desired:compile = false      *       * @param actualScope      * @param desiredScope      * @return      */
specifier|public
specifier|static
name|boolean
name|isWithinScope
parameter_list|(
name|String
name|actualScope
parameter_list|,
name|String
name|desiredScope
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|desiredScope
argument_list|)
condition|)
block|{
comment|// nothing desired? everything should fail.
return|return
literal|false
return|;
block|}
name|String
name|scope
init|=
name|StringUtils
operator|.
name|defaultIfEmpty
argument_list|(
name|actualScope
argument_list|,
name|COMPILE
argument_list|)
decl_stmt|;
return|return
name|scopeMap
operator|.
name|containsValue
argument_list|(
name|desiredScope
argument_list|,
name|scope
argument_list|)
return|;
block|}
block|}
end_class

end_unit

