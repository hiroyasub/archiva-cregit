begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_comment
comment|/**  * ArchivaModelClonerTest   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id: ArchivaModelClonerTest.java 525951 2007-04-05 20:11:19Z joakime $  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaArtifactTest
extends|extends
name|PlexusTestCase
block|{
specifier|public
name|void
name|testArtifactModelProcessed
parameter_list|()
block|{
name|ArchivaArtifactModel
name|model
init|=
operator|new
name|ArchivaArtifactModel
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"whenProcessed"
argument_list|,
name|model
operator|.
name|getWhenProcessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"isProcessed"
argument_list|,
name|model
operator|.
name|isProcessed
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setWhenProcessed
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"isProcessed"
argument_list|,
name|model
operator|.
name|isProcessed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

