begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|scheduler
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|scheduler
operator|.
name|AbstractJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_comment
comment|/**  * This class is the discoverer job that is executed by the scheduler.  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryTaskJob
extends|extends
name|AbstractJob
block|{
specifier|static
specifier|final
name|String
name|TASK_KEY
init|=
literal|"EXECUTION"
decl_stmt|;
comment|/**      * Execute the discoverer and the indexer.      *      * @param context      * @throws org.quartz.JobExecutionException      *      */
specifier|public
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|context
parameter_list|)
throws|throws
name|JobExecutionException
block|{
name|JobDataMap
name|dataMap
init|=
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|setJobDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|RepositoryTask
name|executor
init|=
operator|(
name|RepositoryTask
operator|)
name|dataMap
operator|.
name|get
argument_list|(
name|TASK_KEY
argument_list|)
decl_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JobExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

