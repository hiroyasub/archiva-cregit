begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|GroupRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class tests the DefaultMetadataDiscoverer class.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultMetadataDiscovererTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|MetadataDiscoverer
name|discoverer
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_OPERATION
init|=
literal|"test"
decl_stmt|;
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
comment|/**      *      */
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|discoverer
operator|=
operator|(
name|MetadataDiscoverer
operator|)
name|lookup
argument_list|(
name|MetadataDiscoverer
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|(
name|ArtifactFactory
operator|)
name|lookup
argument_list|(
name|ArtifactFactory
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|repository
operator|=
name|getRepository
argument_list|()
expr_stmt|;
name|removeTimestampMetadata
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ArtifactRepository
name|getRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|basedir
init|=
name|getTestFile
argument_list|(
literal|"src/test/repository"
argument_list|)
decl_stmt|;
name|ArtifactRepositoryFactory
name|factory
init|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|ArtifactRepositoryLayout
name|layout
init|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"discoveryRepo"
argument_list|,
literal|"file://"
operator|+
name|basedir
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      *      */
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|discoverer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Test if metadata file in wrong directory was added to the kickedOutPaths.      */
specifier|public
name|void
name|testKickoutWrongDirectory
parameter_list|()
throws|throws
name|DiscovererException
block|{
name|discoverer
operator|.
name|discoverMetadata
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|discoverer
operator|.
name|getKickedOutPathsIterator
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|DiscovererPath
name|dPath
init|=
operator|(
name|DiscovererPath
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|dPath
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|normalizedDir
init|=
name|dir
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"javax/maven-metadata.xml"
operator|.
name|equals
argument_list|(
name|normalizedDir
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check reason for kickout"
argument_list|,
literal|"Unable to build a repository metadata from path"
argument_list|,
name|dPath
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test if blank metadata file was added to the kickedOutPaths.      */
specifier|public
name|void
name|testKickoutBlankMetadata
parameter_list|()
throws|throws
name|DiscovererException
block|{
name|discoverer
operator|.
name|discoverMetadata
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|discoverer
operator|.
name|getKickedOutPathsIterator
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|DiscovererPath
name|dPath
init|=
operator|(
name|DiscovererPath
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|dPath
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|normalizedDir
init|=
name|dir
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"org/apache/maven/some-ejb/1.0/maven-metadata.xml"
operator|.
name|equals
argument_list|(
name|normalizedDir
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check reason for kickout"
argument_list|,
name|dPath
operator|.
name|getComment
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Error reading metadata file '(.*)': input contained no data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeTimestampMetadata
parameter_list|()
throws|throws
name|IOException
block|{
comment|// remove the metadata that tracks time
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"maven-metadata.xml"
argument_list|)
decl_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for Windows
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDiscoverMetadata
parameter_list|()
throws|throws
name|DiscovererException
block|{
name|List
name|metadataPaths
init|=
name|discoverer
operator|.
name|discoverMetadata
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Check metadata not null"
argument_list|,
name|metadataPaths
argument_list|)
expr_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|createArtifact
argument_list|(
literal|"org.apache.testgroup"
argument_list|,
literal|"discovery"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check included"
argument_list|,
name|containsMetadata
argument_list|(
name|metadataPaths
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|createArtifact
argument_list|(
literal|"org.apache.testgroup"
argument_list|,
literal|"discovery"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check included"
argument_list|,
name|containsMetadata
argument_list|(
name|metadataPaths
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|GroupRepositoryMetadata
argument_list|(
literal|"org.apache.maven"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check included"
argument_list|,
name|containsMetadata
argument_list|(
name|metadataPaths
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Artifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
return|return
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|"1.0"
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|factory
operator|.
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|null
argument_list|,
literal|"jar"
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|containsMetadata
parameter_list|(
name|List
name|metadataPaths
parameter_list|,
name|RepositoryMetadata
name|metadata
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|metadataPaths
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryMetadata
name|m
init|=
operator|(
name|RepositoryMetadata
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getArtifactId
argument_list|()
operator|==
literal|null
operator|&&
name|metadata
operator|.
name|getArtifactId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|m
operator|.
name|getArtifactId
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

