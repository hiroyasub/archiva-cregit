begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|DirectoryWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Discoverer Implementation.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @plexus.component role="org.apache.maven.archiva.discoverer.Discoverer"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDiscoverer
extends|extends
name|AbstractLogEnabled
implements|implements
name|Discoverer
block|{
comment|/**      * Standard patterns to exclude from discovery as they are usually noise.      */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|STANDARD_DISCOVERY_EXCLUDES
init|=
block|{
literal|"bin/**"
block|,
literal|"reports/**"
block|,
literal|".index"
block|,
literal|".reports/**"
block|,
literal|".maven/**"
block|,
literal|"**/*snapshot-version"
block|,
literal|"*/website/**"
block|,
literal|"*/licences/**"
block|,
literal|"**/.htaccess"
block|,
literal|"**/*.html"
block|,
literal|"**/*.txt"
block|,
literal|"**/README*"
block|,
literal|"**/CHANGELOG*"
block|,
literal|"**/KEYS*"
block|}
decl_stmt|;
specifier|public
name|DefaultDiscoverer
parameter_list|()
block|{
block|}
specifier|public
name|DiscovererStatistics
name|walkRepository
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|List
name|consumers
parameter_list|,
name|boolean
name|includeSnapshots
parameter_list|)
throws|throws
name|DiscovererException
block|{
return|return
name|walkRepository
argument_list|(
name|repository
argument_list|,
name|consumers
argument_list|,
name|includeSnapshots
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|DiscovererStatistics
name|walkRepository
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|List
name|consumers
parameter_list|,
name|boolean
name|includeSnapshots
parameter_list|,
name|long
name|onlyModifiedAfterTimestamp
parameter_list|,
name|List
name|extraFileExclusions
parameter_list|,
name|List
name|extraFileInclusions
parameter_list|)
throws|throws
name|DiscovererException
block|{
comment|// Sanity Check
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to operate on a null repository."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|repository
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Only filesystem repositories are supported."
argument_list|)
throw|;
block|}
name|File
name|repositoryBase
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryBase
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to scan a repository, directory "
operator|+
name|repositoryBase
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|repositoryBase
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to scan a repository, path "
operator|+
name|repositoryBase
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is not a directory."
argument_list|)
throw|;
block|}
comment|// Setup Includes / Excludes.
name|List
name|allExcludes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|allIncludes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// Exclude all of the SCM patterns.
name|allExcludes
operator|.
name|addAll
argument_list|(
name|FileUtils
operator|.
name|getDefaultExcludesAsList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exclude all of the archiva noise patterns.
name|allExcludes
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|STANDARD_DISCOVERY_EXCLUDES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|includeSnapshots
condition|)
block|{
name|allExcludes
operator|.
name|add
argument_list|(
literal|"**/*-SNAPSHOT*"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extraFileExclusions
operator|!=
literal|null
condition|)
block|{
name|allExcludes
operator|.
name|addAll
argument_list|(
name|extraFileExclusions
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|it
init|=
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Consumer
name|consumer
init|=
operator|(
name|Consumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|/* NOTE: Do not insert the consumer exclusion patterns here.              * Exclusion patterns are handled by RepositoryScanner.wantsFile(Consumer, String)              *               * addUniqueElements( consumer.getExcludePatterns(), allExcludes );              */
name|addUniqueElements
argument_list|(
name|consumer
operator|.
name|getIncludePatterns
argument_list|()
argument_list|,
name|allIncludes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extraFileInclusions
operator|!=
literal|null
condition|)
block|{
name|allIncludes
operator|.
name|addAll
argument_list|(
name|extraFileInclusions
argument_list|)
expr_stmt|;
block|}
comment|// Setup Directory Walker
name|DirectoryWalker
name|dirWalker
init|=
operator|new
name|DirectoryWalker
argument_list|()
decl_stmt|;
name|dirWalker
operator|.
name|setBaseDir
argument_list|(
name|repositoryBase
argument_list|)
expr_stmt|;
name|dirWalker
operator|.
name|setIncludes
argument_list|(
name|allIncludes
argument_list|)
expr_stmt|;
name|dirWalker
operator|.
name|setExcludes
argument_list|(
name|allExcludes
argument_list|)
expr_stmt|;
comment|// Setup the Scan Instance
name|RepositoryScanner
name|repoScanner
init|=
operator|new
name|RepositoryScanner
argument_list|(
name|repository
argument_list|,
name|consumers
argument_list|)
decl_stmt|;
name|repoScanner
operator|.
name|setOnlyModifiedAfterTimestamp
argument_list|(
name|onlyModifiedAfterTimestamp
argument_list|)
expr_stmt|;
name|repoScanner
operator|.
name|setLogger
argument_list|(
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|dirWalker
operator|.
name|addDirectoryWalkListener
argument_list|(
name|repoScanner
argument_list|)
expr_stmt|;
comment|// Execute scan.
name|dirWalker
operator|.
name|scan
argument_list|()
expr_stmt|;
return|return
name|repoScanner
operator|.
name|getStatistics
argument_list|()
return|;
block|}
specifier|private
name|void
name|addUniqueElements
parameter_list|(
name|List
name|fromList
parameter_list|,
name|List
name|toList
parameter_list|)
block|{
name|Iterator
name|itFrom
init|=
name|fromList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itFrom
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o
init|=
name|itFrom
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|toList
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|toList
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

