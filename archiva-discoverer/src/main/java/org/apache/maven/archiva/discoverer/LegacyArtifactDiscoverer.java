begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Artifact discoverer for the legacy repository layout (Maven 1.x).  * Method used to build an artifact object using a relative path from a repository base directory.  An artifactId  * having the words "DEV", "PRE", "RC", "ALPHA", "BETA", "DEBUG", "UNOFFICIAL", "CURRENT", "LATEST", "FCS",  * "RELEASE", "NIGHTLY", "SNAPSHOT" and "TEST" (not case-sensitive) will most likely make this method fail as  * they are reserved for version usage.  *  * @author John Casey  * @author Brett Porter  * @plexus.component role="org.apache.maven.archiva.discoverer.ArtifactDiscoverer" role-hint="legacy"  */
end_comment

begin_class
specifier|public
class|class
name|LegacyArtifactDiscoverer
extends|extends
name|AbstractArtifactDiscoverer
block|{
comment|/**      * @see org.apache.maven.archiva.discoverer.ArtifactDiscoverer#buildArtifact(String)      */
specifier|public
name|Artifact
name|buildArtifact
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|DiscovererException
block|{
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
literal|"/\\"
argument_list|)
decl_stmt|;
name|Artifact
name|result
decl_stmt|;
name|int
name|numberOfTokens
init|=
name|tokens
operator|.
name|countTokens
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfTokens
operator|==
literal|3
condition|)
block|{
name|String
name|groupId
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// contains artifactId, version, classifier, and extension.
name|String
name|avceGlob
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|//noinspection CollectionDeclaredAsConcreteClass
name|LinkedList
name|avceTokenList
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|StringTokenizer
name|avceTokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|avceGlob
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
while|while
condition|(
name|avceTokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|avceTokenList
operator|.
name|addLast
argument_list|(
name|avceTokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|lastAvceToken
init|=
operator|(
name|String
operator|)
name|avceTokenList
operator|.
name|removeLast
argument_list|()
decl_stmt|;
comment|// TODO: share with other discoverer, use artifact handlers instead
if|if
condition|(
name|lastAvceToken
operator|.
name|endsWith
argument_list|(
literal|".tar.gz"
argument_list|)
condition|)
block|{
name|type
operator|=
literal|"distribution-tgz"
expr_stmt|;
name|lastAvceToken
operator|=
name|lastAvceToken
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastAvceToken
operator|.
name|length
argument_list|()
operator|-
literal|".tar.gz"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|avceTokenList
operator|.
name|addLast
argument_list|(
name|lastAvceToken
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastAvceToken
operator|.
name|endsWith
argument_list|(
literal|"sources.jar"
argument_list|)
condition|)
block|{
name|type
operator|=
literal|"java-source"
expr_stmt|;
name|lastAvceToken
operator|=
name|lastAvceToken
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastAvceToken
operator|.
name|length
argument_list|()
operator|-
literal|".jar"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|avceTokenList
operator|.
name|addLast
argument_list|(
name|lastAvceToken
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastAvceToken
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|type
operator|=
literal|"distribution-zip"
expr_stmt|;
name|lastAvceToken
operator|=
name|lastAvceToken
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastAvceToken
operator|.
name|length
argument_list|()
operator|-
literal|".zip"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|avceTokenList
operator|.
name|addLast
argument_list|(
name|lastAvceToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|extPos
init|=
name|lastAvceToken
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|extPos
operator|>
literal|0
condition|)
block|{
name|String
name|ext
init|=
name|lastAvceToken
operator|.
name|substring
argument_list|(
name|extPos
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|lastAvceToken
operator|=
name|lastAvceToken
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|extPos
argument_list|)
expr_stmt|;
name|avceTokenList
operator|.
name|addLast
argument_list|(
name|lastAvceToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Path type does not match the extension"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Path filename does not have an extension"
argument_list|)
throw|;
block|}
block|}
comment|// let's discover the version, and whatever's leftover will be either
comment|// a classifier, or part of the artifactId, depending on position.
comment|// Since version is at the end, we have to move in from the back.
name|Collections
operator|.
name|reverse
argument_list|(
name|avceTokenList
argument_list|)
expr_stmt|;
comment|// TODO: this is obscene - surely a better way?
name|String
name|validVersionParts
init|=
literal|"([Dd][Ee][Vv][_.0-9]*)|"
operator|+
literal|"([Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt])|"
operator|+
literal|"([0-9][_.0-9a-zA-Z]*)|"
operator|+
literal|"([Gg]?[_.0-9ab]*([Pp][Rr][Ee]|[Rr][Cc]|[Gg]|[Mm])[_.0-9]*)|"
operator|+
literal|"([Aa][Ll][Pp][Hh][Aa][_.0-9]*)|"
operator|+
literal|"([Bb][Ee][Tt][Aa][_.0-9]*)|"
operator|+
literal|"([Rr][Cc][_.0-9]*)|"
operator|+
literal|"([Tt][Ee][Ss][Tt][_.0-9]*)|"
operator|+
literal|"([Dd][Ee][Bb][Uu][Gg][_.0-9]*)|"
operator|+
literal|"([Uu][Nn][Oo][Ff][Ff][Ii][Cc][Ii][Aa][Ll][_.0-9]*)|"
operator|+
literal|"([Cc][Uu][Rr][Rr][Ee][Nn][Tt])|"
operator|+
literal|"([Ll][Aa][Tt][Ee][Ss][Tt])|"
operator|+
literal|"([Ff][Cc][Ss])|"
operator|+
literal|"([Rr][Ee][Ll][Ee][Aa][Ss][Ee][_.0-9]*)|"
operator|+
literal|"([Nn][Ii][Gg][Hh][Tt][Ll][Yy])|"
operator|+
literal|"[Ff][Ii][Nn][Aa][Ll]|"
operator|+
literal|"([AaBb][_.0-9]*)"
decl_stmt|;
name|StringBuffer
name|classifierBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|versionBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|firstVersionTokenEncountered
init|=
literal|false
decl_stmt|;
name|boolean
name|firstToken
init|=
literal|true
decl_stmt|;
name|int
name|tokensIterated
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|avceTokenList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|tokenIsVersionPart
init|=
name|token
operator|.
name|matches
argument_list|(
name|validVersionParts
argument_list|)
decl_stmt|;
name|StringBuffer
name|bufferToUpdate
decl_stmt|;
comment|// NOTE: logic in code is reversed, since we're peeling off the back
comment|// Any token after the last versionPart will be in the classifier.
comment|// Any token UP TO first non-versionPart is part of the version.
if|if
condition|(
operator|!
name|tokenIsVersionPart
condition|)
block|{
if|if
condition|(
name|firstVersionTokenEncountered
condition|)
block|{
comment|//noinspection BreakStatement
break|break;
block|}
else|else
block|{
name|bufferToUpdate
operator|=
name|classifierBuffer
expr_stmt|;
block|}
block|}
else|else
block|{
name|firstVersionTokenEncountered
operator|=
literal|true
expr_stmt|;
name|bufferToUpdate
operator|=
name|versionBuffer
expr_stmt|;
block|}
if|if
condition|(
name|firstToken
condition|)
block|{
name|firstToken
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|bufferToUpdate
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|bufferToUpdate
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|tokensIterated
operator|++
expr_stmt|;
block|}
comment|// Now, restore the proper ordering so we can build the artifactId.
name|Collections
operator|.
name|reverse
argument_list|(
name|avceTokenList
argument_list|)
expr_stmt|;
comment|// if we didn't find a version, then punt. Use the last token
comment|// as the version, and set the classifier empty.
if|if
condition|(
name|versionBuffer
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
block|{
if|if
condition|(
name|avceTokenList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|lastIdx
init|=
name|avceTokenList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|versionBuffer
operator|.
name|append
argument_list|(
name|avceTokenList
operator|.
name|get
argument_list|(
name|lastIdx
argument_list|)
argument_list|)
expr_stmt|;
name|avceTokenList
operator|.
name|remove
argument_list|(
name|lastIdx
argument_list|)
expr_stmt|;
block|}
name|classifierBuffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if everything is kosher, then pop off all the classifier and
comment|// version tokens, leaving the naked artifact id in the list.
name|avceTokenList
operator|=
operator|new
name|LinkedList
argument_list|(
name|avceTokenList
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|avceTokenList
operator|.
name|size
argument_list|()
operator|-
name|tokensIterated
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|artifactIdBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|firstToken
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|avceTokenList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstToken
condition|)
block|{
name|firstToken
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|artifactIdBuffer
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|artifactIdBuffer
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|String
name|artifactId
init|=
name|artifactIdBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|lastVersionCharIdx
init|=
name|versionBuffer
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|lastVersionCharIdx
operator|>
operator|-
literal|1
operator|&&
name|versionBuffer
operator|.
name|charAt
argument_list|(
name|lastVersionCharIdx
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|versionBuffer
operator|.
name|setLength
argument_list|(
name|lastVersionCharIdx
argument_list|)
expr_stmt|;
block|}
name|String
name|version
init|=
name|versionBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|classifierBuffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|artifactFactory
operator|.
name|createArtifactWithClassifier
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|type
argument_list|,
name|classifierBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|artifactFactory
operator|.
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|Artifact
operator|.
name|SCOPE_RUNTIME
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Path filename version is empty"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Path filename artifactId is empty"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Path artifact type does not corresspond to an artifact type"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Path does not match a legacy repository path for an artifact"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

