begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discovery
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|Xpp3Dom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Base class for artifact discoverers.  *  * @author John Casey  * @author Brett Porter  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractArtifactDiscoverer
extends|extends
name|AbstractDiscoverer
implements|implements
name|ArtifactDiscoverer
block|{
comment|/**      * Standard patterns to exclude from discovery as they are not artifacts.      */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|STANDARD_DISCOVERY_EXCLUDES
init|=
block|{
literal|"bin/**"
block|,
literal|"reports/**"
block|,
literal|".maven/**"
block|,
literal|"**/*.md5"
block|,
literal|"**/*.MD5"
block|,
literal|"**/*.sha1"
block|,
literal|"**/*.SHA1"
block|,
literal|"**/*snapshot-version"
block|,
literal|"*/website/**"
block|,
literal|"*/licenses/**"
block|,
literal|"*/licences/**"
block|,
literal|"**/.htaccess"
block|,
literal|"**/*.html"
block|,
literal|"**/*.asc"
block|,
literal|"**/*.txt"
block|,
literal|"**/*.xml"
block|,
literal|"**/README*"
block|,
literal|"**/CHANGELOG*"
block|,
literal|"**/KEYS*"
block|}
decl_stmt|;
specifier|private
name|List
name|scanForArtifactPaths
parameter_list|(
name|File
name|repositoryBase
parameter_list|,
name|List
name|blacklistedPatterns
parameter_list|,
name|long
name|comparisonTimestamp
parameter_list|)
block|{
return|return
name|scanForArtifactPaths
argument_list|(
name|repositoryBase
argument_list|,
name|blacklistedPatterns
argument_list|,
literal|null
argument_list|,
name|STANDARD_DISCOVERY_EXCLUDES
argument_list|,
name|comparisonTimestamp
argument_list|)
return|;
block|}
specifier|public
name|List
name|discoverArtifacts
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|String
name|operation
parameter_list|,
name|List
name|blacklistedPatterns
parameter_list|,
name|boolean
name|includeSnapshots
parameter_list|)
throws|throws
name|DiscovererException
block|{
if|if
condition|(
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|repository
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Only filesystem repositories are supported"
argument_list|)
throw|;
block|}
name|Xpp3Dom
name|dom
init|=
name|getLastArtifactDiscoveryDom
argument_list|(
name|readRepositoryMetadataDom
argument_list|(
name|repository
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|comparisonTimestamp
init|=
name|readComparisonTimestamp
argument_list|(
name|repository
argument_list|,
name|operation
argument_list|,
name|dom
argument_list|)
decl_stmt|;
comment|// Note that last checked time is deliberately set to the start of the process so that anything added
comment|// mid-discovery and missed by the scanner will get checked next time.
comment|// Due to this, there must be no negative side-effects of discovering something twice.
name|Date
name|newLastCheckedTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|File
name|repositoryBase
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|artifactPaths
init|=
name|scanForArtifactPaths
argument_list|(
name|repositoryBase
argument_list|,
name|blacklistedPatterns
argument_list|,
name|comparisonTimestamp
argument_list|)
decl_stmt|;
comment|// Also note that the last check time, while set at the start, is saved at the end, so that if any exceptions
comment|// occur, then the timestamp is not updated so that the discovery is attempted again
comment|// TODO: under the list-return behaviour we have now, exceptions might occur later and the timestamp will not be reset - see MRM-83
try|try
block|{
name|setLastCheckedTime
argument_list|(
name|repository
argument_list|,
name|operation
argument_list|,
name|newLastCheckedTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DiscovererException
argument_list|(
literal|"Error writing metadata: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|artifactPaths
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Artifact
name|artifact
init|=
name|buildArtifactFromPath
argument_list|(
name|path
argument_list|,
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeSnapshots
operator|||
operator|!
name|artifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
name|addKickedOutPath
argument_list|(
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|artifacts
return|;
block|}
comment|/**      * Returns an artifact object that is represented by the specified path in a repository      *      * @param path       The path that is pointing to an artifact      * @param repository The repository of the artifact      * @return Artifact      * @throws DiscovererException when the specified path does correspond to an artifact      */
specifier|public
name|Artifact
name|buildArtifactFromPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|DiscovererException
block|{
name|Artifact
name|artifact
init|=
name|buildArtifact
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifact
return|;
block|}
specifier|public
name|void
name|setLastCheckedTime
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|String
name|operation
parameter_list|,
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
comment|// see notes in resetLastCheckedTime
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"maven-metadata.xml"
argument_list|)
decl_stmt|;
name|Xpp3Dom
name|dom
init|=
name|readDom
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|dateString
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|setEntry
argument_list|(
name|getLastArtifactDiscoveryDom
argument_list|(
name|dom
argument_list|)
argument_list|,
name|operation
argument_list|,
name|dateString
argument_list|)
expr_stmt|;
name|saveDom
argument_list|(
name|file
argument_list|,
name|dom
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

