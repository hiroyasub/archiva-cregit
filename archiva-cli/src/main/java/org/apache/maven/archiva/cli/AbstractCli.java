begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|classworlds
operator|.
name|ClassWorld
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|DefaultPlexusContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|component
operator|.
name|repository
operator|.
name|exception
operator|.
name|ComponentLookupException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|OperationNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @author jason van zyl  * @version $Id$  * @noinspection UseOfSystemOutOrSystemErr,ACCESS_STATIC_VIA_INSTANCE  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCli
implements|implements
name|Cli
block|{
comment|// ----------------------------------------------------------------------------
comment|// These are standard options that we would want to use for all our projects.
comment|// ----------------------------------------------------------------------------
specifier|public
specifier|static
specifier|final
name|char
name|QUIET
init|=
literal|'q'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|DEBUG
init|=
literal|'X'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|ERRORS
init|=
literal|'e'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|HELP
init|=
literal|'h'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|VERSION
init|=
literal|'v'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|SET_SYSTEM_PROPERTY
init|=
literal|'D'
decl_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// Abstract methods
comment|// ----------------------------------------------------------------------------
specifier|protected
specifier|static
name|Cli
name|getCli
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You must implement this getCli() in your subclass."
argument_list|)
throw|;
block|}
specifier|protected
specifier|abstract
name|Options
name|buildOptions
parameter_list|(
name|Options
name|options
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cli
parameter_list|,
name|PlexusContainer
name|container
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getPomPropertiesPath
parameter_list|()
function_decl|;
comment|// ----------------------------------------------------------------------------
comment|//
comment|// ----------------------------------------------------------------------------
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ClassWorld
name|classWorld
init|=
operator|new
name|ClassWorld
argument_list|(
literal|"plexus.core"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|main
argument_list|(
name|args
argument_list|,
name|classWorld
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * @noinspection ConfusingMainMethod      */
specifier|public
specifier|static
name|int
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|ClassWorld
name|classWorld
parameter_list|)
block|{
return|return
name|getCli
argument_list|()
operator|.
name|execute
argument_list|(
name|args
argument_list|,
name|classWorld
argument_list|)
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|ClassWorld
name|classWorld
parameter_list|)
block|{
name|CommandLine
name|cli
decl_stmt|;
try|try
block|{
name|cli
operator|=
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to parse command line options: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|displayHelp
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.version"
argument_list|,
literal|"44.0"
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"48.0"
argument_list|)
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Sorry, but JDK 1.4 or above is required to execute Maven"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You appear to be using Java version: "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|,
literal|"<unknown>"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|boolean
name|debug
init|=
name|cli
operator|.
name|hasOption
argument_list|(
name|DEBUG
argument_list|)
decl_stmt|;
name|boolean
name|quiet
init|=
operator|!
name|debug
operator|&&
name|cli
operator|.
name|hasOption
argument_list|(
name|QUIET
argument_list|)
decl_stmt|;
name|boolean
name|showErrors
init|=
name|debug
operator|||
name|cli
operator|.
name|hasOption
argument_list|(
name|ERRORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|showErrors
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"+ Error stacktraces are turned on."
argument_list|)
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------------
comment|// Logging
comment|// ----------------------------------------------------------------------------
name|int
name|loggingLevel
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|loggingLevel
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|quiet
condition|)
block|{
name|loggingLevel
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|loggingLevel
operator|=
literal|0
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------
comment|// Process particular command line options
comment|// ----------------------------------------------------------------------
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
name|HELP
argument_list|)
condition|)
block|{
name|displayHelp
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
name|VERSION
argument_list|)
condition|)
block|{
name|showVersion
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|debug
condition|)
block|{
name|showVersion
argument_list|()
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------------
comment|// This is what we will generalize for the invocation of the command line.
comment|// ----------------------------------------------------------------------------
try|try
block|{
name|PlexusContainer
name|plexus
init|=
operator|new
name|DefaultPlexusContainer
argument_list|(
literal|"plexus.core"
argument_list|,
name|classWorld
argument_list|)
decl_stmt|;
name|processOptions
argument_list|(
name|cli
argument_list|,
name|plexus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlexusContainerException
name|e
parameter_list|)
block|{
name|showFatalError
argument_list|(
literal|"Cannot create Plexus container."
argument_list|,
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ComponentLookupException
name|e
parameter_list|)
block|{
name|showError
argument_list|(
literal|"Cannot lookup application component."
argument_list|,
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|showError
argument_list|(
literal|"Problem executing command line."
argument_list|,
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|protected
name|int
name|showFatalError
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|,
name|boolean
name|show
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"FATAL ERROR: "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|show
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error stacktrace:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"For more information, run with the -e flag"
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
specifier|protected
name|void
name|showError
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|,
name|boolean
name|show
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|show
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error stacktrace:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Need to get the versions of the application in a general way, so that I need a way to get the
comment|// specifics of the application so that I can do this in a general way.
specifier|private
name|void
name|showVersion
parameter_list|()
block|{
name|InputStream
name|resourceAsStream
decl_stmt|;
try|try
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|resourceAsStream
operator|=
name|AbstractCli
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|getPomPropertiesPath
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|resourceAsStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"builtOn"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Maven version: "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
literal|"unknown"
argument_list|)
operator|+
literal|" built on "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"builtOn"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Maven version: "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable determine version from JAR file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ----------------------------------------------------------------------
comment|// System properties handling
comment|// ----------------------------------------------------------------------
specifier|private
name|Properties
name|getExecutionProperties
parameter_list|(
name|CommandLine
name|commandLine
parameter_list|)
block|{
name|Properties
name|executionProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// ----------------------------------------------------------------------
comment|// Options that are set on the command line become system properties
comment|// and therefore are set in the session properties. System properties
comment|// are most dominant.
comment|// ----------------------------------------------------------------------
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|SET_SYSTEM_PROPERTY
argument_list|)
condition|)
block|{
name|String
index|[]
name|defStrs
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
name|SET_SYSTEM_PROPERTY
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defStrs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|setCliProperty
argument_list|(
name|defStrs
index|[
name|i
index|]
argument_list|,
name|executionProperties
argument_list|)
expr_stmt|;
block|}
block|}
name|executionProperties
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executionProperties
return|;
block|}
specifier|private
name|void
name|setCliProperty
parameter_list|(
name|String
name|property
parameter_list|,
name|Properties
name|executionProperties
parameter_list|)
block|{
name|String
name|name
decl_stmt|;
name|String
name|value
decl_stmt|;
name|int
name|i
init|=
name|property
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
name|name
operator|=
name|property
operator|.
name|trim
argument_list|()
expr_stmt|;
name|value
operator|=
literal|"true"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|property
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|value
operator|=
name|property
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|executionProperties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------
comment|// I'm leaving the setting of system properties here as not to break
comment|// the SystemPropertyProfileActivator. This won't harm embedding. jvz.
comment|// ----------------------------------------------------------------------
name|System
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Options
name|options
decl_stmt|;
specifier|public
name|Options
name|buildOptions
parameter_list|()
block|{
name|options
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
return|return
name|buildOptions
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|CommandLine
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// We need to eat any quotes surrounding arguments...
name|String
index|[]
name|cleanArgs
init|=
name|cleanArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|buildOptions
argument_list|()
argument_list|,
name|cleanArgs
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|cleanArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
name|cleaned
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|StringBuffer
name|currentArg
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|addedToBuffer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
comment|// if we're in the process of building up another arg, push it and start over.
comment|// this is for the case: "-Dfoo=bar "-Dfoo2=bar two" (note the first unterminated quote)
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|currentArg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// start building an argument here.
name|currentArg
operator|=
operator|new
name|StringBuffer
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|addedToBuffer
operator|=
literal|true
expr_stmt|;
block|}
comment|// this has to be a separate "if" statement, to capture the case of: "-Dfoo=bar"
if|if
condition|(
name|arg
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|String
name|cleanArgPart
init|=
name|arg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|arg
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// if we're building an argument, keep doing so.
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
comment|// if this is the case of "-Dfoo=bar", then we need to adjust the buffer.
if|if
condition|(
name|addedToBuffer
condition|)
block|{
name|currentArg
operator|.
name|setLength
argument_list|(
name|currentArg
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, we trim the trailing " and append to the buffer.
else|else
block|{
comment|// TODO: introducing a space here...not sure what else to do but collapse whitespace
name|currentArg
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|cleanArgPart
argument_list|)
expr_stmt|;
block|}
comment|// we're done with this argument, so add it.
name|cleaned
operator|.
name|add
argument_list|(
name|currentArg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is a simple argument...just add it.
name|cleaned
operator|.
name|add
argument_list|(
name|cleanArgPart
argument_list|)
expr_stmt|;
block|}
comment|// the currentArg MUST be finished when this completes.
name|currentArg
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
comment|// if we haven't added this arg to the buffer, and we ARE building an argument
comment|// buffer, then append it with a preceding space...again, not sure what else to
comment|// do other than collapse whitespace.
comment|// NOTE: The case of a trailing quote is handled by nullifying the arg buffer.
if|if
condition|(
operator|!
name|addedToBuffer
condition|)
block|{
comment|// append to the argument we're building, collapsing whitespace to a single space.
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
name|currentArg
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
comment|// this is a loner, just add it directly.
else|else
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// clean up.
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|currentArg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|cleanedSz
init|=
name|cleaned
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|cleanArgs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cleanedSz
operator|==
literal|0
condition|)
block|{
comment|// if we didn't have any arguments to clean, simply pass the original array through
name|cleanArgs
operator|=
name|args
expr_stmt|;
block|}
else|else
block|{
name|cleanArgs
operator|=
operator|(
name|String
index|[]
operator|)
name|cleaned
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|cleanedSz
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|cleanArgs
return|;
block|}
specifier|public
name|void
name|displayHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"mvn [options] [<goal(s)>] [<phase(s)>]"
argument_list|,
literal|"\nOptions:"
argument_list|,
name|options
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

