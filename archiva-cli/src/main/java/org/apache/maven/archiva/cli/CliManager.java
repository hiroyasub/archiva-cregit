begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * @author Jason van Zyl  * @version $Revision: 381114 $  */
end_comment

begin_class
specifier|public
class|class
name|CliManager
block|{
specifier|public
specifier|static
name|char
name|CONVERT
init|=
literal|'c'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|OLD_REPOSITORY_PATH
init|=
literal|'o'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|NEW_REPOSITORY_PATH
init|=
literal|'n'
decl_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// These are standard options that we would want to use for all our projects.
comment|// ----------------------------------------------------------------------------
specifier|public
specifier|static
specifier|final
name|char
name|QUIET
init|=
literal|'q'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|DEBUG
init|=
literal|'X'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|ERRORS
init|=
literal|'e'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|HELP
init|=
literal|'h'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|VERSION
init|=
literal|'v'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|SET_SYSTEM_PROPERTY
init|=
literal|'D'
decl_stmt|;
specifier|private
name|Options
name|options
decl_stmt|;
specifier|public
name|CliManager
parameter_list|()
block|{
name|options
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"convert"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Convert a legacy Maven 1.x repository to a Maven 2.x repository."
argument_list|)
operator|.
name|create
argument_list|(
name|CONVERT
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"old-repo"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Path to Maven 1.x legacy repository to convert."
argument_list|)
operator|.
name|create
argument_list|(
name|OLD_REPOSITORY_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"new-repo"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Path to newly created Maven 2.x repository."
argument_list|)
operator|.
name|create
argument_list|(
name|NEW_REPOSITORY_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CommandLine
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// We need to eat any quotes surrounding arguments...
name|String
index|[]
name|cleanArgs
init|=
name|cleanArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|cleanArgs
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|cleanArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
name|cleaned
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|StringBuffer
name|currentArg
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|addedToBuffer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
comment|// if we're in the process of building up another arg, push it and start over.
comment|// this is for the case: "-Dfoo=bar "-Dfoo2=bar two" (note the first unterminated quote)
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|currentArg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// start building an argument here.
name|currentArg
operator|=
operator|new
name|StringBuffer
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|addedToBuffer
operator|=
literal|true
expr_stmt|;
block|}
comment|// this has to be a separate "if" statement, to capture the case of: "-Dfoo=bar"
if|if
condition|(
name|arg
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|String
name|cleanArgPart
init|=
name|arg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|arg
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// if we're building an argument, keep doing so.
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
comment|// if this is the case of "-Dfoo=bar", then we need to adjust the buffer.
if|if
condition|(
name|addedToBuffer
condition|)
block|{
name|currentArg
operator|.
name|setLength
argument_list|(
name|currentArg
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, we trim the trailing " and append to the buffer.
else|else
block|{
comment|// TODO: introducing a space here...not sure what else to do but collapse whitespace
name|currentArg
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|cleanArgPart
argument_list|)
expr_stmt|;
block|}
comment|// we're done with this argument, so add it.
name|cleaned
operator|.
name|add
argument_list|(
name|currentArg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is a simple argument...just add it.
name|cleaned
operator|.
name|add
argument_list|(
name|cleanArgPart
argument_list|)
expr_stmt|;
block|}
comment|// the currentArg MUST be finished when this completes.
name|currentArg
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
comment|// if we haven't added this arg to the buffer, and we ARE building an argument
comment|// buffer, then append it with a preceding space...again, not sure what else to
comment|// do other than collapse whitespace.
comment|// NOTE: The case of a trailing quote is handled by nullifying the arg buffer.
if|if
condition|(
operator|!
name|addedToBuffer
condition|)
block|{
comment|// append to the argument we're building, collapsing whitespace to a single space.
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
name|currentArg
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
comment|// this is a loner, just add it directly.
else|else
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// clean up.
if|if
condition|(
name|currentArg
operator|!=
literal|null
condition|)
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|currentArg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|cleanedSz
init|=
name|cleaned
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|cleanArgs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cleanedSz
operator|==
literal|0
condition|)
block|{
comment|// if we didn't have any arguments to clean, simply pass the original array through
name|cleanArgs
operator|=
name|args
expr_stmt|;
block|}
else|else
block|{
name|cleanArgs
operator|=
operator|(
name|String
index|[]
operator|)
name|cleaned
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|cleanedSz
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|cleanArgs
return|;
block|}
specifier|public
name|void
name|displayHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"mvn [options] [<goal(s)>] [<phase(s)>]"
argument_list|,
literal|"\nOptions:"
argument_list|,
name|options
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

