begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|assembly
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|AndArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ScopeArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * @author Jason van Zyl  * @plexus.component role="org.apache.maven.archiva.RepositoryAssembler" role-hint="default"  */
end_comment

begin_comment
comment|// todo will need to pop the processed project cache using reflection
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryAssembler
extends|extends
name|AbstractLogEnabled
implements|implements
name|RepositoryAssembler
block|{
specifier|protected
specifier|static
specifier|final
name|TimeZone
name|UTC_TIME_ZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|UTC_TIMESTAMP_PATTERN
init|=
literal|"yyyyMMddHHmmss"
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|protected
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|protected
name|ArtifactResolver
name|artifactResolver
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|protected
name|ArtifactRepositoryLayout
name|repositoryLayout
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|protected
name|ArtifactRepositoryFactory
name|artifactRepositoryFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|protected
name|ArtifactMetadataSource
name|metadataSource
decl_stmt|;
specifier|public
name|void
name|assemble
parameter_list|(
name|Set
name|artifacts
parameter_list|,
name|File
name|localRepository
parameter_list|,
name|Set
name|remoteRepositories
parameter_list|,
name|ArtifactRepositoryLayout
name|layout
parameter_list|,
name|File
name|repositoryDirectory
parameter_list|)
throws|throws
name|RepositoryAssemblyException
block|{
block|}
specifier|public
name|void
name|assemble
parameter_list|(
name|Set
name|artifacts
parameter_list|,
name|File
name|localRepository
parameter_list|,
name|Set
name|remoteRepositories
parameter_list|,
name|ArtifactFilter
name|artifactFilter
parameter_list|,
name|ArtifactRepositoryLayout
name|layout
parameter_list|,
name|File
name|repositoryDirectory
parameter_list|)
throws|throws
name|RepositoryAssemblyException
block|{
name|ArtifactRepository
name|targetRepository
init|=
name|createLocalRepository
argument_list|(
name|repositoryDirectory
argument_list|)
decl_stmt|;
name|ArtifactResolutionResult
name|result
init|=
literal|null
decl_stmt|;
name|Artifact
name|originatingArtifact
init|=
literal|null
decl_stmt|;
name|ArtifactRepository
name|localRepo
init|=
name|createLocalRepository
argument_list|(
name|localRepository
argument_list|)
decl_stmt|;
try|try
block|{
comment|// i have to get everything first as a filter or transformation here
comment|// doesn't seem to work
comment|// to align everything. If I use a filter to change the version on
comment|// the fly then I get the
comment|// I get JARs but no POMs, and in some directories POMs with no
comment|// JARs.
comment|// FIXME I'm not getting runtime dependencies here
name|result
operator|=
name|artifactResolver
operator|.
name|resolveTransitively
argument_list|(
name|artifacts
argument_list|,
name|originatingArtifact
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|remoteRepositories
argument_list|)
argument_list|,
name|localRepo
argument_list|,
name|metadataSource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error resolving artifacts: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArtifactNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error resolving artifacts: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|assembleRepositoryArtifacts
argument_list|(
name|result
argument_list|,
name|artifactFilter
argument_list|,
name|localRepo
argument_list|,
name|targetRepository
argument_list|,
name|repositoryDirectory
argument_list|)
expr_stmt|;
name|ArtifactRepository
name|centralRepository
init|=
name|findCentralRepository
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|assembleRepositoryMetadata
argument_list|(
name|result
argument_list|,
name|artifactFilter
argument_list|,
name|centralRepository
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assembleRepositoryArtifacts
parameter_list|(
name|ArtifactResolutionResult
name|result
parameter_list|,
name|ArtifactFilter
name|filter
parameter_list|,
name|List
name|remoteRepositories
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|,
name|File
name|repositoryDirectory
parameter_list|)
throws|throws
name|RepositoryAssemblyException
block|{
try|try
block|{
comment|// Now that we have the graph, let's try to align it to versions
comment|// that we want and remove
comment|// the assembly we previously populated.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repositoryDirectory
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|mkdir
argument_list|(
name|repositoryDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|getArtifacts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|a
init|=
operator|(
name|Artifact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|a
argument_list|)
condition|)
block|{
comment|// We need to flip it back to not being resolved so we can
comment|// look for it again!
name|a
operator|.
name|setResolved
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|artifactResolver
operator|.
name|resolve
argument_list|(
name|a
argument_list|,
name|remoteRepositories
argument_list|,
name|localRepository
argument_list|)
expr_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|a
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|a
operator|.
name|getFile
argument_list|()
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|writeChecksums
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"pom"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|a
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|MavenProject
name|p
init|=
name|projectBuilder
operator|.
name|buildFromRepository
argument_list|(
name|a
argument_list|,
name|project
operator|.
name|getRemoteArtifactRepositories
argument_list|()
argument_list|,
name|localRepository
argument_list|)
decl_stmt|;
do|do
block|{
name|a
operator|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|p
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|p
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|p
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setAlignment
argument_list|(
name|a
argument_list|,
name|groupVersionAlignments
argument_list|)
expr_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|localRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|localRepository
operator|.
name|pathOf
argument_list|(
name|a
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
name|targetFile
operator|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|writeChecksums
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error resolving artifacts: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArtifactNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error resolving artifacts: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error writing artifact metdata."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|assembleRepositoryMetadata
parameter_list|(
name|ArtifactResolutionResult
name|result
parameter_list|,
name|ArtifactFilter
name|filter
parameter_list|,
name|ArtifactRepository
name|centralRepository
parameter_list|,
name|ArtifactRepository
name|targetRepository
parameter_list|)
throws|throws
name|RepositoryAssemblyException
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|getArtifacts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|a
init|=
operator|(
name|Artifact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|Versioning
name|v
init|=
operator|new
name|Versioning
argument_list|()
decl_stmt|;
name|v
operator|.
name|setRelease
argument_list|(
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setLatest
argument_list|(
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|addVersion
argument_list|(
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setLastUpdated
argument_list|(
name|getUtcDateFormatter
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|a
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|targetRepository
operator|.
name|pathOfLocalRepositoryMetadata
argument_list|(
name|metadata
argument_list|,
name|centralRepository
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|MetadataXpp3Writer
name|metadataWriter
init|=
operator|new
name|MetadataXpp3Writer
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
name|metadataWriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|metadata
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error writing artifact metdata."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeChecksums
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
name|File
name|metadataFileRemote
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|metadataFile
argument_list|,
name|metadataFileRemote
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|metadataFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|metadataFile
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|metadataFileRemote
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|metadataFileRemote
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|metadataFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|metadataFile
operator|.
name|getName
argument_list|()
operator|+
literal|".md5"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|metadataFileRemote
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|metadataFileRemote
operator|.
name|getName
argument_list|()
operator|+
literal|".md5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Error writing artifact metdata."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|writeChecksums
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryAssemblyException
block|{
try|try
block|{
name|String
name|md5
init|=
name|DigestUtils
operator|.
name|createChecksum
argument_list|(
name|file
argument_list|,
literal|"MD5"
argument_list|)
decl_stmt|;
name|String
name|sha1
init|=
name|DigestUtils
operator|.
name|createChecksum
argument_list|(
name|file
argument_list|,
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|fileWrite
argument_list|(
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".md5"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|md5
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|fileWrite
argument_list|(
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".sha1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|sha1
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAssemblyException
argument_list|(
literal|"Unable to get write checksums: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|DateFormat
name|getUtcDateFormatter
parameter_list|()
block|{
name|DateFormat
name|utcDateFormatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|UTC_TIMESTAMP_PATTERN
argument_list|)
decl_stmt|;
name|utcDateFormatter
operator|.
name|setTimeZone
argument_list|(
name|UTC_TIME_ZONE
argument_list|)
expr_stmt|;
return|return
name|utcDateFormatter
return|;
block|}
specifier|protected
name|ArtifactRepository
name|createLocalRepository
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|String
name|localRepositoryUrl
init|=
name|directory
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|localRepositoryUrl
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|localRepositoryUrl
operator|=
literal|"file://"
operator|+
name|localRepositoryUrl
expr_stmt|;
block|}
return|return
name|createRepository
argument_list|(
literal|"local"
argument_list|,
name|localRepositoryUrl
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|ArtifactRepositoryPolicy
operator|.
name|CHECKSUM_POLICY_WARN
argument_list|)
return|;
block|}
specifier|public
name|ArtifactRepository
name|createRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|repositoryUrl
parameter_list|,
name|boolean
name|offline
parameter_list|,
name|boolean
name|updateSnapshots
parameter_list|,
name|String
name|globalChecksumPolicy
parameter_list|)
block|{
name|ArtifactRepository
name|localRepository
init|=
operator|new
name|DefaultArtifactRepository
argument_list|(
name|repositoryId
argument_list|,
name|repositoryUrl
argument_list|,
name|repositoryLayout
argument_list|)
decl_stmt|;
name|boolean
name|snapshotPolicySet
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|offline
condition|)
block|{
name|snapshotPolicySet
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|snapshotPolicySet
operator|&&
name|updateSnapshots
condition|)
block|{
name|artifactRepositoryFactory
operator|.
name|setGlobalUpdatePolicy
argument_list|(
name|ArtifactRepositoryPolicy
operator|.
name|UPDATE_POLICY_ALWAYS
argument_list|)
expr_stmt|;
block|}
name|artifactRepositoryFactory
operator|.
name|setGlobalChecksumPolicy
argument_list|(
name|globalChecksumPolicy
argument_list|)
expr_stmt|;
return|return
name|localRepository
return|;
block|}
block|}
end_class

end_unit

