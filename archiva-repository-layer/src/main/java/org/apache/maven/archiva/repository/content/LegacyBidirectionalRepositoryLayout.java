begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * LegacyBidirectionalRepositoryLayout - the layout mechanism for use by Maven 1.x repositories.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.repository.content.BidirectionalRepositoryLayout"  *                   role-hint="legacy"  */
end_comment

begin_class
specifier|public
class|class
name|LegacyBidirectionalRepositoryLayout
implements|implements
name|BidirectionalRepositoryLayout
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
name|ArtifactExtensionMapping
name|extensionMapper
init|=
operator|new
name|LegacyArtifactExtensionMapping
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|typeToDirectoryMap
decl_stmt|;
specifier|public
name|LegacyBidirectionalRepositoryLayout
parameter_list|()
block|{
name|typeToDirectoryMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|typeToDirectoryMap
operator|.
name|put
argument_list|(
literal|"ejb-client"
argument_list|,
literal|"ejb"
argument_list|)
expr_stmt|;
name|typeToDirectoryMap
operator|.
name|put
argument_list|(
literal|"distribution-tgz"
argument_list|,
literal|"distribution"
argument_list|)
expr_stmt|;
name|typeToDirectoryMap
operator|.
name|put
argument_list|(
literal|"distribution-zip"
argument_list|,
literal|"distribution"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"legacy"
return|;
block|}
specifier|public
name|String
name|pathOf
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
block|{
name|StringBuffer
name|path
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|getDirectory
argument_list|(
name|artifact
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifact
operator|.
name|hasClassifier
argument_list|()
condition|)
block|{
name|path
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|extensionMapper
operator|.
name|getExtension
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getDirectory
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
block|{
comment|// Special Cases involving classifiers and type.
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
literal|"sources"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"javadoc.jars"
return|;
block|}
comment|// Special Cases involving only type.
name|String
name|dirname
init|=
operator|(
name|String
operator|)
name|typeToDirectoryMap
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirname
operator|!=
literal|null
condition|)
block|{
return|return
name|dirname
operator|+
literal|"s"
return|;
block|}
comment|// Default process.
return|return
name|artifact
operator|.
name|getType
argument_list|()
operator|+
literal|"s"
return|;
block|}
specifier|public
name|ArchivaArtifact
name|toArtifact
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

