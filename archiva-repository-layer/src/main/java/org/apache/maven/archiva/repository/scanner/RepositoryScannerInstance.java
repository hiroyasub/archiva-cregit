begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|consumers
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|BaseFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|DirectoryWalkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|SelectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * RepositoryScannerInstance   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryScannerInstance
implements|implements
name|DirectoryWalkListener
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryScannerInstance
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
name|consumers
decl_stmt|;
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
specifier|private
name|boolean
name|isCaseSensitive
init|=
literal|true
decl_stmt|;
specifier|private
name|ScanStatistics
name|stats
decl_stmt|;
specifier|private
name|long
name|onlyModifiedAfterTimestamp
init|=
literal|0
decl_stmt|;
specifier|public
name|RepositoryScannerInstance
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|List
name|consumerList
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|this
operator|.
name|consumers
operator|=
name|consumerList
expr_stmt|;
name|stats
operator|=
operator|new
name|ScanStatistics
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|this
operator|.
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Consumer
name|consumer
init|=
operator|(
name|Consumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|consumer
operator|.
name|init
argument_list|(
name|this
operator|.
name|repository
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Consumer ["
operator|+
name|consumer
operator|.
name|getName
argument_list|()
operator|+
literal|"] is reporting that it is incompatible with the ["
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"] repository."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
condition|)
block|{
name|isCaseSensitive
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|ScanStatistics
name|getStatistics
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
specifier|public
name|void
name|directoryWalkStarting
parameter_list|(
name|File
name|basedir
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Walk Started: ["
operator|+
name|this
operator|.
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
name|this
operator|.
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats
operator|.
name|timestampStarted
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|directoryWalkStep
parameter_list|(
name|int
name|percentage
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Walk Step: "
operator|+
name|percentage
operator|+
literal|", "
operator|+
name|file
argument_list|)
expr_stmt|;
comment|// Timestamp finished points to the last successful scan, not this current one.
if|if
condition|(
name|file
operator|.
name|lastModified
argument_list|()
operator|<
name|onlyModifiedAfterTimestamp
condition|)
block|{
comment|// Skip file as no change has occured.
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping, No Change: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|filesSkipped
operator|++
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|stats
operator|.
name|filesIncluded
operator|++
expr_stmt|;
name|BaseFile
name|basefile
init|=
operator|new
name|BaseFile
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|Iterator
name|itConsumers
init|=
name|this
operator|.
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itConsumers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Consumer
name|consumer
init|=
operator|(
name|Consumer
operator|)
name|itConsumers
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|wantsFile
argument_list|(
name|consumer
argument_list|,
name|StringUtils
operator|.
name|replace
argument_list|(
name|basefile
operator|.
name|getRelativePath
argument_list|()
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending to consumer: "
operator|+
name|consumer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|filesConsumed
operator|++
expr_stmt|;
name|consumer
operator|.
name|processFile
argument_list|(
name|basefile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* Intentionally Catch all exceptions.                          * So that the discoverer processing can continue.                          */
name|log
operator|.
name|error
argument_list|(
literal|"Consumer ["
operator|+
name|consumer
operator|.
name|getName
argument_list|()
operator|+
literal|"] had an error when processing file ["
operator|+
name|basefile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping consumer "
operator|+
name|consumer
operator|.
name|getName
argument_list|()
operator|+
literal|" for file "
operator|+
name|basefile
operator|.
name|getRelativePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|directoryWalkFinished
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Walk Finished: ["
operator|+
name|this
operator|.
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
name|this
operator|.
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|timestampFinished
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|wantsFile
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
name|Iterator
name|it
decl_stmt|;
comment|// Test excludes first.
name|it
operator|=
name|consumer
operator|.
name|getExcludePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SelectorUtils
operator|.
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|relativePath
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
comment|// Definately does NOT WANT FILE.
return|return
literal|false
return|;
block|}
block|}
comment|// Now test includes.
name|it
operator|=
name|consumer
operator|.
name|getIncludePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SelectorUtils
operator|.
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|relativePath
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
comment|// Specifically WANTS FILE.
return|return
literal|true
return|;
block|}
block|}
comment|// Not included, and Not excluded?  Default to EXCLUDE.
return|return
literal|false
return|;
block|}
specifier|public
name|long
name|getOnlyModifiedAfterTimestamp
parameter_list|()
block|{
return|return
name|onlyModifiedAfterTimestamp
return|;
block|}
specifier|public
name|void
name|setOnlyModifiedAfterTimestamp
parameter_list|(
name|long
name|onlyModifiedAfterTimestamp
parameter_list|)
block|{
name|this
operator|.
name|onlyModifiedAfterTimestamp
operator|=
name|onlyModifiedAfterTimestamp
expr_stmt|;
block|}
comment|/**      * Debug method from DirectoryWalker.      */
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Repository Scanner: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

