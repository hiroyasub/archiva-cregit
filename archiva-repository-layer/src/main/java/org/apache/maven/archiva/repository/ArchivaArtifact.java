begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifactModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * ArchivaArtifact - Mutable artifact object.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaArtifact
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_VERSION
init|=
literal|"SNAPSHOT"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|VERSION_FILE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*)-([0-9]{8}\\.[0-9]{6})-([0-9]+)$"
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaArtifactModel
name|model
decl_stmt|;
specifier|private
name|String
name|baseVersion
decl_stmt|;
specifier|private
name|boolean
name|snapshot
init|=
literal|false
decl_stmt|;
specifier|public
name|ArchivaArtifact
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create ArchivaArtifact with empty groupId."
argument_list|)
throw|;
block|}
if|if
condition|(
name|empty
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create ArchivaArtifact with empty artifactId."
argument_list|)
throw|;
block|}
if|if
condition|(
name|empty
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create ArchivaArtifact with empty version."
argument_list|)
throw|;
block|}
if|if
condition|(
name|empty
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create ArchivaArtifact with empty type."
argument_list|)
throw|;
block|}
name|model
operator|=
operator|new
name|ArchivaArtifactModel
argument_list|()
expr_stmt|;
name|model
operator|.
name|setContentKey
argument_list|(
operator|new
name|RepositoryContent
argument_list|(
name|repository
operator|.
name|getModel
argument_list|()
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setClassifier
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|classifier
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// Determine Snapshot Base Version.
name|Matcher
name|m
init|=
name|VERSION_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|this
operator|.
name|baseVersion
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"-"
operator|+
name|SNAPSHOT_VERSION
expr_stmt|;
name|snapshot
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|baseVersion
operator|=
name|version
expr_stmt|;
name|snapshot
operator|=
name|version
operator|.
name|endsWith
argument_list|(
name|SNAPSHOT_VERSION
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getGroupId
argument_list|()
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getArtifactId
argument_list|()
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getVersion
argument_list|()
return|;
block|}
specifier|public
name|String
name|getBaseVersion
parameter_list|()
block|{
return|return
name|baseVersion
return|;
block|}
specifier|public
name|boolean
name|isSnapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
specifier|public
name|String
name|getClassifier
parameter_list|()
block|{
return|return
name|model
operator|.
name|getClassifier
argument_list|()
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|model
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasClassifier
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|model
operator|.
name|getClassifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|appendArtifactTypeClassifierString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|appendArtifactTypeClassifierString
parameter_list|(
name|StringBuffer
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|model
operator|.
name|getContentKey
argument_list|()
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasClassifier
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|empty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|1
return|;
block|}
block|}
end_class

end_unit

