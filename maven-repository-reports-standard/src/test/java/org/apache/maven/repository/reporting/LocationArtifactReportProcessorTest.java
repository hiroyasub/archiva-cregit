begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|ArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|DefaultArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_comment
comment|/**  * This class tests the LocationArtifactReportProcessor.  */
end_comment

begin_class
specifier|public
class|class
name|LocationArtifactReportProcessorTest
extends|extends
name|AbstractRepositoryReportsTestCase
block|{
specifier|private
name|ArtifactReportProcessor
name|artifactReportProcessor
decl_stmt|;
specifier|private
name|ArtifactReporter
name|reporter
init|=
operator|new
name|MockArtifactReporter
argument_list|()
decl_stmt|;
specifier|private
name|MavenXpp3Reader
name|pomReader
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|artifactReportProcessor
operator|=
operator|(
name|ArtifactReportProcessor
operator|)
name|lookup
argument_list|(
name|ArtifactReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"artifact-location"
argument_list|)
expr_stmt|;
name|pomReader
operator|=
operator|new
name|MavenXpp3Reader
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|artifactReportProcessor
operator|=
literal|null
expr_stmt|;
name|pomReader
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Test the LocationArtifactReporter when the artifact's physical location matches the location specified      * both in the file system pom and in the pom included in the package.      */
specifier|public
name|void
name|testPackagedPomLocationArtifactReporterSuccess
parameter_list|()
throws|throws
name|ReportProcessorException
throws|,
name|IOException
throws|,
name|XmlPullParserException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"2.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"maven-model"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"org/apache/maven/maven-model/2.0/maven-model-2.0.pom"
decl_stmt|;
name|Model
name|model
init|=
name|readPom
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|model
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reporter
operator|.
name|getSuccesses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the LocationArtifactReporter when the artifact is in the location specified in the      * file system pom (but the jar file does not have a pom included in its package).      */
specifier|public
name|void
name|testLocationArtifactReporterSuccess
parameter_list|()
throws|throws
name|ReportProcessorException
throws|,
name|IOException
throws|,
name|XmlPullParserException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0-alpha-1"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"groupId"
argument_list|,
literal|"artifactId"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"groupId/artifactId/1.0-alpha-1/artifactId-1.0-alpha-1.pom"
decl_stmt|;
name|Model
name|model
init|=
name|readPom
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|model
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reporter
operator|.
name|getSuccesses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the LocationArtifactReporter when the artifact is not in the location specified      * in the file system pom.      */
specifier|public
name|void
name|testLocationArtifactReporterFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|XmlPullParserException
throws|,
name|ReportProcessorException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0-alpha-2"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"groupId"
argument_list|,
literal|"artifactId"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"groupId/artifactId/1.0-alpha-2/artifactId-1.0-alpha-2.pom"
decl_stmt|;
name|Model
name|model
init|=
name|readPom
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|model
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reporter
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the LocationArtifactReporter when the artifact's physical location does not match the      * location in the file system pom but instead matches the specified location in the packaged pom.      */
specifier|public
name|void
name|testFsPomArtifactMatchFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReportProcessorException
throws|,
name|XmlPullParserException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"2.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"maven-archiver"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"org/apache/maven/maven-archiver/2.0/maven-archiver-2.0.pom"
decl_stmt|;
name|Model
name|model
init|=
name|readPom
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|model
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reporter
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Model
name|readPom
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|XmlPullParserException
block|{
name|Reader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|pomReader
operator|.
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// hokey inheritence to avoid some errors right now
if|if
condition|(
name|model
operator|.
name|getGroupId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|model
operator|.
name|setGroupId
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|model
operator|.
name|setVersion
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|model
return|;
block|}
comment|/**      * Test the LocationArtifactReporter when the artifact's physical location does not match the      * location specified in the packaged pom but matches the location specified in the file system pom.      */
specifier|public
name|void
name|testPkgPomArtifactMatchFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|XmlPullParserException
throws|,
name|ReportProcessorException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"2.1"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"maven-monitor"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"org/apache/maven/maven-monitor/2.1/maven-monitor-2.1.pom"
decl_stmt|;
name|Model
name|model
init|=
name|readPom
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|model
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reporter
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the LocationArtifactReporter when the artifact's physical location does not match both the      * location specified in the packaged pom and the location specified in the file system pom.      */
specifier|public
name|void
name|testBothPomArtifactMatchFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|XmlPullParserException
throws|,
name|ReportProcessorException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"2.1"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"maven-project"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"org/apache/maven/maven-project/2.1/maven-project-2.1.pom"
decl_stmt|;
name|Model
name|model
init|=
name|readPom
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
name|model
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reporter
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the LocationArtifactReportProcessor when the artifact is located in the remote repository.      */
comment|/*  public void testRemoteArtifactReportProcessorFailure()     {          ArtifactHandler handler = new DefaultArtifactHandler( remoteArtifactType );         VersionRange version = VersionRange.createFromVersion( remoteArtifactVersion );         Artifact artifact = new DefaultArtifact( remoteArtifactGroup, remoteArtifactId, version, remoteArtifactScope,                                                  remoteArtifactType, "", handler );         ArtifactRepository repository = new DefaultArtifactRepository( remoteRepoId, remoteRepoUrl,                                                                        new DefaultRepositoryLayout() );         try         {             URL url = new URL( remoteRepoUrl + remoteArtifactGroup + "/" + remoteArtifactId + "/"                 + remoteArtifactVersion + "/" + remoteArtifactId + "-" + remoteArtifactVersion + ".pom" );             InputStream is = url.openStream();             Reader reader = new InputStreamReader( is );             Model model = pomReader.read( reader );              artifactReportProcessor.processArtifact( model, artifact, reporter, repository );             if ( reporter.getFailures()> 0 )                 assertTrue( reporter.getFailures() == 1 );              if ( reporter.getSuccesses()> 0 )                 assertTrue( reporter.getSuccesses() == 1 );              //    System.out.println("REMOTE ARTIFACT MATCH SUCCESSES ---> " + reporter.getSuccesses());          }         catch ( Exception e )         {             e.printStackTrace();         }     }     */
block|}
end_class

end_unit

