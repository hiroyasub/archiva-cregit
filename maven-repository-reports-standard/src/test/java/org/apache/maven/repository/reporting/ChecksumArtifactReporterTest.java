begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*   * Copyright 2001-2005 The Apache Software Foundation.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *      http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|ArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|DefaultArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|DefaultArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_comment
comment|/**  * @TODO   *  - Test with multiple success and multiple failures  *  - Test using remote repository  *   * This class tests the ChecksumArtifactReporter.   * It extends the AbstractChecksumArtifactReporterTest class.  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumArtifactReporterTest
extends|extends
name|AbstractChecksumArtifactReporterTest
block|{
specifier|private
name|ArtifactReportProcessor
name|artifactReportProcessor
decl_stmt|;
specifier|private
name|ArtifactReporter
name|reporter
init|=
operator|new
name|MockArtifactReporter
argument_list|()
decl_stmt|;
specifier|private
name|MetadataReportProcessor
name|metadataReportProcessor
decl_stmt|;
specifier|public
name|ChecksumArtifactReporterTest
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|artifactReportProcessor
operator|=
operator|(
name|ArtifactReportProcessor
operator|)
name|lookup
argument_list|(
name|ArtifactReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|metadataReportProcessor
operator|=
operator|(
name|MetadataReportProcessor
operator|)
name|lookup
argument_list|(
name|MetadataReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"checksum-metadata"
argument_list|)
expr_stmt|;
comment|// boolean b = createChecksumFile( "VALID" );
comment|// b = createChecksumFile( "INVALID" );
comment|// b = createMetadataFile( "VALID" );
comment|// b = createMetadataFile( "INVALID" );
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|//String[] split = super.repository.getUrl().split("file:/");
comment|//boolean b = deleteTestDirectory(new File(split[1] + "checksumTest") );
block|}
comment|/**      * Test creation of artifact with checksum files.      *      */
specifier|public
name|void
name|testCreateChecksumFile
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|createChecksumFile
argument_list|(
literal|"VALID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createChecksumFile
argument_list|(
literal|"INVALID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateMetadataFile
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|createMetadataFile
argument_list|(
literal|"VALID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createMetadataFile
argument_list|(
literal|"INVALID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the ChecksumArtifactReporter when the checksum files are valid.      */
specifier|public
name|void
name|testChecksumArtifactReporterSuccess
parameter_list|()
block|{
try|try
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
operator|new
name|DefaultArtifactRepository
argument_list|(
literal|"repository"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|+
literal|"/src/test/repository/"
argument_list|,
operator|new
name|DefaultRepositoryLayout
argument_list|()
argument_list|)
decl_stmt|;
comment|/*  VersionRange version = VersionRange.createFromVersion("0.3-3");              Artifact artifact = new DefaultArtifact("HTTPClient", "HTTPClient", version, "compile", "jar", "",               handler);              ArtifactRepository repository = new DefaultArtifactRepository("remote-repo", "http://www.ibiblio.org/maven2/",               new DefaultRepositoryLayout());              */
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
literal|null
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getArtifactSuccessIterator
argument_list|()
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArtifactResult
name|result
init|=
operator|(
name|ArtifactResult
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ctr
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARTIFACT Number of success --- "
operator|+
name|ctr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test the ChecksumArtifactReporter when the checksum files are invalid.      */
specifier|public
name|void
name|testChecksumArtifactReporterFailed
parameter_list|()
block|{
try|try
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"invalidArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
operator|new
name|DefaultArtifactRepository
argument_list|(
literal|"repository"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|+
literal|"/src/test/repository/"
argument_list|,
operator|new
name|DefaultRepositoryLayout
argument_list|()
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
literal|null
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getArtifactFailureIterator
argument_list|()
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArtifactResult
name|result
init|=
operator|(
name|ArtifactResult
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ctr
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARTIFACT Number of failures --- "
operator|+
name|ctr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testChecksumMetadataReporterSuccess
parameter_list|()
block|{
try|try
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
operator|new
name|DefaultArtifactRepository
argument_list|(
literal|"repository"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|+
literal|"/src/test/repository/"
argument_list|,
operator|new
name|DefaultRepositoryLayout
argument_list|()
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getRepositoryMetadataSuccessIterator
argument_list|()
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryMetadataResult
name|result
init|=
operator|(
name|RepositoryMetadataResult
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ctr
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REPORT METADATA Number of success --- "
operator|+
name|ctr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testChecksumMetadataReporterFailure
parameter_list|()
block|{
try|try
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
operator|new
name|DefaultArtifactRepository
argument_list|(
literal|"repository"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|+
literal|"/src/test/repository/"
argument_list|,
operator|new
name|DefaultRepositoryLayout
argument_list|()
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"invalidArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getRepositoryMetadataFailureIterator
argument_list|()
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryMetadataResult
name|result
init|=
operator|(
name|RepositoryMetadataResult
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ctr
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REPORT METADATA Number of failures --- "
operator|+
name|ctr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDeleteTestDirectory
parameter_list|()
block|{
name|String
index|[]
name|split
init|=
name|super
operator|.
name|repository
operator|.
name|getUrl
argument_list|()
operator|.
name|split
argument_list|(
literal|"file:/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deleteTestDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|split
index|[
literal|1
index|]
operator|+
literal|"checksumTest"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

