begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*   * Copyright 2001-2005 The Apache Software Foundation.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *      http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_comment
comment|/**  * @TODO  *  - Create more valid and invalid artifacts& metadata files for further testing.  *  * This class creates the artifact and metadata files used for testing the ChecksumArtifactReporter.  * It is extended by ChecksumArtifactReporterTest class.  */
end_comment

begin_class
specifier|public
class|class
name|AbstractChecksumArtifactReporterTest
extends|extends
name|AbstractRepositoryReportsTestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|validArtifactChecksumJars
init|=
block|{
literal|"validArtifact-1.0"
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|invalidArtifactChecksumJars
init|=
block|{
literal|"invalidArtifact-1.0"
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|metadataChecksumFilename
init|=
literal|"maven-metadata"
decl_stmt|;
specifier|public
name|AbstractChecksumArtifactReporterTest
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create checksum files.      * @param type The type of checksum file to be created.      * @return      */
specifier|protected
name|boolean
name|createChecksumFile
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|boolean
name|written
init|=
literal|true
decl_stmt|;
comment|//loop through the valid artifact names..
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"VALID"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|validArtifactChecksumJars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|written
operator|=
name|writeChecksumFile
argument_list|(
literal|"checksumTest/"
argument_list|,
name|validArtifactChecksumJars
index|[
name|i
index|]
argument_list|,
literal|"jar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|written
operator|==
literal|false
condition|)
block|{
name|i
operator|=
name|validArtifactChecksumJars
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"INVALID"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|invalidArtifactChecksumJars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|written
operator|=
name|writeChecksumFile
argument_list|(
literal|"checksumTest/"
argument_list|,
name|invalidArtifactChecksumJars
index|[
name|i
index|]
argument_list|,
literal|"jar"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|written
operator|==
literal|false
condition|)
block|{
name|i
operator|=
name|invalidArtifactChecksumJars
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
return|return
name|written
return|;
block|}
comment|/**      * Create checksum files for metadata.      * @param type The type of checksum to be created. (Valid or invalid)      * @return      */
specifier|protected
name|boolean
name|createMetadataFile
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|boolean
name|written
init|=
literal|true
decl_stmt|;
comment|//loop through the valid artifact names..
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"VALID"
argument_list|)
condition|)
block|{
name|writeMetadataFile
argument_list|(
literal|"checksumTest/validArtifact/1.0/"
argument_list|,
name|metadataChecksumFilename
argument_list|,
literal|"xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"INVALID"
argument_list|)
condition|)
block|{
name|writeMetadataFile
argument_list|(
literal|"checksumTest/invalidArtifact/1.0/"
argument_list|,
name|metadataChecksumFilename
argument_list|,
literal|"xml"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|written
return|;
block|}
comment|/**      * Create artifact together with its checksums.      * @param relativePath The groupId      * @param filename The filename of the artifact to be created.      * @param type The file type (JAR)      * @param isValid Indicates whether the checksum to be created is valid or not.      * @return      */
specifier|private
name|boolean
name|writeChecksumFile
parameter_list|(
name|String
name|relativePath
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|isValid
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"========================= ARTIFACT CHECKSUM =================================="
argument_list|)
expr_stmt|;
comment|//Initialize variables for creating jar files
name|FileOutputStream
name|f
init|=
literal|null
decl_stmt|;
name|JarOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|String
name|repoUrl
init|=
name|super
operator|.
name|repository
operator|.
name|getBasedir
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|dirs
init|=
name|filename
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
comment|//String[] split1 = repoUrl.split( "file:/" );
comment|//split1[1] = split1[1] + "/";
comment|//create the group level directory of the artifact
name|File
name|dirFiles
init|=
operator|new
name|File
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirFiles
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
comment|// create a jar file
name|f
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
comment|// jar sample.txt
name|String
name|filename1
init|=
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
operator|+
literal|"/sample.txt"
decl_stmt|;
name|boolean
name|bool
init|=
name|createSampleFile
argument_list|(
name|filename1
argument_list|)
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename1
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
name|filename1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Create md5 and sha-1 checksum files..
name|byte
index|[]
name|md5chk
init|=
name|createChecksum
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
argument_list|,
literal|"MD5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sha1chk
init|=
name|createChecksum
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
argument_list|,
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- CREATED MD5 checksum ::: "
operator|+
name|byteArrayToHexStr
argument_list|(
name|md5chk
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- CREATED SHA-1 checksum ::: "
operator|+
name|byteArrayToHexStr
argument_list|(
name|sha1chk
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|md5chk
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
operator|+
literal|".md5"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isValid
condition|)
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|md5chk
argument_list|)
operator|+
literal|"1"
argument_list|)
expr_stmt|;
else|else
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|md5chk
argument_list|)
argument_list|)
expr_stmt|;
name|osw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sha1chk
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|dirs
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
operator|+
literal|".sha1"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isValid
condition|)
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|sha1chk
argument_list|)
operator|+
literal|"2"
argument_list|)
expr_stmt|;
else|else
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|sha1chk
argument_list|)
argument_list|)
expr_stmt|;
name|osw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Create metadata file together with its checksums.      * @param relativePath The groupId      * @param filename The filename of the artifact to be created.      * @param type The file type (JAR)      * @param isValid Indicates whether the checksum to be created is valid or not.      * @return      */
specifier|private
name|boolean
name|writeMetadataFile
parameter_list|(
name|String
name|relativePath
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|isValid
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"========================= METADATA CHECKSUM =================================="
argument_list|)
expr_stmt|;
try|try
block|{
comment|//create checksum for the metadata file..
name|String
name|repoUrl
init|=
name|repository
operator|.
name|getBasedir
argument_list|()
decl_stmt|;
comment|//System.out.println("repoUrl ---->>> " + repoUrl);
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REPO URL :::: "
operator|+
name|repoUrl
argument_list|)
expr_stmt|;
comment|// String[] split1 = repoUrl.split( "file:/" );
comment|// split1[1] = split1[1] + "/";
name|String
name|url
init|=
name|repository
operator|.
name|getBasedir
argument_list|()
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
decl_stmt|;
name|boolean
name|copied
init|=
name|copyFile
argument_list|(
name|url
argument_list|,
name|repoUrl
operator|+
name|relativePath
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
argument_list|)
decl_stmt|;
comment|//FileUtils.copyFile( new File( url ), new File( repoUrl + relativePath + filename + "." + type ) );
comment|//System.out.println( "META FILE COPIED ---->>> " + copied );
comment|//Create md5 and sha-1 checksum files..
name|byte
index|[]
name|md5chk
init|=
name|createChecksum
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
argument_list|,
literal|"MD5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sha1chk
init|=
name|createChecksum
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
argument_list|,
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- CREATED MD5 checksum ::: "
operator|+
name|byteArrayToHexStr
argument_list|(
name|md5chk
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- CREATED SHA-1 checksum ::: "
operator|+
name|byteArrayToHexStr
argument_list|(
name|sha1chk
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|md5chk
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
operator|+
literal|".md5"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isValid
condition|)
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|md5chk
argument_list|)
operator|+
literal|"1"
argument_list|)
expr_stmt|;
else|else
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|md5chk
argument_list|)
argument_list|)
expr_stmt|;
name|osw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sha1chk
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|repoUrl
operator|+
name|relativePath
operator|+
name|filename
operator|+
literal|"."
operator|+
name|type
operator|+
literal|".sha1"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isValid
condition|)
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|sha1chk
argument_list|)
operator|+
literal|"2"
argument_list|)
expr_stmt|;
else|else
name|osw
operator|.
name|write
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|sha1chk
argument_list|)
argument_list|)
expr_stmt|;
name|osw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Create the sample file that will be included in the jar.      * @param filename      * @return      */
specifier|private
name|boolean
name|createSampleFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|osw
operator|.
name|write
argument_list|(
literal|"This is the content of the sample file that will be included in the jar file."
argument_list|)
expr_stmt|;
name|osw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Create a checksum from the specified metadata file.      *       * @param metadataUrl      * @return      * @throws FileNotFoundException      * @throws NoSuchAlgorithmException      * @throws IOException      */
specifier|private
name|byte
index|[]
name|createChecksum
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|algo
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|InputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|MessageDigest
name|complete
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|int
name|numRead
decl_stmt|;
do|do
block|{
name|numRead
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|complete
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|numRead
operator|!=
operator|-
literal|1
condition|)
do|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|complete
operator|.
name|digest
argument_list|()
return|;
block|}
comment|/**      * Convert an incoming array of bytes into a string that represents each of      * the bytes as two hex characters.      * @param data      * @return      */
specifier|private
name|String
name|byteArrayToHexStr
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|String
name|output
init|=
literal|""
decl_stmt|;
name|String
name|tempStr
init|=
literal|""
decl_stmt|;
name|int
name|tempInt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|cnt
init|=
literal|0
init|;
name|cnt
operator|<
name|data
operator|.
name|length
condition|;
name|cnt
operator|++
control|)
block|{
name|tempInt
operator|=
name|data
index|[
name|cnt
index|]
operator|&
literal|0xFF
expr_stmt|;
name|tempStr
operator|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|tempInt
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempStr
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|tempStr
operator|=
literal|"0"
operator|+
name|tempStr
expr_stmt|;
name|output
operator|=
name|output
operator|+
name|tempStr
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
comment|/**      * Copy created metadata file to the repository.      * @param srcUrl      * @param destUrl      * @return      */
specifier|private
name|boolean
name|copyFile
parameter_list|(
name|String
name|srcUrl
parameter_list|,
name|String
name|destUrl
parameter_list|)
block|{
try|try
block|{
comment|//source file
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|srcUrl
argument_list|)
decl_stmt|;
comment|//destination file
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|destUrl
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Delete the test directory created in the repository.      * @param dirname The directory to be deleted.      * @return      */
specifier|protected
name|boolean
name|deleteTestDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|==
literal|true
condition|)
block|{
if|if
condition|(
name|dir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|=
name|this
operator|.
name|deleteTestDirectory
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|//check if this is the last file in the directory
comment|//delete the parent file
if|if
condition|(
operator|(
name|i
operator|==
operator|(
name|files
operator|.
name|length
operator|-
literal|1
operator|)
operator|)
operator|&&
name|b
operator|==
literal|true
condition|)
block|{
name|String
index|[]
name|split
init|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|split
argument_list|(
literal|"/repository"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
index|[
name|i
index|]
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|split
index|[
literal|0
index|]
operator|+
literal|"/repository"
argument_list|)
condition|)
block|{
name|b
operator|=
name|this
operator|.
name|deleteTestDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|b
operator|=
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|b
operator|=
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

