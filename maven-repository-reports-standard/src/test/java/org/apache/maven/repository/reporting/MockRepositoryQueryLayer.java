begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|MockRepositoryQueryLayer
implements|implements
name|RepositoryQueryLayer
block|{
specifier|private
name|List
name|queryConditions
decl_stmt|;
specifier|private
name|Iterator
name|iterator
decl_stmt|;
specifier|public
name|MockRepositoryQueryLayer
parameter_list|()
block|{
name|queryConditions
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|iterator
operator|==
literal|null
operator|||
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
comment|// not initialized or reached end of the list. start again
block|{
name|iterator
operator|=
name|queryConditions
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|queryConditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|boolean
name|temp
init|=
operator|(
operator|(
name|Boolean
operator|)
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
return|return
name|temp
return|;
block|}
block|}
specifier|public
name|void
name|addReturnValue
parameter_list|(
name|boolean
name|queryCondition
parameter_list|)
block|{
name|queryConditions
operator|.
name|add
argument_list|(
operator|new
name|Boolean
argument_list|(
name|queryCondition
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearList
parameter_list|()
block|{
name|queryConditions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
comment|// TODO
return|return
name|containsArtifact
argument_list|(
name|artifact
argument_list|)
return|;
block|}
block|}
end_class

end_unit

