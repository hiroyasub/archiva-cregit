begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0   *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:jtolentino@mergere.com">John Tolentino</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRepositoryReportsTestCase
extends|extends
name|PlexusTestCase
block|{
specifier|private
specifier|static
name|String
name|JAR
init|=
literal|".jar"
decl_stmt|;
specifier|private
specifier|static
name|String
name|basedir
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|directoryStructure
decl_stmt|;
specifier|public
name|AbstractRepositoryReportsTestCase
parameter_list|(
name|String
name|basedir
parameter_list|,
name|String
index|[]
name|directoryStructure
parameter_list|)
block|{
name|this
operator|.
name|basedir
operator|=
name|basedir
expr_stmt|;
name|this
operator|.
name|directoryStructure
operator|=
name|directoryStructure
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|buildTestRepoPath
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|buildTestRepoPath
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|directoryStructure
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
name|directoryStructure
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|deleteTestRepoPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|writeTestArtifact
parameter_list|(
name|String
name|relativePath
parameter_list|,
name|String
name|artifactId
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|artifact
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
name|relativePath
operator|+
name|artifactId
operator|+
name|JAR
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|basedir
operator|+
name|relativePath
operator|+
name|artifactId
argument_list|)
expr_stmt|;
return|return
name|artifact
operator|.
name|createNewFile
argument_list|()
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestRepoPath
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

