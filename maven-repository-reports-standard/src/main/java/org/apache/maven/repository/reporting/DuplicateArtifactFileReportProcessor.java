begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndexSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndexSearchLayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|RepositoryIndexingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|indexing
operator|.
name|query
operator|.
name|SinglePhraseQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Validates an artifact file for duplicates within the same groupId based from what's available in a RepositoryIndex  *  * @author Edwin Punzalan  * @plexus.component role="org.apache.maven.repository.reporting.ArtifactReportProcessor" role-hint="duplicate"  */
end_comment

begin_class
specifier|public
class|class
name|DuplicateArtifactFileReportProcessor
implements|implements
name|ArtifactReportProcessor
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|Digester
name|digester
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryIndexingFactory
name|indexFactory
decl_stmt|;
comment|//@todo configurable?
specifier|private
name|String
name|algorithm
init|=
name|RepositoryIndex
operator|.
name|FLD_MD5
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryIndexSearchLayer
name|searchLayer
decl_stmt|;
specifier|public
name|void
name|processArtifact
parameter_list|(
name|Model
name|model
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactReporter
name|reporter
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|ReportProcessorException
block|{
if|if
condition|(
name|artifact
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//@todo remove hard-coded value; current value enables tests to pass
name|String
name|indexPath
init|=
operator|new
name|File
argument_list|(
literal|"target/.index"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|RepositoryIndex
name|index
decl_stmt|;
try|try
block|{
name|index
operator|=
name|indexFactory
operator|.
name|createArtifactRepositoryIndex
argument_list|(
name|indexPath
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReportProcessorException
argument_list|(
literal|"Unable to create RepositoryIndex instance"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|checksum
decl_stmt|;
try|try
block|{
name|checksum
operator|=
name|digester
operator|.
name|createChecksum
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReportProcessorException
argument_list|(
literal|"Failed to generate checksum"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReportProcessorException
argument_list|(
literal|"Failed to generate checksum"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Query
name|query
init|=
operator|new
name|SinglePhraseQuery
argument_list|(
name|algorithm
argument_list|,
name|checksum
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|results
init|=
name|searchLayer
operator|.
name|searchAdvanced
argument_list|(
name|query
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|id
init|=
name|artifact
operator|.
name|getId
argument_list|()
decl_stmt|;
name|boolean
name|hasDuplicates
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|hits
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|hits
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SearchResult
name|result
init|=
operator|(
name|SearchResult
operator|)
name|hits
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
name|artifactMatch
init|=
name|result
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
comment|//make sure it is not the same artifact
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|artifactMatch
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|//report only duplicates from the same groupId
name|String
name|groupId
init|=
name|artifact
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupId
operator|.
name|equals
argument_list|(
name|artifactMatch
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
name|hasDuplicates
operator|=
literal|true
expr_stmt|;
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"Found duplicate for "
operator|+
name|artifactMatch
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasDuplicates
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryIndexSearchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReportProcessorException
argument_list|(
literal|"Failed to search in index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|reporter
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
literal|"Artifact file is null"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

