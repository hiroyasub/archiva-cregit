begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_comment
comment|/**  * Validate the location of the artifact based on the values indicated  * in its pom (both the pom packaged with the artifact& the pom in the  * file system).  */
end_comment

begin_class
specifier|public
class|class
name|LocationArtifactReportProcessor
implements|implements
name|ArtifactReportProcessor
block|{
specifier|private
name|boolean
name|isLocal
init|=
literal|true
decl_stmt|;
specifier|private
name|InputStream
name|is
decl_stmt|;
comment|/**      * Check whether the artifact is in its proper location. The location of the artifact      * is validated first against the groupId, artifactId and versionId in the specified model      * object (pom in the file system). Then unpack the artifact (jar file) and get the model (pom)      * included in the package. If a model exists inside the package, then check if the artifact's      * location is valid based on the location specified in the pom. Check if the both the location      * specified in the file system pom and in the pom included in the package is the same.      *      * @param model      Represents the pom in the file system.      * @param artifact      * @param reporter      * @param repository      */
specifier|public
name|void
name|processArtifact
parameter_list|(
name|Model
name|model
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactReporter
name|reporter
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|ReportProcessorException
block|{
name|boolean
name|fsPomLocation
init|=
literal|false
decl_stmt|,
name|pkgPomLocation
init|=
literal|false
decl_stmt|;
name|String
name|repositoryUrl
init|=
literal|""
decl_stmt|,
name|modelArtifactLocation
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|isLocal
operator|=
literal|false
expr_stmt|;
name|repositoryUrl
operator|=
name|repository
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|repositoryUrl
operator|=
name|repository
operator|.
name|getBasedir
argument_list|()
expr_stmt|;
block|}
comment|//check if the artifact is located in its proper location based on the info
comment|//specified in the model object/pom
name|modelArtifactLocation
operator|=
name|repositoryUrl
operator|+
name|model
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|model
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|model
operator|.
name|getVersion
argument_list|()
operator|+
literal|"/"
operator|+
name|model
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|model
operator|.
name|getVersion
argument_list|()
operator|+
literal|"."
operator|+
name|model
operator|.
name|getPackaging
argument_list|()
expr_stmt|;
name|fsPomLocation
operator|=
name|validateArtifactLocation
argument_list|(
name|modelArtifactLocation
argument_list|)
expr_stmt|;
comment|//get the location of the artifact itself
name|String
name|artifactLocation
init|=
name|repositoryUrl
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getVersion
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|artifact
operator|.
name|getVersion
argument_list|()
operator|+
literal|"."
operator|+
name|artifact
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|//unpack the artifact (using the groupId, artifactId& version specified in the artifact object itself
comment|//check if the pom is included in the package
name|Model
name|extractedModel
init|=
name|readArtifactModel
argument_list|(
name|artifactLocation
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractedModel
operator|!=
literal|null
condition|)
block|{
name|String
name|pkgPomArtifactLocation
init|=
name|repositoryUrl
operator|+
name|extractedModel
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|extractedModel
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|extractedModel
operator|.
name|getVersion
argument_list|()
operator|+
literal|"/"
operator|+
name|extractedModel
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|extractedModel
operator|.
name|getVersion
argument_list|()
operator|+
literal|"."
operator|+
name|extractedModel
operator|.
name|getPackaging
argument_list|()
decl_stmt|;
name|pkgPomLocation
operator|=
name|validateArtifactLocation
argument_list|(
name|pkgPomArtifactLocation
argument_list|)
expr_stmt|;
comment|//check the conditions
if|if
condition|(
name|fsPomLocation
operator|==
literal|true
operator|&&
name|pkgPomLocation
operator|==
literal|true
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fsPomLocation
operator|==
literal|false
operator|&&
name|pkgPomLocation
operator|==
literal|true
condition|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"The artifact is out of place. It does not match the specified location in the file system pom."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fsPomLocation
operator|==
literal|true
operator|&&
name|pkgPomLocation
operator|==
literal|false
condition|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"The artifact is out of place. It does not match the specified location in the packaged pom."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fsPomLocation
operator|==
literal|false
operator|&&
name|pkgPomLocation
operator|==
literal|false
condition|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"The artifact is out of place."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fsPomLocation
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"The artifact is out of place."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Validate the if the artifact exists in the specified location.      *      * @param filename      */
specifier|private
name|boolean
name|validateArtifactLocation
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isLocal
condition|)
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|is
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Extract the contents of the artifact/jar file.      *      * @param filename      * @param groupId      * @param artifactId      */
specifier|private
name|Model
name|readArtifactModel
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
throws|throws
name|ReportProcessorException
block|{
name|Model
name|modelObj
init|=
literal|null
decl_stmt|;
name|JarFile
name|jar
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jar
operator|=
operator|new
name|JarFile
argument_list|(
name|filename
argument_list|)
expr_stmt|;
comment|//Get the entry and its input stream.
name|JarEntry
name|entry
init|=
name|jar
operator|.
name|getJarEntry
argument_list|(
literal|"META-INF/maven/"
operator|+
name|groupId
operator|+
literal|"/"
operator|+
name|artifactId
operator|+
literal|"/pom.xml"
argument_list|)
decl_stmt|;
comment|// If the entry is not null, extract it.
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|entryStream
init|=
name|jar
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|Reader
name|isReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|entryStream
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenXpp3Reader
name|pomReader
init|=
operator|new
name|MavenXpp3Reader
argument_list|()
decl_stmt|;
name|modelObj
operator|=
name|pomReader
operator|.
name|read
argument_list|(
name|isReader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|isReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: should just warn and continue?
throw|throw
operator|new
name|ReportProcessorException
argument_list|(
literal|"Unable to read artifact to extract model"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
comment|// TODO: should just warn and continue?
throw|throw
operator|new
name|ReportProcessorException
argument_list|(
literal|"Unable to read artifact to extract model"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|jar
operator|!=
literal|null
condition|)
block|{
comment|//noinspection UnusedCatchParameter
try|try
block|{
name|jar
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|modelObj
return|;
block|}
block|}
end_class

end_unit

