begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Class to implement caching.  */
end_comment

begin_class
specifier|public
class|class
name|Cache
block|{
specifier|private
specifier|final
name|Map
name|cache
decl_stmt|;
specifier|private
specifier|final
name|double
name|cacheHitRatio
decl_stmt|;
specifier|private
specifier|final
name|int
name|cacheMaxSize
decl_stmt|;
specifier|private
name|long
name|cacheHits
decl_stmt|;
specifier|private
name|long
name|cacheMiss
decl_stmt|;
comment|/**      * Caches all data and expires only the oldest data when the specified cache hit rate is reached.      */
specifier|public
name|Cache
parameter_list|(
name|double
name|cacheHitRatio
parameter_list|)
block|{
name|this
argument_list|(
name|cacheHitRatio
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Caches all data and expires only the oldest data when the maximum cache size is reached      */
specifier|public
name|Cache
parameter_list|(
name|int
name|cacheMaxSize
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
name|cacheMaxSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Caches all data and expires only the oldest data when either the specified cache hit rate is reached      * or the maximum cache size is reached.      */
specifier|public
name|Cache
parameter_list|(
name|double
name|cacheHitRatio
parameter_list|,
name|int
name|cacheMaxSize
parameter_list|)
block|{
name|this
operator|.
name|cacheHitRatio
operator|=
name|cacheHitRatio
expr_stmt|;
name|this
operator|.
name|cacheMaxSize
operator|=
name|cacheMaxSize
expr_stmt|;
if|if
condition|(
name|cacheMaxSize
operator|>
literal|0
condition|)
block|{
name|cache
operator|=
operator|new
name|LinkedHashMap
argument_list|(
name|cacheMaxSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|=
operator|new
name|LinkedHashMap
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Check if the specified key is already mapped to an object.      *      * @param key the key used to map the cached object      * @return true if the cache contains an object associated with the given key      */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|boolean
name|contains
decl_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|contains
operator|=
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|contains
condition|)
block|{
name|cacheHits
operator|++
expr_stmt|;
block|}
else|else
block|{
name|cacheMiss
operator|++
expr_stmt|;
block|}
block|}
return|return
name|contains
return|;
block|}
comment|/**      * Check for a cached object and return it if it exists. Returns null when the keyed object is not found      *      * @param key the key used to map the cached object      * @return the object mapped to the given key, or null if no cache object is mapped to the given key      */
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Object
name|retValue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// remove and put: this promotes it to the top since we use a linked hash map
name|retValue
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|retValue
argument_list|)
expr_stmt|;
name|cacheHits
operator|++
expr_stmt|;
block|}
else|else
block|{
name|cacheMiss
operator|++
expr_stmt|;
block|}
block|}
return|return
name|retValue
return|;
block|}
comment|/**      * Cache the given value and map it using the given key      *      * @param key   the object to map the valued object      * @param value the object to cache      */
specifier|public
name|void
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Object
name|old
init|=
literal|null
decl_stmt|;
comment|// remove and put: this promotes it to the top since we use a linked hash map
synchronized|synchronized
init|(
name|cache
init|)
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|old
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|manageCache
argument_list|()
expr_stmt|;
block|}
comment|/**      * Compute for the efficiency of this cache.      *      * @return the ratio of cache hits to the cache misses to queries for cache objects      */
specifier|public
name|double
name|getHitRate
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
return|return
name|cacheHits
operator|==
literal|0
operator|&&
name|cacheMiss
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|double
operator|)
name|cacheHits
operator|/
operator|(
name|double
operator|)
operator|(
name|cacheHits
operator|+
name|cacheMiss
operator|)
return|;
block|}
block|}
comment|/**      * Get the total number of cache objects currently cached.      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cache
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Empty the cache and reset the cache hit rate      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|cacheHits
operator|=
literal|0
expr_stmt|;
name|cacheMiss
operator|=
literal|0
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|manageCache
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|Iterator
name|iterator
init|=
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheMaxSize
operator|==
literal|0
condition|)
block|{
comment|//desired HitRatio is reached, we can trim the cache to conserve memory
if|if
condition|(
name|cacheHitRatio
operator|<=
name|getHitRate
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
name|cacheMaxSize
condition|)
block|{
comment|// maximum cache size is reached
while|while
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
name|cacheMaxSize
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//even though the max has not been reached, the desired HitRatio is already reached,
comment|//    so we can trim the cache to conserve memory
if|if
condition|(
name|cacheHitRatio
operator|<=
name|getHitRate
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

