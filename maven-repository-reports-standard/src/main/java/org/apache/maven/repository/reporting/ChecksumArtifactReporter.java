begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*   * Copyright 2001-2005 The Apache Software Foundation.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *      http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class reports invalid and mismatched checksums of artifacts and metadata files.   * It validates MD5 and SHA-1 chacksums.  *   * @TODO   *  - Validate using remote repository.  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumArtifactReporter
implements|implements
name|ArtifactReportProcessor
implements|,
name|MetadataReportProcessor
block|{
name|String
name|ROLE
init|=
name|ChecksumArtifactReporter
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|protected
name|InputStream
name|md5InputStream
decl_stmt|;
specifier|protected
name|InputStream
name|sha1InputStream
decl_stmt|;
comment|/**      * Validate the checksum of the specified artifact.      * @param model      * @param artifact      * @param reporter      * @param repository      */
specifier|public
name|void
name|processArtifact
parameter_list|(
name|Model
name|model
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactReporter
name|reporter
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"===================================== +++++  PROCESS ARTIFACT +++++ ===================================="
argument_list|)
expr_stmt|;
name|String
name|artifactUrl
init|=
literal|""
decl_stmt|;
name|String
name|repositoryUrl
init|=
name|repository
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|artifactUrl
operator|=
name|repositoryUrl
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"."
operator|+
name|artifact
operator|.
name|getType
argument_list|()
expr_stmt|;
comment|//System.out.println("ARTIFACT URL ------->>>> " + artifactUrl);
comment|//check if checksum files exist
name|boolean
name|md5Exists
init|=
name|getMD5File
argument_list|(
name|artifactUrl
argument_list|)
decl_stmt|;
name|boolean
name|sha1Exists
init|=
name|getSHA1File
argument_list|(
name|artifactUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|md5Exists
condition|)
block|{
if|if
condition|(
name|validateChecksum
argument_list|(
name|artifactUrl
argument_list|,
literal|"MD5"
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"MD5 checksum does not match."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sha1Exists
condition|)
block|{
if|if
condition|(
name|validateChecksum
argument_list|(
name|artifactUrl
argument_list|,
literal|"SHA-1"
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"SHA-1 checksum does not match."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Validate the checksums of the metadata. Get the metadata file from the       * repository then validate the checksum.      */
specifier|public
name|void
name|processMetadata
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|,
name|ArtifactReporter
name|reporter
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"====================================== +++++  PROCESS METADATA +++++ =============================="
argument_list|)
expr_stmt|;
name|String
name|metadataUrl
init|=
literal|""
decl_stmt|;
name|String
name|repositoryUrl
init|=
name|repository
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|metadata
operator|.
name|getRemoteFilename
argument_list|()
decl_stmt|;
comment|//version metadata
if|if
condition|(
name|metadata
operator|.
name|storedInArtifactVersionDirectory
argument_list|()
operator|==
literal|true
operator|&&
name|metadata
operator|.
name|storedInGroupDirectory
argument_list|()
operator|==
literal|false
condition|)
block|{
name|metadataUrl
operator|=
name|repositoryUrl
operator|+
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|metadata
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|metadata
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"/"
expr_stmt|;
comment|//group metadata
block|}
if|else if
condition|(
name|metadata
operator|.
name|storedInArtifactVersionDirectory
argument_list|()
operator|==
literal|false
operator|&&
name|metadata
operator|.
name|storedInGroupDirectory
argument_list|()
operator|==
literal|true
condition|)
block|{
name|metadataUrl
operator|=
name|repositoryUrl
operator|+
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
expr_stmt|;
comment|//artifact metadata
block|}
else|else
block|{
name|metadataUrl
operator|=
name|repositoryUrl
operator|+
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|metadata
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
expr_stmt|;
block|}
comment|//add the file name of the metadata
name|metadataUrl
operator|=
name|metadataUrl
operator|+
name|filename
expr_stmt|;
comment|//System.out.println( "METADATA URL -------> " + metadataUrl );
comment|//check if checksum files exist
name|boolean
name|md5Exists
init|=
name|getMD5File
argument_list|(
name|metadataUrl
argument_list|)
decl_stmt|;
name|boolean
name|sha1Exists
init|=
name|getSHA1File
argument_list|(
name|metadataUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|md5Exists
condition|)
block|{
if|if
condition|(
name|validateChecksum
argument_list|(
name|metadataUrl
argument_list|,
literal|"MD5"
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|metadata
argument_list|,
literal|"MD5 checksum does not match."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sha1Exists
condition|)
block|{
if|if
condition|(
name|validateChecksum
argument_list|(
name|metadataUrl
argument_list|,
literal|"SHA-1"
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|metadata
argument_list|,
literal|"SHA-1 checksum does not match."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get the MD5 Checksum file. If not found, return false.      * @param filename The name of the artifact whose MD5 Checksum file will be retrieved.      * @return      */
specifier|public
name|boolean
name|getMD5File
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
try|try
block|{
name|md5InputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filename
operator|+
literal|".md5"
argument_list|)
expr_stmt|;
name|md5InputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Get the SHA1 Checksum file. If not found, return false.      * @param filename The name of the artifact whose SHA-1 Checksum file will be retrieved.      * @return      */
specifier|public
name|boolean
name|getSHA1File
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
try|try
block|{
name|sha1InputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filename
operator|+
literal|".sha1"
argument_list|)
expr_stmt|;
name|sha1InputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Validate the checksum of the file.      * @param fileUrl The file to be validated.      * @param algo The checksum algorithm used.       * @return      */
specifier|protected
name|boolean
name|validateChecksum
parameter_list|(
name|String
name|fileUrl
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|chk1
init|=
literal|null
decl_stmt|,
name|chk2
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//Create checksum for jar file
name|String
name|ext
init|=
literal|".md5"
decl_stmt|;
if|if
condition|(
name|algo
operator|.
name|equals
argument_list|(
literal|"SHA-1"
argument_list|)
condition|)
name|ext
operator|=
literal|".sha1"
expr_stmt|;
name|chk1
operator|=
name|createChecksum
argument_list|(
name|fileUrl
argument_list|,
name|algo
argument_list|)
expr_stmt|;
if|if
condition|(
name|chk1
operator|!=
literal|null
condition|)
block|{
comment|//read the md5 file
name|chk2
operator|=
operator|new
name|byte
index|[
name|chk1
operator|.
name|length
index|]
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fileUrl
operator|+
name|ext
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|is
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|isr
operator|.
name|read
argument_list|(
name|chars
argument_list|)
expr_stmt|;
name|isr
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|chk2Str
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-----"
operator|+
name|algo
operator|+
literal|" Checksum value (CHK1 - created checksum for jar file) ::::: "
operator|+
name|byteArrayToHexStr
argument_list|(
name|chk1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-----"
operator|+
name|algo
operator|+
literal|" Checksum value (CHK2 - content of CHECKSUM file) ::::: "
operator|+
name|chk2Str
argument_list|)
expr_stmt|;
if|if
condition|(
name|chk2Str
operator|.
name|equals
argument_list|(
name|byteArrayToHexStr
argument_list|(
name|chk1
argument_list|)
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|valid
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|valid
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|valid
return|;
block|}
block|}
comment|/**      * Create a checksum from the specified metadata file.      * @param filename The file that will be created a checksum.      * @param algo The algorithm to be used (MD5, SHA-1)      * @return      * @throws FileNotFoundException      * @throws NoSuchAlgorithmException      * @throws IOException      */
specifier|protected
name|byte
index|[]
name|createChecksum
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|algo
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|InputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|MessageDigest
name|complete
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|int
name|numRead
decl_stmt|;
do|do
block|{
name|numRead
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|complete
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|numRead
operator|!=
operator|-
literal|1
condition|)
do|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|complete
operator|.
name|digest
argument_list|()
return|;
block|}
comment|/**      * Convert an incoming array of bytes into a string that represents each of      * the bytes as two hex characters.      * @param data      * @return      */
specifier|public
name|String
name|byteArrayToHexStr
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|String
name|output
init|=
literal|""
decl_stmt|;
name|String
name|tempStr
init|=
literal|""
decl_stmt|;
name|int
name|tempInt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|cnt
init|=
literal|0
init|;
name|cnt
operator|<
name|data
operator|.
name|length
condition|;
name|cnt
operator|++
control|)
block|{
comment|//Deposit a byte into the 8 lsb of an int.
name|tempInt
operator|=
name|data
index|[
name|cnt
index|]
operator|&
literal|0xFF
expr_stmt|;
comment|//Get hex representation of the int as a string.
name|tempStr
operator|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|tempInt
argument_list|)
expr_stmt|;
comment|//Append a leading 0 if necessary so that each hex string will contain 2 characters.
if|if
condition|(
name|tempStr
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|tempStr
operator|=
literal|"0"
operator|+
name|tempStr
expr_stmt|;
comment|//Concatenate the two characters to the output string.
name|output
operator|=
name|output
operator|+
name|tempStr
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
end_class

end_unit

