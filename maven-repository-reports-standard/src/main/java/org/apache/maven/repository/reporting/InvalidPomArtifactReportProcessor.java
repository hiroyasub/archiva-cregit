begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * This class validates well-formedness of pom xml file.  */
end_comment

begin_class
specifier|public
class|class
name|InvalidPomArtifactReportProcessor
implements|implements
name|ArtifactReportProcessor
block|{
comment|/**      * @param model      * @param artifact   The pom xml file to be validated, passed as an artifact object.      * @param reporter   The artifact reporter object.      * @param repository the repository where the artifact is located.      */
specifier|public
name|void
name|processArtifact
parameter_list|(
name|Model
name|model
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactReporter
name|reporter
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"pom"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|repository
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"."
operator|+
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fe
parameter_list|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"Artifact not found."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|repository
operator|.
name|getUrl
argument_list|()
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"."
operator|+
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|is
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|me
parameter_list|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"Error retrieving artifact from remote repository."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"Error retrieving artifact from remote repository."
argument_list|)
expr_stmt|;
block|}
block|}
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|MavenXpp3Reader
name|pomReader
init|=
operator|new
name|MavenXpp3Reader
argument_list|()
decl_stmt|;
try|try
block|{
name|Model
name|pomModel
init|=
name|pomReader
operator|.
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|xe
parameter_list|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"The pom xml file is not well-formed. Error while parsing."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|oe
parameter_list|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"Error while reading the pom xml file."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|reporter
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
literal|"The artifact is not a pom xml file."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

