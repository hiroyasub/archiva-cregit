begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0    *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MetadataXpp3Reader
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|CachedRepositoryQueryLayer
implements|implements
name|RepositoryQueryLayer
block|{
comment|// plexus components
specifier|private
name|ArtifactRepository
name|repository
decl_stmt|;
comment|//cache for metadata
specifier|private
name|Map
name|cacheMetadata
decl_stmt|;
comment|//cache for repository files, all types
comment|//@todo should also cache missing files???
specifier|private
name|Map
name|cacheFile
decl_stmt|;
specifier|public
name|CachedRepositoryQueryLayer
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|cacheMetadata
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|cacheFile
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// @todo should check for snapshot artifacts
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fileExists
argument_list|(
name|artifactFile
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|List
name|getArtifactVersions
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
name|getMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|metadata
operator|.
name|getVersioning
argument_list|()
operator|.
name|getVersions
argument_list|()
return|;
block|}
comment|/**      * Method to utilize the cache      */
specifier|private
name|boolean
name|fileExists
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|boolean
name|existing
init|=
literal|true
decl_stmt|;
name|String
name|path
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cacheFile
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cacheFile
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|existing
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|existing
return|;
block|}
specifier|private
name|boolean
name|fileExists
parameter_list|(
name|String
name|repositoryPath
parameter_list|)
block|{
return|return
name|fileExists
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repositoryPath
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Method to utilize the cache      */
specifier|private
name|Metadata
name|getMetadata
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheMetadata
operator|.
name|containsKey
argument_list|(
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|=
operator|(
name|Metadata
operator|)
name|cacheMetadata
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArtifactRepositoryMetadata
name|repositoryMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|repository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|repositoryMetadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileExists
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
condition|)
block|{
name|MetadataXpp3Reader
name|reader
init|=
operator|new
name|MetadataXpp3Reader
argument_list|()
decl_stmt|;
try|try
block|{
name|metadata
operator|=
name|reader
operator|.
name|read
argument_list|(
operator|new
name|FileReader
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|cacheMetadata
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//@todo should throw something
block|}
block|}
block|}
return|return
name|metadata
return|;
block|}
block|}
end_class

end_unit

