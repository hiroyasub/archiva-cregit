begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2005 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|DefaultArtifactReportProcessor
implements|implements
name|ArtifactReportProcessor
block|{
comment|// plexus components
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
specifier|private
name|RepositoryQueryLayer
name|repositoryQueryLayer
decl_stmt|;
specifier|public
name|void
name|processArtifact
parameter_list|(
name|Model
name|model
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactReporter
name|reporter
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
block|{
if|if
condition|(
name|artifact
operator|==
literal|null
condition|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|ArtifactReporter
operator|.
name|NULL_ARTIFACT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|ArtifactReporter
operator|.
name|NULL_MODEL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|dependencies
init|=
name|model
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|artifact
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|model
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dependencies
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|repositoryQueryLayer
operator|.
name|containsArtifact
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|ArtifactReporter
operator|.
name|ARTIFACT_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dependencies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|iterator
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryQueryLayer
operator|.
name|containsArtifact
argument_list|(
name|createArtifact
argument_list|(
name|dependency
argument_list|)
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addSuccess
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|ArtifactReporter
operator|.
name|ARTIFACT_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**      * Only used for passing a mock object when unit testing      * @param repositoryQueryLayer      */
specifier|protected
name|void
name|setRepositoryQueryLayer
parameter_list|(
name|RepositoryQueryLayer
name|repositoryQueryLayer
parameter_list|)
block|{
name|this
operator|.
name|repositoryQueryLayer
operator|=
name|repositoryQueryLayer
expr_stmt|;
block|}
comment|/**      * Only used for passing a mock object when unit testing      * @param artifactFactory      */
specifier|protected
name|void
name|setArtifactFactory
parameter_list|(
name|ArtifactFactory
name|artifactFactory
parameter_list|)
block|{
name|this
operator|.
name|artifactFactory
operator|=
name|artifactFactory
expr_stmt|;
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
block|{
return|return
name|artifactFactory
operator|.
name|createBuildArtifact
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|"pom"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

