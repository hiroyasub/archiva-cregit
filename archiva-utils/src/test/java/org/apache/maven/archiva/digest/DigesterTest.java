begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|digest
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_comment
comment|/**  * Test the digester.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
class|class
name|DigesterTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MD5
init|=
literal|"adbc688ce77fa2aece4bb72cad9f98ba"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SHA1
init|=
literal|"2a7b459938e12a2dc35d1bf6cff35e9c2b592fa9"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRONG_SHA1
init|=
literal|"4d8703779816556cdb8be7f6bb5c954f4b5730e2"
decl_stmt|;
specifier|private
name|Digester
name|sha1Digest
decl_stmt|;
specifier|private
name|Digester
name|md5Digest
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|sha1Digest
operator|=
operator|(
name|Digester
operator|)
name|lookup
argument_list|(
name|Digester
operator|.
name|ROLE
argument_list|,
literal|"sha1"
argument_list|)
expr_stmt|;
name|md5Digest
operator|=
operator|(
name|Digester
operator|)
name|lookup
argument_list|(
name|Digester
operator|.
name|ROLE
argument_list|,
literal|"md5"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAlgorithm
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"SHA-1"
argument_list|,
name|sha1Digest
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MD5"
argument_list|,
name|md5Digest
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBareDigestFormat
parameter_list|()
throws|throws
name|DigesterException
throws|,
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-file.txt"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|md5Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|MD5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Bare format MD5 must not throw exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|SHA1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Bare format SHA1 must not throw exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|WRONG_SHA1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"wrong checksum must throw an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
specifier|public
name|void
name|testOpensslDigestFormat
parameter_list|()
throws|throws
name|IOException
throws|,
name|DigesterException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-file.txt"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|md5Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
literal|"MD5(test-file.txt)= "
operator|+
name|MD5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"OpenSSL MD5 format must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|md5Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
literal|"MD5 (test-file.txt) = "
operator|+
name|MD5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"FreeBSD MD5 format must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
literal|"SHA1(test-file.txt)= "
operator|+
name|SHA1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"OpenSSL SHA1 format must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
literal|"SHA1 (test-file.txt) = "
operator|+
name|SHA1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"FreeBSD SHA1 format must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
literal|"SHA1 (FOO) = "
operator|+
name|SHA1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong filename should cause an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
comment|//expected
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
literal|"SHA1 (test-file.txt) = "
operator|+
name|WRONG_SHA1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong sha1 should cause an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
specifier|public
name|void
name|testGnuDigestFormat
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
throws|,
name|DigesterException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-file.txt"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|md5Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|MD5
operator|+
literal|" *test-file.txt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"GNU format MD5 must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|md5Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|MD5
operator|+
literal|" test-file.txt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"GNU text format MD5 must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|SHA1
operator|+
literal|" *test-file.txt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"GNU format SHA1 must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|SHA1
operator|+
literal|" test-file.txt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"GNU text format SHA1 must not cause exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|SHA1
operator|+
literal|" FOO"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong filename cause an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
comment|//expected
block|}
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|WRONG_SHA1
operator|+
literal|" test-file.txt"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong SHA1 cause an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
specifier|public
name|void
name|testUntrimmedContent
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-file.txt"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|sha1Digest
operator|.
name|verify
argument_list|(
name|file
argument_list|,
name|SHA1
operator|+
literal|" *test-file.txt \n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"GNU untrimmed SHA1 must not cause exception"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

