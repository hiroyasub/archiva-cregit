begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_comment
comment|/**  * Create a digest for a file.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDigester
implements|implements
name|Digester
block|{
specifier|private
specifier|final
name|StreamingDigester
name|streamingDigester
decl_stmt|;
specifier|protected
name|AbstractDigester
parameter_list|(
name|StreamingDigester
name|streamingDigester
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|this
operator|.
name|streamingDigester
operator|=
name|streamingDigester
expr_stmt|;
block|}
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|streamingDigester
operator|.
name|getAlgorithm
argument_list|()
return|;
block|}
specifier|public
name|String
name|calc
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|DigesterException
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|streamingDigester
operator|.
name|reset
argument_list|()
expr_stmt|;
name|streamingDigester
operator|.
name|update
argument_list|(
name|fis
argument_list|)
expr_stmt|;
return|return
name|streamingDigester
operator|.
name|calc
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DigesterException
argument_list|(
literal|"Unable to calculate the "
operator|+
name|streamingDigester
operator|.
name|getAlgorithm
argument_list|()
operator|+
literal|" hashcode for "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|checksum
parameter_list|)
throws|throws
name|DigesterException
block|{
name|String
name|trimmedChecksum
init|=
name|DigestUtils
operator|.
name|cleanChecksum
argument_list|(
name|checksum
argument_list|,
name|streamingDigester
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//Create checksum for jar file
name|String
name|sum
init|=
name|calc
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|trimmedChecksum
argument_list|,
name|sum
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DigesterException
argument_list|(
literal|"Checksum failed"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[Digester:"
operator|+
name|streamingDigester
operator|.
name|getAlgorithm
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

