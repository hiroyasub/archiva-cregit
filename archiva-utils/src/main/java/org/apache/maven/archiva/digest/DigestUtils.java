begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|digest
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Parse files from checksum file formats.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
class|class
name|DigestUtils
block|{
specifier|private
name|DigestUtils
parameter_list|()
block|{
comment|// don't create this class
block|}
specifier|public
specifier|static
name|String
name|cleanChecksum
parameter_list|(
name|String
name|checksum
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|DigesterException
block|{
name|String
name|trimmedChecksum
init|=
name|checksum
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Free-BSD / openssl
name|String
name|regex
init|=
name|algorithm
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"\\s*\\((.*?)\\)\\s*=\\s*([a-fA-F0-9]+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
operator|.
name|matcher
argument_list|(
name|trimmedChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|filename
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|filename
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DigesterException
argument_list|(
literal|"Supplied checksum does not match checksum pattern"
argument_list|)
throw|;
block|}
name|trimmedChecksum
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// GNU tools
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([a-fA-F0-9]+)\\s\\*?(.+)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|trimmedChecksum
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|filename
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|filename
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DigesterException
argument_list|(
literal|"Supplied checksum does not match checksum pattern"
argument_list|)
throw|;
block|}
name|trimmedChecksum
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|trimmedChecksum
return|;
block|}
block|}
end_class

end_unit

