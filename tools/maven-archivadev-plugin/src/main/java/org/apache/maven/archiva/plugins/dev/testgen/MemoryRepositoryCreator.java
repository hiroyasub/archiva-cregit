begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|plugins
operator|.
name|dev
operator|.
name|testgen
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|EnumerationIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|plugins
operator|.
name|dev
operator|.
name|functors
operator|.
name|MatchingDependencyPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|InvalidArtifactRTException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DistributionManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Relocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * MemoryRepositoryCreator   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|MemoryRepositoryCreator
extends|extends
name|AbstractCreator
block|{
specifier|private
name|File
name|outputFile
decl_stmt|;
specifier|private
name|PrintWriter
name|out
decl_stmt|;
specifier|private
name|int
name|modelsProcessed
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|create
parameter_list|(
name|String
name|classPrefix
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating "
operator|+
name|classPrefix
operator|+
literal|"MemoryRepository.java ..."
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Please be patient, this can take a few minutes ..."
argument_list|)
expr_stmt|;
name|modelsProcessed
operator|=
literal|0
expr_stmt|;
name|outputFile
operator|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|classPrefix
operator|+
literal|"MemoryRepository.java"
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to open file "
operator|+
name|outputFile
operator|.
name|getName
argument_list|()
operator|+
literal|" for output: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|out
operator|.
name|println
argument_list|(
literal|"package org.apache.maven.archiva.dependency.graph;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|writeLicense
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Imports
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.maven.archiva.model.ArchivaProjectModel;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.maven.archiva.model.Dependency;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.maven.archiva.model.VersionedReference;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|projectKey
init|=
name|toKey
argument_list|(
name|project
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|writeJavadoc
argument_list|(
name|classPrefix
operator|+
literal|"MemoryRepository"
argument_list|,
name|projectKey
argument_list|)
expr_stmt|;
comment|// The class itself.
name|out
operator|.
name|println
argument_list|(
literal|"public class "
operator|+
name|classPrefix
operator|+
literal|"MemoryRepository"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   extends AbstractMemoryRepository"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|writeTest
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|IOUtil
operator|.
name|close
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeJavadoc
parameter_list|(
name|String
name|classname
parameter_list|,
name|String
name|projectKey
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * "
operator|+
name|classname
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * MemoryRepository for testing<code>"
operator|+
name|projectKey
operator|+
literal|"</code>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Generated by<code>archivadev:generate-dependency-tests</code> plugin"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * @version $Id$"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTest
parameter_list|()
block|{
name|out
operator|.
name|println
argument_list|(
literal|"   public void initialize()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      ArchivaProjectModel model;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      Dependency dep;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Set
name|seenModels
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|writeModel
argument_list|(
name|seenModels
argument_list|,
name|project
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Processing done: Processed "
operator|+
name|modelsProcessed
operator|+
literal|" models ("
operator|+
name|seenModels
operator|.
name|size
argument_list|()
operator|+
literal|" were unique)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   }"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeModel
parameter_list|(
name|Set
name|seenModels
parameter_list|,
name|Model
name|model
parameter_list|)
block|{
name|String
name|projectKey
init|=
name|toKey
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|modelsProcessed
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|modelsProcessed
operator|%
literal|100
operator|)
operator|==
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Processed "
operator|+
name|modelsProcessed
operator|+
literal|" models ("
operator|+
name|seenModels
operator|.
name|size
argument_list|()
operator|+
literal|" unique) ..."
argument_list|)
expr_stmt|;
block|}
name|Relocation
name|relocation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|seenModels
operator|.
name|contains
argument_list|(
name|projectKey
argument_list|)
condition|)
block|{
return|return;
block|}
name|seenModels
operator|.
name|add
argument_list|(
name|projectKey
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      model = toModel( \""
operator|+
name|projectKey
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|parentKey
init|=
name|toKey
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      model.setParentProject( toParent( \""
operator|+
name|parentKey
operator|+
literal|"\" ) );"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|model
operator|.
name|getDependencies
argument_list|()
argument_list|)
condition|)
block|{
name|Iterator
name|it
init|=
name|model
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
name|applyDepMan
argument_list|(
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|writeAddDependency
argument_list|(
literal|"addDependency"
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|isNotEmpty
argument_list|(
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|getDependencies
argument_list|()
argument_list|)
condition|)
block|{
name|Iterator
name|it
init|=
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|writeAddDependency
argument_list|(
literal|"addDependencyManagement"
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
condition|)
block|{
name|Iterator
name|it
init|=
operator|new
name|EnumerationIterator
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      model.addProperty( \""
operator|+
name|key
operator|+
literal|"\", \""
operator|+
name|value
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
operator|.
name|getDistributionManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DistributionManagement
name|distMgmt
init|=
name|model
operator|.
name|getDistributionManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|distMgmt
operator|.
name|getRelocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|relocation
operator|=
name|distMgmt
operator|.
name|getRelocation
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      model.setRelocation( new VersionedReference() );"
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|relocation
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      model.getRelocation().setGroupId( \""
operator|+
name|relocation
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|relocation
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      model.getRelocation().setArtifactId( \""
operator|+
name|relocation
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|relocation
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      model.getRelocation().setVersion( \""
operator|+
name|relocation
operator|.
name|getVersion
argument_list|()
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"      addModel( model );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Model
name|parentModel
init|=
name|getModel
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|writeModel
argument_list|(
name|seenModels
argument_list|,
name|parentModel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relocation
operator|!=
literal|null
condition|)
block|{
name|Model
name|relocatedModel
init|=
name|getModel
argument_list|(
name|model
argument_list|,
name|relocation
argument_list|)
decl_stmt|;
name|writeModel
argument_list|(
name|seenModels
argument_list|,
name|relocatedModel
argument_list|)
expr_stmt|;
block|}
name|writeModelDependencies
argument_list|(
name|seenModels
argument_list|,
name|projectKey
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|writeModelDependencyManagement
argument_list|(
name|seenModels
argument_list|,
name|projectKey
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Model
name|getModel
parameter_list|(
name|Model
name|model
parameter_list|,
name|Relocation
name|relocation
parameter_list|)
block|{
name|String
name|groupId
init|=
name|relocation
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
name|String
name|artifactId
init|=
name|relocation
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|relocation
operator|.
name|getVersion
argument_list|()
decl_stmt|;
comment|// Set empty groupId.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
name|groupId
operator|=
name|model
operator|.
name|getGroupId
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BAD POM: GroupId for relocation in "
operator|+
name|toKey
argument_list|(
name|model
argument_list|)
operator|+
literal|" cannot be determined, as there is no Parent Pom reference."
argument_list|)
throw|;
block|}
name|groupId
operator|=
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Set empty artifactId.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
name|artifactId
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BAD POM: ArtifactId for relocation in "
operator|+
name|toKey
argument_list|(
name|model
argument_list|)
operator|+
literal|" cannot be determined, as there is no Parent Pom reference."
argument_list|)
throw|;
block|}
name|artifactId
operator|=
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getArtifactId
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Set empty version.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|version
operator|=
name|model
operator|.
name|getVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|version
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BAD POM: version for relocation in "
operator|+
name|toKey
argument_list|(
name|model
argument_list|)
operator|+
literal|" cannot be determined, as there is no Parent Pom reference."
argument_list|)
throw|;
block|}
name|version
operator|=
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|getModel
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|"pom"
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeAddDependency
parameter_list|(
name|String
name|addMethod
parameter_list|,
name|Dependency
name|dep
parameter_list|)
block|{
name|boolean
name|useShortForm
init|=
literal|true
decl_stmt|;
name|String
name|depKey
init|=
name|toKey
argument_list|(
name|dep
argument_list|)
decl_stmt|;
name|useShortForm
operator|=
name|isEmpty
argument_list|(
name|dep
operator|.
name|getExclusions
argument_list|()
argument_list|)
operator|&&
operator|!
name|dep
operator|.
name|isOptional
argument_list|()
expr_stmt|;
name|String
name|scopePart
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isNotBlank
argument_list|(
name|dep
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|scopePart
operator|=
literal|", \""
operator|+
name|dep
operator|.
name|getScope
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
if|if
condition|(
name|useShortForm
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      model."
operator|+
name|addMethod
operator|+
literal|"( toDependency( \""
operator|+
name|depKey
operator|+
literal|"\""
operator|+
name|scopePart
operator|+
literal|" ) );"
argument_list|)
expr_stmt|;
return|return;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"      dep = toDependency( \""
operator|+
name|depKey
operator|+
literal|"\""
operator|+
name|scopePart
operator|+
literal|" );"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|dep
operator|.
name|getExclusions
argument_list|()
argument_list|)
condition|)
block|{
name|Iterator
name|it
init|=
name|dep
operator|.
name|getExclusions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Exclusion
name|exclusion
init|=
operator|(
name|Exclusion
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|exkey
init|=
name|toKey
argument_list|(
name|exclusion
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      addExclusion( dep, \""
operator|+
name|exkey
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dep
operator|.
name|isOptional
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      dep.setOptional( true );"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"      model."
operator|+
name|addMethod
operator|+
literal|"( dep );"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeModelDependencies
parameter_list|(
name|Set
name|seenModels
parameter_list|,
name|String
name|projectKey
parameter_list|,
name|Model
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getDependencies
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Iterator
name|it
init|=
name|model
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
name|applyDepMan
argument_list|(
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|Model
name|rawModel
init|=
name|getModel
argument_list|(
name|dep
argument_list|)
decl_stmt|;
try|try
block|{
name|writeModel
argument_list|(
name|seenModels
argument_list|,
name|rawModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidArtifactRTException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Encountered invalid dependency/artifact during ["
operator|+
name|projectKey
operator|+
literal|"] : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|writeModelDependencyManagement
parameter_list|(
name|Set
name|seenModels
parameter_list|,
name|String
name|projectKey
parameter_list|,
name|Model
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Iterator
name|it
init|=
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Model
name|rawModel
init|=
name|getModel
argument_list|(
name|dep
argument_list|)
decl_stmt|;
try|try
block|{
name|writeModel
argument_list|(
name|seenModels
argument_list|,
name|rawModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidArtifactRTException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Encountered invalid dependency/artifact during ["
operator|+
name|projectKey
operator|+
literal|"] : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
name|Dependency
name|applyDepMan
parameter_list|(
name|Dependency
name|dependency
parameter_list|,
name|Model
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|getDependencies
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Attempt to find matching dep.
name|Predicate
name|matchingDep
init|=
operator|new
name|MatchingDependencyPredicate
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
name|Dependency
name|depman
init|=
operator|(
name|Dependency
operator|)
name|CollectionUtils
operator|.
name|find
argument_list|(
name|model
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|matchingDep
argument_list|)
decl_stmt|;
if|if
condition|(
name|depman
operator|!=
literal|null
condition|)
block|{
name|dependency
operator|.
name|setVersion
argument_list|(
name|depman
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|depman
operator|.
name|getScope
argument_list|()
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found it!
return|return
name|dependency
return|;
block|}
block|}
block|}
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Model
name|parentModel
init|=
name|getModel
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|applyDepMan
argument_list|(
name|dependency
argument_list|,
name|parentModel
argument_list|)
return|;
block|}
return|return
name|dependency
return|;
block|}
block|}
end_class

end_unit

