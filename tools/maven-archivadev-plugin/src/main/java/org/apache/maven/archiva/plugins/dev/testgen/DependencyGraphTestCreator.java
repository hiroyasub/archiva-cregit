begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|plugins
operator|.
name|dev
operator|.
name|testgen
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|NotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|plugins
operator|.
name|dev
operator|.
name|functors
operator|.
name|DependencyNodeToArtifactTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DependencyGraphTestCreator   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyGraphTestCreator
extends|extends
name|AbstractCreator
block|{
specifier|private
class|class
name|RootArtifactPredicate
implements|implements
name|Predicate
block|{
specifier|private
name|String
name|rootKey
decl_stmt|;
specifier|public
name|RootArtifactPredicate
parameter_list|(
name|DependencyTree
name|tree
parameter_list|)
block|{
name|this
operator|.
name|rootKey
operator|=
name|toKey
argument_list|(
name|tree
operator|.
name|getRootNode
argument_list|()
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|Artifact
condition|)
block|{
name|Artifact
name|nodeArtifact
init|=
operator|(
name|Artifact
operator|)
name|input
decl_stmt|;
name|String
name|key
init|=
name|toKey
argument_list|(
name|nodeArtifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|rootKey
argument_list|)
condition|)
block|{
name|satisfies
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|satisfies
return|;
block|}
block|}
specifier|private
name|File
name|outputFile
decl_stmt|;
specifier|private
name|PrintWriter
name|out
decl_stmt|;
specifier|private
name|DependencyTreeBuilder
name|dependencyTreeBuilder
decl_stmt|;
specifier|private
name|ArtifactMetadataSource
name|artifactMetadataSource
decl_stmt|;
specifier|private
name|ArtifactCollector
name|collector
decl_stmt|;
specifier|public
name|void
name|create
parameter_list|(
name|String
name|classPrefix
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|String
name|classname
init|=
name|classPrefix
operator|+
literal|"DependencyGraphTest"
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating "
operator|+
name|classname
operator|+
literal|".java ..."
argument_list|)
expr_stmt|;
name|outputFile
operator|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|classname
operator|+
literal|".java"
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to open file "
operator|+
name|outputFile
operator|.
name|getName
argument_list|()
operator|+
literal|" for output: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|out
operator|.
name|println
argument_list|(
literal|"package org.apache.maven.archiva.dependency.graph;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|writeLicense
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Imports
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.maven.archiva.dependency.DependencyGraphFactory;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.maven.archiva.model.DependencyScope;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.maven.archiva.model.VersionedReference;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import java.util.ArrayList;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import java.util.List;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|projectKey
init|=
name|toKey
argument_list|(
name|project
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|writeJavadoc
argument_list|(
name|classname
argument_list|,
name|projectKey
argument_list|)
expr_stmt|;
comment|// The class itself.
name|out
operator|.
name|println
argument_list|(
literal|"public class "
operator|+
name|classname
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   extends AbstractDependencyGraphFactoryTestCase"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|DependencyTree
name|dependencyTree
init|=
name|getDependencyTree
argument_list|()
decl_stmt|;
name|writeGraphNodesTest
argument_list|(
name|classPrefix
argument_list|,
name|dependencyTree
argument_list|)
expr_stmt|;
comment|// TODO: enable in future, when resolution between archiva and maven are equal.
comment|// writeDirectCompileDepsTest( classPrefix, dependencyTree );
comment|// writeDirectTestDepsTest( classPrefix, dependencyTree );
comment|// writeTransitiveCompileDepsTest( classPrefix, dependencyTree );
comment|// writeTransitiveTestDepsTest( classPrefix, dependencyTree );
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|IOUtil
operator|.
name|close
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ArtifactMetadataSource
name|getArtifactMetadataSource
parameter_list|()
block|{
return|return
name|artifactMetadataSource
return|;
block|}
specifier|public
name|ArtifactCollector
name|getCollector
parameter_list|()
block|{
return|return
name|collector
return|;
block|}
specifier|public
name|DependencyTreeBuilder
name|getDependencyTreeBuilder
parameter_list|()
block|{
return|return
name|dependencyTreeBuilder
return|;
block|}
specifier|public
name|void
name|setArtifactMetadataSource
parameter_list|(
name|ArtifactMetadataSource
name|artifactMetadataSource
parameter_list|)
block|{
name|this
operator|.
name|artifactMetadataSource
operator|=
name|artifactMetadataSource
expr_stmt|;
block|}
specifier|public
name|void
name|setCollector
parameter_list|(
name|ArtifactCollector
name|collector
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
block|}
specifier|public
name|void
name|setDependencyTreeBuilder
parameter_list|(
name|DependencyTreeBuilder
name|dependencyTreeBuilder
parameter_list|)
block|{
name|this
operator|.
name|dependencyTreeBuilder
operator|=
name|dependencyTreeBuilder
expr_stmt|;
block|}
specifier|private
name|DependencyTree
name|getDependencyTree
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
return|return
name|dependencyTreeBuilder
operator|.
name|buildDependencyTree
argument_list|(
name|project
argument_list|,
name|localRepository
argument_list|,
name|artifactFactory
argument_list|,
name|artifactMetadataSource
argument_list|,
name|collector
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DependencyTreeBuilderException
name|e
parameter_list|)
block|{
name|String
name|emsg
init|=
literal|"Unable to build dependency tree."
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
name|emsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|emsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeDirectCompileDepsTest
parameter_list|(
name|String
name|classPrefix
parameter_list|,
name|DependencyTree
name|tree
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"   public void testResolveOfDirectCompileDeps()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        throws GraphTaskException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   {"
argument_list|)
expr_stmt|;
name|writeTestProlog
argument_list|(
name|classPrefix
argument_list|)
expr_stmt|;
name|writeDirectDependenciesCheck
argument_list|(
name|tree
argument_list|,
literal|"compile"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeDirectDependenciesCheck
parameter_list|(
name|DependencyTree
name|dependencyTree
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      // Check for direct dependencies on scope "
operator|+
name|scope
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      expectedNodes.clear();"
argument_list|)
expr_stmt|;
name|List
name|directDeps
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|directDeps
operator|.
name|addAll
argument_list|(
name|dependencyTree
operator|.
name|getRootNode
argument_list|()
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|directDeps
argument_list|,
operator|new
name|DependencyNodeToArtifactTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|directDeps
argument_list|)
expr_stmt|;
name|writeExpectedNodesAdd
argument_list|(
name|directDeps
argument_list|,
name|scope
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      assertDirectNodes( graph, expectedNodes, \""
operator|+
name|scope
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeDirectTestDepsTest
parameter_list|(
name|String
name|classPrefix
parameter_list|,
name|DependencyTree
name|tree
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"   public void testResolveOfDirectTestDeps()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        throws GraphTaskException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   {"
argument_list|)
expr_stmt|;
name|writeTestProlog
argument_list|(
name|classPrefix
argument_list|)
expr_stmt|;
name|writeDirectDependenciesCheck
argument_list|(
name|tree
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeExpectedNodesAdd
parameter_list|(
name|List
name|deps
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|deps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|depKey
init|=
name|toKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|scope
argument_list|,
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      expectedNodes.add( \""
operator|+
name|depKey
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeJavadoc
parameter_list|(
name|String
name|classname
parameter_list|,
name|String
name|projectKey
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * "
operator|+
name|classname
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * DependencyGraphTest for testing<code>"
operator|+
name|projectKey
operator|+
literal|"</code>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Generated by<code>archivadev:generate-dependency-tests</code> plugin"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * @version $Id$"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeGraphNodesTest
parameter_list|(
name|String
name|classPrefix
parameter_list|,
specifier|final
name|DependencyTree
name|tree
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"   public void testResolvedDepsToNodes()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        throws GraphTaskException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   {"
argument_list|)
expr_stmt|;
name|writeTestProlog
argument_list|(
name|classPrefix
argument_list|)
expr_stmt|;
name|String
name|projectKey
init|=
name|toKey
argument_list|(
name|project
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      String expectedRootRef = \""
operator|+
name|projectKey
operator|+
literal|"\";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      List expectedNodes = new ArrayList();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      // Check for all nodes, regardless of scope."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      expectedNodes.clear();"
argument_list|)
expr_stmt|;
comment|// Add all deps.
name|List
name|deps
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Predicate
name|notRootNode
init|=
name|NotPredicate
operator|.
name|getInstance
argument_list|(
operator|new
name|RootArtifactPredicate
argument_list|(
name|tree
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|tree
operator|.
name|getArtifacts
argument_list|()
argument_list|,
name|notRootNode
argument_list|,
name|deps
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|deps
argument_list|,
operator|new
name|DependencyNodeToArtifactTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|deps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|depKey
init|=
name|toKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      expectedNodes.add( \""
operator|+
name|depKey
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      assertGraph( graph, expectedRootRef, expectedNodes );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTestProlog
parameter_list|(
name|String
name|classPrefix
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      MemoryRepositoryDependencyGraphBuilder graphBuilder = "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                     new MemoryRepositoryDependencyGraphBuilder();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      MemoryRepository repository = new "
operator|+
name|classPrefix
operator|+
literal|"MemoryRepository();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      graphBuilder.setMemoryRepository( repository );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      // Create the factory, and add the test resolver."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      DependencyGraphFactory factory = new DependencyGraphFactory();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      factory.setGraphBuilder( graphBuilder );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      factory.setDesiredScope( DependencyScope.TEST );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      // Get the model to resolve from"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      VersionedReference rootRef = toVersionedReference( \""
operator|+
name|project
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|project
operator|.
name|getVersion
argument_list|()
operator|+
literal|"\"); "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      // Perform the resolution."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      DependencyGraph graph = factory.getGraph( rootRef );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      // Test the results."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      assertNotNull( \"Graph shouldn't be null.\", graph );"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTransientDependenciesCheck
parameter_list|(
name|DependencyTree
name|dependencyTree
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      // Check for transient dependencies on scope "
operator|+
name|scope
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      expectedNodes.clear();"
argument_list|)
expr_stmt|;
comment|// Add all deps.
name|List
name|deps
init|=
operator|new
name|ArrayList
argument_list|(
name|dependencyTree
operator|.
name|getArtifacts
argument_list|()
argument_list|)
decl_stmt|;
comment|// Remove the direct deps.
name|List
name|directDeps
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|directDeps
operator|.
name|addAll
argument_list|(
name|dependencyTree
operator|.
name|getRootNode
argument_list|()
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|directDeps
argument_list|,
operator|new
name|DependencyNodeToArtifactTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|deps
operator|.
name|removeAll
argument_list|(
name|directDeps
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|writeExpectedNodesAdd
argument_list|(
name|deps
argument_list|,
name|scope
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      assertTransientNodes( graph, expectedNodes, \""
operator|+
name|scope
operator|+
literal|"\" );"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTransitiveCompileDepsTest
parameter_list|(
name|String
name|classPrefix
parameter_list|,
name|DependencyTree
name|tree
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"   public void testResolveOfTransitiveCompileDeps()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        throws GraphTaskException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   {"
argument_list|)
expr_stmt|;
name|writeTestProlog
argument_list|(
name|classPrefix
argument_list|)
expr_stmt|;
name|writeTransientDependenciesCheck
argument_list|(
name|tree
argument_list|,
literal|"compile"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTransitiveTestDepsTest
parameter_list|(
name|String
name|classPrefix
parameter_list|,
name|DependencyTree
name|tree
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"   public void testResolveOfTransitiveTestDeps()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        throws GraphTaskException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   {"
argument_list|)
expr_stmt|;
name|writeTestProlog
argument_list|(
name|classPrefix
argument_list|)
expr_stmt|;
name|writeTransientDependenciesCheck
argument_list|(
name|tree
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

