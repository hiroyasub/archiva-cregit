begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|plugins
operator|.
name|dev
operator|.
name|testgen
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|InvalidVersionSpecificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DependencyManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|ProjectBuildingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DependencyUtils - common utilities for dependencies.   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyUtils
block|{
specifier|public
specifier|static
name|Map
name|getManagedVersionMap
parameter_list|(
name|MavenProject
name|project
parameter_list|,
name|ArtifactFactory
name|factory
parameter_list|)
throws|throws
name|ProjectBuildingException
block|{
name|DependencyManagement
name|dependencyManagement
init|=
name|project
operator|.
name|getDependencyManagement
argument_list|()
decl_stmt|;
name|Map
name|managedVersionMap
decl_stmt|;
if|if
condition|(
name|dependencyManagement
operator|!=
literal|null
operator|&&
name|dependencyManagement
operator|.
name|getDependencies
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|managedVersionMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|dependencyManagement
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|VersionRange
name|versionRange
init|=
name|VersionRange
operator|.
name|createFromVersionSpec
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|factory
operator|.
name|createDependencyArtifact
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|versionRange
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
name|managedVersionMap
operator|.
name|put
argument_list|(
name|dependency
operator|.
name|getManagementKey
argument_list|()
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidVersionSpecificationException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectBuildingException
argument_list|(
name|project
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Unable to parse version '"
operator|+
name|dependency
operator|.
name|getVersion
argument_list|()
operator|+
literal|"' for dependency '"
operator|+
name|dependency
operator|.
name|getManagementKey
argument_list|()
operator|+
literal|"': "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|managedVersionMap
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
return|return
name|managedVersionMap
return|;
block|}
block|}
end_class

end_unit

