begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|plugins
operator|.
name|dev
operator|.
name|testgen
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Parent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|interpolation
operator|.
name|ModelInterpolator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|interpolation
operator|.
name|RegexBasedModelInterpolator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * AbstractCreator   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCreator
block|{
specifier|protected
name|MavenProject
name|project
decl_stmt|;
specifier|protected
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
specifier|protected
name|ArtifactRepository
name|localRepository
decl_stmt|;
specifier|protected
name|File
name|outputDir
decl_stmt|;
specifier|private
name|MavenXpp3Reader
name|modelReader
init|=
operator|new
name|MavenXpp3Reader
argument_list|()
decl_stmt|;
specifier|private
name|ModelInterpolator
name|modelInterpolator
decl_stmt|;
specifier|private
name|Log
name|log
decl_stmt|;
specifier|public
specifier|abstract
name|void
name|create
parameter_list|(
name|String
name|classPrefix
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
specifier|protected
name|void
name|writeLicense
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Licensed to the Apache Software Foundation (ASF) under one"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * or more contributor license agreements.  See the NOTICE file"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * distributed with this work for additional information"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * regarding copyright ownership.  The ASF licenses this file"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * to you under the Apache License, Version 2.0 (the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * \"License\"); you may not use this file except in compliance"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * with the License.  You may obtain a copy of the License at"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *  http://www.apache.org/licenses/LICENSE-2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Unless required by applicable law or agreed to in writing,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * software distributed under the License is distributed on an"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * KIND, either express or implied.  See the License for the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * specific language governing permissions and limitations"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * under the License."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isNotEmpty
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
return|return
operator|!
name|isEmpty
argument_list|(
name|properties
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isEmpty
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|properties
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Log
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
specifier|public
name|void
name|setLog
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|MavenProject
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
specifier|public
name|void
name|setProject
parameter_list|(
name|MavenProject
name|project
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
block|}
specifier|protected
name|Model
name|getModel
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
return|return
name|getModel
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|,
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Model
name|getModel
parameter_list|(
name|Parent
name|parent
parameter_list|)
block|{
return|return
name|getModel
argument_list|(
name|parent
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|parent
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|parent
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|"pom"
argument_list|)
return|;
block|}
specifier|protected
name|Model
name|getModel
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|type
parameter_list|)
block|{
comment|// getLog().info( ".getModel(" + groupId + ", " + artifactId + ", " + version + ", " + type + ")" );
name|Artifact
name|pomArtifact
init|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|localRepository
operator|.
name|getLayout
argument_list|()
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
decl_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|localRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pomFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|FileReader
argument_list|(
name|pomFile
argument_list|)
expr_stmt|;
name|Model
name|model
init|=
name|modelReader
operator|.
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// HACK: to allow ${pom.groupId} expressions to work, WITHOUT resolving/merginc parent.
comment|//       (The merging of parent pom is done elsewhere)
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|setGroupId
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// HACK: to fix bad poms in repo (see jetty:jetty:4.2.10::jar for example)
name|model
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
comment|// Interpolate the properties?
if|if
condition|(
name|modelInterpolator
operator|==
literal|null
condition|)
block|{
name|modelInterpolator
operator|=
operator|new
name|RegexBasedModelInterpolator
argument_list|()
expr_stmt|;
block|}
name|model
operator|=
name|modelInterpolator
operator|.
name|interpolate
argument_list|(
name|model
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to read pom file "
operator|+
name|pomFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" : ("
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no pom file.
name|Model
name|model
init|=
operator|new
name|Model
argument_list|()
decl_stmt|;
name|model
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|model
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|model
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPackaging
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|private
name|String
name|getGroupId
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|String
name|groupId
init|=
name|model
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|groupId
operator|=
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|groupId
return|;
block|}
specifier|private
name|String
name|getVersion
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|String
name|version
init|=
name|model
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|version
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|version
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isNotBlank
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|!
name|isBlank
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isBlank
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
name|str
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
operator|)
return|;
block|}
specifier|protected
name|boolean
name|isNotEmpty
parameter_list|(
name|Collection
name|coll
parameter_list|)
block|{
return|return
operator|!
name|isEmpty
argument_list|(
name|coll
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isEmpty
parameter_list|(
name|Collection
name|coll
parameter_list|)
block|{
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|coll
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toKey
parameter_list|(
name|Parent
name|ref
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toKey
parameter_list|(
name|Exclusion
name|ref
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toKey
parameter_list|(
name|Model
name|ref
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|getGroupId
argument_list|(
name|ref
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|getVersion
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toKey
parameter_list|(
name|Dependency
name|ref
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toKey
parameter_list|(
name|Artifact
name|ref
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ArtifactFactory
name|getArtifactFactory
parameter_list|()
block|{
return|return
name|artifactFactory
return|;
block|}
specifier|public
name|void
name|setArtifactFactory
parameter_list|(
name|ArtifactFactory
name|artifactFactory
parameter_list|)
block|{
name|this
operator|.
name|artifactFactory
operator|=
name|artifactFactory
expr_stmt|;
block|}
specifier|public
name|ArtifactRepository
name|getLocalRepository
parameter_list|()
block|{
return|return
name|localRepository
return|;
block|}
specifier|public
name|void
name|setLocalRepository
parameter_list|(
name|ArtifactRepository
name|localRepository
parameter_list|)
block|{
name|this
operator|.
name|localRepository
operator|=
name|localRepository
expr_stmt|;
block|}
specifier|public
name|File
name|getOutputDir
parameter_list|()
block|{
return|return
name|outputDir
return|;
block|}
specifier|public
name|void
name|setOutputDir
parameter_list|(
name|File
name|outputDir
parameter_list|)
block|{
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
block|}
block|}
end_class

end_unit

