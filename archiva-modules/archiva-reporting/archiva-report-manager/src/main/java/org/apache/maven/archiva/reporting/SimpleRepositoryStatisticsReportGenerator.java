begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArtifactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|ArtifactsByRepositoryConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryContentStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * SimpleRepositoryStatisticsReportGenerator  *   * @version $Id: SimpleRepositoryStatisticsReportGenerator.java  *   * @plexus.component role="org.apache.maven.archiva.reporting.RepositoryStatisticsReportGenerator" role-hint="simple"  */
end_comment

begin_class
specifier|public
class|class
name|SimpleRepositoryStatisticsReportGenerator
implements|implements
name|RepositoryStatisticsReportGenerator
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleRepositoryStatisticsReportGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
comment|/**      * {@inheritDoc}      *       * @see org.apache.maven.archiva.reporting.RepositoryStatisticsReportGenerator#generateReport(java.util.List      *      repoContentStats, java.util.String repository, java.util.Date startDate, java.util.Date endDate,      *      org.apache.maven.archiva.reporting.DataLimits limits )      */
specifier|public
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|generateReport
parameter_list|(
name|List
argument_list|<
name|RepositoryContentStatistics
argument_list|>
name|repoContentStats
parameter_list|,
name|String
name|repository
parameter_list|,
name|Date
name|startDate
parameter_list|,
name|Date
name|endDate
parameter_list|,
name|DataLimits
name|limits
parameter_list|)
throws|throws
name|ArchivaReportException
block|{
if|if
condition|(
name|limits
operator|.
name|getCurrentPage
argument_list|()
operator|>
name|limits
operator|.
name|getCountOfPages
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArchivaReportException
argument_list|(
literal|"The requested page exceeds the total number of pages."
argument_list|)
throw|;
block|}
name|int
name|start
init|=
operator|(
name|limits
operator|.
name|getPerPageCount
argument_list|()
operator|*
name|limits
operator|.
name|getCurrentPage
argument_list|()
operator|)
operator|-
name|limits
operator|.
name|getPerPageCount
argument_list|()
decl_stmt|;
name|int
name|end
init|=
operator|(
name|start
operator|+
name|limits
operator|.
name|getPerPageCount
argument_list|()
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|repoContentStats
operator|.
name|size
argument_list|()
condition|)
block|{
name|end
operator|=
name|repoContentStats
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|constructRepositoryStatistics
argument_list|(
name|repoContentStats
argument_list|,
name|repository
argument_list|,
name|endDate
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *       * @see org.apache.maven.archiva.reporting.RepositoryStatisticsReportGenerator#generateReport(java.util.List      *      repoContentStats, java.util.String repository, java.util.Date startDate, java.util.Date endDate, boolean firstStatsOnly)      */
specifier|public
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|generateReport
parameter_list|(
name|List
argument_list|<
name|RepositoryContentStatistics
argument_list|>
name|repoContentStats
parameter_list|,
name|String
name|repository
parameter_list|,
name|Date
name|startDate
parameter_list|,
name|Date
name|endDate
parameter_list|,
name|boolean
name|firstStatsOnly
parameter_list|)
throws|throws
name|ArchivaReportException
block|{
if|if
condition|(
name|firstStatsOnly
condition|)
block|{
return|return
name|constructRepositoryStatistics
argument_list|(
name|repoContentStats
argument_list|,
name|repository
argument_list|,
name|endDate
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|constructRepositoryStatistics
argument_list|(
name|repoContentStats
argument_list|,
name|repository
argument_list|,
name|endDate
argument_list|,
literal|0
argument_list|,
name|repoContentStats
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|constructRepositoryStatistics
parameter_list|(
name|List
argument_list|<
name|RepositoryContentStatistics
argument_list|>
name|repoContentStats
parameter_list|,
name|String
name|repository
parameter_list|,
name|Date
name|endDate
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|ArtifactDAO
name|artifactDao
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|repoStatisticsList
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryStatistics
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|RepositoryContentStatistics
name|repoContentStat
init|=
operator|(
name|RepositoryContentStatistics
operator|)
name|repoContentStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RepositoryStatistics
name|repoStatistics
init|=
operator|new
name|RepositoryStatistics
argument_list|()
decl_stmt|;
name|repoStatistics
operator|.
name|setRepositoryId
argument_list|(
name|repository
argument_list|)
expr_stmt|;
comment|// get only the latest
name|repoStatistics
operator|.
name|setArtifactCount
argument_list|(
name|repoContentStat
operator|.
name|getTotalArtifactCount
argument_list|()
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setGroupCount
argument_list|(
name|repoContentStat
operator|.
name|getTotalGroupCount
argument_list|()
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setProjectCount
argument_list|(
name|repoContentStat
operator|.
name|getTotalProjectCount
argument_list|()
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setTotalSize
argument_list|(
name|repoContentStat
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setFileCount
argument_list|(
name|repoContentStat
operator|.
name|getTotalFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setDateOfScan
argument_list|(
name|repoContentStat
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//TODO use the repo content stats whenGathered date instead of endDate for single repo reports
name|List
name|types
init|=
name|artifactDao
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsByRepositoryConstraint
argument_list|(
name|repository
argument_list|,
name|JAR_TYPE
argument_list|,
name|endDate
argument_list|,
literal|"whenGathered"
argument_list|)
argument_list|)
decl_stmt|;
name|repoStatistics
operator|.
name|setJarCount
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|=
name|artifactDao
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsByRepositoryConstraint
argument_list|(
name|repository
argument_list|,
name|WAR_TYPE
argument_list|,
name|endDate
argument_list|,
literal|"whenGathered"
argument_list|)
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setWarCount
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|=
name|artifactDao
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsByRepositoryConstraint
argument_list|(
name|repository
argument_list|,
name|MAVEN_PLUGIN
argument_list|,
name|endDate
argument_list|,
literal|"whenGathered"
argument_list|)
argument_list|)
expr_stmt|;
name|repoStatistics
operator|.
name|setPluginCount
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: must need to be able to track archetypes. possible way of identifying an
comment|//      archetype is by checking if archetype.xml exists in src/main/resources/META-INF/
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occurred while querying artifacts from the database."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|repoStatisticsList
operator|.
name|add
argument_list|(
name|repoStatistics
argument_list|)
expr_stmt|;
block|}
return|return
name|repoStatisticsList
return|;
block|}
specifier|public
name|void
name|setDao
parameter_list|(
name|ArchivaDAO
name|dao
parameter_list|)
block|{
name|this
operator|.
name|dao
operator|=
name|dao
expr_stmt|;
block|}
block|}
end_class

end_unit

