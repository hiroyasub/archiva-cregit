begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|CqlSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|cql
operator|.
name|ColumnDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|cql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|cql
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|metadata
operator|.
name|schema
operator|.
name|ClusteringOrder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|delete
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|insert
operator|.
name|Insert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|insert
operator|.
name|RegularInsert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|select
operator|.
name|Select
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|update
operator|.
name|Update
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|update
operator|.
name|UpdateStart
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|update
operator|.
name|UpdateWithAssignments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|QueryParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|FacetedMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|AbstractMetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ArtifactMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|MetadataFacetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ProjectVersionMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|modelmapper
operator|.
name|ModelMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|QueryBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ModelInfo
operator|.
name|STORAGE_TZ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ColumnNames
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 2.0.0  */
end_comment

begin_class
specifier|public
class|class
name|CassandraMetadataRepository
extends|extends
name|AbstractMetadataRepository
implements|implements
name|MetadataRepository
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACT_METADATA_MODEL_KEY
init|=
literal|"\"artifactMetadataModel.key\""
decl_stmt|;
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|( )
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CassandraArchivaManager
name|cassandraArchivaManager
decl_stmt|;
specifier|public
name|CassandraMetadataRepository
parameter_list|(
name|MetadataService
name|metadataService
parameter_list|,
name|CassandraArchivaManager
name|cassandraArchivaManager
parameter_list|)
block|{
name|super
argument_list|(
name|metadataService
argument_list|)
expr_stmt|;
name|this
operator|.
name|cassandraArchivaManager
operator|=
name|cassandraArchivaManager
expr_stmt|;
block|}
comment|/**      * if the repository doesn't exist it will be created      *      * @param repositoryId      * @return      */
specifier|public
name|Repository
name|getOrCreateRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|cf
argument_list|)
operator|.
name|column
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|qResult
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|Row
name|row
init|=
name|qResult
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|Repository
name|repository
init|=
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|cf
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repository
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
return|return
operator|new
name|Repository
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Repository
name|getRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|Row
name|row
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
return|return
name|row
operator|!=
literal|null
condition|?
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
else|:
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Namespace
name|updateOrAddNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Repository
name|repository
init|=
name|getOrCreateRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|namespace
operator|=
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|cf
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|namespace
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repository
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|namespace
return|;
block|}
specifier|protected
name|Namespace
name|getNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|Row
name|row
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Namespace
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Repository
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|( )
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
comment|//
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|build
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|pTable
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|Delete
name|delete
init|=
name|deleteFrom
argument_list|(
name|pTable
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
specifier|final
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|deleteTable
init|=
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|( )
decl_stmt|;
name|Delete
name|delete
init|=
name|deleteFrom
argument_list|(
name|deleteTable
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dTable
range|:
name|tables
control|)
block|{
name|deleteRows
operator|=
name|selectFrom
argument_list|(
name|dTable
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
expr_stmt|;
name|result
operator|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|dTable
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(  )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"."
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
comment|// FIXME this one need peformance improvement maybe a cache?
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChildNamespaces
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|String
name|calledNs
init|=
name|namespaceId
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|namespaceId
else|:
name|namespaceId
operator|+
literal|"."
decl_stmt|;
specifier|final
name|int
name|nslen
init|=
name|calledNs
operator|.
name|length
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|get
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|namespace
lambda|->
name|namespace
operator|.
name|length
argument_list|( )
operator|>
name|nslen
operator|&&
name|namespace
operator|.
name|startsWith
argument_list|(
name|calledNs
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|namespace
lambda|->
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|namespace
argument_list|,
name|calledNs
argument_list|)
argument_list|,
literal|"."
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
comment|// only use for testing purpose
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|get
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProject
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|ProjectMetadata
name|projectMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|one
argument_list|( )
operator|==
literal|null
condition|)
block|{
name|Namespace
name|namespace
init|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withProjectId
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|table
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|projectMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectMetadata
operator|.
name|hasProperties
argument_list|( )
condition|)
block|{
name|UpdateStart
name|update
init|=
name|update
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|UpdateWithAssignments
name|newUpdat
init|=
literal|null
decl_stmt|;
specifier|final
name|Properties
name|props
init|=
name|projectMetadata
operator|.
name|getProperties
argument_list|( )
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|props
operator|.
name|stringPropertyNames
argument_list|( )
control|)
block|{
name|newUpdat
operator|=
name|update
operator|.
name|setMapValue
argument_list|(
name|PROJECT_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|propKey
argument_list|)
argument_list|,
name|literal
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Update
name|finalUpdate
init|=
name|newUpdat
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|finalUpdate
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|get
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProject
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|( )
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
comment|//
operator|.
name|build
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|( )
decl_stmt|;
name|Delete
name|delete
init|=
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
expr_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|result
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|removeMailingList
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
argument_list|,
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dTable
range|:
name|tables
control|)
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|dTable
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|result
operator|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|dTable
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|get
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|Row
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|result
operator|.
name|getMap
argument_list|(
name|PROJECT_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Properties
name|pProps
init|=
operator|new
name|Properties
argument_list|( )
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|pProps
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|projectMetadata
operator|.
name|setProperties
argument_list|(
name|pProps
argument_list|)
expr_stmt|;
return|return
name|projectMetadata
return|;
block|}
block|}
block|}
specifier|protected
name|ProjectVersionMetadataModel
name|mapProjectVersionMetadataModel
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
operator|new
name|ProjectVersionMetadataModel
argument_list|( )
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setId
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDescription
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|DESCRIPTION
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setName
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Namespace
name|namespace
init|=
operator|new
name|Namespace
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
comment|//
operator|new
name|Repository
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIncomplete
argument_list|(
name|row
operator|.
name|getBoolean
argument_list|(
literal|"incomplete"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setUrl
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|projectVersionMetadataModel
return|;
block|}
specifier|protected
name|UpdateWithAssignments
name|addUpdate
parameter_list|(
name|UpdateWithAssignments
name|update
parameter_list|,
name|String
name|column
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|update
operator|.
name|setColumn
argument_list|(
name|column
argument_list|,
name|literal
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getProject
argument_list|(
name|repositorySession
argument_list|,
name|repositoryId
argument_list|,
name|namespaceId
argument_list|,
name|projectId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|updateProject
argument_list|(
name|repositorySession
argument_list|,
name|repositoryId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
decl_stmt|;
name|boolean
name|create
init|=
literal|true
decl_stmt|;
name|Row
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|projectVersionMetadataModel
operator|=
name|mapProjectVersionMetadataModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|create
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|projectVersionMetadataModel
operator|=
name|getModelMapper
argument_list|( )
operator|.
name|map
argument_list|(
name|versionMetadata
argument_list|,
name|ProjectVersionMetadataModel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setCiManagement
argument_list|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIssueManagement
argument_list|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setOrganization
argument_list|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setScm
argument_list|(
name|versionMetadata
operator|.
name|getScm
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setMailingLists
argument_list|(
name|versionMetadata
operator|.
name|getMailingLists
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDependencies
argument_list|(
name|versionMetadata
operator|.
name|getDependencies
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setLicenses
argument_list|(
name|versionMetadata
operator|.
name|getLicenses
argument_list|( )
argument_list|)
expr_stmt|;
comment|// we don't test, if repository and namespace really exist !
name|String
name|key
init|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|( )
comment|//
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|( )
argument_list|)
comment|//
operator|.
name|withId
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
comment|//
operator|.
name|build
argument_list|( )
decl_stmt|;
comment|// Update is upsert
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
expr_stmt|;
name|UpdateWithAssignments
name|update
init|=
name|update
argument_list|(
name|table
argument_list|)
operator|.
name|setColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|DESCRIPTION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|versionMetadata
operator|.
name|getDescription
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|versionMetadata
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
literal|"incomplete"
argument_list|,
name|literal
argument_list|(
name|versionMetadata
operator|.
name|isIncomplete
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|versionMetadata
operator|.
name|getUrl
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|CiManagement
name|ci
init|=
name|versionMetadata
operator|.
name|getCiManagement
argument_list|( )
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|update
operator|=
name|update
operator|.
name|setColumn
argument_list|(
literal|"\"ciManagement.system\""
argument_list|,
name|literal
argument_list|(
name|ci
operator|.
name|getSystem
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
literal|"\"ciManagement.url\""
argument_list|,
name|literal
argument_list|(
name|ci
operator|.
name|getUrl
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|IssueManagement
name|issueManagement
init|=
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|( )
decl_stmt|;
if|if
condition|(
name|issueManagement
operator|!=
literal|null
condition|)
block|{
name|update
operator|=
name|update
operator|.
name|setColumn
argument_list|(
literal|"\"issueManagement.system\""
argument_list|,
name|literal
argument_list|(
name|issueManagement
operator|.
name|getSystem
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
literal|"\"issueManagement.url\""
argument_list|,
name|literal
argument_list|(
name|issueManagement
operator|.
name|getUrl
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|Organization
name|organization
init|=
name|versionMetadata
operator|.
name|getOrganization
argument_list|( )
decl_stmt|;
if|if
condition|(
name|organization
operator|!=
literal|null
condition|)
block|{
name|update
operator|=
name|update
operator|.
name|setColumn
argument_list|(
literal|"\"organization.name\""
argument_list|,
name|literal
argument_list|(
name|organization
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
literal|"\"organization.url\""
argument_list|,
name|literal
argument_list|(
name|organization
operator|.
name|getUrl
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|Scm
name|scm
init|=
name|versionMetadata
operator|.
name|getScm
argument_list|( )
decl_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|update
operator|=
name|update
operator|.
name|setColumn
argument_list|(
literal|"\"scm.url\""
argument_list|,
name|literal
argument_list|(
name|scm
operator|.
name|getUrl
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
literal|"\"scm.connection\""
argument_list|,
name|literal
argument_list|(
name|scm
operator|.
name|getConnection
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
literal|"\"scm.developerConnection\""
argument_list|,
name|literal
argument_list|(
name|scm
operator|.
name|getDeveloperConnection
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
operator|&&
name|versionMetadata
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|versionMetadata
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|update
operator|=
name|update
operator|.
name|setMapValue
argument_list|(
name|VERSION_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Update
name|finalUpdate
init|=
name|update
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|finalUpdate
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|create
condition|)
block|{
name|removeMailingList
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|removeLicenses
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|removeDependencies
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|recordMailingList
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getMailingLists
argument_list|( )
argument_list|)
expr_stmt|;
name|recordLicenses
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getLicenses
argument_list|( )
argument_list|)
expr_stmt|;
name|recordDependencies
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getDependencies
argument_list|( )
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|( )
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|updateFacets
argument_list|(
name|versionMetadata
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|Row
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|key
init|=
name|result
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
decl_stmt|;
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|projectVersionMetadata
operator|.
name|setId
argument_list|(
name|result
operator|.
name|getString
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setDescription
argument_list|(
name|result
operator|.
name|getString
argument_list|(
name|DESCRIPTION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setName
argument_list|(
name|result
operator|.
name|getString
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setIncomplete
argument_list|(
name|result
operator|.
name|getBoolean
argument_list|(
literal|"incomplete"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setUrl
argument_list|(
name|result
operator|.
name|getString
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|String
name|ciUrl
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"ciManagement.url\""
argument_list|)
decl_stmt|;
name|String
name|ciSystem
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"ciManagement.system\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ciSystem
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ciUrl
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setCiManagement
argument_list|(
operator|new
name|CiManagement
argument_list|(
name|ciSystem
argument_list|,
name|ciUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|issueUrl
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"issueManagement.url\""
argument_list|)
decl_stmt|;
name|String
name|issueSystem
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"issueManagement.system\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|issueSystem
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|issueUrl
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setIssueManagement
argument_list|(
operator|new
name|IssueManagement
argument_list|(
name|issueSystem
argument_list|,
name|issueUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|organizationUrl
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"organization.url\""
argument_list|)
decl_stmt|;
name|String
name|organizationName
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"organization.name\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|organizationUrl
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|organizationName
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setOrganization
argument_list|(
operator|new
name|Organization
argument_list|(
name|organizationName
argument_list|,
name|organizationUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|devConn
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"scm.developerConnection\""
argument_list|)
decl_stmt|;
name|String
name|conn
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"scm.connection\""
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|result
operator|.
name|getString
argument_list|(
literal|"\"scm.url\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|devConn
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|conn
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setScm
argument_list|(
operator|new
name|Scm
argument_list|(
name|conn
argument_list|,
name|devConn
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|projectVersionMetadata
operator|.
name|setMailingLists
argument_list|(
name|getMailingLists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setLicenses
argument_list|(
name|getLicenses
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setDependencies
argument_list|(
name|getDependencies
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// Facets
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
expr_stmt|;
name|query
operator|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
expr_stmt|;
name|ResultSet
name|rows
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metadataFacetsPerFacetIds
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|rows
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|Collectors
operator|.
name|toMap
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadataFacetsPerFacetIds
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|metadataFacetsPerFacetIds
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|MetadataFacetFactory
argument_list|<
name|?
argument_list|>
name|metadataFacetFactory
init|=
name|getFacetFactory
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|( )
decl_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|projectVersionMetadata
return|;
block|}
block|}
specifier|protected
name|void
name|recordChecksums
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|artifactMetadataKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
parameter_list|)
block|{
if|if
condition|(
name|checksums
operator|==
literal|null
operator|||
name|checksums
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return;
block|}
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getChecksumFamilyName
argument_list|( )
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|checksums
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|String
name|key
init|=
name|getChecksumKey
argument_list|(
name|artifactMetadataKey
argument_list|,
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
decl_stmt|;
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|table
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|ARTIFACT_METADATA_MODEL_KEY
argument_list|,
name|literal
argument_list|(
name|artifactMetadataKey
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|CHECKSUM_ALG
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|CHECKSUM_VALUE
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getChecksumKey
parameter_list|(
name|String
name|metadataKey
parameter_list|,
name|String
name|checksumAlg
parameter_list|)
block|{
return|return
name|metadataKey
operator|+
literal|"."
operator|+
name|checksumAlg
return|;
block|}
specifier|protected
name|void
name|removeChecksums
parameter_list|(
name|String
name|artifactMetadataKey
parameter_list|)
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getChecksumFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|ARTIFACT_METADATA_MODEL_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|artifactMetadataKey
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(  )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getChecksums
parameter_list|(
name|String
name|artifactMetadataKey
parameter_list|)
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getChecksumFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|ARTIFACT_METADATA_MODEL_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|artifactMetadataKey
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|CHECKSUM_ALG
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|CHECKSUM_VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|recordMailingList
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|,
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
parameter_list|)
block|{
if|if
condition|(
name|mailingLists
operator|==
literal|null
operator|||
name|mailingLists
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return;
block|}
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|( )
decl_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|mailingLists
control|)
block|{
comment|// we don't care about the key as the real used one with the projectVersionMetadata
name|String
name|keyMailingList
init|=
name|UUID
operator|.
name|randomUUID
argument_list|( )
operator|.
name|toString
argument_list|( )
decl_stmt|;
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|table
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|keyMailingList
argument_list|)
argument_list|)
decl_stmt|;
name|insert
operator|=
name|insert
operator|.
name|value
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|,
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|mailingList
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"mainArchiveUrl"
argument_list|,
name|literal
argument_list|(
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"postAddress"
argument_list|,
name|literal
argument_list|(
name|mailingList
operator|.
name|getPostAddress
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"subscribeAddress"
argument_list|,
name|literal
argument_list|(
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"unsubscribeAddress"
argument_list|,
name|literal
argument_list|(
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"otherArchive"
argument_list|,
name|literal
argument_list|(
name|mailingList
operator|.
name|getOtherArchives
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|removeMailingList
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|MailingList
name|getMailingList
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|( )
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setMainArchiveUrl
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"mainArchiveUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setPostAddress
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"postAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setSubscribeAddress
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"subscribeAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setUnsubscribeAddress
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"unsubscribeAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|row
operator|.
name|getList
argument_list|(
literal|"otherArchive"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mailingList
return|;
block|}
specifier|protected
name|List
argument_list|<
name|MailingList
argument_list|>
name|getMailingLists
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getMailingList
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|recordLicenses
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|,
name|List
argument_list|<
name|License
argument_list|>
name|licenses
parameter_list|)
block|{
if|if
condition|(
name|licenses
operator|==
literal|null
operator|||
name|licenses
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return;
block|}
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
for|for
control|(
name|License
name|license
range|:
name|licenses
control|)
block|{
comment|// we don't care about the key as the real used one with the projectVersionMetadata
name|String
name|keyLicense
init|=
name|UUID
operator|.
name|randomUUID
argument_list|( )
operator|.
name|toString
argument_list|( )
decl_stmt|;
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|table
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|keyLicense
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|,
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|license
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|license
operator|.
name|getUrl
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|removeLicenses
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|License
argument_list|>
name|getLicenses
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
operator|new
name|License
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
operator|.
name|getString
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|recordDependencies
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|,
name|String
name|repositoryId
parameter_list|)
block|{
if|if
condition|(
name|dependencies
operator|==
literal|null
operator|||
name|dependencies
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return;
block|}
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
for|for
control|(
name|Dependency
name|dependency
range|:
name|dependencies
control|)
block|{
comment|// we don't care about the key as the real used one with the projectVersionMetadata
name|String
name|keyDependency
init|=
name|UUID
operator|.
name|randomUUID
argument_list|( )
operator|.
name|toString
argument_list|( )
decl_stmt|;
name|RegularInsert
name|insert
init|=
name|insertInto
argument_list|(
name|table
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|keyDependency
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|,
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"classifier"
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getClassifier
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"optional"
argument_list|,
name|literal
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|dependency
operator|.
name|isOptional
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"scope"
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getScope
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"systemPath"
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getSystemPath
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"type"
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getType
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|ARTIFACT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|GROUP_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getNamespace
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|removeDependencies
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Dependency
name|newDependency
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|( )
decl_stmt|;
name|dependency
operator|.
name|setClassifier
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"classifier"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"optional"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"scope"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setSystemPath
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"systemPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|row
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setArtifactId
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|ARTIFACT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setNamespace
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|GROUP_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dependency
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Dependency
argument_list|>
name|getDependencies
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersionMetadataKey
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|newDependency
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapChecksums
parameter_list|(
name|Map
argument_list|<
name|ChecksumAlgorithm
argument_list|,
name|String
argument_list|>
name|checksums
parameter_list|)
block|{
return|return
name|checksums
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|( )
operator|.
name|name
argument_list|( )
argument_list|,
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|ChecksumAlgorithm
argument_list|,
name|String
argument_list|>
name|mapChecksumsReverse
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
parameter_list|)
block|{
return|return
name|checksums
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|ChecksumAlgorithm
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getKey
argument_list|( )
argument_list|)
argument_list|,
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifactMeta
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|updateProject
argument_list|(
name|repositorySession
argument_list|,
name|repositoryId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProject
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|String
name|table
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Update
name|update
init|=
name|update
argument_list|(
name|table
argument_list|)
operator|.
name|setColumn
argument_list|(
name|ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getProject
argument_list|( )
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|FILE_LAST_MODIFIED
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|( )
operator|.
name|toInstant
argument_list|( )
operator|.
name|toEpochMilli
argument_list|( )
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
name|SIZE
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getSize
argument_list|( )
argument_list|)
argument_list|)
comment|//
operator|.
name|setColumn
argument_list|(
operator|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
operator|)
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|toInstant
argument_list|( )
operator|.
name|toEpochMilli
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|update
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|wasApplied
argument_list|( )
expr_stmt|;
name|removeChecksums
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|recordChecksums
argument_list|(
name|repositoryId
argument_list|,
name|key
argument_list|,
name|mapChecksums
argument_list|(
name|artifactMeta
operator|.
name|getChecksums
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|( )
comment|//
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withProjectVersion
argument_list|(
name|projectVersion
argument_list|)
comment|//
operator|.
name|withId
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|( )
argument_list|)
comment|//
operator|.
name|build
argument_list|( )
expr_stmt|;
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
expr_stmt|;
name|Insert
name|insert
init|=
name|insertInto
argument_list|(
name|table
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|namespaceId
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|insert
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|( )
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setFileLastModified
argument_list|(
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|( )
operator|==
literal|null
condition|?
name|ZonedDateTime
operator|.
name|now
argument_list|( )
operator|.
name|toInstant
argument_list|( )
operator|.
name|toEpochMilli
argument_list|( )
else|:
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|( )
operator|.
name|toInstant
argument_list|( )
operator|.
name|toEpochMilli
argument_list|( )
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setChecksums
argument_list|(
name|mapChecksums
argument_list|(
name|artifactMeta
operator|.
name|getChecksums
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
comment|// now facets
name|updateFacets
argument_list|(
name|artifactMeta
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
comment|/*      * iterate over available facets to remove/add from the artifactMetadata      *      * @param facetedMetadata      * @param artifactMetadataModel only use for the key      */
specifier|private
name|void
name|updateFacets
parameter_list|(
specifier|final
name|FacetedMetadata
name|facetedMetadata
parameter_list|,
specifier|final
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
for|for
control|(
specifier|final
name|String
name|facetId
range|:
name|getSupportedFacets
argument_list|( )
control|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|facetedMetadata
operator|.
name|getFacet
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|!=
literal|null
condition|)
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getProject
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|( )
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|resultSet
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|forEach
argument_list|(
name|key
lambda|->
block|{
name|Delete
name|delete
operator|=
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block_content|)
empty_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|metadataFacet
operator|.
name|toProperties
argument_list|( )
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
operator|.
name|withArtifactMetadataModel
argument_list|(
name|artifactMetadataModel
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|facetId
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|Update
name|update
init|=
name|update
argument_list|(
name|table
argument_list|)
operator|.
name|setColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getProject
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|update
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
unit|}       @
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Spliterator
argument_list|<
name|T
argument_list|>
name|createResultSpliterator
parameter_list|(
name|ResultSet
name|result
parameter_list|,
name|BiFunction
argument_list|<
name|Row
argument_list|,
name|T
argument_list|,
name|T
argument_list|>
name|converter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Iterator
argument_list|<
name|Row
argument_list|>
name|it
init|=
name|result
operator|.
name|iterator
argument_list|( )
decl_stmt|;
return|return
operator|new
name|Spliterator
argument_list|<
name|T
argument_list|>
argument_list|( )
block|{
specifier|private
name|T
name|lastItem
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|tryAdvance
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|T
argument_list|>
name|action
parameter_list|)
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|( )
condition|)
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|( )
condition|)
block|{
name|Row
name|row
init|=
name|it
operator|.
name|next
argument_list|( )
decl_stmt|;
name|T
name|item
init|=
name|converter
operator|.
name|apply
argument_list|(
name|row
argument_list|,
name|lastItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
operator|&&
name|lastItem
operator|!=
literal|null
operator|&&
name|item
operator|!=
name|lastItem
condition|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|lastItem
argument_list|)
expr_stmt|;
name|lastItem
operator|=
name|item
expr_stmt|;
return|return
literal|true
return|;
block|}
name|lastItem
operator|=
name|item
expr_stmt|;
block|}
name|action
operator|.
name|accept
argument_list|(
name|lastItem
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Spliterator
argument_list|<
name|T
argument_list|>
name|trySplit
parameter_list|( )
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateSize
parameter_list|( )
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|characteristics
parameter_list|( )
block|{
return|return
name|ORDERED
operator|+
name|NONNULL
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|Comparator
argument_list|<
name|T
argument_list|>
name|getFacetComparator
parameter_list|(
name|boolean
name|ascending
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|T
argument_list|>
argument_list|( )
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
return|return
name|ascending
condition|?
name|o1
operator|.
name|getName
argument_list|( )
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|( )
argument_list|)
else|:
name|o2
operator|.
name|getName
argument_list|( )
operator|.
name|compareTo
argument_list|(
name|o1
operator|.
name|getName
argument_list|( )
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Implementation is not very performant, because sorting is part of the stream. I do not know how to specify the sort      * in the query.      *      * @param<T>      * @param repositorySession      * @param repositoryId      * @param facetClazz      * @param queryParameter      * @return      * @throws MetadataRepositoryException      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|Stream
argument_list|<
name|T
argument_list|>
name|getMetadataFacetStream
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|facetClazz
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|metadataFacetFactory
init|=
name|getFacetFactory
argument_list|(
name|facetClazz
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetId
init|=
name|metadataFacetFactory
operator|.
name|getFacetId
argument_list|( )
decl_stmt|;
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|,
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|createResultSpliterator
argument_list|(
name|result
argument_list|,
parameter_list|(
name|Row
name|row
parameter_list|,
name|T
name|lastItem
parameter_list|)
lambda|->
block|{
name|String
name|name
init|=
name|row
operator|.
name|getString
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|row
operator|.
name|getString
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|getString
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|T
name|updateItem
decl_stmt|;
if|if
condition|(
name|lastItem
operator|!=
literal|null
operator|&&
name|lastItem
operator|.
name|getName
argument_list|( )
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|updateItem
operator|=
name|lastItem
expr_stmt|;
block|}
else|else
block|{
name|updateItem
operator|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updateItem
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|updateItem
return|;
block|}
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|sorted
argument_list|(
name|getFacetComparator
argument_list|(
name|queryParameter
operator|.
name|isAscending
argument_list|()
argument_list|)
argument_list|)
operator|.
name|skip
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|( )
argument_list|)
operator|.
name|limit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
operator|!
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|.
name|isEmpty
argument_list|( )
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|T
name|getMetadataFacet
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|facetClazz
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|metadataFacetFactory
init|=
name|getFacetFactory
argument_list|(
name|facetClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|facetId
init|=
name|metadataFacetFactory
operator|.
name|getFacetId
argument_list|( )
decl_stmt|;
specifier|final
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|T
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|column
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getAvailableWithoutFetching
argument_list|( )
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|row
lambda|->
operator|!
name|row
operator|.
name|isNull
argument_list|(
name|KEY
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|metadataFacet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|getMetadataFacet
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
name|getMetadataFacet
argument_list|(
name|repositorySession
argument_list|,
name|repositoryId
argument_list|,
name|getFactoryClassForId
argument_list|(
name|facetId
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|table
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|.
name|toProperties
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|( )
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Update
name|update
init|=
name|update
argument_list|(
name|table
argument_list|)
operator|.
name|setColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|update
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|( )
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|( )
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|Update
name|update
init|=
name|update
argument_list|(
name|table
argument_list|)
operator|.
name|setColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|setColumn
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|update
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|( )
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(  )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|facetId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|( )
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|ZonedDateTime
name|startTime
parameter_list|,
specifier|final
name|ZonedDateTime
name|endTime
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|long
name|start
init|=
name|startTime
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|startTime
operator|.
name|toInstant
argument_list|( )
operator|.
name|toEpochMilli
argument_list|( )
decl_stmt|;
name|long
name|end
init|=
name|endTime
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|endTime
operator|.
name|toInstant
argument_list|( )
operator|.
name|toEpochMilli
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|literal
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|literal
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|mapArtifactMetadata
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * For documentation see {@link MetadataRepository#getArtifactByDateRangeStream(RepositorySession, String, ZonedDateTime, ZonedDateTime, QueryParameter)}      *<p>      * This implementation orders the stream. It does not order the query in the backend.      *      * @param session        The repository session      * @param repositoryId   The repository id      * @param startTime      The start time, can be<code>null</code>      * @param endTime        The end time, can be<code>null</code>      * @param queryParameter Additional parameters for the query that affect ordering and number of returned results.      * @return      * @throws MetadataRepositoryException      * @see MetadataRepository#getArtifactByDateRangeStream      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactByDateRangeStream
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|ZonedDateTime
name|startTime
parameter_list|,
name|ZonedDateTime
name|endTime
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Comparator
argument_list|<
name|ArtifactMetadata
argument_list|>
name|comp
init|=
name|getArtifactMetadataComparator
argument_list|(
name|queryParameter
argument_list|,
literal|"whenGathered"
argument_list|)
decl_stmt|;
return|return
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|repositoryId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|queryParameter
argument_list|)
operator|.
name|stream
argument_list|( )
operator|.
name|sorted
argument_list|(
name|comp
argument_list|)
operator|.
name|skip
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|( )
argument_list|)
operator|.
name|limit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|ArtifactMetadata
name|mapArtifactMetadata
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactMetadata
argument_list|( )
decl_stmt|;
name|artifactMetadata
operator|.
name|setNamespace
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSize
argument_list|(
name|row
operator|.
name|getLong
argument_list|(
name|SIZE
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setId
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setFileLastModified
argument_list|(
name|row
operator|.
name|getLong
argument_list|(
name|FILE_LAST_MODIFIED
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setMd5
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|MD5
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProject
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProjectVersion
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setRepositoryId
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSha1
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|SHA1
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setVersion
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|whenGathered
init|=
name|row
operator|.
name|getLong
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|whenGathered
operator|!=
literal|null
condition|)
block|{
name|artifactMetadata
operator|.
name|setWhenGathered
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|whenGathered
argument_list|)
argument_list|,
name|STORAGE_TZ
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|artifactMetadata
operator|.
name|setChecksums
argument_list|(
name|mapChecksumsReverse
argument_list|(
name|getChecksums
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|artifactMetadata
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|checksum
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getChecksumFamilyName
argument_list|( )
decl_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
name|ARTIFACT_METADATA_MODEL_KEY
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|CHECKSUM_VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|checksum
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|artifactKeys
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|ARTIFACT_METADATA_MODEL_KEY
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|metadataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|artifactKeys
control|)
block|{
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
expr_stmt|;
name|query
operator|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Row
name|row
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|metadataList
operator|.
name|add
argument_list|(
name|mapArtifactMetadata
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metadataList
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Project version and artifact level metadata are stored in the same place, no distinctions in Cassandra      * implementation, just calls {@link MetadataRepository#getArtifactsByAttribute(RepositorySession, String, String, String)}      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByProjectVersionFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
name|this
operator|.
name|getArtifactsByAttribute
argument_list|(
name|session
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|repositoryId
argument_list|)
return|;
block|}
end_function

begin_function
name|MetadataFacetModel
name|mapMetadataFacet
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|MetadataFacetModel
name|metadataFacetModel
init|=
operator|new
name|MetadataFacetModel
argument_list|( )
decl_stmt|;
name|metadataFacetModel
operator|.
name|setFacetId
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setName
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setValue
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setKey
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setProjectVersion
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metadataFacetModel
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByAttribute
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|whereColumn
argument_list|(
name|KEY
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repositoryId
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
expr_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Row
argument_list|>
name|iterator
init|=
name|result
operator|.
name|iterator
argument_list|( )
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|( )
condition|)
block|{
name|Row
name|row
init|=
name|iterator
operator|.
name|next
argument_list|( )
decl_stmt|;
name|metadataFacetModels
operator|.
name|add
argument_list|(
name|mapMetadataFacet
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
expr_stmt|;
name|ResultSet
name|subResult
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|subResult
operator|.
name|forEach
argument_list|(
name|sRow
lambda|->
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|mapArtifactMetadata
argument_list|(
name|sRow
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mapArtifactFacetToArtifact
argument_list|(
name|metadataFacetModels
argument_list|,
name|artifactMetadatas
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByProjectVersionAttribute
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|searchKey
init|=
name|StringUtils
operator|.
name|wrapIfMissing
argument_list|(
name|key
argument_list|,
literal|'"'
argument_list|)
decl_stmt|;
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataColumns
argument_list|()
argument_list|,
name|key
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|whereColumn
argument_list|(
name|searchKey
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|query
operator|.
name|whereMapValue
argument_list|(
name|VERSION_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|,
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|( )
decl_stmt|;
name|Iterator
argument_list|<
name|Row
argument_list|>
name|iterator
init|=
name|result
operator|.
name|iterator
argument_list|( )
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|( )
condition|)
block|{
name|Row
name|row
init|=
name|iterator
operator|.
name|next
argument_list|( )
decl_stmt|;
try|try
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|getArtifacts
argument_list|(
name|repositorySession
argument_list|,
name|row
operator|.
name|getString
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
operator|.
name|getString
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|row
operator|.
name|getString
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
comment|// never raised
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|artifacts
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeTimestampedArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|project
argument_list|,
name|version
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withId
argument_list|(
name|id
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|version
argument_list|)
operator|.
name|withProject
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Delete
name|delete
init|=
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|( )
comment|//
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
comment|//
operator|.
name|withProjectId
argument_list|(
name|project
argument_list|)
comment|//
operator|.
name|withProjectVersion
argument_list|(
name|version
argument_list|)
comment|//
operator|.
name|withId
argument_list|(
name|id
argument_list|)
comment|//
operator|.
name|build
argument_list|( )
expr_stmt|;
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
expr_stmt|;
name|delete
operator|=
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeTimestampedArtifact
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeTimestampedArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|( )
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|artifactMetadata
operator|.
name|getProject
argument_list|( )
argument_list|,
name|baseVersion
argument_list|,
name|artifactMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|( )
operator|.
name|withRepositoryId
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|artifactMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|baseVersion
argument_list|)
operator|.
name|withProject
argument_list|(
name|artifactMetadata
operator|.
name|getProject
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Delete
name|delete
init|=
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeFacetFromArtifact
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Delete
name|delete
init|=
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|project
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|delete
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|mapArtifactMetadata
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|GROUP_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|ARTIFACT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dependenciesIds
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|dependenciesIds
control|)
block|{
name|query
operator|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Row
name|rowResult
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|one
argument_list|( )
decl_stmt|;
if|if
condition|(
name|rowResult
operator|!=
literal|null
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
operator|new
name|ProjectVersionReference
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|,
name|rowResult
operator|.
name|getString
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|rowResult
operator|.
name|getString
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|,
name|rowResult
operator|.
name|getString
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|references
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Row
argument_list|>
name|iterator
init|=
name|result
operator|.
name|iterator
argument_list|( )
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|( )
condition|)
block|{
name|Row
name|row
init|=
name|iterator
operator|.
name|next
argument_list|( )
decl_stmt|;
name|String
name|key
init|=
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|table
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|removeMailingList
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|removeLicenses
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|removeDependencies
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|deleteTable
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|deleteRows
init|=
name|selectFrom
argument_list|(
name|deleteTable
argument_list|)
operator|.
name|column
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|result
operator|=
name|session
operator|.
name|execute
argument_list|(
name|deleteRows
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|row
operator|.
name|getString
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|forEach
argument_list|(
name|delKey
lambda|->
name|session
operator|.
name|execute
argument_list|(
name|deleteFrom
argument_list|(
name|deleteTable
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|delKey
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|mapArtifactMetadata
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
name|table
operator|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|( )
expr_stmt|;
name|query
operator|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|all
argument_list|( )
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repoId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectId
argument_list|)
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|projectVersion
argument_list|)
argument_list|)
operator|.
name|allowFiltering
argument_list|()
expr_stmt|;
name|result
operator|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|facetMetadata
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|result
operator|.
name|spliterator
argument_list|( )
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|row
lambda|->
name|mapMetadataFacet
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|mapArtifactFacetToArtifact
argument_list|(
name|facetMetadata
argument_list|,
name|artifactMetadatas
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|mapArtifactFacetToArtifact
parameter_list|(
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
parameter_list|,
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ArtifactMetadata
name|artifactMetadata
range|:
name|artifactMetadatas
control|)
block|{
name|Iterator
argument_list|<
name|MetadataFacetModel
argument_list|>
name|iterator
init|=
name|metadataFacetModels
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|metadataFacetModel
lambda|->
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
return|return
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getVersion
argument_list|( )
argument_list|,
name|metadataFacetModel
operator|.
name|getProjectVersion
argument_list|( )
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
operator|.
name|iterator
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
name|metadataFacetValuesPerFacetId
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|( )
condition|)
block|{
name|MetadataFacetModel
name|metadataFacetModel
init|=
name|iterator
operator|.
name|next
argument_list|( )
decl_stmt|;
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|values
init|=
name|metadataFacetValuesPerFacetId
operator|.
name|get
argument_list|(
name|metadataFacetModel
operator|.
name|getName
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
expr_stmt|;
name|metadataFacetValuesPerFacetId
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|( )
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
name|entry
range|:
name|metadataFacetValuesPerFacetId
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|MetadataFacetFactory
argument_list|<
name|?
argument_list|>
name|metadataFacetFactory
init|=
name|getFacetFactory
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|facetModels
init|=
name|entry
operator|.
name|getValue
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|facetModels
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|facetModels
operator|.
name|size
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|MetadataFacetModel
name|metadataFacetModel
range|:
name|facetModels
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getKey
argument_list|( )
argument_list|,
name|metadataFacetModel
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|artifactMetadatas
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|( )
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
specifier|private
specifier|static
class|class
name|ModelMapperHolder
block|{
specifier|private
specifier|static
name|ModelMapper
name|MODEL_MAPPER
init|=
operator|new
name|ModelMapper
argument_list|( )
decl_stmt|;
block|}
end_class

begin_function
specifier|protected
name|ModelMapper
name|getModelMapper
parameter_list|( )
block|{
return|return
name|ModelMapperHolder
operator|.
name|MODEL_MAPPER
return|;
block|}
end_function

begin_comment
comment|/**      * This implementation just calls getArtifactsByAttribute( null, text, repositoryId ). We can't search artifacts by      * any property.      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|searchArtifacts
parameter_list|(
specifier|final
name|RepositorySession
name|session
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|boolean
name|exact
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
name|this
operator|.
name|getArtifactsByAttribute
argument_list|(
name|session
argument_list|,
literal|null
argument_list|,
name|text
argument_list|,
name|repositoryId
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * The exact parameter is ignored as we can't do non exact searches in Cassandra      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|searchArtifacts
parameter_list|(
specifier|final
name|RepositorySession
name|session
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|boolean
name|exact
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// TODO optimize
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|( )
decl_stmt|;
name|artifacts
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getArtifactsByAttribute
argument_list|(
name|session
argument_list|,
name|key
argument_list|,
name|text
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getArtifactsByProjectVersionAttribute
argument_list|(
name|session
argument_list|,
name|key
argument_list|,
name|text
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|artifacts
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactStream
parameter_list|(
specifier|final
name|RepositorySession
name|repositorySession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|CqlSession
name|session
init|=
name|cassandraArchivaManager
operator|.
name|getSession
argument_list|( )
decl_stmt|;
try|try
block|{
name|String
name|table
init|=
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|Select
name|query
init|=
name|selectFrom
argument_list|(
name|table
argument_list|)
operator|.
name|columns
argument_list|(
name|ArtifactMetadataModel
operator|.
name|COLUMNS
argument_list|)
operator|.
name|whereColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|literal
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|session
operator|.
name|execute
argument_list|(
name|query
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|createResultSpliterator
argument_list|(
name|result
argument_list|,
parameter_list|(
name|Row
name|row
parameter_list|,
name|ArtifactMetadata
name|last
parameter_list|)
lambda|->
name|mapArtifactMetadata
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|skip
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|( )
argument_list|)
operator|.
name|limit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|( )
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactStream
parameter_list|(
specifier|final
name|RepositorySession
name|session
parameter_list|,
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|,
specifier|final
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
comment|// Currently we have to align the facets with the artifacts, which means querying artifacts, querying facets and combining them.
comment|// I so no stream friendly way to do this, so we just use the collection based method and return the stream.
comment|// TODO: Maybe we can query the facets for each artifact separately, but not sure, if this affects performance significantly
comment|//       We need some data to verify this.
return|return
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
operator|.
name|stream
argument_list|( )
operator|.
name|skip
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|( )
argument_list|)
operator|.
name|limit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|( )
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

