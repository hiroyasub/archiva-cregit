begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|CqlSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|CqlSessionBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|config
operator|.
name|DefaultDriverOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|config
operator|.
name|DriverConfigLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|type
operator|.
name|DataTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|schema
operator|.
name|CreateIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|schema
operator|.
name|CreateKeyspace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|schema
operator|.
name|CreateTableWithOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySessionFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|querybuilder
operator|.
name|SchemaBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ColumnNames
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * FIXME make all configuration not hardcoded :-)  *  * @author Olivier Lamy  * @since 2.0.0  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"archivaEntityManagerFactory#cassandra"
argument_list|)
specifier|public
class|class
name|DefaultCassandraArchivaManager
implements|implements
name|CassandraArchivaManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultCassandraArchivaManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_NAME
init|=
literal|"archiva"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEYSPACE_NAME
init|=
literal|"ArchivaKeySpace"
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
comment|// configurable???
specifier|private
name|String
name|repositoryFamilyName
init|=
literal|"repository"
decl_stmt|;
specifier|private
name|String
name|namespaceFamilyName
init|=
literal|"namespace"
decl_stmt|;
specifier|private
name|String
name|projectFamilyName
init|=
name|PROJECT
operator|.
name|toString
argument_list|( )
decl_stmt|;
specifier|private
name|String
name|projectVersionMetadataFamilyName
init|=
literal|"projectversionmetadata"
decl_stmt|;
specifier|private
name|String
name|artifactMetadataFamilyName
init|=
literal|"artifactmetadata"
decl_stmt|;
specifier|private
name|String
name|metadataFacetFamilyName
init|=
literal|"metadatafacet"
decl_stmt|;
specifier|private
name|String
name|mailingListFamilyName
init|=
literal|"mailinglist"
decl_stmt|;
specifier|private
name|String
name|licenseFamilyName
init|=
literal|"license"
decl_stmt|;
specifier|private
name|String
name|dependencyFamilyName
init|=
literal|"dependency"
decl_stmt|;
specifier|private
name|String
name|checksumFamilyName
init|=
literal|"checksum"
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|projectVersionMetadataColumns
decl_stmt|;
static|static
block|{
name|projectVersionMetadataColumns
operator|=
operator|new
name|String
index|[]
block|{
name|DEFAULT_PRIMARY_KEY
block|,
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
block|,
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
block|,
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
block|,
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
block|,
name|DESCRIPTION
operator|.
name|toString
argument_list|( )
block|,
name|URL
operator|.
name|toString
argument_list|( )
block|,
name|NAME
operator|.
name|toString
argument_list|( )
block|,
name|VERSION
operator|.
name|toString
argument_list|( )
block|,
name|VERSION_PROPERTIES
operator|.
name|toString
argument_list|( )
block|,
literal|"incomplete"
block|,
literal|"ciManagement.system"
block|,
literal|"ciManagement.url"
block|,
literal|"issueManagement.system"
block|,
literal|"issueManagement.url"
block|,
literal|"organization.name"
block|,
literal|"organization.url"
block|,
literal|"scm.url"
block|,
literal|"scm.connection"
block|,
literal|"scm.developerConnection"
block|}
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|projectVersionMetadataColumns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Value
argument_list|(
literal|"${cassandra.host}"
argument_list|)
specifier|private
name|String
name|cassandraHost
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.port}"
argument_list|)
specifier|private
name|String
name|cassandraPort
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.maxActive}"
argument_list|)
specifier|private
name|int
name|maxActive
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.driverTimeoutMs}"
argument_list|)
specifier|private
name|int
name|driverTimeoutMs
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.readConsistencyLevel}"
argument_list|)
specifier|private
name|String
name|readConsistencyLevel
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.writeConsistencyLevel}"
argument_list|)
specifier|private
name|String
name|writeConsistencyLevel
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.replicationFactor}"
argument_list|)
specifier|private
name|int
name|replicationFactor
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.keyspace.name}"
argument_list|)
specifier|private
name|String
name|keyspaceName
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${cassandra.cluster.name}"
argument_list|)
specifier|private
name|String
name|clusterName
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositorySessionFactoryBean
name|repositorySessionFactoryBean
decl_stmt|;
name|DriverConfigLoader
name|configLoader
decl_stmt|;
name|CqlSession
name|cqlSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CqlSessionBuilder
name|getSessionBuilder
parameter_list|( )
block|{
return|return
name|CqlSession
operator|.
name|builder
argument_list|( )
operator|.
name|withConfigLoader
argument_list|(
name|configLoader
argument_list|)
operator|.
name|withKeyspace
argument_list|(
name|keyspaceName
argument_list|)
operator|.
name|withLocalDatacenter
argument_list|(
literal|"datacenter1"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CqlSession
name|getSession
parameter_list|( )
block|{
if|if
condition|(
name|cqlSession
operator|==
literal|null
operator|||
name|cqlSession
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|this
operator|.
name|cqlSession
operator|=
name|getSessionBuilder
argument_list|( )
operator|.
name|build
argument_list|( )
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cqlSession
return|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|( )
block|{
comment|// skip initialisation if not cassandra
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositorySessionFactoryBean
operator|.
name|getId
argument_list|( )
argument_list|,
literal|"cassandra"
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hostNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|hostNames
operator|.
name|add
argument_list|(
name|cassandraHost
operator|+
literal|":"
operator|+
name|cassandraPort
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Contact point: "
operator|+
name|cassandraHost
operator|+
literal|":"
operator|+
name|cassandraPort
argument_list|)
expr_stmt|;
name|configLoader
operator|=
name|DriverConfigLoader
operator|.
name|programmaticBuilder
argument_list|( )
operator|.
name|withStringList
argument_list|(
name|DefaultDriverOption
operator|.
name|CONTACT_POINTS
argument_list|,
name|hostNames
argument_list|)
operator|.
name|withInt
argument_list|(
name|DefaultDriverOption
operator|.
name|CONNECTION_POOL_LOCAL_SIZE
argument_list|,
name|maxActive
argument_list|)
operator|.
name|withInt
argument_list|(
name|DefaultDriverOption
operator|.
name|CONNECTION_POOL_REMOTE_SIZE
argument_list|,
name|maxActive
argument_list|)
comment|//.withInt( DefaultDriverOption.CONNECTION_MAX_REQUESTS, maxActive )
operator|.
name|withString
argument_list|(
name|DefaultDriverOption
operator|.
name|REQUEST_CONSISTENCY
argument_list|,
name|readConsistencyLevel
argument_list|)
operator|.
name|withDuration
argument_list|(
name|DefaultDriverOption
operator|.
name|REQUEST_TIMEOUT
argument_list|,
name|Duration
operator|.
name|ofMillis
argument_list|(
name|driverTimeoutMs
argument_list|)
argument_list|)
operator|.
name|build
argument_list|( )
expr_stmt|;
block|{
name|CreateKeyspace
name|cKeySpace
init|=
name|createKeyspace
argument_list|(
name|keyspaceName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withSimpleStrategy
argument_list|(
name|replicationFactor
argument_list|)
decl_stmt|;
name|CqlSession
operator|.
name|builder
argument_list|( )
operator|.
name|withConfigLoader
argument_list|(
name|configLoader
argument_list|)
operator|.
name|withLocalDatacenter
argument_list|(
literal|"datacenter1"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|execute
argument_list|(
name|cKeySpace
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|CqlSession
name|session
init|=
name|getSession
argument_list|( )
decl_stmt|;
block|{
comment|// namespace table
block|{
name|String
name|tableName
init|=
name|getNamespaceFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Repository Table
block|{
name|String
name|tableName
init|=
name|getRepositoryFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Project table
block|{
name|String
name|tableName
init|=
name|getProjectFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|frozenMapOf
argument_list|(
name|DataTypes
operator|.
name|TEXT
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Project Version Metadata Model
block|{
name|String
name|tableName
init|=
name|getProjectVersionMetadataFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|DESCRIPTION
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|URL
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|VERSION_PROPERTIES
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|mapOf
argument_list|(
name|DataTypes
operator|.
name|TEXT
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"incomplete"
argument_list|,
name|DataTypes
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"ciManagement.system\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"ciManagement.url\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"issueManagement.system\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"issueManagement.url\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"organization.name\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"organization.url\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"scm.url\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"scm.connection\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"scm.developerConnection\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|VERSION_PROPERTIES
operator|.
name|toString
argument_list|( )
operator|+
literal|"_idx"
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumnEntries
argument_list|(
name|VERSION_PROPERTIES
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Artifact Metadata Model
block|{
name|String
name|tableName
init|=
name|getArtifactMetadataFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|BIGINT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|SHA1
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|MD5
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|FILE_LAST_MODIFIED
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|BIGINT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|SIZE
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|BIGINT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|ID
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|SHA1
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|SHA1
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|MD5
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|MD5
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Metadata Facet Model
block|{
name|String
name|tableName
init|=
name|getMetadataFacetFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|KEY
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|WHEN_GATHERED
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|BIGINT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|FACET_ID
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|NAMESPACE_ID
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_ID
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|PROJECT_VERSION
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Checksum Table
block|{
name|String
name|tableName
init|=
name|getChecksumFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"artifactMetadataModel.key\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|CHECKSUM_ALG
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|CHECKSUM_VALUE
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
name|CHECKSUM_ALG
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|CHECKSUM_ALG
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|CHECKSUM_VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|CHECKSUM_VALUE
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Mailinglist Table
block|{
name|String
name|tableName
init|=
name|getMailingListFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"mainArchiveUrl"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"postAddress"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"subscribeAddress"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"unsubscribeAddress"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"otherArchive"
argument_list|,
name|DataTypes
operator|.
name|frozenListOf
argument_list|(
name|DataTypes
operator|.
name|TEXT
argument_list|)
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
literal|"\"projectVersionMetadataModel_key\""
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
literal|"\"\"projectVersionMetadataModel.key\"\""
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// License Table
block|{
name|String
name|tableName
init|=
name|getLicenseFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|NAME
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|URL
operator|.
name|toString
argument_list|()
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
literal|"\"projectVersionMetadataModel_key\""
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
literal|"\"\"projectVersionMetadataModel.key\"\""
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
comment|// Dependency Table
block|{
name|String
name|tableName
init|=
name|getDependencyFamilyName
argument_list|( )
decl_stmt|;
name|CreateTableWithOptions
name|table
init|=
name|createTable
argument_list|(
name|keyspaceName
argument_list|,
name|tableName
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|withPartitionKey
argument_list|(
name|CassandraArchivaManager
operator|.
name|DEFAULT_PRIMARY_KEY
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|REPOSITORY_NAME
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|GROUP_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|ARTIFACT_ID
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
name|VERSION
operator|.
name|toString
argument_list|( )
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"\"projectVersionMetadataModel.key\""
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"classifier"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"optional"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"scope"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"systemPath"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withColumn
argument_list|(
literal|"type"
argument_list|,
name|DataTypes
operator|.
name|TEXT
argument_list|)
operator|.
name|withCompactStorage
argument_list|( )
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|table
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|CreateIndex
name|index
init|=
name|createIndex
argument_list|(
literal|"groupIdIdx"
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
name|GROUP_ID
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
literal|"\"projectVersionMetadataModel_key\""
argument_list|)
operator|.
name|ifNotExists
argument_list|( )
operator|.
name|onTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|andColumn
argument_list|(
literal|"\"\"projectVersionMetadataModel.key\"\""
argument_list|)
expr_stmt|;
name|session
operator|.
name|execute
argument_list|(
name|index
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|( )
block|{
block|}
annotation|@
name|PreDestroy
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|cqlSession
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cqlSession
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|started
parameter_list|( )
block|{
return|return
name|started
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRepositoryFamilyName
parameter_list|( )
block|{
return|return
name|repositoryFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceFamilyName
parameter_list|( )
block|{
return|return
name|namespaceFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProjectFamilyName
parameter_list|( )
block|{
return|return
name|projectFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProjectVersionMetadataFamilyName
parameter_list|( )
block|{
return|return
name|projectVersionMetadataFamilyName
return|;
block|}
specifier|public
name|String
index|[]
name|getProjectVersionMetadataColumns
parameter_list|()
block|{
return|return
name|projectVersionMetadataColumns
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getArtifactMetadataFamilyName
parameter_list|( )
block|{
return|return
name|artifactMetadataFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetadataFacetFamilyName
parameter_list|( )
block|{
return|return
name|metadataFacetFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMailingListFamilyName
parameter_list|( )
block|{
return|return
name|mailingListFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLicenseFamilyName
parameter_list|( )
block|{
return|return
name|licenseFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDependencyFamilyName
parameter_list|( )
block|{
return|return
name|dependencyFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getChecksumFamilyName
parameter_list|( )
block|{
return|return
name|checksumFamilyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|DriverConfigLoader
name|getConfigLoader
parameter_list|( )
block|{
return|return
name|configLoader
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKeyspaceName
parameter_list|( )
block|{
return|return
name|keyspaceName
return|;
block|}
block|}
end_class

end_unit

