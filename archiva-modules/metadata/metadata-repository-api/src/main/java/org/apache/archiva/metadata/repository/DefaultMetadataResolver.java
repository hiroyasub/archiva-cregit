begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|filter
operator|.
name|ExcludesFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageMetadataResolver
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="org.apache.archiva.metadata.repository.MetadataResolver"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultMetadataResolver
implements|implements
name|MetadataResolver
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataRepository
name|metadataRepository
decl_stmt|;
comment|/**      * FIXME: this needs to be configurable based on storage type, and availability of proxy module      * ... could be a different type since we need methods to modify the storage metadata, which would also allow more      * appropriate methods to pass in the already determined repository configuration, for example, instead of the ID      *      * @plexus.requirement role-hint="maven2"      */
specifier|private
name|StorageMetadataResolver
name|storageResolver
decl_stmt|;
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
block|{
comment|// TODO: intercept
return|return
name|metadataRepository
operator|.
name|getProject
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
return|;
block|}
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolverException
block|{
name|ProjectVersionMetadata
name|metadata
init|=
name|metadataRepository
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
comment|// TODO: do we want to detect changes as well by comparing timestamps? isProjectVersionNewerThan(updated)
comment|//       in such cases we might also remove/update stale metadata, including adjusting plugin-based facets
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
name|storageResolver
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
comment|// FIXME: make this a more generic post-processing that plugins can take advantage of
comment|//       eg. maven projects should be able to process parent here
if|if
condition|(
operator|!
name|metadata
operator|.
name|getDependencies
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProjectVersionReference
name|ref
init|=
operator|new
name|ProjectVersionReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setProjectVersion
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setReferenceType
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|)
expr_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|metadata
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|metadataRepository
operator|.
name|updateProjectReference
argument_list|(
name|repoId
argument_list|,
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
name|metadataRepository
operator|.
name|updateProjectVersion
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metadata
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
comment|// TODO: intercept
return|return
name|metadataRepository
operator|.
name|getArtifactVersions
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
comment|// TODO: is this assumption correct? could a storage mech. actually know all references in a non-Maven scenario?
comment|// not passed to the storage mechanism as resolving references would require iterating all artifacts
return|return
name|metadataRepository
operator|.
name|getProjectReferences
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|metadataRepository
operator|.
name|getRootNamespaces
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|storageNamespaces
init|=
name|storageResolver
operator|.
name|getRootNamespaces
argument_list|(
name|repoId
argument_list|,
operator|new
name|ExcludesFilter
argument_list|<
name|String
argument_list|>
argument_list|(
name|namespaces
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageNamespaces
operator|!=
literal|null
operator|&&
operator|!
name|storageNamespaces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|n
range|:
name|storageNamespaces
control|)
block|{
name|metadataRepository
operator|.
name|updateNamespace
argument_list|(
name|repoId
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|namespaces
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|addAll
argument_list|(
name|storageNamespaces
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|metadataRepository
operator|.
name|getNamespaces
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|storageNamespaces
init|=
name|storageResolver
operator|.
name|getNamespaces
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
operator|new
name|ExcludesFilter
argument_list|<
name|String
argument_list|>
argument_list|(
name|namespaces
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageNamespaces
operator|!=
literal|null
operator|&&
operator|!
name|storageNamespaces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|n
range|:
name|storageNamespaces
control|)
block|{
name|metadataRepository
operator|.
name|updateNamespace
argument_list|(
name|repoId
argument_list|,
name|namespace
operator|+
literal|"."
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
name|namespaces
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|addAll
argument_list|(
name|storageNamespaces
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projects
init|=
name|metadataRepository
operator|.
name|getProjects
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|storageProjects
init|=
name|storageResolver
operator|.
name|getProjects
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
operator|new
name|ExcludesFilter
argument_list|<
name|String
argument_list|>
argument_list|(
name|projects
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageProjects
operator|!=
literal|null
operator|&&
operator|!
name|storageProjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|projectId
range|:
name|storageProjects
control|)
block|{
name|ProjectMetadata
name|projectMetadata
init|=
name|storageResolver
operator|.
name|getProject
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectMetadata
operator|!=
literal|null
condition|)
block|{
name|metadataRepository
operator|.
name|updateProject
argument_list|(
name|repoId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
block|}
block|}
name|projects
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|projects
argument_list|)
expr_stmt|;
name|projects
operator|.
name|addAll
argument_list|(
name|storageProjects
argument_list|)
expr_stmt|;
block|}
return|return
name|projects
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolverException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projectVersions
init|=
name|metadataRepository
operator|.
name|getProjectVersions
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|storageProjectVersions
init|=
name|storageResolver
operator|.
name|getProjectVersions
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
operator|new
name|ExcludesFilter
argument_list|<
name|String
argument_list|>
argument_list|(
name|projectVersions
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageProjectVersions
operator|!=
literal|null
operator|&&
operator|!
name|storageProjectVersions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|projectVersion
range|:
name|storageProjectVersions
control|)
block|{
name|ProjectVersionMetadata
name|versionMetadata
init|=
name|storageResolver
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionMetadata
operator|!=
literal|null
condition|)
block|{
name|metadataRepository
operator|.
name|updateProjectVersion
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|versionMetadata
argument_list|)
expr_stmt|;
block|}
block|}
name|projectVersions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|projectVersions
argument_list|)
expr_stmt|;
name|projectVersions
operator|.
name|addAll
argument_list|(
name|storageProjectVersions
argument_list|)
expr_stmt|;
block|}
return|return
name|projectVersions
return|;
block|}
block|}
end_class

end_unit

