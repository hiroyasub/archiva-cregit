begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SpringJavaInjectionPointsAutowiringInspection"
argument_list|)
annotation|@
name|Service
argument_list|(
literal|"metadataService"
argument_list|)
specifier|public
class|class
name|MetadataService
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|>
name|facetFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|,
name|MetadataFacetFactory
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|>
name|facetFactoriesByClass
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|>
name|reverseFactoryMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|MetadataResolver
name|metadataResolver
init|=
literal|null
decl_stmt|;
annotation|@
name|Inject
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|void
name|setMetadataFacetFactories
parameter_list|(
name|List
argument_list|<
name|MetadataFacetFactory
argument_list|>
name|factoryList
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|>
name|facetFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|,
name|MetadataFacetFactory
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|>
name|facetFactoriesByClass
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
argument_list|>
name|reverseFactoryMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|MetadataFacetFactory
name|factory
range|:
name|factoryList
control|)
block|{
name|facetFactories
operator|.
name|put
argument_list|(
name|factory
operator|.
name|getFacetId
argument_list|( )
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|facetFactoriesByClass
operator|.
name|put
argument_list|(
name|factory
operator|.
name|getFacetClass
argument_list|( )
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|reverseFactoryMap
operator|.
name|put
argument_list|(
name|factory
operator|.
name|getFacetId
argument_list|( )
argument_list|,
name|factory
operator|.
name|getFacetClass
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|facetFactories
operator|=
name|facetFactories
expr_stmt|;
name|this
operator|.
name|facetFactoriesByClass
operator|=
name|facetFactoriesByClass
expr_stmt|;
name|this
operator|.
name|reverseFactoryMap
operator|=
name|reverseFactoryMap
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|getFactory
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|facetClazz
parameter_list|)
block|{
return|return
operator|(
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
operator|)
name|facetFactoriesByClass
operator|.
name|get
argument_list|(
name|facetClazz
argument_list|)
return|;
block|}
specifier|public
name|MetadataFacetFactory
argument_list|<
name|?
argument_list|>
name|getFactory
parameter_list|(
name|String
name|facetId
parameter_list|)
block|{
return|return
name|facetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSupportedFacets
parameter_list|()
block|{
return|return
name|facetFactories
operator|.
name|keySet
argument_list|( )
return|;
block|}
specifier|public
name|boolean
name|supportsFacet
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
name|facetClazz
parameter_list|)
block|{
return|return
name|facetFactoriesByClass
operator|.
name|containsKey
argument_list|(
name|facetClazz
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|supportsFacet
parameter_list|(
name|String
name|facetId
parameter_list|)
block|{
return|return
name|facetFactories
operator|.
name|containsKey
argument_list|(
name|facetId
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFacet
argument_list|>
name|getFactoryClassForId
parameter_list|(
name|String
name|facetId
parameter_list|)
block|{
return|return
name|reverseFactoryMap
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
return|;
block|}
comment|// Lazy evaluation to avoid problems with circular dependencies during initialization
specifier|public
name|MetadataResolver
name|getMetadataResolver
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|metadataResolver
operator|==
literal|null
operator|&&
name|applicationContext
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metadataResolver
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
name|MetadataResolver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|metadataResolver
return|;
block|}
block|}
end_class

end_unit

