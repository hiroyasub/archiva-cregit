begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|generic
operator|.
name|GenericMetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|generic
operator|.
name|GenericMetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
operator|.
name|ArchivaSpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|format
operator|.
name|annotation
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaSpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath*:/spring-context.xml"
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractMetadataRepositoryTest
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|OTHER_REPO_ID
init|=
literal|"other-repo"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_REPO_ID
init|=
literal|"test"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_PROJECT
init|=
literal|"myproject"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_NAMESPACE
init|=
literal|"mytest"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_PROJECT_VERSION
init|=
literal|"1.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PROJECT_VERSION_2_0
init|=
literal|"2.0"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_URL
init|=
literal|"http://archiva.apache.org"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Organization
name|TEST_ORGANIZATION
init|=
operator|new
name|Organization
argument_list|(
literal|"Apache"
argument_list|,
literal|"http://apache.org"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FACET_ID
init|=
literal|"test-facet-id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAME
init|=
literal|"test/name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_VALUE
init|=
literal|"test-value"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN
init|=
literal|"unknown"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MD5
init|=
literal|"bd4a9b642562547754086de2dab26b7d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SHA1
init|=
literal|"2e5daf0201ddeb068a62d5e08da18657ab2c6be9"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_METADATA_KEY
init|=
literal|"testkey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_METADATA_VALUE
init|=
literal|"testmetadata"
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|( )
argument_list|)
decl_stmt|;
comment|/*      * Used by tryAssert to allow to throw exceptions in the lambda expression.      */
annotation|@
name|FunctionalInterface
specifier|protected
interface|interface
name|AssertFunction
block|{
name|void
name|accept
parameter_list|( )
throws|throws
name|Exception
function_decl|;
block|}
specifier|protected
name|void
name|tryAssert
parameter_list|(
name|AssertFunction
name|func
parameter_list|)
throws|throws
name|Exception
block|{
name|tryAssert
argument_list|(
name|func
argument_list|,
literal|20
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|RepositorySessionFactory
name|getSessionFactory
parameter_list|( )
function_decl|;
specifier|protected
specifier|abstract
name|MetadataRepository
name|getRepository
parameter_list|( )
function_decl|;
comment|/*      * Runs the assert method until the assert is successful or the number of retries      * is reached. This is needed because the JCR Oak index update is asynchronous, so updates      * may not be visible immediately after the modification.      */
specifier|private
name|void
name|tryAssert
parameter_list|(
name|AssertFunction
name|func
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|sleepMillis
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
name|int
name|retry
init|=
name|retries
decl_stmt|;
while|while
condition|(
name|retry
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|func
operator|.
name|accept
argument_list|( )
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|AssertionError
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|sleep
argument_list|(
name|sleepMillis
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Retrying assert {}: {}"
argument_list|,
name|retry
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Retries: {}, Exception: {}"
argument_list|,
name|retry
argument_list|,
name|t
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry
operator|<=
literal|0
operator|&&
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
if|else if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
if|else if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|createTestMetadataFacetFactories
parameter_list|( )
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|TEST_FACET_ID
argument_list|,
operator|new
name|MetadataFacetFactory
argument_list|( )
block|{
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|( )
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// add to ensure we don't accidentally create an empty facet ID.
name|factories
operator|.
name|put
argument_list|(
literal|""
argument_list|,
operator|new
name|MetadataFacetFactory
argument_list|( )
block|{
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|( )
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
literal|""
argument_list|,
name|TEST_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
literal|""
argument_list|,
name|TEST_VALUE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// for the getArtifactsByProjectVersionMetadata tests
name|factories
operator|.
name|put
argument_list|(
name|GenericMetadataFacet
operator|.
name|FACET_ID
argument_list|,
operator|new
name|GenericMetadataFacetFactory
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|factories
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRootNamespaceWithNoMetadataRepository
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespaceOnly
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateNamespace
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|contains
argument_list|(
name|TEST_NAMESPACE
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeNamespace
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectOnly
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|project
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|project
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|project
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectMetadata
name|proj
init|=
name|getRepository
argument_list|( )
operator|.
name|getProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT
argument_list|,
name|proj
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|proj
operator|.
name|getNamespace
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// test that namespace is also constructed
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|contains
argument_list|(
name|TEST_NAMESPACE
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectVersionOnly
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
comment|// test that namespace and project is also constructed
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectMetadata
name|projectMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|projectMetadata
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactOnly
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertThat
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|metadata
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
comment|//assertEquals( Collections.singletonList( metadata ), new ArrayList<ArtifactMetadata>( artifacts ) );
name|assertThat
argument_list|(
name|artifacts
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
comment|// test that namespace, project and project version is also constructed
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|contains
argument_list|(
name|TEST_NAMESPACE
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|projectMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|projectVersionMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithNoOtherArchives
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|( )
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
literal|"Foo List"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|( )
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setMailingLists
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mailingList
argument_list|)
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
init|=
name|metadata
operator|.
name|getMailingLists
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|mailingLists
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mailingList
operator|=
name|metadata
operator|.
name|getMailingLists
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Foo List"
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|others
init|=
name|mailingList
operator|.
name|getOtherArchives
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|others
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithAllElements
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setName
argument_list|(
literal|"project name"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setDescription
argument_list|(
literal|"project description"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUrl
argument_list|(
literal|"the url"
argument_list|)
expr_stmt|;
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|( )
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
literal|"Foo List"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setUnsubscribeAddress
argument_list|(
literal|"UnsubscribeAddress"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setSubscribeAddress
argument_list|(
literal|"SubscribeAddress"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setPostAddress
argument_list|(
literal|"PostAddress"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setMainArchiveUrl
argument_list|(
literal|"MainArchiveUrl"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"other archive"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setMailingLists
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mailingList
argument_list|)
argument_list|)
expr_stmt|;
name|Scm
name|scm
init|=
operator|new
name|Scm
argument_list|( )
decl_stmt|;
name|scm
operator|.
name|setConnection
argument_list|(
literal|"connection"
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setDeveloperConnection
argument_list|(
literal|"dev conn"
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setUrl
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setScm
argument_list|(
name|scm
argument_list|)
expr_stmt|;
name|CiManagement
name|ci
init|=
operator|new
name|CiManagement
argument_list|( )
decl_stmt|;
name|ci
operator|.
name|setSystem
argument_list|(
literal|"system"
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUrl
argument_list|(
literal|"ci url"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setCiManagement
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|IssueManagement
name|tracker
init|=
operator|new
name|IssueManagement
argument_list|( )
decl_stmt|;
name|tracker
operator|.
name|setSystem
argument_list|(
literal|"system"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|setUrl
argument_list|(
literal|"issue tracker url"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setIssueManagement
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setOrganization
argument_list|(
name|TEST_ORGANIZATION
argument_list|)
expr_stmt|;
name|License
name|l
init|=
operator|new
name|License
argument_list|( )
decl_stmt|;
name|l
operator|.
name|setName
argument_list|(
literal|"license name"
argument_list|)
expr_stmt|;
name|l
operator|.
name|setUrl
argument_list|(
literal|"license url"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addLicense
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|Dependency
name|d
init|=
operator|new
name|Dependency
argument_list|( )
decl_stmt|;
name|d
operator|.
name|setArtifactId
argument_list|(
literal|"artifactId"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setClassifier
argument_list|(
literal|"classifier"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setGroupId
argument_list|(
literal|"groupId"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setScope
argument_list|(
literal|"scope"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setSystemPath
argument_list|(
literal|"system path"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVersion
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addDependency
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"project name"
argument_list|,
name|metadata
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"project description"
argument_list|,
name|metadata
operator|.
name|getDescription
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the url"
argument_list|,
name|metadata
operator|.
name|getUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"connection"
argument_list|,
name|metadata
operator|.
name|getScm
argument_list|( )
operator|.
name|getConnection
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dev conn"
argument_list|,
name|metadata
operator|.
name|getScm
argument_list|( )
operator|.
name|getDeveloperConnection
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"url"
argument_list|,
name|metadata
operator|.
name|getScm
argument_list|( )
operator|.
name|getUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|metadata
operator|.
name|getCiManagement
argument_list|( )
operator|.
name|getSystem
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ci url"
argument_list|,
name|metadata
operator|.
name|getCiManagement
argument_list|( )
operator|.
name|getUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|metadata
operator|.
name|getIssueManagement
argument_list|( )
operator|.
name|getSystem
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"issue tracker url"
argument_list|,
name|metadata
operator|.
name|getIssueManagement
argument_list|( )
operator|.
name|getUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_ORGANIZATION
operator|.
name|getName
argument_list|( )
argument_list|,
name|metadata
operator|.
name|getOrganization
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_ORGANIZATION
operator|.
name|getUrl
argument_list|( )
argument_list|,
name|metadata
operator|.
name|getOrganization
argument_list|( )
operator|.
name|getUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metadata
operator|.
name|getMailingLists
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|MailingList
name|retrievedMailingList
init|=
name|metadata
operator|.
name|getMailingLists
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mailingList
operator|.
name|getName
argument_list|( )
argument_list|,
name|retrievedMailingList
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|( )
argument_list|,
name|retrievedMailingList
operator|.
name|getMainArchiveUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mailingList
operator|.
name|getPostAddress
argument_list|( )
argument_list|,
name|retrievedMailingList
operator|.
name|getPostAddress
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|( )
argument_list|,
name|retrievedMailingList
operator|.
name|getSubscribeAddress
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|( )
argument_list|,
name|retrievedMailingList
operator|.
name|getUnsubscribeAddress
argument_list|( )
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|retrievedMailingList
operator|.
name|getOtherArchives
argument_list|( )
argument_list|)
comment|//
operator|.
name|isNotNull
argument_list|( )
comment|//
operator|.
name|isNotEmpty
argument_list|( )
comment|//
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
comment|//
operator|.
name|contains
argument_list|(
literal|"other archive"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metadata
operator|.
name|getLicenses
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|l
operator|=
name|metadata
operator|.
name|getLicenses
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"license name"
argument_list|,
name|l
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"license url"
argument_list|,
name|l
operator|.
name|getUrl
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metadata
operator|.
name|getDependencies
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|d
operator|=
name|metadata
operator|.
name|getDependencies
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artifactId"
argument_list|,
name|d
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"classifier"
argument_list|,
name|d
operator|.
name|getClassifier
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"groupId"
argument_list|,
name|d
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scope"
argument_list|,
name|d
operator|.
name|getScope
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system path"
argument_list|,
name|d
operator|.
name|getSystemPath
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|d
operator|.
name|getType
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"version"
argument_list|,
name|d
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|isOptional
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateProjectVersionMetadataIncomplete
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setIncomplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metadata1
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metadata1
operator|.
name|isIncomplete
argument_list|( )
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metadata1
operator|.
name|getCiManagement
argument_list|( )
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metadata1
operator|.
name|getScm
argument_list|( )
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metadata1
operator|.
name|getIssueManagement
argument_list|( )
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metadata1
operator|.
name|getOrganization
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata1
operator|.
name|getDescription
argument_list|( )
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|metadata1
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata1
operator|.
name|getName
argument_list|( )
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|metadata1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata1
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata1
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata1
operator|.
name|getMailingLists
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata1
operator|.
name|getLicenses
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata1
operator|.
name|getDependencies
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithExistingFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|MetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metadata1
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_FACET_ID
argument_list|)
argument_list|,
name|metadata1
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metadata2
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_FACET_ID
argument_list|)
argument_list|,
name|metadata2
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|testFacet
init|=
operator|(
name|TestMetadataFacet
operator|)
name|metadata2
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|testFacet
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithNoExistingFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metadata1
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metadata1
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|metadata1
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|metadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metadata2
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metadata2
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithExistingFacetsFacetPropertyWasRemoved
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|additionalProps
operator|.
name|put
argument_list|(
literal|"deleteKey"
argument_list|,
literal|"deleteValue"
argument_list|)
expr_stmt|;
name|MetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_FACET_ID
argument_list|,
literal|"baz"
argument_list|,
name|additionalProps
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metad
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metad
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|metad
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|TestMetadataFacet
name|testFacet
init|=
operator|(
name|TestMetadataFacet
operator|)
name|metad
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|facetProperties
init|=
name|testFacet
operator|.
name|toProperties
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
literal|"deleteValue"
argument_list|,
name|facetProperties
operator|.
name|get
argument_list|(
literal|"deleteKey"
argument_list|)
argument_list|)
expr_stmt|;
name|facetProperties
operator|.
name|remove
argument_list|(
literal|"deleteKey"
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|newTestFacet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_FACET_ID
argument_list|,
name|testFacet
operator|.
name|getValue
argument_list|( )
argument_list|,
name|facetProperties
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|newTestFacet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ProjectVersionMetadata
name|metad2
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metad2
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|testFacet2
init|=
operator|(
name|TestMetadataFacet
operator|)
name|metad2
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|testFacet2
operator|.
name|toProperties
argument_list|( )
operator|.
name|containsKey
argument_list|(
literal|"deleteKey"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsDoesntReturnProjectVersionMetadataFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|versionMetadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|versionMetadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|MetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_FACET_ID
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|versionMetadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|versionMetadata
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifactMetadata
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateArtifactMetadataWithExistingFacetsFacetPropertyWasRemoved
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|metadata
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|additionalProps
operator|.
name|put
argument_list|(
literal|"deleteKey"
argument_list|,
literal|"deleteValue"
argument_list|)
expr_stmt|;
name|MetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_FACET_ID
argument_list|,
literal|"baz"
argument_list|,
name|additionalProps
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifacts
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|artifacts
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|metadata
operator|.
name|getFacetIds
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|testFacet
init|=
operator|(
name|TestMetadataFacet
operator|)
name|metadata
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|facetProperties
init|=
name|testFacet
operator|.
name|toProperties
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
literal|"deleteValue"
argument_list|,
name|facetProperties
operator|.
name|get
argument_list|(
literal|"deleteKey"
argument_list|)
argument_list|)
expr_stmt|;
name|facetProperties
operator|.
name|remove
argument_list|(
literal|"deleteKey"
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|newTestFacet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_FACET_ID
argument_list|,
name|testFacet
operator|.
name|getValue
argument_list|( )
argument_list|,
name|facetProperties
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|newTestFacet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts1
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifacts1
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts1
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|artifacts
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
expr_stmt|;
name|ids
operator|=
name|metadata
operator|.
name|getFacetIds
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|testFacet
operator|=
operator|(
name|TestMetadataFacet
operator|)
name|metadata
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|testFacet
operator|.
name|toProperties
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|props
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|doesNotContainKey
argument_list|(
literal|"deleteKey"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateArtifactMetadataWithExistingFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|metadata
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|MetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_FACET_ID
argument_list|)
argument_list|,
name|metadata
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|createArtifact
argument_list|( )
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_FACET_ID
argument_list|)
argument_list|,
name|metadata
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|testFacet
init|=
operator|(
name|TestMetadataFacet
operator|)
name|metadata
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|testFacet
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateArtifactMetadataWithNoExistingFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|metadata
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ArtifactMetadata
name|metadata2
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|( )
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|metadata2
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
expr_stmt|;
name|metadata
operator|=
name|createArtifact
argument_list|( )
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ArtifactMetadata
name|metadata3
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|( )
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|metadata3
operator|.
name|getFacetIds
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacet
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|test
init|=
operator|(
name|TestMetadataFacet
operator|)
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacetWhenEmpty
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacetWhenUnknownName
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|UNKNOWN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacetWhenDefaultValue
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
argument_list|,
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacetWhenUnknownFacetId
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|UNKNOWN
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TEST_NAME
argument_list|)
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadataFacetsWhenEmpty
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveFacets
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|facets
operator|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveFacetsWhenEmpty
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets1
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|facets1
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveFacetsWhenUnknown
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
comment|// testing no exception
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveFacetWhenUnknown
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
comment|// testing no exception
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|UNKNOWN
argument_list|,
name|TEST_NAME
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveFacet
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|TestMetadataFacet
name|metadataFacet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|metadataFacet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metadataFacet
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|facets
operator|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveFacetWhenEmpty
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|facets
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets2
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|facets2
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|hasMetadataFacetStart
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|assertFalse
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|hasMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|hasMetadataFacet
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|assertFalse
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|hasMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|KindOfRepositoryStatistics
argument_list|(
literal|"first"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|hasMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|KindOfRepositoryStatistics
argument_list|(
literal|"second"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|addMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
operator|new
name|KindOfRepositoryStatistics
argument_list|(
literal|"third"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|facets
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|hasMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|hasMetadataFacet
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|facets
operator|=
name|getRepository
argument_list|( )
operator|.
name|getMetadataFacets
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|facets
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifacts
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|(
literal|"pom"
argument_list|)
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getId
argument_list|( )
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact1
argument_list|,
name|artifact2
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactVersions
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|String
name|version1
init|=
literal|"1.0-20091212.012345-1"
decl_stmt|;
name|artifact1
operator|.
name|setId
argument_list|(
name|artifact1
operator|.
name|getProject
argument_list|( )
operator|+
literal|"-"
operator|+
name|version1
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|artifact1
operator|.
name|setVersion
argument_list|(
name|version1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|String
name|version2
init|=
literal|"1.0-20091212.123456-2"
decl_stmt|;
name|artifact2
operator|.
name|setId
argument_list|(
name|artifact2
operator|.
name|getProject
argument_list|( )
operator|+
literal|"-"
operator|+
name|version2
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|artifact2
operator|.
name|setVersion
argument_list|(
name|version2
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|contains
argument_list|(
name|version1
argument_list|,
name|version2
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactVersionsMultipleArtifactsSingleVersion
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact1
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact2
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|"-sources.jar"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeOpen
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeSparseNamespace
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|String
name|namespace
init|=
literal|"org.apache.archiva"
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeLowerBound
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|getTime
argument_list|( )
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|date
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeLowerBoundOutOfRange
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|getTime
argument_list|( )
operator|+
literal|10000
argument_list|)
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|date
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifacts
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeLowerAndUpperBound
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|Date
name|lower
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|getTime
argument_list|( )
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|Date
name|upper
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|getTime
argument_list|( )
operator|+
literal|10000
argument_list|)
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeUpperBound
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|Date
name|upper
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|getTime
argument_list|( )
operator|+
literal|10000
argument_list|)
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
name|upper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeUpperBoundOutOfRange
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|Date
name|upper
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|( )
operator|.
name|getTime
argument_list|( )
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
name|upper
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifacts
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByRepoId
parameter_list|( )
throws|throws
name|Exception
block|{
name|ArtifactMetadata
name|artifact
decl_stmt|;
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|artifact
operator|=
name|createArtifact
argument_list|( )
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
block|}
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|session
operator|.
name|refreshAndDiscard
argument_list|( )
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByRepoIdMultipleCopies
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|secondArtifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|secondArtifact
operator|.
name|setRepositoryId
argument_list|(
name|OTHER_REPO_ID
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|secondArtifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
comment|// test it restricts to the appropriate repository
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|secondArtifact
argument_list|)
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByDateRangeMultipleCopies
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|secondArtifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|secondArtifact
operator|.
name|setRepositoryId
argument_list|(
name|OTHER_REPO_ID
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|secondArtifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
comment|// test it restricts to the appropriate repository
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|secondArtifact
argument_list|)
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByChecksumMultipleCopies
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|secondArtifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|secondArtifact
operator|.
name|setRepositoryId
argument_list|(
name|OTHER_REPO_ID
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|secondArtifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
comment|// test it restricts to the appropriate repository
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|secondArtifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|secondArtifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|OTHER_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespacesWithSparseDepth
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|updateNamespace
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven.shared"
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"org"
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|getRepository
argument_list|( )
operator|.
name|getNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"apache"
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|getRepository
argument_list|( )
operator|.
name|getNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"maven"
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|getRepository
argument_list|( )
operator|.
name|getNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"shared"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespacesWithProjectsPresent
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|String
name|namespace
init|=
literal|"org.apache.maven.shared"
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateNamespace
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|getRepository
argument_list|( )
operator|.
name|getNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namespaces
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectsWithOtherNamespacesPresent
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
literal|"org.apache.maven"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateNamespace
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven.shared"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|projects
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjects
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|projects
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectVersionsWithOtherNamespacesPresent
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
comment|// an unusual case but technically possible where a project namespace matches another project's name
name|ProjectVersionMetadata
name|versionMetadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|versionMetadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven"
argument_list|,
name|TEST_PROJECT
argument_list|,
name|versionMetadata
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven."
operator|+
name|TEST_PROJECT
argument_list|,
literal|"other-project"
argument_list|,
name|versionMetadata
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven."
operator|+
name|TEST_PROJECT
argument_list|,
literal|"other-project"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|contains
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|versions
operator|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven"
argument_list|,
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|contains
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByChecksumSingleResultMd5
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByChecksumSingleResultSha1
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByChecksumDeepNamespace
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|String
name|namespace
init|=
literal|"multi.level.ns"
decl_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByChecksumMultipleResult
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|String
name|newProjectId
init|=
literal|"another-project"
decl_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact2
operator|.
name|setProject
argument_list|(
name|newProjectId
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|newProjectId
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|artifacts
argument_list|,
operator|new
name|ArtifactMetadataComparator
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact2
argument_list|,
name|artifact1
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|artifacts
argument_list|,
operator|new
name|ArtifactMetadataComparator
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact2
argument_list|,
name|artifact1
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByChecksumNoResult
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByChecksum
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByChecksum
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"not checksum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByChecksum
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByProjectVersionMetadata
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByProjectVersionMetadata
argument_list|(
name|session
argument_list|,
name|TEST_METADATA_KEY
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByMetadata
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
name|artifactsByMetadata
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getSha1
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_SHA1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByProjectVersionMetadataNoRepository
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByProjectVersionMetadata
argument_list|(
name|session
argument_list|,
name|TEST_METADATA_KEY
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByMetadata
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactsByMetadata
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByProjectVersionMetadataAllRepositories
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByProjectVersionMetadata
argument_list|(
name|session
argument_list|,
name|TEST_METADATA_KEY
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByMetadata
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByMetadataAllRepositories
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithMavenArtifactFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByMetadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByMetadata
argument_list|(
name|session
argument_list|,
literal|"foo"
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByMetadata
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
name|artifactsByMetadata
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getSha1
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_SHA1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
name|MetadataFacet
name|facet
init|=
name|artifactMetadata
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|facet
argument_list|)
operator|.
name|isNotNull
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|facet
operator|.
name|toProperties
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
name|TEST_METADATA_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArtifactsByPropertySingleResult
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithData
argument_list|(
name|session
argument_list|)
expr_stmt|;
comment|// only works on JCR implementation
comment|// Collection<ArtifactMetadata> artifactsByProperty = getRepository().getArtifactsByProperty( "org.name", TEST_ORGANIZATION.getName(), TEST_REPO_ID );
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByProperty
argument_list|(
name|session
argument_list|,
literal|"url"
argument_list|,
name|TEST_URL
argument_list|,
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
name|artifactsByProperty
operator|.
name|iterator
argument_list|( )
operator|.
name|next
argument_list|( )
decl_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getSha1
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_SHA1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteRepository
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|getRepository
argument_list|( )
operator|.
name|updateNamespace
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|project1
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|project1
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|project1
operator|.
name|setId
argument_list|(
literal|"project1"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|project1
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|project2
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|project2
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|project2
operator|.
name|setId
argument_list|(
literal|"project2"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|project2
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact1
operator|.
name|setProject
argument_list|(
literal|"project1"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
literal|"project1"
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact2
operator|.
name|setProject
argument_list|(
literal|"project2"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
literal|"project2"
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact1
argument_list|,
name|artifact2
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|,
operator|new
name|ArtifactMetadataComparator
argument_list|( )
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifactsByDateRange
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|,
operator|new
name|ArtifactMetadataComparator
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeRepository
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|assertTrue
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getRootNamespaces
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|)
operator|.
name|isEmpty
argument_list|( )
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteArtifact
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact
operator|.
name|addFacet
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION_2_0
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"versions {}"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1.0"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|versions
operator|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"versions {}"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"2.0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
name|assertThat
argument_list|(
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION_2_0
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteArtifact
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact
operator|.
name|addFacet
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artifacts
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifacts
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteVersion
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact
operator|.
name|addFacet
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|versions1
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|versions1
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteProject
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifact
operator|.
name|addFacet
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeProject
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersions
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|versions
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteSnapshotVersion
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ArtifactMetadata
name|artifactOne
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifactOne
operator|.
name|setVersion
argument_list|(
literal|"2.0-20120618.214127-1"
argument_list|)
expr_stmt|;
name|artifactOne
operator|.
name|setProjectVersion
argument_list|(
literal|"2.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|artifactOne
operator|.
name|addFacet
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactOne
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
literal|"2.0-20120618.214127-1"
operator|+
literal|"."
operator|+
literal|"jar"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|,
name|artifactOne
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactTwo
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|artifactTwo
operator|.
name|setVersion
argument_list|(
literal|"2.0-20120618.214135-2"
argument_list|)
expr_stmt|;
name|artifactTwo
operator|.
name|setProjectVersion
argument_list|(
literal|"2.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|artifactTwo
operator|.
name|addFacet
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactTwo
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
literal|"2.0-20120618.214135-2"
operator|+
literal|"."
operator|+
literal|"jar"
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|,
name|artifactTwo
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactMetadatas
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"artifactMetadatas: {}"
argument_list|,
name|artifactMetadatas
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeArtifact
argument_list|(
name|session
argument_list|,
name|artifactOne
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadatas
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|removeArtifact
argument_list|(
name|session
argument_list|,
name|artifactTwo
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|=
name|getRepository
argument_list|( )
operator|.
name|getArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
literal|"2.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactMetadatas
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetProjectReferences
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|( )
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setName
argument_list|(
literal|"project name"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setDescription
argument_list|(
literal|"project description"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUrl
argument_list|(
literal|"the url"
argument_list|)
expr_stmt|;
name|Dependency
name|d
init|=
operator|new
name|Dependency
argument_list|( )
decl_stmt|;
name|d
operator|.
name|setArtifactId
argument_list|(
literal|"artifactId"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setClassifier
argument_list|(
literal|"classifier"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setGroupId
argument_list|(
literal|"groupId"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setScope
argument_list|(
literal|"scope"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setSystemPath
argument_list|(
literal|"system path"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVersion
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addDependency
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Dependency
argument_list|( )
expr_stmt|;
name|d
operator|.
name|setArtifactId
argument_list|(
literal|"artifactId1"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setClassifier
argument_list|(
literal|"classifier"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setGroupId
argument_list|(
literal|"groupId"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setScope
argument_list|(
literal|"scope"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setSystemPath
argument_list|(
literal|"system path"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVersion
argument_list|(
literal|"version1"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addDependency
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
name|metadata
operator|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
specifier|final
name|Dependency
name|dd
init|=
name|d
decl_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectReferences
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|dd
operator|.
name|getGroupId
argument_list|( )
argument_list|,
name|dd
operator|.
name|getArtifactId
argument_list|( )
argument_list|,
name|dd
operator|.
name|getVersion
argument_list|( )
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"references: {}"
argument_list|,
name|references
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|references
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|ProjectVersionReference
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsByKey
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithData
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|session
operator|.
name|refreshAndDiscard
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"url"
argument_list|,
name|TEST_URL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsByKeyExact
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithData
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|session
operator|.
name|refreshAndDiscard
argument_list|( )
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"url"
argument_list|,
name|TEST_URL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Artifact search by url=%s must give a result."
argument_list|,
name|TEST_URL
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
name|artifactsByProperty
operator|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
literal|"org.name"
argument_list|,
literal|"pache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Artifact search by text org.name='pache' must be empty"
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsByFacetKey
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_METADATA_KEY
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsByFacetKeyAllRepos
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
literal|null
argument_list|,
name|TEST_METADATA_KEY
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsFullText
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
comment|// only works in JCR
comment|// Collection<ArtifactMetadata> artifactsByProperty = getRepository().searchArtifacts( TEST_URL, TEST_REPO_ID, false );
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsFullTextExact
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
comment|// only works in JCR
comment|// Collection<ArtifactMetadata> artifactsByProperty = getRepository().searchArtifacts( TEST_URL, TEST_REPO_ID, true );
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_METADATA_VALUE
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchArtifactsFullTextByFacet
parameter_list|( )
throws|throws
name|Exception
block|{
try|try
init|(
name|RepositorySession
name|session
init|=
name|getSessionFactory
argument_list|( )
operator|.
name|createSession
argument_list|( )
init|)
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|tryAssert
argument_list|(
parameter_list|( )
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsByProperty
init|=
name|getRepository
argument_list|( )
operator|.
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_METADATA_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|artifactsByProperty
argument_list|)
operator|.
name|isNotNull
argument_list|( )
operator|.
name|isNotEmpty
argument_list|( )
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ProjectMetadata
name|createProject
parameter_list|( )
block|{
return|return
name|createProject
argument_list|(
name|TEST_NAMESPACE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ProjectMetadata
name|createProject
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
name|ProjectMetadata
name|project
init|=
operator|new
name|ProjectMetadata
argument_list|( )
decl_stmt|;
name|project
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|project
operator|.
name|setNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
return|return
name|project
return|;
block|}
specifier|private
name|void
name|createArtifactWithGenericMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|)
throws|throws
name|MetadataRepositoryException
throws|,
name|MetadataResolutionException
throws|,
name|MetadataSessionException
block|{
name|createArtifactWithGenericMetadataFacet
argument_list|(
name|session
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createArtifactWithGenericMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|int
name|artifacts
parameter_list|)
throws|throws
name|MetadataRepositoryException
throws|,
name|MetadataResolutionException
throws|,
name|MetadataSessionException
block|{
name|MetadataFacet
name|metadataFacet
init|=
operator|new
name|GenericMetadataFacet
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|TEST_METADATA_KEY
argument_list|,
name|TEST_METADATA_VALUE
argument_list|)
expr_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|createArtifactWithFacet
argument_list|(
name|session
argument_list|,
name|artifacts
argument_list|,
literal|null
argument_list|,
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createArtifactWithMavenArtifactFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|)
throws|throws
name|MetadataRepositoryException
throws|,
name|MetadataResolutionException
throws|,
name|MetadataSessionException
block|{
name|createArtifactWithMavenArtifactFacet
argument_list|(
name|session
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createArtifactWithMavenArtifactFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|int
name|artifacts
parameter_list|)
throws|throws
name|MetadataRepositoryException
throws|,
name|MetadataResolutionException
throws|,
name|MetadataSessionException
block|{
name|TestMetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
decl_stmt|;
name|createArtifactWithFacet
argument_list|(
name|session
argument_list|,
name|artifacts
argument_list|,
name|facet
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createArtifactWithFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|int
name|artifacts
parameter_list|,
name|MetadataFacet
name|artifactFacet
parameter_list|,
name|MetadataFacet
name|projectVersionMetadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
throws|,
name|MetadataResolutionException
throws|,
name|MetadataSessionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifacts
condition|;
name|i
operator|++
control|)
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
if|if
condition|(
name|artifactFacet
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|addFacet
argument_list|(
name|artifactFacet
argument_list|)
expr_stmt|;
block|}
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectVersionMetadataFacet
operator|!=
literal|null
condition|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|projectVersionMetadataFacet
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setOrganization
argument_list|(
name|TEST_ORGANIZATION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUrl
argument_list|(
name|TEST_URL
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
block|}
specifier|protected
name|void
name|createArtifactWithData
parameter_list|(
name|RepositorySession
name|session
parameter_list|)
throws|throws
name|MetadataRepositoryException
throws|,
name|MetadataResolutionException
throws|,
name|MetadataSessionException
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|( )
decl_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateArtifact
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|metadata
init|=
name|getRepository
argument_list|( )
operator|.
name|getProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|setOrganization
argument_list|(
name|TEST_ORGANIZATION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUrl
argument_list|(
name|TEST_URL
argument_list|)
expr_stmt|;
name|getRepository
argument_list|( )
operator|.
name|updateProjectVersion
argument_list|(
name|session
argument_list|,
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|( )
expr_stmt|;
block|}
specifier|private
specifier|static
name|ArtifactMetadata
name|createArtifact
parameter_list|( )
block|{
return|return
name|createArtifact
argument_list|(
literal|"jar"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ArtifactMetadata
name|createArtifact
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|ArtifactMetadata
name|artifact
init|=
operator|new
name|ArtifactMetadata
argument_list|( )
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|"."
operator|+
name|type
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|( )
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProject
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepositoryId
argument_list|(
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFileLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|( )
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProjectVersion
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setMd5
argument_list|(
name|TEST_MD5
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setSha1
argument_list|(
name|TEST_SHA1
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|private
specifier|static
class|class
name|ArtifactMetadataComparator
implements|implements
name|Comparator
argument_list|<
name|ArtifactMetadata
argument_list|>
block|{
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
name|ArtifactMetadata
name|a
parameter_list|,
name|ArtifactMetadata
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getProject
argument_list|( )
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getProject
argument_list|( )
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|KindOfRepositoryStatistics
implements|implements
name|MetadataFacet
block|{
specifier|private
name|String
name|value
decl_stmt|;
specifier|private
name|Date
name|date
decl_stmt|;
specifier|static
specifier|final
name|String
name|SCAN_TIMESTAMP_FORMAT
init|=
literal|"yyyy/MM/dd/HHmmss.SSS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|UTC_TIME_ZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
specifier|private
name|KindOfRepositoryStatistics
parameter_list|(
name|String
name|value
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|( )
block|{
return|return
name|createNameFormat
argument_list|( )
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SimpleDateFormat
name|createNameFormat
parameter_list|( )
block|{
name|SimpleDateFormat
name|fmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|SCAN_TIMESTAMP_FORMAT
argument_list|)
decl_stmt|;
name|fmt
operator|.
name|setTimeZone
argument_list|(
name|UTC_TIME_ZONE
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFacetId
parameter_list|( )
block|{
return|return
name|KindOfRepositoryStatistics
operator|.
name|class
operator|.
name|getName
argument_list|( )
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toProperties
parameter_list|( )
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fromProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
comment|// no op
block|}
block|}
specifier|private
specifier|static
class|class
name|TestMetadataFacet
implements|implements
name|MetadataFacet
block|{
specifier|private
name|String
name|testFacetId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalProps
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
specifier|private
name|TestMetadataFacet
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|testFacetId
operator|=
name|TEST_FACET_ID
expr_stmt|;
block|}
specifier|private
name|TestMetadataFacet
parameter_list|(
name|String
name|facetId
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|testFacetId
operator|=
name|facetId
expr_stmt|;
block|}
specifier|private
name|TestMetadataFacet
parameter_list|(
name|String
name|facetId
parameter_list|,
name|String
name|value
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalProps
parameter_list|)
block|{
name|this
argument_list|(
name|facetId
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|additionalProps
operator|=
name|additionalProps
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFacetId
parameter_list|( )
block|{
return|return
name|testFacetId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|( )
block|{
return|return
name|TEST_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toProperties
parameter_list|( )
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|additionalProps
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|additionalProps
operator|.
name|keySet
argument_list|( )
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|additionalProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|fromProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
name|properties
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalProps
operator|==
literal|null
condition|)
block|{
name|additionalProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|( )
control|)
block|{
name|additionalProps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getValue
parameter_list|( )
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
return|return
literal|"TestMetadataFacet{"
operator|+
literal|"value='"
operator|+
name|value
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TestMetadataFacet
name|that
init|=
operator|(
name|TestMetadataFacet
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|?
operator|!
name|value
operator|.
name|equals
argument_list|(
name|that
operator|.
name|value
argument_list|)
else|:
name|that
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

