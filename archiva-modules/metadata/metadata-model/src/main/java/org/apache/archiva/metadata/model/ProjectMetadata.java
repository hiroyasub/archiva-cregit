begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Metadata on project level.  * Namely the namespace and the project id. But different repository types may  * add additional metadata information.  *  */
end_comment

begin_class
specifier|public
class|class
name|ProjectMetadata
block|{
specifier|private
name|Properties
name|customProperties
decl_stmt|;
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
comment|/**      * Sets the project id.      * @param id      */
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Returns the project id.      * @return      */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Returns the namespace where the project resides.      * @return The namespace.      */
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
comment|/**      * Sets the namespace. Namespaces are strings that may contain '.' characters to separate      * the hierarchy levels.      * @return      */
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
comment|/**      * Adds a custom property. Repository storage implementations may add custom properties      * on the project level.      * @param key      * @param value      */
specifier|public
name|void
name|addProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Properties
name|props
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Replaces all custom properties with the given properties object.      * The given object is stored by reference and not copied.      * @param properties      */
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|customProperties
operator|=
name|properties
expr_stmt|;
block|}
comment|/**      * Returns the object with all custom properties.      * If there are no custom properties set, a empty object will be returned.      *      * @return The custom properties.      */
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|customProperties
operator|==
literal|null
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|( )
decl_stmt|;
name|this
operator|.
name|customProperties
operator|=
name|props
expr_stmt|;
return|return
name|props
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|customProperties
return|;
block|}
block|}
comment|/**      * Returns true, if there are custom properties set.      * @return True, if there exist custom properties.      */
specifier|public
name|boolean
name|hasProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|customProperties
operator|!=
literal|null
operator|&&
name|this
operator|.
name|customProperties
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ProjectMetadata{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"namespace='"
argument_list|)
operator|.
name|append
argument_list|(
name|namespace
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
if|if
condition|(
name|customProperties
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", custom: '"
argument_list|)
operator|.
name|append
argument_list|(
name|customProperties
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

