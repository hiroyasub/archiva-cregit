begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Default statistics implementation  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryStatistics
implements|implements
name|RepositoryStatistics
block|{
specifier|private
name|Date
name|scanEndTime
decl_stmt|;
specifier|private
name|Date
name|scanStartTime
decl_stmt|;
specifier|private
name|long
name|totalArtifactCount
decl_stmt|;
specifier|private
name|long
name|totalArtifactFileSize
decl_stmt|;
specifier|private
name|long
name|totalFileCount
decl_stmt|;
specifier|private
name|long
name|totalGroupCount
decl_stmt|;
specifier|private
name|long
name|totalProjectCount
decl_stmt|;
specifier|private
name|long
name|newFileCount
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCAN_TIMESTAMP_FORMAT
init|=
literal|"yyyy/MM/dd/HHmmss.SSS"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|totalCountForType
init|=
operator|new
name|ZeroForNullHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|UTC_TIME_ZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|repositoryId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|customValues
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_PREFIX
init|=
literal|"count-type-"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_PREFIX
init|=
literal|"count-custom-"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Date
name|getScanEndTime
parameter_list|( )
block|{
return|return
name|scanEndTime
return|;
block|}
specifier|public
name|void
name|setScanEndTime
parameter_list|(
name|Date
name|scanEndTime
parameter_list|)
block|{
name|this
operator|.
name|scanEndTime
operator|=
name|scanEndTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getScanStartTime
parameter_list|( )
block|{
return|return
name|scanStartTime
return|;
block|}
specifier|public
name|void
name|setScanStartTime
parameter_list|(
name|Date
name|scanStartTime
parameter_list|)
block|{
name|this
operator|.
name|scanStartTime
operator|=
name|scanStartTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalArtifactCount
parameter_list|( )
block|{
return|return
name|totalArtifactCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalArtifactCount
parameter_list|(
name|long
name|totalArtifactCount
parameter_list|)
block|{
name|this
operator|.
name|totalArtifactCount
operator|=
name|totalArtifactCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalArtifactFileSize
parameter_list|( )
block|{
return|return
name|totalArtifactFileSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalArtifactFileSize
parameter_list|(
name|long
name|totalArtifactFileSize
parameter_list|)
block|{
name|this
operator|.
name|totalArtifactFileSize
operator|=
name|totalArtifactFileSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalFileCount
parameter_list|( )
block|{
return|return
name|totalFileCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalFileCount
parameter_list|(
name|long
name|totalFileCount
parameter_list|)
block|{
name|this
operator|.
name|totalFileCount
operator|=
name|totalFileCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalGroupCount
parameter_list|( )
block|{
return|return
name|totalGroupCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalGroupCount
parameter_list|(
name|long
name|totalGroupCount
parameter_list|)
block|{
name|this
operator|.
name|totalGroupCount
operator|=
name|totalGroupCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalProjectCount
parameter_list|( )
block|{
return|return
name|totalProjectCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalProjectCount
parameter_list|(
name|long
name|totalProjectCount
parameter_list|)
block|{
name|this
operator|.
name|totalProjectCount
operator|=
name|totalProjectCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNewFileCount
parameter_list|(
name|long
name|newFileCount
parameter_list|)
block|{
name|this
operator|.
name|newFileCount
operator|=
name|newFileCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNewFileCount
parameter_list|( )
block|{
return|return
name|newFileCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDuration
parameter_list|( )
block|{
return|return
name|scanEndTime
operator|.
name|getTime
argument_list|()
operator|-
name|scanStartTime
operator|.
name|getTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRepositoryId
parameter_list|( )
block|{
return|return
name|repositoryId
return|;
block|}
specifier|public
name|void
name|setRepositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|this
operator|.
name|repositoryId
operator|=
name|repositoryId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFacetId
parameter_list|()
block|{
return|return
name|FACET_ID
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|createNameFormat
argument_list|()
operator|.
name|format
argument_list|(
name|scanStartTime
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SimpleDateFormat
name|createNameFormat
parameter_list|()
block|{
name|SimpleDateFormat
name|fmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|SCAN_TIMESTAMP_FORMAT
argument_list|)
decl_stmt|;
name|fmt
operator|.
name|setTimeZone
argument_list|(
name|UTC_TIME_ZONE
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|scanEndTime
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"scanEndTime"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"scanEndTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|scanEndTime
operator|.
name|getTime
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanStartTime
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"scanStartTime"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"scanStartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|scanStartTime
operator|.
name|getTime
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"totalArtifactCount"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalArtifactCount
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"totalArtifactFileSize"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalArtifactFileSize
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"totalFileCount"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalFileCount
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"totalGroupCount"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalGroupCount
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"totalProjectCount"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalProjectCount
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"newFileCount"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|newFileCount
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"repositoryId"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|totalCountForType
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|TYPE_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|customValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|customValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|CUSTOM_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fromProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|scanEndTime
operator|=
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"scanEndTime"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scanStartTime
operator|=
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"scanStartTime"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|totalArtifactCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"totalArtifactCount"
argument_list|)
argument_list|)
expr_stmt|;
name|totalArtifactFileSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"totalArtifactFileSize"
argument_list|)
argument_list|)
expr_stmt|;
name|totalFileCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"totalFileCount"
argument_list|)
argument_list|)
expr_stmt|;
name|totalGroupCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"totalGroupCount"
argument_list|)
argument_list|)
expr_stmt|;
name|totalProjectCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"totalProjectCount"
argument_list|)
argument_list|)
expr_stmt|;
name|newFileCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"newFileCount"
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryId
operator|=
name|properties
operator|.
name|get
argument_list|(
literal|"repositoryId"
argument_list|)
expr_stmt|;
name|totalCountForType
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|TYPE_PREFIX
argument_list|)
condition|)
block|{
name|totalCountForType
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|TYPE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CUSTOM_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|customValues
operator|==
literal|null
condition|)
block|{
name|createCustomValueMap
argument_list|()
expr_stmt|;
block|}
name|customValues
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|CUSTOM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DefaultRepositoryStatistics
name|that
init|=
operator|(
name|DefaultRepositoryStatistics
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|newFileCount
operator|!=
name|that
operator|.
name|newFileCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalArtifactCount
operator|!=
name|that
operator|.
name|totalArtifactCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalArtifactFileSize
operator|!=
name|that
operator|.
name|totalArtifactFileSize
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalFileCount
operator|!=
name|that
operator|.
name|totalFileCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalGroupCount
operator|!=
name|that
operator|.
name|totalGroupCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalProjectCount
operator|!=
name|that
operator|.
name|totalProjectCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|scanEndTime
operator|.
name|equals
argument_list|(
name|that
operator|.
name|scanEndTime
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|scanStartTime
operator|.
name|equals
argument_list|(
name|that
operator|.
name|scanStartTime
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|totalCountForType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|totalCountForType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|customValues
operator|==
literal|null
operator|&&
name|that
operator|.
name|customValues
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|customValues
operator|!=
literal|null
operator|&&
name|that
operator|.
name|customValues
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|customValues
operator|!=
literal|null
operator|&&
operator|!
name|customValues
operator|.
name|equals
argument_list|(
name|that
operator|.
name|customValues
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|repositoryId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|repositoryId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|scanEndTime
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|scanStartTime
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|totalArtifactCount
operator|^
operator|(
name|totalArtifactCount
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|totalArtifactFileSize
operator|^
operator|(
name|totalArtifactFileSize
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|totalFileCount
operator|^
operator|(
name|totalFileCount
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|totalGroupCount
operator|^
operator|(
name|totalGroupCount
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|totalProjectCount
operator|^
operator|(
name|totalProjectCount
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|newFileCount
operator|^
operator|(
name|newFileCount
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|totalCountForType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|repositoryId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|customValues
operator|!=
literal|null
condition|)
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|customValues
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RepositoryStatistics{"
operator|+
literal|"scanEndTime="
operator|+
name|scanEndTime
operator|+
literal|", scanStartTime="
operator|+
name|scanStartTime
operator|+
literal|", totalArtifactCount="
operator|+
name|totalArtifactCount
operator|+
literal|", totalArtifactFileSize="
operator|+
name|totalArtifactFileSize
operator|+
literal|", totalFileCount="
operator|+
name|totalFileCount
operator|+
literal|", totalGroupCount="
operator|+
name|totalGroupCount
operator|+
literal|", totalProjectCount="
operator|+
name|totalProjectCount
operator|+
literal|", newFileCount="
operator|+
name|newFileCount
operator|+
literal|", totalCountForType="
operator|+
name|totalCountForType
operator|+
literal|", "
operator|+
literal|"repositoryId="
operator|+
name|repositoryId
operator|+
name|getCustomValueString
argument_list|()
operator|+
literal|'}'
return|;
block|}
specifier|private
name|String
name|getCustomValueString
parameter_list|()
block|{
if|if
condition|(
name|customValues
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|customValues
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getTotalCountForType
parameter_list|( )
block|{
return|return
name|totalCountForType
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalCountForType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|totalCountForType
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalCountForType
parameter_list|(
name|String
name|type
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|totalCountForType
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCustomValue
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
comment|// Lazy evaluation, because it may not be used very often.
if|if
condition|(
name|customValues
operator|==
literal|null
condition|)
block|{
name|createCustomValueMap
argument_list|()
expr_stmt|;
block|}
return|return
name|customValues
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCustomValue
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|long
name|count
parameter_list|)
block|{
comment|// Lazy evaluation, because it may not be used very often.
if|if
condition|(
name|customValues
operator|==
literal|null
condition|)
block|{
name|createCustomValueMap
argument_list|()
expr_stmt|;
block|}
name|customValues
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createCustomValueMap
parameter_list|( )
block|{
name|customValues
operator|=
operator|new
name|ZeroForNullHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ZeroForNullHashMap
parameter_list|<
name|K
parameter_list|>
extends|extends
name|HashMap
argument_list|<
name|K
argument_list|,
name|Long
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Long
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Long
name|value
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
else|:
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

