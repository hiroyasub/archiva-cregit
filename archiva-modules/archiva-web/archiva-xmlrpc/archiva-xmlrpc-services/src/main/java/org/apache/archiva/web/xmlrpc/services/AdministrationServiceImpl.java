begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|AdministrationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|DatabaseScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|InvalidRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArtifactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|ArtifactVersionsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseCleanupConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseConsumers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseUnprocessedArtifactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|events
operator|.
name|RepositoryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryContentConsumers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|ArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|DatabaseTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|TaskCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * AdministrationServiceImpl  *   * @version $Id: AdministrationServiceImpl.java  */
end_comment

begin_class
specifier|public
class|class
name|AdministrationServiceImpl
implements|implements
name|AdministrationService
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|private
name|RepositoryContentConsumers
name|repoConsumersUtil
decl_stmt|;
specifier|private
name|DatabaseConsumers
name|dbConsumersUtil
decl_stmt|;
specifier|private
name|RepositoryContentFactory
name|repoFactory
decl_stmt|;
specifier|private
name|ArtifactDAO
name|artifactDAO
decl_stmt|;
specifier|private
name|ArchivaTaskScheduler
name|taskScheduler
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
decl_stmt|;
specifier|public
name|AdministrationServiceImpl
parameter_list|(
name|ArchivaConfiguration
name|archivaConfig
parameter_list|,
name|RepositoryContentConsumers
name|repoConsumersUtil
parameter_list|,
name|DatabaseConsumers
name|dbConsumersUtil
parameter_list|,
name|RepositoryContentFactory
name|repoFactory
parameter_list|,
name|ArtifactDAO
name|artifactDAO
parameter_list|,
name|ArchivaTaskScheduler
name|taskScheduler
parameter_list|,
name|Collection
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfig
expr_stmt|;
name|this
operator|.
name|repoConsumersUtil
operator|=
name|repoConsumersUtil
expr_stmt|;
name|this
operator|.
name|dbConsumersUtil
operator|=
name|dbConsumersUtil
expr_stmt|;
name|this
operator|.
name|repoFactory
operator|=
name|repoFactory
expr_stmt|;
name|this
operator|.
name|artifactDAO
operator|=
name|artifactDAO
expr_stmt|;
name|this
operator|.
name|taskScheduler
operator|=
name|taskScheduler
expr_stmt|;
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
block|}
comment|/**      * @see AdministrationService#configureDatabaseConsumer(String, boolean)      */
specifier|public
name|Boolean
name|configureDatabaseConsumer
parameter_list|(
name|String
name|consumerId
parameter_list|,
name|boolean
name|enable
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatabaseCleanupConsumer
argument_list|>
name|cleanupConsumers
init|=
name|dbConsumersUtil
operator|.
name|getAvailableCleanupConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatabaseUnprocessedArtifactConsumer
argument_list|>
name|unprocessedConsumers
init|=
name|dbConsumersUtil
operator|.
name|getAvailableUnprocessedConsumers
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|boolean
name|isCleanupConsumer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatabaseCleanupConsumer
name|consumer
range|:
name|cleanupConsumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|isCleanupConsumer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
for|for
control|(
name|DatabaseUnprocessedArtifactConsumer
name|consumer
range|:
name|unprocessedConsumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid database consumer."
argument_list|)
throw|;
block|}
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|DatabaseScanningConfiguration
name|dbScanningConfig
init|=
name|config
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCleanupConsumer
condition|)
block|{
name|dbScanningConfig
operator|.
name|addCleanupConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbScanningConfig
operator|.
name|addUnprocessedConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setDatabaseScanning
argument_list|(
name|dbScanningConfig
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see AdministrationService#configureRepositoryConsumer(String, String, boolean)      */
specifier|public
name|Boolean
name|configureRepositoryConsumer
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|consumerId
parameter_list|,
name|boolean
name|enable
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO use repoId once consumers are configured per repository! (MRM-930)
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableKnownConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|boolean
name|isKnownContentConsumer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KnownRepositoryContentConsumer
name|consumer
range|:
name|knownConsumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|isKnownContentConsumer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
for|for
control|(
name|InvalidRepositoryContentConsumer
name|consumer
range|:
name|invalidConsumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid repository consumer."
argument_list|)
throw|;
block|}
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RepositoryScanningConfiguration
name|repoScanningConfig
init|=
name|config
operator|.
name|getRepositoryScanning
argument_list|()
decl_stmt|;
if|if
condition|(
name|isKnownContentConsumer
condition|)
block|{
name|repoScanningConfig
operator|.
name|addKnownContentConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repoScanningConfig
operator|.
name|addInvalidContentConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setRepositoryScanning
argument_list|(
name|repoScanningConfig
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see AdministrationService#deleteArtifact(String, String, String, String)      */
specifier|public
name|Boolean
name|deleteArtifact
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|ManagedRepositoryContent
name|repoContent
init|=
name|repoFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
comment|// delete from file system
name|repoContent
operator|.
name|deleteVersion
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|ArtifactVersionsConstraint
name|constraint
init|=
operator|new
name|ArtifactVersionsConstraint
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArchivaArtifact
argument_list|>
name|artifacts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|artifacts
operator|=
name|artifactDAO
operator|.
name|queryArtifacts
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error occurred while cleaning up database."
argument_list|)
throw|;
block|}
if|if
condition|(
name|artifacts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ArchivaArtifact
name|artifact
range|:
name|artifacts
control|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
for|for
control|(
name|RepositoryListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|repoContent
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ContentNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Artifact does not exist."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository does not exist."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository exception occurred."
argument_list|)
throw|;
block|}
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see AdministrationService#executeDatabaseScanner()      */
specifier|public
name|Boolean
name|executeDatabaseScanner
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|taskScheduler
operator|.
name|isProcessingDatabaseTask
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Queueing database task on request from administration service"
argument_list|)
expr_stmt|;
name|DatabaseTask
name|task
init|=
operator|new
name|DatabaseTask
argument_list|()
decl_stmt|;
name|taskScheduler
operator|.
name|queueDatabaseTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see AdministrationService#executeRepositoryScanner(String)      */
specifier|public
name|Boolean
name|executeRepositoryScanner
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|taskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RepositoryTask
name|task
init|=
name|TaskCreator
operator|.
name|createRepositoryTask
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|taskScheduler
operator|.
name|queueRepositoryTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see AdministrationService#getAllDatabaseConsumers()      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabaseConsumers
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatabaseCleanupConsumer
argument_list|>
name|cleanupConsumers
init|=
name|dbConsumersUtil
operator|.
name|getAvailableCleanupConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatabaseUnprocessedArtifactConsumer
argument_list|>
name|unprocessedConsumers
init|=
name|dbConsumersUtil
operator|.
name|getAvailableUnprocessedConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|DatabaseCleanupConsumer
name|consumer
range|:
name|cleanupConsumers
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatabaseUnprocessedArtifactConsumer
name|consumer
range|:
name|unprocessedConsumers
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|consumers
return|;
block|}
comment|/**      * @see AdministrationService#getAllRepositoryConsumers()      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllRepositoryConsumers
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableKnownConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|KnownRepositoryContentConsumer
name|consumer
range|:
name|knownConsumers
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InvalidRepositoryContentConsumer
name|consumer
range|:
name|invalidConsumers
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|consumers
return|;
block|}
comment|/**      * @see AdministrationService#getAllManagedRepositories()      */
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getAllManagedRepositories
parameter_list|()
block|{
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|managedRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|ManagedRepository
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoConfigs
init|=
name|config
operator|.
name|getManagedRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|repoConfig
range|:
name|managedRepoConfigs
control|)
block|{
comment|// TODO fix resolution of repo url!
name|ManagedRepository
name|repo
init|=
operator|new
name|ManagedRepository
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getName
argument_list|()
argument_list|,
literal|"URL"
argument_list|,
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isReleases
argument_list|()
argument_list|)
decl_stmt|;
name|managedRepos
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|managedRepos
return|;
block|}
comment|/**      * @see AdministrationService#getAllRemoteRepositories()      */
specifier|public
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|getAllRemoteRepositories
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|remoteRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRepository
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoConfigs
init|=
name|config
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repoConfig
range|:
name|remoteRepoConfigs
control|)
block|{
name|RemoteRepository
name|repo
init|=
operator|new
name|RemoteRepository
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getUrl
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|)
decl_stmt|;
name|remoteRepos
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|remoteRepos
return|;
block|}
specifier|private
name|void
name|saveConfiguration
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error occurred in the registry."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error occurred while saving the configuration."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

