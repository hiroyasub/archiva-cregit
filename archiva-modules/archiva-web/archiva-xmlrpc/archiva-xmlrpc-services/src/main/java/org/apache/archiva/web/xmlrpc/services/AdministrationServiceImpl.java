begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|filter
operator|.
name|IncludesFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|events
operator|.
name|RepositoryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryContentConsumers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|stagerepository
operator|.
name|merge
operator|.
name|RepositoryMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|AdministrationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|validator
operator|.
name|GenericValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|InvalidRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|components
operator|.
name|scheduler
operator|.
name|CronExpressionValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * AdministrationServiceImpl  *  * @version $Id: AdministrationServiceImpl.java  */
end_comment

begin_class
specifier|public
class|class
name|AdministrationServiceImpl
implements|implements
name|AdministrationService
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|private
name|RepositoryContentConsumers
name|repoConsumersUtil
decl_stmt|;
specifier|private
name|RepositoryContentFactory
name|repoFactory
decl_stmt|;
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
decl_stmt|;
specifier|private
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
decl_stmt|;
specifier|private
name|RepositoryMerger
name|repositoryMerger
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STAGE
init|=
literal|"-stage"
decl_stmt|;
specifier|private
name|AuditListener
name|auditListener
decl_stmt|;
specifier|private
name|RepositorySessionFactory
name|repositorySessionFactory
decl_stmt|;
specifier|private
name|Registry
name|registry
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_ID_VALID_EXPRESSION
init|=
literal|"^[a-zA-Z0-9._-]+$"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_NAME_VALID_EXPRESSION
init|=
literal|"^([a-zA-Z0-9.)/_(-]|\\s)+$"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_LOCATION_VALID_EXPRESSION
init|=
literal|"^[-a-zA-Z0-9._/~:?!&amp;=\\\\]+$"
decl_stmt|;
specifier|public
name|AdministrationServiceImpl
parameter_list|(
name|ArchivaConfiguration
name|archivaConfig
parameter_list|,
name|RepositoryContentConsumers
name|repoConsumersUtil
parameter_list|,
name|RepositoryContentFactory
name|repoFactory
parameter_list|,
name|RepositorySessionFactory
name|repositorySessionFactory
parameter_list|,
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
parameter_list|,
name|Collection
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
parameter_list|,
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
parameter_list|,
name|RepositoryMerger
name|repositoryMerger
parameter_list|,
name|AuditListener
name|auditListener
parameter_list|,
name|Registry
name|registry
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfig
expr_stmt|;
name|this
operator|.
name|repoConsumersUtil
operator|=
name|repoConsumersUtil
expr_stmt|;
name|this
operator|.
name|repoFactory
operator|=
name|repoFactory
expr_stmt|;
name|this
operator|.
name|repositoryTaskScheduler
operator|=
name|repositoryTaskScheduler
expr_stmt|;
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
name|this
operator|.
name|repositorySessionFactory
operator|=
name|repositorySessionFactory
expr_stmt|;
name|this
operator|.
name|repositoryStatisticsManager
operator|=
name|repositoryStatisticsManager
expr_stmt|;
name|this
operator|.
name|repositoryMerger
operator|=
name|repositoryMerger
expr_stmt|;
name|this
operator|.
name|auditListener
operator|=
name|auditListener
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
comment|/**      * @see AdministrationService#configureRepositoryConsumer(String, String, boolean)      */
specifier|public
name|Boolean
name|configureRepositoryConsumer
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|consumerId
parameter_list|,
name|boolean
name|enable
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO use repoId once consumers are configured per repository! (MRM-930)
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableKnownConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|boolean
name|isKnownContentConsumer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KnownRepositoryContentConsumer
name|consumer
range|:
name|knownConsumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|isKnownContentConsumer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
for|for
control|(
name|InvalidRepositoryContentConsumer
name|consumer
range|:
name|invalidConsumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid repository consumer."
argument_list|)
throw|;
block|}
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RepositoryScanningConfiguration
name|repoScanningConfig
init|=
name|config
operator|.
name|getRepositoryScanning
argument_list|()
decl_stmt|;
if|if
condition|(
name|isKnownContentConsumer
condition|)
block|{
name|repoScanningConfig
operator|.
name|addKnownContentConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repoScanningConfig
operator|.
name|addInvalidContentConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setRepositoryScanning
argument_list|(
name|repoScanningConfig
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @see AdministrationService#deleteArtifact(String, String, String, String)      */
specifier|public
name|Boolean
name|deleteArtifact
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: remove duplication with web
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository does not exist."
argument_list|)
throw|;
block|}
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|ManagedRepositoryContent
name|repoContent
init|=
name|repoFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
comment|// delete from file system
name|repoContent
operator|.
name|deleteVersion
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactMetadata
name|artifact
range|:
name|artifacts
control|)
block|{
comment|// TODO: mismatch between artifact (snapshot) version and project (base) version here
if|if
condition|(
name|artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|metadataRepository
operator|.
name|removeArtifact
argument_list|(
name|artifact
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: move into the metadata repository proper - need to differentiate attachment of
comment|// repository metadata to an artifact
for|for
control|(
name|RepositoryListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|metadataRepository
argument_list|,
name|repoId
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContentNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Artifact does not exist."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository does not exist."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository exception occurred."
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * @see AdministrationService#executeRepositoryScanner(String)      */
specifier|public
name|Boolean
name|executeRepositoryScanner
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|repositoryTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @see AdministrationService#getAllRepositoryConsumers()      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllRepositoryConsumers
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableKnownConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumers
init|=
name|repoConsumersUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|KnownRepositoryContentConsumer
name|consumer
range|:
name|knownConsumers
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InvalidRepositoryContentConsumer
name|consumer
range|:
name|invalidConsumers
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|consumers
return|;
block|}
comment|/**      * @see AdministrationService#getAllManagedRepositories()      */
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getAllManagedRepositories
parameter_list|()
block|{
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|managedRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|ManagedRepository
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoConfigs
init|=
name|config
operator|.
name|getManagedRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|repoConfig
range|:
name|managedRepoConfigs
control|)
block|{
comment|// TODO fix resolution of repo url!
name|ManagedRepository
name|repo
init|=
operator|new
name|ManagedRepository
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getName
argument_list|()
argument_list|,
literal|"URL"
argument_list|,
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isReleases
argument_list|()
argument_list|)
decl_stmt|;
name|managedRepos
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|managedRepos
return|;
block|}
comment|/**      * @see AdministrationService#getAllRemoteRepositories()      */
specifier|public
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|getAllRemoteRepositories
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|remoteRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRepository
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoConfigs
init|=
name|config
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repoConfig
range|:
name|remoteRepoConfigs
control|)
block|{
name|RemoteRepository
name|repo
init|=
operator|new
name|RemoteRepository
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getUrl
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|)
decl_stmt|;
name|remoteRepos
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|remoteRepos
return|;
block|}
specifier|private
name|void
name|saveConfiguration
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error occurred in the registry."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error occurred while saving the configuration."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|addManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|layout
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|boolean
name|blockRedeployments
parameter_list|,
name|boolean
name|releasesIncluded
parameter_list|,
name|boolean
name|snapshotsIncluded
parameter_list|,
name|boolean
name|stageRepoNeeded
parameter_list|,
name|String
name|cronExpression
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|CronExpressionValidator
name|validator
init|=
operator|new
name|CronExpressionValidator
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to add new repository with id ["
operator|+
name|repoId
operator|+
literal|"], that id already exists as a managed repository."
argument_list|)
throw|;
block|}
if|else if
condition|(
name|config
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to add new repository with id ["
operator|+
name|repoId
operator|+
literal|"], that id already exists as a remote repository."
argument_list|)
throw|;
block|}
if|else if
condition|(
name|config
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to add new repository with id ["
operator|+
name|repoId
operator|+
literal|"], that id already exists as a repository group."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|validator
operator|.
name|validate
argument_list|(
name|cronExpression
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid cron expression."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|GenericValidator
operator|.
name|matchRegexp
argument_list|(
name|repoId
argument_list|,
name|REPOSITORY_ID_VALID_EXPRESSION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid repository ID. Identifier must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|GenericValidator
operator|.
name|matchRegexp
argument_list|(
name|name
argument_list|,
name|REPOSITORY_NAME_VALID_EXPRESSION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid repository name. Repository Name must only contain alphanumeric characters, white-spaces(' '), "
operator|+
literal|"forward-slashes(/), open-parenthesis('('), close-parenthesis(')'),  underscores(_), dots(.), and dashes(-)."
argument_list|)
throw|;
block|}
name|String
name|repoLocation
init|=
name|removeExpressions
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|GenericValidator
operator|.
name|matchRegexp
argument_list|(
name|repoLocation
argument_list|,
name|REPOSITORY_LOCATION_VALID_EXPRESSION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid repository location. Directory must only contain alphanumeric characters, equals(=), question-marks(?), "
operator|+
literal|"exclamation-points(!), ampersands(&amp;), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
throw|;
block|}
name|ManagedRepositoryConfiguration
name|repository
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repository
operator|.
name|setId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setBlockRedeployments
argument_list|(
name|blockRedeployments
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setReleases
argument_list|(
name|releasesIncluded
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setSnapshots
argument_list|(
name|snapshotsIncluded
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|repoLocation
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setRefreshCronExpression
argument_list|(
name|cronExpression
argument_list|)
expr_stmt|;
name|addRepository
argument_list|(
name|repository
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|stageRepoNeeded
condition|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
name|getStageRepoConfig
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|addRepository
argument_list|(
name|stagingRepository
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//MRM-1342 Repository statistics report doesn't appear to be working correctly
comment|//scan repository when adding of repository is successful
try|try
block|{
name|executeRepositoryScanner
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
if|if
condition|(
name|stageRepoNeeded
condition|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
name|getStageRepoConfig
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|executeRepositoryScanner
argument_list|(
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Unable to scan repository ["
argument_list|)
operator|.
name|append
argument_list|(
name|repoId
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|deleteManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repository
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"A repository with that id does not exist"
argument_list|)
throw|;
block|}
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|metadataRepository
operator|.
name|removeRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryStatisticsManager
operator|.
name|deleteStatistics
argument_list|(
name|metadataRepository
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|config
operator|.
name|removeManagedRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
try|try
block|{
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error saving configuration for delete action"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete repository "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
name|config
operator|.
name|getProxyConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|repoToGroupMap
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRepositoryToGroupMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|repoToGroupMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|repoToGroupMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|repoGroups
init|=
name|repoToGroupMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repoGroup
range|:
name|repoGroups
control|)
block|{
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findRepositoryGroupById
argument_list|(
name|repoGroup
argument_list|)
operator|.
name|removeRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|deleteManagedRepositoryContent
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repository
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository Id : "
operator|+
name|repoId
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|metadataRepository
operator|.
name|removeRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|File
index|[]
name|children
init|=
name|repoDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|children
control|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repoDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete repository contents of "
operator|+
name|repoDir
argument_list|)
throw|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|managedRepository
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"A repository with that id does not exist"
argument_list|)
throw|;
block|}
name|ManagedRepository
name|repo
init|=
operator|new
name|ManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getName
argument_list|()
argument_list|,
literal|"URL"
argument_list|,
name|managedRepository
operator|.
name|getLayout
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isReleases
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|repo
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|String
name|repoId
parameter_list|,
name|boolean
name|skipConflicts
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|stagingId
init|=
name|repoId
operator|+
name|STAGE
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
decl_stmt|;
name|ManagedRepositoryConfiguration
name|stagingConfig
decl_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|repoConfig
operator|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieved repository configuration for repo '"
operator|+
name|repoId
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|!=
literal|null
condition|)
block|{
name|stagingConfig
operator|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|stagingId
argument_list|)
expr_stmt|;
if|if
condition|(
name|stagingConfig
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|sourceArtifacts
init|=
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|stagingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|.
name|isReleases
argument_list|()
operator|&&
operator|!
name|repoConfig
operator|.
name|isSnapshots
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Repository to be merged contains releases only.."
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipConflicts
condition|)
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|conflicts
init|=
name|repositoryMerger
operator|.
name|getConflictingArtifacts
argument_list|(
name|metadataRepository
argument_list|,
name|repoId
argument_list|,
name|stagingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifacts in conflict.."
argument_list|)
expr_stmt|;
for|for
control|(
name|ArtifactMetadata
name|metadata
range|:
name|conflicts
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|metadata
operator|.
name|getNamespace
argument_list|()
operator|+
literal|":"
operator|+
name|metadata
operator|.
name|getProject
argument_list|()
operator|+
literal|":"
operator|+
name|metadata
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sourceArtifacts
operator|.
name|removeAll
argument_list|(
name|conflicts
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Source artifacts size :: "
operator|+
name|sourceArtifacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mergeWithOutSnapshots
argument_list|(
name|sourceArtifacts
argument_list|,
name|stagingId
argument_list|,
name|repoId
argument_list|,
name|metadataRepository
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Source artifacts size :: "
operator|+
name|sourceArtifacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mergeWithOutSnapshots
argument_list|(
name|sourceArtifacts
argument_list|,
name|stagingId
argument_list|,
name|repoId
argument_list|,
name|metadataRepository
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Repository to be merged has snapshot artifacts.."
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipConflicts
condition|)
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|conflicts
init|=
name|repositoryMerger
operator|.
name|getConflictingArtifacts
argument_list|(
name|metadataRepository
argument_list|,
name|repoId
argument_list|,
name|stagingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifacts in conflict.."
argument_list|)
expr_stmt|;
for|for
control|(
name|ArtifactMetadata
name|metadata
range|:
name|conflicts
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|metadata
operator|.
name|getNamespace
argument_list|()
operator|+
literal|":"
operator|+
name|metadata
operator|.
name|getProject
argument_list|()
operator|+
literal|":"
operator|+
name|metadata
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sourceArtifacts
operator|.
name|removeAll
argument_list|(
name|conflicts
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Source artifacts size :: "
operator|+
name|sourceArtifacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Filter
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsWithOutConflicts
init|=
operator|new
name|IncludesFilter
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|sourceArtifacts
argument_list|)
decl_stmt|;
name|repositoryMerger
operator|.
name|merge
argument_list|(
name|metadataRepository
argument_list|,
name|stagingId
argument_list|,
name|repoId
argument_list|,
name|artifactsWithOutConflicts
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Staging repository '"
operator|+
name|stagingId
operator|+
literal|"' merged successfully with managed repo '"
operator|+
name|repoId
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repositoryMerger
operator|.
name|merge
argument_list|(
name|metadataRepository
argument_list|,
name|stagingId
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Staging repository '"
operator|+
name|stagingId
operator|+
literal|"' merged successfully with managed repo '"
operator|+
name|repoId
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Staging Id : "
operator|+
name|stagingId
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Repository Id : "
operator|+
name|repoId
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|repositoryTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|AuditEvent
name|event
init|=
name|createAuditEvent
argument_list|(
name|repoConfig
argument_list|)
decl_stmt|;
comment|// add event for audit log reports
name|metadataRepository
operator|.
name|addMetadataFacet
argument_list|(
name|event
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// log event in archiva audit log
name|auditListener
operator|.
name|auditEvent
argument_list|(
name|createAuditEvent
argument_list|(
name|repoConfig
argument_list|)
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|addRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Normalize the path
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to add repository - no write access, can not create the root directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
comment|// todo: setting userid of audit event
specifier|private
name|AuditEvent
name|createAuditEvent
parameter_list|(
name|ManagedRepositoryConfiguration
name|repoConfig
parameter_list|)
block|{
name|AuditEvent
name|event
init|=
operator|new
name|AuditEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setAction
argument_list|(
name|AuditEvent
operator|.
name|MERGE_REPO_REMOTE
argument_list|)
expr_stmt|;
name|event
operator|.
name|setRepositoryId
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setResource
argument_list|(
name|repoConfig
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
specifier|private
name|void
name|mergeWithOutSnapshots
parameter_list|(
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|sourceArtifacts
parameter_list|,
name|String
name|sourceRepoId
parameter_list|,
name|String
name|repoid
parameter_list|,
name|MetadataRepository
name|metadataRepository
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsWithOutSnapshots
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ArtifactMetadata
name|metadata
range|:
name|sourceArtifacts
control|)
block|{
if|if
condition|(
name|metadata
operator|.
name|getProjectVersion
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SNAPSHOT"
argument_list|)
condition|)
block|{
name|artifactsWithOutSnapshots
operator|.
name|add
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
name|sourceArtifacts
operator|.
name|removeAll
argument_list|(
name|artifactsWithOutSnapshots
argument_list|)
expr_stmt|;
name|Filter
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactListWithOutSnapShots
init|=
operator|new
name|IncludesFilter
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|sourceArtifacts
argument_list|)
decl_stmt|;
name|repositoryMerger
operator|.
name|merge
argument_list|(
name|metadataRepository
argument_list|,
name|sourceRepoId
argument_list|,
name|repoid
argument_list|,
name|artifactListWithOutSnapShots
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|getStageRepoConfig
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|stagingRepository
operator|.
name|setId
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"-stage"
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setName
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|"-stage"
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setBlockRedeployments
argument_list|(
name|repository
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setDaysOlder
argument_list|(
name|repository
operator|.
name|getDaysOlder
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|repository
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setIndexDir
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|stagingRepository
operator|.
name|setLocation
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
argument_list|)
operator|+
literal|"/"
operator|+
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setRefreshCronExpression
argument_list|(
name|repository
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setReleases
argument_list|(
name|repository
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setRetentionCount
argument_list|(
name|repository
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setScanned
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setSnapshots
argument_list|(
name|repository
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stagingRepository
return|;
block|}
specifier|private
name|String
name|removeExpressions
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|String
name|value
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|directory
argument_list|,
literal|"${appserver.base}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|,
literal|"${appserver.base}"
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|value
argument_list|,
literal|"${appserver.home}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.home"
argument_list|,
literal|"${appserver.home}"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

