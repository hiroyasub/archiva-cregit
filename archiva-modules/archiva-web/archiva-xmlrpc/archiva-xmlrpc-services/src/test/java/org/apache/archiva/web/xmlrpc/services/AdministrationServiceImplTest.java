begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|filter
operator|.
name|IncludesFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|events
operator|.
name|RepositoryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryContentConsumers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|stagerepository
operator|.
name|merge
operator|.
name|RepositoryMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|FileFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|FileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|InvalidRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ManagedDefaultRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ManagedLegacyRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|PathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusInSpringTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|MockClassControl
import|;
end_import

begin_comment
comment|/**  * AdministrationServiceImplTest  *   * @version $Id: AdministrationServiceImplTest.java  */
end_comment

begin_class
specifier|public
class|class
name|AdministrationServiceImplTest
extends|extends
name|PlexusInSpringTestCase
block|{
specifier|private
name|MockControl
name|archivaConfigControl
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfig
decl_stmt|;
specifier|private
name|MockControl
name|configControl
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|private
name|AdministrationServiceImpl
name|service
decl_stmt|;
specifier|private
name|MockControl
name|repositoryTaskSchedulerControl
decl_stmt|;
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
decl_stmt|;
comment|// repository consumers
specifier|private
name|MockControl
name|repoConsumerUtilsControl
decl_stmt|;
specifier|private
name|RepositoryContentConsumers
name|repoConsumersUtil
decl_stmt|;
specifier|private
name|MockControl
name|knownContentConsumerControl
decl_stmt|;
specifier|private
name|MockControl
name|invalidContentConsumerControl
decl_stmt|;
specifier|private
name|KnownRepositoryContentConsumer
name|indexArtifactConsumer
decl_stmt|;
specifier|private
name|KnownRepositoryContentConsumer
name|indexPomConsumer
decl_stmt|;
specifier|private
name|InvalidRepositoryContentConsumer
name|checkPomConsumer
decl_stmt|;
specifier|private
name|InvalidRepositoryContentConsumer
name|checkMetadataConsumer
decl_stmt|;
comment|// delete artifact
specifier|private
name|MockControl
name|repoFactoryControl
decl_stmt|;
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
specifier|private
name|MockControl
name|listenerControl
decl_stmt|;
specifier|private
name|RepositoryListener
name|listener
decl_stmt|;
specifier|private
name|MockControl
name|metadataRepositoryControl
decl_stmt|;
specifier|private
name|MetadataRepository
name|metadataRepository
decl_stmt|;
specifier|private
name|MockControl
name|repositoryStatisticsManagerControl
decl_stmt|;
specifier|private
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
decl_stmt|;
specifier|private
name|MockControl
name|repositoryMergerControl
decl_stmt|;
specifier|private
name|RepositoryMerger
name|repositoryMerger
decl_stmt|;
specifier|private
name|MockControl
name|auditListenerControl
decl_stmt|;
specifier|private
name|AuditListener
name|auditListener
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STAGE
init|=
literal|"-stage"
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|archivaConfig
operator|=
operator|(
name|ArchivaConfiguration
operator|)
name|archivaConfigControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|configControl
operator|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
operator|(
name|Configuration
operator|)
name|configControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|RepositoryArchivaTaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|repositoryTaskScheduler
operator|=
operator|(
name|RepositoryArchivaTaskScheduler
operator|)
name|repositoryTaskSchedulerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
comment|// repo consumers
name|repoConsumerUtilsControl
operator|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|RepositoryContentConsumers
operator|.
name|class
argument_list|)
expr_stmt|;
name|repoConsumersUtil
operator|=
operator|(
name|RepositoryContentConsumers
operator|)
name|repoConsumerUtilsControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|)
expr_stmt|;
name|indexArtifactConsumer
operator|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|knownContentConsumerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|indexPomConsumer
operator|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|knownContentConsumerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|InvalidRepositoryContentConsumer
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkPomConsumer
operator|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|invalidContentConsumerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|checkMetadataConsumer
operator|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|invalidContentConsumerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
comment|// delete artifact
name|repoFactoryControl
operator|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|RepositoryContentFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|repositoryFactory
operator|=
operator|(
name|RepositoryContentFactory
operator|)
name|repoFactoryControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|MetadataRepository
operator|.
name|class
argument_list|)
expr_stmt|;
name|metadataRepository
operator|=
operator|(
name|MetadataRepository
operator|)
name|metadataRepositoryControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|listenerControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|RepositoryListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|(
name|RepositoryListener
operator|)
name|listenerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|repositoryStatisticsManagerControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|RepositoryStatisticsManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|repositoryStatisticsManager
operator|=
operator|(
name|RepositoryStatisticsManager
operator|)
name|repositoryStatisticsManagerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|repositoryMergerControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|RepositoryMerger
operator|.
name|class
argument_list|)
expr_stmt|;
name|repositoryMerger
operator|=
operator|(
name|RepositoryMerger
operator|)
name|repositoryMergerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|auditListenerControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|AuditListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|auditListener
operator|=
operator|(
name|AuditListener
operator|)
name|auditListenerControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|service
operator|=
operator|new
name|AdministrationServiceImpl
argument_list|(
name|archivaConfig
argument_list|,
name|repoConsumersUtil
argument_list|,
name|repositoryFactory
argument_list|,
name|metadataRepository
argument_list|,
name|repositoryTaskScheduler
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|listener
argument_list|)
argument_list|,
name|repositoryStatisticsManager
argument_list|,
name|repositoryMerger
argument_list|,
name|auditListener
argument_list|)
expr_stmt|;
block|}
comment|/* Tests for repository consumers */
specifier|public
name|void
name|testGetAllRepoConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|recordRepoConsumers
argument_list|()
expr_stmt|;
name|repoConsumerUtilsControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repoConsumers
init|=
name|service
operator|.
name|getAllRepositoryConsumers
argument_list|()
decl_stmt|;
name|repoConsumerUtilsControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|repoConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repoConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoConsumers
operator|.
name|contains
argument_list|(
literal|"index-artifact"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoConsumers
operator|.
name|contains
argument_list|(
literal|"index-pom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoConsumers
operator|.
name|contains
argument_list|(
literal|"check-pom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoConsumers
operator|.
name|contains
argument_list|(
literal|"check-metadata"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConfigureValidRepositoryConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryScanningConfiguration
name|repoScanning
init|=
operator|new
name|RepositoryScanningConfiguration
argument_list|()
decl_stmt|;
name|repoScanning
operator|.
name|addKnownContentConsumer
argument_list|(
literal|"index-artifact"
argument_list|)
expr_stmt|;
name|repoScanning
operator|.
name|addKnownContentConsumer
argument_list|(
literal|"index-pom"
argument_list|)
expr_stmt|;
name|repoScanning
operator|.
name|addInvalidContentConsumer
argument_list|(
literal|"check-pom"
argument_list|)
expr_stmt|;
comment|// test enable "check-metadata" consumer
name|recordRepoConsumers
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getRepositoryScanning
argument_list|()
argument_list|,
name|repoScanning
argument_list|)
expr_stmt|;
name|config
operator|.
name|setRepositoryScanning
argument_list|(
name|repoScanning
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|repoConsumerUtilsControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|service
operator|.
name|configureRepositoryConsumer
argument_list|(
literal|null
argument_list|,
literal|"check-metadata"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"An exception should not have been thrown."
argument_list|)
expr_stmt|;
block|}
name|repoConsumerUtilsControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// test disable "check-metadata" consumer
name|repoConsumerUtilsControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|repoScanning
operator|.
name|addInvalidContentConsumer
argument_list|(
literal|"check-metadata"
argument_list|)
expr_stmt|;
name|recordRepoConsumers
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getRepositoryScanning
argument_list|()
argument_list|,
name|repoScanning
argument_list|)
expr_stmt|;
name|config
operator|.
name|setRepositoryScanning
argument_list|(
name|repoScanning
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|repoConsumerUtilsControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|service
operator|.
name|configureRepositoryConsumer
argument_list|(
literal|null
argument_list|,
literal|"check-metadata"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|repoConsumerUtilsControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"An excecption should not have been thrown."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testConfigureInvalidRepositoryConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|recordRepoConsumers
argument_list|()
expr_stmt|;
name|repoConsumerUtilsControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|configureRepositoryConsumer
argument_list|(
literal|null
argument_list|,
literal|"invalid-consumer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"An exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid repository consumer."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|repoConsumerUtilsControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
comment|/* Tests for delete artifact */
specifier|public
name|void
name|testDeleteM2ArtifactArtifactExists
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRepositoryConfiguration
name|managedRepo
init|=
name|createManagedRepo
argument_list|(
literal|"default"
argument_list|,
literal|"default-repo"
argument_list|)
decl_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|managedRepo
argument_list|)
expr_stmt|;
name|ManagedDefaultRepositoryContent
name|repoContent
init|=
operator|new
name|ManagedDefaultRepositoryContent
argument_list|()
decl_stmt|;
name|repoContent
operator|.
name|setRepository
argument_list|(
name|managedRepo
argument_list|)
expr_stmt|;
name|repoFactoryControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|repoContent
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getArtifacts
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|artifacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|metadataRepositoryControl
operator|.
name|expectAndReturn
argument_list|(
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|metadataRepository
operator|.
name|deleteArtifact
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|listenerControl
operator|.
name|setVoidCallable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repoFactoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|listenerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
name|service
operator|.
name|deleteArtifact
argument_list|(
literal|"internal"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"archiva-test"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repoFactoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|listenerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|managedRepo
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"org/apache/archiva/archiva-test/1.0"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|managedRepo
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"org/apache/archiva/archiva-test/1.1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteM1ArtifactArtifactExists
parameter_list|()
throws|throws
name|Exception
block|{
name|MockControl
name|fileTypesControl
init|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|FileTypes
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileTypes
name|fileTypes
init|=
operator|(
name|FileTypes
operator|)
name|fileTypesControl
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|MockControl
name|pathParserControl
init|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|PathParser
operator|.
name|class
argument_list|)
decl_stmt|;
name|PathParser
name|parser
init|=
operator|(
name|PathParser
operator|)
name|pathParserControl
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|managedRepo
init|=
name|createManagedRepo
argument_list|(
literal|"legacy"
argument_list|,
literal|"legacy-repo"
argument_list|)
decl_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|managedRepo
argument_list|)
expr_stmt|;
name|ManagedLegacyRepositoryContent
name|repoContent
init|=
operator|new
name|ManagedLegacyRepositoryContent
argument_list|()
decl_stmt|;
name|repoContent
operator|.
name|setRepository
argument_list|(
name|managedRepo
argument_list|)
expr_stmt|;
name|repoContent
operator|.
name|setFileTypes
argument_list|(
name|fileTypes
argument_list|)
expr_stmt|;
name|repoContent
operator|.
name|setLegacyPathParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|repoFactoryControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|repoContent
argument_list|)
expr_stmt|;
name|recordInManagedLegacyRepoContent
argument_list|(
name|fileTypesControl
argument_list|,
name|fileTypes
argument_list|,
name|pathParserControl
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
name|getArtifacts
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|artifacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|metadataRepositoryControl
operator|.
name|expectAndReturn
argument_list|(
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|metadataRepository
operator|.
name|deleteArtifact
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifact
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|listenerControl
operator|.
name|setVoidCallable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repoFactoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|listenerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|fileTypesControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|pathParserControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
name|service
operator|.
name|deleteArtifact
argument_list|(
literal|"internal"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"archiva-test"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repoFactoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|listenerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|fileTypesControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|pathParserControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|File
name|repo
init|=
operator|new
name|File
argument_list|(
name|managedRepo
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|repo
argument_list|,
literal|"org.apache.archiva/jars/archiva-test-1.0.jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|repo
argument_list|,
literal|"org.apache.archiva/poms/archiva-test-1.0.pom"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|repo
argument_list|,
literal|"org.apache.archiva/jars/archiva-test-1.1.jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|repo
argument_list|,
literal|"org.apache.archiva/jars/archiva-diff-1.0.jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|repo
argument_list|,
literal|"org.apache.archiva/poms/archiva-test-1.1.pom"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|repo
argument_list|,
literal|"org.apache.archiva/poms/archiva-diff-1.0.pom"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteArtifactArtifactDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRepositoryConfiguration
name|managedRepo
init|=
name|createManagedRepo
argument_list|(
literal|"default"
argument_list|,
literal|"default-repo"
argument_list|)
decl_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|managedRepo
argument_list|)
expr_stmt|;
name|ManagedDefaultRepositoryContent
name|repoContent
init|=
operator|new
name|ManagedDefaultRepositoryContent
argument_list|()
decl_stmt|;
name|repoContent
operator|.
name|setRepository
argument_list|(
name|managedRepo
argument_list|)
expr_stmt|;
name|repoFactoryControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|repoContent
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repoFactoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|deleteArtifact
argument_list|(
literal|"internal"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"archiva-non-existing"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"An exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Artifact does not exist."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repoFactoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|createManagedRepo
parameter_list|(
name|String
name|layout
parameter_list|,
name|String
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|srcDir
init|=
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
literal|"src/test/repositories/"
operator|+
name|directory
argument_list|)
decl_stmt|;
name|File
name|repoDir
init|=
name|getTestFile
argument_list|(
literal|"target/test-repos/"
operator|+
name|directory
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|srcDir
argument_list|,
name|repoDir
argument_list|,
name|FileFilterUtils
operator|.
name|makeSVNAware
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|managedRepo
init|=
name|createManagedRepo
argument_list|(
literal|"internal"
argument_list|,
name|layout
argument_list|,
literal|"Internal Repository"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|managedRepo
operator|.
name|setLocation
argument_list|(
name|repoDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|managedRepo
return|;
block|}
specifier|public
name|void
name|testDeleteArtifacRepositoryDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"non-existing-repo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|deleteArtifact
argument_list|(
literal|"non-existing-repo"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"archiva-test"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"An exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Repository does not exist."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
comment|/* Tests for repository scanning */
specifier|public
name|void
name|testExecuteRepoScannerRepoExistsAndNotBeingScanned
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|createManagedRepo
argument_list|(
literal|"internal"
argument_list|,
literal|"default"
argument_list|,
literal|"Internal Repository"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|repositoryTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|service
operator|.
name|executeRepositoryScanner
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"An exception should not have been thrown."
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testExecuteRepoScannerRepoExistsButBeingScanned
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
name|createManagedRepo
argument_list|(
literal|"internal"
argument_list|,
literal|"default"
argument_list|,
literal|"Internal Repository"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|service
operator|.
name|executeRepositoryScanner
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"An exception should not have been thrown."
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testExecuteRepoScannerRepoDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"internal"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|executeRepositoryScanner
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"An exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Repository does not exist."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
comment|/* Tests for querying repositories */
specifier|public
name|void
name|testGetAllManagedRepositories
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|managedRepos
operator|.
name|add
argument_list|(
name|createManagedRepo
argument_list|(
literal|"internal"
argument_list|,
literal|"default"
argument_list|,
literal|"Internal Repository"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|managedRepos
operator|.
name|add
argument_list|(
name|createManagedRepo
argument_list|(
literal|"snapshots"
argument_list|,
literal|"default"
argument_list|,
literal|"Snapshots Repository"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getManagedRepositories
argument_list|()
argument_list|,
name|managedRepos
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repos
init|=
name|service
operator|.
name|getAllManagedRepositories
argument_list|()
decl_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|repos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertManagedRepo
argument_list|(
name|repos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|managedRepos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertManagedRepo
argument_list|(
name|repos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|managedRepos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAllRemoteRepositories
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|remoteRepos
operator|.
name|add
argument_list|(
name|createRemoteRepository
argument_list|(
literal|"central"
argument_list|,
literal|"Central Repository"
argument_list|,
literal|"default"
argument_list|,
literal|"http://repo1.maven.org/maven2"
argument_list|)
argument_list|)
expr_stmt|;
name|remoteRepos
operator|.
name|add
argument_list|(
name|createRemoteRepository
argument_list|(
literal|"dummy"
argument_list|,
literal|"Dummy Remote Repository"
argument_list|,
literal|"legacy"
argument_list|,
literal|"http://dummy.com/dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getRemoteRepositories
argument_list|()
argument_list|,
name|remoteRepos
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|repos
init|=
name|service
operator|.
name|getAllRemoteRepositories
argument_list|()
decl_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|repos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteRepo
argument_list|(
name|repos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|remoteRepos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoteRepo
argument_list|(
name|repos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|remoteRepos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Merge method */
specifier|public
name|void
name|testMergeRepositoryWithInvalidRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"invalid"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|merge
argument_list|(
literal|"invalid"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Repository Id : invalid not found."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMergeWithNoStagingRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"repo"
argument_list|)
argument_list|,
name|createManagedRepo
argument_list|(
literal|"repo"
argument_list|,
literal|"default"
argument_list|,
literal|"repo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"repo-stage"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|merge
argument_list|(
literal|"repo"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Staging Id : repo-stage not found."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMergeRepositoriesAndScan
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"artifact"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFileLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|merge
init|=
name|createManagedRepo
argument_list|(
literal|"merge"
argument_list|,
literal|"default"
argument_list|,
literal|"merge"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|merge
operator|.
name|setLocation
argument_list|(
literal|"target/test-repository/merge"
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|staging
init|=
name|createStagingRepo
argument_list|(
name|merge
argument_list|)
decl_stmt|;
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"merge"
argument_list|)
argument_list|,
name|merge
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"merge-stage"
argument_list|)
argument_list|,
name|staging
argument_list|)
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|expectAndReturn
argument_list|(
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|staging
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|sources
argument_list|)
expr_stmt|;
name|repositoryMergerControl
operator|.
name|expectAndDefaultReturn
argument_list|(
name|repositoryMerger
operator|.
name|getConflictingArtifacts
argument_list|(
name|staging
operator|.
name|getId
argument_list|()
argument_list|,
name|merge
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|sources
argument_list|)
expr_stmt|;
name|repositoryMerger
operator|.
name|merge
argument_list|(
name|staging
operator|.
name|getId
argument_list|()
argument_list|,
name|merge
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryMergerControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
literal|"merge"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// scanning after merge
name|repositoryTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
comment|// audit logs
name|metadataRepository
operator|.
name|addMetadataFacet
argument_list|(
name|merge
operator|.
name|getId
argument_list|()
argument_list|,
name|createAuditEvent
argument_list|(
name|merge
argument_list|)
argument_list|)
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repositoryMergerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|boolean
name|a
init|=
name|service
operator|.
name|merge
argument_list|(
literal|"merge"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repositoryMergerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMergeRepositoriesWithConflictsAndScan
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|one
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|one
operator|.
name|setId
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|two
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|two
operator|.
name|setId
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setVersion
argument_list|(
literal|"1.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|sources
operator|.
name|removeAll
argument_list|(
name|conflicts
argument_list|)
expr_stmt|;
name|Filter
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactsWithOutConflicts
init|=
operator|new
name|IncludesFilter
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|sources
argument_list|)
decl_stmt|;
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repo
init|=
name|createManagedRepo
argument_list|(
literal|"repo"
argument_list|,
literal|"default"
argument_list|,
literal|"repo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setLocation
argument_list|(
literal|"target/test-repository/one"
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|staging
init|=
name|createStagingRepo
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"repo"
argument_list|)
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
literal|"repo-stage"
argument_list|)
argument_list|,
name|staging
argument_list|)
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|expectAndReturn
argument_list|(
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|staging
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|sources
argument_list|)
expr_stmt|;
name|repositoryMergerControl
operator|.
name|expectAndDefaultReturn
argument_list|(
name|repositoryMerger
operator|.
name|getConflictingArtifacts
argument_list|(
name|staging
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
name|repositoryMerger
operator|.
name|merge
argument_list|(
name|staging
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactsWithOutConflicts
argument_list|)
expr_stmt|;
name|repositoryMergerControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|repositoryMergerControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
literal|"repo"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|repositoryTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
comment|// audit logs
name|metadataRepository
operator|.
name|addMetadataFacet
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|createAuditEvent
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repositoryMergerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|boolean
name|a
init|=
name|service
operator|.
name|merge
argument_list|(
literal|"repo"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|metadataRepositoryControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repositoryMergerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|repositoryTaskSchedulerControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testAddManagedRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|projId
init|=
literal|"org.apache.archiva"
decl_stmt|;
name|String
name|repoId
init|=
name|projId
operator|+
literal|".releases"
decl_stmt|;
name|String
name|layout
init|=
literal|"default"
decl_stmt|;
name|String
name|name
init|=
name|projId
operator|+
literal|" Releases"
decl_stmt|;
name|String
name|releaseLocation
init|=
literal|"target/test-repository/"
operator|+
name|projId
operator|+
literal|".releases"
decl_stmt|;
name|String
name|stageLocation
init|=
name|releaseLocation
operator|+
literal|"-stage"
decl_stmt|;
name|ManagedRepositoryConfiguration
name|managedRepo
init|=
name|createManagedRepo
argument_list|(
literal|"repo1"
argument_list|,
literal|"default"
argument_list|,
literal|"repo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteRepositoryConfiguration
name|remoteRepo
init|=
name|createRemoteRepository
argument_list|(
literal|"central"
argument_list|,
literal|"Central Repository"
argument_list|,
literal|"default"
argument_list|,
literal|"http://repo1.maven.org/maven2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|repositories
operator|.
name|add
argument_list|(
name|managedRepo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryGroupConfiguration
name|repoGroup
init|=
name|createRepoGroupConfig
argument_list|(
literal|"repoGroup"
argument_list|,
name|repositories
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|repoGroupMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|managedRepoMap
operator|.
name|put
argument_list|(
literal|"repo1"
argument_list|,
name|managedRepo
argument_list|)
expr_stmt|;
name|remoteRepoMap
operator|.
name|put
argument_list|(
literal|"repo1"
argument_list|,
name|remoteRepo
argument_list|)
expr_stmt|;
name|repoGroupMap
operator|.
name|put
argument_list|(
literal|"repo1"
argument_list|,
name|repoGroup
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
argument_list|,
name|managedRepoMap
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
argument_list|,
name|remoteRepoMap
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
argument_list|,
name|repoGroupMap
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|managedRepo
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|managedRepo
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setMatcher
argument_list|(
name|MockControl
operator|.
name|ALWAYS_MATCHER
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|setVoidCallable
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|releaseLocation
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|stageLocation
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|service
operator|.
name|addManagedRepository
argument_list|(
name|repoId
argument_list|,
name|layout
argument_list|,
name|name
argument_list|,
name|releaseLocation
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"0 15 3 * * ? *"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|releaseLocation
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|stageLocation
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|releaseLocation
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|stageLocation
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/* private methods */
specifier|private
name|void
name|assertRemoteRepo
parameter_list|(
name|RemoteRepository
name|remoteRepo
parameter_list|,
name|RemoteRepositoryConfiguration
name|expectedRepoConfig
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|remoteRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|remoteRepo
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|remoteRepo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getUrl
argument_list|()
argument_list|,
name|remoteRepo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RemoteRepositoryConfiguration
name|createRemoteRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|layout
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|remoteConfig
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|remoteConfig
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|remoteConfig
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|remoteConfig
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|remoteConfig
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|remoteConfig
return|;
block|}
specifier|private
name|void
name|assertManagedRepo
parameter_list|(
name|ManagedRepository
name|managedRepo
parameter_list|,
name|ManagedRepositoryConfiguration
name|expectedRepoConfig
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|managedRepo
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|managedRepo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO enable assert once fixed in AdministrationServiceImpl!
comment|// assertEquals( "http://localhost:8080/archiva/repository/" + expectedRepoConfig.getId(), managedRepo.getUrl()
comment|// );
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|isReleases
argument_list|()
argument_list|,
name|managedRepo
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRepoConfig
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|managedRepo
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|createManagedRepo
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|layout
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|hasReleases
parameter_list|,
name|boolean
name|hasSnapshots
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repoConfig
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setReleases
argument_list|(
name|hasReleases
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setSnapshots
argument_list|(
name|hasSnapshots
argument_list|)
expr_stmt|;
return|return
name|repoConfig
return|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|createStagingRepo
parameter_list|(
name|ManagedRepositoryConfiguration
name|repoConfig
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|stagingRepo
operator|.
name|setId
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
operator|+
name|STAGE
argument_list|)
expr_stmt|;
name|stagingRepo
operator|.
name|setLayout
argument_list|(
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepo
operator|.
name|setName
argument_list|(
name|repoConfig
operator|+
name|STAGE
argument_list|)
expr_stmt|;
name|stagingRepo
operator|.
name|setReleases
argument_list|(
name|repoConfig
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepo
operator|.
name|setSnapshots
argument_list|(
name|repoConfig
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepo
operator|.
name|setLocation
argument_list|(
name|repoConfig
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stagingRepo
return|;
block|}
specifier|private
name|AuditEvent
name|createAuditEvent
parameter_list|(
name|ManagedRepositoryConfiguration
name|repoConfig
parameter_list|)
block|{
name|AuditEvent
name|auditEvent
init|=
operator|new
name|AuditEvent
argument_list|()
decl_stmt|;
name|auditEvent
operator|.
name|setAction
argument_list|(
name|AuditEvent
operator|.
name|MERGE_REPO_REMOTE
argument_list|)
expr_stmt|;
name|auditEvent
operator|.
name|setRepositoryId
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|auditEvent
operator|.
name|setResource
argument_list|(
name|repoConfig
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|auditEvent
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|auditEvent
return|;
block|}
specifier|private
name|void
name|recordRepoConsumers
parameter_list|()
block|{
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|availableKnownConsumers
init|=
operator|new
name|ArrayList
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
argument_list|()
decl_stmt|;
name|availableKnownConsumers
operator|.
name|add
argument_list|(
name|indexArtifactConsumer
argument_list|)
expr_stmt|;
name|availableKnownConsumers
operator|.
name|add
argument_list|(
name|indexPomConsumer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|availableInvalidConsumers
init|=
operator|new
name|ArrayList
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
argument_list|()
decl_stmt|;
name|availableInvalidConsumers
operator|.
name|add
argument_list|(
name|checkPomConsumer
argument_list|)
expr_stmt|;
name|availableInvalidConsumers
operator|.
name|add
argument_list|(
name|checkMetadataConsumer
argument_list|)
expr_stmt|;
name|repoConsumerUtilsControl
operator|.
name|expectAndReturn
argument_list|(
name|repoConsumersUtil
operator|.
name|getAvailableKnownConsumers
argument_list|()
argument_list|,
name|availableKnownConsumers
argument_list|)
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|expectAndReturn
argument_list|(
name|indexArtifactConsumer
operator|.
name|getId
argument_list|()
argument_list|,
literal|"index-artifact"
argument_list|)
expr_stmt|;
name|knownContentConsumerControl
operator|.
name|expectAndReturn
argument_list|(
name|indexPomConsumer
operator|.
name|getId
argument_list|()
argument_list|,
literal|"index-pom"
argument_list|)
expr_stmt|;
name|repoConsumerUtilsControl
operator|.
name|expectAndReturn
argument_list|(
name|repoConsumersUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
argument_list|,
name|availableInvalidConsumers
argument_list|)
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|expectAndReturn
argument_list|(
name|checkPomConsumer
operator|.
name|getId
argument_list|()
argument_list|,
literal|"check-pom"
argument_list|)
expr_stmt|;
name|invalidContentConsumerControl
operator|.
name|expectAndReturn
argument_list|(
name|checkMetadataConsumer
operator|.
name|getId
argument_list|()
argument_list|,
literal|"check-metadata"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|recordInManagedLegacyRepoContent
parameter_list|(
name|MockControl
name|fileTypesControl
parameter_list|,
name|FileTypes
name|fileTypes
parameter_list|,
name|MockControl
name|pathParserControl
parameter_list|,
name|PathParser
name|parser
parameter_list|)
throws|throws
name|LayoutException
block|{
name|String
name|sep
init|=
name|File
operator|.
name|separator
decl_stmt|;
name|String
name|ad10p
init|=
literal|"org.apache.archiva"
operator|+
name|sep
operator|+
literal|"poms"
operator|+
name|sep
operator|+
literal|"archiva-diff-1.0.pom"
decl_stmt|;
name|String
name|at10p
init|=
literal|"org.apache.archiva"
operator|+
name|sep
operator|+
literal|"poms"
operator|+
name|sep
operator|+
literal|"archiva-test-1.0.pom"
decl_stmt|;
name|String
name|at11p
init|=
literal|"org.apache.archiva"
operator|+
name|sep
operator|+
literal|"poms"
operator|+
name|sep
operator|+
literal|"archiva-test-1.1.pom"
decl_stmt|;
name|String
name|ad10j
init|=
literal|"org.apache.archiva"
operator|+
name|sep
operator|+
literal|"jars"
operator|+
name|sep
operator|+
literal|"archiva-diff-1.0.jar"
decl_stmt|;
name|String
name|at10j
init|=
literal|"org.apache.archiva"
operator|+
name|sep
operator|+
literal|"jars"
operator|+
name|sep
operator|+
literal|"archiva-test-1.0.jar"
decl_stmt|;
name|String
name|at11j
init|=
literal|"org.apache.archiva"
operator|+
name|sep
operator|+
literal|"jars"
operator|+
name|sep
operator|+
literal|"archiva-test-1.1.jar"
decl_stmt|;
name|fileTypesControl
operator|.
name|expectAndReturn
argument_list|(
name|fileTypes
operator|.
name|matchesArtifactPattern
argument_list|(
name|at10p
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileTypesControl
operator|.
name|expectAndReturn
argument_list|(
name|fileTypes
operator|.
name|matchesArtifactPattern
argument_list|(
name|at11p
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileTypesControl
operator|.
name|expectAndReturn
argument_list|(
name|fileTypes
operator|.
name|matchesArtifactPattern
argument_list|(
name|ad10p
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileTypesControl
operator|.
name|expectAndReturn
argument_list|(
name|fileTypes
operator|.
name|matchesArtifactPattern
argument_list|(
name|ad10j
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileTypesControl
operator|.
name|expectAndReturn
argument_list|(
name|fileTypes
operator|.
name|matchesArtifactPattern
argument_list|(
name|at10j
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileTypesControl
operator|.
name|expectAndReturn
argument_list|(
name|fileTypes
operator|.
name|matchesArtifactPattern
argument_list|(
name|at11j
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ArtifactReference
name|aRef
init|=
name|createArtifactReference
argument_list|(
literal|"archiva-test"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"1.1"
argument_list|,
literal|"pom"
argument_list|)
decl_stmt|;
name|pathParserControl
operator|.
name|expectAndReturn
argument_list|(
name|parser
operator|.
name|toArtifactReference
argument_list|(
name|at11p
argument_list|)
argument_list|,
name|aRef
argument_list|)
expr_stmt|;
name|aRef
operator|=
name|createArtifactReference
argument_list|(
literal|"archiva-test"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"1.0"
argument_list|,
literal|"pom"
argument_list|)
expr_stmt|;
name|pathParserControl
operator|.
name|expectAndReturn
argument_list|(
name|parser
operator|.
name|toArtifactReference
argument_list|(
name|at10p
argument_list|)
argument_list|,
name|aRef
argument_list|)
expr_stmt|;
name|aRef
operator|=
name|createArtifactReference
argument_list|(
literal|"archiva-diff"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"1.0"
argument_list|,
literal|"pom"
argument_list|)
expr_stmt|;
name|pathParserControl
operator|.
name|expectAndReturn
argument_list|(
name|parser
operator|.
name|toArtifactReference
argument_list|(
name|ad10p
argument_list|)
argument_list|,
name|aRef
argument_list|)
expr_stmt|;
name|aRef
operator|=
name|createArtifactReference
argument_list|(
literal|"archiva-diff"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"1.0"
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|pathParserControl
operator|.
name|expectAndReturn
argument_list|(
name|parser
operator|.
name|toArtifactReference
argument_list|(
name|ad10j
argument_list|)
argument_list|,
name|aRef
argument_list|)
expr_stmt|;
name|aRef
operator|=
name|createArtifactReference
argument_list|(
literal|"archiva-test"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"1.0"
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|pathParserControl
operator|.
name|expectAndReturn
argument_list|(
name|parser
operator|.
name|toArtifactReference
argument_list|(
name|at10j
argument_list|)
argument_list|,
name|aRef
argument_list|)
expr_stmt|;
name|aRef
operator|=
name|createArtifactReference
argument_list|(
literal|"archiva-test"
argument_list|,
literal|"org.apache.archiva"
argument_list|,
literal|"1.1"
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|pathParserControl
operator|.
name|expectAndReturn
argument_list|(
name|parser
operator|.
name|toArtifactReference
argument_list|(
name|at11j
argument_list|)
argument_list|,
name|aRef
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|()
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"archiva-test-1.0.jar"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProject
argument_list|(
literal|"archiva-test"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProjectVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
literal|"org.apache.archiva"
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepositoryId
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
return|return
name|artifacts
return|;
block|}
specifier|private
name|ArtifactReference
name|createArtifactReference
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|ArtifactReference
name|aRef
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|aRef
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|aRef
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|aRef
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|aRef
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|aRef
return|;
block|}
specifier|private
name|RepositoryGroupConfiguration
name|createRepoGroupConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|RepositoryGroupConfiguration
name|repoGroup
init|=
operator|new
name|RepositoryGroupConfiguration
argument_list|()
decl_stmt|;
name|repoGroup
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repoGroup
operator|.
name|setRepositories
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
return|return
name|repoGroup
return|;
block|}
block|}
end_class

end_unit

