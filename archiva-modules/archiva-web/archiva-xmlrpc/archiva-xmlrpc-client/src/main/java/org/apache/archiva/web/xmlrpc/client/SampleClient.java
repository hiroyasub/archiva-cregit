begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|client
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|AdministrationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|api
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|beanutils
operator|.
name|BeanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClientConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClientRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|util
operator|.
name|ClientFactory
import|;
end_import

begin_comment
comment|/**  * TestClient  *   * Test client for Archiva Web Services.   * To execute:  *   * 1. set the<arguments> in the exec-maven-plugin config in the pom.xml in the following order:  *    - url  *    - username  *    - password  * 2. execute 'mvn exec:java' from the command-line  *   * @author   * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SampleClient
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|XmlRpcClient
name|client
init|=
operator|new
name|XmlRpcClient
argument_list|()
decl_stmt|;
name|XmlRpcClientConfigImpl
name|config
init|=
operator|new
name|XmlRpcClientConfigImpl
argument_list|()
decl_stmt|;
name|config
operator|.
name|setServerURL
argument_list|(
operator|new
name|URL
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBasicUserName
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBasicPassword
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|config
operator|.
name|setEnabledForExtensions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|/* managed repositories */
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[]
block|{}
decl_stmt|;
name|Object
index|[]
name|managedRepos
init|=
operator|(
name|Object
index|[]
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.getAllManagedRepositories"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n******** Managed Repositories ********"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|managedRepos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"================================="
argument_list|)
expr_stmt|;
name|ManagedRepository
name|managedRepo
init|=
operator|new
name|ManagedRepository
argument_list|()
decl_stmt|;
try|try
block|{
name|BeanUtils
operator|.
name|populate
argument_list|(
name|managedRepo
argument_list|,
operator|(
name|Map
operator|)
name|managedRepos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Id: "
operator|+
name|managedRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|managedRepo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Layout: "
operator|+
name|managedRepo
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"URL: "
operator|+
name|managedRepo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Releases: "
operator|+
name|managedRepo
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Snapshots: "
operator|+
name|managedRepo
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* remote repositories */
name|params
operator|=
operator|new
name|Object
index|[]
block|{}
expr_stmt|;
name|Object
index|[]
name|remoteRepos
init|=
operator|(
name|Object
index|[]
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.getAllRemoteRepositories"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n******** Remote Repositories ********"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remoteRepos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"================================="
argument_list|)
expr_stmt|;
name|RemoteRepository
name|remoteRepo
init|=
operator|new
name|RemoteRepository
argument_list|()
decl_stmt|;
try|try
block|{
name|BeanUtils
operator|.
name|populate
argument_list|(
name|remoteRepo
argument_list|,
operator|(
name|Map
operator|)
name|remoteRepos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Id: "
operator|+
name|remoteRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|remoteRepo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Layout: "
operator|+
name|remoteRepo
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"URL: "
operator|+
name|remoteRepo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* repo consumers */
name|params
operator|=
operator|new
name|Object
index|[]
block|{}
expr_stmt|;
name|Object
index|[]
name|repoConsumers
init|=
operator|(
name|Object
index|[]
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.getAllRepositoryConsumers"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n******** Repository Consumers ********"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repoConsumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|repoConsumers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* db consumers */
name|params
operator|=
operator|new
name|Object
index|[]
block|{}
expr_stmt|;
name|Object
index|[]
name|dbConsumers
init|=
operator|(
name|Object
index|[]
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.getAllDatabaseConsumers"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n******** Database Consumers ********"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbConsumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dbConsumers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* configure repo consumer */
name|Object
index|[]
name|configureRepoConsumerParams
init|=
operator|new
name|Object
index|[]
block|{
literal|"internal"
block|,
literal|"repository-purge"
block|,
literal|true
block|}
decl_stmt|;
name|Object
name|configured
init|=
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.configureRepositoryConsumer"
argument_list|,
name|configureRepoConsumerParams
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nConfigured repo consumer 'repository-purge' : "
operator|+
operator|(
operator|(
name|Boolean
operator|)
name|configured
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
comment|/* configure db consumer */
name|Object
index|[]
name|configureDbConsumerParams
init|=
operator|new
name|Object
index|[]
block|{
literal|"update-db-bytecode-stats"
block|,
literal|false
block|}
decl_stmt|;
name|configured
operator|=
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.configureDatabaseConsumer"
argument_list|,
name|configureDbConsumerParams
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nConfigured db consumer 'update-db-bytecode-stats' : "
operator|+
operator|(
operator|(
name|Boolean
operator|)
name|configured
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
comment|/* execute repo scanner */
name|Object
index|[]
name|executeRepoScanParams
init|=
operator|new
name|Object
index|[]
block|{
literal|"internal"
block|}
decl_stmt|;
name|configured
operator|=
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.executeRepositoryScanner"
argument_list|,
name|executeRepoScanParams
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nExecuted repo scanner of repository 'internal' : "
operator|+
operator|(
operator|(
name|Boolean
operator|)
name|configured
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
comment|/* execute db scanner */
name|Object
index|[]
name|executeDbScanParams
init|=
operator|new
name|Object
index|[]
block|{}
decl_stmt|;
name|configured
operator|=
name|client
operator|.
name|execute
argument_list|(
literal|"AdministrationService.executeDatabaseScanner"
argument_list|,
name|executeDbScanParams
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nExecuted database scanner : "
operator|+
operator|(
operator|(
name|Boolean
operator|)
name|configured
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
comment|/* delete artifact */
comment|/*               * NOTE: before enabling& invoking deleteArtifact, make sure that the repository and artifact exists first!                         Object[] deleteArtifactParams = new Object[] { "internal", "javax.activation", "activation", "1.1" };             Object artifactDeleted = client.execute( "AdministrationService.deleteArtifact", deleteArtifactParams );             System.out.println( "\nDeleted artifact 'javax.activation:activation:1.1' from repository 'internal' : " +                 ( (Boolean) artifactDeleted ).booleanValue() );                 */
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlRpcException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

