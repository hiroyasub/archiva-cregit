begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|security
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|UserRepositories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcHttpRequestConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|server
operator|.
name|AbstractReflectiveHandlerMapping
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authentication
operator|.
name|PasswordBasedAuthenticationDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|policy
operator|.
name|AccountLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|UserNotFoundException
import|;
end_import

begin_comment
comment|/**  * XmlRpcAuthenticator  *   * Custom authentication and authorization handler for xmlrpc requests.  *   * @version $Id   */
end_comment

begin_class
specifier|public
class|class
name|XmlRpcAuthenticator
implements|implements
name|AuthenticationHandler
block|{
specifier|private
specifier|final
name|SecuritySystem
name|securitySystem
decl_stmt|;
specifier|private
name|UserRepositories
name|userRepositories
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|public
name|XmlRpcAuthenticator
parameter_list|(
name|SecuritySystem
name|securitySystem
parameter_list|,
name|UserRepositories
name|userRepositories
parameter_list|)
block|{
name|this
operator|.
name|securitySystem
operator|=
name|securitySystem
expr_stmt|;
name|this
operator|.
name|userRepositories
operator|=
name|userRepositories
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAuthorized
parameter_list|(
name|XmlRpcRequest
name|pRequest
parameter_list|)
throws|throws
name|XmlRpcException
block|{
if|if
condition|(
name|pRequest
operator|.
name|getConfig
argument_list|()
operator|instanceof
name|XmlRpcHttpRequestConfigImpl
condition|)
block|{
name|XmlRpcHttpRequestConfigImpl
name|config
init|=
operator|(
name|XmlRpcHttpRequestConfigImpl
operator|)
name|pRequest
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|username
operator|=
name|config
operator|.
name|getBasicUserName
argument_list|()
expr_stmt|;
name|SecuritySession
name|session
init|=
name|authenticate
argument_list|(
operator|new
name|PasswordBasedAuthenticationDataSource
argument_list|(
name|username
argument_list|,
name|config
operator|.
name|getBasicPassword
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|method
init|=
name|pRequest
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|AuthorizationResult
name|result
init|=
name|authorize
argument_list|(
name|session
argument_list|,
name|method
argument_list|,
name|username
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|isAuthorized
argument_list|()
return|;
block|}
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|"Unsupported transport (must be http)"
argument_list|)
throw|;
block|}
specifier|private
name|SecuritySession
name|authenticate
parameter_list|(
name|PasswordBasedAuthenticationDataSource
name|authenticationDataSource
parameter_list|)
throws|throws
name|XmlRpcException
block|{
try|try
block|{
return|return
name|securitySystem
operator|.
name|authenticate
argument_list|(
name|authenticationDataSource
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccountLockedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|401
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|401
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|401
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AuthorizationResult
name|authorize
parameter_list|(
name|SecuritySession
name|session
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|XmlRpcException
block|{
try|try
block|{
comment|// sample attempt at simplifying authorization checking of requested service method
if|if
condition|(
name|ServiceMethodsPermissionsMapping
operator|.
name|SERVICE_METHODS_FOR_OPERATION_MANAGE_CONFIGURATION
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|securitySystem
operator|.
name|authorize
argument_list|(
name|session
argument_list|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
return|;
block|}
if|else if
condition|(
name|ServiceMethodsPermissionsMapping
operator|.
name|SERVICE_METHODS_FOR_OPERATION_RUN_INDEXER
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|securitySystem
operator|.
name|authorize
argument_list|(
name|session
argument_list|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_RUN_INDEXER
argument_list|)
return|;
block|}
if|else if
condition|(
name|ServiceMethodsPermissionsMapping
operator|.
name|SERVICE_METHODS_FOR_OPERATION_REPOSITORY_ACCESS
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|observableRepos
init|=
name|userRepositories
operator|.
name|getObservableRepositoryIds
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|observableRepos
operator|!=
literal|null
operator|&&
name|observableRepos
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|AuthorizationResult
argument_list|(
literal|true
argument_list|,
name|username
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|AuthorizationResult
argument_list|(
literal|false
argument_list|,
name|username
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|401
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|securitySystem
operator|.
name|authorize
argument_list|(
name|session
argument_list|,
name|ArchivaRoleConstants
operator|.
name|GLOBAL_REPOSITORY_MANAGER_ROLE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|401
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getActiveUser
parameter_list|()
block|{
return|return
name|username
return|;
block|}
block|}
end_class

end_unit

