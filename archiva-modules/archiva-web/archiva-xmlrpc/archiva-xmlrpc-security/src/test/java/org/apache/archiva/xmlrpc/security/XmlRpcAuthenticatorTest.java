begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xmlrpc
operator|.
name|security
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|xmlrpc
operator|.
name|security
operator|.
name|XmlRpcAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcHttpRequestConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|UserNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|MockClassControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_comment
comment|/**  * XmlRpcAuthenticatorTest  *  * @version $Id XmlRpcAuthenticatorTest.java  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath*:/spring-context.xml"
block|}
argument_list|)
specifier|public
class|class
name|XmlRpcAuthenticatorTest
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|USER_GUEST
init|=
literal|"guest"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|USER_ADMIN
init|=
literal|"admin"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|USER_ALPACA
init|=
literal|"alpaca"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password123"
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"securitySystem#testable"
argument_list|)
specifier|protected
name|SecuritySystem
name|securitySystem
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"roleManager#testable"
argument_list|)
specifier|protected
name|RoleManager
name|roleManager
decl_stmt|;
specifier|private
name|MockControl
name|xmlRpcRequestControl
decl_stmt|;
specifier|private
name|XmlRpcRequest
name|xmlRpcRequest
decl_stmt|;
specifier|private
name|XmlRpcAuthenticator
name|authenticator
decl_stmt|;
specifier|private
name|MockControl
name|configControl
decl_stmt|;
specifier|private
name|XmlRpcHttpRequestConfigImpl
name|config
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//securitySystem = (SecuritySystem) lookup( SecuritySystem.class, "testable" );
comment|//roleManager = (RoleManager) lookup( RoleManager.class, "default" );
comment|// Some basic asserts.
name|assertNotNull
argument_list|(
name|securitySystem
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|roleManager
argument_list|)
expr_stmt|;
comment|// Setup Admin User.
name|User
name|adminUser
init|=
name|createUser
argument_list|(
name|USER_ADMIN
argument_list|,
literal|"Admin User"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|roleManager
operator|.
name|assignRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_SYSTEM_ADMIN
argument_list|,
name|adminUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup Guest User.
name|User
name|guestUser
init|=
name|createUser
argument_list|(
name|USER_GUEST
argument_list|,
literal|"Guest User"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|roleManager
operator|.
name|assignRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_GUEST
argument_list|,
name|guestUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configControl
operator|=
name|MockClassControl
operator|.
name|createControl
argument_list|(
name|XmlRpcHttpRequestConfigImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
operator|(
name|XmlRpcHttpRequestConfigImpl
operator|)
name|configControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|xmlRpcRequestControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|XmlRpcRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|xmlRpcRequest
operator|=
operator|(
name|XmlRpcRequest
operator|)
name|xmlRpcRequestControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|authenticator
operator|=
operator|new
name|XmlRpcAuthenticator
argument_list|(
name|securitySystem
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|User
name|createUser
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|fullname
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|UserNotFoundException
block|{
name|UserManager
name|userManager
init|=
name|securitySystem
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|principal
argument_list|,
name|fullname
argument_list|,
name|principal
operator|+
literal|"@testable.archiva.apache.org"
argument_list|)
decl_stmt|;
name|securitySystem
operator|.
name|getPolicy
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|userManager
operator|.
name|addUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|securitySystem
operator|.
name|getPolicy
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|userManager
operator|.
name|updateUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAuthorizedUserExistsButNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
name|USER_ALPACA
argument_list|,
literal|"Al 'Archiva' Paca"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|UserManager
name|userManager
init|=
name|securitySystem
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
try|try
block|{
name|User
name|user
init|=
name|userManager
operator|.
name|findUser
argument_list|(
name|USER_ALPACA
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|USER_ALPACA
argument_list|,
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"User should exist in the database."
argument_list|)
expr_stmt|;
block|}
name|xmlRpcRequestControl
operator|.
name|expectAndReturn
argument_list|(
name|xmlRpcRequest
operator|.
name|getConfig
argument_list|()
argument_list|,
name|config
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getBasicUserName
argument_list|()
argument_list|,
name|USER_ALPACA
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getBasicPassword
argument_list|()
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|xmlRpcRequestControl
operator|.
name|expectAndReturn
argument_list|(
name|xmlRpcRequest
operator|.
name|getMethodName
argument_list|()
argument_list|,
literal|"AdministrationService.getAllManagedRepositories"
argument_list|)
expr_stmt|;
name|xmlRpcRequestControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|boolean
name|isAuthorized
init|=
name|authenticator
operator|.
name|isAuthorized
argument_list|(
name|xmlRpcRequest
argument_list|)
decl_stmt|;
name|xmlRpcRequestControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|isAuthorized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAuthorizedUserExistsAndAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
name|USER_ALPACA
argument_list|,
literal|"Al 'Archiva' Paca"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|UserManager
name|userManager
init|=
name|securitySystem
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
try|try
block|{
name|User
name|user
init|=
name|userManager
operator|.
name|findUser
argument_list|(
name|USER_ALPACA
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|USER_ALPACA
argument_list|,
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"User should exist in the database."
argument_list|)
expr_stmt|;
block|}
comment|//TODO cannot assign global repo manager role - it says role does not exist :|
comment|//roleManager.assignRole( ArchivaRoleConstants.GLOBAL_REPOSITORY_MANAGER_ROLE, USER_ALPACA );
name|xmlRpcRequestControl
operator|.
name|expectAndReturn
argument_list|(
name|xmlRpcRequest
operator|.
name|getConfig
argument_list|()
argument_list|,
name|config
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getBasicUserName
argument_list|()
argument_list|,
name|USER_ALPACA
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getBasicPassword
argument_list|()
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|xmlRpcRequestControl
operator|.
name|expectAndReturn
argument_list|(
name|xmlRpcRequest
operator|.
name|getMethodName
argument_list|()
argument_list|,
literal|"AdministrationService.getAllManagedRepositories"
argument_list|)
expr_stmt|;
name|xmlRpcRequestControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|boolean
name|isAuthorized
init|=
name|authenticator
operator|.
name|isAuthorized
argument_list|(
name|xmlRpcRequest
argument_list|)
decl_stmt|;
comment|// TODO: broken or bad test?
comment|// assertTrue( isAuthorized );
name|xmlRpcRequestControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|userManager
operator|.
name|deleteUser
argument_list|(
name|USER_ALPACA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAuthorizedUserDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|userManager
init|=
name|securitySystem
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
try|try
block|{
name|userManager
operator|.
name|findUser
argument_list|(
name|USER_ALPACA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"User should not exist in the database."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unable to find user 'alpaca'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xmlRpcRequestControl
operator|.
name|expectAndReturn
argument_list|(
name|xmlRpcRequest
operator|.
name|getConfig
argument_list|()
argument_list|,
name|config
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getBasicUserName
argument_list|()
argument_list|,
name|USER_ALPACA
argument_list|)
expr_stmt|;
name|configControl
operator|.
name|expectAndReturn
argument_list|(
name|config
operator|.
name|getBasicPassword
argument_list|()
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|xmlRpcRequestControl
operator|.
name|expectAndReturn
argument_list|(
name|xmlRpcRequest
operator|.
name|getMethodName
argument_list|()
argument_list|,
literal|"AdministrationService.getAllManagedRepositories"
argument_list|)
expr_stmt|;
name|xmlRpcRequestControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|boolean
name|isAuthorized
init|=
name|authenticator
operator|.
name|isAuthorized
argument_list|(
name|xmlRpcRequest
argument_list|)
decl_stmt|;
name|xmlRpcRequestControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|configControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|isAuthorized
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

