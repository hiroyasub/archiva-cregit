begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|connectors
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * ProxyConnectorsAction  *  *  */
end_comment

begin_class
annotation|@
name|Controller
argument_list|(
literal|"proxyConnectorsAction"
argument_list|)
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
specifier|public
class|class
name|ProxyConnectorsAction
extends|extends
name|AbstractProxyConnectorAction
implements|implements
name|Preparable
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractRepository
argument_list|>
name|repoMap
decl_stmt|;
comment|/**      * boolean to indicate that remote repo is present. Used for Add Link      */
specifier|private
name|boolean
name|remoteRepoExists
init|=
literal|false
decl_stmt|;
comment|/**      * Map of Proxy Connectors.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|proxyConnectorMap
decl_stmt|;
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|repoMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AbstractRepository
argument_list|>
argument_list|()
expr_stmt|;
name|repoMap
operator|.
name|putAll
argument_list|(
name|getRemoteRepositoryAdmin
argument_list|()
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME olamy : are we sure we want Managed too ???
name|repoMap
operator|.
name|putAll
argument_list|(
name|getManagedRepositoryAdmin
argument_list|()
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnectorMap
operator|=
name|createProxyConnectorMap
argument_list|()
expr_stmt|;
name|remoteRepoExists
operator|=
name|getRemoteRepositoryAdmin
argument_list|()
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractRepository
argument_list|>
name|getRepoMap
parameter_list|()
block|{
return|return
name|repoMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|getProxyConnectorMap
parameter_list|()
block|{
return|return
name|proxyConnectorMap
return|;
block|}
comment|// FIXME olamy should be is !
specifier|public
name|boolean
name|getRemoteRepoExists
parameter_list|()
block|{
return|return
name|remoteRepoExists
return|;
block|}
block|}
end_class

end_unit

