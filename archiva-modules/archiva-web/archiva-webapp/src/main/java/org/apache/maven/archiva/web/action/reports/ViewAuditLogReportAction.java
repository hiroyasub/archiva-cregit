begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|reports
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaAuditLogsDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|SimpleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|ArchivaAuditLogsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|MostRecentArchivaAuditLogsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaAuditLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|PrincipalNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|UserRepositories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|interceptor
operator|.
name|ServletRequestAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Preparable
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="com.opensymphony.xwork2.Action" role-hint="viewAuditLogReport"  *                   instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|ViewAuditLogReportAction
extends|extends
name|PlexusActionSupport
implements|implements
name|SecureAction
implements|,
name|ServletRequestAware
implements|,
name|Preparable
block|{
specifier|protected
name|HttpServletRequest
name|request
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|UserRepositories
name|userRepositories
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|ArchivaAuditLogsDao
name|auditLogsDao
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
specifier|private
name|String
name|repository
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repositories
decl_stmt|;
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|String
name|artifactId
decl_stmt|;
specifier|private
name|String
name|startDate
decl_stmt|;
specifier|private
name|String
name|endDate
decl_stmt|;
specifier|private
name|int
name|rowCount
init|=
literal|30
decl_stmt|;
specifier|private
name|int
name|page
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|prev
decl_stmt|;
specifier|private
name|String
name|next
decl_stmt|;
specifier|protected
name|boolean
name|isLastPage
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
name|auditLogs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALL_REPOSITORIES
init|=
literal|"all"
decl_stmt|;
specifier|protected
name|int
index|[]
name|range
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
specifier|private
name|String
name|initial
init|=
literal|"true"
decl_stmt|;
specifier|private
name|String
name|headerName
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_LATEST_EVENTS
init|=
literal|"Latest Events"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_RESULTS
init|=
literal|"Results"
decl_stmt|;
specifier|private
name|String
index|[]
name|datePatterns
init|=
operator|new
name|String
index|[]
block|{
literal|"MM/dd/yy"
block|,
literal|"MM/dd/yyyy"
block|,
literal|"MMMMM/dd/yyyy"
block|,
literal|"MMMMM/dd/yy"
block|,
literal|"dd MMMMM yyyy"
block|,
literal|"dd/MM/yy"
block|,
literal|"dd/MM/yyyy"
block|,
literal|"yyyy/MM/dd"
block|,
literal|"yyyy-MM-dd"
block|,
literal|"yyyy-dd-MM"
block|,
literal|"MM-dd-yyyy"
block|,
literal|"MM-dd-yy"
block|}
decl_stmt|;
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setServletRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|repositories
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
name|ALL_REPOSITORIES
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|addAll
argument_list|(
name|getObservableRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|auditLogs
operator|=
literal|null
expr_stmt|;
name|groupId
operator|=
literal|""
expr_stmt|;
name|artifactId
operator|=
literal|""
expr_stmt|;
name|repository
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|initial
argument_list|)
condition|)
block|{
name|headerName
operator|=
name|HEADER_LATEST_EVENTS
expr_stmt|;
block|}
else|else
block|{
name|headerName
operator|=
name|HEADER_RESULTS
expr_stmt|;
block|}
name|SimpleConstraint
name|constraint
init|=
operator|new
name|MostRecentArchivaAuditLogsConstraint
argument_list|()
decl_stmt|;
name|auditLogs
operator|=
name|filterLogs
argument_list|(
operator|(
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
operator|)
name|dao
operator|.
name|query
argument_list|(
name|constraint
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|auditLogs
operator|=
literal|null
expr_stmt|;
name|String
name|artifact
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|groupId
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|groupId
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|modifiedGroupId
init|=
name|groupId
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|artifact
operator|=
name|modifiedGroupId
operator|+
operator|(
operator|(
name|artifactId
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|artifactId
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
condition|?
operator|(
literal|"/"
operator|+
name|artifactId
operator|+
literal|"/%"
operator|)
else|:
literal|"%"
operator|)
expr_stmt|;
block|}
else|else
block|{
name|artifact
operator|=
operator|(
name|artifactId
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|artifactId
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
condition|?
operator|(
literal|"%"
operator|+
name|artifactId
operator|+
literal|"%"
operator|)
else|:
literal|""
expr_stmt|;
block|}
name|Date
name|startDateInDF
init|=
literal|null
decl_stmt|;
name|Date
name|endDateInDF
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|startDate
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateInDF
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startDateInDF
operator|=
name|DateUtils
operator|.
name|parseDate
argument_list|(
name|startDate
argument_list|,
name|datePatterns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endDate
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|endDate
argument_list|)
condition|)
block|{
name|endDateInDF
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|endDateInDF
operator|=
name|DateUtils
operator|.
name|parseDate
argument_list|(
name|endDate
argument_list|,
name|datePatterns
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|endDateInDF
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateInDF
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|range
index|[
literal|0
index|]
operator|=
operator|(
name|page
operator|-
literal|1
operator|)
operator|*
name|rowCount
expr_stmt|;
name|range
index|[
literal|1
index|]
operator|=
operator|(
name|page
operator|*
name|rowCount
operator|)
operator|+
literal|1
expr_stmt|;
name|ArchivaAuditLogsConstraint
name|constraint
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|equals
argument_list|(
name|ALL_REPOSITORIES
argument_list|)
condition|)
block|{
name|constraint
operator|=
operator|new
name|ArchivaAuditLogsConstraint
argument_list|(
name|range
argument_list|,
name|artifact
argument_list|,
name|repository
argument_list|,
name|AuditEvent
operator|.
name|UPLOAD_FILE
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraint
operator|=
operator|new
name|ArchivaAuditLogsConstraint
argument_list|(
name|range
argument_list|,
name|artifact
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|UPLOAD_FILE
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|auditLogs
operator|=
name|filterLogs
argument_list|(
name|auditLogsDao
operator|.
name|queryAuditLogs
argument_list|(
name|constraint
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|auditLogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"No audit logs found."
argument_list|)
expr_stmt|;
name|initial
operator|=
literal|"true"
expr_stmt|;
block|}
else|else
block|{
name|initial
operator|=
literal|"false"
expr_stmt|;
block|}
name|headerName
operator|=
name|HEADER_RESULTS
expr_stmt|;
name|paginate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"No audit logs found."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Error occurred while querying audit logs."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|private
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
name|filterLogs
parameter_list|(
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
name|auditLogs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|observableRepos
init|=
name|getManageableRepositories
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
name|filteredAuditLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|ArchivaAuditLogs
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|auditLogs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ArchivaAuditLogs
name|auditLog
range|:
name|auditLogs
control|)
block|{
if|if
condition|(
name|observableRepos
operator|.
name|contains
argument_list|(
name|auditLog
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
condition|)
block|{
name|filteredAuditLogs
operator|.
name|add
argument_list|(
name|auditLog
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filteredAuditLogs
return|;
block|}
specifier|private
name|void
name|paginate
parameter_list|()
block|{
if|if
condition|(
name|auditLogs
operator|.
name|size
argument_list|()
operator|<=
name|rowCount
condition|)
block|{
name|isLastPage
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isLastPage
operator|=
literal|false
expr_stmt|;
name|auditLogs
operator|.
name|remove
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"?page="
operator|+
operator|(
name|page
operator|-
literal|1
operator|)
operator|+
literal|"&rowCount="
operator|+
name|rowCount
operator|+
literal|"&groupId="
operator|+
name|groupId
operator|+
literal|"&artifactId="
operator|+
name|artifactId
operator|+
literal|"&repository="
operator|+
name|repository
operator|+
literal|"&startDate="
operator|+
name|startDate
operator|+
literal|"&endDate="
operator|+
name|endDate
expr_stmt|;
name|next
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"?page="
operator|+
operator|(
name|page
operator|+
literal|1
operator|)
operator|+
literal|"&rowCount="
operator|+
name|rowCount
operator|+
literal|"&groupId="
operator|+
name|groupId
operator|+
literal|"&artifactId="
operator|+
name|artifactId
operator|+
literal|"&repository="
operator|+
name|repository
operator|+
literal|"&startDate="
operator|+
name|startDate
operator|+
literal|"&endDate="
operator|+
name|endDate
expr_stmt|;
name|prev
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|prev
argument_list|,
literal|" "
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
name|next
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|next
argument_list|,
literal|" "
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getManageableRepositories
parameter_list|()
block|{
try|try
block|{
return|return
name|userRepositories
operator|.
name|getManagableRepositoryIds
argument_list|(
name|getPrincipal
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrincipalNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getObservableRepositories
parameter_list|()
block|{
try|try
block|{
return|return
name|userRepositories
operator|.
name|getObservableRepositoryIds
argument_list|(
name|getPrincipal
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrincipalNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|void
name|setRepository
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
block|{
return|return
name|repositories
return|;
block|}
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
specifier|public
name|void
name|setArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
name|getAuditLogs
parameter_list|()
block|{
return|return
name|auditLogs
return|;
block|}
specifier|public
name|void
name|setAuditLogs
parameter_list|(
name|List
argument_list|<
name|ArchivaAuditLogs
argument_list|>
name|auditLogs
parameter_list|)
block|{
name|this
operator|.
name|auditLogs
operator|=
name|auditLogs
expr_stmt|;
block|}
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|void
name|setRowCount
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
specifier|public
name|String
name|getStartDate
parameter_list|()
block|{
return|return
name|startDate
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|String
name|startDate
parameter_list|)
block|{
name|this
operator|.
name|startDate
operator|=
name|startDate
expr_stmt|;
block|}
specifier|public
name|String
name|getEndDate
parameter_list|()
block|{
return|return
name|endDate
return|;
block|}
specifier|public
name|void
name|setEndDate
parameter_list|(
name|String
name|endDate
parameter_list|)
block|{
name|this
operator|.
name|endDate
operator|=
name|endDate
expr_stmt|;
block|}
specifier|public
name|int
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
specifier|public
name|void
name|setPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsLastPage
parameter_list|()
block|{
return|return
name|isLastPage
return|;
block|}
specifier|public
name|void
name|setIsLastPage
parameter_list|(
name|boolean
name|isLastPage
parameter_list|)
block|{
name|this
operator|.
name|isLastPage
operator|=
name|isLastPage
expr_stmt|;
block|}
specifier|public
name|String
name|getPrev
parameter_list|()
block|{
return|return
name|prev
return|;
block|}
specifier|public
name|void
name|setPrev
parameter_list|(
name|String
name|prev
parameter_list|)
block|{
name|this
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
block|}
specifier|public
name|String
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|void
name|setNext
parameter_list|(
name|String
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
specifier|public
name|String
name|getInitial
parameter_list|()
block|{
return|return
name|initial
return|;
block|}
specifier|public
name|void
name|setInitial
parameter_list|(
name|String
name|initial
parameter_list|)
block|{
name|this
operator|.
name|initial
operator|=
name|initial
expr_stmt|;
block|}
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
block|}
end_class

end_unit

