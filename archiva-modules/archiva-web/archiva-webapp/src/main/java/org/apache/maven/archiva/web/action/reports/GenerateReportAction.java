begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|reports
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|reports
operator|.
name|RepositoryProblemFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|AbstractRepositoryBasedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="com.opensymphony.xwork2.Action" role-hint="generateReport" instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|GenerateReportAction
extends|extends
name|AbstractRepositoryBasedAction
implements|implements
name|SecureAction
implements|,
name|Preparable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ALL_REPOSITORIES
init|=
literal|"All Repositories"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BLANK
init|=
literal|"blank"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|datePatterns
init|=
operator|new
name|String
index|[]
block|{
literal|"MM/dd/yy"
block|,
literal|"MM/dd/yyyy"
block|,
literal|"MMMMM/dd/yyyy"
block|,
literal|"MMMMM/dd/yy"
block|,
literal|"dd MMMMM yyyy"
block|,
literal|"dd/MM/yy"
block|,
literal|"dd/MM/yyyy"
block|,
literal|"yyyy/MM/dd"
block|,
literal|"yyyy-MM-dd"
block|,
literal|"yyyy-dd-MM"
block|,
literal|"MM-dd-yyyy"
block|,
literal|"MM-dd-yy"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEND_FILE
init|=
literal|"send-file"
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenerateReportAction
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
decl_stmt|;
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|String
name|repositoryId
decl_stmt|;
specifier|private
name|int
name|page
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|rowCount
init|=
literal|100
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepositories
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|startDate
decl_stmt|;
specifier|private
name|String
name|endDate
decl_stmt|;
specifier|private
name|int
name|numPages
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|repositoryIds
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RepositoryProblemFacet
argument_list|>
argument_list|>
name|repositoriesMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RepositoryProblemFacet
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|availableRepositories
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|repositoryStatistics
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryStatistics
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|InputStream
name|inputStream
decl_stmt|;
specifier|private
name|boolean
name|lastPage
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataRepository
name|metadataRepository
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|prepare
parameter_list|()
block|{
name|repositoryIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|repositoryIds
operator|.
name|add
argument_list|(
name|ALL_REPOSITORIES
argument_list|)
expr_stmt|;
comment|// comes first to be first in the list
name|repositoryIds
operator|.
name|addAll
argument_list|(
name|getObservableRepos
argument_list|()
argument_list|)
expr_stmt|;
name|availableRepositories
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|// remove selected repositories in the option for the statistics report
name|availableRepositories
operator|.
name|addAll
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|selectedRepositories
control|)
block|{
if|if
condition|(
name|availableRepositories
operator|.
name|contains
argument_list|(
name|repo
argument_list|)
condition|)
block|{
name|availableRepositories
operator|.
name|remove
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Generate the statistics report.      *      * check whether single repo report or comparison report      * 1. if it is a single repository, get all the statistics for the repository on the specified date      * - if no date is specified, get only the latest      * (total page = 1 --> no pagination since only the most recent stats will be displayed)      * - otherwise, get everything within the date range (total pages = repo stats / rows per page)      * - required params: repository, startDate, endDate      *      * 2. if multiple repositories, get the latest statistics on each repository on the specified date      * - if no date is specified, use the current date endDate      * - required params: repositories, endDate      * - total pages = repositories / rows per page      *      * @return action result      */
specifier|public
name|String
name|generateStatistics
parameter_list|()
block|{
if|if
condition|(
name|rowCount
operator|<
literal|10
condition|)
block|{
comment|// TODO: move to validation framework
name|addFieldError
argument_list|(
literal|"rowCount"
argument_list|,
literal|"Row count must be larger than 10."
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|Date
name|startDateInDF
decl_stmt|;
name|Date
name|endDateInDF
decl_stmt|;
if|if
condition|(
name|selectedRepositories
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|numPages
operator|=
literal|1
expr_stmt|;
try|try
block|{
name|startDateInDF
operator|=
name|getStartDateInDateFormat
argument_list|()
expr_stmt|;
name|endDateInDF
operator|=
name|getEndDateInDateFormat
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Error parsing date(s)."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|startDateInDF
operator|!=
literal|null
operator|&&
name|endDateInDF
operator|!=
literal|null
operator|&&
name|startDateInDF
operator|.
name|after
argument_list|(
name|endDateInDF
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"startDate"
argument_list|,
literal|"Start Date must be earlier than the End Date"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
comment|// multiple repos
for|for
control|(
name|String
name|repo
range|:
name|selectedRepositories
control|)
block|{
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|stats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|repositoryStatisticsManager
operator|.
name|getStatisticsInRange
argument_list|(
name|repo
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve stats, assuming is empty: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No statistics available for repository '"
operator|+
name|repo
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// TODO set repo's stats to 0
continue|continue;
block|}
name|repositoryStatistics
operator|.
name|add
argument_list|(
name|stats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|selectedRepositories
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|repositoryId
operator|=
name|selectedRepositories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|startDateInDF
operator|=
name|getStartDateInDateFormat
argument_list|()
expr_stmt|;
name|endDateInDF
operator|=
name|getEndDateInDateFormat
argument_list|()
expr_stmt|;
if|if
condition|(
name|startDateInDF
operator|!=
literal|null
operator|&&
name|endDateInDF
operator|!=
literal|null
operator|&&
name|startDateInDF
operator|.
name|after
argument_list|(
name|endDateInDF
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"startDate"
argument_list|,
literal|"Start Date must be earlier than the End Date"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|stats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|repositoryStatisticsManager
operator|.
name|getStatisticsInRange
argument_list|(
name|repositoryId
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve stats, assuming is empty: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"No statistics available for repository. Repository might not have been scanned."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|int
name|rowCount
init|=
name|getRowCount
argument_list|()
decl_stmt|;
name|int
name|extraPage
init|=
operator|(
name|stats
operator|.
name|size
argument_list|()
operator|%
name|rowCount
operator|)
operator|!=
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|totalPages
init|=
operator|(
name|stats
operator|.
name|size
argument_list|()
operator|/
name|rowCount
operator|)
operator|+
name|extraPage
decl_stmt|;
name|numPages
operator|=
name|totalPages
expr_stmt|;
name|int
name|currentPage
init|=
name|getPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPage
operator|>
name|totalPages
condition|)
block|{
name|addActionError
argument_list|(
literal|"Error encountered while generating report :: The requested page exceeds the total number of pages."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|int
name|start
init|=
name|rowCount
operator|*
operator|(
name|currentPage
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|end
init|=
operator|(
name|start
operator|+
name|rowCount
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|stats
operator|.
name|size
argument_list|()
condition|)
block|{
name|end
operator|=
name|stats
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|repositoryStatistics
operator|=
name|stats
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|addActionError
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"availableRepositories"
argument_list|,
literal|"Please select a repository (or repositories) from the list."
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
if|if
condition|(
name|repositoryStatistics
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|BLANK
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Export report to CSV.      *      * @return action result      */
specifier|public
name|String
name|downloadStatisticsReport
parameter_list|()
block|{
name|Date
name|startDateInDF
decl_stmt|;
name|Date
name|endDateInDF
decl_stmt|;
name|selectedRepositories
operator|=
name|parseSelectedRepositories
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|repositoryStatistics
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryStatistics
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuffer
name|input
decl_stmt|;
if|if
condition|(
name|selectedRepositories
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
try|try
block|{
name|startDateInDF
operator|=
name|getStartDateInDateFormat
argument_list|()
expr_stmt|;
name|endDateInDF
operator|=
name|getEndDateInDateFormat
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Error parsing date(s)."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|startDateInDF
operator|!=
literal|null
operator|&&
name|endDateInDF
operator|!=
literal|null
operator|&&
name|startDateInDF
operator|.
name|after
argument_list|(
name|endDateInDF
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"startDate"
argument_list|,
literal|"Start Date must be earlier than the End Date"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|input
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|"Repository,Total File Count,Total Size,Artifact Count,Group Count,Project Count,Plugins,Archetypes,"
operator|+
literal|"Jars,Wars\n"
argument_list|)
expr_stmt|;
comment|// multiple repos
for|for
control|(
name|String
name|repo
range|:
name|selectedRepositories
control|)
block|{
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|stats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|repositoryStatisticsManager
operator|.
name|getStatisticsInRange
argument_list|(
name|repo
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve stats, assuming is empty: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No statistics available for repository '"
operator|+
name|repo
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// TODO set repo's stats to 0
continue|continue;
block|}
comment|// only the first one
name|RepositoryStatistics
name|repositoryStats
init|=
name|stats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|repositoryStatistics
operator|.
name|add
argument_list|(
name|repositoryStats
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repo
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalFileCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalArtifactFileSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalArtifactCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalGroupCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalProjectCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"maven-plugin"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"maven-archetype"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"war"
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|selectedRepositories
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|repositoryId
operator|=
name|selectedRepositories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|startDateInDF
operator|=
name|getStartDateInDateFormat
argument_list|()
expr_stmt|;
name|endDateInDF
operator|=
name|getEndDateInDateFormat
argument_list|()
expr_stmt|;
if|if
condition|(
name|startDateInDF
operator|!=
literal|null
operator|&&
name|endDateInDF
operator|!=
literal|null
operator|&&
name|startDateInDF
operator|.
name|after
argument_list|(
name|endDateInDF
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"startDate"
argument_list|,
literal|"Start Date must be earlier than the End Date"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|stats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|repositoryStatisticsManager
operator|.
name|getStatisticsInRange
argument_list|(
name|repositoryId
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve stats, assuming is empty: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"No statistics available for repository. Repository might not have been scanned."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|input
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|"Date of Scan,Total File Count,Total Size,Artifact Count,Group Count,Project Count,Plugins,"
operator|+
literal|"Archetypes,Jars,Wars\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|RepositoryStatistics
name|repositoryStats
range|:
name|stats
control|)
block|{
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getScanStartTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalFileCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalArtifactFileSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalArtifactCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalGroupCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalProjectCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"maven-plugin"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"maven-archetype"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|repositoryStats
operator|.
name|getTotalCountForType
argument_list|(
literal|"war"
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|repositoryStatistics
operator|=
name|stats
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|addActionError
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"availableRepositories"
argument_list|,
literal|"Please select a repository (or repositories) from the list."
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
if|if
condition|(
name|repositoryStatistics
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|BLANK
return|;
block|}
comment|// write output stream depending on single or comparison report
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Error occurred while generating CSV file."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
return|return
name|SEND_FILE
return|;
block|}
comment|// hack for parsing the struts list passed as param in<s:url ../>
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|parseSelectedRepositories
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parsedSelectedRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|selectedRepositories
control|)
block|{
name|String
index|[]
name|tokens
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|repo
argument_list|,
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
name|parsedSelectedRepos
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|remove
argument_list|(
name|StringUtils
operator|.
name|remove
argument_list|(
name|token
argument_list|,
literal|'['
argument_list|)
argument_list|,
literal|']'
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parsedSelectedRepos
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|remove
argument_list|(
name|StringUtils
operator|.
name|remove
argument_list|(
name|repo
argument_list|,
literal|'['
argument_list|)
argument_list|,
literal|']'
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parsedSelectedRepos
return|;
block|}
specifier|private
name|Date
name|getStartDateInDateFormat
parameter_list|()
throws|throws
name|ParseException
block|{
name|Date
name|startDateInDF
decl_stmt|;
if|if
condition|(
name|startDate
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|startDateInDF
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|startDateInDF
operator|=
name|DateUtils
operator|.
name|parseDate
argument_list|(
name|startDate
argument_list|,
name|datePatterns
argument_list|)
expr_stmt|;
block|}
return|return
name|startDateInDF
return|;
block|}
specifier|private
name|Date
name|getEndDateInDateFormat
parameter_list|()
throws|throws
name|ParseException
block|{
name|Date
name|endDateInDF
decl_stmt|;
if|if
condition|(
name|endDate
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|endDate
argument_list|)
condition|)
block|{
name|endDateInDF
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|endDateInDF
operator|=
name|DateUtils
operator|.
name|parseDate
argument_list|(
name|endDate
argument_list|,
name|datePatterns
argument_list|)
expr_stmt|;
comment|// add a day, since we don't inclue time and want the date to be inclusive
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|endDateInDF
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|endDateInDF
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
return|return
name|endDateInDF
return|;
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|repositoryId
operator|==
literal|null
condition|)
block|{
name|addFieldError
argument_list|(
literal|"repositoryId"
argument_list|,
literal|"You must provide a repository id."
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
if|if
condition|(
name|rowCount
operator|<
literal|10
condition|)
block|{
name|addFieldError
argument_list|(
literal|"rowCount"
argument_list|,
literal|"Row count must be larger than 10."
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|observableRepos
init|=
name|getObservableRepos
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|repoIds
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
operator|||
name|ALL_REPOSITORIES
operator|.
name|equals
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
name|repoIds
operator|=
name|observableRepos
expr_stmt|;
block|}
if|else if
condition|(
name|observableRepos
operator|.
name|contains
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
name|repoIds
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repoIds
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RepositoryProblemFacet
argument_list|>
name|problemArtifacts
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryProblemFacet
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|repoIds
control|)
block|{
comment|// TODO: improve performance by navigating into a group subtree. Currently group is property, not part of name of item
for|for
control|(
name|String
name|name
range|:
name|metadataRepository
operator|.
name|getMetadataFacets
argument_list|(
name|repoId
argument_list|,
name|RepositoryProblemFacet
operator|.
name|FACET_ID
argument_list|)
control|)
block|{
name|RepositoryProblemFacet
name|metadataFacet
init|=
operator|(
name|RepositoryProblemFacet
operator|)
name|metadataRepository
operator|.
name|getMetadataFacet
argument_list|(
name|repoId
argument_list|,
name|RepositoryProblemFacet
operator|.
name|FACET_ID
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|groupId
argument_list|)
operator|||
name|groupId
operator|.
name|equals
argument_list|(
name|metadataFacet
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|problemArtifacts
operator|.
name|add
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO: getting range only after reading is not efficient for a large number of artifacts
name|int
name|lowerBound
init|=
operator|(
name|page
operator|-
literal|1
operator|)
operator|*
name|rowCount
decl_stmt|;
name|int
name|upperBound
init|=
operator|(
name|page
operator|*
name|rowCount
operator|)
operator|+
literal|1
decl_stmt|;
comment|// Add 1 to check if it's the last page or not.
if|if
condition|(
name|upperBound
operator|<=
name|problemArtifacts
operator|.
name|size
argument_list|()
condition|)
block|{
name|problemArtifacts
operator|=
name|problemArtifacts
operator|.
name|subList
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|problemArtifacts
operator|=
name|problemArtifacts
operator|.
name|subList
argument_list|(
name|lowerBound
argument_list|,
name|problemArtifacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RepositoryProblemFacet
name|problem
range|:
name|problemArtifacts
control|)
block|{
name|List
argument_list|<
name|RepositoryProblemFacet
argument_list|>
name|problemsList
decl_stmt|;
if|if
condition|(
name|repositoriesMap
operator|.
name|containsKey
argument_list|(
name|problem
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
condition|)
block|{
name|problemsList
operator|=
name|repositoriesMap
operator|.
name|get
argument_list|(
name|problem
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|problemsList
operator|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryProblemFacet
argument_list|>
argument_list|()
expr_stmt|;
name|repositoriesMap
operator|.
name|put
argument_list|(
name|problem
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|problemsList
argument_list|)
expr_stmt|;
block|}
name|problemsList
operator|.
name|add
argument_list|(
name|problem
argument_list|)
expr_stmt|;
block|}
comment|// TODO: handling should be improved
if|if
condition|(
name|problemArtifacts
operator|.
name|size
argument_list|()
operator|<=
name|rowCount
condition|)
block|{
name|lastPage
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|problemArtifacts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|page
operator|==
literal|1
condition|)
block|{
return|return
name|BLANK
return|;
block|}
else|else
block|{
return|return
name|SUCCESS
return|;
block|}
block|}
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setRequiresAuthentication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_ACCESS_REPORT
argument_list|,
name|Resource
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRepositoryIds
parameter_list|()
block|{
return|return
name|repositoryIds
return|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
specifier|public
name|String
name|getRepositoryId
parameter_list|()
block|{
return|return
name|repositoryId
return|;
block|}
specifier|public
name|void
name|setRepositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|this
operator|.
name|repositoryId
operator|=
name|repositoryId
expr_stmt|;
block|}
specifier|public
name|int
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
specifier|public
name|void
name|setPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|void
name|setRowCount
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoriesMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RepositoryProblemFacet
argument_list|>
argument_list|>
name|repositoriesMap
parameter_list|)
block|{
name|this
operator|.
name|repositoriesMap
operator|=
name|repositoriesMap
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RepositoryProblemFacet
argument_list|>
argument_list|>
name|getRepositoriesMap
parameter_list|()
block|{
return|return
name|repositoriesMap
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSelectedRepositories
parameter_list|()
block|{
return|return
name|selectedRepositories
return|;
block|}
specifier|public
name|void
name|setSelectedRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepositories
parameter_list|)
block|{
name|this
operator|.
name|selectedRepositories
operator|=
name|selectedRepositories
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAvailableRepositories
parameter_list|()
block|{
return|return
name|availableRepositories
return|;
block|}
specifier|public
name|void
name|setAvailableRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|availableRepositories
parameter_list|)
block|{
name|this
operator|.
name|availableRepositories
operator|=
name|availableRepositories
expr_stmt|;
block|}
specifier|public
name|String
name|getStartDate
parameter_list|()
block|{
return|return
name|startDate
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|String
name|startDate
parameter_list|)
block|{
name|this
operator|.
name|startDate
operator|=
name|startDate
expr_stmt|;
block|}
specifier|public
name|String
name|getEndDate
parameter_list|()
block|{
return|return
name|endDate
return|;
block|}
specifier|public
name|void
name|setEndDate
parameter_list|(
name|String
name|endDate
parameter_list|)
block|{
name|this
operator|.
name|endDate
operator|=
name|endDate
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|getRepositoryStatistics
parameter_list|()
block|{
return|return
name|repositoryStatistics
return|;
block|}
specifier|public
name|void
name|setRepositoryStatistics
parameter_list|(
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|repositoryStatistics
parameter_list|)
block|{
name|this
operator|.
name|repositoryStatistics
operator|=
name|repositoryStatistics
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLastPage
parameter_list|()
block|{
return|return
name|lastPage
return|;
block|}
specifier|public
name|void
name|setLastPage
parameter_list|(
name|boolean
name|lastPage
parameter_list|)
block|{
name|this
operator|.
name|lastPage
operator|=
name|lastPage
expr_stmt|;
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
return|return
name|inputStream
return|;
block|}
specifier|public
name|int
name|getNumPages
parameter_list|()
block|{
return|return
name|numPages
return|;
block|}
specifier|public
name|void
name|setRepositoryStatisticsManager
parameter_list|(
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
parameter_list|)
block|{
name|this
operator|.
name|repositoryStatisticsManager
operator|=
name|repositoryStatisticsManager
expr_stmt|;
block|}
specifier|public
name|void
name|setMetadataRepository
parameter_list|(
name|MetadataRepository
name|metadataRepository
parameter_list|)
block|{
name|this
operator|.
name|metadataRepository
operator|=
name|metadataRepository
expr_stmt|;
block|}
block|}
end_class

end_unit

