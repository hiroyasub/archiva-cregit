begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|reports
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|PrincipalNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|UserRepositories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|AbstractActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|interceptor
operator|.
name|ServletRequestAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|Controller
argument_list|(
literal|"viewAuditLogReport"
argument_list|)
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
specifier|public
class|class
name|ViewAuditLogReportAction
extends|extends
name|AbstractActionSupport
implements|implements
name|SecureAction
implements|,
name|ServletRequestAware
implements|,
name|Preparable
block|{
specifier|protected
name|HttpServletRequest
name|request
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UserRepositories
name|userRepositories
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|AuditManager
name|auditManager
decl_stmt|;
specifier|private
name|String
name|repository
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repositories
decl_stmt|;
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|String
name|artifactId
decl_stmt|;
specifier|private
name|String
name|startDate
decl_stmt|;
specifier|private
name|String
name|endDate
decl_stmt|;
specifier|private
name|int
name|rowCount
init|=
literal|30
decl_stmt|;
specifier|private
name|int
name|page
init|=
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|isLastPage
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AuditEvent
argument_list|>
name|auditLogs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALL_REPOSITORIES
init|=
literal|"all"
decl_stmt|;
specifier|private
name|String
name|initial
init|=
literal|"true"
decl_stmt|;
specifier|private
name|String
name|headerName
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_LATEST_EVENTS
init|=
literal|"Latest Events"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_RESULTS
init|=
literal|"Results"
decl_stmt|;
specifier|private
name|String
index|[]
name|datePatterns
init|=
operator|new
name|String
index|[]
block|{
literal|"MM/dd/yy"
block|,
literal|"MM/dd/yyyy"
block|,
literal|"MMMMM/dd/yyyy"
block|,
literal|"MMMMM/dd/yy"
block|,
literal|"dd MMMMM yyyy"
block|,
literal|"dd/MM/yy"
block|,
literal|"dd/MM/yyyy"
block|,
literal|"yyyy/MM/dd"
block|,
literal|"yyyy-MM-dd"
block|,
literal|"yyyy-dd-MM"
block|,
literal|"MM-dd-yyyy"
block|,
literal|"MM-dd-yy"
block|}
decl_stmt|;
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
comment|// TODO: should require this, but for now we trust in the list of repositories
comment|//        bundle.setRequiresAuthentication( true );
comment|//        bundle.addRequiredAuthorization( ArchivaRoleConstants.OPERATION_VIEW_AUDIT_LOG );
return|return
name|bundle
return|;
block|}
specifier|public
name|void
name|setServletRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|repositories
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
name|ALL_REPOSITORIES
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repos
init|=
name|getManagableRepositories
argument_list|()
decl_stmt|;
name|repositories
operator|.
name|addAll
argument_list|(
name|repos
argument_list|)
expr_stmt|;
name|auditLogs
operator|=
literal|null
expr_stmt|;
name|groupId
operator|=
literal|""
expr_stmt|;
name|artifactId
operator|=
literal|""
expr_stmt|;
name|repository
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|initial
argument_list|)
condition|)
block|{
name|headerName
operator|=
name|HEADER_LATEST_EVENTS
expr_stmt|;
block|}
else|else
block|{
name|headerName
operator|=
name|HEADER_RESULTS
expr_stmt|;
block|}
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|auditLogs
operator|=
name|auditManager
operator|.
name|getMostRecentAuditEvents
argument_list|(
name|repositorySession
operator|.
name|getRepository
argument_list|()
argument_list|,
name|repos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|startDateInDF
init|=
literal|null
decl_stmt|;
name|Date
name|endDateInDF
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|startDateInDF
operator|=
name|DateUtils
operator|.
name|parseDate
argument_list|(
name|startDate
argument_list|,
name|datePatterns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|endDate
argument_list|)
condition|)
block|{
name|endDateInDF
operator|=
name|DateUtils
operator|.
name|parseDate
argument_list|(
name|endDate
argument_list|,
name|datePatterns
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|endDateInDF
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateInDF
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|repos
init|=
name|getManagableRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|equals
argument_list|(
name|ALL_REPOSITORIES
argument_list|)
condition|)
block|{
if|if
condition|(
name|repos
operator|.
name|contains
argument_list|(
name|repository
argument_list|)
condition|)
block|{
name|repos
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repos
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|groupId
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
comment|// Until we store the full artifact metadata in the audit event, we can't query by these individually
name|addActionError
argument_list|(
literal|"If you specify an artifact ID, you must specify a group ID"
argument_list|)
expr_stmt|;
name|auditLogs
operator|=
literal|null
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|String
name|resource
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
name|String
name|groupIdAsPath
init|=
name|groupId
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
name|resource
operator|=
name|groupIdAsPath
expr_stmt|;
block|}
else|else
block|{
name|resource
operator|=
name|groupIdAsPath
operator|+
literal|"/"
operator|+
name|artifactId
expr_stmt|;
block|}
block|}
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|auditLogs
operator|=
name|auditManager
operator|.
name|getAuditEventsInRange
argument_list|(
name|repositorySession
operator|.
name|getRepository
argument_list|()
argument_list|,
name|repos
argument_list|,
name|resource
argument_list|,
name|startDateInDF
argument_list|,
name|endDateInDF
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|headerName
operator|=
name|HEADER_RESULTS
expr_stmt|;
if|if
condition|(
name|auditLogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"No audit logs found."
argument_list|)
expr_stmt|;
name|initial
operator|=
literal|"true"
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
else|else
block|{
name|initial
operator|=
literal|"false"
expr_stmt|;
return|return
name|paginate
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|paginate
parameter_list|()
block|{
name|int
name|rowCount
init|=
name|getRowCount
argument_list|()
decl_stmt|;
name|int
name|extraPage
init|=
operator|(
name|auditLogs
operator|.
name|size
argument_list|()
operator|%
name|rowCount
operator|)
operator|!=
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|totalPages
init|=
operator|(
name|auditLogs
operator|.
name|size
argument_list|()
operator|/
name|rowCount
operator|)
operator|+
name|extraPage
decl_stmt|;
name|int
name|currentPage
init|=
name|getPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPage
operator|>
name|totalPages
condition|)
block|{
name|addActionError
argument_list|(
literal|"Error encountered while generating report :: The requested page exceeds the total number of pages."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|currentPage
operator|==
name|totalPages
condition|)
block|{
name|isLastPage
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isLastPage
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|start
init|=
name|rowCount
operator|*
operator|(
name|currentPage
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|end
init|=
operator|(
name|start
operator|+
name|rowCount
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|end
operator|>=
name|auditLogs
operator|.
name|size
argument_list|()
condition|)
block|{
name|end
operator|=
name|auditLogs
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|auditLogs
operator|=
name|auditLogs
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getManagableRepositories
parameter_list|()
block|{
try|try
block|{
return|return
name|userRepositories
operator|.
name|getManagableRepositoryIds
argument_list|(
name|getPrincipal
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrincipalNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|void
name|setRepository
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
block|{
return|return
name|repositories
return|;
block|}
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
specifier|public
name|void
name|setArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AuditEvent
argument_list|>
name|getAuditLogs
parameter_list|()
block|{
return|return
name|auditLogs
return|;
block|}
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|void
name|setRowCount
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
specifier|public
name|String
name|getStartDate
parameter_list|()
block|{
return|return
name|startDate
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|String
name|startDate
parameter_list|)
block|{
name|this
operator|.
name|startDate
operator|=
name|startDate
expr_stmt|;
block|}
specifier|public
name|String
name|getEndDate
parameter_list|()
block|{
return|return
name|endDate
return|;
block|}
specifier|public
name|void
name|setEndDate
parameter_list|(
name|String
name|endDate
parameter_list|)
block|{
name|this
operator|.
name|endDate
operator|=
name|endDate
expr_stmt|;
block|}
specifier|public
name|int
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
specifier|public
name|void
name|setPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsLastPage
parameter_list|()
block|{
return|return
name|isLastPage
return|;
block|}
specifier|public
name|void
name|setIsLastPage
parameter_list|(
name|boolean
name|isLastPage
parameter_list|)
block|{
name|this
operator|.
name|isLastPage
operator|=
name|isLastPage
expr_stmt|;
block|}
specifier|public
name|String
name|getInitial
parameter_list|()
block|{
return|return
name|initial
return|;
block|}
specifier|public
name|void
name|setInitial
parameter_list|(
name|String
name|initial
parameter_list|)
block|{
name|this
operator|.
name|initial
operator|=
name|initial
expr_stmt|;
block|}
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
block|}
end_class

end_unit

