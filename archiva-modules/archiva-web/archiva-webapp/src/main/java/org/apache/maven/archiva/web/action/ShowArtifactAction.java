begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Validateable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Browse the repository.  *  * TODO change name to ShowVersionedAction to conform to terminology.  *  * @plexus.component role="com.opensymphony.xwork2.Action" role-hint="showArtifactAction" instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|ShowArtifactAction
extends|extends
name|AbstractRepositoryBasedAction
implements|implements
name|Validateable
block|{
comment|/* .\ Not Exposed \._____________________________________________ */
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataResolver
name|metadataResolver
decl_stmt|;
comment|/* .\ Exposed Output Objects \.__________________________________ */
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|String
name|artifactId
decl_stmt|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|String
name|repositoryId
decl_stmt|;
comment|/**      * The model of this versioned project.      */
specifier|private
name|ProjectVersionMetadata
name|model
decl_stmt|;
comment|/**      * The list of artifacts that depend on this versioned project.      */
specifier|private
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|dependees
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|snapshotVersions
decl_stmt|;
comment|/**      * Show the versioned project information tab.      * TODO: Change name to 'project' - we are showing project versions here, not specific artifact information (though      * that is rendered in the download box).      */
specifier|public
name|String
name|artifact
parameter_list|()
block|{
comment|// In the future, this should be replaced by the repository grouping mechanism, so that we are only making
comment|// simple resource requests here and letting the resolver take care of it
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
name|snapshotVersions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|getObservableRepos
argument_list|()
control|)
block|{
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
comment|// TODO: though we have a simple mapping now, do we want to support paths like /1.0-20090111.123456-1/
comment|//   again by mapping it to /1.0-SNAPSHOT/? Currently, the individual versions are not supported as we
comment|//   are only displaying the project's single version.
comment|// we don't want the implementation being that intelligent - so another resolver to do the
comment|// "just-in-time" nature of picking up the metadata (if appropriate for the repository type) is used
name|versionMetadata
operator|=
name|metadataResolver
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionMetadata
operator|!=
literal|null
condition|)
block|{
name|repositoryId
operator|=
name|repoId
expr_stmt|;
name|snapshotVersions
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|getArtifactVersions
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotVersions
operator|.
name|remove
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"Artifact not found"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|model
operator|=
name|versionMetadata
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Show the artifact information tab.      */
specifier|public
name|String
name|dependencies
parameter_list|()
block|{
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|getObservableRepos
argument_list|()
control|)
block|{
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|versionMetadata
operator|=
name|metadataResolver
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"Artifact not found"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|model
operator|=
name|versionMetadata
expr_stmt|;
name|this
operator|.
name|dependencies
operator|=
name|model
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Show the mailing lists information tab.      */
specifier|public
name|String
name|mailingLists
parameter_list|()
block|{
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|getObservableRepos
argument_list|()
control|)
block|{
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|versionMetadata
operator|=
name|metadataResolver
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"Artifact not found"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|model
operator|=
name|versionMetadata
expr_stmt|;
name|this
operator|.
name|mailingLists
operator|=
name|model
operator|.
name|getMailingLists
argument_list|()
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Show the reports tab.      */
specifier|public
name|String
name|reports
parameter_list|()
block|{
comment|// TODO: hook up reports on project
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Show the dependees (other artifacts that depend on this project) tab.      */
specifier|public
name|String
name|dependees
parameter_list|()
block|{
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|getObservableRepos
argument_list|()
control|)
block|{
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|versionMetadata
operator|=
name|metadataResolver
operator|.
name|getProjectVersion
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"Artifact not found"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|model
operator|=
name|versionMetadata
expr_stmt|;
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectVersionReference
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: what if we get duplicates across repositories?
for|for
control|(
name|String
name|repoId
range|:
name|getObservableRepos
argument_list|()
control|)
block|{
comment|// TODO: what about if we want to see this irrespective of version?
name|references
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|getProjectReferences
argument_list|(
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dependees
operator|=
name|references
expr_stmt|;
comment|// TODO: may need to note on the page that references will be incomplete if the other artifacts are not yet stored in the content repository
comment|// (especially in the case of pre-population import)
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Show the dependencies of this versioned project tab.      */
specifier|public
name|String
name|dependencyTree
parameter_list|()
block|{
comment|// temporarily use this as we only need the model for the tag to perform, but we should be resolving the
comment|// graph here instead
comment|// TODO: may need to note on the page that tree will be incomplete if the other artifacts are not yet stored in the content repository
comment|// (especially in the case of pre-population import)
return|return
name|artifact
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"You must specify a group ID to browse"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|artifactId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"You must specify a artifact ID to browse"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"You must specify a version to browse"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ProjectVersionMetadata
name|getModel
parameter_list|()
block|{
return|return
name|model
return|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
specifier|public
name|void
name|setArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MailingList
argument_list|>
name|getMailingLists
parameter_list|()
block|{
return|return
name|mailingLists
return|;
block|}
specifier|public
name|List
argument_list|<
name|Dependency
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getDependees
parameter_list|()
block|{
return|return
name|dependees
return|;
block|}
specifier|public
name|String
name|getRepositoryId
parameter_list|()
block|{
return|return
name|repositoryId
return|;
block|}
specifier|public
name|void
name|setRepositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|this
operator|.
name|repositoryId
operator|=
name|repositoryId
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSnapshotVersions
parameter_list|()
block|{
return|return
name|snapshotVersions
return|;
block|}
specifier|public
name|MetadataResolver
name|getMetadataResolver
parameter_list|()
block|{
return|return
name|metadataResolver
return|;
block|}
block|}
end_class

end_unit

