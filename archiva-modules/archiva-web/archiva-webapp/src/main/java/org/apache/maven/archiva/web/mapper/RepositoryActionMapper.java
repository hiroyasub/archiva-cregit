begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|mapper
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|config
operator|.
name|ConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|dispatcher
operator|.
name|mapper
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|dispatcher
operator|.
name|mapper
operator|.
name|DefaultActionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_comment
comment|/**  * Map alternate URLs to specific actions. Used for the repository browser and the proxy.  *  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryActionMapper
extends|extends
name|DefaultActionMapper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_BROWSE
init|=
literal|"browse"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_BROWSE_ARTIFACT
init|=
literal|"browseArtifact"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_BROWSE_GROUP
init|=
literal|"browseGroup"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_SHOW_ARTIFACT
init|=
literal|"showArtifact"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_SHOW_ARTIFACT_DEPENDEES
init|=
literal|"showArtifactDependees"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_SHOW_ARTIFACT_DEPENDENCIES
init|=
literal|"showArtifactDependencies"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_SHOW_ARTIFACT_DEPENDENCY_TREE
init|=
literal|"showArtifactDependencyTree"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_SHOW_ARTIFACT_MAILING_LISTS
init|=
literal|"showArtifactMailingLists"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROWSE_PREFIX
init|=
literal|"/browse"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHOD_DEPENDENCIES
init|=
literal|"dependencies"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHOD_DEPENDENCY_TREE
init|=
literal|"dependencyTree"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHOD_MAILING_LISTS
init|=
literal|"mailingLists"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHOD_USEDBY
init|=
literal|"usedby"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_ARTIFACT_ID
init|=
literal|"artifactId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_GROUP_ID
init|=
literal|"groupId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_EXTENSION
init|=
literal|"action"
decl_stmt|;
specifier|public
name|ActionMapping
name|getMapping
parameter_list|(
name|HttpServletRequest
name|httpServletRequest
parameter_list|,
name|ConfigurationManager
name|manager
parameter_list|)
block|{
name|String
name|path
init|=
name|httpServletRequest
operator|.
name|getServletPath
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// if JEE 5 spec is correctly implemented, the "/*" pattern implies an empty string in servletpath
name|path
operator|=
name|httpServletRequest
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// try RequestURI in last at least for StrutsTestCase
name|path
operator|=
name|httpServletRequest
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|BROWSE_PREFIX
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|BROWSE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|path
argument_list|)
operator|||
name|StringUtils
operator|.
name|equals
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
operator|||
name|StringUtils
operator|.
name|equals
argument_list|(
name|path
argument_list|,
literal|".action"
argument_list|)
condition|)
block|{
comment|// Return "root" browse.
return|return
name|createActionMapping
argument_list|(
name|ACTION_BROWSE
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|parts
operator|.
name|length
condition|)
block|{
case|case
literal|1
case|:
name|params
operator|.
name|put
argument_list|(
name|PARAM_GROUP_ID
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|createActionMapping
argument_list|(
name|ACTION_BROWSE_GROUP
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
case|case
literal|2
case|:
name|params
operator|.
name|put
argument_list|(
name|PARAM_GROUP_ID
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PARAM_ARTIFACT_ID
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|createActionMapping
argument_list|(
name|ACTION_BROWSE_ARTIFACT
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
case|case
literal|3
case|:
name|params
operator|.
name|put
argument_list|(
name|PARAM_GROUP_ID
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PARAM_ARTIFACT_ID
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PARAM_VERSION
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|createActionMapping
argument_list|(
name|ACTION_SHOW_ARTIFACT
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
case|case
literal|4
case|:
name|params
operator|.
name|put
argument_list|(
name|PARAM_GROUP_ID
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PARAM_ARTIFACT_ID
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PARAM_VERSION
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|METHOD_DEPENDENCIES
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
condition|)
block|{
return|return
name|createActionMapping
argument_list|(
name|ACTION_SHOW_ARTIFACT_DEPENDENCIES
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
block|}
if|else if
condition|(
name|METHOD_MAILING_LISTS
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
condition|)
block|{
return|return
name|createActionMapping
argument_list|(
name|ACTION_SHOW_ARTIFACT_MAILING_LISTS
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
block|}
if|else if
condition|(
name|METHOD_USEDBY
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
condition|)
block|{
return|return
name|createActionMapping
argument_list|(
name|ACTION_SHOW_ARTIFACT_DEPENDEES
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
block|}
if|else if
condition|(
name|METHOD_DEPENDENCY_TREE
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
condition|)
block|{
return|return
name|createActionMapping
argument_list|(
name|ACTION_SHOW_ARTIFACT_DEPENDENCY_TREE
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|params
argument_list|)
return|;
block|}
break|break;
block|}
block|}
block|}
return|return
name|super
operator|.
name|getMapping
argument_list|(
name|httpServletRequest
argument_list|,
name|manager
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|getUriFromActionMapping
parameter_list|(
name|ActionMapping
name|actionMapping
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|actionMapping
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|ACTION_BROWSE
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|BROWSE_PREFIX
return|;
block|}
if|else if
condition|(
name|ACTION_BROWSE_GROUP
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|else if
condition|(
name|ACTION_BROWSE_ARTIFACT
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|else if
condition|(
name|ACTION_SHOW_ARTIFACT
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|else if
condition|(
name|ACTION_SHOW_ARTIFACT_DEPENDENCIES
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|METHOD_DEPENDENCIES
argument_list|)
return|;
block|}
if|else if
condition|(
name|ACTION_SHOW_ARTIFACT_MAILING_LISTS
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|METHOD_MAILING_LISTS
argument_list|)
return|;
block|}
if|else if
condition|(
name|ACTION_SHOW_ARTIFACT_DEPENDEES
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|METHOD_USEDBY
argument_list|)
return|;
block|}
if|else if
condition|(
name|ACTION_SHOW_ARTIFACT_DEPENDENCY_TREE
operator|.
name|equals
argument_list|(
name|actionMapping
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|toUri
argument_list|(
name|params
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|METHOD_DEPENDENCY_TREE
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getUriFromActionMapping
argument_list|(
name|actionMapping
argument_list|)
return|;
block|}
specifier|private
name|String
name|toUri
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|boolean
name|artifactId
parameter_list|,
name|boolean
name|version
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|BROWSE_PREFIX
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|params
operator|.
name|remove
argument_list|(
name|PARAM_GROUP_ID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactId
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|params
operator|.
name|remove
argument_list|(
name|PARAM_ARTIFACT_ID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|params
operator|.
name|remove
argument_list|(
name|PARAM_VERSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|ActionMapping
name|createActionMapping
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|method
parameter_list|,
name|Map
name|params
parameter_list|)
block|{
name|ActionMapping
name|mapping
init|=
operator|new
name|ActionMapping
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|method
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|setExtension
argument_list|(
name|ACTION_EXTENSION
argument_list|)
expr_stmt|;
return|return
name|mapping
return|;
block|}
block|}
end_class

end_unit

