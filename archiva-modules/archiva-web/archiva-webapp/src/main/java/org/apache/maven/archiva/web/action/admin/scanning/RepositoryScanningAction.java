begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|scanning
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Validateable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|admin
operator|.
name|ArchivaAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|admin
operator|.
name|FiletypeToMapClosure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|Auditable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryContentConsumers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|AbstractActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|integration
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * RepositoryScanningAction  *  * @version $Id$  */
end_comment

begin_class
annotation|@
name|Controller
argument_list|(
literal|"repositoryScanningAction"
argument_list|)
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
specifier|public
class|class
name|RepositoryScanningAction
extends|extends
name|AbstractActionSupport
implements|implements
name|Preparable
implements|,
name|Validateable
implements|,
name|SecureAction
implements|,
name|Auditable
block|{
annotation|@
name|Inject
specifier|private
name|RepositoryContentConsumers
name|repoconsumerUtil
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArchivaAdministration
name|archivaAdministration
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FileType
argument_list|>
name|fileTypeMap
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fileTypeIds
decl_stmt|;
comment|/**      * List of {@link AdminRepositoryConsumer} objects for consumers of known content.      */
specifier|private
name|List
argument_list|<
name|AdminRepositoryConsumer
argument_list|>
name|knownContentConsumers
decl_stmt|;
comment|/**      * List of enabled {@link AdminRepositoryConsumer} objects for consumers of known content.      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|enabledKnownContentConsumers
decl_stmt|;
comment|/**      * List of {@link AdminRepositoryConsumer} objects for consumers of invalid/unknown content.      */
specifier|private
name|List
argument_list|<
name|AdminRepositoryConsumer
argument_list|>
name|invalidContentConsumers
decl_stmt|;
comment|/**      * List of enabled {@link AdminRepositoryConsumer} objects for consumers of invalid/unknown content.      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|enabledInvalidContentConsumers
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|private
name|String
name|fileTypeId
decl_stmt|;
specifier|public
name|void
name|addActionError
parameter_list|(
name|String
name|anErrorMessage
parameter_list|)
block|{
name|super
operator|.
name|addActionError
argument_list|(
name|anErrorMessage
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"[ActionError] {}"
argument_list|,
name|anErrorMessage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addActionMessage
parameter_list|(
name|String
name|aMessage
parameter_list|)
block|{
name|super
operator|.
name|addActionMessage
argument_list|(
name|aMessage
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"[ActionMessage] {}"
argument_list|,
name|aMessage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|addFiletypePattern
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Add New File Type Pattern [{}:{}]"
argument_list|,
name|getFileTypeId
argument_list|()
argument_list|,
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidFiletypeCommand
argument_list|()
condition|)
block|{
return|return
name|INPUT
return|;
block|}
try|try
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|addFileTypePattern
argument_list|(
name|getFileTypeId
argument_list|()
argument_list|,
name|getPattern
argument_list|()
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"error adding file type pattern "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|removeFiletypePattern
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Remove File Type Pattern [{}:{}]"
argument_list|,
name|getFileTypeId
argument_list|()
argument_list|,
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidFiletypeCommand
argument_list|()
condition|)
block|{
return|return
name|INPUT
return|;
block|}
try|try
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|removeFileTypePattern
argument_list|(
name|getFileTypeId
argument_list|()
argument_list|,
name|getPattern
argument_list|()
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"error adding file type pattern "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|getFileTypeId
parameter_list|()
block|{
return|return
name|fileTypeId
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFileTypeIds
parameter_list|()
block|{
return|return
name|fileTypeIds
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|FileType
argument_list|>
name|getFileTypeMap
parameter_list|()
block|{
return|return
name|fileTypeMap
return|;
block|}
specifier|public
name|List
argument_list|<
name|AdminRepositoryConsumer
argument_list|>
name|getInvalidContentConsumers
parameter_list|()
block|{
return|return
name|invalidContentConsumers
return|;
block|}
specifier|public
name|List
argument_list|<
name|AdminRepositoryConsumer
argument_list|>
name|getKnownContentConsumers
parameter_list|()
block|{
return|return
name|knownContentConsumers
return|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setRequiresAuthentication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
argument_list|,
name|Resource
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|FiletypeToMapClosure
name|filetypeToMapClosure
init|=
operator|new
name|FiletypeToMapClosure
argument_list|()
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|archivaAdministration
operator|.
name|getFileTypes
argument_list|()
argument_list|,
name|filetypeToMapClosure
argument_list|)
expr_stmt|;
name|fileTypeMap
operator|=
name|filetypeToMapClosure
operator|.
name|getMap
argument_list|()
expr_stmt|;
name|AddAdminRepoConsumerClosure
name|addAdminRepoConsumer
init|=
operator|new
name|AddAdminRepoConsumerClosure
argument_list|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|repoconsumerUtil
operator|.
name|getAvailableKnownConsumers
argument_list|()
argument_list|,
name|addAdminRepoConsumer
argument_list|)
expr_stmt|;
name|this
operator|.
name|knownContentConsumers
operator|=
name|addAdminRepoConsumer
operator|.
name|getList
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|knownContentConsumers
argument_list|,
name|AdminRepositoryConsumerComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|addAdminRepoConsumer
operator|=
operator|new
name|AddAdminRepoConsumerClosure
argument_list|(
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|repoconsumerUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
argument_list|,
name|addAdminRepoConsumer
argument_list|)
expr_stmt|;
name|this
operator|.
name|invalidContentConsumers
operator|=
name|addAdminRepoConsumer
operator|.
name|getList
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|invalidContentConsumers
argument_list|,
name|AdminRepositoryConsumerComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fileTypeIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|fileTypeIds
operator|.
name|addAll
argument_list|(
name|fileTypeMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fileTypeIds
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFileTypeId
parameter_list|(
name|String
name|fileTypeId
parameter_list|)
block|{
name|this
operator|.
name|fileTypeId
operator|=
name|fileTypeId
expr_stmt|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|String
name|updateInvalidConsumers
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|oldConsumers
init|=
name|getArchivaAdministration
argument_list|()
operator|.
name|getInvalidContentConsumers
argument_list|()
decl_stmt|;
if|if
condition|(
name|enabledInvalidContentConsumers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|oldConsumer
range|:
name|oldConsumers
control|)
block|{
if|if
condition|(
operator|!
name|enabledInvalidContentConsumers
operator|.
name|contains
argument_list|(
name|oldConsumer
argument_list|)
condition|)
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|removeInvalidContentConsumer
argument_list|(
name|oldConsumer
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|enabledKnowContentConsumer
range|:
name|enabledInvalidContentConsumers
control|)
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|addInvalidContentConsumer
argument_list|(
name|enabledKnowContentConsumer
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|oldConsumer
range|:
name|oldConsumers
control|)
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|removeInvalidContentConsumer
argument_list|(
name|oldConsumer
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|addActionError
argument_list|(
literal|"Error update invalidContentConsumers "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|addActionMessage
argument_list|(
literal|"Update Invalid Consumers"
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|updateKnownConsumers
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|oldConsumers
init|=
name|getArchivaAdministration
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
decl_stmt|;
if|if
condition|(
name|enabledKnownContentConsumers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|oldConsumer
range|:
name|oldConsumers
control|)
block|{
if|if
condition|(
operator|!
name|enabledKnownContentConsumers
operator|.
name|contains
argument_list|(
name|oldConsumer
argument_list|)
condition|)
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|removeKnownContentConsumer
argument_list|(
name|oldConsumer
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|enabledKnowContentConsumer
range|:
name|enabledKnownContentConsumers
control|)
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|addKnownContentConsumer
argument_list|(
name|enabledKnowContentConsumer
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|oldConsumer
range|:
name|oldConsumers
control|)
block|{
name|getArchivaAdministration
argument_list|()
operator|.
name|removeKnownContentConsumer
argument_list|(
name|oldConsumer
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|addActionError
argument_list|(
literal|"Error update knowContentConsumers "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|addActionMessage
argument_list|(
literal|"Update Known Consumers"
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
specifier|private
name|FileType
name|findFileType
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
return|return
name|getArchivaAdministration
argument_list|()
operator|.
name|getFileType
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isValidFiletypeCommand
parameter_list|()
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|getFileTypeId
argument_list|()
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to process blank filetype id."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|getPattern
argument_list|()
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to process blank pattern."
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|hasActionErrors
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEnabledInvalidContentConsumers
parameter_list|()
block|{
return|return
name|enabledInvalidContentConsumers
return|;
block|}
specifier|public
name|void
name|setEnabledInvalidContentConsumers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|enabledInvalidContentConsumers
parameter_list|)
block|{
name|this
operator|.
name|enabledInvalidContentConsumers
operator|=
name|enabledInvalidContentConsumers
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEnabledKnownContentConsumers
parameter_list|()
block|{
return|return
name|enabledKnownContentConsumers
return|;
block|}
specifier|public
name|void
name|setEnabledKnownContentConsumers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|enabledKnownContentConsumers
parameter_list|)
block|{
name|this
operator|.
name|enabledKnownContentConsumers
operator|=
name|enabledKnownContentConsumers
expr_stmt|;
block|}
specifier|public
name|ArchivaAdministration
name|getArchivaAdministration
parameter_list|()
block|{
return|return
name|archivaAdministration
return|;
block|}
specifier|public
name|void
name|setArchivaAdministration
parameter_list|(
name|ArchivaAdministration
name|archivaAdministration
parameter_list|)
block|{
name|this
operator|.
name|archivaAdministration
operator|=
name|archivaAdministration
expr_stmt|;
block|}
block|}
end_class

end_unit

