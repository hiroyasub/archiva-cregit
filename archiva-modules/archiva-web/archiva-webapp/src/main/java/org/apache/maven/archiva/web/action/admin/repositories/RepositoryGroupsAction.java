begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|util
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|interceptor
operator|.
name|ServletRequestAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * RepositoryGroupsAction  *  */
end_comment

begin_class
annotation|@
name|Controller
argument_list|(
literal|"repositoryGroupsAction"
argument_list|)
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
specifier|public
class|class
name|RepositoryGroupsAction
extends|extends
name|AbstractRepositoriesAdminAction
implements|implements
name|ServletRequestAware
implements|,
name|Preparable
block|{
specifier|private
name|RepositoryGroupConfiguration
name|repositoryGroup
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|repositoryGroups
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepositories
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupToRepositoryMap
decl_stmt|;
specifier|private
name|String
name|repoGroupId
decl_stmt|;
specifier|private
name|String
name|repoId
decl_stmt|;
comment|/**      * Used to construct the repository WebDAV URL in the repository action.      */
specifier|private
name|String
name|baseUrl
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|REPO_GROUP_ID_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[A-Za-z0-9\\._\\-]+"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|setServletRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|ContextUtils
operator|.
name|getBaseURL
argument_list|(
name|request
argument_list|,
literal|"repository"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|()
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|repositoryGroup
operator|=
operator|new
name|RepositoryGroupConfiguration
argument_list|()
expr_stmt|;
name|repositoryGroups
operator|=
name|config
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
expr_stmt|;
name|managedRepositories
operator|=
name|config
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
expr_stmt|;
name|groupToRepositoryMap
operator|=
name|config
operator|.
name|getGroupToRepositoryMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|addRepositoryGroup
parameter_list|()
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|repoGroupId
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|repoGroupId
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|repoGroupId
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Identifier field is required."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|repoGroupId
operator|.
name|length
argument_list|()
operator|>
literal|100
condition|)
block|{
name|addActionError
argument_list|(
literal|"Identifier ["
operator|+
name|repoGroupId
operator|+
literal|"] is over the maximum limit of 100 characters"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|Matcher
name|matcher
init|=
name|REPO_GROUP_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|repoGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"Invalid character(s) found in identifier. Only the following characters are allowed: alphanumeric, '.', '-' and '_'"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"You must enter a repository group id."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to add new repository group with id ["
operator|+
name|repoGroupId
operator|+
literal|"], that id already exists as a repository group."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|else if
condition|(
name|configuration
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to add new repository group with id ["
operator|+
name|repoGroupId
operator|+
literal|"], that id already exists as a managed repository."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
if|else if
condition|(
name|configuration
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to add new repository group with id ["
operator|+
name|repoGroupId
operator|+
literal|"], that id already exists as a remote repository."
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
name|configuration
operator|.
name|addRepositoryGroup
argument_list|(
name|repositoryGroup
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|AuditEvent
operator|.
name|ADD_REPO_GROUP
operator|+
literal|" "
operator|+
name|repoGroupId
argument_list|)
expr_stmt|;
return|return
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
return|;
block|}
specifier|public
name|String
name|addRepositoryToGroup
parameter_list|()
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RepositoryGroupConfiguration
name|group
init|=
name|config
operator|.
name|findRepositoryGroupById
argument_list|(
name|repoGroupId
argument_list|)
decl_stmt|;
name|validateRepository
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasErrors
argument_list|()
condition|)
block|{
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|group
operator|.
name|getRepositories
argument_list|()
operator|.
name|contains
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Repository with id ["
operator|+
name|repoId
operator|+
literal|"] is already in the group"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
comment|// remove the old repository group configuration
name|config
operator|.
name|removeRepositoryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|// save repository group configuration
name|group
operator|.
name|addRepository
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRepositoryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|repoId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_REPO_TO_GROUP
operator|+
literal|" "
operator|+
name|repoGroupId
argument_list|)
expr_stmt|;
return|return
name|saveConfiguration
argument_list|(
name|config
argument_list|)
return|;
block|}
specifier|public
name|String
name|removeRepositoryFromGroup
parameter_list|()
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RepositoryGroupConfiguration
name|group
init|=
name|config
operator|.
name|findRepositoryGroupById
argument_list|(
name|repoGroupId
argument_list|)
decl_stmt|;
name|validateRepository
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasErrors
argument_list|()
condition|)
block|{
return|return
name|ERROR
return|;
block|}
if|if
condition|(
operator|!
name|group
operator|.
name|getRepositories
argument_list|()
operator|.
name|contains
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"No repository with id["
operator|+
name|repoId
operator|+
literal|"] found in the group"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
comment|// remove the old repository group configuration
name|config
operator|.
name|removeRepositoryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|// save repository group configuration
name|group
operator|.
name|removeRepository
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRepositoryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|repoId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_REPO_FROM_GROUP
operator|+
literal|" "
operator|+
name|repoGroupId
argument_list|)
expr_stmt|;
return|return
name|saveConfiguration
argument_list|(
name|config
argument_list|)
return|;
block|}
specifier|public
name|void
name|validateRepository
parameter_list|()
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RepositoryGroupConfiguration
name|group
init|=
name|config
operator|.
name|findRepositoryGroupById
argument_list|(
name|repoGroupId
argument_list|)
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repo
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"A repository group with that id does not exist."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"A repository with that id does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RepositoryGroupConfiguration
name|getRepositoryGroup
parameter_list|()
block|{
return|return
name|repositoryGroup
return|;
block|}
specifier|public
name|void
name|setRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroup
parameter_list|)
block|{
name|this
operator|.
name|repositoryGroup
operator|=
name|repositoryGroup
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|getRepositoryGroups
parameter_list|()
block|{
return|return
name|repositoryGroups
return|;
block|}
specifier|public
name|void
name|setRepositoryGroups
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|repositoryGroups
parameter_list|)
block|{
name|this
operator|.
name|repositoryGroups
operator|=
name|repositoryGroups
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|getManagedRepositories
parameter_list|()
block|{
return|return
name|managedRepositories
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getGroupToRepositoryMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupToRepositoryMap
return|;
block|}
specifier|public
name|String
name|getRepoGroupId
parameter_list|()
block|{
return|return
name|repoGroupId
return|;
block|}
specifier|public
name|void
name|setRepoGroupId
parameter_list|(
name|String
name|repoGroupId
parameter_list|)
block|{
name|this
operator|.
name|repoGroupId
operator|=
name|repoGroupId
expr_stmt|;
block|}
specifier|public
name|String
name|getRepoId
parameter_list|()
block|{
return|return
name|repoId
return|;
block|}
specifier|public
name|void
name|setRepoId
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|repoId
expr_stmt|;
block|}
specifier|public
name|String
name|getBaseUrl
parameter_list|()
block|{
return|return
name|baseUrl
return|;
block|}
block|}
end_class

end_unit

