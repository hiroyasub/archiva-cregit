begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|validator
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|ValidatorUtil
block|{
specifier|public
specifier|static
name|void
name|assertFieldErrors
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedFieldErrors
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actualFieldErrors
parameter_list|)
block|{
if|if
condition|(
name|expectedFieldErrors
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|actualFieldErrors
argument_list|)
expr_stmt|;
comment|// checks the number of field errors
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedFieldErrors
operator|.
name|size
argument_list|()
argument_list|,
name|actualFieldErrors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check every content of the field error
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedEntry
range|:
name|expectedFieldErrors
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|expectedEntry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|actualFieldErrors
operator|.
name|get
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// checks the error message count per error field
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|actualFieldErrors
operator|.
name|get
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the contents of error messages per field error
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedEntry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actualFieldErrors
operator|.
name|get
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|actualFieldErrors
operator|.
name|get
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|actualFieldErrors
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

