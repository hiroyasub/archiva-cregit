begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|StrutsSpringTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
operator|.
name|ArchivaBlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/**  * AbstractWebworkTestCase   *  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaBlockJUnit4ClassRunner
operator|.
name|class
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractWebworkTestCase
extends|extends
name|StrutsSpringTestCase
block|{
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|getContextLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath*:/spring-context.xml"
block|}
return|;
block|}
comment|/**      * This is a conveinence method for mimicking how the webwork interceptors      * operate on an action, before the request is processed.      *       * Call this before each major request to the action to be sure you mimic the webwork process correctly.       */
specifier|protected
name|void
name|preRequest
parameter_list|(
name|ActionSupport
name|action
parameter_list|)
block|{
name|action
operator|.
name|clearErrorsAndMessages
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the action to ensure that it has errors.      *       * NOTE: Don't forget to run {@link #preRequest(ActionSupport)} before each request to your action!      */
specifier|protected
name|void
name|assertHasErrors
parameter_list|(
name|ActionSupport
name|action
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|action
operator|.
name|getActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected an error to occur."
argument_list|,
name|action
operator|.
name|getActionErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the action to ensure that it has messages.      *       * NOTE: Don't forget to run {@link #preRequest(ActionSupport)} before each request to your action!      */
specifier|protected
name|void
name|assertHasMessages
parameter_list|(
name|ActionSupport
name|action
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|action
operator|.
name|getActionMessages
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected an message to be set."
argument_list|,
name|action
operator|.
name|getActionMessages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the action to ensure that it has NO errors.      *       * NOTE: Don't forget to run {@link #preRequest(ActionSupport)} before each request to your action!      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|assertNoErrors
parameter_list|(
name|ActionSupport
name|action
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|action
operator|.
name|getActionErrors
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Should have had no errors. but found the following errors."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|error
range|:
name|errors
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n "
argument_list|)
operator|.
name|append
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|assertRequestStatus
parameter_list|(
name|ActionSupport
name|action
parameter_list|,
name|String
name|expectedStatus
parameter_list|,
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
block|{
name|action
operator|.
name|clearErrorsAndMessages
argument_list|()
expr_stmt|;
name|Method
name|method
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Object
name|actualStatus
init|=
name|method
operator|.
name|invoke
argument_list|(
name|action
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"return should be of type String"
argument_list|,
name|actualStatus
operator|instanceof
name|String
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|expectedStatus
argument_list|,
operator|(
name|String
operator|)
name|actualStatus
argument_list|)
condition|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Unexpected status returned from method<"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|methodName
argument_list|)
operator|.
name|append
argument_list|(
literal|"> on action<"
argument_list|)
expr_stmt|;
name|String
name|clazzname
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|clazzname
operator|.
name|substring
argument_list|(
name|clazzname
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|">: expected:<"
argument_list|)
operator|.
name|append
argument_list|(
name|expectedStatus
argument_list|)
operator|.
name|append
argument_list|(
literal|"> but was:<"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|actualStatus
argument_list|)
operator|.
name|append
argument_list|(
literal|">. (see attached action messages and errors below)"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|message
range|:
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|action
operator|.
name|getActionMessages
argument_list|()
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n  [MESSAGE]: "
argument_list|)
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|error
range|:
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|action
operator|.
name|getActionErrors
argument_list|()
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n  [ERROR]: "
argument_list|)
operator|.
name|append
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

