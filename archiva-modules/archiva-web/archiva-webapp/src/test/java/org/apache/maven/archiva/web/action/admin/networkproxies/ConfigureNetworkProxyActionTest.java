begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|networkproxies
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|validator
operator|.
name|ActionValidatorManager
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|validator
operator|.
name|utils
operator|.
name|ValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
operator|.
name|DefaultActionValidatorManagerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigureNetworkProxyActionTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALIDATION_CONTEXT
init|=
literal|"saveNetworkProxy"
decl_stmt|;
comment|// valid inputs
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_ID_VALID_INPUT
init|=
literal|"abcXYZ0129._-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_PROTOCOL_VALID_INPUT
init|=
literal|"-abcXYZ0129./:\\"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_HOST_VALID_INPUT
init|=
literal|"abcXYZ0129._/\\~:?!&=-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROXY_PORT_VALID_INPUT
init|=
literal|8080
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_USERNAME_VALID_INPUT
init|=
literal|"abcXYZ0129.@/_-\\"
decl_stmt|;
comment|// invalid inputs
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_ID_INVALID_INPUT
init|=
literal|"<> \\/~+[ ]'\""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_PROTOCOL_INVALID_INPUT
init|=
literal|"<> ~+[ ]'\""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_HOST_INVALID_INPUT
init|=
literal|"<> ~+[ ]'\""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROXY_PORT_INVALID_INPUT
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_USERNAME_INVALID_INPUT
init|=
literal|"<> ~+[ ]'\""
decl_stmt|;
comment|// testing requisite
specifier|private
name|ConfigureNetworkProxyAction
name|configureNetworkProxyAction
decl_stmt|;
specifier|private
name|ActionValidatorManager
name|actionValidatorManager
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|configureNetworkProxyAction
operator|=
operator|new
name|ConfigureNetworkProxyAction
argument_list|()
expr_stmt|;
name|DefaultActionValidatorManagerFactory
name|factory
init|=
operator|new
name|DefaultActionValidatorManagerFactory
argument_list|()
decl_stmt|;
name|actionValidatorManager
operator|=
name|factory
operator|.
name|createDefaultActionValidatorManager
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStruts2ValidationFrameworkWithNullInputs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prep
name|NetworkProxy
name|networkProxy
init|=
name|createNetworkProxy
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|configureNetworkProxyAction
operator|.
name|setProxy
argument_list|(
name|networkProxy
argument_list|)
expr_stmt|;
comment|// test
name|actionValidatorManager
operator|.
name|validate
argument_list|(
name|configureNetworkProxyAction
argument_list|,
name|VALIDATION_CONTEXT
argument_list|)
expr_stmt|;
comment|// verify
name|assertTrue
argument_list|(
name|configureNetworkProxyAction
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldErrors
init|=
name|configureNetworkProxyAction
operator|.
name|getFieldErrors
argument_list|()
decl_stmt|;
comment|// make an expected field error object
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedFieldErrors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// populate
name|List
argument_list|<
name|String
argument_list|>
name|expectedErrorMessages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"You must enter an identifier."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.id"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"You must enter a protocol."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.protocol"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"You must enter a host."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.host"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|ValidatorUtil
operator|.
name|assertFieldErrors
argument_list|(
name|expectedFieldErrors
argument_list|,
name|fieldErrors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStruts2ValidationFrameworkWithBlankInputs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prep
name|NetworkProxy
name|networkProxy
init|=
name|createNetworkProxy
argument_list|(
name|EMPTY_STRING
argument_list|,
name|EMPTY_STRING
argument_list|,
name|EMPTY_STRING
argument_list|,
name|EMPTY_STRING
argument_list|)
decl_stmt|;
name|configureNetworkProxyAction
operator|.
name|setProxy
argument_list|(
name|networkProxy
argument_list|)
expr_stmt|;
comment|// test
name|actionValidatorManager
operator|.
name|validate
argument_list|(
name|configureNetworkProxyAction
argument_list|,
name|VALIDATION_CONTEXT
argument_list|)
expr_stmt|;
comment|// verify
name|assertTrue
argument_list|(
name|configureNetworkProxyAction
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldErrors
init|=
name|configureNetworkProxyAction
operator|.
name|getFieldErrors
argument_list|()
decl_stmt|;
comment|// make an expected field error object
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedFieldErrors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// populate
name|List
argument_list|<
name|String
argument_list|>
name|expectedErrorMessages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"You must enter an identifier."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.id"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"You must enter a protocol."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.protocol"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"You must enter a host."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.host"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|ValidatorUtil
operator|.
name|assertFieldErrors
argument_list|(
name|expectedFieldErrors
argument_list|,
name|fieldErrors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStruts2ValidationFrameworkWithInvalidInputs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prep
name|NetworkProxy
name|networkProxy
init|=
name|createNetworkProxy
argument_list|(
name|PROXY_ID_INVALID_INPUT
argument_list|,
name|PROXY_HOST_INVALID_INPUT
argument_list|,
name|PROXY_PORT_INVALID_INPUT
argument_list|,
name|PROXY_PROTOCOL_INVALID_INPUT
argument_list|,
name|PROXY_USERNAME_INVALID_INPUT
argument_list|)
decl_stmt|;
name|configureNetworkProxyAction
operator|.
name|setProxy
argument_list|(
name|networkProxy
argument_list|)
expr_stmt|;
comment|// test
name|actionValidatorManager
operator|.
name|validate
argument_list|(
name|configureNetworkProxyAction
argument_list|,
name|VALIDATION_CONTEXT
argument_list|)
expr_stmt|;
comment|// verify
name|assertTrue
argument_list|(
name|configureNetworkProxyAction
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldErrors
init|=
name|configureNetworkProxyAction
operator|.
name|getFieldErrors
argument_list|()
decl_stmt|;
comment|// make an expected field error object
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedFieldErrors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// populate
name|List
argument_list|<
name|String
argument_list|>
name|expectedErrorMessages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"Proxy id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.id"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"Protocol must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), dots(.), colons(:), and dashes(-)."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.protocol"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"Host must only contain alphanumeric characters, equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.host"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"Port needs to be larger than 1"
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.port"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|expectedErrorMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|expectedErrorMessages
operator|.
name|add
argument_list|(
literal|"Username must only contain alphanumeric characters, at's(@), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|expectedFieldErrors
operator|.
name|put
argument_list|(
literal|"proxy.username"
argument_list|,
name|expectedErrorMessages
argument_list|)
expr_stmt|;
name|ValidatorUtil
operator|.
name|assertFieldErrors
argument_list|(
name|expectedFieldErrors
argument_list|,
name|fieldErrors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStruts2ValidationFrameworkWithValidInputs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prep
name|NetworkProxy
name|networkProxy
init|=
name|createNetworkProxy
argument_list|(
name|PROXY_ID_VALID_INPUT
argument_list|,
name|PROXY_HOST_VALID_INPUT
argument_list|,
name|PROXY_PORT_VALID_INPUT
argument_list|,
name|PROXY_PROTOCOL_VALID_INPUT
argument_list|,
name|PROXY_USERNAME_VALID_INPUT
argument_list|)
decl_stmt|;
name|configureNetworkProxyAction
operator|.
name|setProxy
argument_list|(
name|networkProxy
argument_list|)
expr_stmt|;
comment|// test
name|actionValidatorManager
operator|.
name|validate
argument_list|(
name|configureNetworkProxyAction
argument_list|,
name|VALIDATION_CONTEXT
argument_list|)
expr_stmt|;
comment|// verify
name|assertFalse
argument_list|(
name|configureNetworkProxyAction
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NetworkProxy
name|createNetworkProxy
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|username
parameter_list|)
block|{
name|NetworkProxy
name|networkProxy
init|=
operator|new
name|NetworkProxy
argument_list|()
decl_stmt|;
name|networkProxy
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
return|return
name|networkProxy
return|;
block|}
comment|// over-loaded
comment|// for simulating empty/null form purposes; excluding primitive data-typed values
specifier|private
name|NetworkProxy
name|createNetworkProxy
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|username
parameter_list|)
block|{
name|NetworkProxy
name|networkProxy
init|=
operator|new
name|NetworkProxy
argument_list|()
decl_stmt|;
name|networkProxy
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|networkProxy
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
return|return
name|networkProxy
return|;
block|}
block|}
end_class

end_unit

