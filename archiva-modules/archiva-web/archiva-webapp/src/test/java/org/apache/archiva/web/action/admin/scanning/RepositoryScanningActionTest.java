begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|scanning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|admin
operator|.
name|DefaultArchivaAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|AbstractActionTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryScanningActionTest
extends|extends
name|AbstractActionTestCase
block|{
specifier|private
name|RepositoryScanningAction
name|action
decl_stmt|;
specifier|private
name|MockControl
name|archivaConfigControl
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfig
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|archivaConfigControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|archivaConfig
operator|=
operator|(
name|ArchivaConfiguration
operator|)
name|archivaConfigControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|action
operator|=
operator|new
name|RepositoryScanningAction
argument_list|()
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|RepositoryScanningConfiguration
name|repositoryScanningConfig
init|=
operator|new
name|RepositoryScanningConfiguration
argument_list|()
decl_stmt|;
name|repositoryScanningConfig
operator|.
name|setKnownContentConsumers
argument_list|(
name|createKnownContentConsumersList
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setRepositoryScanning
argument_list|(
name|repositoryScanningConfig
argument_list|)
expr_stmt|;
name|DefaultArchivaAdministration
name|archivaAdministration
init|=
operator|new
name|DefaultArchivaAdministration
argument_list|()
decl_stmt|;
name|archivaAdministration
operator|.
name|setArchivaConfiguration
argument_list|(
name|archivaConfig
argument_list|)
expr_stmt|;
name|action
operator|.
name|setArchivaAdministration
argument_list|(
name|archivaAdministration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateKnownConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|setEnabledKnownContentConsumers
argument_list|()
expr_stmt|;
name|String
name|returnString
init|=
name|action
operator|.
name|updateKnownConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|config
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|action
operator|.
name|SUCCESS
argument_list|,
name|returnString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"results "
operator|+
name|results
argument_list|,
literal|8
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDisableAllKnownConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|archivaConfigControl
operator|.
name|expectAndReturn
argument_list|(
name|archivaConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|config
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfig
operator|.
name|save
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setEnabledKnownContentConsumers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|returnString
init|=
name|action
operator|.
name|updateKnownConsumers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|config
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|action
operator|.
name|SUCCESS
argument_list|,
name|returnString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setEnabledKnownContentConsumers
parameter_list|()
block|{
name|action
operator|.
name|setEnabledKnownContentConsumers
argument_list|(
name|createKnownContentConsumersList
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createKnownContentConsumersList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knownContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"auto-remove"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"auto-rename"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"create-missing-checksums"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"index-content"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"metadata-updater"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"repository-purge"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"update-db-artifact"
argument_list|)
expr_stmt|;
name|knownContentConsumers
operator|.
name|add
argument_list|(
literal|"validate-checksums"
argument_list|)
expr_stmt|;
return|return
name|knownContentConsumers
return|;
block|}
block|}
end_class

end_unit

