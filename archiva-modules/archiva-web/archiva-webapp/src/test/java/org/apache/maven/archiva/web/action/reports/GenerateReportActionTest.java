begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|reports
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletUnitClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|RepositoryContentStatisticsDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|RepositoryProblemDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|RangeConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|RepositoryContentStatisticsByRepositoryConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|RepositoryProblemByGroupIdConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|RepositoryProblemByRepositoryIdConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|RepositoryProblemConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryContentStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryProblemReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
operator|.
name|ArchivaDAOStub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
operator|.
name|RepositoryContentStatisticsDAOStub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusInSpringTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_comment
comment|/**  * Test the GenerationReportAction. Note that we are testing for<i>current</i> behaviour, however there are several  * instances below where other behaviour may actually be more appropriate (eg the error handling, download stats should  * never forward to HTML page, etc). This is also missing tests for various combinations of paging at this point.  */
end_comment

begin_class
specifier|public
class|class
name|GenerateReportActionTest
extends|extends
name|PlexusInSpringTestCase
block|{
specifier|private
name|GenerateReportAction
name|action
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOTS
init|=
literal|"snapshots"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INTERNAL
init|=
literal|"internal"
decl_stmt|;
specifier|private
name|RepositoryProblemDAO
name|repositoryProblemDAO
decl_stmt|;
specifier|private
name|MockControl
name|repositoryProblemDAOControl
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_ID
init|=
literal|"groupId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"http://localhost/reports/generateReport.action"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ArchivaDAOStub
name|archivaDAOStub
init|=
operator|(
name|ArchivaDAOStub
operator|)
name|lookup
argument_list|(
name|ArchivaDAO
operator|.
name|class
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|archivaDAOStub
operator|.
name|setRepositoryIds
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"repo1"
argument_list|,
literal|"repo2"
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|RepositoryProblemDAO
operator|.
name|class
argument_list|)
expr_stmt|;
name|repositoryProblemDAO
operator|=
operator|(
name|RepositoryProblemDAO
operator|)
name|repositoryProblemDAOControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|archivaDAOStub
operator|.
name|setRepositoryProblemDAO
argument_list|(
name|repositoryProblemDAO
argument_list|)
expr_stmt|;
name|action
operator|=
operator|(
name|GenerateReportAction
operator|)
name|lookup
argument_list|(
name|Action
operator|.
name|class
argument_list|,
literal|"generateReport"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepareAction
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepositories
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|availableRepositories
parameter_list|)
block|{
name|action
operator|.
name|setSelectedRepositories
argument_list|(
name|selectedRepositories
argument_list|)
expr_stmt|;
name|action
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|GenerateReportAction
operator|.
name|ALL_REPOSITORIES
argument_list|,
literal|"repo1"
argument_list|,
literal|"repo2"
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoryIds
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|availableRepositories
argument_list|,
name|action
operator|.
name|getAvailableRepositories
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsInvalidRowCount
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setRowCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsInvalidEndDate
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartDate
argument_list|(
literal|"2009/12/12"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"2008/11/11"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsMalformedEndDate
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"This is not a date"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
comment|// TODO: should be an input error
name|assertEquals
argument_list|(
name|Action
operator|.
name|ERROR
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsInvalidEndDateMultiRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartDate
argument_list|(
literal|"2009/12/12"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"2008/11/11"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsMalformedEndDateMultiRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"This is not a date"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
comment|// TODO: should be an input error
name|assertEquals
argument_list|(
name|Action
operator|.
name|ERROR
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsNoRepos
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsSingleRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertSuccessResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsSingleRepoNoStats
parameter_list|()
block|{
name|RepositoryContentStatisticsDAOStub
name|dao
init|=
operator|(
name|RepositoryContentStatisticsDAOStub
operator|)
name|lookup
argument_list|(
name|RepositoryContentStatisticsDAO
operator|.
name|class
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|dao
operator|.
name|setStats
argument_list|(
name|Collections
operator|.
expr|<
name|RepositoryContentStatistics
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|ERROR
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsOvershotPages
parameter_list|()
block|{
name|action
operator|.
name|setPage
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|ERROR
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsMultipleRepoNoResults
parameter_list|()
block|{
name|RepositoryContentStatisticsDAOStub
name|dao
init|=
operator|(
name|RepositoryContentStatisticsDAOStub
operator|)
name|lookup
argument_list|(
name|RepositoryContentStatisticsDAO
operator|.
name|class
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|dao
operator|.
name|setStats
argument_list|(
name|Collections
operator|.
expr|<
name|RepositoryContentStatistics
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenerateReportAction
operator|.
name|BLANK
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionMessages
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGenerateStatisticsMultipleRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|generateStatistics
argument_list|()
decl_stmt|;
name|assertSuccessResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsSingleRepo
parameter_list|()
throws|throws
name|IOException
throws|,
name|ArchivaDatabaseException
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenerateReportAction
operator|.
name|SEND_FILE
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryContentStatisticsDAOStub
name|dao
init|=
operator|(
name|RepositoryContentStatisticsDAOStub
operator|)
name|lookup
argument_list|(
name|RepositoryContentStatisticsDAO
operator|.
name|class
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|RepositoryContentStatistics
name|stats
init|=
name|dao
operator|.
name|queryRepositoryContentStatistics
argument_list|(
operator|new
name|RepositoryContentStatisticsByRepositoryConstraint
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Date of Scan,Total File Count,Total Size,Artifact Count,Group Count,Project Count,Plugins,Archetypes,Jars,Wars,Deployments,Downloads\n"
operator|+
name|stats
operator|.
name|getWhenGathered
argument_list|()
operator|+
literal|",0,0,0,0,0,1,0,1,1,0,0\n"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|action
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsMultipleRepos
parameter_list|()
throws|throws
name|IOException
throws|,
name|ArchivaDatabaseException
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenerateReportAction
operator|.
name|SEND_FILE
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertMultiRepoCsvResult
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertMultiRepoCsvResult
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Repository,Total File Count,Total Size,Artifact Count,Group Count,Project Count,Plugins,Archetypes,Jars,Wars,Deployments,Downloads\n"
operator|+
literal|"snapshots,0,0,0,0,0,1,0,1,1,0,0\n"
operator|+
literal|"internal,0,0,0,0,0,1,0,1,1,0,0\n"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|action
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsMalformedEndDateMultiRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"This is not a date"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
comment|// TODO: should be an input error
name|assertEquals
argument_list|(
name|Action
operator|.
name|ERROR
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsInvalidEndDateMultiRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartDate
argument_list|(
literal|"2009/12/12"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"2008/11/11"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsInvalidEndDateSingleRepo
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartDate
argument_list|(
literal|"2009/12/12"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndDate
argument_list|(
literal|"2008/11/11"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsSingleRepoNoStats
parameter_list|()
block|{
name|RepositoryContentStatisticsDAOStub
name|dao
init|=
operator|(
name|RepositoryContentStatisticsDAOStub
operator|)
name|lookup
argument_list|(
name|RepositoryContentStatisticsDAO
operator|.
name|class
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|dao
operator|.
name|setStats
argument_list|(
name|Collections
operator|.
expr|<
name|RepositoryContentStatistics
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|ERROR
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsNoRepos
parameter_list|()
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsMultipleRepoNoResults
parameter_list|()
block|{
name|RepositoryContentStatisticsDAOStub
name|dao
init|=
operator|(
name|RepositoryContentStatisticsDAOStub
operator|)
name|lookup
argument_list|(
name|RepositoryContentStatisticsDAO
operator|.
name|class
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|dao
operator|.
name|setStats
argument_list|(
name|Collections
operator|.
expr|<
name|RepositoryContentStatistics
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenerateReportAction
operator|.
name|BLANK
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionMessages
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDownloadStatisticsMultipleRepoInStrutsFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setSelectedRepositories
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"["
operator|+
name|SNAPSHOTS
operator|+
literal|"],["
operator|+
name|INTERNAL
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|downloadStatisticsReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenerateReportAction
operator|.
name|SEND_FILE
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertMultiRepoCsvResult
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testHealthReportSingleRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryProblem
name|problem1
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId"
argument_list|,
name|INTERNAL
argument_list|)
decl_stmt|;
name|RepositoryProblem
name|problem2
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId-2"
argument_list|,
name|INTERNAL
argument_list|)
decl_stmt|;
name|repositoryProblemDAOControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryProblemDAO
operator|.
name|queryRepositoryProblems
argument_list|(
operator|new
name|RepositoryProblemByRepositoryIdConstraint
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|101
block|}
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|problem1
argument_list|,
name|problem2
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setRepositoryId
argument_list|(
name|INTERNAL
argument_list|)
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|ServletUnitClient
name|sc
init|=
name|sr
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|action
operator|.
name|setServletRequest
argument_list|(
name|sc
operator|.
name|newInvocation
argument_list|(
name|URL
argument_list|)
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertSuccessResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|RepositoryProblemReport
name|problemReport1
init|=
name|createProblemReport
argument_list|(
name|problem1
argument_list|)
decl_stmt|;
name|RepositoryProblemReport
name|problemReport2
init|=
name|createProblemReport
argument_list|(
name|problem2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|problemReport1
argument_list|,
name|problemReport2
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|get
argument_list|(
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testHealthReportInvalidRowCount
parameter_list|()
throws|throws
name|Exception
block|{
name|repositoryProblemDAOControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setRowCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|action
operator|.
name|setRepositoryId
argument_list|(
name|INTERNAL
argument_list|)
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|ServletUnitClient
name|sc
init|=
name|sr
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|action
operator|.
name|setServletRequest
argument_list|(
name|sc
operator|.
name|newInvocation
argument_list|(
name|URL
argument_list|)
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testHealthReportAllRepos
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryProblem
name|problem1
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId"
argument_list|,
name|INTERNAL
argument_list|)
decl_stmt|;
name|RepositoryProblem
name|problem2
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId-2"
argument_list|,
name|SNAPSHOTS
argument_list|)
decl_stmt|;
name|repositoryProblemDAOControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryProblemDAO
operator|.
name|queryRepositoryProblems
argument_list|(
operator|new
name|RangeConstraint
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|101
block|}
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|problem1
argument_list|,
name|problem2
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setRepositoryId
argument_list|(
name|GenerateReportAction
operator|.
name|ALL_REPOSITORIES
argument_list|)
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|ServletUnitClient
name|sc
init|=
name|sr
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|action
operator|.
name|setServletRequest
argument_list|(
name|sc
operator|.
name|newInvocation
argument_list|(
name|URL
argument_list|)
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertSuccessResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|RepositoryProblemReport
name|problemReport1
init|=
name|createProblemReport
argument_list|(
name|problem1
argument_list|)
decl_stmt|;
name|RepositoryProblemReport
name|problemReport2
init|=
name|createProblemReport
argument_list|(
name|problem2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|INTERNAL
argument_list|,
name|SNAPSHOTS
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|problemReport1
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|get
argument_list|(
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|problemReport2
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|get
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testHealthReportSingleRepoByCorrectGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryProblem
name|problem1
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId"
argument_list|,
name|INTERNAL
argument_list|)
decl_stmt|;
name|RepositoryProblem
name|problem2
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId-2"
argument_list|,
name|INTERNAL
argument_list|)
decl_stmt|;
name|repositoryProblemDAOControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryProblemDAO
operator|.
name|queryRepositoryProblems
argument_list|(
operator|new
name|RepositoryProblemConstraint
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|101
block|}
argument_list|,
name|GROUP_ID
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|problem1
argument_list|,
name|problem2
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setGroupId
argument_list|(
name|GROUP_ID
argument_list|)
expr_stmt|;
name|action
operator|.
name|setRepositoryId
argument_list|(
name|INTERNAL
argument_list|)
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|ServletUnitClient
name|sc
init|=
name|sr
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|action
operator|.
name|setServletRequest
argument_list|(
name|sc
operator|.
name|newInvocation
argument_list|(
name|URL
argument_list|)
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertSuccessResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|RepositoryProblemReport
name|problemReport1
init|=
name|createProblemReport
argument_list|(
name|problem1
argument_list|)
decl_stmt|;
name|RepositoryProblemReport
name|problemReport2
init|=
name|createProblemReport
argument_list|(
name|problem2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|INTERNAL
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|problemReport1
argument_list|,
name|problemReport2
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|get
argument_list|(
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testHealthReportSingleRepoByCorrectGroupIdAllRepositories
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryProblem
name|problem1
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId"
argument_list|,
name|INTERNAL
argument_list|)
decl_stmt|;
name|RepositoryProblem
name|problem2
init|=
name|createProblem
argument_list|(
name|GROUP_ID
argument_list|,
literal|"artifactId-2"
argument_list|,
name|SNAPSHOTS
argument_list|)
decl_stmt|;
name|repositoryProblemDAOControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryProblemDAO
operator|.
name|queryRepositoryProblems
argument_list|(
operator|new
name|RepositoryProblemByGroupIdConstraint
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|101
block|}
argument_list|,
name|GROUP_ID
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|problem1
argument_list|,
name|problem2
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setGroupId
argument_list|(
name|GROUP_ID
argument_list|)
expr_stmt|;
name|action
operator|.
name|setRepositoryId
argument_list|(
name|GenerateReportAction
operator|.
name|ALL_REPOSITORIES
argument_list|)
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|ServletUnitClient
name|sc
init|=
name|sr
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|action
operator|.
name|setServletRequest
argument_list|(
name|sc
operator|.
name|newInvocation
argument_list|(
name|URL
argument_list|)
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertSuccessResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|RepositoryProblemReport
name|problemReport1
init|=
name|createProblemReport
argument_list|(
name|problem1
argument_list|)
decl_stmt|;
name|RepositoryProblemReport
name|problemReport2
init|=
name|createProblemReport
argument_list|(
name|problem2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|INTERNAL
argument_list|,
name|SNAPSHOTS
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|problemReport1
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|get
argument_list|(
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|problemReport2
argument_list|)
argument_list|,
name|action
operator|.
name|getRepositoriesMap
argument_list|()
operator|.
name|get
argument_list|(
name|SNAPSHOTS
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testHealthReportSingleRepoByIncorrectGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|repositoryProblemDAOControl
operator|.
name|expectAndReturn
argument_list|(
name|repositoryProblemDAO
operator|.
name|queryRepositoryProblems
argument_list|(
operator|new
name|RepositoryProblemConstraint
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|101
block|}
argument_list|,
literal|"not.it"
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|Object
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|.
name|setGroupId
argument_list|(
literal|"not.it"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setRepositoryId
argument_list|(
name|INTERNAL
argument_list|)
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|ServletUnitClient
name|sc
init|=
name|sr
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|action
operator|.
name|setServletRequest
argument_list|(
name|sc
operator|.
name|newInvocation
argument_list|(
name|URL
argument_list|)
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenerateReportAction
operator|.
name|BLANK
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryProblemDAOControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|RepositoryProblemReport
name|createProblemReport
parameter_list|(
name|RepositoryProblem
name|problem
parameter_list|)
block|{
name|RepositoryProblemReport
name|problemReport
init|=
operator|new
name|RepositoryProblemReport
argument_list|(
name|problem
argument_list|)
decl_stmt|;
name|problemReport
operator|.
name|setGroupURL
argument_list|(
literal|"http://localhost/browse/"
operator|+
name|problem
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|problemReport
operator|.
name|setArtifactURL
argument_list|(
name|problemReport
operator|.
name|getGroupURL
argument_list|()
operator|+
literal|"/"
operator|+
name|problem
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|problemReport
return|;
block|}
specifier|private
name|RepositoryProblem
name|createProblem
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|repoId
parameter_list|)
block|{
name|RepositoryProblem
name|problem
init|=
operator|new
name|RepositoryProblem
argument_list|()
decl_stmt|;
name|problem
operator|.
name|setRepositoryId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|problem
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|problem
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
return|return
name|problem
return|;
block|}
specifier|public
name|void
name|testHealthReportNoRepositoryId
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareAction
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SNAPSHOTS
argument_list|,
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|action
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|INPUT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSuccessResult
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Action
operator|.
name|SUCCESS
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasActionErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|hasFieldErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

