begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ActionContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|DefaultTextProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|TextProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|conversion
operator|.
name|ObjectTypeDeterminer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|conversion
operator|.
name|impl
operator|.
name|DefaultObjectTypeDeterminer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|conversion
operator|.
name|impl
operator|.
name|XWorkBasicConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|conversion
operator|.
name|impl
operator|.
name|XWorkConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|inject
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|inject
operator|.
name|ContainerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|inject
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ognl
operator|.
name|OgnlReflectionProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ognl
operator|.
name|OgnlUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ognl
operator|.
name|OgnlValueStackFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|ognl
operator|.
name|accessor
operator|.
name|CompoundRootAccessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|util
operator|.
name|CompoundRoot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|util
operator|.
name|ValueStack
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|util
operator|.
name|ValueStackFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|util
operator|.
name|reflection
operator|.
name|ReflectionProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|validator
operator|.
name|ActionValidatorManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|validator
operator|.
name|DefaultActionValidatorManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|validator
operator|.
name|DefaultValidatorFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork2
operator|.
name|validator
operator|.
name|DefaultValidatorFileParser
import|;
end_import

begin_import
import|import
name|ognl
operator|.
name|PropertyAccessor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * Factory for creating the DefaultActionValidatorManager to be used for the validation tests.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultActionValidatorManagerFactory
block|{
comment|// ObjectFactory.setObjectFactory(..) was removed in struts 2.1, so we have to workaround with this
comment|//  to make the validation tests work
specifier|public
name|ActionValidatorManager
name|createDefaultActionValidatorManager
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|Container
name|container
init|=
name|createBootstrapContainer
argument_list|()
decl_stmt|;
name|ActionContext
name|context
init|=
operator|new
name|ActionContext
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|setValueStack
argument_list|(
name|createValueStack
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|ActionContext
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|OgnlReflectionProvider
name|reflectionProvider
init|=
operator|new
name|OgnlReflectionProvider
argument_list|()
decl_stmt|;
name|reflectionProvider
operator|.
name|setOgnlUtil
argument_list|(
name|container
operator|.
name|getInstance
argument_list|(
name|OgnlUtil
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|objectFactory
operator|.
name|setReflectionProvider
argument_list|(
name|reflectionProvider
argument_list|)
expr_stmt|;
name|DefaultValidatorFileParser
name|fileParser
init|=
operator|new
name|DefaultValidatorFileParser
argument_list|()
decl_stmt|;
name|fileParser
operator|.
name|setObjectFactory
argument_list|(
name|objectFactory
argument_list|)
expr_stmt|;
name|DefaultValidatorFactory
name|validatorFactory
init|=
operator|new
name|DefaultValidatorFactory
argument_list|(
name|objectFactory
argument_list|,
name|fileParser
argument_list|)
decl_stmt|;
name|DefaultActionValidatorManager
name|defaultValidatorManager
init|=
operator|new
name|DefaultActionValidatorManager
argument_list|()
decl_stmt|;
name|defaultValidatorManager
operator|.
name|setValidatorFactory
argument_list|(
name|validatorFactory
argument_list|)
expr_stmt|;
name|defaultValidatorManager
operator|.
name|setValidatorFileParser
argument_list|(
name|fileParser
argument_list|)
expr_stmt|;
return|return
name|defaultValidatorManager
return|;
block|}
specifier|private
name|ValueStack
name|createValueStack
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|OgnlValueStackFactory
name|stackFactory
init|=
operator|new
name|OgnlValueStackFactory
argument_list|()
decl_stmt|;
name|stackFactory
operator|.
name|setXWorkConverter
argument_list|(
name|container
operator|.
name|getInstance
argument_list|(
name|XWorkConverter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|stackFactory
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|stackFactory
operator|.
name|setTextProvider
argument_list|(
name|container
operator|.
name|getInstance
argument_list|(
name|TextProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ValueStack
name|stack
init|=
name|stackFactory
operator|.
name|createValueStack
argument_list|()
decl_stmt|;
return|return
name|stack
return|;
block|}
specifier|private
name|Container
name|createBootstrapContainer
parameter_list|()
block|{
name|ContainerBuilder
name|builder
init|=
operator|new
name|ContainerBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|ReflectionProvider
operator|.
name|class
argument_list|,
name|OgnlReflectionProvider
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|ValueStackFactory
operator|.
name|class
argument_list|,
name|OgnlValueStackFactory
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|XWorkConverter
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|XWorkBasicConverter
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|TextProvider
operator|.
name|class
argument_list|,
literal|"system"
argument_list|,
name|DefaultTextProvider
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|ObjectTypeDeterminer
operator|.
name|class
argument_list|,
name|DefaultObjectTypeDeterminer
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|PropertyAccessor
operator|.
name|class
argument_list|,
name|CompoundRoot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|CompoundRootAccessor
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|factory
argument_list|(
name|OgnlUtil
operator|.
name|class
argument_list|,
name|Scope
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|builder
operator|.
name|constant
argument_list|(
literal|"devMode"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

