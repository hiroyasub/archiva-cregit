begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Utility class for creating xpath expressions  */
end_comment

begin_class
specifier|public
class|class
name|XPathExpressionUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINS
init|=
literal|"contains"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AND
init|=
literal|" and "
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CURRENT_NODE
init|=
literal|"./"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARENT_NODE
init|=
literal|"../"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GRANDPARENT_NODE
init|=
literal|"../../"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_ANY_LEVEL
init|=
literal|"//"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_COLUMN
init|=
literal|"td"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_ROW
init|=
literal|"tr"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|START_NODE_TEST
init|=
literal|"["
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|END_NODE_TEST
init|=
literal|"]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ANCHOR
init|=
literal|"a"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IMG
init|=
literal|"img"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LIST
init|=
literal|"ul"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LINE
init|=
literal|"li"
decl_stmt|;
specifier|public
specifier|static
name|String
name|getList
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
name|String
name|xpathExpression
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|xpathExpression
operator|+=
name|ELEMENT_ANY_LEVEL
expr_stmt|;
name|xpathExpression
operator|+=
name|LIST
expr_stmt|;
name|xpathExpression
operator|+=
name|START_NODE_TEST
expr_stmt|;
for|for
control|(
name|int
name|nIndex
init|=
literal|0
init|;
name|nIndex
operator|<
name|values
operator|.
name|length
condition|;
name|nIndex
operator|++
control|)
block|{
name|xpathExpression
operator|+=
operator|(
operator|(
name|nIndex
operator|>
literal|0
operator|)
condition|?
name|AND
else|:
literal|""
operator|)
expr_stmt|;
name|xpathExpression
operator|+=
name|contains
argument_list|(
name|LINE
operator|+
name|position
argument_list|(
name|nIndex
operator|+
literal|1
argument_list|)
argument_list|,
name|values
index|[
name|nIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|xpathExpression
operator|+=
name|END_NODE_TEST
expr_stmt|;
block|}
return|return
name|xpathExpression
return|;
block|}
comment|/**      * expression for acquiring an element in one of the table columns      *       * @param element the node element      * @param elementIndex column index of the element, used for skipping      * @param columnValues the values to be matched in each column, element column is included      * @return      */
specifier|public
specifier|static
name|String
name|getColumnElement
parameter_list|(
name|String
name|element
parameter_list|,
name|int
name|elementIndex
parameter_list|,
name|String
index|[]
name|columnValues
parameter_list|)
block|{
return|return
name|getColumnElement
argument_list|(
name|element
argument_list|,
name|elementIndex
argument_list|,
literal|null
argument_list|,
name|columnValues
argument_list|)
return|;
block|}
comment|/**      * expression for acquiring an element in one of the table columns      *       * @param element the node element      * @param elementIndex column index of the element, used for skipping      * @param elementValue the matched element value      * @param columnValues the values to be matched in each column, element column is included      * @return      */
specifier|public
specifier|static
name|String
name|getColumnElement
parameter_list|(
name|String
name|element
parameter_list|,
name|int
name|elementIndex
parameter_list|,
name|String
name|elementValue
parameter_list|,
name|String
index|[]
name|columnValues
parameter_list|)
block|{
return|return
name|getColumnElement
argument_list|(
name|element
argument_list|,
name|elementIndex
argument_list|,
name|elementValue
argument_list|,
literal|"TEXT"
argument_list|,
name|columnValues
argument_list|)
return|;
block|}
comment|/**      * expression for acquiring an element in one of the table columns      *       * @param element the node element      * @param elementIndex column index of the element, used for skipping      * @param imageName the matched image name      * @param columnValues the values to be matched in each column, element column is included      * @return      */
specifier|public
specifier|static
name|String
name|getImgColumnElement
parameter_list|(
name|String
name|element
parameter_list|,
name|int
name|elementIndex
parameter_list|,
name|String
name|imageName
parameter_list|,
name|String
index|[]
name|columnValues
parameter_list|)
block|{
return|return
name|getColumnElement
argument_list|(
name|element
argument_list|,
name|elementIndex
argument_list|,
name|imageName
argument_list|,
name|IMG
argument_list|,
name|columnValues
argument_list|)
return|;
block|}
comment|/**      * expression for acquiring an element in one of the table columns      *       * @param element the node element      * @param elementIndex column index of the element, used for skipping      * @param imageName the matched image name      * @param columnValues the values to be matched in each column, element column is included      * @return      */
specifier|private
specifier|static
name|String
name|getColumnElement
parameter_list|(
name|String
name|element
parameter_list|,
name|int
name|elementIndex
parameter_list|,
name|String
name|elementValue
parameter_list|,
name|String
name|elementValueType
parameter_list|,
name|String
index|[]
name|columnValues
parameter_list|)
block|{
name|String
name|xpathExpression
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columnValues
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|columnValues
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|xpathExpression
operator|=
name|ELEMENT_ANY_LEVEL
operator|+
name|element
expr_stmt|;
name|xpathExpression
operator|+=
name|START_NODE_TEST
expr_stmt|;
if|if
condition|(
name|elementValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"TEXT"
operator|.
name|equals
argument_list|(
name|elementValueType
argument_list|)
condition|)
block|{
name|xpathExpression
operator|+=
name|contains
argument_list|(
name|elementValue
argument_list|)
expr_stmt|;
name|xpathExpression
operator|+=
operator|(
name|columnValues
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|AND
else|:
literal|""
expr_stmt|;
block|}
block|}
comment|// we are two levels below the table row element ( tr/td/<element> )
name|xpathExpression
operator|+=
name|matchColumns
argument_list|(
name|GRANDPARENT_NODE
argument_list|,
name|columnValues
argument_list|,
name|elementIndex
argument_list|)
expr_stmt|;
name|xpathExpression
operator|+=
name|END_NODE_TEST
expr_stmt|;
block|}
if|if
condition|(
name|IMG
operator|.
name|equals
argument_list|(
name|elementValueType
argument_list|)
condition|)
block|{
name|xpathExpression
operator|+=
literal|"/img[contains(@src, '"
operator|+
name|elementValue
operator|+
literal|"')]"
expr_stmt|;
block|}
return|return
name|xpathExpression
return|;
block|}
comment|/**      * expression for acquiring the table row that matches all column values with the same order as the list      *       * @param columnValues the matched list of columnValues      * @return      */
specifier|public
specifier|static
name|String
name|getTableRow
parameter_list|(
name|String
index|[]
name|columnValues
parameter_list|)
block|{
name|String
name|xpathExpression
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columnValues
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|columnValues
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|xpathExpression
operator|=
operator|new
name|String
argument_list|(
name|ELEMENT_ANY_LEVEL
operator|+
name|TABLE_ROW
operator|+
name|START_NODE_TEST
argument_list|)
expr_stmt|;
name|xpathExpression
operator|+=
name|matchColumns
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|xpathExpression
operator|+=
name|END_NODE_TEST
expr_stmt|;
block|}
return|return
name|xpathExpression
return|;
block|}
specifier|private
specifier|static
name|String
name|matchColumns
parameter_list|(
name|String
index|[]
name|columnValues
parameter_list|)
block|{
return|return
name|matchColumns
argument_list|(
name|columnValues
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|matchColumns
parameter_list|(
name|String
index|[]
name|columnValues
parameter_list|,
name|int
name|skipIndex
parameter_list|)
block|{
return|return
name|matchColumns
argument_list|(
literal|null
argument_list|,
name|columnValues
argument_list|,
name|skipIndex
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|matchColumns
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
index|[]
name|columnValues
parameter_list|,
name|int
name|skipIndex
parameter_list|)
block|{
name|String
name|xpathExpression
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|nIndex
init|=
literal|0
init|;
name|nIndex
operator|<
name|columnValues
operator|.
name|length
condition|;
name|nIndex
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|skipIndex
operator|!=
name|nIndex
operator|)
operator|||
operator|(
name|skipIndex
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
comment|// prepend "and" if index> 0
name|xpathExpression
operator|+=
operator|(
operator|(
name|nIndex
operator|>
literal|0
operator|)
condition|?
name|AND
else|:
literal|""
operator|)
expr_stmt|;
name|xpathExpression
operator|+=
name|contains
argument_list|(
name|parent
argument_list|,
name|TABLE_COLUMN
operator|+
name|position
argument_list|(
name|nIndex
operator|+
literal|1
argument_list|)
argument_list|,
name|columnValues
index|[
name|nIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|xpathExpression
return|;
block|}
specifier|private
specifier|static
name|String
name|position
parameter_list|(
name|int
name|nIndex
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
literal|"["
operator|+
name|nIndex
operator|+
literal|"]"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|contains
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|element
parameter_list|,
name|String
name|matchedString
parameter_list|)
block|{
name|String
name|finalElement
init|=
operator|(
name|parent
operator|!=
literal|null
operator|)
condition|?
name|parent
else|:
literal|""
decl_stmt|;
name|finalElement
operator|+=
name|element
expr_stmt|;
return|return
name|contains
argument_list|(
name|finalElement
argument_list|,
name|matchedString
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|contains
parameter_list|(
name|String
name|matchedString
parameter_list|)
block|{
return|return
name|contains
argument_list|(
literal|"."
argument_list|,
name|matchedString
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|contains
parameter_list|(
name|String
name|axis
parameter_list|,
name|String
name|matchedString
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|CONTAINS
operator|+
literal|"("
operator|+
name|axis
operator|+
literal|","
operator|+
literal|"'"
operator|+
name|matchedString
operator|+
literal|"')"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|equals
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|element
parameter_list|,
name|String
name|matchedString
parameter_list|)
block|{
name|String
name|finalElement
init|=
operator|(
name|parent
operator|!=
literal|null
operator|)
condition|?
name|parent
else|:
literal|""
decl_stmt|;
name|finalElement
operator|+=
name|element
expr_stmt|;
return|return
name|equals
argument_list|(
name|finalElement
argument_list|,
name|matchedString
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|equals
parameter_list|(
name|String
name|axis
parameter_list|,
name|String
name|matchedString
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|axis
operator|+
literal|"=="
operator|+
literal|"'"
operator|+
name|matchedString
operator|+
literal|"'"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

