begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|tools
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|MultipleFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|RunAfterSeleniumFailures
extends|extends
name|Statement
block|{
specifier|private
specifier|final
name|Statement
name|next
decl_stmt|;
specifier|private
specifier|final
name|Object
name|target
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|afterFailures
decl_stmt|;
specifier|public
name|RunAfterSeleniumFailures
parameter_list|(
name|Statement
name|next
parameter_list|,
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|afterFailures
parameter_list|,
name|Object
name|target
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|afterFailures
operator|=
name|afterFailures
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|errors
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|next
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|FrameworkMethod
name|each
range|:
name|afterFailures
control|)
block|{
try|try
block|{
name|each
operator|.
name|invokeExplosively
argument_list|(
name|target
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|t2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|MultipleFailureException
argument_list|(
name|errors
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

