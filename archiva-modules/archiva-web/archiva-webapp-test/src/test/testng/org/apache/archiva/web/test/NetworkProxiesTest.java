begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Test
argument_list|(
name|groups
operator|=
block|{
literal|"networkproxies"
block|}
argument_list|,
name|dependsOnMethods
operator|=
block|{
literal|"testWithCorrectUsernamePassword"
block|}
argument_list|)
specifier|public
class|class
name|NetworkProxiesTest
extends|extends
name|AbstractRepositoryTest
block|{
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testDeleteRepositoryGroup"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxyNullValues
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter an identifier."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter a protocol."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter a host."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxyNullValues"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxyNullIdentifier
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|""
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter an identifier."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxyNullIdentifier"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxyNullProtocol
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|""
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter a protocol."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxyNullProtocol"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesNullHostname
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"http"
argument_list|,
literal|""
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter a host."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesNullHostname"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesInvalidValues
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"<> \\/~+[ ]'\""
argument_list|,
literal|"<> ~+[ ]'\""
argument_list|,
literal|"<> ~+[ ]'\""
argument_list|,
literal|"0"
argument_list|,
literal|"<> ~+[ ]'\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Proxy id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Protocol must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), dots(.), colons(:), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Host must only contain alphanumeric characters, equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Port needs to be larger than 1"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username must only contain alphanumeric characters, at's(@), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesInvalidValues"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesInvalidIdentifier
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"<> \\/~+[ ]'\""
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Proxy id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesInvalidIdentifier"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesInvalidProtocol
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"<> ~+[ ]'\""
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Protocol must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), dots(.), colons(:), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesInvalidProtocol"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesInvalidHostname
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"http"
argument_list|,
literal|"<> ~+[ ]'\""
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Host must only contain alphanumeric characters, equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesInvalidHostname"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesInvalidPort
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"0"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Port needs to be larger than 1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesInvalidPort"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesInvalidUsername
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|"<> ~+[ ]'\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username must only contain alphanumeric characters, at's(@), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesInvalidUsername"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxiesValidValues
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Administration - Network Proxies"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"testing123"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testAddNetworkProxiesValidValues"
block|}
argument_list|)
specifier|public
name|void
name|testEditNetworkProxy
parameter_list|()
block|{
name|editNetworkProxies
argument_list|(
literal|"proxy.host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Administration - Network Proxies"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testEditNetworkProxy"
block|}
argument_list|)
specifier|public
name|void
name|testDeleteNetworkProxy
parameter_list|()
block|{
name|deleteNetworkProxy
argument_list|()
expr_stmt|;
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Administration - Network Proxies"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"There are no network proxies configured yet."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|dependsOnMethods
operator|=
block|{
literal|"testDeleteNetworkProxy"
block|}
argument_list|)
specifier|public
name|void
name|testAddNetworkProxyAfterDelete
parameter_list|()
block|{
name|addNetworkProxy
argument_list|(
literal|"testing123"
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"8080"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Administration - Network Proxies"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"testing123"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

