begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractArchivaTest
extends|extends
name|AbstractSeleniumTest
block|{
specifier|public
name|void
name|assertCreateAdmin
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Create Admin User"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username"
argument_list|)
expr_stmt|;
name|assertFieldValue
argument_list|(
literal|"admin"
argument_list|,
literal|"user.username"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Full Name*"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.fullName"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Email Address*"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.email"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Password*"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.password"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Confirm Password*"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.confirmPassword"
argument_list|)
expr_stmt|;
name|assertButtonWithValuePresent
argument_list|(
literal|"Create Admin"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitAdminData
parameter_list|(
name|String
name|fullname
parameter_list|,
name|String
name|email
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|setFieldValue
argument_list|(
literal|"user.fullName"
argument_list|,
name|fullname
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.email"
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.confirmPassword"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|submit
argument_list|()
expr_stmt|;
block|}
comment|//Go to Login Page
specifier|public
name|void
name|goToLoginPage
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|clickLinkWithText
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
name|assertLoginPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|submitUserData
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|rememberme
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|setFieldValue
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberme
condition|)
block|{
name|checkField
argument_list|(
literal|"rememberMe"
argument_list|)
expr_stmt|;
block|}
name|submit
argument_list|()
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|assertAuthenticatedPage
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertLoginPage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertLoginPage
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Login Page"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Register"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Password"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Remember Me"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"rememberMe"
argument_list|)
expr_stmt|;
name|assertButtonWithValuePresent
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
name|assertButtonWithValuePresent
argument_list|(
literal|"Cancel"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Need an Account? Register!"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Forgot your Password? Request a password reset."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertAuthenticatedPage
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|assertTextPresent
argument_list|(
literal|"Current User"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Edit Details"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Logout"
argument_list|)
expr_stmt|;
name|assertTextNotPresent
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
comment|/*	//Find Artifact 	public void goToFindArtifactPage() 	{ 		clickLinkWithText( "Find Artifact" ); 		assertFindArtifactPage(); 	} 	 	public void assertFindArtifactPage() 	{ 		//assertPage( "Apache Archiva \\ Find Artifact" ); 		assertTextPresent( "Find Artifact" ); 		assertTextPresent( "Search For" ); 		assertElementPresent( "f" ); 		assertTextPresent( "Checksum" ); 		assertElementPresent( "q" ); 		assertButtonWithValuePresent( "Search" ); 		assertTextPresent( "This allows you to search the repository using the checksum of an artifact that you are trying to identify. You can either specify the checksum to look for directly, or scan a local artifact file. " ); 		assertTextPresent( "TÃ¯ scan a local file, select the file you would like to locate in the remote repository. Ãhe entire file will not  be uploaded$to the server. See the progress bar below for progress of locally creating a checksum that is uploaded to the server ifter you hit "); 	} 	  	//User Management 	public void goToUserManagementPage() 	{ 		clickLinkWithText( "User Management" ); 		assertUserManagementPage(); 	} 	 	public void assertUserManagementPage() 	{ 		//assertPage( "Apache Archiva \\ [Admin] User List" ); 		assertTextPresent( "[Admin] List of Users in Role: Any" ); 		assertTextPresent( "Navigation" ); 		assertImgWithAlt( "First" ); 		assertImgWithAlt( "Prev" ); 		assertImgWithAlt( "Next" ); 		assertImgWithAlt( "Last" ); 		assertTextPresent( "Display Rows" ); 		assertTextPresent( "Username" ); 		assertTextPresent( "Full Name" ); 		assertTextPresent( "Email" ); 		assertTextPresent( "Permanent" ); 		assertTextPresent( "Validated" ); 		assertTextPresent( "Locked" ); 		assertTextPresent( "Tasks" ); 		assertTextPresent( "Tools" ); 		assertTextPresent( "Tasks" ); 		assertTextPresent( "The following tools are available for administrators to manipulate the user list." ); 		assertButtonWithValuePresent( "Create New User" ); 		assertButtonWithValuePresent( "Show Users In Role" ); 		assertElementPresent( "roleName" ); 		assertTextPresent( "Reports" ); 		assertTextPresent( "Name" ); 		assertTextPresent( "Types" ); 		assertTextPresent( "User List" ); 		assertTextPresent( "Roles Matrix" ); 	} 	 	//User Role 	public void goToUserRolesPage() 	{ 		clickLinkWithText( "User Roles" ); 		assertUserRolesPage(); 	} 	 	public void assertUserRolesPage() 	{ 		//assertPage( "Apache Archiva \\ [Admin] Role List" ); 		assertTextPresent( "[Admin] Role List" ); 		assertTextPresent( "Role Name" ); 		assertTextPresent( "Role Description" ); 		String userRoles = "Guest,Registered User,System Administrator,User Administrator,Global Repository Observer,Archiva Guest,Archiva System Administrator,Global Repository Manager,Archiva User Administrator,Repository Observer - internal,Repository Manager - internal,Repository Observer - snapshots,Repository Manager - snapshots"; 		String[] arrayRole = userRoles.split( "," ); 		for ( String userroles : arrayRole ) 			assertLinkPresent( userroles ); 	} 	 	//Appearance 	public void goToAppearancePage() 	{ 		clickLinkWithText( "Appearance" ); 		assertAppearancePage(); 	} 	 	public void assertAppearancePage() 	{ 		//assertPage( "Apache Archiva \\ Configure Appearance" ); 		String appearance = "Appearance,Organization Details,The logo in the top right of the screen is controlled by the following settings.,Organizations Information,Name,URL,Logo URL"; 		String[] arrayAppearance = appearance.split( "," ); 		for ( String appear : arrayAppearance ) 			assertTextPresent( appear ); 		assertLinkPresent( "Edit" ); 		assertLinkPresent( "Change your appearance" ); 	} 	 	//Upload Artifact 	public void goToUploadArtifactPage() 	{ 		clickLinkWithText( "Upload Artifact" ); 		assertUploadArtifactPage(); 	} 	 	public void assertUploadArtifactPage() 	{ 		//assertPage( "Apache Archiva \\ Upload Artifact" ); 		String uploadArtifact = "Upload Artifact,Group Id*,Artifact Id*,Version*,Packaging*,Classifier,Generate Maven 2 POM,Artifact File*,POM File,Repository Id"; 		String[] arrayUploadArtifact = uploadArtifact.split( "," ); 		for ( String uploadartifact : arrayUploadArtifact ) 			assertTextPresent( uploadartifact ); 		String uploadElements = "groupId,artifactId,version,packaging,classifier,generatePom,artifact,pom,repositoryId"; 		String[] arrayUploadElements = uploadElements.split( "," ); 		for ( String uploadelements : arrayUploadElements ) 			assertElementPresent( uploadelements ); 		assertButtonWithValuePresent( "Submit" ); 	} */
block|}
end_class

end_unit

