begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
operator|.
name|AbstractArchivaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test all actions affected with XSS security issue.  */
end_comment

begin_class
annotation|@
name|Test
argument_list|(
name|groups
operator|=
block|{
literal|"xss"
block|}
argument_list|,
name|dependsOnMethods
operator|=
block|{
literal|"testWithCorrectUsernamePassword"
block|}
argument_list|,
name|sequential
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|XSSSecurityTest
extends|extends
name|AbstractArchivaTest
block|{
specifier|public
name|void
name|testDeleteArtifactImmunityToURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/deleteArtifact!doDelete.action?groupId=\"/>1<script>alert('xss')</script>&artifactId=\"/>1<script>alert('xss')</script>&version=\"/>1<script>alert('xss')</script>&repositoryId=\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertDeleteArtifactPage
argument_list|()
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Invalid version."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"User is not authorized to delete artifacts in repository '\"/>1<script>alert('xss')</script>'."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Group id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Artifact id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Repository id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='deleteArtifact_groupId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='deleteArtifact_artifactId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='deleteArtifact_version']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//select[@id='deleteArtifact_repositoryId']"
argument_list|,
literal|"internal"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteArtifactImmunityToEncodedURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/deleteArtifact!doDelete.action?groupId=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&artifactId=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&version=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&repositoryId=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E"
argument_list|)
expr_stmt|;
name|assertDeleteArtifactPage
argument_list|()
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Invalid version."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"User is not authorized to delete artifacts in repository '\"/>1<script>alert('xss')</script>'."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Group id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Artifact id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Repository id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='deleteArtifact_groupId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='deleteArtifact_artifactId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='deleteArtifact_version']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//select[@id='deleteArtifact_repositoryId']"
argument_list|,
literal|"internal"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEditAppearanceImmunityToURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/configureAppearance.action?organisationName=<script>alert('xss')</script>&organisationUrl=<script>alert('xss')</script>&organisationLogo=<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertAppearancePage
argument_list|()
expr_stmt|;
name|assertXpathCount
argument_list|(
literal|"//td[text()=\"<script>alert('xss')</script>\"]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXpathCount
argument_list|(
literal|"//code[text()=\"<script>alert('xss')</script>\"]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEditAppearanceImmunityToEncodedURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/configureAppearance.action?organisationName=%3Cscript%3Ealert('xss')%3C%2Fscript%3E&organisationUrl=%3Cscript%3Ealert('xss')%3C%2Fscript%3E&organisationLogo=%3Cscript%3Ealert('xss')%3C%2Fscript%3E"
argument_list|)
expr_stmt|;
name|assertAppearancePage
argument_list|()
expr_stmt|;
name|assertXpathCount
argument_list|(
literal|"//td[text()=\"<script>alert('xss')</script>\"]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXpathCount
argument_list|(
literal|"//code[text()=\"<script>alert('xss')</script>\"]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddLegacyArtifactImmunityToURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/addLegacyArtifactPath!commit.action?legacyArtifactPath.path=\"/>1<script>alert('xss')</script>&groupId=\"/>1<script>alert('xss')</script>&artifactId=\"/>1<script>alert('xss')</script>&version=\"/>1<script>alert('xss')</script>&classifier=\"/>1<script>alert('xss')</script>&type=\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertAddLegacyArtifactPathPage
argument_list|()
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Legacy path must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Group id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Artifact id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Version must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Classifier must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Type must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_legacyArtifactPath_path']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_artifactId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_version']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_groupId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_classifier']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_type']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddLegacyArtifactImmunityToEncodedURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/addLegacyArtifactPath!commit.action?legacyArtifactPath.path=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&groupId=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&artifactId=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&version=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&classifier=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E&type=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E"
argument_list|)
expr_stmt|;
name|assertAddLegacyArtifactPathPage
argument_list|()
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Legacy path must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Group id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Artifact id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Version must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Classifier must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Type must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_legacyArtifactPath_path']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_artifactId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_version']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_groupId']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_classifier']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertElementValue
argument_list|(
literal|"//input[@id='addLegacyArtifactPath_type']"
argument_list|,
literal|"\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteNetworkProxyImmunityToURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/deleteNetworkProxy!confirm.action?proxyid=\"/>1<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Security Alert - Invalid Token Found"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Possible CSRF attack detected! Invalid token found in the request."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteNetworkProxyImmunityToEncodedURLCrossSiteScripting
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/deleteNetworkProxy!confirm.action?proxyid=%22%2F%3E1%3Cscript%3Ealert('xss')%3C%2Fscript%3E"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Security Alert - Invalid Token Found"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Possible CSRF attack detected! Invalid token found in the request."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddManagedRepositoryImmunityToInputFieldCrossSiteScripting
parameter_list|()
block|{
name|goToRepositoriesPage
argument_list|()
expr_stmt|;
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
literal|"/archiva/admin/addRepository.action"
argument_list|)
expr_stmt|;
name|addManagedRepository
argument_list|(
literal|"test\"><script>alert('xss')</script>"
argument_list|,
literal|"test\"><script>alert('xss')</script>"
argument_list|,
literal|"test\"><script>alert('xss')</script>"
argument_list|,
literal|"test\"><script>alert('xss')</script>"
argument_list|,
literal|"Maven 2.x Repository"
argument_list|,
literal|""
argument_list|,
literal|"-1"
argument_list|,
literal|"101"
argument_list|)
expr_stmt|;
comment|// xss inputs are blocked by validation.
name|assertTextPresent
argument_list|(
literal|"Identifier must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Directory must only contain alphanumeric characters, equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Repository Name must only contain alphanumeric characters, white-spaces(' '), forward-slashes(/), open-parenthesis('('), close-parenthesis(')'), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Index directory must only contain alphanumeric characters, equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Repository Purge By Retention Count needs to be between 1 and 100."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Repository Purge By Days Older Than needs to be larger than 0."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Invalid cron expression."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEditAppearanceImmunityToInputFieldCrossSiteScripting
parameter_list|()
block|{
name|goToAppearancePage
argument_list|()
expr_stmt|;
name|clickLinkWithText
argument_list|(
literal|"Edit"
argument_list|)
expr_stmt|;
name|addEditAppearance
argument_list|(
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// xss inputs are blocked by validation.
name|assertTextPresent
argument_list|(
literal|"Organisation name must only contain alphanumeric characters, white-spaces(' '), equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"You must enter a URL"
argument_list|)
expr_stmt|;
name|assertXpathCount
argument_list|(
literal|"//span[@class='errorMessage' and text()='You must enter a URL']"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEditAppearanceImmunityToCrossSiteScriptingRendering
parameter_list|()
block|{
name|goToAppearancePage
argument_list|()
expr_stmt|;
name|clickLinkWithText
argument_list|(
literal|"Edit"
argument_list|)
expr_stmt|;
name|addEditAppearance
argument_list|(
literal|"xss"
argument_list|,
literal|"http://\">test<script>alert(\"xss\")</script>"
argument_list|,
literal|"http://\">test<script>alert(\"xss\")</script>"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// escaped html/url prevents cross-site scripting exploits
name|assertXpathCount
argument_list|(
literal|"//td[text()=\"xss\"]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXpathCount
argument_list|(
literal|"//code[text()='http://\">test<script>alert(\"xss\")</script>']"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddLegacyArtifactPathImmunityToInputFieldCrossSiteScripting
parameter_list|()
block|{
name|goToLegacySupportPage
argument_list|()
expr_stmt|;
name|clickLinkWithText
argument_list|(
literal|"Add"
argument_list|)
expr_stmt|;
name|addLegacyArtifactPath
argument_list|(
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|)
expr_stmt|;
comment|// xss inputs are blocked by validation.
name|assertTextPresent
argument_list|(
literal|"Legacy path must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Group id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Artifact id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Version must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Classifier must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Type must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddNetworkProxyImmunityToInputFieldCrossSiteScripting
parameter_list|()
block|{
name|goToNetworkProxiesPage
argument_list|()
expr_stmt|;
name|addNetworkProxy
argument_list|(
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|"test<script>alert('xss')</script>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// xss inputs are blocked by validation.
name|assertTextPresent
argument_list|(
literal|"Proxy id must only contain alphanumeric characters, underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Protocol must only contain alphanumeric characters, forward-slashes(/), back-slashes(\\), dots(.), colons(:), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Host must only contain alphanumeric characters, equals(=), question-marks(?), exclamation-points(!), ampersands(&), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), colons(:), tildes(~), and dashes(-)."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Invalid field value for field \"proxy.port\"."
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username must only contain alphanumeric characters, at's(@), forward-slashes(/), back-slashes(\\), underscores(_), dots(.), and dashes(-)."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

