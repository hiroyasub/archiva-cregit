begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
operator|.
name|AbstractArchivaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|SAXBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|output
operator|.
name|XMLOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|commandline
operator|.
name|ExecutableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|commandline
operator|.
name|DefaultExecutableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|Commandline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|StreamConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|WriterStreamConsumer
import|;
end_import

begin_class
annotation|@
name|Test
argument_list|(
name|groups
operator|=
block|{
literal|"about"
block|}
argument_list|,
name|alwaysRun
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|ArchivaAdminTest
extends|extends
name|AbstractArchivaTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PATH_TO_ARCHIVA_XML
init|=
literal|"/target/appserver-base/conf/archiva.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH_TO_SETTINGS_XML
init|=
literal|"/target/local-repo/settings.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NEW_LOCAL_REPO_VALUE
init|=
literal|"/target/local-repo"
decl_stmt|;
annotation|@
name|BeforeSuite
specifier|public
name|void
name|initializeArchiva
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|open
argument_list|()
expr_stmt|;
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|String
name|title
init|=
name|getSelenium
argument_list|()
operator|.
name|getTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|equals
argument_list|(
literal|"Apache Archiva \\ Create Admin User"
argument_list|)
condition|)
block|{
name|assertCreateAdmin
argument_list|()
expr_stmt|;
name|String
name|fullname
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_FULLNAME"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_USERNAME"
argument_list|)
decl_stmt|;
name|String
name|mail
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_EMAIL"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_PASSWORD"
argument_list|)
decl_stmt|;
name|submitAdminData
argument_list|(
name|fullname
argument_list|,
name|mail
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|assertAuthenticatedPage
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|submit
argument_list|()
expr_stmt|;
name|clickLinkWithText
argument_list|(
literal|"Logout"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeTest
argument_list|(
name|groups
operator|=
block|{
literal|"about"
block|}
argument_list|)
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|open
argument_list|()
expr_stmt|;
name|String
name|newValue
init|=
name|getBasedir
argument_list|()
operator|+
name|NEW_LOCAL_REPO_VALUE
decl_stmt|;
name|updateXml
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
name|PATH_TO_ARCHIVA_XML
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|updateXml
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
name|PATH_TO_SETTINGS_XML
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Update localRepository element value      *      * @param f      * @param newValue      * @throws Exception      */
specifier|private
name|void
name|updateXml
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|newValue
parameter_list|)
throws|throws
name|Exception
block|{
name|SAXBuilder
name|builder
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|builder
operator|.
name|build
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Element
name|localRepository
init|=
operator|(
name|Element
operator|)
name|XPath
operator|.
name|newInstance
argument_list|(
literal|"./"
operator|+
literal|"localRepository"
argument_list|)
operator|.
name|selectSingleNode
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
argument_list|)
decl_stmt|;
name|localRepository
operator|.
name|setText
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
comment|// re-write xml file
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|XMLOutputter
name|output
init|=
operator|new
name|XMLOutputter
argument_list|()
decl_stmt|;
name|output
operator|.
name|output
argument_list|(
name|document
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
comment|/*private void clickRepositories()     {     	goToLoginPage();     	submitLoginPage( getAdminUsername() , getAdminPassword() );     	clickLinkWithText( "Repositories" );     	assertPage( "Apache Archiva \\ Administration" );     	assertTextPresent( "Administration - Repositories" );     }          private void removedManagedRepository( String id)     {     	clickRepositories();     	clickLinkWithLocator( "//a[contains(@href, '/admin/confirmDeleteRepository.action?repoid=" + id + "')]" );     	clickButtonWithValue( "Delete Configuration and Contents" );     }*/
specifier|private
name|int
name|executeMaven
parameter_list|(
name|String
name|workingDir
parameter_list|,
name|File
name|outputFile
parameter_list|)
throws|throws
name|Exception
block|{
name|ExecutableResolver
name|executableResolver
init|=
operator|new
name|DefaultExecutableResolver
argument_list|()
decl_stmt|;
name|String
name|actualExecutable
init|=
literal|"mvn"
decl_stmt|;
name|File
name|workingDirectory
init|=
operator|new
name|File
argument_list|(
name|workingDir
argument_list|)
decl_stmt|;
name|List
name|path
init|=
name|executableResolver
operator|.
name|getDefaultPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
name|File
name|e
init|=
name|executableResolver
operator|.
name|findExecutable
argument_list|(
literal|"mvn"
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|actualExecutable
operator|=
name|e
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|File
name|actualExecutableFile
init|=
operator|new
name|File
argument_list|(
name|actualExecutable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|actualExecutableFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|actualExecutable
operator|=
literal|"mvn"
expr_stmt|;
block|}
comment|// Set command line
name|Commandline
name|cmd
init|=
operator|new
name|Commandline
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|addSystemEnvironment
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|addEnvironment
argument_list|(
literal|"MAVEN_TERMINATE_CMD"
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setExecutable
argument_list|(
name|actualExecutable
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setWorkingDirectory
argument_list|(
name|workingDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|createArgument
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"clean"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|createArgument
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"install"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|createArgument
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"-s"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|createArgument
argument_list|()
operator|.
name|setValue
argument_list|(
name|getBasedir
argument_list|()
operator|+
literal|"/target/local-repo/settings.xml"
argument_list|)
expr_stmt|;
comment|// Excute command
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|outputFile
argument_list|)
decl_stmt|;
name|StreamConsumer
name|consumer
init|=
operator|new
name|WriterStreamConsumer
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|CommandLineUtils
operator|.
name|executeCommandLine
argument_list|(
name|cmd
argument_list|,
name|consumer
argument_list|,
name|consumer
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|exitCode
return|;
block|}
comment|/*	public void testBadDependency() 	    throws Exception 	{ 	    File outputFile = new File( getBasedir(), "/target/projects/bad-dependency/bad-dependency.log" ); 	    int exitCode = executeMaven( getBasedir() + "/target/projects/bad-dependency", outputFile ); 	 	    Assert.assertEquals( 1, exitCode ); 	 	    File f = new File( getBasedir(), 	                       "/target/local-repo/org/apache/maven/archiva/web/test/foo-bar/1.0-SNAPSHOT/foo-bar-1.0-SNAPSHOT.jar" ); 	    Assert.assertTrue( !f.exists() ); 	 	    BufferedReader reader = new BufferedReader( new FileReader( outputFile ) ); 	    String str; 	    boolean foundSnapshot = false, foundBadDep = false; 	 	    while ( ( str = reader.readLine() ) != null ) 	    { 	        //System.out.println( str ); 	        if ( str.indexOf( 	            "mvn install:install-file -DgroupId=org.apache.maven.archiva.web.test -DartifactId=foo-bar" ) != -1 ) 	        { 	            foundSnapshot = true; 	        } 	        else if ( str.indexOf( 	            "mvn install:install-file -DgroupId=org.apache.maven.archiva.web.test -DartifactId=bad-dependency" ) != 	            -1 ) 	        { 	            foundBadDep = true; 	        } 	    } 	 	    reader.close(); 	     	    Assert.assertTrue( foundSnapshot ); 	    Assert.assertTrue( foundBadDep ); 	}*/
specifier|public
name|void
name|displayLandingPage
parameter_list|()
block|{
name|getSelenium
argument_list|()
operator|.
name|open
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|getSelenium
argument_list|()
operator|.
name|waitForPageToLoad
argument_list|(
name|maxWaitTimeInMs
argument_list|)
expr_stmt|;
name|assertPage
argument_list|(
literal|"Apache Archiva \\ Quick Search"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|AfterTest
argument_list|(
name|groups
operator|=
block|{
literal|"about"
block|}
argument_list|)
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

