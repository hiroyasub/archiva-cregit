begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|listener
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
operator|.
name|AbstractSeleniumTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|TestListenerAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|selenium
operator|.
name|Selenium
import|;
end_import

begin_class
specifier|public
class|class
name|CaptureScreenShotsListener
extends|extends
name|TestListenerAdapter
block|{
annotation|@
name|Override
specifier|public
name|void
name|onTestSkipped
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|tr
operator|.
name|getName
argument_list|()
operator|+
literal|" -> Skipped"
argument_list|)
expr_stmt|;
name|super
operator|.
name|onTestSkipped
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTestFailure
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|captureError
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|tr
operator|.
name|getName
argument_list|()
operator|+
literal|" -> Failed"
argument_list|)
expr_stmt|;
name|super
operator|.
name|onTestFailure
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTestSuccess
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|tr
operator|.
name|getName
argument_list|()
operator|+
literal|" -> Success"
argument_list|)
expr_stmt|;
name|super
operator|.
name|onTestFailure
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|captureError
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy.MM.dd-HH_mm_ss"
argument_list|)
decl_stmt|;
name|String
name|time
init|=
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|targetPath
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"screenshots"
argument_list|)
decl_stmt|;
name|StackTraceElement
name|stackTrace
index|[]
init|=
name|tr
operator|.
name|getThrowable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|String
name|cName
init|=
name|tr
operator|.
name|getTestClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getStackTraceIndexOfCallingClass
argument_list|(
name|cName
argument_list|,
name|stackTrace
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
name|stackTrace
index|[
name|index
index|]
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|int
name|lNumber
init|=
name|stackTrace
index|[
name|index
index|]
operator|.
name|getLineNumber
argument_list|()
decl_stmt|;
name|String
name|lineNumber
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|lNumber
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|cName
operator|.
name|substring
argument_list|(
name|cName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|targetPath
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Selenium
name|selenium
init|=
name|AbstractSeleniumTest
operator|.
name|getSelenium
argument_list|()
decl_stmt|;
name|String
name|fileBaseName
init|=
name|methodName
operator|+
literal|"_"
operator|+
name|className
operator|+
literal|".java_"
operator|+
name|lineNumber
operator|+
literal|"-"
operator|+
name|time
decl_stmt|;
try|try
block|{
name|selenium
operator|.
name|windowMaximize
argument_list|()
expr_stmt|;
name|File
name|fileName
init|=
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|fileBaseName
operator|+
literal|".png"
argument_list|)
decl_stmt|;
name|selenium
operator|.
name|captureEntirePageScreenshot
argument_list|(
name|fileName
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"background=#FFFFFF"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error when take screenshot for test "
operator|+
name|tr
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|fileName
init|=
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|fileBaseName
operator|+
literal|".html"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|fileName
argument_list|,
name|selenium
operator|.
name|getHtmlSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|getStackTraceIndexOfCallingClass
parameter_list|(
name|String
name|nameOfClass
parameter_list|,
name|StackTraceElement
name|stackTrace
index|[]
parameter_list|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|String
name|className
init|=
name|stackTrace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|match
operator|=
name|Pattern
operator|.
name|matches
argument_list|(
name|nameOfClass
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|match
operator|==
literal|false
condition|)
do|;
name|i
operator|--
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
end_class

end_unit

