begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|tools
operator|.
name|ArchivaSeleniumExecutionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|tools
operator|.
name|WebdriverUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|htmlunit
operator|.
name|HtmlUnitDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|interactions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|support
operator|.
name|ui
operator|.
name|ExpectedConditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|support
operator|.
name|ui
operator|.
name|FluentWait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|support
operator|.
name|ui
operator|.
name|Select
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|support
operator|.
name|ui
operator|.
name|WebDriverWait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:evenisse@apache.org">Emmanuel Venisse</a>  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSeleniumTest
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ArchivaSeleniumExecutionRule
name|archivaSeleniumExecutionRule
init|=
operator|new
name|ArchivaSeleniumExecutionRule
argument_list|()
decl_stmt|;
specifier|public
name|String
name|browser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"browser"
argument_list|)
decl_stmt|;
specifier|public
name|String
name|baseUrl
init|=
literal|"http://localhost:"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"container.http.port"
argument_list|)
operator|+
literal|"/archiva/index.html?request_lang=en"
decl_stmt|;
specifier|public
name|int
name|maxWaitTimeInMs
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"maxWaitTimeInMs"
argument_list|)
decl_stmt|;
specifier|public
name|String
name|seleniumHost
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"seleniumHost"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
specifier|public
name|int
name|seleniumPort
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"seleniumPort"
argument_list|,
literal|4444
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|remoteSelenium
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"seleniumRemote"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|WebDriver
name|webDriver
init|=
literal|null
decl_stmt|;
specifier|public
name|Properties
name|p
decl_stmt|;
comment|/**      * this method is called by the Rule before executing a test      *      * @throws Exception      */
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|Exception
block|{
name|p
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|p
operator|.
name|load
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|baseUrl
operator|=
name|WebdriverUtility
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/index.html?request_lang=en"
expr_stmt|;
name|open
argument_list|(
name|baseUrl
argument_list|,
name|browser
argument_list|,
name|seleniumHost
argument_list|,
name|seleniumPort
argument_list|,
name|maxWaitTimeInMs
argument_list|,
name|remoteSelenium
argument_list|)
expr_stmt|;
name|assertAdminCreated
argument_list|()
expr_stmt|;
block|}
comment|/**      * this method is called by the Rule after executing a tests      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|getWebDriver
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initialize selenium      */
specifier|public
name|void
name|open
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|String
name|browser
parameter_list|,
name|String
name|seleniumHost
parameter_list|,
name|int
name|seleniumPort
parameter_list|,
name|int
name|maxWaitTimeInMs
parameter_list|,
name|boolean
name|remoteSelenium
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|getWebDriver
argument_list|()
operator|==
literal|null
condition|)
block|{
name|WebDriver
name|driver
init|=
name|WebdriverUtility
operator|.
name|newWebDriver
argument_list|(
name|browser
argument_list|,
name|seleniumHost
argument_list|,
name|seleniumPort
argument_list|,
name|remoteSelenium
argument_list|)
decl_stmt|;
comment|// selenium.start();
comment|// selenium.setTimeout( Integer.toString( maxWaitTimeInMs ) );
name|this
operator|.
name|webDriver
operator|=
name|driver
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// yes
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertAdminCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeArchiva
argument_list|(
name|baseUrl
argument_list|,
name|browser
argument_list|,
name|maxWaitTimeInMs
argument_list|,
name|seleniumHost
argument_list|,
name|seleniumPort
argument_list|,
name|remoteSelenium
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadPage
parameter_list|(
name|String
name|url
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|getWebDriver
argument_list|()
operator|.
name|get
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|wait
operator|.
name|until
argument_list|(
operator|new
name|Function
argument_list|<
name|WebDriver
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|apply
parameter_list|(
name|WebDriver
name|driver
parameter_list|)
block|{
return|return
operator|(
operator|(
name|JavascriptExecutor
operator|)
name|driver
operator|)
operator|.
name|executeScript
argument_list|(
literal|"return document.readyState"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"complete"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initializeArchiva
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|String
name|browser
parameter_list|,
name|int
name|maxWaitTimeInMs
parameter_list|,
name|String
name|seleniumHost
parameter_list|,
name|int
name|seleniumPort
parameter_list|,
name|boolean
name|remoteSelenium
parameter_list|)
throws|throws
name|Exception
block|{
name|open
argument_list|(
name|baseUrl
argument_list|,
name|browser
argument_list|,
name|seleniumHost
argument_list|,
name|seleniumPort
argument_list|,
name|maxWaitTimeInMs
argument_list|,
name|remoteSelenium
argument_list|)
expr_stmt|;
name|loadPage
argument_list|(
name|baseUrl
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|presenceOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"topbar-menu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wait
operator|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Boolean
name|found
init|=
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|or
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"create-admin-link-a"
argument_list|)
argument_list|)
argument_list|,
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
condition|)
block|{
name|WebElement
name|adminLink
init|=
name|getWebDriver
argument_list|()
operator|.
name|findElement
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"create-admin-link-a"
argument_list|)
argument_list|)
decl_stmt|;
name|WebElement
name|loginLink
init|=
name|getWebDriver
argument_list|()
operator|.
name|findElement
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
decl_stmt|;
comment|// if not admin user created create one
if|if
condition|(
name|adminLink
operator|!=
literal|null
operator|&&
name|adminLink
operator|.
name|isDisplayed
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isElementVisible
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isElementVisible
argument_list|(
literal|"register-link-a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// skygo need to set to true for passing is that work as expected ?
name|adminLink
operator|.
name|click
argument_list|()
expr_stmt|;
name|wait
operator|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"user-create"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCreateAdmin
argument_list|()
expr_stmt|;
name|String
name|fullname
init|=
name|getProperty
argument_list|(
literal|"ADMIN_FULLNAME"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|getAdminUsername
argument_list|()
decl_stmt|;
name|String
name|mail
init|=
name|getProperty
argument_list|(
literal|"ADMIN_EMAIL"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getProperty
argument_list|(
literal|"ADMIN_PASSWORD"
argument_list|)
decl_stmt|;
name|submitAdminData
argument_list|(
name|fullname
argument_list|,
name|mail
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|assertUserLoggedIn
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|clickLinkWithLocator
argument_list|(
literal|"logout-link-a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|loginLink
operator|!=
literal|null
operator|&&
name|loginLink
operator|.
name|isDisplayed
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isElementVisible
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isElementVisible
argument_list|(
literal|"register-link-a"
argument_list|)
argument_list|)
expr_stmt|;
name|login
argument_list|(
name|getAdminUsername
argument_list|()
argument_list|,
name|getAdminPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|WebDriver
name|getWebDriver
parameter_list|()
block|{
return|return
name|this
operator|.
name|webDriver
return|;
block|}
specifier|protected
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|p
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAdminUsername
parameter_list|()
block|{
name|String
name|adminUsername
init|=
name|getProperty
argument_list|(
literal|"ADMIN_USERNAME"
argument_list|)
decl_stmt|;
return|return
name|adminUsername
return|;
block|}
specifier|public
name|String
name|getAdminPassword
parameter_list|()
block|{
name|String
name|adminPassword
init|=
name|getProperty
argument_list|(
literal|"ADMIN_PASSWORD"
argument_list|)
decl_stmt|;
return|return
name|adminPassword
return|;
block|}
specifier|public
name|void
name|submitAdminData
parameter_list|(
name|String
name|fullname
parameter_list|,
name|String
name|email
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|setFieldValue
argument_list|(
literal|"fullname"
argument_list|,
name|fullname
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"email"
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"confirmPassword"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|clickButtonWithLocator
argument_list|(
literal|"user-create-form-register-button"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|login
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|login
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|true
argument_list|,
literal|"Login Page"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|login
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|valid
parameter_list|,
name|String
name|assertReturnPage
parameter_list|)
block|{
if|if
condition|(
name|isElementVisible
argument_list|(
literal|"login-link-a"
argument_list|)
condition|)
comment|//isElementPresent( "loginLink" ) )
block|{
name|goToLoginPage
argument_list|()
expr_stmt|;
name|submitLoginPage
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|false
argument_list|,
name|valid
argument_list|,
name|assertReturnPage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valid
condition|)
block|{
name|assertUserLoggedIn
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Go to Login Page
specifier|public
name|void
name|goToLoginPage
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Goto login page"
argument_list|)
expr_stmt|;
name|loadPage
argument_list|(
name|baseUrl
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|presenceOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"topbar-menu"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|or
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"logout-link"
argument_list|)
argument_list|)
argument_list|,
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// are we already logged in ?
if|if
condition|(
name|isElementVisible
argument_list|(
literal|"logout-link"
argument_list|)
condition|)
comment|//isElementPresent( "logoutLink" ) )
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Logging out "
argument_list|)
expr_stmt|;
comment|// so logout
name|clickLinkWithLocator
argument_list|(
literal|"logout-link-a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clickLinkWithLocator
argument_list|(
literal|"login-link-a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// This is a workaround for bug with HTMLUnit. The display attribute of the
comment|// login dialog is not changed via the click.
comment|// TODO: Check after changing jquery, bootstrap or htmlunit version
if|if
condition|(
name|getWebDriver
argument_list|()
operator|instanceof
name|HtmlUnitDriver
condition|)
block|{
operator|(
operator|(
name|JavascriptExecutor
operator|)
name|getWebDriver
argument_list|()
operator|)
operator|.
name|executeScript
argument_list|(
literal|"$('#modal-login').show();"
argument_list|)
expr_stmt|;
block|}
comment|// END OF WORKAROUND
name|wait
operator|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"modal-login"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLoginModal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|assertLoginModal
parameter_list|()
block|{
name|assertElementPresent
argument_list|(
literal|"user-login-form"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isElementVisible
argument_list|(
literal|"register-link"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isElementVisible
argument_list|(
literal|"user-login-form-username"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isElementVisible
argument_list|(
literal|"user-login-form-password"
argument_list|)
argument_list|)
expr_stmt|;
name|assertButtonWithIdPresent
argument_list|(
literal|"modal-login-ok"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isElementVisible
argument_list|(
literal|"modal-login-ok"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitLoginPage
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|submitLoginPage
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"Login Page"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitLoginPage
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|validUsernamePassword
parameter_list|)
block|{
name|submitLoginPage
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|false
argument_list|,
name|validUsernamePassword
argument_list|,
literal|"Login Page"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitLoginPage
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|rememberMe
parameter_list|,
name|boolean
name|validUsernamePassword
parameter_list|,
name|String
name|assertReturnPage
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Activating login form"
argument_list|)
expr_stmt|;
comment|// clickLinkWithLocator( "login-link-a", false);
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|WebElement
name|usernameField
init|=
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOf
argument_list|(
name|getWebDriver
argument_list|()
operator|.
name|findElement
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"user-login-form-username"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|wait
operator|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|WebElement
name|passwordField
init|=
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOf
argument_list|(
name|getWebDriver
argument_list|()
operator|.
name|findElement
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"user-login-form-password"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|wait
operator|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|WebElement
name|button
init|=
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|elementToBeClickable
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"modal-login-ok"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|usernameField
operator|.
name|sendKeys
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|passwordField
operator|.
name|sendKeys
argument_list|(
name|password
argument_list|)
expr_stmt|;
comment|/*         if ( rememberMe )         {             checkField( "rememberMe" );         }*/
name|button
operator|.
name|click
argument_list|()
expr_stmt|;
if|if
condition|(
name|validUsernamePassword
condition|)
block|{
name|assertUserLoggedIn
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
comment|/*         else         {             if ( "Login Page".equals( assertReturnPage ) )             {                 assertLoginPage();             }             else             {                 assertPage( assertReturnPage );             }         }*/
block|}
comment|// *******************************************************
comment|// Auxiliar methods. This method help us and simplify test.
comment|// *******************************************************
specifier|protected
name|void
name|assertUserLoggedIn
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|visibilityOfElementLocated
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"logout-link"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isElementVisible
argument_list|(
literal|"login-link"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isElementVisible
argument_list|(
literal|"register-link"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isElementVisible
argument_list|(
literal|"create-admin-link"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertCreateAdmin
parameter_list|()
block|{
name|assertElementPresent
argument_list|(
literal|"user-create"
argument_list|)
expr_stmt|;
name|assertFieldValue
argument_list|(
literal|"admin"
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"fullname"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"confirmPassword"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"email"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertFieldValue
parameter_list|(
name|String
name|fieldValue
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|assertElementPresent
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldValue
argument_list|,
name|findElement
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertPage
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|title
argument_list|,
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
comment|// Collapse spaces
return|return
name|getWebDriver
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[ \n\r]+"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
specifier|public
name|String
name|getHtmlContent
parameter_list|()
block|{
return|return
name|getWebDriver
argument_list|()
operator|.
name|getPageSource
argument_list|()
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
return|return
name|findElement
argument_list|(
name|locator
argument_list|)
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|void
name|assertTextPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' isn't present."
argument_list|,
name|getWebDriver
argument_list|()
operator|.
name|getPageSource
argument_list|()
operator|.
name|contains
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertTextNotPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' is present."
argument_list|,
name|isTextPresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertElementPresent
parameter_list|(
name|String
name|elementLocator
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|elementLocator
operator|+
literal|"' isn't present."
argument_list|,
name|isElementPresent
argument_list|(
name|elementLocator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertElementNotPresent
parameter_list|(
name|String
name|elementLocator
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|elementLocator
operator|+
literal|"' is present."
argument_list|,
name|isElementPresent
argument_list|(
name|elementLocator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLinkPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The link '"
operator|+
name|text
operator|+
literal|"' isn't present."
argument_list|,
name|isElementPresent
argument_list|(
literal|"//*[text()='"
operator|+
name|text
operator|+
literal|"']//ancestor::a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLinkNotPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The link('"
operator|+
name|text
operator|+
literal|"' is present."
argument_list|,
name|isElementPresent
argument_list|(
literal|"//*[text()='"
operator|+
name|text
operator|+
literal|"']//ancestor::a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLinkNotVisible
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The link('"
operator|+
name|text
operator|+
literal|"' is visible."
argument_list|,
name|isElementVisible
argument_list|(
literal|"//*[text()='"
operator|+
name|text
operator|+
literal|"']//ancestor::a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLinkVisible
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The link('"
operator|+
name|text
operator|+
literal|"' is not visible."
argument_list|,
name|isElementVisible
argument_list|(
literal|"//*[text()='"
operator|+
name|text
operator|+
literal|"']//ancestor::a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertImgWithAlt
parameter_list|(
name|String
name|alt
parameter_list|)
block|{
name|assertElementPresent
argument_list|(
literal|"/Â¯img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertImgWithAltAtRowCol
parameter_list|(
name|boolean
name|isALink
parameter_list|,
name|String
name|alt
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|String
name|locator
init|=
literal|"//tr["
operator|+
name|row
operator|+
literal|"]/td["
operator|+
name|column
operator|+
literal|"]/"
decl_stmt|;
name|locator
operator|+=
name|isALink
condition|?
literal|"a/"
else|:
literal|""
expr_stmt|;
name|locator
operator|+=
literal|"img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
expr_stmt|;
name|assertElementPresent
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertImgWithAltNotPresent
parameter_list|(
name|String
name|alt
parameter_list|)
block|{
name|assertElementNotPresent
argument_list|(
literal|"/Â¯img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTextPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|getWebDriver
argument_list|()
operator|.
name|getPageSource
argument_list|()
operator|.
name|contains
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isLinkPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|isElementPresent
argument_list|(
literal|"//*[text()='"
operator|+
name|text
operator|+
literal|"']//ancestor::a"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isElementPresent
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
try|try
block|{
return|return
name|findElement
argument_list|(
name|locator
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|isElementVisible
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
try|try
block|{
return|return
name|findElement
argument_list|(
name|locator
argument_list|)
operator|.
name|isDisplayed
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|waitPage
parameter_list|()
block|{
comment|// TODO define a smaller maxWaitTimeJsInMs for wait javascript response for browser side validation
comment|//getSelenium().w .wait( Long.parseLong( maxWaitTimeInMs ) );
comment|//getSelenium().waitForPageToLoad( maxWaitTimeInMs );
comment|// http://jira.openqa.org/browse/SRC-302
comment|// those hack looks to break some tests :-(
comment|// getSelenium().waitForCondition( "selenium.isElementPresent('document.body');", maxWaitTimeInMs );
comment|//getSelenium().waitForCondition( "selenium.isElementPresent('footer');", maxWaitTimeInMs );
comment|//getSelenium().waitForCondition( "selenium.browserbot.getCurrentWindow().document.getElementById('footer')",
comment|//                                maxWaitTimeInMs );
comment|// so the only hack is to not use a too small wait time
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|maxWaitTimeInMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"issue on Thread.sleep : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getFieldValue
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|findElement
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
return|;
block|}
specifier|public
name|void
name|selectValue
parameter_list|(
name|String
name|locator
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|WebElement
name|element
init|=
name|findElement
argument_list|(
name|locator
argument_list|)
decl_stmt|;
name|Select
name|select
init|=
operator|new
name|Select
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|select
operator|.
name|selectByValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WebElement
name|findElement
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
if|if
condition|(
name|locator
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|getWebDriver
argument_list|()
operator|.
name|findElement
argument_list|(
name|By
operator|.
name|xpath
argument_list|(
name|locator
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getWebDriver
argument_list|()
operator|.
name|findElement
argument_list|(
name|By
operator|.
name|id
argument_list|(
name|locator
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|submit
parameter_list|()
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//input[@type='submit']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertButtonWithValuePresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' button isn't present"
argument_list|,
name|isButtonWithValuePresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertButtonWithIdPresent
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"'Button with id ="
operator|+
name|id
operator|+
literal|"' isn't present"
argument_list|,
name|isButtonWithIdPresent
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertButtonWithValueNotPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' button is present"
argument_list|,
name|isButtonWithValuePresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isButtonWithValuePresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|isElementPresent
argument_list|(
literal|"//button[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
operator|||
name|isElementPresent
argument_list|(
literal|"//input[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isButtonWithIdPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|isElementPresent
argument_list|(
literal|"//button[@id='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
operator|||
name|isElementPresent
argument_list|(
literal|"//input[@id='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
return|;
block|}
specifier|public
name|void
name|clickButtonWithName
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//input[@name='"
operator|+
name|text
operator|+
literal|"']"
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickButtonWithValue
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|clickButtonWithValue
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickButtonWithValue
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|assertButtonWithValuePresent
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|isElementPresent
argument_list|(
literal|"//button[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
condition|)
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//button[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//input[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clickSubmitWithLocator
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickSubmitWithLocator
parameter_list|(
name|String
name|locator
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|locator
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickImgWithAlt
parameter_list|(
name|String
name|alt
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
literal|"//img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|clickLinkWithText
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithText
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
literal|"//*[text()='"
operator|+
name|text
operator|+
literal|"']//ancestor::a"
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithXPath
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|clickLinkWithXPath
argument_list|(
name|xpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithXPath
parameter_list|(
name|String
name|xpath
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|xpath
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithLocator
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|locator
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithLocator
parameter_list|(
name|String
name|locator
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|assertElementPresent
argument_list|(
name|locator
argument_list|)
expr_stmt|;
name|findElement
argument_list|(
name|locator
argument_list|)
operator|.
name|click
argument_list|()
expr_stmt|;
if|if
condition|(
name|wait
condition|)
block|{
name|waitPage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clickButtonWithLocator
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|clickButtonWithLocator
argument_list|(
name|locator
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickButtonWithLocator
parameter_list|(
name|String
name|locator
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|assertElementPresent
argument_list|(
name|locator
argument_list|)
expr_stmt|;
name|findElement
argument_list|(
name|locator
argument_list|)
operator|.
name|click
argument_list|()
expr_stmt|;
if|if
condition|(
name|wait
condition|)
block|{
name|waitPage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
parameter_list|<
name|V
parameter_list|>
name|V
name|tryClick
parameter_list|(
name|By
name|clickableLocator
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|WebDriver
argument_list|,
name|V
argument_list|>
name|conditions
parameter_list|,
name|String
name|message
parameter_list|,
name|int
name|attempts
parameter_list|,
name|int
name|maxWaitTimeInS
parameter_list|)
block|{
name|getWebDriver
argument_list|()
operator|.
name|manage
argument_list|()
operator|.
name|window
argument_list|()
operator|.
name|maximize
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|attempts
decl_stmt|;
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
name|maxWaitTimeInS
argument_list|)
decl_stmt|;
name|V
name|result
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|WebElement
name|el
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|el
operator|=
name|wait
operator|.
name|until
argument_list|(
name|ExpectedConditions
operator|.
name|elementToBeClickable
argument_list|(
name|clickableLocator
argument_list|)
argument_list|)
expr_stmt|;
name|Actions
name|actions
init|=
operator|new
name|Actions
argument_list|(
name|getWebDriver
argument_list|()
argument_list|)
decl_stmt|;
name|actions
operator|.
name|moveToElement
argument_list|(
name|el
argument_list|)
operator|.
name|click
argument_list|()
operator|.
name|perform
argument_list|()
expr_stmt|;
name|result
operator|=
name|wait
operator|.
name|until
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: {}, {}, {}"
argument_list|,
name|count
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
comment|// Elements may be stale and throw an exception, if the location is requested
try|try
block|{
name|Point
name|elLoc
init|=
name|el
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Location: x={} y={}"
argument_list|,
name|elLoc
operator|.
name|getX
argument_list|()
argument_list|,
name|elLoc
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e2
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Could not determine location"
argument_list|)
expr_stmt|;
block|}
block|}
name|ex
operator|=
name|e
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Executes click() on the WebElement<code>el</code> and waits for the conditions.      * If the condition is not fulfilled in<code>maxWaitTimeInS</code>, the click is executed again      * and waits again for the condition.      * After the number of attempts as given by the parameter an assertion error will be thrown, with      * the given<code>message</code>.      *      * If the click was successful the element is returned that was created by the condition.      *      * @param el The element where the click is executed      * @param conditions The conditions to wait for after the click      * @param message The assertion messages      * @param attempts Maximum number of click attempts      * @param maxWaitTimeInS The time in seconds to wait that the condition is fulfilled.      * @param<V> The return type      * @return      */
specifier|public
parameter_list|<
name|V
parameter_list|>
name|V
name|tryClick
parameter_list|(
name|WebElement
name|el
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|WebDriver
argument_list|,
name|V
argument_list|>
name|conditions
parameter_list|,
name|String
name|message
parameter_list|,
name|int
name|attempts
parameter_list|,
name|int
name|maxWaitTimeInS
parameter_list|)
block|{
name|int
name|count
init|=
name|attempts
decl_stmt|;
name|WebDriverWait
name|wait
init|=
operator|new
name|WebDriverWait
argument_list|(
name|getWebDriver
argument_list|()
argument_list|,
name|maxWaitTimeInS
argument_list|)
decl_stmt|;
name|V
name|result
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|<
name|attempts
condition|)
block|{
try|try
block|{
name|result
operator|=
name|conditions
operator|.
name|apply
argument_list|(
name|getWebDriver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|el
operator|.
name|click
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|=
name|wait
operator|.
name|until
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: {}, {}"
argument_list|,
name|count
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|e
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
parameter_list|<
name|V
parameter_list|>
name|V
name|tryClick
parameter_list|(
name|WebElement
name|el
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|WebDriver
argument_list|,
name|V
argument_list|>
name|conditions
parameter_list|,
name|String
name|message
parameter_list|,
name|int
name|attempts
parameter_list|)
block|{
return|return
name|tryClick
argument_list|(
name|el
argument_list|,
name|conditions
argument_list|,
name|message
argument_list|,
name|attempts
argument_list|,
literal|10
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|V
parameter_list|>
name|V
name|tryClick
parameter_list|(
name|WebElement
name|el
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|WebDriver
argument_list|,
name|V
argument_list|>
name|conditions
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|tryClick
argument_list|(
name|el
argument_list|,
name|conditions
argument_list|,
name|message
argument_list|,
literal|3
argument_list|)
return|;
block|}
specifier|public
name|void
name|setFieldValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldMap
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|fieldMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
name|entries
operator|.
name|next
argument_list|()
expr_stmt|;
name|setFieldValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|findElement
argument_list|(
name|fieldName
argument_list|)
operator|.
name|sendKeys
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkField
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|WebElement
name|element
init|=
name|findElement
argument_list|(
name|locator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|element
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|element
operator|.
name|click
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|uncheckField
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|WebElement
name|element
init|=
name|findElement
argument_list|(
name|locator
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|element
operator|.
name|click
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isChecked
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
return|return
name|findElement
argument_list|(
name|locator
argument_list|)
operator|.
name|isSelected
argument_list|()
return|;
block|}
specifier|public
name|void
name|assertIsChecked
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isChecked
argument_list|(
name|locator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertIsNotChecked
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isChecked
argument_list|(
name|locator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|captureScreenShotOnFailure
parameter_list|(
name|Throwable
name|failure
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy.MM.dd-HH_mm_ss"
argument_list|)
decl_stmt|;
name|String
name|time
init|=
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|targetPath
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"screenshots"
argument_list|)
decl_stmt|;
name|int
name|lineNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|stackTrace
range|:
name|failure
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
name|stackTrace
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|lineNumber
operator|=
name|stackTrace
operator|.
name|getLineNumber
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|targetPath
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|getWebDriver
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|fileBaseName
init|=
name|methodName
operator|+
literal|"_"
operator|+
name|className
operator|+
literal|".java_"
operator|+
name|lineNumber
operator|+
literal|"-"
operator|+
name|time
decl_stmt|;
name|File
name|fileName
init|=
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|fileBaseName
operator|+
literal|".png"
argument_list|)
decl_stmt|;
name|Path
name|screenshot
init|=
name|WebdriverUtility
operator|.
name|takeScreenShot
argument_list|(
name|fileName
operator|.
name|getName
argument_list|()
argument_list|,
name|getWebDriver
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fileName
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

