begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|tools
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|selenium
operator|.
name|Selenium
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|parent
operator|.
name|AbstractSeleniumTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|MethodRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaSeleniumExecutionRule
implements|implements
name|MethodRule
comment|//TestRule
block|{
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaSeleniumExecutionRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|FrameworkMethod
name|method
parameter_list|,
name|Object
name|target
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Test "
operator|+
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AbstractSeleniumTest
operator|)
name|target
operator|)
operator|.
name|open
argument_list|()
expr_stmt|;
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception thrown in Selenium test: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Method "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
operator|(
operator|(
name|AbstractSeleniumTest
operator|)
name|target
operator|)
operator|.
name|captureScreenShotOnFailure
argument_list|(
name|e
argument_list|,
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" see screenShot file:"
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
operator|(
operator|(
name|AbstractSeleniumTest
operator|)
name|target
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// no op
block|}
block|}
return|;
block|}
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
name|base
return|;
block|}
block|}
end_class

end_unit

