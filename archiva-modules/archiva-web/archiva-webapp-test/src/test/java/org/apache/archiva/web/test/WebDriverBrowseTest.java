begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|javascript
operator|.
name|background
operator|.
name|JavaScriptExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fluentlenium
operator|.
name|adapter
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fluentlenium
operator|.
name|configuration
operator|.
name|ConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fluentlenium
operator|.
name|configuration
operator|.
name|FluentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
operator|.
name|tools
operator|.
name|WebdriverUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fluentlenium
operator|.
name|adapter
operator|.
name|junit
operator|.
name|FluentTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fluentlenium
operator|.
name|core
operator|.
name|domain
operator|.
name|FluentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fluentlenium
operator|.
name|core
operator|.
name|domain
operator|.
name|FluentWebElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|By
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|JavascriptExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|WebDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|WebElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|htmlunit
operator|.
name|HtmlUnitDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|FluentConfiguration
argument_list|(
name|driverLifecycle
operator|=
name|ConfigurationProperties
operator|.
name|DriverLifecycle
operator|.
name|CLASS
argument_list|)
specifier|public
class|class
name|WebDriverBrowseTest
extends|extends
name|FluentTest
block|{
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebDriverBrowseTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|takeScreenShot
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Taking screenshot "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|WebdriverUtility
operator|.
name|takeScreenShot
argument_list|(
name|fileName
argument_list|,
name|getDriver
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|failed
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|takeScreenShot
argument_list|(
name|testName
operator|+
literal|".png"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canTakeScreenShot
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|setScreenshotMode
argument_list|(
name|TriggerMode
operator|.
name|AUTOMATIC_ON_FAIL
argument_list|)
expr_stmt|;
name|setDriverLifecycle
argument_list|(
name|DriverLifecycle
operator|.
name|CLASS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpletest
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|load
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
name|WebdriverUtility
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|baseUrl
operator|+
literal|"/index.html?request_lang=en"
decl_stmt|;
name|goTo
argument_list|(
name|url
argument_list|)
expr_stmt|;
comment|// wait until topbar-menu-container is feeded
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|untilPredicate
argument_list|(
parameter_list|(
name|fl
parameter_list|)
lambda|->
name|$
argument_list|(
literal|"#topbar-menu"
argument_list|)
operator|.
name|present
argument_list|()
argument_list|)
expr_stmt|;
name|FluentList
argument_list|<
name|FluentWebElement
argument_list|>
name|elements
init|=
name|find
argument_list|(
literal|"#create-admin-link-a"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
operator|&&
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|displayed
argument_list|()
condition|)
block|{
name|WebElement
name|webElement
init|=
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Create Admin User"
argument_list|,
name|webElement
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|webElement
operator|.
name|click
argument_list|()
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|untilPredicate
argument_list|(
parameter_list|(
name|fl
parameter_list|)
lambda|->
name|$
argument_list|(
literal|"#user-create"
argument_list|)
operator|.
name|present
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|find
argument_list|(
literal|"#username"
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|find
argument_list|(
literal|"#password"
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|find
argument_list|(
literal|"#confirmPassword"
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|find
argument_list|(
literal|"#email"
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|$
argument_list|(
literal|"#fullname"
argument_list|)
operator|.
name|fill
argument_list|()
operator|.
name|with
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_FULLNAME"
argument_list|)
argument_list|)
expr_stmt|;
name|$
argument_list|(
literal|"#email"
argument_list|)
operator|.
name|fill
argument_list|()
operator|.
name|with
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_EMAIL"
argument_list|)
argument_list|)
expr_stmt|;
name|$
argument_list|(
literal|"#password"
argument_list|)
operator|.
name|fill
argument_list|()
operator|.
name|with
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_PASSWORD"
argument_list|)
argument_list|)
expr_stmt|;
name|$
argument_list|(
literal|"#confirmPassword"
argument_list|)
operator|.
name|fill
argument_list|()
operator|.
name|with
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_PASSWORD"
argument_list|)
argument_list|)
expr_stmt|;
name|find
argument_list|(
literal|"#user-create-form-register-button"
argument_list|)
operator|.
name|click
argument_list|()
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|untilPredicate
argument_list|(
parameter_list|(
name|fl
parameter_list|)
lambda|->
name|$
argument_list|(
literal|"#logout-link"
argument_list|)
operator|.
name|present
argument_list|()
argument_list|)
expr_stmt|;
name|FluentList
argument_list|<
name|FluentWebElement
argument_list|>
name|elementss
init|=
name|find
argument_list|(
literal|"#menu-find-browse-a"
argument_list|)
decl_stmt|;
name|WebElement
name|webElsement
init|=
name|elementss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|webElsement
operator|.
name|click
argument_list|()
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|untilPredicate
argument_list|(
parameter_list|(
name|fl
parameter_list|)
lambda|->
name|$
argument_list|(
literal|"#main_browse_result"
argument_list|)
operator|.
name|present
argument_list|()
argument_list|)
expr_stmt|;
comment|// give me search page :( not  browse page
name|takeScreenShot
argument_list|(
literal|"search.png"
argument_list|)
expr_stmt|;
name|goTo
argument_list|(
name|baseUrl
operator|+
literal|"/index.html#browse?request_lang=en"
argument_list|)
expr_stmt|;
name|takeScreenShot
argument_list|(
literal|"browse.png"
argument_list|)
expr_stmt|;
comment|// give me a browse page
block|}
else|else
block|{
name|elements
operator|=
name|find
argument_list|(
name|By
operator|.
name|id
argument_list|(
literal|"login-link-a"
argument_list|)
argument_list|)
expr_stmt|;
name|WebElement
name|webElement
init|=
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
for|for
control|(
name|FluentWebElement
name|element
range|:
name|elements
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found login link: "
operator|+
name|element
operator|.
name|getElement
argument_list|()
operator|.
name|getTagName
argument_list|()
operator|+
literal|" "
operator|+
name|element
operator|.
name|getElement
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"innerText: "
operator|+
name|webElement
operator|.
name|getAttribute
argument_list|(
literal|"innerText"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"value: "
operator|+
name|webElement
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"innerHTML: "
operator|+
name|webElement
operator|.
name|getAttribute
argument_list|(
literal|"innerHTML"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"JS: "
operator|+
operator|(
operator|(
operator|(
name|JavascriptExecutor
operator|)
name|getDriver
argument_list|()
operator|)
operator|.
name|executeScript
argument_list|(
literal|"return $(arguments[0]).text();"
argument_list|,
name|webElement
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDriver
argument_list|()
operator|instanceof
name|HtmlUnitDriver
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LOGIN"
argument_list|,
name|webElement
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LOGIN"
argument_list|,
name|webElement
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|WebDriver
name|newWebDriver
parameter_list|()
block|{
return|return
name|WebdriverUtility
operator|.
name|newWebDriver
argument_list|()
return|;
block|}
block|}
end_class

end_unit

