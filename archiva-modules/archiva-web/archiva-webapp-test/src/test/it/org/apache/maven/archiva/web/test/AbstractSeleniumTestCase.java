begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|test
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|selenium
operator|.
name|DefaultSelenium
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|selenium
operator|.
name|Selenium
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:evenisse@apache.org">Emmanuel Venisse</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSeleniumTestCase
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CHECKBOX_CHECK
init|=
literal|"on"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHECKBOX_UNCHECK
init|=
literal|"off"
decl_stmt|;
specifier|private
name|Selenium
name|sel
decl_stmt|;
specifier|protected
name|String
name|adminUsername
decl_stmt|;
specifier|protected
name|String
name|adminPassword
decl_stmt|;
specifier|protected
name|String
name|adminFullName
init|=
name|getApplicationName
argument_list|()
operator|+
literal|" Admin"
decl_stmt|;
specifier|protected
name|String
name|adminEmail
init|=
literal|"admin@localhost.localdomain"
decl_stmt|;
specifier|protected
name|String
name|maxWaitTimeInMs
decl_stmt|;
specifier|protected
name|String
name|baseUrl
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|load
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"it.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|baseUrl
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"BASE_URL"
argument_list|)
expr_stmt|;
name|maxWaitTimeInMs
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"MAX_WAIT_TIME_IN_MS"
argument_list|)
expr_stmt|;
name|adminUsername
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_USERNAME"
argument_list|)
expr_stmt|;
name|adminPassword
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"ADMIN_PASSWORD"
argument_list|)
expr_stmt|;
name|String
name|seleniumHost
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"SELENIUM_HOST"
argument_list|)
decl_stmt|;
name|int
name|seleniumPort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"SELENIUM_PORT"
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|String
name|browser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"browser"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|browser
argument_list|)
condition|)
block|{
name|browser
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"SELENIUM_BROWSER"
argument_list|)
expr_stmt|;
block|}
name|sel
operator|=
operator|new
name|DefaultSelenium
argument_list|(
name|seleniumHost
argument_list|,
name|seleniumPort
argument_list|,
name|browser
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
name|sel
operator|.
name|start
argument_list|()
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|sel
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Selenium
name|getSelenium
parameter_list|()
block|{
return|return
name|sel
return|;
block|}
specifier|public
specifier|abstract
name|String
name|getBaseUrl
parameter_list|()
function_decl|;
comment|/**      * We create an admin user if it doesn't exist      */
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
name|open
argument_list|(
name|getWebContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getTitle
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Create Admin User"
argument_list|)
condition|)
block|{
name|assertCreateAdminUserPage
argument_list|()
expr_stmt|;
name|submitCreateAdminUserPage
argument_list|(
name|adminFullName
argument_list|,
name|adminEmail
argument_list|,
name|adminPassword
argument_list|,
name|adminPassword
argument_list|)
expr_stmt|;
name|assertLoginPage
argument_list|()
expr_stmt|;
name|submitLoginPage
argument_list|(
name|adminUsername
argument_list|,
name|adminPassword
argument_list|)
expr_stmt|;
name|postAdminUserCreation
argument_list|()
expr_stmt|;
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * where webapp initial configurations can be done      */
specifier|protected
name|void
name|postAdminUserCreation
parameter_list|()
block|{
if|if
condition|(
name|getTitle
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Continuum - Configuration"
argument_list|)
condition|)
block|{
name|setFieldValue
argument_list|(
literal|"baseUrl"
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
name|clickButtonWithValue
argument_list|(
literal|"Save"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|String
name|getApplicationName
parameter_list|()
function_decl|;
comment|/**      * some webapps have      *      * @return the page prefix set by the webapp      */
specifier|protected
name|String
name|getTitlePrefix
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|getInceptionYear
parameter_list|()
function_decl|;
specifier|protected
name|String
name|getWebContext
parameter_list|()
block|{
return|return
literal|"/"
return|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|sel
operator|.
name|open
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|sel
operator|.
name|getTitle
argument_list|()
return|;
block|}
specifier|public
name|String
name|getHtmlContent
parameter_list|()
block|{
return|return
name|getSelenium
argument_list|()
operator|.
name|getHtmlSource
argument_list|()
return|;
block|}
specifier|public
name|void
name|assertTextPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' isn't present."
argument_list|,
name|sel
operator|.
name|isTextPresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertTextNotPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' is present."
argument_list|,
name|sel
operator|.
name|isTextPresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertElementPresent
parameter_list|(
name|String
name|elementLocator
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|elementLocator
operator|+
literal|"' isn't present."
argument_list|,
name|isElementPresent
argument_list|(
name|elementLocator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertElementNotPresent
parameter_list|(
name|String
name|elementLocator
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|elementLocator
operator|+
literal|"' is present."
argument_list|,
name|isElementPresent
argument_list|(
name|elementLocator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLinkPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The link '"
operator|+
name|text
operator|+
literal|"' isn't present."
argument_list|,
name|isElementPresent
argument_list|(
literal|"link="
operator|+
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLinkNotPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"The link '"
operator|+
name|text
operator|+
literal|"' is present."
argument_list|,
name|isElementPresent
argument_list|(
literal|"link="
operator|+
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertImgWithAlt
parameter_list|(
name|String
name|alt
parameter_list|)
block|{
name|assertElementPresent
argument_list|(
literal|"//img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertImgWithAltAtRowCol
parameter_list|(
name|boolean
name|isALink
parameter_list|,
name|String
name|alt
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|String
name|locator
init|=
literal|"//tr["
operator|+
name|row
operator|+
literal|"]/td["
operator|+
name|column
operator|+
literal|"]/"
decl_stmt|;
name|locator
operator|+=
name|isALink
condition|?
literal|"a/"
else|:
literal|""
expr_stmt|;
name|locator
operator|+=
literal|"img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
expr_stmt|;
name|assertElementPresent
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertCellValueFromTable
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|tableElement
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getCellValueFromTable
argument_list|(
name|tableElement
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTextPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|sel
operator|.
name|isTextPresent
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isLinkPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|isElementPresent
argument_list|(
literal|"link="
operator|+
name|text
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isElementPresent
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
return|return
name|sel
operator|.
name|isElementPresent
argument_list|(
name|locator
argument_list|)
return|;
block|}
specifier|public
name|void
name|waitPage
parameter_list|()
block|{
name|waitPage
argument_list|(
literal|180000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitPage
parameter_list|(
name|int
name|nbMillisecond
parameter_list|)
block|{
name|sel
operator|.
name|waitForPageToLoad
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nbMillisecond
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertPage
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|getTitlePrefix
argument_list|()
operator|+
name|title
argument_list|,
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertHeader
argument_list|()
expr_stmt|;
name|assertFooter
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|assertHeader
parameter_list|()
function_decl|;
specifier|public
name|void
name|assertFooter
parameter_list|()
block|{
name|int
name|currentYear
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getSelenium
argument_list|()
operator|.
name|getText
argument_list|(
literal|"xpath=//div[@id='footer']/div[1]"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"Copyright © "
operator|+
name|getInceptionYear
argument_list|()
operator|+
literal|"-"
operator|+
name|currentYear
operator|+
literal|" The Apache Software Foundation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFieldValue
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|sel
operator|.
name|getValue
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCellValueFromTable
parameter_list|(
name|String
name|tableElement
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|getSelenium
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableElement
operator|+
literal|"."
operator|+
name|row
operator|+
literal|"."
operator|+
name|column
argument_list|)
return|;
block|}
specifier|public
name|void
name|selectValue
parameter_list|(
name|String
name|locator
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getSelenium
argument_list|()
operator|.
name|select
argument_list|(
name|locator
argument_list|,
literal|"label="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submit
parameter_list|()
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//input[@type='submit']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertButtonWithValuePresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' button isn't present"
argument_list|,
name|isButtonWithValuePresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertButtonWithValueNotPresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' button is present"
argument_list|,
name|isButtonWithValuePresent
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isButtonWithValuePresent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|isElementPresent
argument_list|(
literal|"//button[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
operator|||
name|isElementPresent
argument_list|(
literal|"//input[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
return|;
block|}
specifier|public
name|void
name|clickButtonWithValue
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|clickButtonWithValue
argument_list|(
name|text
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickButtonWithValue
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|assertButtonWithValuePresent
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|isElementPresent
argument_list|(
literal|"//button[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|)
condition|)
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//button[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clickLinkWithXPath
argument_list|(
literal|"//input[@value='"
operator|+
name|text
operator|+
literal|"']"
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clickSubmitWithLocator
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickSubmitWithLocator
parameter_list|(
name|String
name|locator
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|locator
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickImgWithAlt
parameter_list|(
name|String
name|alt
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
literal|"//img[@alt='"
operator|+
name|alt
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|clickLinkWithText
argument_list|(
name|text
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithText
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
literal|"link="
operator|+
name|text
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithXPath
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|clickLinkWithXPath
argument_list|(
name|xpath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithXPath
parameter_list|(
name|String
name|xpath
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
literal|"xpath="
operator|+
name|xpath
argument_list|,
name|wait
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithLocator
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|clickLinkWithLocator
argument_list|(
name|locator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clickLinkWithLocator
parameter_list|(
name|String
name|locator
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|assertElementPresent
argument_list|(
name|locator
argument_list|)
expr_stmt|;
name|sel
operator|.
name|click
argument_list|(
name|locator
argument_list|)
expr_stmt|;
if|if
condition|(
name|wait
condition|)
block|{
name|waitPage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValues
parameter_list|(
name|Map
name|fieldMap
parameter_list|)
block|{
name|Map
operator|.
name|Entry
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|fieldMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|entries
operator|.
name|next
argument_list|()
expr_stmt|;
name|sel
operator|.
name|type
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|sel
operator|.
name|type
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkField
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|sel
operator|.
name|check
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uncheckField
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
name|sel
operator|.
name|uncheck
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isChecked
parameter_list|(
name|String
name|locator
parameter_list|)
block|{
return|return
name|sel
operator|.
name|isChecked
argument_list|(
name|locator
argument_list|)
return|;
block|}
comment|//////////////////////////////////////
comment|// Login
comment|//////////////////////////////////////
specifier|public
name|void
name|goToLoginPage
parameter_list|()
block|{
name|clickLinkWithText
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
name|assertLoginPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|login
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|login
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|true
argument_list|,
literal|"Login Page"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|login
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|valid
parameter_list|,
name|String
name|assertReturnPage
parameter_list|)
block|{
if|if
condition|(
name|isLinkPresent
argument_list|(
literal|"Login"
argument_list|)
condition|)
block|{
name|goToLoginPage
argument_list|()
expr_stmt|;
name|submitLoginPage
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|false
argument_list|,
name|valid
argument_list|,
name|assertReturnPage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertLoginPage
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"Login Page"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Password"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Remember Me"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isChecked
argument_list|(
literal|"rememberMe"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitLoginPage
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|submitLoginPage
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"Login Page"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitLoginPage
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|validUsernamePassword
parameter_list|)
block|{
name|submitLoginPage
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
literal|false
argument_list|,
name|validUsernamePassword
argument_list|,
literal|"Login Page"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitLoginPage
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|rememberMe
parameter_list|,
name|boolean
name|validUsernamePassword
parameter_list|,
name|String
name|assertReturnPage
parameter_list|)
block|{
name|assertLoginPage
argument_list|()
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberMe
condition|)
block|{
name|checkField
argument_list|(
literal|"rememberMe"
argument_list|)
expr_stmt|;
block|}
name|clickButtonWithValue
argument_list|(
literal|"Login"
argument_list|)
expr_stmt|;
if|if
condition|(
name|validUsernamePassword
condition|)
block|{
comment|//assertTextPresent( "Current User:" );
name|assertTextPresent
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|assertLinkPresent
argument_list|(
literal|"Edit Details"
argument_list|)
expr_stmt|;
name|assertLinkPresent
argument_list|(
literal|"Logout"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"Login Page"
operator|.
name|equals
argument_list|(
name|assertReturnPage
argument_list|)
condition|)
block|{
name|assertLoginPage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertPage
argument_list|(
name|assertReturnPage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isAuthenticated
parameter_list|()
block|{
return|return
operator|!
operator|(
name|isLinkPresent
argument_list|(
literal|"Login"
argument_list|)
operator|&&
name|isLinkPresent
argument_list|(
literal|"Register"
argument_list|)
operator|)
return|;
block|}
comment|//////////////////////////////////////
comment|// Logout
comment|//////////////////////////////////////
specifier|public
name|void
name|logout
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"User wasn't authenticated."
argument_list|,
name|isAuthenticated
argument_list|()
argument_list|)
expr_stmt|;
name|clickLinkWithText
argument_list|(
literal|"Logout"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The user is always authenticated after a logout."
argument_list|,
name|isAuthenticated
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////
comment|// My Account
comment|//////////////////////////////////////
specifier|public
name|void
name|goToMyAccount
parameter_list|()
block|{
name|clickLinkWithText
argument_list|(
literal|"Edit Details"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertMyAccountDetails
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|newFullName
parameter_list|,
name|String
name|newEmailAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|assertPage
argument_list|(
literal|"Account Details"
argument_list|)
expr_stmt|;
comment|//isTextPresent( "Username" );
name|assertTextPresent
argument_list|(
literal|"Username:"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"registerForm_user_username"
argument_list|)
expr_stmt|;
name|assertCellValueFromTable
argument_list|(
name|username
argument_list|,
literal|"//form/table"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Full Name*:"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.fullName"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newFullName
argument_list|,
name|getFieldValue
argument_list|(
literal|"user.fullName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Email Address*:"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.email"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newEmailAddress
argument_list|,
name|getFieldValue
argument_list|(
literal|"user.email"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Current Password*:"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"oldPassword"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"New Password*:"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.password"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Confirm Password*:"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.confirmPassword"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Last Password Change"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"registerForm_user_timestampLastPasswordChange"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|editMyUserInfo
parameter_list|(
name|String
name|newFullName
parameter_list|,
name|String
name|newEmailAddress
parameter_list|,
name|String
name|oldPassword
parameter_list|,
name|String
name|newPassword
parameter_list|,
name|String
name|confirmNewPassword
parameter_list|)
block|{
name|goToMyAccount
argument_list|()
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.fullName"
argument_list|,
name|newFullName
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.email"
argument_list|,
name|newEmailAddress
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"oldPassword"
argument_list|,
name|oldPassword
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.password"
argument_list|,
name|newPassword
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.confirmPassword"
argument_list|,
name|confirmNewPassword
argument_list|)
expr_stmt|;
name|clickButtonWithValue
argument_list|(
literal|"Submit"
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////
comment|// Users
comment|//////////////////////////////////////
specifier|public
name|void
name|assertUsersListPage
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"[Admin] User List"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertCreateUserPage
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"[Admin] User Create"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Full Name"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Email Address"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Password"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Confirm Password"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertUserRolesPage
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"[Admin] User Edit"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"[Admin] User Roles"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Assigned Roles"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Available Roles"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertDeleteUserPage
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|assertPage
argument_list|(
literal|"[Admin] User Delete"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"[Admin] User Delete"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"The following user will be deleted: "
operator|+
name|username
argument_list|)
expr_stmt|;
name|assertButtonWithValuePresent
argument_list|(
literal|"Delete User"
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////
comment|// Create Admin User
comment|//////////////////////////////////////
specifier|public
name|void
name|assertCreateAdminUserPage
parameter_list|()
block|{
name|assertPage
argument_list|(
literal|"Create Admin User"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Create Admin User"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Username"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.username"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Full Name"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.fullName"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Email Address"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.email"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Password"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.password"
argument_list|)
expr_stmt|;
name|assertTextPresent
argument_list|(
literal|"Confirm Password"
argument_list|)
expr_stmt|;
name|assertElementPresent
argument_list|(
literal|"user.confirmPassword"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|submitCreateAdminUserPage
parameter_list|(
name|String
name|fullName
parameter_list|,
name|String
name|email
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|confirmPassword
parameter_list|)
block|{
name|setFieldValue
argument_list|(
literal|"user.fullName"
argument_list|,
name|fullName
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.email"
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|setFieldValue
argument_list|(
literal|"user.confirmPassword"
argument_list|,
name|confirmPassword
argument_list|)
expr_stmt|;
name|submit
argument_list|()
expr_stmt|;
name|waitPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getBasedir
parameter_list|()
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
return|return
name|basedir
return|;
block|}
block|}
end_class

end_unit

