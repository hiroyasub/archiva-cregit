begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|api
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|admin
operator|.
name|ArchivaAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksummedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|metadata
operator|.
name|MavenMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|facets
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|SnapshotVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ArtifactUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|AbstractRestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|ArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|model
operator|.
name|FileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|BooleanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|MultipartBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"fileUploadService#rest"
argument_list|)
specifier|public
class|class
name|DefaultFileUploadService
extends|extends
name|AbstractRestService
implements|implements
name|FileUploadService
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Context
specifier|private
name|HttpServletRequest
name|httpServletRequest
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArtifactUtil
name|artifactUtil
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArchivaAdministration
name|archivaAdministration
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|algorithms
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ChecksumAlgorithm
operator|.
name|SHA1
argument_list|,
name|ChecksumAlgorithm
operator|.
name|MD5
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|FS
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getSeparator
argument_list|()
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|ArchivaTaskScheduler
argument_list|<
name|RepositoryTask
argument_list|>
name|scheduler
decl_stmt|;
specifier|private
name|String
name|getStringValue
parameter_list|(
name|MultipartBody
name|multipartBody
parameter_list|,
name|String
name|attachmentId
parameter_list|)
throws|throws
name|IOException
block|{
name|Attachment
name|attachment
init|=
name|multipartBody
operator|.
name|getAttachment
argument_list|(
name|attachmentId
argument_list|)
decl_stmt|;
return|return
name|attachment
operator|==
literal|null
condition|?
literal|""
else|:
name|StringUtils
operator|.
name|trim
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|attachment
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileMetadata
name|post
parameter_list|(
name|MultipartBody
name|multipartBody
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|String
name|classifier
init|=
name|getStringValue
argument_list|(
name|multipartBody
argument_list|,
literal|"classifier"
argument_list|)
decl_stmt|;
name|String
name|packaging
init|=
name|getStringValue
argument_list|(
name|multipartBody
argument_list|,
literal|"packaging"
argument_list|)
decl_stmt|;
name|checkParamChars
argument_list|(
literal|"classifier"
argument_list|,
name|classifier
argument_list|)
expr_stmt|;
name|checkParamChars
argument_list|(
literal|"packaging"
argument_list|,
name|packaging
argument_list|)
expr_stmt|;
comment|// skygo: http header form pomFile was once sending 1 for true and void for false
comment|// leading to permanent false value for pomFile if using toBoolean(); use , "1", ""
name|boolean
name|pomFile
init|=
literal|false
decl_stmt|;
try|try
block|{
name|pomFile
operator|=
name|BooleanUtils
operator|.
name|toBoolean
argument_list|(
name|getStringValue
argument_list|(
name|multipartBody
argument_list|,
literal|"pomFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|ArchivaRestServiceException
name|e
init|=
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Bad value for boolean pomFile field."
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|setHttpErrorCode
argument_list|(
literal|422
argument_list|)
expr_stmt|;
name|e
operator|.
name|setFieldName
argument_list|(
literal|"pomFile"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setErrorKey
argument_list|(
literal|"fileupload.malformed.pomFile"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Attachment
name|file
init|=
name|multipartBody
operator|.
name|getAttachment
argument_list|(
literal|"files[]"
argument_list|)
decl_stmt|;
comment|//Content-Disposition: form-data; name="files[]"; filename="org.apache.karaf.features.command-2.2.2.jar"
name|String
name|fileName
init|=
name|file
operator|.
name|getContentDisposition
argument_list|()
operator|.
name|getParameter
argument_list|(
literal|"filename"
argument_list|)
decl_stmt|;
name|Path
name|fileNamePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|equals
argument_list|(
name|fileNamePath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|ArchivaRestServiceException
name|e
init|=
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Bad filename in upload content: "
operator|+
name|fileName
operator|+
literal|" - File traversal chars (..|/) are not allowed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|setHttpErrorCode
argument_list|(
literal|422
argument_list|)
expr_stmt|;
name|e
operator|.
name|setErrorKey
argument_list|(
literal|"fileupload.malformed.filename"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Path
name|tmpFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"upload-artifact"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|file
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileMetadata
name|fileMetadata
init|=
operator|new
name|FileMetadata
argument_list|(
name|fileName
argument_list|,
name|Files
operator|.
name|size
argument_list|(
name|tmpFile
argument_list|)
argument_list|,
literal|"theurl"
argument_list|)
decl_stmt|;
name|fileMetadata
operator|.
name|setServerFileName
argument_list|(
name|tmpFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fileMetadata
operator|.
name|setClassifier
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|fileMetadata
operator|.
name|setDeleteUrl
argument_list|(
name|tmpFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fileMetadata
operator|.
name|setPomFile
argument_list|(
name|pomFile
argument_list|)
expr_stmt|;
name|fileMetadata
operator|.
name|setPackaging
argument_list|(
name|packaging
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"uploading file: {}"
argument_list|,
name|fileMetadata
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadatas
init|=
name|getSessionFilesList
argument_list|()
decl_stmt|;
name|fileMetadatas
operator|.
name|add
argument_list|(
name|fileMetadata
argument_list|)
expr_stmt|;
return|return
name|fileMetadata
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return The file list from the session.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|getSessionFilesList
parameter_list|()
block|{
specifier|final
name|HttpSession
name|session
init|=
name|httpServletRequest
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadata
init|=
operator|(
name|List
argument_list|<
name|FileMetadata
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|FILES_SESSION_KEY
argument_list|)
decl_stmt|;
comment|// Double check with synchronization, we assume, that httpServletRequest is
comment|// fully initialized (no volatile)
if|if
condition|(
name|fileMetadata
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|session
init|)
block|{
name|fileMetadata
operator|=
operator|(
name|List
argument_list|<
name|FileMetadata
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|FILES_SESSION_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileMetadata
operator|==
literal|null
condition|)
block|{
name|fileMetadata
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|FILES_SESSION_KEY
argument_list|,
name|fileMetadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fileMetadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|deleteFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Deleting file {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
comment|// we make sure, that there are no other path components in the filename:
name|String
name|checkedFileName
init|=
name|Paths
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
name|SystemUtils
operator|.
name|getJavaIoTmpDir
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|checkedFileName
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"delete file:{},exists:{}"
argument_list|,
name|file
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|getSessionFileMetadatas
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|FileMetadata
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
comment|// try with full name as ui only know the file name
if|if
condition|(
operator|!
name|removed
condition|)
block|{
name|removed
operator|=
name|getSessionFileMetadatas
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|FileMetadata
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removed
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not delete file {}: {}"
argument_list|,
name|file
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|clearUploadedFiles
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadatas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getSessionFileMetadatas
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|fileMetadata
range|:
name|fileMetadatas
control|)
block|{
name|deleteFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|fileMetadata
operator|.
name|getServerFileName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getSessionFileMetadatas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|getSessionFileMetadatas
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadatas
init|=
operator|(
name|List
argument_list|<
name|FileMetadata
argument_list|>
operator|)
name|httpServletRequest
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|FILES_SESSION_KEY
argument_list|)
decl_stmt|;
return|return
name|fileMetadatas
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|FileMetadata
operator|>
name|emptyList
argument_list|()
else|:
name|fileMetadatas
return|;
block|}
specifier|private
name|boolean
name|hasValidChars
parameter_list|(
name|String
name|checkString
parameter_list|)
block|{
if|if
condition|(
name|checkString
operator|.
name|contains
argument_list|(
name|FS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|checkString
operator|.
name|contains
argument_list|(
literal|"../"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|checkString
operator|.
name|contains
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|checkParamChars
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
if|if
condition|(
operator|!
name|hasValidChars
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|ArchivaRestServiceException
name|e
init|=
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Bad characters in "
operator|+
name|param
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|setHttpErrorCode
argument_list|(
literal|422
argument_list|)
expr_stmt|;
name|e
operator|.
name|setErrorKey
argument_list|(
literal|"fileupload.malformed.param"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setFieldName
argument_list|(
name|param
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|save
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|,
name|boolean
name|generatePom
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|repositoryId
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|groupId
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|artifactId
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|version
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|packaging
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|packaging
argument_list|)
expr_stmt|;
name|checkParamChars
argument_list|(
literal|"repositoryId"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|checkParamChars
argument_list|(
literal|"groupId"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
name|checkParamChars
argument_list|(
literal|"artifactId"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|checkParamChars
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|checkParamChars
argument_list|(
literal|"packaging"
argument_list|,
name|packaging
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadatas
init|=
name|getSessionFilesList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileMetadatas
operator|==
literal|null
operator|||
name|fileMetadatas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
try|try
block|{
name|ManagedRepository
name|managedRepository
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
comment|// TODO i18n ?
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Cannot find managed repository with id "
operator|+
name|repositoryId
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
operator|&&
operator|!
name|managedRepository
operator|.
name|isSnapshots
argument_list|()
condition|)
block|{
comment|// TODO i18n ?
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Managed repository with id "
operator|+
name|repositoryId
operator|+
literal|" do not accept snapshots"
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// get from the session file with groupId/artifactId
name|Iterable
argument_list|<
name|FileMetadata
argument_list|>
name|filesToAdd
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|fileMetadatas
argument_list|,
operator|new
name|Predicate
argument_list|<
name|FileMetadata
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|FileMetadata
name|fileMetadata
parameter_list|)
block|{
return|return
name|fileMetadata
operator|!=
literal|null
operator|&&
operator|!
name|fileMetadata
operator|.
name|isPomFile
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FileMetadata
argument_list|>
name|iterator
init|=
name|filesToAdd
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|pomGenerated
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileMetadata
name|fileMetadata
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"fileToAdd: {}"
argument_list|,
name|fileMetadata
argument_list|)
expr_stmt|;
name|saveFile
argument_list|(
name|repositoryId
argument_list|,
name|fileMetadata
argument_list|,
name|generatePom
operator|&&
operator|!
name|pomGenerated
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|packaging
argument_list|)
expr_stmt|;
name|pomGenerated
operator|=
literal|true
expr_stmt|;
name|deleteFile
argument_list|(
name|fileMetadata
operator|.
name|getServerFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filesToAdd
operator|=
name|Iterables
operator|.
name|filter
argument_list|(
name|fileMetadatas
argument_list|,
operator|new
name|Predicate
argument_list|<
name|FileMetadata
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|FileMetadata
name|fileMetadata
parameter_list|)
block|{
return|return
name|fileMetadata
operator|!=
literal|null
operator|&&
name|fileMetadata
operator|.
name|isPomFile
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|filesToAdd
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileMetadata
name|fileMetadata
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"fileToAdd: {}"
argument_list|,
name|fileMetadata
argument_list|)
expr_stmt|;
name|savePomFile
argument_list|(
name|repositoryId
argument_list|,
name|fileMetadata
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|packaging
argument_list|)
expr_stmt|;
name|deleteFile
argument_list|(
name|fileMetadata
operator|.
name|getServerFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|protected
name|void
name|savePomFile
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|FileMetadata
name|fileMetadata
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Saving POM"
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|fixChecksums
init|=
operator|!
operator|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"create-missing-checksums"
argument_list|)
operator|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repoConfig
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifactReference
init|=
name|createArtifactRef
argument_list|(
name|fileMetadata
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|artifactReference
operator|.
name|setType
argument_list|(
name|packaging
argument_list|)
expr_stmt|;
name|Path
name|pomPath
init|=
name|artifactUtil
operator|.
name|getArtifactPath
argument_list|(
name|repoConfig
argument_list|,
name|artifactReference
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
name|pomPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|pomFilename
init|=
name|pomPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|fileMetadata
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
name|pomFilename
operator|=
name|StringUtils
operator|.
name|remove
argument_list|(
name|pomFilename
argument_list|,
literal|"-"
operator|+
name|fileMetadata
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pomFilename
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|pomFilename
argument_list|)
operator|+
literal|".pom"
expr_stmt|;
name|copyFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|fileMetadata
operator|.
name|getServerFileName
argument_list|()
argument_list|)
argument_list|,
name|targetPath
argument_list|,
name|pomFilename
argument_list|,
name|fixChecksums
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|targetPath
operator|.
name|resolve
argument_list|(
name|pomFilename
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|AuditEvent
operator|.
name|UPLOAD_FILE
argument_list|)
expr_stmt|;
name|queueRepositoryTask
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|targetPath
operator|.
name|resolve
argument_list|(
name|pomFilename
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Finished Saving POM"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException for POM {}"
argument_list|,
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Error encountered while uploading pom file: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|rep
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryException for POM {}"
argument_list|,
name|rep
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Repository exception: "
operator|+
name|rep
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|rep
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryAdminException for POM {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"RepositoryAdmin exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|saveFile
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|FileMetadata
name|fileMetadata
parameter_list|,
name|boolean
name|generatePom
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Saving file"
argument_list|)
expr_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repoConfig
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifactReference
init|=
name|createArtifactRef
argument_list|(
name|fileMetadata
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|artifactReference
operator|.
name|setType
argument_list|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fileMetadata
operator|.
name|getPackaging
argument_list|()
argument_list|)
condition|?
name|packaging
else|:
name|fileMetadata
operator|.
name|getPackaging
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|artifactPath
init|=
name|artifactUtil
operator|.
name|getArtifactPath
argument_list|(
name|repoConfig
argument_list|,
name|artifactReference
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
name|artifactPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"artifactPath: {} found targetPath: {}"
argument_list|,
name|artifactPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|Date
name|lastUpdatedTimestamp
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|newBuildNumber
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|timestamp
init|=
literal|null
decl_stmt|;
name|Path
name|versionMetadataFile
init|=
name|targetPath
operator|.
name|resolve
argument_list|(
name|MetadataTools
operator|.
name|MAVEN_METADATA
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|versionMetadata
init|=
name|getMetadata
argument_list|(
name|versionMetadataFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|TimeZone
name|timezone
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
name|DateFormat
name|fmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd.HHmmss"
argument_list|)
decl_stmt|;
name|fmt
operator|.
name|setTimeZone
argument_list|(
name|timezone
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|fmt
operator|.
name|format
argument_list|(
name|lastUpdatedTimestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionMetadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newBuildNumber
operator|=
name|versionMetadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|getBuildNumber
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|newBuildNumber
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|String
name|filename
init|=
name|artifactPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|replaceAll
argument_list|(
name|VersionUtil
operator|.
name|SNAPSHOT
argument_list|,
name|timestamp
operator|+
literal|"-"
operator|+
name|newBuildNumber
argument_list|)
expr_stmt|;
block|}
name|boolean
name|fixChecksums
init|=
operator|!
operator|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"create-missing-checksums"
argument_list|)
operator|)
decl_stmt|;
try|try
block|{
name|Path
name|targetFile
init|=
name|targetPath
operator|.
name|resolve
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|targetFile
argument_list|)
operator|&&
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
operator|&&
name|repoConfig
operator|.
name|blocksRedeployments
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Overwriting released artifacts in repository '"
operator|+
name|repoConfig
operator|.
name|getId
argument_list|()
operator|+
literal|"' is not allowed."
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
else|else
block|{
name|copyFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|fileMetadata
operator|.
name|getServerFileName
argument_list|()
argument_list|)
argument_list|,
name|targetPath
argument_list|,
name|filename
argument_list|,
name|fixChecksums
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactPath
operator|.
name|toString
argument_list|()
argument_list|,
name|AuditEvent
operator|.
name|UPLOAD_FILE
argument_list|)
expr_stmt|;
name|queueRepositoryTask
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException copying file: {}"
argument_list|,
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Overwriting released artifacts in repository '"
operator|+
name|repoConfig
operator|.
name|getId
argument_list|()
operator|+
literal|"' is not allowed."
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|generatePom
condition|)
block|{
name|String
name|pomFilename
init|=
name|filename
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|fileMetadata
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
name|pomFilename
operator|=
name|StringUtils
operator|.
name|remove
argument_list|(
name|pomFilename
argument_list|,
literal|"-"
operator|+
name|fileMetadata
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pomFilename
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|pomFilename
argument_list|)
operator|+
literal|".pom"
expr_stmt|;
try|try
block|{
name|Path
name|generatedPomFile
init|=
name|createPom
argument_list|(
name|targetPath
argument_list|,
name|pomFilename
argument_list|,
name|fileMetadata
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|packaging
argument_list|)
decl_stmt|;
name|triggerAuditEvent
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|targetPath
operator|.
name|resolve
argument_list|(
name|pomFilename
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|AuditEvent
operator|.
name|UPLOAD_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixChecksums
condition|)
block|{
name|fixChecksums
argument_list|(
name|generatedPomFile
argument_list|)
expr_stmt|;
block|}
name|queueRepositoryTask
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|generatedPomFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Error encountered while writing pom file: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
comment|// explicitly update only if metadata-updater consumer is not enabled!
if|if
condition|(
operator|!
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"metadata-updater"
argument_list|)
condition|)
block|{
name|updateProjectMetadata
argument_list|(
name|targetPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|lastUpdatedTimestamp
argument_list|,
name|timestamp
argument_list|,
name|newBuildNumber
argument_list|,
name|fixChecksums
argument_list|,
name|fileMetadata
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|packaging
argument_list|)
expr_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|updateVersionMetadata
argument_list|(
name|versionMetadata
argument_list|,
name|versionMetadataFile
argument_list|,
name|lastUpdatedTimestamp
argument_list|,
name|timestamp
argument_list|,
name|newBuildNumber
argument_list|,
name|fixChecksums
argument_list|,
name|fileMetadata
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|packaging
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|re
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryNotFoundException during save {}"
argument_list|,
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|re
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Target repository cannot be found: "
operator|+
name|re
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|re
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|rep
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryException during save {}"
argument_list|,
name|rep
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Repository exception: "
operator|+
name|rep
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|rep
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryAdminException during save {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"RepositoryAdmin exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException during save {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"Repository exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ArtifactReference
name|createArtifactRef
parameter_list|(
name|FileMetadata
name|fileMetadata
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ArtifactReference
name|artifactReference
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|artifactReference
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setClassifier
argument_list|(
name|fileMetadata
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|artifactReference
return|;
block|}
specifier|private
name|ArchivaRepositoryMetadata
name|getMetadata
parameter_list|(
name|Path
name|metadataFile
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|ArchivaRepositoryMetadata
name|metadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|metadataFile
argument_list|)
condition|)
block|{
try|try
block|{
name|metadata
operator|=
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|metadata
return|;
block|}
specifier|private
name|Path
name|createPom
parameter_list|(
name|Path
name|targetPath
parameter_list|,
name|String
name|filename
parameter_list|,
name|FileMetadata
name|fileMetadata
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|)
throws|throws
name|IOException
block|{
name|Model
name|projectModel
init|=
operator|new
name|Model
argument_list|()
decl_stmt|;
name|projectModel
operator|.
name|setModelVersion
argument_list|(
literal|"4.0.0"
argument_list|)
expr_stmt|;
name|projectModel
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|projectModel
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|projectModel
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|projectModel
operator|.
name|setPackaging
argument_list|(
name|packaging
argument_list|)
expr_stmt|;
name|Path
name|pomFile
init|=
name|targetPath
operator|.
name|resolve
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|MavenXpp3Writer
name|writer
init|=
operator|new
name|MavenXpp3Writer
argument_list|()
decl_stmt|;
try|try
init|(
name|FileWriter
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|pomFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|w
argument_list|,
name|projectModel
argument_list|)
expr_stmt|;
block|}
return|return
name|pomFile
return|;
block|}
specifier|private
name|void
name|fixChecksums
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|ChecksummedFile
name|checksum
init|=
operator|new
name|ChecksummedFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|fixChecksums
argument_list|(
name|algorithms
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|queueRepositoryTask
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|Path
name|localFile
parameter_list|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setResourceFile
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|task
operator|.
name|setUpdateRelatedArtifacts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to queue repository task to execute consumers on resource file ['{}"
operator|+
literal|"']."
argument_list|,
name|localFile
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyFile
parameter_list|(
name|Path
name|sourceFile
parameter_list|,
name|Path
name|targetPath
parameter_list|,
name|String
name|targetFilename
parameter_list|,
name|boolean
name|fixChecksums
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|copy
argument_list|(
name|sourceFile
argument_list|,
name|targetPath
operator|.
name|resolve
argument_list|(
name|targetFilename
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|,
name|StandardCopyOption
operator|.
name|COPY_ATTRIBUTES
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixChecksums
condition|)
block|{
name|fixChecksums
argument_list|(
name|targetPath
operator|.
name|resolve
argument_list|(
name|targetFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Update artifact level metadata. If it does not exist, create the metadata and fix checksums if necessary.      */
specifier|private
name|void
name|updateProjectMetadata
parameter_list|(
name|String
name|targetPath
parameter_list|,
name|Date
name|lastUpdatedTimestamp
parameter_list|,
name|String
name|timestamp
parameter_list|,
name|int
name|buildNumber
parameter_list|,
name|boolean
name|fixChecksums
parameter_list|,
name|FileMetadata
name|fileMetadata
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|availableVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|latestVersion
init|=
name|version
decl_stmt|;
name|Path
name|projectDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|projectMetadataFile
init|=
name|projectDir
operator|.
name|resolve
argument_list|(
name|MetadataTools
operator|.
name|MAVEN_METADATA
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|projectMetadata
init|=
name|getMetadata
argument_list|(
name|projectMetadataFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|projectMetadataFile
argument_list|)
condition|)
block|{
name|availableVersions
operator|=
name|projectMetadata
operator|.
name|getAvailableVersions
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|availableVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|availableVersions
operator|.
name|contains
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|availableVersions
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
name|latestVersion
operator|=
name|availableVersions
operator|.
name|get
argument_list|(
name|availableVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|availableVersions
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectMetadata
operator|.
name|getGroupId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|projectMetadata
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectMetadata
operator|.
name|getArtifactId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|projectMetadata
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
block|}
name|projectMetadata
operator|.
name|setLatestVersion
argument_list|(
name|latestVersion
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setLastUpdatedTimestamp
argument_list|(
name|lastUpdatedTimestamp
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setAvailableVersions
argument_list|(
name|availableVersions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|projectMetadata
operator|.
name|setReleasedVersion
argument_list|(
name|latestVersion
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|projectMetadata
argument_list|,
name|projectMetadataFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixChecksums
condition|)
block|{
name|fixChecksums
argument_list|(
name|projectMetadataFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Update version level metadata for snapshot artifacts. If it does not exist, create the metadata and fix checksums      * if necessary.      */
specifier|private
name|void
name|updateVersionMetadata
parameter_list|(
name|ArchivaRepositoryMetadata
name|metadata
parameter_list|,
name|Path
name|metadataFile
parameter_list|,
name|Date
name|lastUpdatedTimestamp
parameter_list|,
name|String
name|timestamp
parameter_list|,
name|int
name|buildNumber
parameter_list|,
name|boolean
name|fixChecksums
parameter_list|,
name|FileMetadata
name|fileMetadata
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|metadataFile
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|setSnapshotVersion
argument_list|(
operator|new
name|SnapshotVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|setBuildNumber
argument_list|(
name|buildNumber
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLastUpdatedTimestamp
argument_list|(
name|lastUpdatedTimestamp
argument_list|)
expr_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|metadata
argument_list|,
name|metadataFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixChecksums
condition|)
block|{
name|fixChecksums
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

