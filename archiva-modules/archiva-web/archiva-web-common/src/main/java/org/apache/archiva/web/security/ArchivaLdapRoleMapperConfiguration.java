begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|security
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|LdapGroupMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RedbackRuntimeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|runtime
operator|.
name|RedbackRuntimeConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|MappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|role
operator|.
name|LdapRoleMapperConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 2.1  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"ldapRoleMapperConfiguration#archiva"
argument_list|)
specifier|public
class|class
name|ArchivaLdapRoleMapperConfiguration
implements|implements
name|LdapRoleMapperConfiguration
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"redbackRuntimeConfigurationAdmin#default"
argument_list|)
specifier|private
name|RedbackRuntimeConfigurationAdmin
name|redbackRuntimeConfigurationAdmin
decl_stmt|;
specifier|public
name|void
name|addLdapMapping
parameter_list|(
name|String
name|ldapGroup
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|)
throws|throws
name|MappingException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"addLdapMapping ldapGroup: {}, roles: {}"
argument_list|,
name|ldapGroup
argument_list|,
name|roles
argument_list|)
expr_stmt|;
comment|// TODO check if already exist first
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|added
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LdapGroupMapping
argument_list|(
name|ldapGroup
argument_list|,
name|roles
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"addLdapMapping ldapGroup: {}, roles: {}, added: {}"
argument_list|,
name|ldapGroup
argument_list|,
name|roles
argument_list|,
name|added
argument_list|)
expr_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MappingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|updateLdapMapping
parameter_list|(
name|String
name|ldapGroup
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|)
throws|throws
name|MappingException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
name|LdapGroupMapping
name|ldapGroupMapping
init|=
operator|new
name|LdapGroupMapping
argument_list|(
name|ldapGroup
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
operator|.
name|indexOf
argument_list|(
name|ldapGroupMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updateLdapMapping ldapGroup: {}, roles: {}"
argument_list|,
name|ldapGroup
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|ldapGroupMapping
operator|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|ldapGroupMapping
operator|.
name|setRoleNames
argument_list|(
name|roles
argument_list|)
expr_stmt|;
block|}
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MappingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeLdapMapping
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|MappingException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|removed
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|LdapGroupMapping
argument_list|(
name|group
argument_list|)
argument_list|)
decl_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"removeLdapMapping ldapGroup: {}, removed: {}"
argument_list|,
name|group
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MappingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|getLdapGroupMappings
parameter_list|()
throws|throws
name|MappingException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
name|ldapGroupMappings
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldapGroupMappings
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|ldapGroupMappings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LdapGroupMapping
name|ldapGroupMapping
range|:
name|ldapGroupMappings
control|)
block|{
name|res
operator|.
name|put
argument_list|(
name|ldapGroupMapping
operator|.
name|getGroup
argument_list|()
argument_list|,
name|ldapGroupMapping
operator|.
name|getRoleNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MappingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setLdapGroupMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mappings
parameter_list|)
throws|throws
name|MappingException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
name|ldapGroupMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ldapGroupMappings
operator|.
name|add
argument_list|(
operator|new
name|LdapGroupMapping
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|redbackRuntimeConfiguration
operator|.
name|setLdapGroupMappings
argument_list|(
name|ldapGroupMappings
argument_list|)
expr_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MappingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

