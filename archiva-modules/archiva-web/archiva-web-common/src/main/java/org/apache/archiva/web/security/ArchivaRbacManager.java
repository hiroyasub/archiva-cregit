begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|security
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|runtime
operator|.
name|RedbackRuntimeConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|AbstractRBACManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|RBACManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|RbacManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|RbacObjectInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|RbacObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|UserAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M4  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"rbacManager#archiva"
argument_list|)
specifier|public
class|class
name|ArchivaRbacManager
extends|extends
name|AbstractRBACManager
implements|implements
name|RBACManager
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RBACManager
argument_list|>
name|rbacManagersPerId
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RedbackRuntimeConfigurationAdmin
name|redbackRuntimeConfigurationAdmin
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rbacManagerIds
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
operator|.
name|getRbacManagerImpls
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"use rbacManagerIds: '{}'"
argument_list|,
name|rbacManagerIds
argument_list|)
expr_stmt|;
name|this
operator|.
name|rbacManagersPerId
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|RBACManager
argument_list|>
argument_list|(
name|rbacManagerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|rbacManagerIds
control|)
block|{
name|RBACManager
name|rbacManager
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"rbacManager#"
operator|+
name|id
argument_list|,
name|RBACManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|rbacManagersPerId
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|rbacManager
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
comment|// revert to a default one ?
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|RBACManager
name|getRbacManagerForCommon
parameter_list|()
block|{
return|return
name|this
operator|.
name|rbacManagersPerId
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|Role
name|createRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|createRole
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Role
name|saveRole
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|saveRole
argument_list|(
name|role
argument_list|)
return|;
block|}
specifier|public
name|void
name|saveRoles
parameter_list|(
name|Collection
argument_list|<
name|Role
argument_list|>
name|roles
parameter_list|)
throws|throws
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
name|getRbacManagerForCommon
argument_list|()
operator|.
name|saveRoles
argument_list|(
name|roles
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacManagerException
block|{
for|for
control|(
name|RBACManager
name|rbacManager
range|:
name|rbacManagersPerId
operator|.
name|values
argument_list|()
control|)
block|{
name|Role
name|role
init|=
name|rbacManager
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
return|return
name|role
return|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"cannot find role for name: â{}"
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|getAllRoles
parameter_list|()
throws|throws
name|RbacManagerException
block|{
comment|// iterate and aggregate results ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getAllRoles
argument_list|()
return|;
block|}
specifier|public
name|void
name|removeRole
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate remove ?
name|getRbacManagerForCommon
argument_list|()
operator|.
name|removeRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Permission
name|createPermission
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|createPermission
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Permission
name|createPermission
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|operationName
parameter_list|,
name|String
name|resourceIdentifier
parameter_list|)
throws|throws
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|createPermission
argument_list|(
name|name
argument_list|,
name|operationName
argument_list|,
name|resourceIdentifier
argument_list|)
return|;
block|}
specifier|public
name|Permission
name|savePermission
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|savePermission
argument_list|(
name|permission
argument_list|)
return|;
block|}
specifier|public
name|Permission
name|getPermission
parameter_list|(
name|String
name|permissionName
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getPermission
argument_list|(
name|permissionName
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Permission
argument_list|>
name|getAllPermissions
parameter_list|()
throws|throws
name|RbacManagerException
block|{
comment|// iterate and aggregate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getAllPermissions
argument_list|()
return|;
block|}
specifier|public
name|void
name|removePermission
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate remove ?
name|getRbacManagerForCommon
argument_list|()
operator|.
name|removePermission
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Operation
name|createOperation
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|createOperation
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Operation
name|saveOperation
parameter_list|(
name|Operation
name|operation
parameter_list|)
throws|throws
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|saveOperation
argument_list|(
name|operation
argument_list|)
return|;
block|}
specifier|public
name|Operation
name|getOperation
parameter_list|(
name|String
name|operationName
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getOperation
argument_list|(
name|operationName
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getAllOperations
parameter_list|()
throws|throws
name|RbacManagerException
block|{
comment|// iterate and aggregate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getAllOperations
argument_list|()
return|;
block|}
specifier|public
name|void
name|removeOperation
parameter_list|(
name|Operation
name|operation
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
name|getRbacManagerForCommon
argument_list|()
operator|.
name|removeOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Resource
name|createResource
parameter_list|(
name|String
name|identifier
parameter_list|)
throws|throws
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|createResource
argument_list|(
name|identifier
argument_list|)
return|;
block|}
specifier|public
name|Resource
name|saveResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
throws|throws
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|saveResource
argument_list|(
name|resource
argument_list|)
return|;
block|}
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|resourceIdentifier
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getResource
argument_list|(
name|resourceIdentifier
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Resource
argument_list|>
name|getAllResources
parameter_list|()
throws|throws
name|RbacManagerException
block|{
comment|// iterate and aggregate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getAllResources
argument_list|()
return|;
block|}
specifier|public
name|void
name|removeResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate
name|getRbacManagerForCommon
argument_list|()
operator|.
name|removeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UserAssignment
name|createUserAssignment
parameter_list|(
name|String
name|principal
parameter_list|)
throws|throws
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|createUserAssignment
argument_list|(
name|principal
argument_list|)
return|;
block|}
specifier|public
name|UserAssignment
name|saveUserAssignment
parameter_list|(
name|UserAssignment
name|userAssignment
parameter_list|)
throws|throws
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|saveUserAssignment
argument_list|(
name|userAssignment
argument_list|)
return|;
block|}
specifier|public
name|UserAssignment
name|getUserAssignment
parameter_list|(
name|String
name|principal
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getUserAssignment
argument_list|(
name|principal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|userAssignmentExists
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|userAssignmentExists
argument_list|(
name|principal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|userAssignmentExists
parameter_list|(
name|UserAssignment
name|assignment
parameter_list|)
block|{
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|userAssignmentExists
argument_list|(
name|assignment
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|UserAssignment
argument_list|>
name|getAllUserAssignments
parameter_list|()
throws|throws
name|RbacManagerException
block|{
comment|// iterate
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getAllUserAssignments
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|UserAssignment
argument_list|>
name|getUserAssignmentsForRoles
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|roleNames
parameter_list|)
throws|throws
name|RbacManagerException
block|{
comment|// iterate ?
return|return
name|getRbacManagerForCommon
argument_list|()
operator|.
name|getUserAssignmentsForRoles
argument_list|(
name|roleNames
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeUserAssignment
parameter_list|(
name|UserAssignment
name|userAssignment
parameter_list|)
throws|throws
name|RbacObjectNotFoundException
throws|,
name|RbacObjectInvalidException
throws|,
name|RbacManagerException
block|{
comment|// iterate ?
name|getRbacManagerForCommon
argument_list|()
operator|.
name|removeUserAssignment
argument_list|(
name|userAssignment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|roleExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RbacManagerException
block|{
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RBACManager
name|manager
range|:
name|rbacManagersPerId
operator|.
name|values
argument_list|()
control|)
block|{
name|exists
operator|=
name|manager
operator|.
name|roleExists
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|exists
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|roleExists
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|RbacManagerException
block|{
return|return
name|roleExists
argument_list|(
name|role
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|eraseDatabase
parameter_list|()
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"eraseDatabase not implemented"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

