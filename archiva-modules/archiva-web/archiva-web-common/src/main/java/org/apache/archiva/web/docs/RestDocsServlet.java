begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
operator|.
name|docs
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|text
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|Jsoup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|select
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M4  */
end_comment

begin_class
specifier|public
class|class
name|RestDocsServlet
extends|extends
name|HttpServlet
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"docs request to path: {}"
argument_list|,
name|req
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|req
operator|.
name|getPathInfo
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|path
argument_list|,
literal|".xsd"
argument_list|)
condition|)
block|{
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeXml11
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//IOUtils.copy( is, resp.getOutputStream() );
return|return;
block|}
name|String
name|startPath
init|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
comment|// replace all links !!
name|Document
name|document
init|=
name|Jsoup
operator|.
name|parse
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|document
operator|.
name|body
argument_list|()
operator|.
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Elements
name|links
init|=
name|body
operator|.
name|select
argument_list|(
literal|"a[href]"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|link
range|:
name|links
control|)
block|{
name|link
operator|.
name|attr
argument_list|(
literal|"href"
argument_list|,
literal|"#"
operator|+
name|startPath
operator|+
literal|"/"
operator|+
name|link
operator|.
name|attr
argument_list|(
literal|"href"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Elements
name|datalinks
init|=
name|body
operator|.
name|select
argument_list|(
literal|"[data-href]"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|link
range|:
name|datalinks
control|)
block|{
name|link
operator|.
name|attr
argument_list|(
literal|"data-href"
argument_list|,
literal|"#"
operator|+
name|startPath
operator|+
literal|"/"
operator|+
name|link
operator|.
name|attr
argument_list|(
literal|"data-href"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Elements
name|codes
init|=
name|body
operator|.
name|select
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|code
range|:
name|codes
control|)
block|{
name|code
operator|.
name|attr
argument_list|(
literal|"class"
argument_list|,
name|code
operator|.
name|attr
argument_list|(
literal|"class"
argument_list|)
operator|+
literal|" nice-code"
argument_list|)
expr_stmt|;
block|}
comment|//default generated enunciate use h1/h2/h3 which is quite big so transform to h3/h4/h5
name|Elements
name|headers
init|=
name|body
operator|.
name|select
argument_list|(
literal|"h1"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|header
range|:
name|headers
control|)
block|{
name|header
operator|.
name|tagName
argument_list|(
literal|"h3"
argument_list|)
expr_stmt|;
block|}
name|headers
operator|=
name|body
operator|.
name|select
argument_list|(
literal|"h2"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|header
range|:
name|headers
control|)
block|{
name|header
operator|.
name|tagName
argument_list|(
literal|"h4"
argument_list|)
expr_stmt|;
block|}
name|headers
operator|=
name|body
operator|.
name|select
argument_list|(
literal|"h3"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|header
range|:
name|headers
control|)
block|{
name|header
operator|.
name|tagName
argument_list|(
literal|"h5"
argument_list|)
expr_stmt|;
block|}
name|Document
name|res
init|=
operator|new
name|Document
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|res
operator|.
name|appendChild
argument_list|(
name|body
operator|.
name|select
argument_list|(
literal|"div[id=main]"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|Elements
name|scripts
init|=
name|body
operator|.
name|select
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|script
range|:
name|scripts
control|)
block|{
name|res
operator|.
name|appendChild
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|res
operator|.
name|outerHtml
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

