begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * UserRepositories stub used for testing.  *  *  */
end_comment

begin_class
specifier|public
class|class
name|UserRepositoriesStub
implements|implements
name|UserRepositories
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repoIds
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test-repo"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|createMissingRepositoryRoles
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|ArchivaSecurityException
block|{
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getObservableRepositoryIds
parameter_list|(
name|String
name|principal
parameter_list|)
throws|throws
name|ArchivaSecurityException
block|{
return|return
name|repoIds
return|;
block|}
specifier|public
name|void
name|setObservableRepositoryIds
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repoIds
parameter_list|)
block|{
name|this
operator|.
name|repoIds
operator|=
name|repoIds
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAuthorizedToUploadArtifacts
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|repoId
parameter_list|)
throws|throws
name|ArchivaSecurityException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAuthorizedToDeleteArtifacts
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|repoId
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getManagableRepositoryIds
parameter_list|(
name|String
name|principal
parameter_list|)
throws|throws
name|ArchivaSecurityException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRepoIds
parameter_list|()
block|{
return|return
name|repoIds
return|;
block|}
specifier|public
name|void
name|setRepoIds
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repoIds
parameter_list|)
block|{
name|this
operator|.
name|repoIds
operator|=
name|repoIds
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getAccessibleRepositories
parameter_list|(
name|String
name|principal
parameter_list|)
throws|throws
name|ArchivaSecurityException
throws|,
name|AccessDeniedException
throws|,
name|PrincipalNotFoundException
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

