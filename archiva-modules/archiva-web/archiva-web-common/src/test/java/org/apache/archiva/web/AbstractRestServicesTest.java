begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|web
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|datatype
operator|.
name|jsr310
operator|.
name|JavaTimeModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|JacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|security
operator|.
name|role
operator|.
name|RedbackRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|LdapGroupMappingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|LoginService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RoleManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|UserService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|AuthenticationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|BaseSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|FakeCreateAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|CXFServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|ContextLoaderListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractRestServicesTest
extends|extends
name|TestCase
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|Server
argument_list|>
name|server
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|ServerConnector
argument_list|>
name|serverConnector
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|authorizationHeader
init|=
name|getAdminAuthzHeader
argument_list|()
decl_stmt|;
comment|/**      * Returns the server that was started, or null if not initialized before.      * @return      */
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|server
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
name|ServerConnector
name|connector
init|=
name|serverConnector
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
return|return
name|connector
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
name|JacksonJaxbJsonProvider
name|getJsonProvider
parameter_list|()
block|{
name|JacksonJaxbJsonProvider
name|provider
init|=
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|( )
decl_stmt|;
name|mapper
operator|.
name|registerModule
argument_list|(
operator|new
name|JavaTimeModule
argument_list|( )
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setMapper
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
return|return
name|provider
return|;
block|}
comment|/**      * Returns true, if the server does exist and is running.      * @return true, if server does exist and is running.      */
specifier|public
name|boolean
name|isServerRunning
parameter_list|()
block|{
return|return
name|this
operator|.
name|server
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|server
operator|.
name|get
argument_list|()
operator|.
name|isRunning
argument_list|()
return|;
block|}
comment|/**      * Returns the timeout in ms for rest requests. The timeout can be set by      * the system property<code>rest.test.timeout</code>.      * @return The timeout value in ms.      */
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|Long
operator|.
name|getLong
argument_list|(
literal|"rest.test.timeout"
argument_list|,
literal|1000000
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|password
parameter_list|)
block|{
return|return
literal|"Basic "
operator|+
name|Base64Utility
operator|.
name|encode
argument_list|(
operator|(
name|uid
operator|+
literal|":"
operator|+
name|password
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getAdminAuthzHeader
parameter_list|()
block|{
return|return
name|encode
argument_list|(
name|RedbackRoleConstants
operator|.
name|ADMINISTRATOR_ACCOUNT_NAME
argument_list|,
name|BaseSetup
operator|.
name|getAdminPwd
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSpringConfigLocation
parameter_list|()
block|{
return|return
literal|"classpath*:spring-context.xml,classpath*:META-INF/spring-context.xml"
return|;
block|}
specifier|protected
name|String
name|getRestServicesPath
parameter_list|()
block|{
return|return
literal|"restServices"
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting server"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"User config {}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"archiva.user.configFileName"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Appserver base {}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"appserver.base"
argument_list|)
argument_list|)
expr_stmt|;
name|Server
name|myServer
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|this
operator|.
name|server
operator|.
name|set
argument_list|(
name|myServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverConnector
operator|.
name|set
argument_list|(
operator|new
name|ServerConnector
argument_list|(
name|myServer
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|myServer
operator|.
name|addConnector
argument_list|(
name|serverConnector
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ServletHolder
name|servletHolder
init|=
operator|new
name|ServletHolder
argument_list|(
operator|new
name|CXFServlet
argument_list|()
argument_list|)
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setResourceBase
argument_list|(
name|SystemUtils
operator|.
name|JAVA_IO_TMPDIR
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSessionHandler
argument_list|(
operator|new
name|SessionHandler
argument_list|(  )
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|servletHolder
argument_list|,
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"contextConfigLocation"
argument_list|,
name|getSpringConfigLocation
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addEventListener
argument_list|(
operator|new
name|ContextLoaderListener
argument_list|()
argument_list|)
expr_stmt|;
name|getServer
argument_list|()
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|getServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Jetty dump: {}"
argument_list|,
name|getServer
argument_list|()
operator|.
name|dump
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Started server on port {}"
argument_list|,
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|UserService
name|userService
init|=
name|getUserService
argument_list|()
decl_stmt|;
name|User
name|adminUser
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
name|adminUser
operator|.
name|setUsername
argument_list|(
name|RedbackRoleConstants
operator|.
name|ADMINISTRATOR_ACCOUNT_NAME
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setPassword
argument_list|(
name|BaseSetup
operator|.
name|getAdminPwd
argument_list|()
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setFullName
argument_list|(
literal|"the admin user"
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setEmail
argument_list|(
literal|"toto@toto.fr"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|userService
operator|.
name|createAdminUser
argument_list|(
name|adminUser
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Could not create admin user."
argument_list|)
expr_stmt|;
block|}
name|FakeCreateAdminService
name|fakeCreateAdminService
init|=
name|getFakeCreateAdminService
argument_list|()
decl_stmt|;
comment|//assertTrue( res.booleanValue() );
block|}
specifier|protected
name|FakeCreateAdminService
name|getFakeCreateAdminService
parameter_list|()
block|{
return|return
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/fakeCreateAdminService/"
argument_list|,
name|FakeCreateAdminService
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|getJsonProvider
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping server"
argument_list|)
expr_stmt|;
name|getServer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|UserService
name|getUserService
parameter_list|()
block|{
return|return
name|getUserService
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|// START SNIPPET: get-user-service
specifier|protected
name|UserService
name|getUserService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|UserService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/redbackServices/"
argument_list|,
name|UserService
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// time out for debuging purpose
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
comment|// END SNIPPET: get-user-service
specifier|protected
name|RoleManagementService
name|getRoleManagementService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|RoleManagementService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/redbackServices/"
argument_list|,
name|RoleManagementService
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// for debuging purpose
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|LoginService
name|getLoginService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|LoginService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/redbackServices/"
argument_list|,
name|LoginService
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|getJsonProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// for debuging purpose
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|AuthenticationService
name|getLoginServiceV2
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|AuthenticationService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/v2/redback/"
argument_list|,
name|AuthenticationService
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|getJsonProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// for debuging purpose
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|LdapGroupMappingService
name|getLdapGroupMappingService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|LdapGroupMappingService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/redbackServices/"
argument_list|,
name|LdapGroupMappingService
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|getJsonProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// for debuging purpose
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
block|}
end_class

end_unit

