begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webapp
operator|.
name|ui
operator|.
name|services
operator|.
name|api
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webapp
operator|.
name|ui
operator|.
name|services
operator|.
name|model
operator|.
name|FileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"fileUploadService#rest"
argument_list|)
specifier|public
class|class
name|DefaultFileUploadService
implements|implements
name|FileUploadService
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Context
specifier|private
name|HttpServletRequest
name|httpServletRequest
decl_stmt|;
annotation|@
name|Context
specifier|private
name|HttpServletResponse
name|httpServletResponse
decl_stmt|;
specifier|public
name|FileMetadata
name|post
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|packaging
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|generatePom
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"uploading file:"
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"upload-artifact"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|httpServletRequest
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|FileMetadata
name|fileMetadata
init|=
operator|new
name|FileMetadata
argument_list|(
literal|"thefile"
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|,
literal|"theurl"
argument_list|)
decl_stmt|;
name|fileMetadata
operator|.
name|setDeleteUrl
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fileMetadata
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|deleteFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|SystemUtils
operator|.
name|getJavaIoTmpDir
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"delete file:{},exists:{}"
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|file
operator|.
name|delete
argument_list|()
return|;
block|}
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
end_class

end_unit

