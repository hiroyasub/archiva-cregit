begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArtifactTransferRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|InternalServerErrorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|CopyArtifactTest
extends|extends
name|AbstractArchivaRestTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|copyToAnEmptyRepo
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|initSourceTargetRepo
argument_list|()
expr_stmt|;
comment|// START SNIPPET: copy-artifact
comment|// configure the artifact you want to copy
comment|// if package ommited default will be jar
name|ArtifactTransferRequest
name|artifactTransferRequest
init|=
operator|new
name|ArtifactTransferRequest
argument_list|()
decl_stmt|;
name|artifactTransferRequest
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.karaf.features"
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setArtifactId
argument_list|(
literal|"org.apache.karaf.features.core"
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setVersion
argument_list|(
literal|"2.2.2"
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setRepositoryId
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setTargetRepositoryId
argument_list|(
name|TARGET_REPO_ID
argument_list|)
expr_stmt|;
comment|// retrieve the service
name|RepositoriesService
name|repositoriesService
init|=
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
comment|// copy the artifact
name|Boolean
name|res
init|=
name|repositoriesService
operator|.
name|copyArtifact
argument_list|(
name|artifactTransferRequest
argument_list|)
decl_stmt|;
comment|// END SNIPPET: copy-artifact
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|String
name|targetRepoPath
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|artifact
init|=
name|Paths
operator|.
name|get
argument_list|(
name|targetRepoPath
argument_list|,
literal|"/org/apache/karaf/features/org.apache.karaf.features.core/2.2.2/org.apache.karaf.features.core-2.2.2.jar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|pom
init|=
name|Paths
operator|.
name|get
argument_list|(
name|targetRepoPath
argument_list|,
literal|"/org/apache/karaf/features/org.apache.karaf.features.core/2.2.2/org.apache.karaf.features.core-2.2.2.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not exists "
operator|+
name|pom
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|pom
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO find a way to force metadata generation and test it !!
block|}
finally|finally
block|{
name|cleanRepos
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InternalServerErrorException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyNonExistingArtifact
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|initSourceTargetRepo
argument_list|()
expr_stmt|;
name|ArtifactTransferRequest
name|artifactTransferRequest
init|=
operator|new
name|ArtifactTransferRequest
argument_list|()
decl_stmt|;
name|artifactTransferRequest
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.karaf.features"
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setArtifactId
argument_list|(
literal|"org.apache.karaf.features.core"
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setVersion
argument_list|(
literal|"3.0.6552"
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setRepositoryId
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
expr_stmt|;
name|artifactTransferRequest
operator|.
name|setTargetRepositoryId
argument_list|(
name|TARGET_REPO_ID
argument_list|)
expr_stmt|;
name|RepositoriesService
name|repositoriesService
init|=
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|repositoriesService
operator|.
name|copyArtifact
argument_list|(
name|artifactTransferRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InternalServerErrorException
name|e
parameter_list|)
block|{
comment|// FIXME this doesn't work anymore with cxf 3.x????
comment|//Assertions.assertThat( e.getResponse().getStatusInfo().getReasonPhrase() ) //
comment|//    .contains( "cannot find artifact" );
comment|// previous test with cxf 2.x
comment|//assertTrue( e.getMessage() + " do not contains ''",
comment|//            StringUtils.contains( e.getMessage(), "cannot find artifact" ) );
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|cleanRepos
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
specifier|public
name|void
name|copyToAnExistingRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|initSourceTargetRepo
argument_list|()
expr_stmt|;
name|cleanRepos
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

