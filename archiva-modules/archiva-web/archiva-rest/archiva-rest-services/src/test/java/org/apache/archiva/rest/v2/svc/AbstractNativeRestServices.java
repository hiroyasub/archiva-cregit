begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|v2
operator|.
name|svc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|PropertyNamingStrategy
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|RestAssured
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|builder
operator|.
name|RequestSpecBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|config
operator|.
name|ObjectMapperConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|config
operator|.
name|RestAssuredConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|path
operator|.
name|json
operator|.
name|mapper
operator|.
name|factory
operator|.
name|Jackson2ObjectMapperFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|response
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|io
operator|.
name|restassured
operator|.
name|specification
operator|.
name|RequestSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|security
operator|.
name|role
operator|.
name|RedbackRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|BaseSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|CXFServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|ContextLoaderListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|restassured
operator|.
name|RestAssured
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|restassured
operator|.
name|http
operator|.
name|ContentType
operator|.
name|JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Native REST tests do not use the JAX-RS client and can be used with a remote  * REST API service. The tests  *  * @author Martin Schreier<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Tag
argument_list|(
literal|"rest-native"
argument_list|)
annotation|@
name|Tag
argument_list|(
literal|"rest-v2"
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractNativeRestServices
block|{
specifier|private
name|AtomicReference
argument_list|<
name|Path
argument_list|>
name|projectDir
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Path
argument_list|>
name|appServerBase
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Path
argument_list|>
name|basePath
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STOPPED
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STOPPING
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STARTING
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STARTED
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ERROR
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|startServer
decl_stmt|;
specifier|private
specifier|final
name|String
name|serverPort
decl_stmt|;
specifier|private
specifier|final
name|String
name|baseUri
decl_stmt|;
specifier|private
name|RequestSpecification
name|requestSpec
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|( )
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|Server
argument_list|>
name|server
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|ServerConnector
argument_list|>
name|serverConnector
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
specifier|static
name|AtomicInteger
name|serverStarted
init|=
operator|new
name|AtomicInteger
argument_list|(
name|STOPPED
argument_list|)
decl_stmt|;
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|RoleManager
name|roleManager
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|remoteService
decl_stmt|;
specifier|private
name|String
name|adminToken
decl_stmt|;
specifier|private
name|String
name|adminRefreshToken
decl_stmt|;
specifier|public
name|AbstractNativeRestServices
parameter_list|( )
block|{
name|this
operator|.
name|startServer
operator|=
name|BaseSetup
operator|.
name|startServer
argument_list|( )
expr_stmt|;
name|this
operator|.
name|serverPort
operator|=
name|BaseSetup
operator|.
name|getServerPort
argument_list|( )
expr_stmt|;
name|this
operator|.
name|baseUri
operator|=
name|BaseSetup
operator|.
name|getBaseUri
argument_list|( )
expr_stmt|;
if|if
condition|(
name|startServer
condition|)
block|{
name|this
operator|.
name|remoteService
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|remoteService
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|String
name|getServicePath
parameter_list|( )
function_decl|;
specifier|protected
name|String
name|getSpringConfigLocation
parameter_list|( )
block|{
return|return
literal|"classpath*:META-INF/spring-context.xml,classpath:META-INF/spring-context-native-test.xml"
return|;
block|}
specifier|protected
name|RequestSpecification
name|getRequestSpec
parameter_list|( )
block|{
return|return
name|this
operator|.
name|requestSpec
return|;
block|}
specifier|protected
name|String
name|getContextRoot
parameter_list|( )
block|{
return|return
literal|"/api"
return|;
block|}
specifier|protected
name|String
name|getServiceBasePath
parameter_list|( )
block|{
return|return
literal|"/v2/archiva"
return|;
block|}
specifier|protected
name|String
name|getRedbackServiceBasePath
parameter_list|( )
block|{
return|return
literal|"/v2/redback"
return|;
block|}
specifier|protected
name|String
name|getBasePath
parameter_list|( )
block|{
return|return
operator|new
name|StringBuilder
argument_list|( )
operator|.
name|append
argument_list|(
name|getContextRoot
argument_list|( )
argument_list|)
operator|.
name|append
argument_list|(
name|getServiceBasePath
argument_list|( )
argument_list|)
operator|.
name|append
argument_list|(
name|getServicePath
argument_list|( )
argument_list|)
operator|.
name|toString
argument_list|( )
return|;
block|}
comment|/**      * Returns the server that was started, or null if not initialized before.      *      * @return      */
specifier|public
name|Server
name|getServer
parameter_list|( )
block|{
return|return
name|this
operator|.
name|server
operator|.
name|get
argument_list|( )
return|;
block|}
specifier|public
name|int
name|getServerPort
parameter_list|( )
block|{
name|ServerConnector
name|connector
init|=
name|serverConnector
operator|.
name|get
argument_list|( )
decl_stmt|;
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
return|return
name|connector
operator|.
name|getLocalPort
argument_list|( )
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**      * Returns true, if the server does exist and is running.      *      * @return true, if server does exist and is running.      */
specifier|public
name|boolean
name|isServerRunning
parameter_list|( )
block|{
return|return
name|serverStarted
operator|.
name|get
argument_list|( )
operator|==
name|STARTED
operator|&&
name|this
operator|.
name|server
operator|.
name|get
argument_list|( )
operator|!=
literal|null
operator|&&
name|this
operator|.
name|server
operator|.
name|get
argument_list|( )
operator|.
name|isRunning
argument_list|( )
return|;
block|}
specifier|private
name|UserManager
name|getUserManager
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|userManager
operator|==
literal|null
condition|)
block|{
name|UserManager
name|userManager
init|=
name|ContextLoaderListener
operator|.
name|getCurrentWebApplicationContext
argument_list|( )
operator|.
name|getBean
argument_list|(
literal|"userManager#default"
argument_list|,
name|UserManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
block|}
return|return
name|this
operator|.
name|userManager
return|;
block|}
specifier|private
name|RoleManager
name|getRoleManager
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|roleManager
operator|==
literal|null
condition|)
block|{
name|RoleManager
name|roleManager
init|=
name|ContextLoaderListener
operator|.
name|getCurrentWebApplicationContext
argument_list|( )
operator|.
name|getBean
argument_list|(
literal|"roleManager"
argument_list|,
name|RoleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|roleManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|roleManager
operator|=
name|roleManager
expr_stmt|;
block|}
return|return
name|this
operator|.
name|roleManager
return|;
block|}
specifier|protected
name|String
name|getAdminPwd
parameter_list|( )
block|{
return|return
name|BaseSetup
operator|.
name|getAdminPwd
argument_list|( )
return|;
block|}
specifier|protected
name|String
name|getAdminUser
parameter_list|( )
block|{
return|return
name|RedbackRoleConstants
operator|.
name|ADMINISTRATOR_ACCOUNT_NAME
return|;
block|}
specifier|private
name|void
name|setupAdminUser
parameter_list|( )
throws|throws
name|UserManagerException
throws|,
name|RoleManagerException
block|{
name|UserManager
name|um
init|=
name|getUserManager
argument_list|( )
decl_stmt|;
name|User
name|adminUser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adminUser
operator|=
name|um
operator|.
name|findUser
argument_list|(
name|getAdminUser
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|adminUser
operator|=
name|um
operator|.
name|createUser
argument_list|(
name|getAdminUser
argument_list|( )
argument_list|,
literal|"Administrator"
argument_list|,
literal|"admin@local.home"
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setUsername
argument_list|(
name|getAdminUser
argument_list|( )
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setPassword
argument_list|(
name|getAdminPwd
argument_list|( )
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setFullName
argument_list|(
literal|"the admin user"
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setEmail
argument_list|(
literal|"toto@toto.fr"
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setPermanent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setValidated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adminUser
operator|.
name|setPasswordChangeRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|adminUser
operator|==
literal|null
condition|)
block|{
name|um
operator|.
name|addUser
argument_list|(
name|adminUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|um
operator|.
name|updateUser
argument_list|(
name|adminUser
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|getRoleManager
argument_list|( )
operator|.
name|assignRole
argument_list|(
literal|"system-administrator"
argument_list|,
name|adminUser
operator|.
name|getUsername
argument_list|( )
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Path
name|getProjectDirectory
parameter_list|()
block|{
if|if
condition|(
name|projectDir
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|propVal
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"mvn.project.base.dir"
argument_list|)
decl_stmt|;
name|Path
name|newVal
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|propVal
argument_list|)
condition|)
block|{
name|newVal
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newVal
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|propVal
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|projectDir
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
return|return
name|projectDir
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|Path
name|getBasedir
parameter_list|()
block|{
if|if
condition|(
name|basePath
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|baseDirPath
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|baseDir
argument_list|)
condition|)
block|{
name|baseDirPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseDirPath
operator|=
name|getProjectDirectory
argument_list|( )
expr_stmt|;
block|}
name|basePath
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|baseDirPath
argument_list|)
expr_stmt|;
block|}
return|return
name|basePath
operator|.
name|get
argument_list|( )
return|;
block|}
name|Path
name|getAppserverBase
parameter_list|()
block|{
if|if
condition|(
name|appServerBase
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|basePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"appserver.base"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|appserverPath
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|appserverPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|basePath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|( )
expr_stmt|;
block|}
else|else
block|{
name|appserverPath
operator|=
name|getBasedir
argument_list|( )
operator|.
name|resolve
argument_list|(
literal|"target"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"appserver-base-"
operator|+
name|LocalTime
operator|.
name|now
argument_list|( )
operator|.
name|toSecondOfDay
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|appServerBase
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|appserverPath
argument_list|)
expr_stmt|;
block|}
return|return
name|appServerBase
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|removeAppsubFolder
parameter_list|(
name|Path
name|appServerBase
parameter_list|,
name|String
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|directory
init|=
name|appServerBase
operator|.
name|resolve
argument_list|(
name|folder
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startServer
parameter_list|( )
throws|throws
name|Exception
block|{
if|if
condition|(
name|serverStarted
operator|.
name|compareAndSet
argument_list|(
name|STOPPED
argument_list|,
name|STARTING
argument_list|)
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting server"
argument_list|)
expr_stmt|;
name|Path
name|appServerBase
init|=
name|getAppserverBase
argument_list|( )
decl_stmt|;
name|removeAppsubFolder
argument_list|(
name|appServerBase
argument_list|,
literal|"jcr"
argument_list|)
expr_stmt|;
name|removeAppsubFolder
argument_list|(
name|appServerBase
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
name|removeAppsubFolder
argument_list|(
name|appServerBase
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|Server
name|myServer
init|=
operator|new
name|Server
argument_list|( )
decl_stmt|;
name|this
operator|.
name|server
operator|.
name|set
argument_list|(
name|myServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverConnector
operator|.
name|set
argument_list|(
operator|new
name|ServerConnector
argument_list|(
name|myServer
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|myServer
operator|.
name|addConnector
argument_list|(
name|serverConnector
operator|.
name|get
argument_list|( )
argument_list|)
expr_stmt|;
name|ServletHolder
name|servletHolder
init|=
operator|new
name|ServletHolder
argument_list|(
operator|new
name|CXFServlet
argument_list|( )
argument_list|)
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setResourceBase
argument_list|(
name|SystemUtils
operator|.
name|JAVA_IO_TMPDIR
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSessionHandler
argument_list|(
operator|new
name|SessionHandler
argument_list|( )
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|servletHolder
argument_list|,
name|getContextRoot
argument_list|( )
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"contextConfigLocation"
argument_list|,
name|getSpringConfigLocation
argument_list|( )
argument_list|)
expr_stmt|;
name|context
operator|.
name|addEventListener
argument_list|(
operator|new
name|ContextLoaderListener
argument_list|( )
argument_list|)
expr_stmt|;
name|getServer
argument_list|( )
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|getServer
argument_list|( )
operator|.
name|start
argument_list|( )
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|( )
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Jetty dump: {}"
argument_list|,
name|getServer
argument_list|( )
operator|.
name|dump
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|setupAdminUser
argument_list|( )
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started server on port {}"
argument_list|,
name|getServerPort
argument_list|( )
argument_list|)
expr_stmt|;
name|serverStarted
operator|.
name|set
argument_list|(
name|STARTED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// In case, if the last statement was not reached
name|serverStarted
operator|.
name|compareAndSet
argument_list|(
name|STARTING
argument_list|,
name|ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|stopServer
parameter_list|( )
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|serverStarted
operator|.
name|compareAndSet
argument_list|(
name|STARTED
argument_list|,
name|STOPPING
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|Server
name|myServer
init|=
name|getServer
argument_list|( )
decl_stmt|;
if|if
condition|(
name|myServer
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping server"
argument_list|)
expr_stmt|;
name|myServer
operator|.
name|stop
argument_list|( )
expr_stmt|;
block|}
name|serverStarted
operator|.
name|set
argument_list|(
name|STOPPED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|serverStarted
operator|.
name|compareAndSet
argument_list|(
name|STOPPING
argument_list|,
name|ERROR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Server is not in STARTED state!"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupNative
parameter_list|( )
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|startServer
condition|)
block|{
name|startServer
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|serverPort
argument_list|)
condition|)
block|{
name|RestAssured
operator|.
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|serverPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RestAssured
operator|.
name|port
operator|=
name|getServerPort
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|baseUri
argument_list|)
condition|)
block|{
name|RestAssured
operator|.
name|baseURI
operator|=
name|baseUri
expr_stmt|;
block|}
else|else
block|{
name|RestAssured
operator|.
name|baseURI
operator|=
literal|"http://localhost"
expr_stmt|;
block|}
name|String
name|basePath
init|=
name|getBasePath
argument_list|( )
decl_stmt|;
name|this
operator|.
name|requestSpec
operator|=
name|getRequestSpecBuilder
argument_list|( )
operator|.
name|build
argument_list|( )
expr_stmt|;
name|RestAssured
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
name|RestAssured
operator|.
name|config
operator|=
name|RestAssuredConfig
operator|.
name|config
argument_list|()
operator|.
name|objectMapperConfig
argument_list|(
operator|new
name|ObjectMapperConfig
argument_list|()
operator|.
name|jackson2ObjectMapperFactory
argument_list|(
parameter_list|(
name|cls
parameter_list|,
name|charset
parameter_list|)
lambda|->
block|{
name|ObjectMapper
name|om
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|findAndRegisterModules
argument_list|()
decl_stmt|;
name|om
operator|.
name|configure
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|om
operator|.
name|setPropertyNamingStrategy
argument_list|(
name|PropertyNamingStrategy
operator|.
name|SNAKE_CASE
argument_list|)
expr_stmt|;
return|return
name|om
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RequestSpecBuilder
name|getRequestSpecBuilder
parameter_list|( )
block|{
return|return
name|getRequestSpecBuilder
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|RequestSpecBuilder
name|getRequestSpecBuilder
parameter_list|(
name|String
name|basePath
parameter_list|)
block|{
name|String
name|myBasePath
init|=
name|basePath
operator|==
literal|null
condition|?
name|getBasePath
argument_list|( )
else|:
name|basePath
decl_stmt|;
return|return
operator|new
name|RequestSpecBuilder
argument_list|( )
operator|.
name|setBaseUri
argument_list|(
name|baseURI
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|setBasePath
argument_list|(
name|myBasePath
argument_list|)
operator|.
name|addHeader
argument_list|(
literal|"Origin"
argument_list|,
name|RestAssured
operator|.
name|baseURI
operator|+
literal|":"
operator|+
name|RestAssured
operator|.
name|port
argument_list|)
return|;
block|}
specifier|protected
name|RequestSpecBuilder
name|getAuthRequestSpecBuilder
parameter_list|( )
block|{
return|return
operator|new
name|RequestSpecBuilder
argument_list|( )
operator|.
name|setBaseUri
argument_list|(
name|baseURI
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|setBasePath
argument_list|(
operator|new
name|StringBuilder
argument_list|( )
operator|.
name|append
argument_list|(
name|getContextRoot
argument_list|( )
argument_list|)
operator|.
name|append
argument_list|(
name|getRedbackServiceBasePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/auth"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addHeader
argument_list|(
literal|"Origin"
argument_list|,
name|RestAssured
operator|.
name|baseURI
operator|+
literal|":"
operator|+
name|RestAssured
operator|.
name|port
argument_list|)
return|;
block|}
specifier|protected
name|RequestSpecification
name|getRequestSpec
parameter_list|(
name|String
name|bearerToken
parameter_list|)
block|{
return|return
name|getRequestSpecBuilder
argument_list|( )
operator|.
name|addHeader
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Bearer "
operator|+
name|bearerToken
argument_list|)
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|protected
name|RequestSpecification
name|getRequestSpec
parameter_list|(
name|String
name|bearerToken
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|getRequestSpecBuilder
argument_list|(
name|path
argument_list|)
operator|.
name|addHeader
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Bearer "
operator|+
name|bearerToken
argument_list|)
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|protected
name|void
name|shutdownNative
parameter_list|( )
throws|throws
name|Exception
block|{
if|if
condition|(
name|startServer
condition|)
block|{
name|stopServer
argument_list|( )
expr_stmt|;
block|}
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|User
name|addRemoteUser
parameter_list|(
name|String
name|userid
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|mail
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|initAdminToken
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jsonAsMap
operator|.
name|put
argument_list|(
literal|"grant_type"
argument_list|,
literal|"authorization_code"
argument_list|)
expr_stmt|;
name|jsonAsMap
operator|.
name|put
argument_list|(
literal|"user_id"
argument_list|,
name|getAdminUser
argument_list|()
argument_list|)
expr_stmt|;
name|jsonAsMap
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|getAdminPwd
argument_list|()
argument_list|)
expr_stmt|;
name|Response
name|result
init|=
name|given
argument_list|( )
operator|.
name|spec
argument_list|(
name|getAuthRequestSpecBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|contentType
argument_list|(
name|JSON
argument_list|)
operator|.
name|body
argument_list|(
name|jsonAsMap
argument_list|)
operator|.
name|when
argument_list|( )
operator|.
name|post
argument_list|(
literal|"/authenticate"
argument_list|)
operator|.
name|then
argument_list|( )
operator|.
name|statusCode
argument_list|(
literal|200
argument_list|)
operator|.
name|extract
argument_list|( )
operator|.
name|response
argument_list|( )
decl_stmt|;
name|this
operator|.
name|adminToken
operator|=
name|result
operator|.
name|body
argument_list|( )
operator|.
name|jsonPath
argument_list|( )
operator|.
name|getString
argument_list|(
literal|"access_token"
argument_list|)
expr_stmt|;
name|this
operator|.
name|adminRefreshToken
operator|=
name|result
operator|.
name|body
argument_list|( )
operator|.
name|jsonPath
argument_list|( )
operator|.
name|getString
argument_list|(
literal|"refresh_token"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getUserToken
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jsonAsMap
operator|.
name|put
argument_list|(
literal|"grant_type"
argument_list|,
literal|"authorization_code"
argument_list|)
expr_stmt|;
name|jsonAsMap
operator|.
name|put
argument_list|(
literal|"user_id"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|jsonAsMap
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|Response
name|result
init|=
name|given
argument_list|( )
operator|.
name|spec
argument_list|(
name|getAuthRequestSpecBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|contentType
argument_list|(
name|JSON
argument_list|)
operator|.
name|body
argument_list|(
name|jsonAsMap
argument_list|)
operator|.
name|when
argument_list|( )
operator|.
name|post
argument_list|(
literal|"/authenticate"
argument_list|)
operator|.
name|then
argument_list|( )
operator|.
name|statusCode
argument_list|(
literal|200
argument_list|)
operator|.
name|extract
argument_list|( )
operator|.
name|response
argument_list|( )
decl_stmt|;
return|return
name|result
operator|.
name|body
argument_list|( )
operator|.
name|jsonPath
argument_list|( )
operator|.
name|getString
argument_list|(
literal|"access_token"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getAdminToken
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|adminToken
operator|==
literal|null
condition|)
block|{
name|initAdminToken
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|adminToken
return|;
block|}
specifier|protected
name|String
name|getAdminRefreshToken
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|adminRefreshToken
operator|==
literal|null
condition|)
block|{
name|initAdminToken
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|adminRefreshToken
return|;
block|}
specifier|public
name|boolean
name|isRemoteService
parameter_list|()
block|{
return|return
name|this
operator|.
name|remoteService
return|;
block|}
block|}
end_class

end_unit

