begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|JacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|xml
operator|.
name|JacksonJaxbXMLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RedbackServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|AbstractRestServicesTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaAdministrationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|BrowseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|CommonServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ManagedRepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|MergeRepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|NetworkProxyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|PingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|PluginsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ProxyConnectorRuleService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ProxyConnectorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RedbackRuntimeConfigurationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RemoteRepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoryGroupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
operator|.
name|ArchivaBlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaBlockJUnit4ClassRunner
operator|.
name|class
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractArchivaRestTest
extends|extends
name|AbstractRestServicesTest
block|{
specifier|private
name|AtomicReference
argument_list|<
name|Path
argument_list|>
name|projectDir
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Path
argument_list|>
name|appServerBase
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Path
argument_list|>
name|basePath
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|boolean
name|reuseServer
init|=
literal|true
decl_stmt|;
specifier|protected
name|void
name|setReuseServer
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|reuseServer
operator|=
name|value
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isReuseServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|reuseServer
return|;
block|}
comment|/*      * Used by tryAssert to allow to throw exceptions in the lambda expression.      */
annotation|@
name|FunctionalInterface
specifier|protected
interface|interface
name|AssertFunction
block|{
name|void
name|accept
parameter_list|( )
throws|throws
name|Exception
function_decl|;
block|}
specifier|protected
name|void
name|tryAssert
parameter_list|(
name|AssertFunction
name|func
parameter_list|)
throws|throws
name|Exception
block|{
name|tryAssert
argument_list|(
name|func
argument_list|,
literal|10
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
comment|/*      * Runs the assert method until the assert is successful or the number of retries      * is reached. This is needed because the JCR Oak index update is asynchronous, so updates      * may not be visible immediately after the modification.      */
specifier|private
name|void
name|tryAssert
parameter_list|(
name|AssertFunction
name|func
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|sleepMillis
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
name|int
name|retry
init|=
name|retries
decl_stmt|;
while|while
condition|(
name|retry
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|func
operator|.
name|accept
argument_list|( )
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|AssertionError
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|sleep
argument_list|(
name|sleepMillis
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Retrying assert {}: {}"
argument_list|,
name|retry
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Retries: {}, Exception: {}"
argument_list|,
name|retry
argument_list|,
name|t
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry
operator|<=
literal|0
operator|&&
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
if|else if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
if|else if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
block|}
block|}
comment|// START SNIPPET: authz-header
comment|// guest with an empty password
specifier|public
specifier|static
name|String
name|guestAuthzHeader
init|=
literal|"Basic "
operator|+
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
operator|.
name|encode
argument_list|(
operator|(
literal|"guest"
operator|+
literal|":"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// with an other login/password
comment|//public String authzHeader =
comment|//    "Basic " + org.apache.cxf.common.util.Base64Utility.encode( ( "login" + ":password" ).getBytes() );
comment|// END SNIPPET: authz-header
name|Path
name|getAppserverBase
parameter_list|()
block|{
if|if
condition|(
name|appServerBase
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|basePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"appserver.base"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|appserverPath
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|appserverPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|basePath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|( )
expr_stmt|;
block|}
else|else
block|{
name|appserverPath
operator|=
name|getBasedir
argument_list|( )
operator|.
name|resolve
argument_list|(
literal|"target"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"appserver-base-"
operator|+
name|LocalTime
operator|.
name|now
argument_list|( )
operator|.
name|toSecondOfDay
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|appServerBase
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|appserverPath
argument_list|)
expr_stmt|;
block|}
return|return
name|appServerBase
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|checkRepo
parameter_list|()
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Test is ignored, because path to appserver contains whitespace characters!"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"appserver.base"
argument_list|)
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
comment|// skygo: was not possible to fix path in this particular module
comment|// Skip test if not in proper folder , otherwise test are not fair coz repository
comment|// cannot have space in their name.
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|(
operator|!
name|isReuseServer
argument_list|()
operator|)
operator|||
operator|(
name|isReuseServer
argument_list|()
operator|&&
operator|!
name|isServerRunning
argument_list|()
operator|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting new server reuse={}, running={}, instance={}, server={}"
argument_list|,
name|isReuseServer
argument_list|()
argument_list|,
name|isServerRunning
argument_list|()
argument_list|,
name|this
operator|.
name|hashCode
argument_list|()
argument_list|,
name|getServer
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getServer
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|appServerBase
init|=
name|getAppserverBase
argument_list|( )
decl_stmt|;
name|removeAppsubFolder
argument_list|(
name|appServerBase
argument_list|,
literal|"jcr"
argument_list|)
expr_stmt|;
name|removeAppsubFolder
argument_list|(
name|appServerBase
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
name|removeAppsubFolder
argument_list|(
name|appServerBase
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|super
operator|.
name|startServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reusing running server instance reuse={}, running={}"
argument_list|,
name|isReuseServer
argument_list|()
argument_list|,
name|isServerRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|stopServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isReuseServer
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping server reuse={}, running={}, instance={}, server={}"
argument_list|,
name|isReuseServer
argument_list|()
argument_list|,
name|isServerRunning
argument_list|()
argument_list|,
name|this
operator|.
name|hashCode
argument_list|()
argument_list|,
name|getServer
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getServer
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|stopServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Server not stopping reuse={}, running={}"
argument_list|,
name|isReuseServer
argument_list|()
argument_list|,
name|isServerRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeAppsubFolder
parameter_list|(
name|Path
name|appServerBase
parameter_list|,
name|String
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|directory
init|=
name|appServerBase
operator|.
name|resolve
argument_list|(
name|folder
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getSpringConfigLocation
parameter_list|()
block|{
return|return
literal|"classpath*:META-INF/spring-context.xml,classpath:META-INF/spring-context-test.xml"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getRestServicesPath
parameter_list|()
block|{
return|return
literal|"restServices"
return|;
block|}
specifier|protected
name|RepositoriesService
name|getRepositoriesService
parameter_list|()
block|{
return|return
name|getRepositoriesService
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|authzHeader
parameter_list|)
block|{
name|T
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|clazz
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ProxyConnectorRuleService
name|getProxyConnectorRuleService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
return|return
name|getService
argument_list|(
name|ProxyConnectorRuleService
operator|.
name|class
argument_list|,
name|authzHeader
argument_list|)
return|;
block|}
specifier|protected
name|MergeRepositoriesService
name|getMergeRepositoriesService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
return|return
name|getService
argument_list|(
name|MergeRepositoriesService
operator|.
name|class
argument_list|,
name|authzHeader
argument_list|)
return|;
block|}
specifier|protected
name|RepositoriesService
name|getRepositoriesService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
return|return
name|getService
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|authzHeader
argument_list|)
return|;
block|}
specifier|protected
name|ManagedRepositoriesService
name|getManagedRepositoriesService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
return|return
name|getService
argument_list|(
name|ManagedRepositoriesService
operator|.
name|class
argument_list|,
name|authzHeader
argument_list|)
return|;
block|}
specifier|protected
name|PingService
name|getPingService
parameter_list|()
block|{
return|return
name|getService
argument_list|(
name|PingService
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|PluginsService
name|getPluginsService
parameter_list|()
block|{
name|PluginsService
name|service
init|=
name|getService
argument_list|(
name|PluginsService
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|RemoteRepositoriesService
name|getRemoteRepositoriesService
parameter_list|()
block|{
return|return
name|getService
argument_list|(
name|RemoteRepositoriesService
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|RepositoryGroupService
name|getRepositoryGroupService
parameter_list|()
block|{
return|return
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|RepositoryGroupService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|ProxyConnectorService
name|getProxyConnectorService
parameter_list|()
block|{
name|ProxyConnectorService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|ProxyConnectorService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|NetworkProxyService
name|getNetworkProxyService
parameter_list|()
block|{
name|NetworkProxyService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|NetworkProxyService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ArchivaAdministrationService
name|getArchivaAdministrationService
parameter_list|()
block|{
name|ArchivaAdministrationService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|ArchivaAdministrationService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|RedbackRuntimeConfigurationService
name|getRedbackRuntimeConfigurationService
parameter_list|()
block|{
name|RedbackRuntimeConfigurationService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|RedbackRuntimeConfigurationService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|BrowseService
name|getBrowseService
parameter_list|(
name|String
name|authzHeader
parameter_list|,
name|boolean
name|useXml
parameter_list|)
block|{
comment|// START SNIPPET: cxf-browseservice-creation
name|BrowseService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|BrowseService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
comment|// to add authentification
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
comment|// Set the Referer header to your archiva server url
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
if|if
condition|(
name|useXml
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
comment|// END SNIPPET: cxf-browseservice-creation
block|}
specifier|protected
name|SearchService
name|getSearchService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
comment|// START SNIPPET: cxf-searchservice-creation
name|SearchService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|SearchService
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
comment|// to add authentification
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
comment|// Set the Referer header to your archiva server url
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// to configure read timeout
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
comment|// if you want to use json as exchange format xml is supported too
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
comment|// END SNIPPET: cxf-searchservice-creation
block|}
specifier|protected
name|CommonServices
name|getCommonServices
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|CommonServices
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|CommonServices
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JacksonJaxbJsonProvider
argument_list|( )
argument_list|,
operator|new
name|JacksonJaxbXMLProvider
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Referer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ManagedRepository
name|getTestManagedRepository
parameter_list|()
block|{
name|String
name|location
init|=
name|getAppserverBase
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"data/repositories/test-repo"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|ManagedRepository
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|"TEST"
argument_list|,
literal|"test"
argument_list|,
name|location
argument_list|,
literal|"default"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"2 * * * * ?"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"my nice repo"
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBaseUrl
parameter_list|()
block|{
name|String
name|baseUrlSysProps
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"archiva.baseRestUrl"
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|baseUrlSysProps
argument_list|)
condition|?
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
else|:
name|baseUrlSysProps
return|;
block|}
specifier|protected
name|Path
name|getProjectDirectory
parameter_list|()
block|{
if|if
condition|(
name|projectDir
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|propVal
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"mvn.project.base.dir"
argument_list|)
decl_stmt|;
name|Path
name|newVal
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|propVal
argument_list|)
condition|)
block|{
name|newVal
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newVal
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|propVal
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|projectDir
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
return|return
name|projectDir
operator|.
name|get
argument_list|()
return|;
block|}
comment|//-----------------------------------------------------
comment|// utilities to create repos for testing
comment|//-----------------------------------------------------
specifier|static
specifier|final
name|String
name|TARGET_REPO_ID
init|=
literal|"test-copy-target"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SOURCE_REPO_ID
init|=
literal|"test-origin-repo"
decl_stmt|;
specifier|protected
name|void
name|initSourceTargetRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|targetRepo
init|=
name|getAppserverBase
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"data/repositories/test-repo-copy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|targetRepo
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|targetRepo
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|targetRepo
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|targetRepo
argument_list|)
expr_stmt|;
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ManagedRepository
name|managedRepository
init|=
name|getTestManagedRepository
argument_list|()
decl_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|TARGET_REPO_ID
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setLocation
argument_list|(
name|targetRepo
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setCronExpression
argument_list|(
literal|"* * * * * ?"
argument_list|)
expr_stmt|;
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|addManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|originRepo
init|=
name|getAppserverBase
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"data/repositories/test-origin-repo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|originRepo
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|originRepo
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|originRepo
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|getProjectDirectory
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"src/test/repo-with-osgi"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|,
name|originRepo
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|managedRepository
operator|=
name|getTestManagedRepository
argument_list|()
expr_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setLocation
argument_list|(
name|originRepo
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|addManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
name|getArchivaAdministrationService
argument_list|()
operator|.
name|enabledKnownContentConsumer
argument_list|(
literal|"create-missing-checksums"
argument_list|)
expr_stmt|;
name|getArchivaAdministrationService
argument_list|()
operator|.
name|enabledKnownContentConsumer
argument_list|(
literal|"metadata-updater"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|cleanRepos
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"skip issue while cleaning test repository: this can cause test failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"skip issue while cleaning test repository: this can cause test failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|createAndIndexRepo
parameter_list|(
name|String
name|testRepoId
parameter_list|,
name|Path
name|srcRepoPath
parameter_list|,
name|Path
name|stagedSrcRepoPath
parameter_list|,
name|boolean
name|stageNeeded
parameter_list|)
throws|throws
name|ArchivaRestServiceException
throws|,
name|IOException
throws|,
name|RedbackServiceException
block|{
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|testRepoId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|testRepoId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ManagedRepository
name|managedRepository
init|=
operator|new
name|ManagedRepository
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|testRepoId
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setName
argument_list|(
literal|"test repo"
argument_list|)
expr_stmt|;
name|Path
name|badContent
init|=
name|srcRepoPath
operator|.
name|resolve
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|badContent
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|badContent
argument_list|)
expr_stmt|;
block|}
name|Path
name|repoPath
init|=
name|getAppserverBase
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"repositories"
argument_list|)
operator|.
name|resolve
argument_list|(
name|testRepoId
argument_list|)
decl_stmt|;
name|Path
name|stagedRepoPath
init|=
name|getAppserverBase
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"repositories"
argument_list|)
operator|.
name|resolve
argument_list|(
name|testRepoId
operator|+
literal|"-stage"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|repoPath
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|srcRepoPath
operator|.
name|toFile
argument_list|()
argument_list|,
name|repoPath
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stagedSrcRepoPath
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|stagedRepoPath
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|stagedSrcRepoPath
operator|.
name|toFile
argument_list|()
argument_list|,
name|stagedRepoPath
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|managedRepository
operator|.
name|setLocation
argument_list|(
name|repoPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|suffix
init|=
name|Long
operator|.
name|toString
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|baseDir
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"archiva-test-index"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
name|managedRepository
operator|.
name|setIndexDirectory
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|".indexer-"
operator|+
name|suffix
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setPackedIndexDirectory
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|".index-"
operator|+
name|suffix
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setStageRepoNeeded
argument_list|(
name|stageNeeded
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//managedRepository.setScanned( scanned );
name|ManagedRepositoriesService
name|service
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|service
operator|.
name|addManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|getRoleManagementService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|assignTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|testRepoId
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|getRoleManagementService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|assignTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|testRepoId
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanRepo
parameter_list|(
name|String
name|testRepoId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|scanRepositoryNow
argument_list|(
name|testRepoId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createAndIndexRepo
parameter_list|(
name|String
name|testRepoId
parameter_list|,
name|Path
name|srcRepoPath
parameter_list|)
throws|throws
name|Exception
block|{
name|createAndIndexRepo
argument_list|(
name|testRepoId
argument_list|,
name|srcRepoPath
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scanRepo
argument_list|(
name|testRepoId
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createStagedNeededRepo
parameter_list|(
name|String
name|testRepoId
parameter_list|,
name|Path
name|srcRepoPath
parameter_list|,
name|Path
name|stagedSrcRepoPath
parameter_list|,
name|boolean
name|scan
parameter_list|)
throws|throws
name|Exception
block|{
name|createAndIndexRepo
argument_list|(
name|testRepoId
argument_list|,
name|srcRepoPath
argument_list|,
name|stagedSrcRepoPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
condition|)
block|{
name|scanRepo
argument_list|(
name|testRepoId
argument_list|)
expr_stmt|;
block|}
name|RepositoriesService
name|repositoriesService
init|=
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|repositoriesService
operator|.
name|scanRepositoryDirectoriesNow
argument_list|(
name|testRepoId
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
condition|)
block|{
name|repositoriesService
operator|.
name|scanRepositoryNow
argument_list|(
name|testRepoId
operator|+
literal|"-stage"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|repositoriesService
operator|.
name|scanRepositoryDirectoriesNow
argument_list|(
name|testRepoId
operator|+
literal|"-stage"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteTestRepo
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Path
name|getBasedir
parameter_list|()
block|{
if|if
condition|(
name|basePath
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|baseDirPath
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|baseDir
argument_list|)
condition|)
block|{
name|baseDirPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseDirPath
operator|=
name|getProjectDirectory
argument_list|( )
expr_stmt|;
block|}
name|basePath
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|baseDirPath
argument_list|)
expr_stmt|;
block|}
return|return
name|basePath
operator|.
name|get
argument_list|( )
return|;
block|}
specifier|protected
name|void
name|waitForScanToComplete
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
throws|,
name|InterruptedException
block|{
while|while
condition|(
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getScanStatus
argument_list|(
name|repoId
argument_list|)
operator|.
name|isAlreadyScanning
argument_list|()
condition|)
block|{
comment|// Would be better to cancel, if we had that capacity
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

