begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaAdministrationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|CommonServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ManagedRepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|NetworkProxyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|PingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ProxyConnectorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RemoteRepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoryGroupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|AbstractRestServicesTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractArchivaRestTest
extends|extends
name|AbstractRestServicesTest
block|{
comment|// START SNIPPET: authz-header
comment|// guest with an empty password
specifier|public
name|String
name|guestAuthzHeader
init|=
literal|"Basic "
operator|+
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
operator|.
name|encode
argument_list|(
operator|(
literal|"guest"
operator|+
literal|":"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// with an other login/password
comment|//public String authzHeader =
comment|//    "Basic " + org.apache.cxf.common.util.Base64Utility.encode( ( "login" + ":password" ).getBytes() );
comment|// END SNIPPET: authz-header
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|appServerBase
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"appserver.base"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|jcrDirectory
init|=
operator|new
name|File
argument_list|(
name|appServerBase
argument_list|,
literal|"jcr"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jcrDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|jcrDirectory
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getSpringConfigLocation
parameter_list|()
block|{
return|return
literal|"classpath*:META-INF/spring-context.xml,classpath:META-INF/spring-context-test.xml"
return|;
block|}
specifier|protected
name|String
name|getRestServicesPath
parameter_list|()
block|{
return|return
literal|"restServices"
return|;
block|}
specifier|protected
name|RepositoriesService
name|getRepositoriesService
parameter_list|()
block|{
return|return
name|getRepositoriesService
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|RepositoriesService
name|getRepositoriesService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|RepositoriesService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|RepositoriesService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ManagedRepositoriesService
name|getManagedRepositoriesService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|ManagedRepositoriesService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|ManagedRepositoriesService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|PingService
name|getPingService
parameter_list|()
block|{
return|return
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|PingService
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|RemoteRepositoriesService
name|getRemoteRepositoriesService
parameter_list|()
block|{
return|return
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|RemoteRepositoriesService
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|RepositoryGroupService
name|getRepositoryGroupService
parameter_list|()
block|{
return|return
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|RepositoryGroupService
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|ProxyConnectorService
name|getProxyConnectorService
parameter_list|()
block|{
name|ProxyConnectorService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|ProxyConnectorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|NetworkProxyService
name|getNetworkProxyService
parameter_list|()
block|{
name|NetworkProxyService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|NetworkProxyService
operator|.
name|class
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ArchivaAdministrationService
name|getArchivaAdministrationService
parameter_list|()
block|{
name|ArchivaAdministrationService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|ArchivaAdministrationService
operator|.
name|class
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authorizationHeader
argument_list|)
expr_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|SearchService
name|getSearchService
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
comment|// START SNIPPET: cxf-searchservice-creation
name|SearchService
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
comment|// END SNIPPET: cxf-searchservice-creation
block|}
specifier|protected
name|CommonServices
name|getCommonServices
parameter_list|(
name|String
name|authzHeader
parameter_list|)
block|{
name|CommonServices
name|service
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|getRestServicesPath
argument_list|()
operator|+
literal|"/archivaServices/"
argument_list|,
name|CommonServices
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authzHeader
operator|!=
literal|null
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|service
argument_list|)
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|authzHeader
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|getConfig
argument_list|(
name|service
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ManagedRepository
name|getTestManagedRepository
parameter_list|()
block|{
name|String
name|location
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/test-repo"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
return|return
operator|new
name|ManagedRepository
argument_list|(
literal|"TEST"
argument_list|,
literal|"test"
argument_list|,
name|location
argument_list|,
literal|"default"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"2 * * * * ?"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBaseUrl
parameter_list|()
block|{
name|String
name|baseUrlSysProps
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"archiva.baseRestUrl"
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|baseUrlSysProps
argument_list|)
condition|?
literal|"http://localhost:"
operator|+
name|port
else|:
name|baseUrlSysProps
return|;
block|}
comment|//-----------------------------------------------------
comment|// utilities to create repos for testing
comment|//-----------------------------------------------------
specifier|static
specifier|final
name|String
name|TARGET_REPO_ID
init|=
literal|"test-copy-target"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SOURCE_REPO_ID
init|=
literal|"test-origin-repo"
decl_stmt|;
specifier|protected
name|void
name|initSourceTargetRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|targetRepo
init|=
operator|new
name|File
argument_list|(
literal|"target/test-repo-copy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRepo
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|targetRepo
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|targetRepo
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|targetRepo
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ManagedRepository
name|managedRepository
init|=
name|getTestManagedRepository
argument_list|()
decl_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|TARGET_REPO_ID
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setLocation
argument_list|(
name|targetRepo
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setCronExpression
argument_list|(
literal|"* * * * * ?"
argument_list|)
expr_stmt|;
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|addManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|originRepo
init|=
operator|new
name|File
argument_list|(
literal|"target/test-origin-repo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|originRepo
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|originRepo
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|originRepo
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/repo-with-osgi"
argument_list|)
argument_list|,
name|originRepo
argument_list|)
expr_stmt|;
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|managedRepository
operator|=
name|getTestManagedRepository
argument_list|()
expr_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setLocation
argument_list|(
name|originRepo
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|addManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
name|getArchivaAdministrationService
argument_list|()
operator|.
name|addKnownContentConsumer
argument_list|(
literal|"create-missing-checksums"
argument_list|)
expr_stmt|;
name|getArchivaAdministrationService
argument_list|()
operator|.
name|addKnownContentConsumer
argument_list|(
literal|"metadata-updater"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|cleanRepos
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|TARGET_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|SOURCE_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createAndIndexRepo
parameter_list|(
name|String
name|testRepoId
parameter_list|,
name|String
name|repoPath
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|testRepoId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|testRepoId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ManagedRepository
name|managedRepository
init|=
operator|new
name|ManagedRepository
argument_list|()
decl_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|testRepoId
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setName
argument_list|(
literal|"test repo"
argument_list|)
expr_stmt|;
name|File
name|badContent
init|=
operator|new
name|File
argument_list|(
name|repoPath
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
if|if
condition|(
name|badContent
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|badContent
argument_list|)
expr_stmt|;
block|}
name|managedRepository
operator|.
name|setLocation
argument_list|(
operator|new
name|File
argument_list|(
name|repoPath
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setIndexDirectory
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/target/.index-"
operator|+
name|Long
operator|.
name|toString
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ManagedRepositoriesService
name|service
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|service
operator|.
name|addManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|getRoleManagementService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|assignTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|testRepoId
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|getRoleManagementService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|assignTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|testRepoId
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|scanRepositoryNow
argument_list|(
name|testRepoId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deleteTestRepo
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getManagedRepository
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|deleteManagedRepository
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

