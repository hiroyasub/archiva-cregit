begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArchivaRepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ManagedRepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|ManagedRepositoriesServiceTest
extends|extends
name|AbstractArchivaRestTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|addManagedRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRepositoriesService
name|service
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|getTestManagedRepository
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|deleteManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|addManagedRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|deleteManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateManagedRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRepositoriesService
name|service
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|getTestManagedRepository
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|deleteManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|addManagedRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|repo
operator|=
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// toto is foo in French :-)
name|repo
operator|.
name|setName
argument_list|(
literal|"toto"
argument_list|)
expr_stmt|;
name|service
operator|.
name|updateManagedRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|repo
operator|=
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"toto"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|deleteManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|service
operator|.
name|getManagedRepository
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
specifier|public
name|void
name|fileLocationExists
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRepositoriesService
name|service
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|fileLocationExists
argument_list|(
name|target
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// normally should not exists :-)
name|assertFalse
argument_list|(
name|service
operator|.
name|fileLocationExists
argument_list|(
literal|"/fooofofof/foddfdofd/dedede/kdeo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getManagedRepositoryStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testRepoId
init|=
literal|"test-repo"
decl_stmt|;
comment|// force guest user creation if not exists
if|if
condition|(
name|getUserService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|getGuestUser
argument_list|()
operator|==
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|getUserService
argument_list|(
name|authorizationHeader
argument_list|)
operator|.
name|createGuestUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|createAndIndexRepo
argument_list|(
name|testRepoId
argument_list|,
literal|"src/test/repo-with-osgi"
argument_list|)
expr_stmt|;
name|ManagedRepositoriesService
name|service
init|=
name|getManagedRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|RepositoriesService
name|repositoriesService
init|=
name|getRepositoriesService
argument_list|(
name|authorizationHeader
argument_list|)
decl_stmt|;
name|ArchivaRepositoryStatistics
name|archivaRepositoryStatistics
init|=
name|service
operator|.
name|getManagedRepositoryStatistics
argument_list|(
name|testRepoId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|archivaRepositoryStatistics
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"archivaRepositoryStatistics:"
operator|+
name|archivaRepositoryStatistics
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|92
argument_list|,
name|archivaRepositoryStatistics
operator|.
name|getNewFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|92
argument_list|,
name|archivaRepositoryStatistics
operator|.
name|getTotalFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|deleteTestRepo
argument_list|(
name|testRepoId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

