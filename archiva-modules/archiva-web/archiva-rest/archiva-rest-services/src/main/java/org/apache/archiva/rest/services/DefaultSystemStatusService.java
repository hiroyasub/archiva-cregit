begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryScannerInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ConsumerScanningStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|QueueEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|RepositoryScannerStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|SystemStatusService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|utils
operator|.
name|ConsumerScanningStatisticsComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|cache
operator|.
name|CacheStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|TaskQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M3  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"systemStatusService#rest"
argument_list|)
specifier|public
class|class
name|DefaultSystemStatusService
extends|extends
name|AbstractRestService
implements|implements
name|SystemStatusService
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskQueue
argument_list|>
name|queues
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Cache
argument_list|>
name|caches
init|=
literal|null
decl_stmt|;
specifier|private
name|RepositoryScanner
name|scanner
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|DefaultSystemStatusService
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|RepositoryScanner
name|scanner
parameter_list|)
block|{
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
name|queues
operator|=
name|getBeansOfType
argument_list|(
name|applicationContext
argument_list|,
name|TaskQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|caches
operator|=
name|getBeansOfType
argument_list|(
name|applicationContext
argument_list|,
name|Cache
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getMemoryStatus
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
name|Runtime
name|runtime
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|runtime
operator|.
name|gc
argument_list|()
expr_stmt|;
name|long
name|total
init|=
name|runtime
operator|.
name|totalMemory
argument_list|()
decl_stmt|;
name|long
name|used
init|=
name|total
operator|-
name|runtime
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|runtime
operator|.
name|maxMemory
argument_list|()
decl_stmt|;
return|return
name|formatMemory
argument_list|(
name|used
argument_list|)
operator|+
literal|"/"
operator|+
name|formatMemory
argument_list|(
name|total
argument_list|)
operator|+
literal|" (Max: "
operator|+
name|formatMemory
argument_list|(
name|max
argument_list|)
operator|+
literal|")"
return|;
block|}
specifier|private
specifier|static
name|String
name|formatMemory
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
name|l
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|+
literal|"M"
return|;
block|}
specifier|public
name|String
name|getCurrentServerTime
parameter_list|(
name|String
name|locale
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, d MMM yyyy HH:mm:ss Z"
argument_list|,
operator|new
name|Locale
argument_list|(
name|locale
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|QueueEntry
argument_list|>
name|getQueueEntries
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|List
argument_list|<
name|QueueEntry
argument_list|>
name|queueEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueEntry
argument_list|>
argument_list|(
name|queues
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TaskQueue
argument_list|>
name|entry
range|:
name|queues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|queueEntries
operator|.
name|add
argument_list|(
operator|new
name|QueueEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getQueueSnapshot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|queueEntries
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|CacheEntry
argument_list|>
name|getCacheEntries
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|CacheEntry
argument_list|>
name|cacheEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheEntry
argument_list|>
argument_list|(
name|caches
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|DecimalFormat
name|decimalFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#%"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Cache
argument_list|>
name|entry
range|:
name|caches
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CacheStatistics
name|cacheStatistics
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|cacheEntries
operator|.
name|add
argument_list|(
operator|new
name|CacheEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|cacheStatistics
operator|.
name|getSize
argument_list|()
argument_list|,
name|cacheStatistics
operator|.
name|getCacheHits
argument_list|()
argument_list|,
name|cacheStatistics
operator|.
name|getCacheMiss
argument_list|()
argument_list|,
name|decimalFormat
operator|.
name|format
argument_list|(
name|cacheStatistics
operator|.
name|getCacheHitRate
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cacheEntries
return|;
block|}
specifier|public
name|Boolean
name|clearCache
parameter_list|(
name|String
name|cacheKey
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|Cache
name|cache
init|=
name|caches
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"no cache for key: "
operator|+
name|cacheKey
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|clearAllCaches
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
for|for
control|(
name|Cache
name|cache
range|:
name|caches
operator|.
name|values
argument_list|()
control|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|List
argument_list|<
name|RepositoryScannerStatistics
argument_list|>
name|getRepositoryScannerStatistics
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
name|Set
argument_list|<
name|RepositoryScannerInstance
argument_list|>
name|repositoryScannerInstances
init|=
name|scanner
operator|.
name|getInProgressScans
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryScannerInstances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|RepositoryScannerStatistics
argument_list|>
name|repositoryScannerStatisticsList
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryScannerStatistics
argument_list|>
argument_list|(
name|repositoryScannerInstances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RepositoryScannerInstance
name|instance
range|:
name|repositoryScannerInstances
control|)
block|{
name|RepositoryScannerStatistics
name|repositoryScannerStatistics
init|=
operator|new
name|RepositoryScannerStatistics
argument_list|()
decl_stmt|;
name|repositoryScannerStatisticsList
operator|.
name|add
argument_list|(
name|repositoryScannerStatistics
argument_list|)
expr_stmt|;
name|repositoryScannerStatistics
operator|.
name|setManagedRepository
argument_list|(
name|instance
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryScannerStatistics
operator|.
name|setNewFileCount
argument_list|(
name|instance
operator|.
name|getStats
argument_list|()
operator|.
name|getNewFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryScannerStatistics
operator|.
name|setTotalFileCount
argument_list|(
name|instance
operator|.
name|getStats
argument_list|()
operator|.
name|getTotalFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryScannerStatistics
operator|.
name|setConsumerScanningStatistics
argument_list|(
name|mapConsumerScanningStatistics
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|repositoryScannerStatisticsList
return|;
block|}
specifier|private
name|List
argument_list|<
name|ConsumerScanningStatistics
argument_list|>
name|mapConsumerScanningStatistics
parameter_list|(
name|RepositoryScannerInstance
name|instance
parameter_list|)
block|{
name|DecimalFormat
name|decimalFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"###.##"
argument_list|)
decl_stmt|;
comment|// FIXME take care of NPE here !!!
name|List
argument_list|<
name|ConsumerScanningStatistics
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ConsumerScanningStatistics
argument_list|>
argument_list|(
name|instance
operator|.
name|getConsumerCounts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|instance
operator|.
name|getConsumerCounts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ConsumerScanningStatistics
name|consumerScanningStatistics
init|=
operator|new
name|ConsumerScanningStatistics
argument_list|()
decl_stmt|;
name|consumerScanningStatistics
operator|.
name|setConsumerKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|consumerScanningStatistics
operator|.
name|setCount
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|consumerScanningStatistics
operator|.
name|setTime
argument_list|(
name|instance
operator|.
name|getConsumerTimings
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumerScanningStatistics
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|consumerScanningStatistics
operator|.
name|setAverage
argument_list|(
name|decimalFormat
operator|.
name|format
argument_list|(
name|consumerScanningStatistics
operator|.
name|getTime
argument_list|()
operator|/
name|consumerScanningStatistics
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|consumerScanningStatistics
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
name|ConsumerScanningStatisticsComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

