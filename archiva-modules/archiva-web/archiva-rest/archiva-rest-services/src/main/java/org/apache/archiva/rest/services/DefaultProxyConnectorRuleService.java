begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ProxyConnectorRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|proxyconnectorrule
operator|.
name|ProxyConnectorRuleAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ProxyConnectorRuleService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"proxyConnectorRuleService#rest"
argument_list|)
specifier|public
class|class
name|DefaultProxyConnectorRuleService
extends|extends
name|AbstractRestService
implements|implements
name|ProxyConnectorRuleService
block|{
annotation|@
name|Inject
specifier|private
name|ProxyConnectorRuleAdmin
name|proxyConnectorRuleAdmin
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProxyConnectorRule
argument_list|>
name|getProxyConnectorRules
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
return|return
name|proxyConnectorRuleAdmin
operator|.
name|getProxyConnectorRules
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|validateProxyConnectorRule
parameter_list|(
name|ProxyConnectorRule
name|proxyConnectorRule
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxyConnectorRule
operator|.
name|getPattern
argument_list|()
argument_list|)
condition|)
block|{
name|ArchivaRestServiceException
name|e
init|=
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"pattern cannot be empty"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|setErrorKey
argument_list|(
literal|"proxy-connector-rule.pattern.empty"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|proxyConnectorRule
operator|.
name|getProxyConnectors
argument_list|()
operator|==
literal|null
operator|||
name|proxyConnectorRule
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArchivaRestServiceException
name|e
init|=
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"proxyConnector rule must have proxyConnectors."
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|setErrorKey
argument_list|(
literal|"proxy-connector-rule.pattern.connectors.empty"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
for|for
control|(
name|ProxyConnectorRule
name|proxyConnectorRule1
range|:
name|getProxyConnectorRules
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnectorRule
operator|.
name|getPattern
argument_list|()
argument_list|,
name|proxyConnectorRule1
operator|.
name|getPattern
argument_list|()
argument_list|)
operator|&&
name|proxyConnectorRule
operator|.
name|getProxyConnectorRuleType
argument_list|()
operator|==
name|proxyConnectorRule1
operator|.
name|getProxyConnectorRuleType
argument_list|()
condition|)
block|{
name|ArchivaRestServiceException
name|e
init|=
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"same ProxyConnector rule already exists."
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|setErrorKey
argument_list|(
literal|"proxy-connector-rule.pattern.already.exists"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|addProxyConnectorRule
parameter_list|(
name|ProxyConnectorRule
name|proxyConnectorRule
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|validateProxyConnectorRule
argument_list|(
name|proxyConnectorRule
argument_list|)
expr_stmt|;
try|try
block|{
name|proxyConnectorRuleAdmin
operator|.
name|addProxyConnectorRule
argument_list|(
name|proxyConnectorRule
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|deleteProxyConnectorRule
parameter_list|(
name|ProxyConnectorRule
name|proxyConnectorRule
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|proxyConnectorRuleAdmin
operator|.
name|deleteProxyConnectorRule
argument_list|(
name|proxyConnectorRule
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|updateProxyConnectorRule
parameter_list|(
name|ProxyConnectorRule
name|proxyConnectorRule
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|proxyConnectorRuleAdmin
operator|.
name|updateProxyConnectorRule
argument_list|(
name|proxyConnectorRule
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

