begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|v2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|model
operator|.
name|PagedResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|util
operator|.
name|QueryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskQueueExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|model
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
operator|.
name|RepositoryScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|ArtifactTransferRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|ScanStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|RepositoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|ArtifactIndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|IndexingArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|maven
operator|.
name|ArchivaIndexingTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  * @since 3.0  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"v2.repositoryService#rest"
argument_list|)
specifier|public
class|class
name|DefaultRepositoryService
implements|implements
name|RepositoryService
block|{
annotation|@
name|Inject
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
annotation|@
name|Inject
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"taskQueueExecutor#indexing"
argument_list|)
name|TaskQueueExecutor
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexingTaskExecutor
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"taskQueueExecutor#repository-scanning"
argument_list|)
name|TaskQueueExecutor
argument_list|<
name|RepositoryTask
argument_list|>
name|scanningTaskExecutor
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryArchivaTaskScheduler
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#indexing"
argument_list|)
specifier|private
name|IndexingArchivaTaskScheduler
name|indexingArchivaTaskScheduler
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryScanner
name|repoScanner
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRepositoryService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QueryHelper
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
argument_list|>
name|QUERY_HELPER
init|=
operator|new
name|QueryHelper
argument_list|<>
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"name"
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
operator|::
name|getId
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
operator|::
name|getName
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addNullsafeFieldComparator
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
operator|::
name|getId
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addNullsafeFieldComparator
argument_list|(
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
operator|::
name|getName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PagedResult
argument_list|<
name|Repository
argument_list|>
name|getRepositories
parameter_list|(
name|String
name|searchTerm
parameter_list|,
name|Integer
name|offset
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|orderBy
parameter_list|,
name|String
name|order
parameter_list|,
name|String
name|localeString
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
specifier|final
name|Locale
name|locale
init|=
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|localeString
argument_list|)
condition|?
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|localeString
argument_list|)
else|:
name|Locale
operator|.
name|getDefault
argument_list|( )
decl_stmt|;
name|boolean
name|isAscending
init|=
name|QUERY_HELPER
operator|.
name|isAscending
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
argument_list|>
name|filter
init|=
name|QUERY_HELPER
operator|.
name|getQueryFilter
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
argument_list|>
name|comparator
init|=
name|QUERY_HELPER
operator|.
name|getComparator
argument_list|(
name|orderBy
argument_list|,
name|isAscending
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|totalCount
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|count
argument_list|( )
argument_list|)
decl_stmt|;
return|return
operator|new
name|PagedResult
argument_list|<>
argument_list|(
name|totalCount
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparator
argument_list|)
operator|.
name|map
argument_list|(
name|repo
lambda|->
name|Repository
operator|.
name|of
argument_list|(
name|repo
argument_list|,
name|locale
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid integer conversion for totalCount"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|INVALID_RESULT_SET_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RepositoryStatistics
name|getManagedRepositoryStatistics
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
if|if
condition|(
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_MANAGED_NOT_FOUND
argument_list|,
name|repositoryId
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|RepositoryStatistics
operator|.
name|of
argument_list|(
name|repositoryStatisticsManager
operator|.
name|getLastStatistics
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Metadata error: {} "
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_METADATA_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|scheduleRepositoryScan
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|fullScan
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|ArtifactIndexingTask
name|task
init|=
operator|new
name|ArtifactIndexingTask
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|,
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|FINISH
argument_list|,
name|repository
operator|.
name|getIndexingContext
argument_list|()
argument_list|)
decl_stmt|;
name|task
operator|.
name|setExecuteOnEntireRepo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOnlyUpdate
argument_list|(
operator|!
name|fullScan
argument_list|)
expr_stmt|;
name|indexingArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|repositoryArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
operator|new
name|RepositoryTask
argument_list|(
name|repositoryId
argument_list|,
name|fullScan
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|( )
operator|.
name|build
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not queue the task: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|TASK_QUEUE_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RepositoryStatistics
name|scanRepositoryImmediately
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|long
name|sinceWhen
init|=
name|RepositoryScanner
operator|.
name|FRESH_SCAN
decl_stmt|;
try|try
block|{
return|return
name|RepositoryStatistics
operator|.
name|of
argument_list|(
name|repoScanner
operator|.
name|scan
argument_list|(
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
argument_list|,
name|sinceWhen
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryScannerException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_SCAN_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ScanStatus
name|getScanStatus
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|ScanStatus
name|status
init|=
operator|new
name|ScanStatus
argument_list|( )
decl_stmt|;
try|try
block|{
name|RepositoryTask
name|scanTask
init|=
name|scanningTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryId
operator|.
name|equals
argument_list|(
name|scanTask
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
condition|)
block|{
name|scanTask
operator|=
literal|null
expr_stmt|;
block|}
name|ArtifactIndexingTask
name|indexTask
init|=
name|indexingTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryId
operator|.
name|equals
argument_list|(
name|indexTask
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|indexTask
operator|=
literal|null
expr_stmt|;
block|}
name|status
operator|.
name|updateScanInfo
argument_list|(
name|scanTask
argument_list|,
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|repositoryId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|updateIndexInfo
argument_list|(
name|indexTask
argument_list|,
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|repositoryId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get task information: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|TASK_QUEUE_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|removeScanningTaskFromQueue
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|copyArtifact
parameter_list|(
name|ArtifactTransferRequest
name|artifactTransferRequest
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|scheduleDownloadRemoteIndex
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|now
parameter_list|,
name|boolean
name|fullDownload
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|deleteArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRunningRemoteDownloads
parameter_list|( )
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

