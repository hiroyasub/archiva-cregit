begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|v2
operator|.
name|svc
operator|.
name|maven
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|model
operator|.
name|PagedResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|util
operator|.
name|QueryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|RedbackAuthenticationThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|RedbackRequestInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|system
operator|.
name|DefaultSecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ReleaseScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|fs
operator|.
name|FsStorageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|MavenManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|MavenManagedRepositoryUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|ErrorKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|maven
operator|.
name|MavenManagedRepositoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
operator|.
name|OPERATION_READ_REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
operator|.
name|OPERATION_ADD_ARTIFACT
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"v2.managedMavenRepositoryService#rest"
argument_list|)
specifier|public
class|class
name|DefaultMavenManagedRepositoryService
implements|implements
name|MavenManagedRepositoryService
block|{
annotation|@
name|Context
name|HttpServletResponse
name|httpServletResponse
decl_stmt|;
annotation|@
name|Context
name|UriInfo
name|uriInfo
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultMavenManagedRepositoryService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QueryHelper
argument_list|<
name|ManagedRepository
argument_list|>
name|QUERY_HELPER
init|=
operator|new
name|QueryHelper
argument_list|<>
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"name"
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"id"
argument_list|,
name|ManagedRepository
operator|::
name|getId
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"name"
argument_list|,
name|ManagedRepository
operator|::
name|getName
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"location"
argument_list|,
parameter_list|(
name|r
parameter_list|)
lambda|->
name|r
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addBooleanFilter
argument_list|(
literal|"snapshot"
argument_list|,
parameter_list|(
name|r
parameter_list|)
lambda|->
name|r
operator|.
name|getActiveReleaseSchemes
argument_list|( )
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
argument_list|)
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addBooleanFilter
argument_list|(
literal|"release"
argument_list|,
parameter_list|(
name|r
parameter_list|)
lambda|->
name|r
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addNullsafeFieldComparator
argument_list|(
literal|"id"
argument_list|,
name|ManagedRepository
operator|::
name|getId
argument_list|)
expr_stmt|;
name|QUERY_HELPER
operator|.
name|addNullsafeFieldComparator
argument_list|(
literal|"name"
argument_list|,
name|ManagedRepository
operator|::
name|getName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
specifier|private
specifier|final
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|private
specifier|final
name|SecuritySystem
name|securitySystem
decl_stmt|;
specifier|public
name|DefaultMavenManagedRepositoryService
parameter_list|(
name|SecuritySystem
name|securitySystem
parameter_list|,
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|,
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
parameter_list|)
block|{
name|this
operator|.
name|securitySystem
operator|=
name|securitySystem
expr_stmt|;
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
name|this
operator|.
name|managedRepositoryAdmin
operator|=
name|managedRepositoryAdmin
expr_stmt|;
block|}
specifier|protected
name|AuditInformation
name|getAuditInformation
parameter_list|( )
block|{
name|RedbackRequestInformation
name|redbackRequestInformation
init|=
name|RedbackAuthenticationThreadLocal
operator|.
name|get
argument_list|( )
decl_stmt|;
name|User
name|user
decl_stmt|;
name|String
name|remoteAddr
decl_stmt|;
if|if
condition|(
name|redbackRequestInformation
operator|==
literal|null
condition|)
block|{
name|user
operator|=
literal|null
expr_stmt|;
name|remoteAddr
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|redbackRequestInformation
operator|.
name|getUser
argument_list|( )
expr_stmt|;
name|remoteAddr
operator|=
name|redbackRequestInformation
operator|.
name|getRemoteAddr
argument_list|( )
expr_stmt|;
block|}
return|return
operator|new
name|AuditInformation
argument_list|(
name|user
argument_list|,
name|remoteAddr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PagedResult
argument_list|<
name|MavenManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|(
specifier|final
name|String
name|searchTerm
parameter_list|,
specifier|final
name|Integer
name|offset
parameter_list|,
specifier|final
name|Integer
name|limit
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|orderBy
parameter_list|,
specifier|final
name|String
name|order
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|( )
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|ManagedRepository
argument_list|>
name|queryFilter
init|=
name|QUERY_HELPER
operator|.
name|getQueryFilter
argument_list|(
name|searchTerm
argument_list|)
operator|.
name|and
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getType
argument_list|()
operator|==
name|RepositoryType
operator|.
name|MAVEN
argument_list|)
decl_stmt|;
specifier|final
name|Comparator
argument_list|<
name|ManagedRepository
argument_list|>
name|comparator
init|=
name|QUERY_HELPER
operator|.
name|getComparator
argument_list|(
name|orderBy
argument_list|,
name|order
argument_list|)
decl_stmt|;
name|int
name|totalCount
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|repos
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|queryFilter
argument_list|)
operator|.
name|count
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|PagedResult
operator|.
name|of
argument_list|(
name|totalCount
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|repos
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|queryFilter
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparator
argument_list|)
operator|.
name|map
argument_list|(
name|MavenManagedRepository
operator|::
name|of
argument_list|)
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid number of repositories detected."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|INVALID_RESULT_SET_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MavenManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_NOT_FOUND
argument_list|,
name|repositoryId
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
if|if
condition|(
name|repo
operator|.
name|getType
argument_list|()
operator|!=
name|RepositoryType
operator|.
name|MAVEN
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_WRONG_TYPE
argument_list|,
name|repositoryId
argument_list|,
name|repo
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
return|return
name|MavenManagedRepository
operator|.
name|of
argument_list|(
name|repo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|deleteManagedRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|Boolean
name|deleteContent
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|MavenManagedRepository
name|repo
init|=
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|managedRepositoryAdmin
operator|.
name|deleteManagedRepository
argument_list|(
name|repositoryId
argument_list|,
name|getAuditInformation
argument_list|( )
argument_list|,
name|deleteContent
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|( )
operator|.
name|build
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_DELETE_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_NOT_FOUND
argument_list|,
name|repositoryId
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
name|convert
parameter_list|(
name|MavenManagedRepository
name|repository
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
name|repoBean
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
argument_list|( )
decl_stmt|;
name|repoBean
operator|.
name|setId
argument_list|(
name|repository
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setName
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setDescription
argument_list|(
name|repository
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setBlockRedeployments
argument_list|(
name|repository
operator|.
name|isBlocksRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setCronExpression
argument_list|(
name|repository
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setLocation
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setReleases
argument_list|(
name|repository
operator|.
name|getReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setSnapshots
argument_list|(
name|repository
operator|.
name|getReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setScanned
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|repository
operator|.
name|isDeleteSnapshotsOfRelease
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|repository
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setRetentionCount
argument_list|(
name|repository
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setRetentionPeriod
argument_list|(
name|repository
operator|.
name|getRetentionPeriod
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setIndexDirectory
argument_list|(
name|repository
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setPackedIndexDirectory
argument_list|(
name|repository
operator|.
name|getPackedIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|repoBean
operator|.
name|setType
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
operator|.
name|name
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|repoBean
return|;
block|}
annotation|@
name|Override
specifier|public
name|MavenManagedRepository
name|addManagedRepository
parameter_list|(
name|MavenManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
specifier|final
name|String
name|repoId
init|=
name|managedRepository
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_INVALID_ID
argument_list|,
name|repoId
argument_list|)
argument_list|,
literal|422
argument_list|)
throw|;
block|}
name|Repository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|httpServletResponse
operator|.
name|setHeader
argument_list|(
literal|"Location"
argument_list|,
name|uriInfo
operator|.
name|getAbsolutePathBuilder
argument_list|( )
operator|.
name|path
argument_list|(
name|repoId
argument_list|)
operator|.
name|build
argument_list|( )
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_ID_EXISTS
argument_list|,
name|repoId
argument_list|)
argument_list|,
literal|303
argument_list|)
throw|;
block|}
try|try
block|{
name|managedRepositoryAdmin
operator|.
name|addManagedRepository
argument_list|(
name|convert
argument_list|(
name|managedRepository
argument_list|)
argument_list|,
name|managedRepository
operator|.
name|isHasStagingRepository
argument_list|()
argument_list|,
name|getAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|httpServletResponse
operator|.
name|setStatus
argument_list|(
literal|201
argument_list|)
expr_stmt|;
return|return
name|MavenManagedRepository
operator|.
name|of
argument_list|(
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repoId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MavenManagedRepository
name|updateManagedRepository
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|MavenManagedRepositoryUpdate
name|managedRepository
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
name|repo
init|=
name|convert
argument_list|(
name|managedRepository
argument_list|)
decl_stmt|;
try|try
block|{
name|managedRepositoryAdmin
operator|.
name|updateManagedRepository
argument_list|(
name|repo
argument_list|,
name|managedRepository
operator|.
name|isHasStagingRepository
argument_list|( )
argument_list|,
name|getAuditInformation
argument_list|( )
argument_list|,
name|managedRepository
operator|.
name|isResetStats
argument_list|( )
argument_list|)
expr_stmt|;
name|ManagedRepository
name|newRepo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRepo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_UPDATE_FAILED
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|MavenManagedRepository
operator|.
name|of
argument_list|(
name|newRepo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FileInfo
name|getFileStatus
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|fileLocation
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_NOT_FOUND
argument_list|,
name|repositoryId
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
try|try
block|{
name|ContentItem
name|contentItem
init|=
name|repo
operator|.
name|getContent
argument_list|( )
operator|.
name|toItem
argument_list|(
name|fileLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentItem
operator|.
name|getAsset
argument_list|( )
operator|.
name|exists
argument_list|( )
condition|)
block|{
return|return
name|FileInfo
operator|.
name|of
argument_list|(
name|contentItem
operator|.
name|getAsset
argument_list|( )
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|ARTIFACT_NOT_FOUND
argument_list|,
name|repositoryId
argument_list|,
name|fileLocation
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_LAYOUT_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|copyArtifact
parameter_list|(
name|String
name|srcRepositoryId
parameter_list|,
name|String
name|dstRepositoryId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
specifier|final
name|AuditInformation
name|auditInformation
init|=
name|getAuditInformation
argument_list|( )
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|auditInformation
operator|.
name|getUser
argument_list|( )
operator|.
name|getUsername
argument_list|( )
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|httpServletResponse
operator|.
name|setHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"Bearer realm=\"archiva\""
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|NOT_AUTHENTICATED
argument_list|)
argument_list|,
literal|401
argument_list|)
throw|;
block|}
name|ManagedRepository
name|srcRepo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|srcRepositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcRepo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_NOT_FOUND
argument_list|,
name|srcRepositoryId
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
name|ManagedRepository
name|dstRepo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|dstRepositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstRepo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_NOT_FOUND
argument_list|,
name|dstRepositoryId
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
name|checkAuthority
argument_list|(
name|auditInformation
operator|.
name|getUser
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|,
name|srcRepositoryId
argument_list|,
name|dstRepositoryId
argument_list|)
expr_stmt|;
try|try
block|{
name|ContentItem
name|srcItem
init|=
name|srcRepo
operator|.
name|getContent
argument_list|( )
operator|.
name|toItem
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ContentItem
name|dstItem
init|=
name|dstRepo
operator|.
name|getContent
argument_list|( )
operator|.
name|toItem
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcItem
operator|.
name|getAsset
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|ARTIFACT_NOT_FOUND
argument_list|,
name|srcRepositoryId
argument_list|,
name|path
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
if|if
condition|(
name|dstItem
operator|.
name|getAsset
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|ARTIFACT_EXISTS_AT_DEST
argument_list|,
name|srcRepositoryId
argument_list|,
name|path
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
name|FsStorageUtil
operator|.
name|copyAsset
argument_list|(
name|srcItem
operator|.
name|getAsset
argument_list|( )
argument_list|,
name|dstItem
operator|.
name|getAsset
argument_list|( )
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|REPOSITORY_LAYOUT_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|ARTIFACT_COPY_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|( )
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkAuthority
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|srcRepositoryId
parameter_list|,
specifier|final
name|String
name|dstRepositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|User
name|user
decl_stmt|;
try|try
block|{
name|user
operator|=
name|securitySystem
operator|.
name|getUserManager
argument_list|()
operator|.
name|findUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
name|httpServletResponse
operator|.
name|setHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"Bearer realm=\"archiva\""
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|USER_NOT_FOUND
argument_list|,
name|userName
argument_list|)
argument_list|,
literal|401
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UserManagerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|USER_MANAGER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
comment|// check karma on source : read
name|AuthenticationResult
name|authn
init|=
operator|new
name|AuthenticationResult
argument_list|(
literal|true
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SecuritySession
name|securitySession
init|=
operator|new
name|DefaultSecuritySession
argument_list|(
name|authn
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|authz
init|=
name|securitySystem
operator|.
name|isAuthorized
argument_list|(
name|securitySession
argument_list|,
name|OPERATION_READ_REPOSITORY
argument_list|,
name|srcRepositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authz
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|PERMISSION_REPOSITORY_DENIED
argument_list|,
name|srcRepositoryId
argument_list|,
name|OPERATION_READ_REPOSITORY
argument_list|)
argument_list|,
literal|403
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error reading permission: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|AUTHORIZATION_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
literal|403
argument_list|)
throw|;
block|}
comment|// check karma on target: write
try|try
block|{
name|boolean
name|authz
init|=
name|securitySystem
operator|.
name|isAuthorized
argument_list|(
name|securitySession
argument_list|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_ADD_ARTIFACT
argument_list|,
name|dstRepositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authz
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|PERMISSION_REPOSITORY_DENIED
argument_list|,
name|dstRepositoryId
argument_list|,
name|OPERATION_ADD_ARTIFACT
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error reading permission: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|AUTHORIZATION_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
literal|403
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|deleteArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|removeProjectVersion
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|deleteProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|deleteNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

