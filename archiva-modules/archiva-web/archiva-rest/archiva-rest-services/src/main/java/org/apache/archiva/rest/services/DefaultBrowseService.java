begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|BrowseGroupIdEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|BrowseGroupIdResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|GroupIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|BrowseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M3  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"browseService#rest"
argument_list|)
specifier|public
class|class
name|DefaultBrowseService
extends|extends
name|AbstractRestService
implements|implements
name|BrowseService
block|{
specifier|public
name|GroupIdList
name|getRootGroups
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getObservableRepos
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|selectedRepos
argument_list|)
condition|)
block|{
comment|// FIXME 403 ???
return|return
operator|new
name|GroupIdList
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: this logic should be optional, particularly remembering we want to keep this code simple
comment|//       it is located here to avoid the content repository implementation needing to do too much for what
comment|//       is essentially presentation code
name|Set
argument_list|<
name|String
argument_list|>
name|namespacesToCollapse
decl_stmt|;
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|namespacesToCollapse
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|namespacesToCollapse
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveRootNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|n
range|:
name|namespacesToCollapse
control|)
block|{
comment|// TODO: check performance of this
name|namespaces
operator|.
name|add
argument_list|(
name|collapseNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|metadataResolver
argument_list|,
name|selectedRepos
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|GroupIdList
argument_list|(
name|getSortedList
argument_list|(
name|namespaces
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|BrowseGroupIdResult
name|browseGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getObservableRepos
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|selectedRepos
argument_list|)
condition|)
block|{
comment|// FIXME 403 ???
return|return
operator|new
name|BrowseGroupIdResult
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
decl_stmt|;
try|try
block|{
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespacesToCollapse
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|namespacesToCollapse
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
name|projects
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveProjects
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: this logic should be optional, particularly remembering we want to keep this code simple
comment|// it is located here to avoid the content repository implementation needing to do too much for what
comment|// is essentially presentation code
name|namespaces
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|namespacesToCollapse
control|)
block|{
comment|// TODO: check performance of this
name|namespaces
operator|.
name|add
argument_list|(
name|collapseNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|metadataResolver
argument_list|,
name|selectedRepos
argument_list|,
name|groupId
operator|+
literal|"."
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|BrowseGroupIdEntry
argument_list|>
name|browseGroupIdEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|BrowseGroupIdEntry
argument_list|>
argument_list|(
name|namespaces
operator|.
name|size
argument_list|()
operator|+
name|projects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|namespaces
control|)
block|{
name|browseGroupIdEntries
operator|.
name|add
argument_list|(
operator|new
name|BrowseGroupIdEntry
argument_list|(
name|namespace
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|project
range|:
name|projects
control|)
block|{
name|browseGroupIdEntries
operator|.
name|add
argument_list|(
operator|new
name|BrowseGroupIdEntry
argument_list|(
name|project
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|browseGroupIdEntries
argument_list|)
expr_stmt|;
return|return
operator|new
name|BrowseGroupIdResult
argument_list|(
name|browseGroupIdEntries
argument_list|)
return|;
block|}
comment|//---------------------------
comment|// internals
comment|//---------------------------
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSortedList
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|private
name|String
name|collapseNamespaces
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|MetadataResolver
name|metadataResolver
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|repoIds
parameter_list|,
name|String
name|n
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|subNamespaces
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|repoIds
control|)
block|{
name|subNamespaces
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subNamespaces
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} is not collapsible as it has sub-namespaces: {}"
argument_list|,
name|n
argument_list|,
name|subNamespaces
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
else|else
block|{
for|for
control|(
name|String
name|repoId
range|:
name|repoIds
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projects
init|=
name|metadataResolver
operator|.
name|resolveProjects
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|projects
operator|!=
literal|null
operator|&&
operator|!
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} is not collapsible as it has projects"
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
block|}
return|return
name|collapseNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|metadataResolver
argument_list|,
name|repoIds
argument_list|,
name|n
operator|+
literal|"."
operator|+
name|subNamespaces
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

