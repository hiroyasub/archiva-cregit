begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|tree
operator|.
name|maven2
operator|.
name|DependencyTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|model
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|model
operator|.
name|TreeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|generic
operator|.
name|GenericMetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|maven2
operator|.
name|ArtifactMetadataVersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|maven2
operator|.
name|MavenProjectFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|RepositoryProxyConnectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArtifactContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArtifactContentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|BrowseResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|BrowseResultEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|VersionsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|BrowseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|utils
operator|.
name|ArtifactBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|utils
operator|.
name|ArtifactContentEntryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M3  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"browseService#rest"
argument_list|)
specifier|public
class|class
name|DefaultBrowseService
extends|extends
name|AbstractRestService
implements|implements
name|BrowseService
block|{
annotation|@
name|Inject
specifier|private
name|DependencyTreeBuilder
name|dependencyTreeBuilder
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryContentFactory
name|repositoryContentFactory
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"repositoryProxyConnectors#default"
argument_list|)
specifier|private
name|RepositoryProxyConnectors
name|connectors
decl_stmt|;
specifier|public
name|BrowseResult
name|getRootGroups
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: this logic should be optional, particularly remembering we want to keep this code simple
comment|//       it is located here to avoid the content repository implementation needing to do too much for what
comment|//       is essentially presentation code
name|Set
argument_list|<
name|String
argument_list|>
name|namespacesToCollapse
decl_stmt|;
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|namespacesToCollapse
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|namespacesToCollapse
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveRootNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|n
range|:
name|namespacesToCollapse
control|)
block|{
comment|// TODO: check performance of this
name|namespaces
operator|.
name|add
argument_list|(
name|collapseNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|metadataResolver
argument_list|,
name|selectedRepos
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|BrowseResultEntry
argument_list|>
name|browseGroupResultEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|BrowseResultEntry
argument_list|>
argument_list|(
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|namespaces
control|)
block|{
name|browseGroupResultEntries
operator|.
name|add
argument_list|(
operator|new
name|BrowseResultEntry
argument_list|(
name|namespace
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|browseGroupResultEntries
argument_list|)
expr_stmt|;
return|return
operator|new
name|BrowseResult
argument_list|(
name|browseGroupResultEntries
argument_list|)
return|;
block|}
specifier|public
name|BrowseResult
name|browseGroupId
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
decl_stmt|;
try|try
block|{
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespacesToCollapse
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|namespacesToCollapse
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
name|projects
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveProjects
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: this logic should be optional, particularly remembering we want to keep this code simple
comment|// it is located here to avoid the content repository implementation needing to do too much for what
comment|// is essentially presentation code
name|namespaces
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|namespacesToCollapse
control|)
block|{
comment|// TODO: check performance of this
name|namespaces
operator|.
name|add
argument_list|(
name|collapseNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|metadataResolver
argument_list|,
name|selectedRepos
argument_list|,
name|groupId
operator|+
literal|"."
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|BrowseResultEntry
argument_list|>
name|browseGroupResultEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|BrowseResultEntry
argument_list|>
argument_list|(
name|namespaces
operator|.
name|size
argument_list|()
operator|+
name|projects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|namespaces
control|)
block|{
name|browseGroupResultEntries
operator|.
name|add
argument_list|(
operator|new
name|BrowseResultEntry
argument_list|(
name|namespace
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|project
range|:
name|projects
control|)
block|{
name|browseGroupResultEntries
operator|.
name|add
argument_list|(
operator|new
name|BrowseResultEntry
argument_list|(
name|groupId
operator|+
literal|'.'
operator|+
name|project
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|browseGroupResultEntries
argument_list|)
expr_stmt|;
return|return
operator|new
name|BrowseResult
argument_list|(
name|browseGroupResultEntries
argument_list|)
return|;
block|}
specifier|public
name|VersionsList
name|getVersionsList
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|versions
init|=
name|getVersions
argument_list|(
name|selectedRepos
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|)
decl_stmt|;
return|return
operator|new
name|VersionsList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|versions
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|getVersions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projectVersions
init|=
name|metadataResolver
operator|.
name|resolveProjectVersions
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|)
decl_stmt|;
name|versions
operator|.
name|addAll
argument_list|(
name|projectVersions
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|sortedVersions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|versions
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sortedVersions
return|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ProjectVersionMetadata
name|getProjectMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|RepositorySession
name|repositorySession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repositorySession
operator|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
expr_stmt|;
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
if|if
condition|(
name|versionMetadata
operator|==
literal|null
operator|||
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
condition|)
block|{
try|try
block|{
name|versionMetadata
operator|=
name|metadataResolver
operator|.
name|resolveProjectVersion
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Skipping invalid metadata while compiling shared model for "
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|" in repo "
operator|+
name|repoId
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|versionMetadata
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|repositorySession
operator|!=
literal|null
condition|)
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ProjectVersionMetadata
name|getProjectVersionMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|RepositorySession
name|repositorySession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projectVersions
init|=
name|getVersions
argument_list|(
name|selectedRepos
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|)
decl_stmt|;
name|repositorySession
operator|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
expr_stmt|;
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|ProjectVersionMetadata
name|sharedModel
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|MavenProjectFacet
name|mavenFacet
init|=
operator|new
name|MavenProjectFacet
argument_list|()
decl_stmt|;
name|mavenFacet
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|mavenFacet
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|sharedModel
operator|.
name|addFacet
argument_list|(
name|mavenFacet
argument_list|)
expr_stmt|;
name|boolean
name|isFirstVersion
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|version
range|:
name|projectVersions
control|)
block|{
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
if|if
condition|(
name|versionMetadata
operator|==
literal|null
operator|||
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
condition|)
block|{
try|try
block|{
name|versionMetadata
operator|=
name|metadataResolver
operator|.
name|resolveProjectVersion
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Skipping invalid metadata while compiling shared model for "
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|" in repo "
operator|+
name|repoId
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|versionMetadata
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isFirstVersion
condition|)
block|{
name|sharedModel
operator|=
name|versionMetadata
expr_stmt|;
name|sharedModel
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MavenProjectFacet
name|versionMetadataMavenFacet
init|=
operator|(
name|MavenProjectFacet
operator|)
name|versionMetadata
operator|.
name|getFacet
argument_list|(
name|MavenProjectFacet
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionMetadataMavenFacet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mavenFacet
operator|.
name|getPackaging
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|mavenFacet
operator|.
name|getPackaging
argument_list|()
argument_list|,
name|versionMetadataMavenFacet
operator|.
name|getPackaging
argument_list|()
argument_list|)
condition|)
block|{
name|mavenFacet
operator|.
name|setPackaging
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sharedModel
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|sharedModel
operator|.
name|setName
argument_list|(
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedModel
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedModel
operator|.
name|getDescription
argument_list|()
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|sharedModel
operator|.
name|setDescription
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|?
name|versionMetadata
operator|.
name|getDescription
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedModel
operator|.
name|getIssueManagement
argument_list|()
operator|!=
literal|null
operator|&&
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedModel
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|sharedModel
operator|.
name|setIssueManagement
argument_list|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedModel
operator|.
name|getCiManagement
argument_list|()
operator|!=
literal|null
operator|&&
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedModel
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|sharedModel
operator|.
name|setCiManagement
argument_list|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedModel
operator|.
name|getOrganization
argument_list|()
operator|!=
literal|null
operator|&&
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedModel
operator|.
name|getOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|sharedModel
operator|.
name|setOrganization
argument_list|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedModel
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedModel
operator|.
name|getUrl
argument_list|()
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|sharedModel
operator|.
name|setUrl
argument_list|(
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|isFirstVersion
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|sharedModel
return|;
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|repositorySession
operator|!=
literal|null
condition|)
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|getTreeEntries
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|dependencyTreeBuilder
operator|.
name|buildDependencyTree
argument_list|(
name|selectedRepos
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getUserRepositories
parameter_list|()
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
return|return
name|userRepositories
operator|.
name|getAccessibleRepositories
argument_list|(
name|getPrincipal
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"repositories.read.observable.error"
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Artifact
argument_list|>
name|getDependees
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectVersionReference
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: what if we get duplicates across repositories?
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataResolver
name|metadataResolver
init|=
name|repositorySession
operator|.
name|getResolver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|getObservableRepos
argument_list|()
control|)
block|{
comment|// TODO: what about if we want to see this irrespective of version?
name|references
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveProjectReferences
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<
name|Artifact
argument_list|>
argument_list|(
name|references
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProjectVersionReference
name|projectVersionReference
range|:
name|references
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
operator|new
name|Artifact
argument_list|(
name|projectVersionReference
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|projectVersionReference
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|projectVersionReference
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getMetadatas
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
name|getProjectMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectVersionMetadata
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|MetadataFacet
name|metadataFacet
init|=
name|projectVersionMetadata
operator|.
name|getFacet
argument_list|(
name|GenericMetadataFacet
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|metadataFacet
operator|.
name|toProperties
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
specifier|public
name|Boolean
name|addMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
name|getProjectMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectVersionMetadata
operator|==
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MetadataFacet
name|metadataFacet
init|=
name|projectVersionMetadata
operator|.
name|getFacet
argument_list|(
name|GenericMetadataFacet
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|!=
literal|null
operator|&&
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|metadataFacet
operator|.
name|toProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataFacet
operator|=
operator|new
name|GenericMetadataFacet
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|metadataRepository
operator|.
name|updateProjectVersion
argument_list|(
name|repositoryId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|projectVersionMetadata
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|deleteMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
name|getProjectMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectVersionMetadata
operator|==
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|GenericMetadataFacet
name|metadataFacet
init|=
operator|(
name|GenericMetadataFacet
operator|)
name|projectVersionMetadata
operator|.
name|getFacet
argument_list|(
name|GenericMetadataFacet
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|!=
literal|null
operator|&&
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|metadataFacet
operator|.
name|toProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|metadataFacet
operator|.
name|setAdditionalProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
name|RepositorySession
name|repositorySession
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|metadataRepository
operator|.
name|updateProjectVersion
argument_list|(
name|repositoryId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|projectVersionMetadata
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|getArtifactContentEntries
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|ManagedRepositoryContent
name|managedRepositoryContent
init|=
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|archivaArtifact
init|=
operator|new
name|ArchivaArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|classifier
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|?
literal|"jar"
else|:
name|type
argument_list|,
name|repoId
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|managedRepositoryContent
operator|.
name|toFile
argument_list|(
name|archivaArtifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|readFileEntries
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|repoId
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifactDownloadInfos
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifactDownloadInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
name|RepositorySession
name|session
init|=
name|repositorySessionFactory
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|MetadataResolver
name|metadataResolver
init|=
name|session
operator|.
name|getResolver
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|metadataResolver
operator|.
name|resolveArtifacts
argument_list|(
name|session
argument_list|,
name|repoId
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|artifacts
argument_list|,
name|ArtifactMetadataVersionComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return
name|buildArtifacts
argument_list|(
name|artifacts
argument_list|,
name|repositoryId
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|artifactDownloadInfos
return|;
block|}
specifier|public
name|ArtifactContent
name|getArtifactContentText
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|ManagedRepositoryContent
name|managedRepositoryContent
init|=
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|archivaArtifact
init|=
operator|new
name|ArchivaArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|classifier
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|?
literal|"jar"
else|:
name|type
argument_list|,
name|repoId
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|managedRepositoryContent
operator|.
name|toFile
argument_list|(
name|archivaArtifact
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"file: {} not exists for repository: {} try next repository"
argument_list|,
name|file
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// zip entry of the path -> path must a real file entry of the archive
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ZipEntry
name|zipEntry
init|=
name|jarFile
operator|.
name|getEntry
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|jarFile
operator|.
name|getInputStream
argument_list|(
name|zipEntry
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|ArtifactContent
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
argument_list|,
name|repoId
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|jarFile
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArtifactContent
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|)
argument_list|,
name|repoId
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"artifact: {}:{}:{}:{}:{} not found"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|classifier
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// 404 ?
return|return
operator|new
name|ArtifactContent
argument_list|()
return|;
block|}
specifier|public
name|Boolean
name|artifactAvailable
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getSelectedRepos
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|boolean
name|snapshot
init|=
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|repoId
range|:
name|selectedRepos
control|)
block|{
name|ManagedRepository
name|managedRepository
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|snapshot
operator|&&
operator|!
name|managedRepository
operator|.
name|isSnapshots
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|snapshot
operator|&&
name|managedRepository
operator|.
name|isSnapshots
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
name|ManagedRepositoryContent
name|managedRepositoryContent
init|=
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
comment|// FIXME default to jar which can be wrong for war zip etc....
name|ArchivaArtifact
name|archivaArtifact
init|=
operator|new
name|ArchivaArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|,
name|repoId
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|managedRepositoryContent
operator|.
name|toFile
argument_list|(
name|archivaArtifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|path
init|=
name|managedRepositoryContent
operator|.
name|toPath
argument_list|(
name|archivaArtifact
argument_list|)
decl_stmt|;
name|file
operator|=
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepositoryContent
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// download pom now
name|String
name|pomPath
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|path
argument_list|,
literal|".jar"
argument_list|)
operator|+
literal|".pom"
decl_stmt|;
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepositoryContent
argument_list|,
name|pomPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|//---------------------------
comment|// internals
comment|//---------------------------
specifier|private
name|void
name|closeQuietly
parameter_list|(
name|JarFile
name|jarFile
parameter_list|)
block|{
if|if
condition|(
name|jarFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|jarFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ignore error closing jarFile {}"
argument_list|,
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|readFileEntries
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|filterPath
parameter_list|,
name|String
name|repoId
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
name|artifactContentEntryMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|filterDepth
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|filterPath
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
comment|/*if ( filterDepth == 0 )         {             filterDepth = 1;         }*/
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|jarEntryEnumeration
init|=
name|jarFile
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|jarEntryEnumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|JarEntry
name|currentEntry
init|=
name|jarEntryEnumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|cleanedEntryName
init|=
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|"/"
argument_list|)
condition|?
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|"/"
argument_list|)
else|:
name|currentEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|entryRootPath
init|=
name|getRootPath
argument_list|(
name|cleanedEntryName
argument_list|)
decl_stmt|;
name|int
name|depth
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|cleanedEntryName
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|filterPath
argument_list|)
operator|&&
operator|!
name|artifactContentEntryMap
operator|.
name|containsKey
argument_list|(
name|entryRootPath
argument_list|)
operator|&&
name|depth
operator|==
name|filterDepth
condition|)
block|{
name|artifactContentEntryMap
operator|.
name|put
argument_list|(
name|entryRootPath
argument_list|,
operator|new
name|ArtifactContentEntry
argument_list|(
name|entryRootPath
argument_list|,
operator|!
name|currentEntry
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|depth
argument_list|,
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|cleanedEntryName
argument_list|,
name|filterPath
argument_list|)
operator|&&
operator|(
name|depth
operator|==
name|filterDepth
operator|||
operator|(
operator|!
name|currentEntry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|depth
operator|==
name|filterDepth
operator|)
operator|)
condition|)
block|{
name|artifactContentEntryMap
operator|.
name|put
argument_list|(
name|cleanedEntryName
argument_list|,
operator|new
name|ArtifactContentEntry
argument_list|(
name|cleanedEntryName
argument_list|,
operator|!
name|currentEntry
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|depth
argument_list|,
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|filterPath
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
name|filteredArtifactContentEntryMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
name|entry
range|:
name|artifactContentEntryMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|filteredArtifactContentEntryMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|sorted
init|=
name|getSmallerDepthEntries
argument_list|(
name|filteredArtifactContentEntryMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|sorted
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|ArtifactContentEntryComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jarFile
operator|!=
literal|null
condition|)
block|{
name|jarFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactContentEntry
argument_list|>
argument_list|(
name|artifactContentEntryMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|ArtifactContentEntryComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
specifier|private
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|getSmallerDepthEntries
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|int
name|smallestDepth
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
argument_list|>
name|perDepthList
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ArtifactContentEntry
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ArtifactContentEntry
name|current
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getDepth
argument_list|()
operator|<
name|smallestDepth
condition|)
block|{
name|smallestDepth
operator|=
name|current
operator|.
name|getDepth
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|currentList
init|=
name|perDepthList
operator|.
name|get
argument_list|(
name|current
operator|.
name|getDepth
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentList
operator|==
literal|null
condition|)
block|{
name|currentList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactContentEntry
argument_list|>
argument_list|()
expr_stmt|;
name|currentList
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|perDepthList
operator|.
name|put
argument_list|(
name|current
operator|.
name|getDepth
argument_list|()
argument_list|,
name|currentList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentList
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perDepthList
operator|.
name|get
argument_list|(
name|smallestDepth
argument_list|)
return|;
block|}
comment|/**      * @param path      * @return org/apache -> org , org -> org      */
specifier|private
name|String
name|getRootPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|contains
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|)
condition|)
block|{
return|return
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSelectedRepos
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
init|=
name|getObservableRepos
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|selectedRepos
argument_list|)
condition|)
block|{
comment|// FIXME 403 ???
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
comment|// check user has karma on the repository
if|if
condition|(
operator|!
name|selectedRepos
operator|.
name|contains
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"browse.root.groups.repositoy.denied"
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|selectedRepos
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedRepos
return|;
block|}
specifier|private
name|String
name|collapseNamespaces
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|MetadataResolver
name|metadataResolver
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|repoIds
parameter_list|,
name|String
name|n
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|subNamespaces
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|repoIds
control|)
block|{
name|subNamespaces
operator|.
name|addAll
argument_list|(
name|metadataResolver
operator|.
name|resolveNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subNamespaces
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} is not collapsible as it has sub-namespaces: {}"
argument_list|,
name|n
argument_list|,
name|subNamespaces
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
else|else
block|{
for|for
control|(
name|String
name|repoId
range|:
name|repoIds
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projects
init|=
name|metadataResolver
operator|.
name|resolveProjects
argument_list|(
name|repositorySession
argument_list|,
name|repoId
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|projects
operator|!=
literal|null
operator|&&
operator|!
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} is not collapsible as it has projects"
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
block|}
return|return
name|collapseNamespaces
argument_list|(
name|repositorySession
argument_list|,
name|metadataResolver
argument_list|,
name|repoIds
argument_list|,
name|n
operator|+
literal|"."
operator|+
name|subNamespaces
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

