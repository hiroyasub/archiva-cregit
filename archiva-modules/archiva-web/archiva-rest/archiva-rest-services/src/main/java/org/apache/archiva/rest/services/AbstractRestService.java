begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|PrincipalNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|UserRepositories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|RedbackAuthenticationThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|redback
operator|.
name|rest
operator|.
name|services
operator|.
name|RedbackRequestInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * abstract class with common utilities methods  *  * @author Olivier Lamy  * @since 1.4-M1  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRestService
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|AuditListener
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|UserRepositories
name|userRepositories
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"repositorySessionFactory"
argument_list|)
specifier|protected
name|RepositorySessionFactory
name|repositorySessionFactory
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|HttpServletRequest
name|httpServletRequest
decl_stmt|;
specifier|protected
name|AuditInformation
name|getAuditInformation
parameter_list|()
block|{
name|RedbackRequestInformation
name|redbackRequestInformation
init|=
name|RedbackAuthenticationThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|redbackRequestInformation
operator|==
literal|null
condition|?
literal|null
else|:
name|redbackRequestInformation
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|remoteAddr
init|=
name|redbackRequestInformation
operator|==
literal|null
condition|?
literal|null
else|:
name|redbackRequestInformation
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
return|return
operator|new
name|AuditInformation
argument_list|(
name|user
argument_list|,
name|remoteAddr
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|AuditListener
argument_list|>
name|getAuditListeners
parameter_list|()
block|{
return|return
name|auditListeners
return|;
block|}
specifier|public
name|void
name|setAuditListeners
parameter_list|(
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|=
name|auditListeners
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getObservableRepos
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|userRepositories
operator|.
name|getObservableRepositoryIds
argument_list|(
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ids
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
else|:
name|ids
return|;
block|}
catch|catch
parameter_list|(
name|PrincipalNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getPrincipal
parameter_list|()
block|{
name|RedbackRequestInformation
name|redbackRequestInformation
init|=
name|RedbackAuthenticationThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|redbackRequestInformation
operator|==
literal|null
condition|?
name|UserManager
operator|.
name|GUEST_USERNAME
else|:
operator|(
name|redbackRequestInformation
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
name|UserManager
operator|.
name|GUEST_USERNAME
else|:
name|redbackRequestInformation
operator|.
name|getUser
argument_list|()
operator|.
name|getUsername
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getBaseUrl
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
name|req
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|req
operator|.
name|getServerName
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getServerPort
argument_list|()
operator|==
literal|80
condition|?
literal|""
else|:
literal|":"
operator|+
name|req
operator|.
name|getServerPort
argument_list|()
operator|)
operator|+
name|req
operator|.
name|getContextPath
argument_list|()
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getBeansOfType
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
comment|//TODO do some caching here !!!
comment|// olamy : with plexus we get only roleHint
comment|// as per convention we named spring bean role#hint remove role# if exists
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|springBeans
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|beans
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|(
name|springBeans
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|springBeans
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|beans
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|beans
return|;
block|}
specifier|protected
name|void
name|triggerAuditEvent
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|filePath
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|AuditEvent
name|auditEvent
init|=
operator|new
name|AuditEvent
argument_list|(
name|repositoryId
argument_list|,
name|getPrincipal
argument_list|()
argument_list|,
name|filePath
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|AuditInformation
name|auditInformation
init|=
name|getAuditInformation
argument_list|()
decl_stmt|;
name|auditEvent
operator|.
name|setUserId
argument_list|(
name|auditInformation
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|auditInformation
operator|.
name|getUser
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|auditEvent
operator|.
name|setRemoteIP
argument_list|(
name|auditInformation
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AuditListener
name|auditListener
range|:
name|getAuditListeners
argument_list|()
control|)
block|{
name|auditListener
operator|.
name|auditEvent
argument_list|(
name|auditEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

