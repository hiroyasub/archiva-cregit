begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|admin
operator|.
name|ArchivaAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksummedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|MavenIndexerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArtifactTransferRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|ArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|ArchivaIndexingTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|ArtifactIndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|DownloadRemoteIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|DownloadRemoteIndexScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|DefaultSecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|users
operator|.
name|UserNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M1  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoriesService#rest"
argument_list|)
specifier|public
class|class
name|DefaultRepositoriesService
extends|extends
name|AbstractRestService
implements|implements
name|RepositoriesService
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|( )
argument_list|)
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"taskExecutor#indexing"
argument_list|)
specifier|private
name|ArchivaIndexingTaskExecutor
name|archivaIndexingTaskExecutor
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|PlexusSisuBridge
name|plexusSisuBridge
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|MavenIndexerUtils
name|mavenIndexerUtils
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|SecuritySystem
name|securitySystem
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArchivaAdministration
name|archivaAdministration
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|ArchivaTaskScheduler
name|scheduler
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DownloadRemoteIndexScheduler
name|downloadRemoteIndexScheduler
decl_stmt|;
specifier|private
name|ChecksumAlgorithm
index|[]
name|algorithms
init|=
operator|new
name|ChecksumAlgorithm
index|[]
block|{
name|ChecksumAlgorithm
operator|.
name|SHA1
block|,
name|ChecksumAlgorithm
operator|.
name|MD5
block|}
decl_stmt|;
specifier|public
name|Boolean
name|scanRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|fullScan
parameter_list|)
block|{
if|if
condition|(
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"scanning of repository with id {} already scheduled"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
name|fullScan
argument_list|)
expr_stmt|;
try|try
block|{
name|repositoryTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to schedule scanning of repo with id {}"
argument_list|,
name|repositoryId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Boolean
name|alreadyScanning
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
name|repositoryTaskScheduler
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repositoryId
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|removeScanningTaskFromQueue
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|repositoryTaskScheduler
operator|.
name|unQueueTask
argument_list|(
name|task
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to unschedule scanning of repo with id {}"
argument_list|,
name|repositoryId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|Boolean
name|scanRepositoryNow
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|fullScan
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|ManagedRepository
name|repository
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|IndexingContext
name|context
init|=
name|managedRepositoryAdmin
operator|.
name|createIndexContext
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|ArtifactIndexingTask
name|task
init|=
operator|new
name|ArtifactIndexingTask
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|,
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|FINISH
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|task
operator|.
name|setExecuteOnEntireRepo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOnlyUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|archivaIndexingTaskExecutor
operator|.
name|executeTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|scheduleDownloadRemoteIndex
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|now
parameter_list|,
name|boolean
name|fullDownload
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|downloadRemoteIndexScheduler
operator|.
name|scheduleDownloadRemote
argument_list|(
name|repositoryId
argument_list|,
name|now
argument_list|,
name|fullDownload
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DownloadRemoteIndexException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|copyArtifact
parameter_list|(
name|ArtifactTransferRequest
name|artifactTransferRequest
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
comment|// check parameters
name|String
name|userName
init|=
name|getAuditInformation
argument_list|( )
operator|.
name|getUser
argument_list|( )
operator|.
name|getUsername
argument_list|( )
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|userName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"copyArtifact call: userName not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|artifactTransferRequest
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"copyArtifact call: sourceRepositoryId cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"copyArtifact call: targetRepositoryId cannot be null"
argument_list|)
throw|;
block|}
name|ManagedRepository
name|source
init|=
literal|null
decl_stmt|;
try|try
block|{
name|source
operator|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|artifactTransferRequest
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"cannot find repository with id "
operator|+
name|artifactTransferRequest
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
throw|;
block|}
name|ManagedRepository
name|target
init|=
literal|null
decl_stmt|;
try|try
block|{
name|target
operator|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"cannot find repository with id "
operator|+
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|artifactTransferRequest
operator|.
name|getGroupId
argument_list|( )
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"groupId is mandatory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|artifactTransferRequest
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"artifactId is mandatory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"version is mandatory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"copy of SNAPSHOT not supported"
argument_list|)
throw|;
block|}
comment|// end check parameters
name|User
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|securitySystem
operator|.
name|getUserManager
argument_list|( )
operator|.
name|findUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UserNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"user "
operator|+
name|userName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// check karma on source : read
name|AuthenticationResult
name|authn
init|=
operator|new
name|AuthenticationResult
argument_list|(
literal|true
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SecuritySession
name|securitySession
init|=
operator|new
name|DefaultSecuritySession
argument_list|(
name|authn
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|authz
init|=
name|securitySystem
operator|.
name|isAuthorized
argument_list|(
name|securitySession
argument_list|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_ACCESS
argument_list|,
name|artifactTransferRequest
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authz
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"not authorized to access repo:"
operator|+
name|artifactTransferRequest
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"error reading permission: "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
comment|// check karma on target: write
try|try
block|{
name|boolean
name|authz
init|=
name|securitySystem
operator|.
name|isAuthorized
argument_list|(
name|securitySession
argument_list|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_UPLOAD
argument_list|,
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authz
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"not authorized to write to repo:"
operator|+
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"error reading permission: "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
comment|// sounds good we can continue !
name|ArtifactReference
name|artifactReference
init|=
operator|new
name|ArtifactReference
argument_list|( )
decl_stmt|;
name|artifactReference
operator|.
name|setArtifactId
argument_list|(
name|artifactTransferRequest
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setGroupId
argument_list|(
name|artifactTransferRequest
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setVersion
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setClassifier
argument_list|(
name|artifactTransferRequest
operator|.
name|getClassifier
argument_list|( )
argument_list|)
expr_stmt|;
name|String
name|packaging
init|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|artifactTransferRequest
operator|.
name|getPackaging
argument_list|( )
argument_list|)
decl_stmt|;
name|artifactReference
operator|.
name|setType
argument_list|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|packaging
argument_list|)
condition|?
literal|"jar"
else|:
name|packaging
argument_list|)
expr_stmt|;
try|try
block|{
name|ManagedRepositoryContent
name|sourceRepository
init|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|artifactTransferRequest
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
decl_stmt|;
name|String
name|artifactSourcePath
init|=
name|sourceRepository
operator|.
name|toPath
argument_list|(
name|artifactReference
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|artifactSourcePath
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot find artifact "
operator|+
name|artifactTransferRequest
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"cannot find artifact "
operator|+
name|artifactTransferRequest
operator|.
name|toString
argument_list|( )
argument_list|)
throw|;
block|}
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|source
operator|.
name|getLocation
argument_list|( )
argument_list|,
name|artifactSourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactFile
operator|.
name|exists
argument_list|( )
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot find artifact "
operator|+
name|artifactTransferRequest
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"cannot find artifact "
operator|+
name|artifactTransferRequest
operator|.
name|toString
argument_list|( )
argument_list|)
throw|;
block|}
name|ManagedRepositoryContent
name|targetRepository
init|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
argument_list|)
decl_stmt|;
name|String
name|artifactPath
init|=
name|targetRepository
operator|.
name|toPath
argument_list|(
name|artifactReference
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|artifactPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|artifactPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
argument_list|)
decl_stmt|;
name|File
name|targetPath
init|=
operator|new
name|File
argument_list|(
name|target
operator|.
name|getLocation
argument_list|( )
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|Date
name|lastUpdatedTimestamp
init|=
name|Calendar
operator|.
name|getInstance
argument_list|( )
operator|.
name|getTime
argument_list|( )
decl_stmt|;
name|int
name|newBuildNumber
init|=
literal|1
decl_stmt|;
name|String
name|timestamp
init|=
literal|null
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|MetadataTools
operator|.
name|MAVEN_METADATA
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|versionMetadata
init|=
name|getMetadata
argument_list|(
name|versionMetadataFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetPath
operator|.
name|exists
argument_list|( )
condition|)
block|{
name|targetPath
operator|.
name|mkdirs
argument_list|( )
expr_stmt|;
block|}
name|String
name|filename
init|=
name|artifactPath
operator|.
name|substring
argument_list|(
name|lastIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// FIXME some dupe with uploadaction
name|boolean
name|fixChecksums
init|=
operator|!
operator|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|( )
operator|.
name|contains
argument_list|(
literal|"create-missing-checksums"
argument_list|)
operator|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetFile
operator|.
name|exists
argument_list|( )
operator|&&
name|target
operator|.
name|isBlockRedeployments
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
literal|"artifact already exists in target repo: "
operator|+
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
operator|+
literal|" and redeployment blocked"
argument_list|)
throw|;
block|}
else|else
block|{
name|copyFile
argument_list|(
name|artifactFile
argument_list|,
name|targetPath
argument_list|,
name|filename
argument_list|,
name|fixChecksums
argument_list|)
expr_stmt|;
name|queueRepositoryTask
argument_list|(
name|target
operator|.
name|getId
argument_list|( )
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
comment|// copy source pom to target repo
name|String
name|pomFilename
init|=
name|filename
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|artifactTransferRequest
operator|.
name|getClassifier
argument_list|( )
argument_list|)
condition|)
block|{
name|pomFilename
operator|=
name|StringUtils
operator|.
name|remove
argument_list|(
name|pomFilename
argument_list|,
literal|"-"
operator|+
name|artifactTransferRequest
operator|.
name|getClassifier
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|pomFilename
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|pomFilename
argument_list|)
operator|+
literal|".pom"
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|source
operator|.
name|getLocation
argument_list|( )
argument_list|,
name|artifactSourcePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|artifactPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|pomFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|pomFile
operator|!=
literal|null
operator|&&
name|pomFile
operator|.
name|length
argument_list|( )
operator|>
literal|0
condition|)
block|{
name|copyFile
argument_list|(
name|pomFile
argument_list|,
name|targetPath
argument_list|,
name|pomFilename
argument_list|,
name|fixChecksums
argument_list|)
expr_stmt|;
name|queueRepositoryTask
argument_list|(
name|target
operator|.
name|getId
argument_list|( )
argument_list|,
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|pomFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// explicitly update only if metadata-updater consumer is not enabled!
if|if
condition|(
operator|!
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|( )
operator|.
name|contains
argument_list|(
literal|"metadata-updater"
argument_list|)
condition|)
block|{
name|updateProjectMetadata
argument_list|(
name|targetPath
operator|.
name|getAbsolutePath
argument_list|( )
argument_list|,
name|lastUpdatedTimestamp
argument_list|,
name|timestamp
argument_list|,
name|newBuildNumber
argument_list|,
name|fixChecksums
argument_list|,
name|artifactTransferRequest
argument_list|)
expr_stmt|;
block|}
name|String
name|msg
init|=
literal|"Artifact \'"
operator|+
name|artifactTransferRequest
operator|.
name|getGroupId
argument_list|( )
operator|+
literal|":"
operator|+
name|artifactTransferRequest
operator|.
name|getArtifactId
argument_list|( )
operator|+
literal|":"
operator|+
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
operator|+
literal|"\' was successfully deployed to repository \'"
operator|+
name|artifactTransferRequest
operator|.
name|getTargetRepositoryId
argument_list|( )
operator|+
literal|"\'"
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RepositoryAdminException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|//FIXME some duplicate with UploadAction
specifier|private
name|void
name|queueRepositoryTask
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|File
name|localFile
parameter_list|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setResourceFile
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|task
operator|.
name|setUpdateRelatedArtifacts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//task.setScanAll( true );
try|try
block|{
name|scheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to queue repository task to execute consumers on resource file ['"
operator|+
name|localFile
operator|.
name|getName
argument_list|( )
operator|+
literal|"']."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ArchivaRepositoryMetadata
name|getMetadata
parameter_list|(
name|File
name|metadataFile
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|ArchivaRepositoryMetadata
name|metadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|( )
decl_stmt|;
if|if
condition|(
name|metadataFile
operator|.
name|exists
argument_list|( )
condition|)
block|{
name|metadata
operator|=
name|RepositoryMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
specifier|private
name|void
name|copyFile
parameter_list|(
name|File
name|sourceFile
parameter_list|,
name|File
name|targetPath
parameter_list|,
name|String
name|targetFilename
parameter_list|,
name|boolean
name|fixChecksums
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|targetFilename
argument_list|)
argument_list|)
decl_stmt|;
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|sourceFile
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|( )
expr_stmt|;
name|input
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|fixChecksums
condition|)
block|{
name|fixChecksums
argument_list|(
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|targetFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fixChecksums
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|ChecksummedFile
name|checksum
init|=
operator|new
name|ChecksummedFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|fixChecksums
argument_list|(
name|algorithms
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateProjectMetadata
parameter_list|(
name|String
name|targetPath
parameter_list|,
name|Date
name|lastUpdatedTimestamp
parameter_list|,
name|String
name|timestamp
parameter_list|,
name|int
name|buildNumber
parameter_list|,
name|boolean
name|fixChecksums
parameter_list|,
name|ArtifactTransferRequest
name|artifactTransferRequest
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|availableVersions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|( )
decl_stmt|;
name|String
name|latestVersion
init|=
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
decl_stmt|;
name|File
name|projectDir
init|=
operator|new
name|File
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getParentFile
argument_list|( )
decl_stmt|;
name|File
name|projectMetadataFile
init|=
operator|new
name|File
argument_list|(
name|projectDir
argument_list|,
name|MetadataTools
operator|.
name|MAVEN_METADATA
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|projectMetadata
init|=
name|getMetadata
argument_list|(
name|projectMetadataFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectMetadataFile
operator|.
name|exists
argument_list|( )
condition|)
block|{
name|availableVersions
operator|=
name|projectMetadata
operator|.
name|getAvailableVersions
argument_list|( )
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|availableVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|availableVersions
operator|.
name|contains
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
condition|)
block|{
name|availableVersions
operator|.
name|add
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|latestVersion
operator|=
name|availableVersions
operator|.
name|get
argument_list|(
name|availableVersions
operator|.
name|size
argument_list|( )
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|availableVersions
operator|.
name|add
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setGroupId
argument_list|(
name|artifactTransferRequest
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setArtifactId
argument_list|(
name|artifactTransferRequest
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectMetadata
operator|.
name|getGroupId
argument_list|( )
operator|==
literal|null
condition|)
block|{
name|projectMetadata
operator|.
name|setGroupId
argument_list|(
name|artifactTransferRequest
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectMetadata
operator|.
name|getArtifactId
argument_list|( )
operator|==
literal|null
condition|)
block|{
name|projectMetadata
operator|.
name|setArtifactId
argument_list|(
name|artifactTransferRequest
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|projectMetadata
operator|.
name|setLatestVersion
argument_list|(
name|latestVersion
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setLastUpdatedTimestamp
argument_list|(
name|lastUpdatedTimestamp
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setAvailableVersions
argument_list|(
name|availableVersions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifactTransferRequest
operator|.
name|getVersion
argument_list|( )
argument_list|)
condition|)
block|{
name|projectMetadata
operator|.
name|setReleasedVersion
argument_list|(
name|latestVersion
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|projectMetadata
argument_list|,
name|projectMetadataFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixChecksums
condition|)
block|{
name|fixChecksums
argument_list|(
name|projectMetadataFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

