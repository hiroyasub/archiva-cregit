begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|v2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RedbackRuntimeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|runtime
operator|.
name|RedbackRuntimeConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|model
operator|.
name|PagedResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|model
operator|.
name|PropertyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|util
operator|.
name|QueryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authentication
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|connection
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|connection
operator|.
name|LdapConnectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|connection
operator|.
name|LdapConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|connection
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|common
operator|.
name|ldap
operator|.
name|user
operator|.
name|LdapUserMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|policy
operator|.
name|CookieSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|policy
operator|.
name|PasswordRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|rbac
operator|.
name|RBACManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|BeanInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|LdapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|ErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|v2
operator|.
name|SecurityConfigurationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|AuthenticationNotSupportedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|CommunicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NoPermissionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ServiceUnavailableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|v2
operator|.
name|ErrorKeys
operator|.
name|INVALID_RESULT_SET_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|services
operator|.
name|v2
operator|.
name|ErrorKeys
operator|.
name|REPOSITORY_ADMIN_ERROR
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"v2.defaultSecurityConfigurationService"
argument_list|)
specifier|public
class|class
name|DefaultSecurityConfigurationService
implements|implements
name|SecurityConfigurationService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSecurityConfigurationService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|KNOWN_LDAP_CONTEXT_PROVIDERS
init|=
block|{
literal|"com.sun.jndi.ldap.LdapCtxFactory"
block|,
literal|"com.ibm.jndi.LDAPCtxFactory"
block|}
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|availableContextProviders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QueryHelper
argument_list|<
name|PropertyEntry
argument_list|>
name|PROP_QUERY_HELPER
init|=
operator|new
name|QueryHelper
argument_list|<>
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"key"
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|PROP_QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"key"
argument_list|,
name|PropertyEntry
operator|::
name|getKey
argument_list|)
expr_stmt|;
name|PROP_QUERY_HELPER
operator|.
name|addStringFilter
argument_list|(
literal|"value"
argument_list|,
name|PropertyEntry
operator|::
name|getValue
argument_list|)
expr_stmt|;
name|PROP_QUERY_HELPER
operator|.
name|addNullsafeFieldComparator
argument_list|(
literal|"key"
argument_list|,
name|PropertyEntry
operator|::
name|getKey
argument_list|)
expr_stmt|;
name|PROP_QUERY_HELPER
operator|.
name|addNullsafeFieldComparator
argument_list|(
literal|"value"
argument_list|,
name|PropertyEntry
operator|::
name|getValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ResourceBundle
name|bundle
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RedbackRuntimeConfigurationAdmin
name|redbackRuntimeConfigurationAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"userManager#default"
argument_list|)
specifier|private
name|UserManager
name|userManager
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"rbacManager#default"
argument_list|)
specifier|private
name|RBACManager
name|rbacManager
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RoleManager
name|roleManager
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"ldapConnectionFactory#configurable"
argument_list|)
specifier|private
name|LdapConnectionFactory
name|ldapConnectionFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|LdapUserMapper
name|ldapUserMapper
decl_stmt|;
annotation|@
name|PostConstruct
name|void
name|init
parameter_list|( )
block|{
name|bundle
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
literal|"org.apache.archiva.rest.RestBundle"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ldapClass
range|:
name|KNOWN_LDAP_CONTEXT_PROVIDERS
control|)
block|{
if|if
condition|(
name|isContextFactoryAvailable
argument_list|(
name|ldapClass
argument_list|)
condition|)
block|{
name|availableContextProviders
operator|.
name|add
argument_list|(
name|ldapClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SecurityConfiguration
name|getConfiguration
parameter_list|( )
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"getRedbackRuntimeConfiguration -> {}"
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
return|return
name|SecurityConfiguration
operator|.
name|ofRedbackConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateConfig
parameter_list|(
name|SecurityConfiguration
name|newConfig
parameter_list|,
name|RedbackRuntimeConfiguration
name|rbConfig
parameter_list|)
block|{
name|rbConfig
operator|.
name|setUserManagerImpls
argument_list|(
name|newConfig
operator|.
name|getActiveUserManagers
argument_list|( )
argument_list|)
expr_stmt|;
name|rbConfig
operator|.
name|setRbacManagerImpls
argument_list|(
name|newConfig
operator|.
name|getActiveRbacManagers
argument_list|( )
argument_list|)
expr_stmt|;
name|rbConfig
operator|.
name|setUseUsersCache
argument_list|(
name|newConfig
operator|.
name|isUserCacheEnabled
argument_list|( )
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|rbConfig
operator|.
name|getConfigurationProperties
argument_list|( )
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProp
range|:
name|newConfig
operator|.
name|getProperties
argument_list|( )
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|newProp
operator|.
name|getKey
argument_list|( )
argument_list|,
name|newProp
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateConfig
parameter_list|(
name|LdapConfiguration
name|newConfig
parameter_list|,
name|RedbackRuntimeConfiguration
name|rbConfig
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|LdapConfiguration
name|ldapConfig
init|=
name|rbConfig
operator|.
name|getLdapConfiguration
argument_list|( )
decl_stmt|;
name|ldapConfig
operator|.
name|setBaseDn
argument_list|(
name|newConfig
operator|.
name|getBaseDn
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setAuthenticationMethod
argument_list|(
name|newConfig
operator|.
name|getAuthenticationMethod
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setBindAuthenticatorEnabled
argument_list|(
name|newConfig
operator|.
name|isBindAuthenticatorEnabled
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setBindDn
argument_list|(
name|newConfig
operator|.
name|getBindDn
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setSsl
argument_list|(
name|newConfig
operator|.
name|isSslEnabled
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setBaseGroupsDn
argument_list|(
name|newConfig
operator|.
name|getGroupsBaseDn
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setHostName
argument_list|(
name|newConfig
operator|.
name|getHostName
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setPort
argument_list|(
name|newConfig
operator|.
name|getPort
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setPassword
argument_list|(
name|newConfig
operator|.
name|getBindPassword
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setUseRoleNameAsGroup
argument_list|(
name|newConfig
operator|.
name|isUseRoleNameAsGroup
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setWritable
argument_list|(
name|newConfig
operator|.
name|isWritable
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConfig
operator|.
name|setContextFactory
argument_list|(
name|newConfig
operator|.
name|getContextFactory
argument_list|( )
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|ldapConfig
operator|.
name|getExtraProperties
argument_list|( )
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProp
range|:
name|newConfig
operator|.
name|getProperties
argument_list|( )
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|newProp
operator|.
name|getKey
argument_list|( )
argument_list|,
name|newProp
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateConfig
parameter_list|(
name|CacheConfiguration
name|newConfig
parameter_list|,
name|RedbackRuntimeConfiguration
name|rbConfig
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|CacheConfiguration
name|cacheConfig
init|=
name|rbConfig
operator|.
name|getUsersCacheConfiguration
argument_list|( )
decl_stmt|;
name|cacheConfig
operator|.
name|setMaxElementsInMemory
argument_list|(
name|newConfig
operator|.
name|getMaxEntriesInMemory
argument_list|( )
argument_list|)
expr_stmt|;
name|cacheConfig
operator|.
name|setMaxElementsOnDisk
argument_list|(
name|newConfig
operator|.
name|getMaxEntriesOnDisk
argument_list|( )
argument_list|)
expr_stmt|;
name|cacheConfig
operator|.
name|setTimeToLiveSeconds
argument_list|(
name|newConfig
operator|.
name|getTimeToLiveSeconds
argument_list|( )
argument_list|)
expr_stmt|;
name|cacheConfig
operator|.
name|setTimeToIdleSeconds
argument_list|(
name|newConfig
operator|.
name|getTimeToIdleSeconds
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SecurityConfiguration
name|updateConfiguration
parameter_list|(
name|SecurityConfiguration
name|newConfiguration
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
if|if
condition|(
name|newConfiguration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|MISSING_DATA
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
try|try
block|{
name|RedbackRuntimeConfiguration
name|conf
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|boolean
name|userManagerChanged
init|=
operator|!
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|newConfiguration
operator|.
name|getActiveUserManagers
argument_list|( )
argument_list|,
name|conf
operator|.
name|getUserManagerImpls
argument_list|( )
argument_list|)
decl_stmt|;
name|boolean
name|rbacManagerChanged
init|=
operator|!
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|newConfiguration
operator|.
name|getActiveRbacManagers
argument_list|( )
argument_list|,
name|conf
operator|.
name|getRbacManagerImpls
argument_list|( )
argument_list|)
decl_stmt|;
name|boolean
name|ldapConfigured
init|=
name|newConfiguration
operator|.
name|getActiveUserManagers
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|anyMatch
argument_list|(
name|um
lambda|->
name|um
operator|.
name|contains
argument_list|(
literal|"ldap"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ldapConfigured
condition|)
block|{
name|ldapConfigured
operator|=
name|newConfiguration
operator|.
name|getActiveRbacManagers
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|anyMatch
argument_list|(
name|um
lambda|->
name|um
operator|.
name|contains
argument_list|(
literal|"ldap"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateConfig
argument_list|(
name|newConfiguration
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|userManagerChanged
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"user managerImpls changed to {} so reload it"
argument_list|,
name|newConfiguration
operator|.
name|getActiveUserManagers
argument_list|( )
argument_list|)
expr_stmt|;
name|userManager
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|rbacManagerChanged
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"rbac manager changed to {} so reload it"
argument_list|,
name|newConfiguration
operator|.
name|getActiveRbacManagers
argument_list|( )
argument_list|)
expr_stmt|;
name|rbacManager
operator|.
name|initialize
argument_list|( )
expr_stmt|;
name|roleManager
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|ldapConfigured
condition|)
block|{
try|try
block|{
name|ldapConnectionFactory
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize LDAP connection factory: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_CF_INIT_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|Collection
argument_list|<
name|PasswordRule
argument_list|>
name|passwordRules
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|PasswordRule
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|( )
decl_stmt|;
for|for
control|(
name|PasswordRule
name|passwordRule
range|:
name|passwordRules
control|)
block|{
name|passwordRule
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
name|Collection
argument_list|<
name|CookieSettings
argument_list|>
name|cookieSettingsList
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|CookieSettings
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|( )
decl_stmt|;
for|for
control|(
name|CookieSettings
name|cookieSettings
range|:
name|cookieSettingsList
control|)
block|{
name|cookieSettings
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Authenticator
argument_list|>
name|authenticators
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|Authenticator
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|( )
decl_stmt|;
for|for
control|(
name|Authenticator
name|authenticator
range|:
name|authenticators
control|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing authenticatior "
operator|+
name|authenticator
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|authenticator
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Initialization of authenticator failed "
operator|+
name|authenticator
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ldapConfigured
condition|)
block|{
try|try
block|{
name|ldapUserMapper
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_USER_MAPPER_INIT_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|SecurityConfiguration
operator|.
name|ofRedbackConfiguration
argument_list|(
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while retrieve updated configuration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PagedResult
argument_list|<
name|PropertyEntry
argument_list|>
name|getConfigurationProperties
parameter_list|(
name|String
name|searchTerm
parameter_list|,
name|Integer
name|offset
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|orderBy
parameter_list|,
name|String
name|order
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"getRedbackRuntimeConfiguration -> {}"
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|boolean
name|ascending
init|=
name|PROP_QUERY_HELPER
operator|.
name|isAscending
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|PropertyEntry
argument_list|>
name|filter
init|=
name|PROP_QUERY_HELPER
operator|.
name|getQueryFilter
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|PropertyEntry
argument_list|>
name|comparator
init|=
name|PROP_QUERY_HELPER
operator|.
name|getComparator
argument_list|(
name|orderBy
argument_list|,
name|ascending
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|redbackRuntimeConfiguration
operator|.
name|getConfigurationProperties
argument_list|( )
decl_stmt|;
name|int
name|totalCount
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|props
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|entry
lambda|->
operator|new
name|PropertyEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|count
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PropertyEntry
argument_list|>
name|result
init|=
name|props
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|entry
lambda|->
operator|new
name|PropertyEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparator
argument_list|)
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
return|return
operator|new
name|PagedResult
argument_list|<>
argument_list|(
name|totalCount
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The total count of the result properties is higher than max integer value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|INVALID_RESULT_SET_ERROR
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PropertyEntry
name|getConfigurationProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|conf
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|( )
operator|.
name|containsKey
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|getConfigurationProperties
argument_list|( )
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyEntry
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|PROPERTY_NOT_FOUND
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|updateConfigurationProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|PropertyEntry
name|propertyValue
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
if|if
condition|(
name|propertyValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|MISSING_DATA
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
try|try
block|{
name|RedbackRuntimeConfiguration
name|conf
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|( )
operator|.
name|containsKey
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|conf
operator|.
name|getConfigurationProperties
argument_list|( )
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|( )
operator|.
name|build
argument_list|( )
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|PROPERTY_NOT_FOUND
argument_list|)
argument_list|,
literal|404
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|LdapConfiguration
name|getLdapConfiguration
parameter_list|( )
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"getRedbackRuntimeConfiguration -> {}"
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|LdapConfiguration
name|ldapConfig
init|=
name|LdapConfiguration
operator|.
name|of
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|( )
argument_list|)
decl_stmt|;
name|ldapConfig
operator|.
name|setAvailableContextFactories
argument_list|(
name|availableContextProviders
argument_list|)
expr_stmt|;
return|return
name|ldapConfig
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|LdapConfiguration
name|updateLdapConfiguration
parameter_list|(
name|LdapConfiguration
name|configuration
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"getRedbackRuntimeConfiguration -> {}"
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|updateConfig
argument_list|(
name|configuration
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|ldapConnectionFactory
operator|.
name|initialize
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|LdapConfiguration
operator|.
name|of
argument_list|(
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
operator|.
name|getLdapConfiguration
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while retrieve updated configuration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Properties
name|toProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|Properties
name|result
init|=
operator|new
name|Properties
argument_list|( )
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|( )
control|)
block|{
name|result
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isContextFactoryAvailable
parameter_list|(
specifier|final
name|String
name|factoryClass
parameter_list|)
block|{
try|try
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|factoryClass
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|verifyLdapConfiguration
parameter_list|(
name|LdapConfiguration
name|ldapConfiguration
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|LdapConnection
name|ldapConnection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LdapConnectionConfiguration
name|ldapConnectionConfiguration
init|=
operator|new
name|LdapConnectionConfiguration
argument_list|(
name|ldapConfiguration
operator|.
name|getHostName
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getPort
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getBaseDn
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getContextFactory
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getBindDn
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getBindPassword
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getAuthenticationMethod
argument_list|( )
argument_list|,
name|toProperties
argument_list|(
name|ldapConfiguration
operator|.
name|getProperties
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|ldapConnectionConfiguration
operator|.
name|setSsl
argument_list|(
name|ldapConfiguration
operator|.
name|isSslEnabled
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConnection
operator|=
name|ldapConnectionFactory
operator|.
name|getConnection
argument_list|(
name|ldapConnectionConfiguration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidNameException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with invalid name : {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_INVALID_NAME
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
name|handleLdapException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ldapConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ldapConnection
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not close connection: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
name|ldapConnection
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
comment|// verify groups dn value too
name|LdapConnectionConfiguration
name|ldapConnectionConfiguration
init|=
operator|new
name|LdapConnectionConfiguration
argument_list|(
name|ldapConfiguration
operator|.
name|getHostName
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getPort
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getGroupsBaseDn
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getContextFactory
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getBindDn
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getBindPassword
argument_list|( )
argument_list|,
name|ldapConfiguration
operator|.
name|getAuthenticationMethod
argument_list|( )
argument_list|,
name|toProperties
argument_list|(
name|ldapConfiguration
operator|.
name|getProperties
argument_list|( )
argument_list|)
argument_list|)
decl_stmt|;
name|ldapConnectionConfiguration
operator|.
name|setSsl
argument_list|(
name|ldapConfiguration
operator|.
name|isSslEnabled
argument_list|( )
argument_list|)
expr_stmt|;
name|ldapConnection
operator|=
name|ldapConnectionFactory
operator|.
name|getConnection
argument_list|(
name|ldapConnectionConfiguration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidNameException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with invalid name : {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_INVALID_NAME
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
name|handleLdapException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ldapConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ldapConnection
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not close connection: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Response
operator|.
name|ok
argument_list|( )
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|private
name|void
name|handleLdapException
parameter_list|(
name|LdapException
name|e
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
name|Throwable
name|rootCause
init|=
name|e
operator|.
name|getRootCause
argument_list|( )
decl_stmt|;
if|if
condition|(
name|rootCause
operator|instanceof
name|CommunicationException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with CommunicationException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_COMMUNICATION_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
if|else if
condition|(
name|rootCause
operator|instanceof
name|ServiceUnavailableException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with ServiceUnavailableException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_SERVICE_UNAVAILABLE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
if|else if
condition|(
name|rootCause
operator|instanceof
name|AuthenticationException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with AuthenticationException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_SERVICE_AUTHENTICATION_FAILED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
if|else if
condition|(
name|rootCause
operator|instanceof
name|AuthenticationNotSupportedException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with AuthenticationNotSupportedException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_SERVICE_AUTHENTICATION_NOT_SUPPORTED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
if|else if
condition|(
name|rootCause
operator|instanceof
name|NoPermissionException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed with NoPermissionException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_SERVICE_NO_PERMISSION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP connection check failed: {} - {}"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|LDAP_GENERIC_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CacheConfiguration
name|getCacheConfiguration
parameter_list|( )
throws|throws
name|ArchivaRestServiceException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"getRedbackRuntimeConfiguration -> {}"
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
return|return
name|CacheConfiguration
operator|.
name|of
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|( )
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CacheConfiguration
name|updateCacheConfiguration
parameter_list|(
name|CacheConfiguration
name|cacheConfiguration
parameter_list|)
throws|throws
name|ArchivaRestServiceException
block|{
if|if
condition|(
name|cacheConfiguration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|ErrorKeys
operator|.
name|MISSING_DATA
argument_list|)
argument_list|,
literal|400
argument_list|)
throw|;
block|}
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|redbackRuntimeConfigurationAdmin
operator|.
name|getRedbackRuntimeConfiguration
argument_list|( )
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"getRedbackRuntimeConfiguration -> {}"
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|updateConfig
argument_list|(
name|cacheConfiguration
argument_list|,
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
name|redbackRuntimeConfigurationAdmin
operator|.
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
return|return
name|getCacheConfiguration
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchivaRestServiceException
argument_list|(
name|ErrorMessage
operator|.
name|of
argument_list|(
name|REPOSITORY_ADMIN_ERROR
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BeanInformation
argument_list|>
name|getAvailableUserManagers
parameter_list|( )
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|UserManager
argument_list|>
name|beans
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|( )
return|;
block|}
return|return
name|beans
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getValue
argument_list|( )
operator|.
name|isFinalImplementation
argument_list|( )
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UserManager
argument_list|>
name|entry
parameter_list|)
lambda|->
block|{
name|UserManager
name|um
operator|=
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|;
name|String
name|id
operator|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
literal|"#"
argument_list|)
argument_list|;
name|String
name|displayName
operator|=
name|bundle
operator|.
name|getString
argument_list|(
literal|"user_manager."
operator|+
name|id
operator|+
literal|".display_name"
argument_list|)
argument_list|;
name|String
name|description
operator|=
name|bundle
operator|.
name|getString
argument_list|(
literal|"user_manager."
operator|+
name|id
operator|+
literal|".description"
argument_list|)
argument_list|;                 return
operator|new
name|BeanInformation
argument_list|(
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
literal|"#"
argument_list|)
argument_list|,
name|displayName
argument_list|,
name|um
operator|.
name|getDescriptionKey
argument_list|( )
argument_list|,
name|description
argument_list|,
name|um
operator|.
name|isReadOnly
argument_list|( )
argument_list|)
argument_list|;
block|}
block|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
expr_stmt|;
end_class

begin_function
unit|}      @
name|Override
specifier|public
name|List
argument_list|<
name|BeanInformation
argument_list|>
name|getAvailableRbacManagers
parameter_list|( )
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RBACManager
argument_list|>
name|beans
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|RBACManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|( )
return|;
block|}
return|return
name|beans
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getValue
argument_list|( )
operator|.
name|isFinalImplementation
argument_list|( )
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RBACManager
argument_list|>
name|entry
parameter_list|)
lambda|->
block|{
name|RBACManager
name|rm
operator|=
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|;
name|String
name|id
operator|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
literal|"#"
argument_list|)
argument_list|;
name|String
name|displayName
operator|=
name|bundle
operator|.
name|getString
argument_list|(
literal|"rbac_manager."
operator|+
name|id
operator|+
literal|".display_name"
argument_list|)
argument_list|;
name|String
name|description
operator|=
name|bundle
operator|.
name|getString
argument_list|(
literal|"rbac_manager."
operator|+
name|id
operator|+
literal|".description"
argument_list|)
argument_list|;                 return
operator|new
name|BeanInformation
argument_list|(
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|,
literal|"#"
argument_list|)
argument_list|,
name|displayName
argument_list|,
name|rm
operator|.
name|getDescriptionKey
argument_list|( )
argument_list|,
name|description
argument_list|,
name|rm
operator|.
name|isReadOnly
argument_list|( )
argument_list|)
argument_list|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

