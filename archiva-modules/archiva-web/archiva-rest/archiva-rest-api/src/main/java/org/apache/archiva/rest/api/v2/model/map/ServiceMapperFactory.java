begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|map
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|ModelMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|ModelMapperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|ConfigurationModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|RestModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Martin Schreier<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"modelMapperFactory#rest"
argument_list|)
specifier|public
class|class
name|ServiceMapperFactory
implements|implements
name|ModelMapperFactory
argument_list|<
name|RestModel
argument_list|,
name|ConfigurationModel
argument_list|>
block|{
annotation|@
name|Inject
name|List
argument_list|<
name|ModelMapper
argument_list|>
name|modelMapperList
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationModel
argument_list|>
argument_list|,
name|ModelMapper
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|,
name|?
extends|extends
name|ConfigurationModel
argument_list|>
argument_list|>
argument_list|>
name|modelMap
decl_stmt|;
annotation|@
name|PostConstruct
name|void
name|initMapper
parameter_list|()
block|{
name|modelMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
expr_stmt|;
for|for
control|(
name|ModelMapper
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapper
range|:
name|modelMapperList
control|)
block|{
if|if
condition|(
operator|!
name|mapper
operator|.
name|supports
argument_list|(
name|RestModel
operator|.
name|class
argument_list|,
name|ConfigurationModel
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|>
name|sType
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|>
operator|)
name|mapper
operator|.
name|getSourceType
argument_list|( )
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationModel
argument_list|>
name|tType
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationModel
argument_list|>
operator|)
name|mapper
operator|.
name|getTargetType
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationModel
argument_list|>
argument_list|,
name|ModelMapper
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|,
name|?
extends|extends
name|ConfigurationModel
argument_list|>
argument_list|>
name|tMap
decl_stmt|;
if|if
condition|(
name|modelMap
operator|.
name|containsKey
argument_list|(
name|sType
argument_list|)
condition|)
block|{
name|tMap
operator|=
name|modelMap
operator|.
name|get
argument_list|(
name|sType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
name|tMap
operator|.
name|put
argument_list|(
name|tType
argument_list|,
operator|(
name|ModelMapper
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|,
name|?
extends|extends
name|ConfigurationModel
argument_list|>
operator|)
name|mapper
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
extends|extends
name|RestModel
parameter_list|,
name|T
extends|extends
name|ConfigurationModel
parameter_list|>
name|ModelMapper
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|getMapper
parameter_list|(
name|Class
argument_list|<
name|S
argument_list|>
name|sourceType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetType
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|modelMap
operator|.
name|containsKey
argument_list|(
name|sourceType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No mapper defined for the given source type "
operator|+
name|sourceType
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationModel
argument_list|>
argument_list|,
name|ModelMapper
argument_list|<
name|?
extends|extends
name|RestModel
argument_list|,
name|?
extends|extends
name|ConfigurationModel
argument_list|>
argument_list|>
name|tMap
init|=
name|modelMap
operator|.
name|get
argument_list|(
name|sourceType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tMap
operator|.
name|containsKey
argument_list|(
name|targetType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No mapper defined for the given target type "
operator|+
name|targetType
argument_list|)
throw|;
block|}
return|return
operator|(
name|ModelMapper
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
operator|)
name|tMap
operator|.
name|get
argument_list|(
name|targetType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

