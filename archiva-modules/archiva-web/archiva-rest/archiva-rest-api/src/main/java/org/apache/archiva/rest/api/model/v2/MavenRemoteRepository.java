begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  * @since 3.0  */
end_comment

begin_class
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"MavenRemoteRepository"
argument_list|,
name|description
operator|=
literal|"A remote repository definition is used to pull artifacts from other repositories"
argument_list|)
specifier|public
class|class
name|MavenRemoteRepository
extends|extends
name|Repository
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5625043398766480265L
decl_stmt|;
name|String
name|loginUser
decl_stmt|;
name|String
name|loginPassword
decl_stmt|;
name|String
name|checkPath
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParameters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(  )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeader
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(  )
decl_stmt|;
name|long
name|timeoutMs
decl_stmt|;
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"login_user"
argument_list|,
name|description
operator|=
literal|"Username for login to the remote repository"
argument_list|)
specifier|public
name|String
name|getLoginUser
parameter_list|( )
block|{
return|return
name|loginUser
return|;
block|}
specifier|public
name|void
name|setLoginUser
parameter_list|(
name|String
name|loginUser
parameter_list|)
block|{
name|this
operator|.
name|loginUser
operator|=
name|loginUser
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"login_password"
argument_list|,
name|description
operator|=
literal|"Password for connecting to the remote repository"
argument_list|)
specifier|public
name|String
name|getLoginPassword
parameter_list|( )
block|{
return|return
name|loginPassword
return|;
block|}
specifier|public
name|void
name|setLoginPassword
parameter_list|(
name|String
name|loginPassword
parameter_list|)
block|{
name|this
operator|.
name|loginPassword
operator|=
name|loginPassword
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"check_path"
argument_list|,
name|description
operator|=
literal|"Path relative to the repository URL that is used to check of availability of the remote repository."
argument_list|)
specifier|public
name|String
name|getCheckPath
parameter_list|( )
block|{
return|return
name|checkPath
return|;
block|}
specifier|public
name|void
name|setCheckPath
parameter_list|(
name|String
name|checkPath
parameter_list|)
block|{
name|this
operator|.
name|checkPath
operator|=
name|checkPath
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"extra_parameters"
argument_list|,
name|description
operator|=
literal|"Key-Value map with extra parameters sent to the remote repository"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtraParameters
parameter_list|( )
block|{
return|return
name|extraParameters
return|;
block|}
specifier|public
name|void
name|setExtraParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|this
operator|.
name|extraParameters
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|extraParameters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addExtraParameter
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|extraParameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"request_header"
argument_list|,
name|description
operator|=
literal|"Key-Value map with request headers that are sent to the remote repository"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRequestHeader
parameter_list|( )
block|{
return|return
name|requestHeader
return|;
block|}
specifier|public
name|void
name|setRequestHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeader
parameter_list|)
block|{
name|this
operator|.
name|requestHeader
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|requestHeader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRequestHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
block|{
name|this
operator|.
name|requestHeader
operator|.
name|put
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"timeout_ms"
argument_list|,
name|description
operator|=
literal|"The time in milliseconds after that a request to the remote repository is aborted"
argument_list|)
specifier|public
name|long
name|getTimeoutMs
parameter_list|( )
block|{
return|return
name|timeoutMs
return|;
block|}
specifier|public
name|void
name|setTimeoutMs
parameter_list|(
name|long
name|timeoutMs
parameter_list|)
block|{
name|this
operator|.
name|timeoutMs
operator|=
name|timeoutMs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|MavenRemoteRepository
name|that
init|=
operator|(
name|MavenRemoteRepository
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|timeoutMs
operator|!=
name|that
operator|.
name|timeoutMs
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|loginUser
operator|!=
literal|null
condition|?
operator|!
name|loginUser
operator|.
name|equals
argument_list|(
name|that
operator|.
name|loginUser
argument_list|)
else|:
name|that
operator|.
name|loginUser
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|loginPassword
operator|!=
literal|null
condition|?
operator|!
name|loginPassword
operator|.
name|equals
argument_list|(
name|that
operator|.
name|loginPassword
argument_list|)
else|:
name|that
operator|.
name|loginPassword
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|checkPath
operator|!=
literal|null
condition|?
operator|!
name|checkPath
operator|.
name|equals
argument_list|(
name|that
operator|.
name|checkPath
argument_list|)
else|:
name|that
operator|.
name|checkPath
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|extraParameters
operator|!=
literal|null
condition|?
operator|!
name|extraParameters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|extraParameters
argument_list|)
else|:
name|that
operator|.
name|extraParameters
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|requestHeader
operator|!=
literal|null
condition|?
name|requestHeader
operator|.
name|equals
argument_list|(
name|that
operator|.
name|requestHeader
argument_list|)
else|:
name|that
operator|.
name|requestHeader
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|loginUser
operator|!=
literal|null
condition|?
name|loginUser
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|loginPassword
operator|!=
literal|null
condition|?
name|loginPassword
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|checkPath
operator|!=
literal|null
condition|?
name|checkPath
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|extraParameters
operator|!=
literal|null
condition|?
name|extraParameters
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|requestHeader
operator|!=
literal|null
condition|?
name|requestHeader
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|int
operator|)
operator|(
name|timeoutMs
operator|^
operator|(
name|timeoutMs
operator|>>>
literal|32
operator|)
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RemoteRepository{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"loginUser='"
argument_list|)
operator|.
name|append
argument_list|(
name|loginUser
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", loginPassword='"
argument_list|)
operator|.
name|append
argument_list|(
name|loginPassword
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", checkPath='"
argument_list|)
operator|.
name|append
argument_list|(
name|checkPath
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", extraParameters="
argument_list|)
operator|.
name|append
argument_list|(
name|extraParameters
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", requestHeader="
argument_list|)
operator|.
name|append
argument_list|(
name|requestHeader
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", timeOut="
argument_list|)
operator|.
name|append
argument_list|(
name|timeoutMs
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", description='"
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", type='"
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", location='"
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", scanned="
argument_list|)
operator|.
name|append
argument_list|(
name|scanned
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", schedulingDefinition='"
argument_list|)
operator|.
name|append
argument_list|(
name|schedulingDefinition
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", index="
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", layout='"
argument_list|)
operator|.
name|append
argument_list|(
name|layout
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
end_class

end_unit

