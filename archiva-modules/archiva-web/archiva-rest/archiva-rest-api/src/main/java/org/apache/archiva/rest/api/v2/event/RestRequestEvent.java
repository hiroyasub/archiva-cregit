begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|event
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|EventContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|context
operator|.
name|RestContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Martin Schreier<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|RestRequestEvent
extends|extends
name|RestEvent
block|{
specifier|public
specifier|static
name|EventType
argument_list|<
name|RestRequestEvent
argument_list|>
name|BEFORE
init|=
operator|new
name|EventType
argument_list|<>
argument_list|(
name|RestEvent
operator|.
name|ANY
argument_list|,
literal|"REST.REQUEST.BEFORE"
argument_list|)
decl_stmt|;
specifier|public
name|RestRequestEvent
parameter_list|(
name|EventType
argument_list|<
name|?
extends|extends
name|Event
argument_list|>
name|type
parameter_list|,
name|Object
name|originator
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|service
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|requestMethod
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathParameter
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|originator
argument_list|)
expr_stmt|;
name|EventContextBuilder
name|builder
init|=
name|EventContextBuilder
operator|.
name|withEvent
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|builder
operator|.
name|witRest
argument_list|(
name|path
argument_list|,
name|service
argument_list|,
name|operation
argument_list|,
name|requestMethod
argument_list|,
operator|-
literal|1
argument_list|,
name|pathParameter
argument_list|)
expr_stmt|;
name|builder
operator|.
name|apply
argument_list|( )
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RestContext
name|getContext
parameter_list|( )
block|{
return|return
name|getContext
argument_list|(
name|RestContext
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

