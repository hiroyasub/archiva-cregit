begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|maven
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|responses
operator|.
name|ApiResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|security
operator|.
name|SecurityRequirement
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|tags
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|rest
operator|.
name|model
operator|.
name|PagedResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|RedbackAuthorization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|MavenManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|MavenManagedRepositoryUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|ArchivaRestError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|ArchivaRestServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
operator|.
name|RestConfiguration
operator|.
name|DEFAULT_PAGE_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Service interface for update, delete, add of Managed Maven Repositories  *  * @author Martin Stockhammer<martin_s@apache.org>  * @since 3.0  */
end_comment

begin_interface
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"ManagedRepositoryService"
argument_list|,
name|description
operator|=
literal|"Managing and configuration of managed repositories"
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"repositories/maven/managed"
argument_list|)
annotation|@
name|Tag
argument_list|(
name|name
operator|=
literal|"v2"
argument_list|)
annotation|@
name|Tag
argument_list|(
name|name
operator|=
literal|"v2/Repositories"
argument_list|)
specifier|public
interface|interface
name|MavenManagedRepositoryService
block|{
annotation|@
name|Path
argument_list|(
literal|""
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Returns all managed repositories."
argument_list|,
name|parameters
operator|=
block|{
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"q"
argument_list|,
name|description
operator|=
literal|"Search term"
argument_list|)
block|,
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"offset"
argument_list|,
name|description
operator|=
literal|"The offset of the first element returned"
argument_list|)
block|,
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"limit"
argument_list|,
name|description
operator|=
literal|"Maximum number of items to return in the response"
argument_list|)
block|,
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"orderBy"
argument_list|,
name|description
operator|=
literal|"List of attribute used for sorting (key, value)"
argument_list|)
block|,
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"order"
argument_list|,
name|description
operator|=
literal|"The sort order. Either ascending (asc) or descending (desc)"
argument_list|)
block|}
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the list could be returned"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|PagedResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to gather the information"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|PagedResult
argument_list|<
name|MavenManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"q"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|""
argument_list|)
name|String
name|searchTerm
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"offset"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
name|Integer
name|offset
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
name|DEFAULT_PAGE_LIMIT
argument_list|)
name|Integer
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"orderBy"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"id"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|orderBy
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"order"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"asc"
argument_list|)
name|String
name|order
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_READ_REPOSITORY
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Returns the managed repository with the given id."
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_READ_REPOSITORY
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the managed repository could be returned"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|MavenManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to gather the information"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|MavenManagedRepository
name|getManagedRepository
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}"
argument_list|)
annotation|@
name|DELETE
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_DELETE_REPOSITORY
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Deletes the managed repository with the given id."
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_DELETE_REPOSITORY
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the managed repository could be returned"
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to gather the information"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|Response
name|deleteManagedRepository
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"deleteContent"
argument_list|)
name|boolean
name|deleteContent
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|""
argument_list|)
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_ADD_REPOSITORY
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Creates the managed repository"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_ADD_REPOSITORY
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"201"
argument_list|,
name|description
operator|=
literal|"If the managed repository could be created"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|MavenManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"303"
argument_list|,
name|description
operator|=
literal|"The repository exists already"
argument_list|,
name|headers
operator|=
block|{
annotation|@
name|Header
argument_list|(
name|name
operator|=
literal|"Location"
argument_list|,
name|description
operator|=
literal|"The URL of existing repository "
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|type
operator|=
literal|"string"
argument_list|)
argument_list|)
block|}
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to add repositories"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"422"
argument_list|,
name|description
operator|=
literal|"The body data is not valid"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|MavenManagedRepository
name|addManagedRepository
parameter_list|(
name|MavenManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}"
argument_list|)
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_EDIT_REPOSITORY
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Updates the managed repository with the given id"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_EDIT_REPOSITORY
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the managed repository could be updated"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|MavenManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to add repositories"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"422"
argument_list|,
name|description
operator|=
literal|"The body data is not valid"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|MavenManagedRepository
name|updateManagedRepository
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
name|MavenManagedRepositoryUpdate
name|managedRepository
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}/path/{filePath: .+}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_READ_REPOSITORY
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Returns the status of a given file in the repository"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_READ_REPOSITORY
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the file status is returned"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|FileInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to add repositories"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist. Or the file does not exist."
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|FileInfo
name|getFileStatus
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"filePath"
argument_list|)
name|String
name|fileLocation
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * Permissions are checked in impl      * will copy an artifact from the source repository to the target repository      */
annotation|@
name|Path
argument_list|(
literal|"{srcId}/path/{path: .+}/copyto/{dstId}"
argument_list|)
annotation|@
name|POST
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Copies a artifact from the source repository to the destination repository"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_READ_REPOSITORY
argument_list|,
name|scopes
operator|=
block|{
literal|"{srcId}"
block|}
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_ADD_ARTIFACT
argument_list|,
name|scopes
operator|=
block|{
literal|"{dstId}"
block|}
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the artifact was copied"
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to gather the information"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The repository does not exist, or if the artifact was not found"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|Response
name|copyArtifact
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"srcId"
argument_list|)
name|String
name|srcRepositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"dstId"
argument_list|)
name|String
name|dstRepositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}/path/{path: .+}"
argument_list|)
annotation|@
name|DELETE
annotation|@
name|Consumes
argument_list|(
block|{
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_DELETE_ARTIFACT
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Deletes a artifact in the repository."
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_DELETE_ARTIFACT
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the artifact was deleted"
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to gather the information"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The repository or the artifact does not exist"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|Response
name|deleteArtifact
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}/co/{group}/{project}/{version}"
argument_list|)
annotation|@
name|DELETE
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_DELETE_VERSION
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Removes a version tree in the repository"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_DELETE_VERSION
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the deletion was successful"
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to delete in repositories"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist. Or the version does not exist."
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|Response
name|removeProjectVersion
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|namespace
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"project"
argument_list|)
name|String
name|projectId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"version"
argument_list|)
name|String
name|version
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}/co/{group}/{project}"
argument_list|)
annotation|@
name|DELETE
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Removes a project tree in the repository"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_DELETE_PROJECT
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the deletion was successful"
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to delete in repositories"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist. Or the project does not exist."
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|Response
name|deleteProject
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|namespace
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"project"
argument_list|)
name|String
name|projectId
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"{id}/co/{namespace}"
argument_list|)
annotation|@
name|DELETE
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
block|{
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|OPERATION_DELETE_NAMESPACE
block|}
argument_list|,
name|resource
operator|=
literal|"{id}"
argument_list|)
annotation|@
name|Operation
argument_list|(
name|summary
operator|=
literal|"Removes a namespace tree in the repository"
argument_list|,
name|security
operator|=
block|{
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_MANAGE_CONFIGURATION
argument_list|)
block|,
annotation|@
name|SecurityRequirement
argument_list|(
name|name
operator|=
name|OPERATION_DELETE_NAMESPACE
argument_list|,
name|scopes
operator|=
literal|"{id}"
argument_list|)
block|}
argument_list|,
name|responses
operator|=
block|{
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"If the deletion was successful"
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"403"
argument_list|,
name|description
operator|=
literal|"Authenticated user is not permitted to delete namespaces in repositories"
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|,
annotation|@
name|ApiResponse
argument_list|(
name|responseCode
operator|=
literal|"404"
argument_list|,
name|description
operator|=
literal|"The managed repository with this id does not exist. Or the namespace does not exist."
argument_list|,
name|content
operator|=
annotation|@
name|Content
argument_list|(
name|mediaType
operator|=
name|APPLICATION_JSON
argument_list|,
name|schema
operator|=
annotation|@
name|Schema
argument_list|(
name|implementation
operator|=
name|ArchivaRestError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
name|Response
name|deleteNamespace
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"namespace"
argument_list|)
name|String
name|namespace
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
operator|.
name|ArchivaRestServiceException
function_decl|;
block|}
end_interface

end_unit

