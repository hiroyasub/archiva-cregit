begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"validationError"
argument_list|)
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"ValidationError"
argument_list|,
name|description
operator|=
literal|"A validation error."
argument_list|)
specifier|public
class|class
name|ValidationError
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2079020598090660171L
decl_stmt|;
name|String
name|key
decl_stmt|;
name|String
name|field
decl_stmt|;
name|String
name|category
decl_stmt|;
name|String
name|type
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameter
decl_stmt|;
specifier|public
name|ValidationError
parameter_list|( )
block|{
block|}
specifier|public
name|ValidationError
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|category
parameter_list|,
name|String
name|type
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameter
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|parameter
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parameter
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|parameter
operator|=
name|parameter
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new instance based on the given error      * @param error the error instance      * @return      */
specifier|public
specifier|static
name|ValidationError
name|of
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
name|error
parameter_list|)
block|{
return|return
name|error
operator|!=
literal|null
condition|?
operator|new
name|ValidationError
argument_list|(
name|error
operator|.
name|getErrorKey
argument_list|( )
argument_list|,
name|error
operator|.
name|getAttribute
argument_list|( )
argument_list|,
name|error
operator|.
name|getCategory
argument_list|( )
argument_list|,
name|error
operator|.
name|getType
argument_list|( )
argument_list|,
name|error
operator|.
name|getArguments
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
else|:
operator|new
name|ValidationError
argument_list|( )
return|;
block|}
comment|/**      * Creates a new instance based on the field name and the error instance      * @param fieldName the name of the field to which the error applies      * @param error the error definition      * @return a new validation error instance      */
specifier|public
specifier|static
name|ValidationError
name|of
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
name|error
parameter_list|)
block|{
return|return
name|error
operator|!=
literal|null
condition|?
operator|new
name|ValidationError
argument_list|(
name|error
operator|.
name|getErrorKey
argument_list|( )
argument_list|,
name|fieldName
argument_list|,
name|error
operator|.
name|getCategory
argument_list|( )
argument_list|,
name|error
operator|.
name|getType
argument_list|( )
argument_list|,
name|error
operator|.
name|getArguments
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
else|:
operator|new
name|ValidationError
argument_list|( )
return|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"key"
argument_list|,
name|description
operator|=
literal|"The full key of the validation error"
argument_list|)
specifier|public
name|String
name|getKey
parameter_list|( )
block|{
return|return
name|key
return|;
block|}
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"field"
argument_list|,
name|description
operator|=
literal|"The name of the field where the error was detected"
argument_list|)
specifier|public
name|String
name|getField
parameter_list|( )
block|{
return|return
name|field
return|;
block|}
specifier|public
name|void
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"category"
argument_list|,
name|description
operator|=
literal|"The name of the category this error is assigned to"
argument_list|)
specifier|public
name|String
name|getCategory
parameter_list|( )
block|{
return|return
name|category
return|;
block|}
specifier|public
name|void
name|setCategory
parameter_list|(
name|String
name|category
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"type"
argument_list|,
name|description
operator|=
literal|"The type of the error. This is a unique string that defines the type of error, e.g. empty, bad_number_range, ... ."
argument_list|)
specifier|public
name|String
name|getType
parameter_list|( )
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"parameter"
argument_list|,
name|description
operator|=
literal|"The list of parameters, that can be used to create a translated error message"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameter
parameter_list|( )
block|{
return|return
name|parameter
return|;
block|}
specifier|public
name|void
name|setParameter
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parameter
parameter_list|)
block|{
name|this
operator|.
name|parameter
operator|=
name|parameter
expr_stmt|;
block|}
block|}
end_class

end_unit

