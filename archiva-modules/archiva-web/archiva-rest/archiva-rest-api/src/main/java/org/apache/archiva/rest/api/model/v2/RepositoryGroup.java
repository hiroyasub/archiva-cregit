begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"repositoryGroup"
argument_list|)
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"RepositoryGroup"
argument_list|,
name|description
operator|=
literal|"Information about a repository group, which combines multiple repositories as one virtual repository."
argument_list|)
specifier|public
class|class
name|RepositoryGroup
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7319687481737616081L
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(  )
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
name|MergeConfiguration
name|mergeConfiguration
decl_stmt|;
specifier|public
name|RepositoryGroup
parameter_list|( )
block|{
block|}
specifier|public
name|RepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
specifier|static
name|RepositoryGroup
name|of
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RepositoryGroup
name|modelObj
parameter_list|)
block|{
name|RepositoryGroup
name|result
init|=
operator|new
name|RepositoryGroup
argument_list|( )
decl_stmt|;
name|MergeConfiguration
name|mergeConfig
init|=
operator|new
name|MergeConfiguration
argument_list|( )
decl_stmt|;
name|result
operator|.
name|setMergeConfiguration
argument_list|(
name|mergeConfig
argument_list|)
expr_stmt|;
name|result
operator|.
name|setId
argument_list|(
name|modelObj
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setLocation
argument_list|(
name|modelObj
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRepositories
argument_list|(
name|modelObj
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|mergeConfig
operator|.
name|setMergedIndexPath
argument_list|(
name|modelObj
operator|.
name|getMergedIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|mergeConfig
operator|.
name|setMergedIndexTtlMinutes
argument_list|(
name|modelObj
operator|.
name|getMergedIndexTtl
argument_list|( )
argument_list|)
expr_stmt|;
name|mergeConfig
operator|.
name|setIndexMergeSchedule
argument_list|(
name|modelObj
operator|.
name|getCronExpression
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The unique id of the repository group."
argument_list|)
specifier|public
name|String
name|getId
parameter_list|( )
block|{
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The list of ids of repositories which are member of the repository group."
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|( )
block|{
return|return
name|repositories
return|;
block|}
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|repositories
operator|.
name|contains
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
name|this
operator|.
name|repositories
operator|.
name|add
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"merge_configuration"
argument_list|,
name|description
operator|=
literal|"The configuration for index merge."
argument_list|)
specifier|public
name|MergeConfiguration
name|getMergeConfiguration
parameter_list|( )
block|{
return|return
name|mergeConfiguration
return|;
block|}
specifier|public
name|void
name|setMergeConfiguration
parameter_list|(
name|MergeConfiguration
name|mergeConfiguration
parameter_list|)
block|{
name|this
operator|.
name|mergeConfiguration
operator|=
name|mergeConfiguration
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The storage location of the repository. The merged index is stored relative to this location."
argument_list|)
specifier|public
name|String
name|getLocation
parameter_list|( )
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|RepositoryGroup
name|that
init|=
operator|(
name|RepositoryGroup
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|that
operator|.
name|id
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|repositories
operator|.
name|equals
argument_list|(
name|that
operator|.
name|repositories
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|location
argument_list|,
name|that
operator|.
name|location
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|mergeConfiguration
argument_list|,
name|that
operator|.
name|mergeConfiguration
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|repositories
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|location
operator|!=
literal|null
condition|?
name|location
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|mergeConfiguration
operator|!=
literal|null
condition|?
name|mergeConfiguration
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringBufferReplaceableByString"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RepositoryGroup{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", repositories="
argument_list|)
operator|.
name|append
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", location='"
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", mergeConfiguration="
argument_list|)
operator|.
name|append
argument_list|(
name|mergeConfiguration
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
end_class

end_unit

