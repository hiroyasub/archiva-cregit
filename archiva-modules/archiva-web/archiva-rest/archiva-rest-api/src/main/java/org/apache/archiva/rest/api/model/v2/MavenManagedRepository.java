begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"MavenManagedRepository"
argument_list|,
name|description
operator|=
literal|"A managed repository stores artifacts locally"
argument_list|)
specifier|public
class|class
name|MavenManagedRepository
extends|extends
name|Repository
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6853748886201905029L
decl_stmt|;
name|boolean
name|blocksRedeployments
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|releaseSchemes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(  )
decl_stmt|;
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"blocks_redeployments"
argument_list|,
name|description
operator|=
literal|"True, if redeployments to this repository are not allowed"
argument_list|)
specifier|public
name|boolean
name|isBlocksRedeployments
parameter_list|( )
block|{
return|return
name|blocksRedeployments
return|;
block|}
specifier|public
name|void
name|setBlocksRedeployments
parameter_list|(
name|boolean
name|blocksRedeployments
parameter_list|)
block|{
name|this
operator|.
name|blocksRedeployments
operator|=
name|blocksRedeployments
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"release_schemes"
argument_list|,
name|description
operator|=
literal|"The release schemes this repository is used for (e.g. RELEASE, SNAPSHOT)"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getReleaseSchemes
parameter_list|( )
block|{
return|return
name|releaseSchemes
return|;
block|}
specifier|public
name|void
name|setReleaseSchemes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|releaseSchemes
parameter_list|)
block|{
name|this
operator|.
name|releaseSchemes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|releaseSchemes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|MavenManagedRepository
name|that
init|=
operator|(
name|MavenManagedRepository
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|blocksRedeployments
operator|!=
name|that
operator|.
name|blocksRedeployments
condition|)
return|return
literal|false
return|;
return|return
name|releaseSchemes
operator|!=
literal|null
condition|?
name|releaseSchemes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|releaseSchemes
argument_list|)
else|:
name|that
operator|.
name|releaseSchemes
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|blocksRedeployments
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|releaseSchemes
operator|!=
literal|null
condition|?
name|releaseSchemes
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ManagedRepository{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blocksRedeployments="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksRedeployments
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", releaseSchemes="
argument_list|)
operator|.
name|append
argument_list|(
name|releaseSchemes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", description='"
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", type='"
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", location='"
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", scanned="
argument_list|)
operator|.
name|append
argument_list|(
name|scanned
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", schedulingDefinition='"
argument_list|)
operator|.
name|append
argument_list|(
name|schedulingDefinition
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", index="
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", layout='"
argument_list|)
operator|.
name|append
argument_list|(
name|layout
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
end_class

end_unit

