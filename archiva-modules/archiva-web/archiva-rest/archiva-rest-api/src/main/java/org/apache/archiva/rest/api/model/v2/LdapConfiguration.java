begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|v2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"ldapConfiguration"
argument_list|)
specifier|public
class|class
name|LdapConfiguration
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4736767846016398583L
decl_stmt|;
specifier|private
name|String
name|hostName
init|=
literal|""
decl_stmt|;
specifier|private
name|int
name|port
init|=
literal|389
decl_stmt|;
specifier|private
name|boolean
name|sslEnabled
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|baseDn
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|groupsBaseDn
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|bindDn
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|bindPassword
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|authenticationMethod
init|=
literal|""
decl_stmt|;
specifier|private
name|boolean
name|bindAuthenticatorEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useRoleNameAsGroup
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|writable
init|=
literal|false
decl_stmt|;
specifier|public
name|LdapConfiguration
parameter_list|( )
block|{
block|}
specifier|public
specifier|static
name|LdapConfiguration
name|of
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|LdapConfiguration
name|ldapConfiguration
parameter_list|)
block|{
name|LdapConfiguration
name|newCfg
init|=
operator|new
name|LdapConfiguration
argument_list|( )
decl_stmt|;
name|newCfg
operator|.
name|setAuthenticationMethod
argument_list|(
name|ldapConfiguration
operator|.
name|getAuthenticationMethod
argument_list|( )
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setBaseDn
argument_list|(
name|ldapConfiguration
operator|.
name|getBaseDn
argument_list|( )
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setGroupsBaseDn
argument_list|(
name|ldapConfiguration
operator|.
name|getBaseGroupsDn
argument_list|()
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setBindDn
argument_list|(
name|ldapConfiguration
operator|.
name|getBindDn
argument_list|()
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setBindPassword
argument_list|(
name|ldapConfiguration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setBindAuthenticatorEnabled
argument_list|(
name|ldapConfiguration
operator|.
name|isBindAuthenticatorEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setHostName
argument_list|(
name|ldapConfiguration
operator|.
name|getHostName
argument_list|( )
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setPort
argument_list|(
name|ldapConfiguration
operator|.
name|getPort
argument_list|( )
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setProperties
argument_list|(
name|ldapConfiguration
operator|.
name|getExtraProperties
argument_list|( )
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setSslEnabled
argument_list|(
name|ldapConfiguration
operator|.
name|isSsl
argument_list|()
argument_list|)
expr_stmt|;
name|newCfg
operator|.
name|setWritable
argument_list|(
name|ldapConfiguration
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newCfg
return|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The hostname to use to connect to the LDAP server"
argument_list|)
specifier|public
name|String
name|getHostName
parameter_list|( )
block|{
return|return
name|hostName
return|;
block|}
specifier|public
name|void
name|setHostName
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The port to use to connect to the LDAP server"
argument_list|)
specifier|public
name|int
name|getPort
parameter_list|( )
block|{
return|return
name|port
return|;
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"If SSL should be used for connecting the LDAP server"
argument_list|)
specifier|public
name|boolean
name|isSslEnabled
parameter_list|( )
block|{
return|return
name|sslEnabled
return|;
block|}
specifier|public
name|void
name|setSslEnabled
parameter_list|(
name|boolean
name|sslEnabled
parameter_list|)
block|{
name|this
operator|.
name|sslEnabled
operator|=
name|sslEnabled
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The BASE DN used for the LDAP server"
argument_list|)
specifier|public
name|String
name|getBaseDn
parameter_list|( )
block|{
return|return
name|baseDn
return|;
block|}
specifier|public
name|void
name|setBaseDn
parameter_list|(
name|String
name|baseDn
parameter_list|)
block|{
name|this
operator|.
name|baseDn
operator|=
name|baseDn
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The distinguished name of the bind user which is used to bind to the LDAP server"
argument_list|)
specifier|public
name|String
name|getBindDn
parameter_list|( )
block|{
return|return
name|bindDn
return|;
block|}
specifier|public
name|void
name|setBindDn
parameter_list|(
name|String
name|bindDn
parameter_list|)
block|{
name|this
operator|.
name|bindDn
operator|=
name|bindDn
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The password used to bind to the ldap server"
argument_list|)
specifier|public
name|String
name|getBindPassword
parameter_list|( )
block|{
return|return
name|bindPassword
return|;
block|}
specifier|public
name|void
name|setBindPassword
parameter_list|(
name|String
name|bindPassword
parameter_list|)
block|{
name|this
operator|.
name|bindPassword
operator|=
name|bindPassword
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The distinguished name of the base to use for searching group."
argument_list|)
specifier|public
name|String
name|getGroupsBaseDn
parameter_list|( )
block|{
return|return
name|groupsBaseDn
return|;
block|}
specifier|public
name|void
name|setGroupsBaseDn
parameter_list|(
name|String
name|groupsBaseDn
parameter_list|)
block|{
name|this
operator|.
name|groupsBaseDn
operator|=
name|groupsBaseDn
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"The authentication method used to bind to the LDAP server (PLAINTEXT, SASL, ...)"
argument_list|)
specifier|public
name|String
name|getAuthenticationMethod
parameter_list|( )
block|{
return|return
name|authenticationMethod
return|;
block|}
specifier|public
name|void
name|setAuthenticationMethod
parameter_list|(
name|String
name|authenticationMethod
parameter_list|)
block|{
name|this
operator|.
name|authenticationMethod
operator|=
name|authenticationMethod
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"True, if the LDAP bind authentication is used for logging in to Archiva"
argument_list|)
specifier|public
name|boolean
name|isBindAuthenticatorEnabled
parameter_list|( )
block|{
return|return
name|bindAuthenticatorEnabled
return|;
block|}
specifier|public
name|void
name|setBindAuthenticatorEnabled
parameter_list|(
name|boolean
name|bindAuthenticatorEnabled
parameter_list|)
block|{
name|this
operator|.
name|bindAuthenticatorEnabled
operator|=
name|bindAuthenticatorEnabled
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"True, if the archiva role name is also the LDAP group name"
argument_list|)
specifier|public
name|boolean
name|isUseRoleNameAsGroup
parameter_list|( )
block|{
return|return
name|useRoleNameAsGroup
return|;
block|}
specifier|public
name|void
name|setUseRoleNameAsGroup
parameter_list|(
name|boolean
name|useRoleNameAsGroup
parameter_list|)
block|{
name|this
operator|.
name|useRoleNameAsGroup
operator|=
name|useRoleNameAsGroup
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"Map of additional properties"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|( )
block|{
return|return
name|properties
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|properties
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|description
operator|=
literal|"True, if attributes in the the LDAP server can be edited by Archiva"
argument_list|)
specifier|public
name|boolean
name|isWritable
parameter_list|( )
block|{
return|return
name|writable
return|;
block|}
specifier|public
name|void
name|setWritable
parameter_list|(
name|boolean
name|writable
parameter_list|)
block|{
name|this
operator|.
name|writable
operator|=
name|writable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|LdapConfiguration
name|that
init|=
operator|(
name|LdapConfiguration
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|port
operator|!=
name|that
operator|.
name|port
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|sslEnabled
operator|!=
name|that
operator|.
name|sslEnabled
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|bindAuthenticatorEnabled
operator|!=
name|that
operator|.
name|bindAuthenticatorEnabled
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|useRoleNameAsGroup
operator|!=
name|that
operator|.
name|useRoleNameAsGroup
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|writable
operator|!=
name|that
operator|.
name|writable
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|hostName
argument_list|,
name|that
operator|.
name|hostName
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|baseDn
argument_list|,
name|that
operator|.
name|baseDn
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|bindDn
argument_list|,
name|that
operator|.
name|bindDn
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|groupsBaseDn
argument_list|,
name|that
operator|.
name|groupsBaseDn
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|bindPassword
argument_list|,
name|that
operator|.
name|bindPassword
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|authenticationMethod
argument_list|,
name|that
operator|.
name|authenticationMethod
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|properties
operator|.
name|equals
argument_list|(
name|that
operator|.
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|hostName
operator|!=
literal|null
condition|?
name|hostName
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|port
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|sslEnabled
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|baseDn
operator|!=
literal|null
condition|?
name|baseDn
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|bindDn
operator|!=
literal|null
condition|?
name|bindDn
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|groupsBaseDn
operator|!=
literal|null
condition|?
name|groupsBaseDn
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|bindPassword
operator|!=
literal|null
condition|?
name|bindPassword
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|authenticationMethod
operator|!=
literal|null
condition|?
name|authenticationMethod
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|bindAuthenticatorEnabled
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|useRoleNameAsGroup
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|properties
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|writable
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringBufferReplaceableByString"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"LdapConfiguration{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"hostName='"
argument_list|)
operator|.
name|append
argument_list|(
name|hostName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", port="
argument_list|)
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", sslEnabled="
argument_list|)
operator|.
name|append
argument_list|(
name|sslEnabled
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", baseDn='"
argument_list|)
operator|.
name|append
argument_list|(
name|baseDn
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", groupsBaseDn='"
argument_list|)
operator|.
name|append
argument_list|(
name|groupsBaseDn
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", bindDn='"
argument_list|)
operator|.
name|append
argument_list|(
name|bindDn
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", bindPassword='"
argument_list|)
operator|.
name|append
argument_list|(
name|bindPassword
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", authenticationMethod='"
argument_list|)
operator|.
name|append
argument_list|(
name|authenticationMethod
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", bindAuthenticatorEnabled="
argument_list|)
operator|.
name|append
argument_list|(
name|bindAuthenticatorEnabled
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", useRoleNameAsGroup="
argument_list|)
operator|.
name|append
argument_list|(
name|useRoleNameAsGroup
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", properties="
argument_list|)
operator|.
name|append
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", writable="
argument_list|)
operator|.
name|append
argument_list|(
name|writable
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
end_class

end_unit

