begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|services
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|tags
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|model
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|model
operator|.
name|TreeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|RedbackAuthorization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ActionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArtifactContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|ArtifactContentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|AvailabilityStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|BrowseResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|MetadataAddRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|model
operator|.
name|VersionsList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M3  */
end_comment

begin_interface
annotation|@
name|Path
argument_list|(
literal|"/browseService/"
argument_list|)
annotation|@
name|Tag
argument_list|(
name|name
operator|=
literal|"Browse"
argument_list|,
name|description
operator|=
literal|"Repository Browse Service"
argument_list|)
specifier|public
interface|interface
name|BrowseService
block|{
annotation|@
name|Path
argument_list|(
literal|"rootGroups"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|BrowseResult
name|getRootGroups
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * @param groupId      groupId to browse      * @param repositoryId optionnal (repository to browse if<code>null</code> all available user repositories are used)      */
annotation|@
name|Path
argument_list|(
literal|"browseGroupId/{groupId}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|BrowseResult
name|browseGroupId
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"groupId"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"versionsList/{g}/{a}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|VersionsList
name|getVersionsList
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"projectVersionMetadata/{g}/{a}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|ProjectVersionMetadata
name|getProjectVersionMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"projectVersionMetadata/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|ProjectVersionMetadata
name|getProjectMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * @return List of managed repositories current user can read      */
annotation|@
name|Path
argument_list|(
literal|"userRepositories"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getUserRepositories
parameter_list|()
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * @return List of repositories current user can manage      */
annotation|@
name|Path
argument_list|(
literal|"userManagableRepositories"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getUserManagableRepositories
parameter_list|()
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * return the dependency Tree for an artifacts      *<b>the List result has only one entry</b>      */
annotation|@
name|Path
argument_list|(
literal|"treeEntries/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|getTreeEntries
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * List of artifacts using the artifact passed in parameter.      */
annotation|@
name|Path
argument_list|(
literal|"dependees/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|getDependees
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"metadatas/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Entry
argument_list|>
name|getMetadatas
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"metadata/{g}/{a}/{v}/{key}/{value}"
argument_list|)
annotation|@
name|PUT
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
literal|"archiva-add-metadata"
argument_list|,
name|resource
operator|=
literal|"{repositoryId}"
argument_list|)
name|ActionStatus
name|addMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"key"
argument_list|)
name|String
name|key
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"value"
argument_list|)
name|String
name|value
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"metadata/{g}/{a}/{v}/{key}"
argument_list|)
annotation|@
name|DELETE
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
literal|"archiva-add-metadata"
argument_list|,
name|resource
operator|=
literal|"{repositoryId}"
argument_list|)
name|ActionStatus
name|deleteMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"key"
argument_list|)
name|String
name|key
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"importMetadata"
argument_list|)
annotation|@
name|POST
annotation|@
name|RedbackAuthorization
argument_list|(
name|permissions
operator|=
literal|"archiva-add-metadata"
argument_list|,
name|resource
operator|=
literal|"{repository}"
argument_list|)
name|ActionStatus
name|importMetadata
parameter_list|(
name|MetadataAddRequest
name|metadataAddRequest
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repository"
argument_list|)
name|String
name|repository
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"artifactContentEntries/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|ArtifactContentEntry
argument_list|>
name|getArtifactContentEntries
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"c"
argument_list|)
name|String
name|classifier
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"t"
argument_list|)
name|String
name|type
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"p"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
annotation|@
name|Path
argument_list|(
literal|"artifactDownloadInfos/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifactDownloadInfos
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * if path is empty content of the file is returned (for pom view)      */
annotation|@
name|Path
argument_list|(
literal|"artifactContentText/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|ArtifactContent
name|getArtifactContentText
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"c"
argument_list|)
name|String
name|classifier
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"t"
argument_list|)
name|String
name|type
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"p"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * verify if an artifact is available locally if not download from proxies will be try      *      * @since 1.4-M3      */
annotation|@
name|Path
argument_list|(
literal|"artifactAvailable/{g}/{a}/{v}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|AvailabilityStatus
name|artifactAvailable
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * verify if an artifact is available locally if not download from proxies will be try      *      * @since 1.4-M4      */
annotation|@
name|Path
argument_list|(
literal|"artifactAvailable/{g}/{a}/{v}/{c}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|AvailabilityStatus
name|artifactAvailable
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"g"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"a"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|version
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"c"
argument_list|)
name|String
name|classifier
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * return List of all artifacts from this repository      *      * @param repositoryId      * @return      * @throws ArchivaRestServiceException      * @since 1.4-M3      */
annotation|@
name|Path
argument_list|(
literal|"artifacts/{r}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifacts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"r"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * Return List of artifacts from this repository with project version level metadata key matching value. If      * repository is not provided the search runs in all repositories.      *      * @param key      * @param value      * @param repositoryId      * @return      * @throws ArchivaRestServiceException      * @since 2.2      */
annotation|@
name|Path
argument_list|(
literal|"artifactsByProjectVersionMetadata/{key}/{value}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifactsByProjectVersionMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"key"
argument_list|)
name|String
name|key
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"value"
argument_list|)
name|String
name|value
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * Return List of artifacts from this repository with artifact metadata key matching value.      * If repository is not provided the search runs in all repositories.      *      * @param key      * @param value      * @param repositoryId      * @return      * @throws ArchivaRestServiceException      * @since 2.2      */
annotation|@
name|Path
argument_list|(
literal|"artifactsByMetadata/{key}/{value}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifactsByMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"key"
argument_list|)
name|String
name|key
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"value"
argument_list|)
name|String
name|value
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * Return List of artifacts from this repository with property key matching value.      * If repository is not provided the search runs in all repositories.      *      * @param key      * @param value      * @param repositoryId      * @return      * @throws ArchivaRestServiceException      * @since 2.2      */
annotation|@
name|Path
argument_list|(
literal|"artifactsByProperty/{key}/{value}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifactsByProperty
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"key"
argument_list|)
name|String
name|key
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"value"
argument_list|)
name|String
name|value
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * Search artifacts with any property matching text. If repository is not provided the search runs in all      * repositories. If exact is true only the artifacts whose property match exactly are returned.      *      * @param text      * @param repositoryId      * @param exact      * @return      * @throws ArchivaRestServiceException      * @since 2.2      */
annotation|@
name|Path
argument_list|(
literal|"searchArtifacts/{text}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|searchArtifacts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"text"
argument_list|)
name|String
name|text
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"exact"
argument_list|)
name|Boolean
name|exact
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
comment|/**      * Search artifacts with the property specified by key matching text. If repository is not provided the search runs      * in all repositories. If exact is true only the artifacts whose property match exactly are returned.      *      * @param key      * @param text      * @param repositoryId      * @param exact      * @return      * @throws ArchivaRestServiceException      * @since 2.2      */
annotation|@
name|Path
argument_list|(
literal|"searchArtifacts/{key}/{text}"
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|RedbackAuthorization
argument_list|(
name|noPermission
operator|=
literal|true
argument_list|,
name|noRestriction
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Artifact
argument_list|>
name|searchArtifacts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"key"
argument_list|)
name|String
name|key
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"text"
argument_list|)
name|String
name|text
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryId"
argument_list|)
name|String
name|repositoryId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"exact"
argument_list|)
name|Boolean
name|exact
parameter_list|)
throws|throws
name|ArchivaRestServiceException
function_decl|;
block|}
end_interface

end_unit

