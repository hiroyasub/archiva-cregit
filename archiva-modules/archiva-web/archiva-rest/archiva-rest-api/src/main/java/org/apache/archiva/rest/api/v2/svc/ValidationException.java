begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|svc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Exception is thrown  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ValidationException
extends|extends
name|ArchivaRestServiceException
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CODE
init|=
literal|422
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ErrorMessage
name|DEFAULT_MESSAGE
init|=
operator|new
name|ErrorMessage
argument_list|(
name|ErrorKeys
operator|.
name|VALIDATION_ERROR
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validationErrors
decl_stmt|;
specifier|public
name|ValidationException
parameter_list|( )
block|{
name|super
argument_list|(
name|DEFAULT_MESSAGE
argument_list|,
name|DEFAULT_CODE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValidationException
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|super
argument_list|(
name|DEFAULT_MESSAGE
argument_list|,
name|errorCode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValidationException
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
name|super
argument_list|(
name|DEFAULT_MESSAGE
argument_list|,
name|DEFAULT_CODE
argument_list|)
expr_stmt|;
name|this
operator|.
name|validationErrors
operator|=
name|errors
expr_stmt|;
block|}
specifier|public
specifier|static
name|ValidationException
name|of
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
argument_list|>
name|errorList
parameter_list|)
block|{
return|return
operator|new
name|ValidationException
argument_list|(
name|errorList
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|ValidationError
operator|::
name|of
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ValidationException
name|of
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
argument_list|>
argument_list|>
name|errorMap
parameter_list|)
block|{
return|return
operator|new
name|ValidationException
argument_list|(
name|errorMap
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|flatMap
argument_list|(
name|v
lambda|->
name|v
operator|.
name|getValue
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|k
lambda|->
name|ValidationError
operator|.
name|of
argument_list|(
name|v
operator|.
name|getKey
argument_list|()
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|>
name|ValidationException
name|of
parameter_list|(
name|ValidationResponse
argument_list|<
name|R
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isValid
argument_list|( )
condition|)
block|{
return|return
operator|new
name|ValidationException
argument_list|( )
return|;
block|}
else|else
block|{
return|return
operator|new
name|ValidationException
argument_list|(
name|result
operator|.
name|getResult
argument_list|( )
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|flatMap
argument_list|(
name|v
lambda|->
name|v
operator|.
name|getValue
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|e
lambda|->
name|ValidationError
operator|.
name|of
argument_list|(
name|v
operator|.
name|getKey
argument_list|( )
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getValidationErrors
parameter_list|( )
block|{
return|return
name|validationErrors
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|( )
else|:
name|validationErrors
return|;
block|}
specifier|public
name|void
name|setValidationErrors
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validationErrors
parameter_list|)
block|{
name|this
operator|.
name|validationErrors
operator|=
name|validationErrors
expr_stmt|;
block|}
specifier|public
name|void
name|addValidationError
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|validationErrors
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|validationErrors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
name|this
operator|.
name|validationErrors
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

