begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|rest
operator|.
name|api
operator|.
name|v2
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|annotations
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
operator|.
name|DEFAULT_INDEX_PATH
import|;
end_import

begin_comment
comment|/**  * Index merge configuration.  *  * @author Martin Stockhammer<martin_s@apache.org>  * @since 3.0  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"mergeConfiguration"
argument_list|)
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"MergeConfiguration"
argument_list|,
name|description
operator|=
literal|"Configuration settings for index merge of remote repositories."
argument_list|)
specifier|public
class|class
name|MergeConfiguration
implements|implements
name|Serializable
implements|,
name|RestModel
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3629274059574459133L
decl_stmt|;
specifier|private
name|String
name|mergedIndexPath
init|=
name|DEFAULT_INDEX_PATH
decl_stmt|;
specifier|private
name|int
name|mergedIndexTtlMinutes
init|=
literal|30
decl_stmt|;
specifier|private
name|String
name|indexMergeSchedule
init|=
literal|""
decl_stmt|;
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"merged_index_path"
argument_list|,
name|description
operator|=
literal|"The path where the merged index is stored. The path is relative to the repository directory of the group."
argument_list|)
specifier|public
name|String
name|getMergedIndexPath
parameter_list|( )
block|{
return|return
name|mergedIndexPath
return|;
block|}
specifier|public
name|void
name|setMergedIndexPath
parameter_list|(
name|String
name|mergedIndexPath
parameter_list|)
block|{
name|this
operator|.
name|mergedIndexPath
operator|=
name|mergedIndexPath
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"merged_index_ttl_minutes"
argument_list|,
name|description
operator|=
literal|"The Time to Life of the merged index in minutes."
argument_list|)
specifier|public
name|int
name|getMergedIndexTtlMinutes
parameter_list|( )
block|{
return|return
name|mergedIndexTtlMinutes
return|;
block|}
specifier|public
name|void
name|setMergedIndexTtlMinutes
parameter_list|(
name|int
name|mergedIndexTtlMinutes
parameter_list|)
block|{
name|this
operator|.
name|mergedIndexTtlMinutes
operator|=
name|mergedIndexTtlMinutes
expr_stmt|;
block|}
annotation|@
name|Schema
argument_list|(
name|name
operator|=
literal|"index_merge_schedule"
argument_list|,
name|description
operator|=
literal|"Cron expression that defines the times/intervals for index merging."
argument_list|)
specifier|public
name|String
name|getIndexMergeSchedule
parameter_list|( )
block|{
return|return
name|indexMergeSchedule
return|;
block|}
specifier|public
name|void
name|setIndexMergeSchedule
parameter_list|(
name|String
name|indexMergeSchedule
parameter_list|)
block|{
name|this
operator|.
name|indexMergeSchedule
operator|=
name|indexMergeSchedule
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|MergeConfiguration
name|that
init|=
operator|(
name|MergeConfiguration
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|mergedIndexTtlMinutes
operator|!=
name|that
operator|.
name|mergedIndexTtlMinutes
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|mergedIndexPath
argument_list|,
name|that
operator|.
name|mergedIndexPath
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|indexMergeSchedule
argument_list|,
name|that
operator|.
name|indexMergeSchedule
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|mergedIndexPath
operator|!=
literal|null
condition|?
name|mergedIndexPath
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|mergedIndexTtlMinutes
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|indexMergeSchedule
operator|!=
literal|null
condition|?
name|indexMergeSchedule
operator|.
name|hashCode
argument_list|( )
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringBufferReplaceableByString"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"MergeConfiguration{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mergedIndexPath='"
argument_list|)
operator|.
name|append
argument_list|(
name|mergedIndexPath
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", mergedIndexTtlMinutes="
argument_list|)
operator|.
name|append
argument_list|(
name|mergedIndexTtlMinutes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", indexMergeSchedule='"
argument_list|)
operator|.
name|append
argument_list|(
name|indexMergeSchedule
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
end_class

end_unit

