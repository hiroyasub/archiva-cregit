begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|ArchivaBlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaBlockJUnit4ClassRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ArchivaDavResourceLocatorTest
extends|extends
name|TestCase
block|{
name|ArchivaDavLocatorFactory
name|factory
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|ArchivaDavLocatorFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvoidDoubleSlashInHref
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"http://myproxy/"
decl_stmt|;
name|String
name|href
init|=
literal|"/repository/internal/"
decl_stmt|;
name|ArchivaDavResourceLocator
name|locator
init|=
name|getLocator
argument_list|(
name|prefix
argument_list|,
name|href
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"internal"
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspacePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/"
argument_list|,
name|locator
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/repository/internal/"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/repository/internal/"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/repository/internal"
argument_list|,
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/repository/internal"
argument_list|,
name|locator
operator|.
name|getRepositoryPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocatorWithPrefixHref
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"http://myproxy/"
decl_stmt|;
name|String
name|href
init|=
literal|"/repository/internal"
decl_stmt|;
name|ArchivaDavResourceLocator
name|locator
init|=
name|getLocator
argument_list|(
name|prefix
argument_list|,
name|href
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"internal"
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspacePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/"
argument_list|,
name|locator
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/repository/internal"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/repository/internal/"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/repository/internal"
argument_list|,
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/repository/internal"
argument_list|,
name|locator
operator|.
name|getRepositoryPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocatorWithHrefThatContainsPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"http://myproxy/"
decl_stmt|;
name|String
name|href
init|=
literal|"http://myproxy/repository/internal"
decl_stmt|;
name|ArchivaDavResourceLocator
name|locator
init|=
name|getLocator
argument_list|(
name|prefix
argument_list|,
name|href
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"internal"
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspacePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/"
argument_list|,
name|locator
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/repository/internal"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/repository/internal/"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/repository/internal"
argument_list|,
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/repository/internal"
argument_list|,
name|locator
operator|.
name|getRepositoryPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocatorWithRootHref
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"http://myproxy/"
decl_stmt|;
name|String
name|href
init|=
literal|"/"
decl_stmt|;
name|ArchivaDavResourceLocator
name|locator
init|=
name|getLocator
argument_list|(
name|prefix
argument_list|,
name|href
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|locator
operator|.
name|getWorkspacePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/"
argument_list|,
name|locator
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://myproxy/"
argument_list|,
name|locator
operator|.
name|getHref
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|locator
operator|.
name|getRepositoryPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArchivaDavResourceLocator
name|getLocator
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|href
parameter_list|)
block|{
return|return
operator|(
name|ArchivaDavResourceLocator
operator|)
name|factory
operator|.
name|createResourceLocator
argument_list|(
name|prefix
argument_list|,
name|href
argument_list|)
return|;
block|}
block|}
end_class

end_unit

