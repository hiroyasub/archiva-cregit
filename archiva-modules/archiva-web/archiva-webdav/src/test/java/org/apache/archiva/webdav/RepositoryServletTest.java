begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * RepositoryServletTest  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryServletTest
extends|extends
name|AbstractRepositoryServletTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_PATH
init|=
literal|"http://machine.com/repository/internal/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_REPOSITORY_ID
init|=
literal|"new-id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_REPOSITORY_NAME
init|=
literal|"New Repository"
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|startRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
name|RepositoryServlet
operator|.
name|class
operator|.
name|cast
argument_list|(
name|findServlet
argument_list|(
literal|"repository"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOID_INTERNAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryAfterDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
name|RepositoryServlet
operator|.
name|class
operator|.
name|cast
argument_list|(
name|findServlet
argument_list|(
literal|"repository"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|ArchivaConfiguration
name|archivaConfiguration
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|c
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|removeManagedRepository
argument_list|(
name|c
operator|.
name|findManagedRepositoryById
argument_list|(
name|REPOID_INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|REPOID_INTERNAL
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|REPOID_INTERNAL
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryAfterAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
name|RepositoryServlet
operator|.
name|class
operator|.
name|cast
argument_list|(
name|findServlet
argument_list|(
literal|"repository"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|ArchivaConfiguration
name|archivaConfiguration
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|c
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|NEW_REPOSITORY_ID
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|NEW_REPOSITORY_NAME
argument_list|)
expr_stmt|;
name|Path
name|repoRoot
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test-repository-root"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoRoot
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repoRoot
argument_list|)
expr_stmt|;
block|}
name|repo
operator|.
name|setLocation
argument_list|(
name|repoRoot
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addManagedRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|NEW_REPOSITORY_ID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_REPOSITORY_NAME
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check other is still intact
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOID_INTERNAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryInvalidPathPassthroughPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|REQUEST_PATH
operator|+
literal|".indexer/filecontent/segments.gen"
decl_stmt|;
name|populateRepo
argument_list|(
name|repoRootInternal
argument_list|,
literal|".indexer/filecontent/segments.gen"
argument_list|,
literal|"index file"
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|getServletUnitClient
argument_list|()
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertResponseOK
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index file"
argument_list|,
name|response
operator|.
name|getContentAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryInvalidPathPassthroughMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|REQUEST_PATH
operator|+
literal|".indexer/filecontent/foo.bar"
decl_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|getServletUnitClient
argument_list|()
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertResponseNotFound
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getContentAsString
argument_list|()
argument_list|)
comment|//
operator|.
name|contains
argument_list|(
literal|"Resource does not exist"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

