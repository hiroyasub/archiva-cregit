begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|NicelyResynchronizingAjaxController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
operator|.
name|ArchivaSpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MavenIndexerCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|deploy
operator|.
name|ApplicationParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|startup
operator|.
name|Tomcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|ContextLoaderListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  * AbstractRepositoryServletTestCase  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaSpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/repository-servlet-simple.xml"
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractRepositoryServletTestCase
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|REPOID_INTERNAL
init|=
literal|"internal"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REPOID_LEGACY
init|=
literal|"legacy"
decl_stmt|;
specifier|protected
name|File
name|repoRootInternal
decl_stmt|;
specifier|protected
name|File
name|repoRootLegacy
decl_stmt|;
specifier|protected
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|saveConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|saveConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Tomcat
name|tomcat
decl_stmt|;
specifier|protected
specifier|static
name|int
name|port
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|appserverBase
init|=
operator|new
name|File
argument_list|(
literal|"target/appserver-base"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"appserver.base"
argument_list|,
name|appserverBase
argument_list|)
expr_stmt|;
name|File
name|testConf
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/repository-archiva.xml"
argument_list|)
decl_stmt|;
name|File
name|testConfDest
init|=
operator|new
name|File
argument_list|(
name|appserverBase
argument_list|,
literal|"conf/archiva.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testConfDest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|testConfDest
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|testConf
argument_list|,
name|testConfDest
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|repoRootInternal
operator|=
operator|new
name|File
argument_list|(
name|appserverBase
argument_list|,
literal|"data/repositories/internal"
argument_list|)
expr_stmt|;
name|repoRootLegacy
operator|=
operator|new
name|File
argument_list|(
name|appserverBase
argument_list|,
literal|"data/repositories/legacy"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createManagedRepository
argument_list|(
name|REPOID_INTERNAL
argument_list|,
literal|"Internal Test Repo"
argument_list|,
name|repoRootInternal
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createManagedRepository
argument_list|(
name|REPOID_LEGACY
argument_list|,
literal|"Legacy Format Test Repo"
argument_list|,
name|repoRootLegacy
argument_list|,
literal|"legacy"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|config
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|saveConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
name|CacheManager
operator|.
name|getInstance
argument_list|()
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|applicationContext
operator|.
name|getBean
argument_list|(
name|MavenIndexerCleaner
operator|.
name|class
argument_list|)
operator|.
name|cleanupIndex
argument_list|()
expr_stmt|;
name|tomcat
operator|=
operator|new
name|Tomcat
argument_list|()
expr_stmt|;
name|tomcat
operator|.
name|setBaseDir
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
expr_stmt|;
name|tomcat
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
name|tomcat
operator|.
name|addContext
argument_list|(
literal|""
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationParameter
name|applicationParameter
init|=
operator|new
name|ApplicationParameter
argument_list|()
decl_stmt|;
name|applicationParameter
operator|.
name|setName
argument_list|(
literal|"contextConfigLocation"
argument_list|)
expr_stmt|;
name|applicationParameter
operator|.
name|setValue
argument_list|(
name|getSpringConfigLocation
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addApplicationParameter
argument_list|(
name|applicationParameter
argument_list|)
expr_stmt|;
name|context
operator|.
name|addApplicationListener
argument_list|(
name|ContextLoaderListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addApplicationListener
argument_list|(
name|MavenIndexerCleaner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Tomcat
operator|.
name|addServlet
argument_list|(
name|context
argument_list|,
literal|"repository"
argument_list|,
operator|new
name|UnauthenticatedRepositoryServlet
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServletMapping
argument_list|(
literal|"/repository/*"
argument_list|,
literal|"repository"
argument_list|)
expr_stmt|;
name|tomcat
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|tomcat
operator|.
name|getConnector
argument_list|()
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getSpringConfigLocation
parameter_list|()
block|{
return|return
literal|"classpath*:/META-INF/spring-context.xml,classpath*:spring-context.xml"
return|;
block|}
comment|/*     protected ServletUnitClient getServletUnitClient()         throws Exception     {         if ( servletUnitClient != null )         {             return servletUnitClient;         }         servletRunner = new ServletRunner( new File( "src/test/resources/WEB-INF/web.xml" ) );          servletRunner.registerServlet( "/repository/*", UnauthenticatedRepositoryServlet.class.getName() );          servletUnitClient = servletRunner.newClient();          return servletUnitClient;     }*/
comment|/*     protected<P extends Page> P page(final String path) throws IOException {         return newClient().getPage(base.toExternalForm() + "repository/" + path);     }     */
specifier|protected
specifier|static
name|WebClient
name|newClient
parameter_list|()
block|{
specifier|final
name|WebClient
name|webClient
init|=
operator|new
name|WebClient
argument_list|()
decl_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setJavaScriptEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setCssEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setAppletEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|setAjaxController
argument_list|(
operator|new
name|NicelyResynchronizingAjaxController
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|webClient
return|;
block|}
specifier|protected
specifier|static
name|WebResponse
name|getWebResponse
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newClient
argument_list|()
operator|.
name|getPage
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
name|path
argument_list|)
operator|.
name|getWebResponse
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|GetMethodWebRequest
extends|extends
name|WebRequest
block|{
name|String
name|url
decl_stmt|;
specifier|public
name|GetMethodWebRequest
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PutMethodWebRequest
extends|extends
name|WebRequest
block|{
name|String
name|url
decl_stmt|;
specifier|public
name|PutMethodWebRequest
parameter_list|(
name|String
name|url
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|,
name|HttpMethod
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ServletUnitClient
block|{
specifier|public
name|ServletUnitClient
parameter_list|()
block|{
block|}
specifier|public
name|WebResponse
name|getResponse
parameter_list|(
name|WebRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getWebResponse
argument_list|(
name|request
operator|.
name|getUrl
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|WebResponse
name|getResource
parameter_list|(
name|WebRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
specifier|public
name|ServletUnitClient
name|getServletUnitClient
parameter_list|()
block|{
return|return
operator|new
name|ServletUnitClient
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|repoRootInternal
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRootInternal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repoRootLegacy
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRootLegacy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tomcat
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|tomcat
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertFileContents
parameter_list|(
name|String
name|expectedContents
parameter_list|,
name|File
name|repoRoot
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|actualFile
init|=
operator|new
name|File
argument_list|(
name|repoRoot
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File<"
operator|+
name|actualFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"> should exist."
argument_list|,
name|actualFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File<"
operator|+
name|actualFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"> should be a file (not a dir/link/device/etc)."
argument_list|,
name|actualFile
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|actualContents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|actualFile
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File Contents of<"
operator|+
name|actualFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|">"
argument_list|,
name|expectedContents
argument_list|,
name|actualContents
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertRepositoryValid
parameter_list|(
name|RepositoryServlet
name|servlet
parameter_list|,
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagedRepository
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Archiva Managed Repository id:<"
operator|+
name|repoId
operator|+
literal|"> should exist."
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|File
name|repoRoot
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Archiva Managed Repository id:<"
operator|+
name|repoId
operator|+
literal|"> should have a valid location on disk."
argument_list|,
name|repoRoot
operator|.
name|exists
argument_list|()
operator|&&
name|repoRoot
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseOK
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an OK response code"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseOK
parameter_list|(
name|WebResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an OK response code for path: "
operator|+
name|path
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseNotFound
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an 404/Not Found response code."
argument_list|,
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseInternalServerError
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an 500/Internal Server Error response code."
argument_list|,
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseConflictError
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have received a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been a 409/Conflict response code."
argument_list|,
name|HttpServletResponse
operator|.
name|SC_CONFLICT
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|location
parameter_list|,
name|boolean
name|blockRedeployments
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLocation
argument_list|(
name|location
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setBlockRedeployments
argument_list|(
name|blockRedeployments
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|location
parameter_list|,
name|String
name|layout
parameter_list|,
name|boolean
name|blockRedeployments
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
name|createManagedRepository
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|location
argument_list|,
name|blockRedeployments
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|RemoteRepositoryConfiguration
name|createRemoteRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|void
name|saveConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
throws|throws
name|Exception
block|{
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupCleanRepo
parameter_list|(
name|File
name|repoRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRootDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|repoRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|repoRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertManagedFileNotExists
parameter_list|(
name|File
name|repoRootInternal
parameter_list|,
name|String
name|resourcePath
parameter_list|)
block|{
name|File
name|repoFile
init|=
operator|new
name|File
argument_list|(
name|repoRootInternal
argument_list|,
name|resourcePath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Managed Repository File<"
operator|+
name|repoFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"> should not exist."
argument_list|,
name|repoFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupCleanInternalRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCleanRepo
argument_list|(
name|repoRootInternal
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|File
name|populateRepo
parameter_list|(
name|File
name|repoRootManaged
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|repoRootManaged
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|destFile
argument_list|,
name|contents
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destFile
return|;
block|}
block|}
end_class

end_unit

