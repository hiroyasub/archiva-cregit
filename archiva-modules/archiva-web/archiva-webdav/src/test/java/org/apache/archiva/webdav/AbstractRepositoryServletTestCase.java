begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|NicelyResynchronizingAjaxController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
operator|.
name|ArchivaSpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|httpunit
operator|.
name|MkColMethodWebRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MavenIndexerCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|NoSuchBeanDefinitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|AutowireCapableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|MessageSourceResolvable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|NoSuchMessageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|ResolvableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockHttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockHttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|WebApplicationContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * AbstractRepositoryServletTestCase  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaSpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath*:spring-context.xml"
block|,
literal|"classpath*:/repository-servlet-simple.xml"
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractRepositoryServletTestCase
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|REPOID_INTERNAL
init|=
literal|"internal"
decl_stmt|;
specifier|protected
name|Path
name|repoRootInternal
decl_stmt|;
specifier|protected
name|Path
name|repoRootLegacy
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|saveConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|saveConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|appserverBase
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/appserver-base"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"appserver.base"
argument_list|,
name|appserverBase
argument_list|)
expr_stmt|;
name|Path
name|testConf
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/repository-archiva.xml"
argument_list|)
decl_stmt|;
name|Path
name|testConfDest
init|=
name|Paths
operator|.
name|get
argument_list|(
name|appserverBase
argument_list|,
literal|"conf/archiva.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|testConfDest
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|testConfDest
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|testConf
operator|.
name|toFile
argument_list|()
argument_list|,
name|testConfDest
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|repoRootInternal
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|appserverBase
argument_list|,
literal|"data/repositories/internal"
argument_list|)
expr_stmt|;
name|repoRootLegacy
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|appserverBase
argument_list|,
literal|"data/repositories/legacy"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createManagedRepository
argument_list|(
name|REPOID_INTERNAL
argument_list|,
literal|"Internal Test Repo"
argument_list|,
name|repoRootInternal
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|managedRepositoryAdmin
operator|.
name|createIndexContext
argument_list|(
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|REPOID_INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|config
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|saveConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
name|CacheManager
operator|.
name|getInstance
argument_list|()
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|applicationContext
operator|.
name|getBean
argument_list|(
name|MavenIndexerCleaner
operator|.
name|class
argument_list|)
operator|.
name|cleanupIndex
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|UnauthenticatedRepositoryServlet
name|unauthenticatedRepositoryServlet
init|=
operator|new
name|UnauthenticatedRepositoryServlet
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|startRepository
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockServletContext
name|mockServletContext
init|=
operator|new
name|MockServletContext
argument_list|()
decl_stmt|;
name|WebApplicationContext
name|webApplicationContext
init|=
operator|new
name|TestWebapplicationContext
argument_list|(
name|applicationContext
argument_list|,
name|mockServletContext
argument_list|)
decl_stmt|;
name|mockServletContext
operator|.
name|setAttribute
argument_list|(
name|WebApplicationContext
operator|.
name|ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
argument_list|,
name|webApplicationContext
argument_list|)
expr_stmt|;
name|MockServletConfig
name|mockServletConfig
init|=
operator|new
name|MockServletConfig
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|mockServletContext
return|;
block|}
block|}
decl_stmt|;
name|unauthenticatedRepositoryServlet
operator|.
name|init
argument_list|(
name|mockServletConfig
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|createVersionMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|createVersionMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|String
name|createVersionMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|timestamp
parameter_list|,
name|String
name|buildNumber
parameter_list|,
name|String
name|lastUpdated
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<metadata>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|groupId
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<version>"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
name|boolean
name|hasSnapshot
init|=
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|timestamp
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|buildNumber
argument_list|)
decl_stmt|;
name|boolean
name|hasLastUpdated
init|=
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|lastUpdated
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSnapshot
operator|||
name|hasLastUpdated
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<versioning>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSnapshot
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<snapshot>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<buildNumber>"
argument_list|)
operator|.
name|append
argument_list|(
name|buildNumber
argument_list|)
operator|.
name|append
argument_list|(
literal|"</buildNumber>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<timestamp>"
argument_list|)
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
operator|.
name|append
argument_list|(
literal|"</timestamp>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</snapshot>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasLastUpdated
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<lastUpdated>"
argument_list|)
operator|.
name|append
argument_list|(
name|lastUpdated
argument_list|)
operator|.
name|append
argument_list|(
literal|"</lastUpdated>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</versioning>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</metadata>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|TestWebapplicationContext
implements|implements
name|WebApplicationContext
block|{
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|private
name|ServletContext
name|servletContext
decl_stmt|;
name|TestWebapplicationContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|servletContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getApplicationName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getDisplayName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getStartupDate
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getStartupDate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ApplicationContext
name|getParent
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getParent
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AutowireCapableBeanFactory
name|getAutowireCapableBeanFactory
parameter_list|()
throws|throws
name|IllegalStateException
block|{
return|return
name|applicationContext
operator|.
name|getAutowireCapableBeanFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishEvent
parameter_list|(
name|ApplicationEvent
name|applicationEvent
parameter_list|)
block|{
name|applicationContext
operator|.
name|publishEvent
argument_list|(
name|applicationEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Environment
name|getEnvironment
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getEnvironment
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BeanFactory
name|getParentBeanFactory
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getParentBeanFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsLocalBean
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|containsLocalBean
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsBeanDefinition
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|containsBeanDefinition
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBeanDefinitionCount
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getBeanDefinitionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBeanDefinitionNames
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getBeanDefinitionNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBeanNamesForType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|getBeanNamesForType
argument_list|(
name|aClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBeanNamesForType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|,
name|boolean
name|b
parameter_list|,
name|boolean
name|b2
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|getBeanNamesForType
argument_list|(
name|aClass
argument_list|,
name|b
argument_list|,
name|b2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|tClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|,
name|boolean
name|b
parameter_list|,
name|boolean
name|b2
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|tClass
argument_list|,
name|b
argument_list|,
name|b2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBeanNamesForAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|getBeanNamesForAnnotation
argument_list|(
name|aClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getBeansWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBeansWithAnnotation
argument_list|(
name|aClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|A
name|findAnnotationOnBean
parameter_list|(
name|String
name|s
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
return|return
name|applicationContext
operator|.
name|findAnnotationOnBean
argument_list|(
name|s
argument_list|,
name|aClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|,
name|Object
modifier|...
name|objects
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBean
argument_list|(
name|aClass
argument_list|,
name|objects
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getBean
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBean
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBean
parameter_list|(
name|String
name|s
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBean
argument_list|(
name|s
argument_list|,
name|tClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBean
argument_list|(
name|tClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getBean
parameter_list|(
name|String
name|s
parameter_list|,
name|Object
modifier|...
name|objects
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|applicationContext
operator|.
name|getBean
argument_list|(
name|s
argument_list|,
name|objects
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsBean
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|containsBean
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleton
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
return|return
name|applicationContext
operator|.
name|isSingleton
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPrototype
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
return|return
name|applicationContext
operator|.
name|isPrototype
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTypeMatch
parameter_list|(
name|String
name|s
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
return|return
name|applicationContext
operator|.
name|isTypeMatch
argument_list|(
name|s
argument_list|,
name|aClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
return|return
name|applicationContext
operator|.
name|getType
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAliases
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|getAliases
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|(
name|String
name|s
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|,
name|String
name|s2
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|getMessage
argument_list|(
name|s
argument_list|,
name|objects
argument_list|,
name|s2
argument_list|,
name|locale
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|(
name|String
name|s
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|NoSuchMessageException
block|{
return|return
name|applicationContext
operator|.
name|getMessage
argument_list|(
name|s
argument_list|,
name|objects
argument_list|,
name|locale
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|(
name|MessageSourceResolvable
name|messageSourceResolvable
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|NoSuchMessageException
block|{
return|return
name|applicationContext
operator|.
name|getMessage
argument_list|(
name|messageSourceResolvable
argument_list|,
name|locale
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
index|[]
name|getResources
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|applicationContext
operator|.
name|getResources
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishEvent
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBeanNamesForType
parameter_list|(
name|ResolvableType
name|resolvableType
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTypeMatch
parameter_list|(
name|String
name|s
parameter_list|,
name|ResolvableType
name|resolvableType
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|applicationContext
operator|.
name|getResource
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|applicationContext
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
block|}
specifier|protected
name|Servlet
name|findServlet
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|unauthenticatedRepositoryServlet
return|;
block|}
specifier|protected
name|String
name|getSpringConfigLocation
parameter_list|()
block|{
return|return
literal|"classpath*:/META-INF/spring-context.xml,classpath*:spring-context.xml"
return|;
block|}
specifier|protected
specifier|static
name|WebClient
name|newClient
parameter_list|()
block|{
specifier|final
name|WebClient
name|webClient
init|=
operator|new
name|WebClient
argument_list|()
decl_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setJavaScriptEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setCssEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setAppletEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setThrowExceptionOnFailingStatusCode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|setAjaxController
argument_list|(
operator|new
name|NicelyResynchronizingAjaxController
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|webClient
return|;
block|}
specifier|protected
name|WebResponse
name|getWebResponse
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getWebResponse
argument_list|(
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://localhost"
operator|+
name|path
argument_list|)
argument_list|)
return|;
comment|//, false );
block|}
specifier|protected
name|WebResponse
name|getWebResponse
parameter_list|(
name|WebRequest
name|webRequest
parameter_list|)
comment|//, boolean followRedirect )
throws|throws
name|Exception
block|{
name|MockHttpServletRequest
name|request
init|=
operator|new
name|MockHttpServletRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRequestURI
argument_list|(
name|webRequest
operator|.
name|getUrl
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Apache Archiva unit test"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMethod
argument_list|(
name|webRequest
operator|.
name|getHttpMethod
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|webRequest
operator|.
name|getHttpMethod
argument_list|()
operator|==
name|HttpMethod
operator|.
name|PUT
condition|)
block|{
name|PutMethodWebRequest
name|putRequest
init|=
name|PutMethodWebRequest
operator|.
name|class
operator|.
name|cast
argument_list|(
name|webRequest
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContentType
argument_list|(
name|putRequest
operator|.
name|contentType
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContent
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|putRequest
operator|.
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|webRequest
operator|instanceof
name|MkColMethodWebRequest
condition|)
block|{
name|request
operator|.
name|setMethod
argument_list|(
literal|"MKCOL"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MockHttpServletResponse
name|response
init|=
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|HttpServletResponse
operator|.
name|SC_MOVED_PERMANENTLY
operator|||
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|HttpServletResponse
operator|.
name|SC_MOVED_TEMPORARILY
condition|)
block|{
name|String
name|location
init|=
name|response
operator|.
name|getHeader
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"follow redirect to {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|getWebResponse
argument_list|(
operator|new
name|GetMethodWebRequest
argument_list|(
name|location
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|WebResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getContentAsString
parameter_list|()
block|{
try|try
block|{
return|return
name|response
operator|.
name|getContentAsString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|response
operator|.
name|getStatus
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getResponseHeaderValue
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
return|return
name|response
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|MockHttpServletResponse
name|execute
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|MockHttpServletResponse
name|response
init|=
operator|new
name|MockHttpServletResponse
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getContentAsString
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|errorMessage
init|=
name|getErrorMessage
argument_list|()
decl_stmt|;
return|return
operator|(
name|errorMessage
operator|!=
literal|null
operator|)
condition|?
name|errorMessage
else|:
name|super
operator|.
name|getContentAsString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|this
operator|.
name|unauthenticatedRepositoryServlet
operator|.
name|service
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
specifier|static
class|class
name|GetMethodWebRequest
extends|extends
name|WebRequest
block|{
name|String
name|url
decl_stmt|;
specifier|public
name|GetMethodWebRequest
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PutMethodWebRequest
extends|extends
name|WebRequest
block|{
name|String
name|url
decl_stmt|;
name|InputStream
name|inputStream
decl_stmt|;
name|String
name|contentType
decl_stmt|;
specifier|public
name|PutMethodWebRequest
parameter_list|(
name|String
name|url
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|,
name|HttpMethod
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|inputStream
operator|=
name|inputStream
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ServletUnitClient
block|{
name|AbstractRepositoryServletTestCase
name|abstractRepositoryServletTestCase
decl_stmt|;
specifier|public
name|ServletUnitClient
parameter_list|(
name|AbstractRepositoryServletTestCase
name|abstractRepositoryServletTestCase
parameter_list|)
block|{
name|this
operator|.
name|abstractRepositoryServletTestCase
operator|=
name|abstractRepositoryServletTestCase
expr_stmt|;
block|}
specifier|public
name|WebResponse
name|getResponse
parameter_list|(
name|WebRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getResponse
argument_list|(
name|request
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|WebResponse
name|getResponse
parameter_list|(
name|WebRequest
name|request
parameter_list|,
name|boolean
name|followRedirect
parameter_list|)
throws|throws
name|Exception
block|{
comment|// alwasy following redirect as it's normal
return|return
name|abstractRepositoryServletTestCase
operator|.
name|getWebResponse
argument_list|(
name|request
argument_list|)
return|;
comment|//, followRedirect );
block|}
specifier|public
name|WebResponse
name|getResource
parameter_list|(
name|WebRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
specifier|public
name|ServletUnitClient
name|getServletUnitClient
parameter_list|()
block|{
return|return
operator|new
name|ServletUnitClient
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|repoRootInternal
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRootInternal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|repoRootLegacy
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRootLegacy
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertFileContents
parameter_list|(
name|String
name|expectedContents
parameter_list|,
name|Path
name|repoRoot
parameter_list|,
name|String
name|subpath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|subpath
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|?
name|subpath
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|subpath
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|subpath
decl_stmt|;
name|Path
name|actualFile
init|=
name|repoRoot
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File<"
operator|+
name|actualFile
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|"> should exist."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File<"
operator|+
name|actualFile
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|"> should be a file (not a dir/link/device/etc)."
argument_list|,
name|Files
operator|.
name|isRegularFile
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|actualContents
init|=
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|actualFile
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File Contents of<"
operator|+
name|actualFile
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|">"
argument_list|,
name|expectedContents
argument_list|,
name|actualContents
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertRepositoryValid
parameter_list|(
name|RepositoryServlet
name|servlet
parameter_list|,
name|String
name|repoId
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagedRepository
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Archiva Managed Repository id:<"
operator|+
name|repoId
operator|+
literal|"> should exist."
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|Path
name|repoRoot
init|=
name|Paths
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Archiva Managed Repository id:<"
operator|+
name|repoId
operator|+
literal|"> should have a valid location on disk."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|repoRoot
argument_list|)
operator|&&
name|Files
operator|.
name|isDirectory
argument_list|(
name|repoRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseOK
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an OK response code"
argument_list|,
comment|//
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
comment|//
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseOK
parameter_list|(
name|WebResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an OK response code for path: "
operator|+
name|path
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseNotFound
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an 404/Not Found response code."
argument_list|,
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseInternalServerError
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have recieved a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been an 500/Internal Server Error response code."
argument_list|,
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertResponseConflictError
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have received a response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have been a 409/Conflict response code."
argument_list|,
name|HttpServletResponse
operator|.
name|SC_CONFLICT
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|location
parameter_list|,
name|boolean
name|blockRedeployments
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLocation
argument_list|(
name|location
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setBlockRedeployments
argument_list|(
name|blockRedeployments
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|location
parameter_list|,
name|String
name|layout
parameter_list|,
name|boolean
name|blockRedeployments
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
name|createManagedRepository
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|location
argument_list|,
name|blockRedeployments
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|RemoteRepositoryConfiguration
name|createRemoteRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|void
name|saveConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
throws|throws
name|Exception
block|{
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupCleanRepo
parameter_list|(
name|Path
name|repoRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRootDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoRootDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repoRootDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertManagedFileNotExists
parameter_list|(
name|Path
name|repoRootInternal
parameter_list|,
name|String
name|resourcePath
parameter_list|)
block|{
name|Path
name|repoFile
init|=
name|repoRootInternal
operator|.
name|resolve
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Managed Repository File<"
operator|+
name|repoFile
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|"> should not exist."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|repoFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupCleanInternalRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCleanRepo
argument_list|(
name|repoRootInternal
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Path
name|populateRepo
parameter_list|(
name|Path
name|repoRootManaged
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|destFile
init|=
name|repoRootManaged
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|destFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|destFile
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
name|contents
argument_list|)
expr_stmt|;
return|return
name|destFile
return|;
block|}
block|}
end_class

end_unit

