begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|basic
operator|.
name|BasicWebDavServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|DefaultPlexusContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|context
operator|.
name|DefaultContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * AbstractWebdavServer - Baseline server for starting up a BasicWebDavServlet to allow experimentation with.    *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: AbstractWebdavServer.java 5407 2007-01-12 19:41:09Z joakime $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractWebdavServer
block|{
specifier|public
specifier|static
specifier|final
name|int
name|PORT
init|=
literal|14541
decl_stmt|;
specifier|protected
name|PlexusContainer
name|container
decl_stmt|;
specifier|protected
name|String
name|basedir
decl_stmt|;
specifier|protected
name|Map
name|context
decl_stmt|;
comment|/** the jetty server */
specifier|protected
name|Server
name|server
decl_stmt|;
specifier|private
name|DavServerManager
name|manager
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
block|{
name|context
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getBasedir
parameter_list|()
block|{
if|if
condition|(
name|basedir
operator|!=
literal|null
condition|)
block|{
return|return
name|basedir
return|;
block|}
name|basedir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
return|return
name|basedir
return|;
block|}
specifier|public
name|File
name|getTestFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|getProviderHint
parameter_list|()
function_decl|;
specifier|public
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|basedir
operator|=
name|getBasedir
argument_list|()
expr_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// Context Setup
comment|// ----------------------------------------------------------------------------
name|context
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"basedir"
argument_list|,
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
name|customizeContext
argument_list|(
operator|new
name|DefaultContext
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasPlexusHome
init|=
name|context
operator|.
name|containsKey
argument_list|(
literal|"plexus.home"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasPlexusHome
condition|)
block|{
name|File
name|f
init|=
name|getTestFile
argument_list|(
literal|"target/plexus-home"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|f
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
literal|"plexus.home"
argument_list|,
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------------
comment|// Configuration
comment|// ----------------------------------------------------------------------------
name|String
name|config
init|=
name|getCustomConfigurationName
argument_list|()
decl_stmt|;
name|InputStream
name|is
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The custom configuration specified is null: "
operator|+
name|config
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|config
operator|=
name|getConfigurationName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|is
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|// Look for a configuration associated with this test but return null if we
comment|// can't find one so the container doesn't look for a configuration that we
comment|// know doesn't exist. Not all tests have an associated Foo.xml for testing.
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|config
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------------
comment|// Create the container
comment|// ----------------------------------------------------------------------------
name|container
operator|=
name|createContainerInstance
argument_list|(
name|context
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// Create the DavServerManager
comment|// ----------------------------------------------------------------------------
name|manager
operator|=
operator|(
name|DavServerManager
operator|)
name|container
operator|.
name|lookup
argument_list|(
name|DavServerManager
operator|.
name|ROLE
argument_list|,
name|getProviderHint
argument_list|()
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// Create the jetty server
comment|// ----------------------------------------------------------------------------
name|System
operator|.
name|setProperty
argument_list|(
literal|"DEBUG"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.mortbay.log.class"
argument_list|,
literal|"org.slf4j.impl.SimpleLogger"
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|PORT
argument_list|)
expr_stmt|;
name|Context
name|root
init|=
operator|new
name|Context
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|Context
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|ServletHandler
name|servletHandler
init|=
name|root
operator|.
name|getServletHandler
argument_list|()
decl_stmt|;
name|root
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|root
operator|.
name|setAttribute
argument_list|(
name|PlexusConstants
operator|.
name|PLEXUS_KEY
argument_list|,
name|container
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// Configure the webdav servlet
comment|// ----------------------------------------------------------------------------
name|ServletHolder
name|holder
init|=
name|servletHandler
operator|.
name|addServletWithMapping
argument_list|(
name|BasicWebDavServlet
operator|.
name|class
argument_list|,
literal|"/projects/*"
argument_list|)
decl_stmt|;
comment|// Initialize server contents directory.
name|File
name|serverContentsDir
init|=
operator|new
name|File
argument_list|(
literal|"target/test-server/"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|serverContentsDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverContentsDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to execute test, server contents test directory ["
operator|+
name|serverContentsDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] exists, and cannot be deleted by the test case."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|serverContentsDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to execute test, server contents test directory ["
operator|+
name|serverContentsDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] cannot be created."
argument_list|)
throw|;
block|}
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"dav.root"
argument_list|,
name|serverContentsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------------
comment|// Start the jetty server
comment|// ----------------------------------------------------------------------------
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|PlexusContainer
name|createContainerInstance
parameter_list|(
name|Map
name|context
parameter_list|,
name|String
name|configuration
parameter_list|)
throws|throws
name|PlexusContainerException
block|{
return|return
operator|new
name|DefaultPlexusContainer
argument_list|(
literal|"test"
argument_list|,
name|context
argument_list|,
name|configuration
argument_list|)
return|;
block|}
specifier|protected
name|void
name|customizeContext
parameter_list|(
name|DefaultContext
name|ctx
parameter_list|)
block|{
comment|/* override to specify more */
block|}
specifier|protected
name|String
name|getCustomConfigurationName
parameter_list|()
block|{
comment|/* override to specify */
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|getConfigurationName
parameter_list|(
name|String
name|subname
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".xml"
return|;
block|}
specifier|public
name|void
name|stopServer
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

