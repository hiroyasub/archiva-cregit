begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|webdav
operator|.
name|lib
operator|.
name|WebdavResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|webdav
operator|.
name|lib
operator|.
name|WebdavResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusInSpringTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * AbstractWebdavProviderTestCase   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: AbstractWebdavProviderTestCase.java 5997 2007-03-04 19:41:15Z joakime $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractWebdavProviderTestCase
extends|extends
name|PlexusInSpringTestCase
block|{
specifier|public
specifier|static
specifier|final
name|int
name|PORT
init|=
literal|4321
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"/repos"
decl_stmt|;
specifier|protected
name|File
name|serverRootDir
init|=
literal|null
decl_stmt|;
specifier|private
name|DavServerManager
name|manager
decl_stmt|;
specifier|private
name|String
name|providerHint
init|=
literal|"simple"
decl_stmt|;
specifier|public
name|DavServerManager
name|getManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
specifier|public
name|String
name|getProviderHint
parameter_list|()
block|{
return|return
name|providerHint
return|;
block|}
specifier|public
name|void
name|setManager
parameter_list|(
name|DavServerManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
specifier|public
name|void
name|setProviderHint
parameter_list|(
name|String
name|providerHint
parameter_list|)
block|{
name|this
operator|.
name|providerHint
operator|=
name|providerHint
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
try|try
block|{
name|manager
operator|=
operator|(
name|DavServerManager
operator|)
name|lookup
argument_list|(
name|DavServerManager
operator|.
name|ROLE
argument_list|,
name|getProviderHint
argument_list|()
argument_list|)
expr_stmt|;
name|serverRootDir
operator|=
name|getRootDir
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tearDown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|serverRootDir
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|dumpCollection
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|WebdavResource
name|resources
index|[]
init|=
name|webdavResource
operator|.
name|listWebdavResources
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dump Collection ["
operator|+
name|path
operator|+
literal|"]: "
operator|+
name|resources
operator|.
name|length
operator|+
literal|" hits."
argument_list|)
expr_stmt|;
name|dumpCollectionRecursive
argument_list|(
literal|""
argument_list|,
name|webdavResource
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|dumpCollectionRecursive
parameter_list|(
name|String
name|indent
parameter_list|,
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|indent
operator|.
name|length
argument_list|()
operator|>
literal|12
condition|)
block|{
return|return;
block|}
name|WebdavResource
name|resources
index|[]
init|=
name|webdavResource
operator|.
name|listWebdavResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"WebDavResource["
operator|+
name|path
operator|+
literal|"|"
operator|+
name|i
operator|+
literal|"]: "
operator|+
operator|(
name|resources
index|[
name|i
index|]
operator|.
name|isCollection
argument_list|()
condition|?
literal|"(collection) "
else|:
literal|""
operator|)
operator|+
name|resources
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
index|[
name|i
index|]
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|dumpCollectionRecursive
argument_list|(
name|indent
operator|+
literal|"  "
argument_list|,
name|resources
index|[
name|i
index|]
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|resources
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// --------------------------------------------------------------------
comment|// Actual Test Cases.
comment|// --------------------------------------------------------------------
specifier|public
name|void
name|assertNotExists
parameter_list|(
name|File
name|basedir
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
name|assertNotExists
argument_list|(
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|relativePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNotExists
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected path<"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"> should not exist."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertExists
parameter_list|(
name|File
name|basedir
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
name|assertExists
argument_list|(
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|relativePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertExists
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Expected path<"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"> does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resetDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to delete test directory ["
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to execute test, test directory ["
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] exists, and cannot be deleted by the test case."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to execute test, test directory ["
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] cannot be created."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|getRootDir
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|serverRootDir
operator|==
literal|null
condition|)
block|{
name|String
name|clazz
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|clazz
operator|=
name|clazz
operator|.
name|substring
argument_list|(
name|clazz
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|serverRootDir
operator|=
operator|new
name|File
argument_list|(
literal|"target/test-contents-"
operator|+
name|clazz
operator|+
literal|"/"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resetDirectory
argument_list|(
name|serverRootDir
argument_list|)
expr_stmt|;
block|}
return|return
name|serverRootDir
return|;
block|}
specifier|protected
name|File
name|getTestDir
parameter_list|(
name|String
name|subdir
parameter_list|)
block|{
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|getRootDir
argument_list|()
argument_list|,
name|subdir
argument_list|)
decl_stmt|;
name|resetDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
return|return
name|testDir
return|;
block|}
specifier|public
name|boolean
name|isHttpStatusOk
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|)
block|{
name|int
name|statusCode
init|=
name|webdavResource
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusCode
operator|==
name|HttpStatus
operator|.
name|SC_MULTI_STATUS
condition|)
block|{
comment|// TODO: find out multi-status values.
block|}
return|return
operator|(
name|statusCode
operator|>=
literal|200
operator|)
operator|&&
operator|(
name|statusCode
operator|<
literal|300
operator|)
return|;
block|}
specifier|public
name|void
name|assertDavMkDir
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|httpurl
init|=
name|webdavResource
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|webdavResource
operator|.
name|mkcolMethod
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to create collection/dir<"
operator|+
name|collectionName
operator|+
literal|"> against<"
operator|+
name|httpurl
operator|+
literal|"> due to<"
operator|+
name|webdavResource
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|assertDavDirExists
argument_list|(
name|webdavResource
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertDavFileExists
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|httpurl
init|=
name|webdavResource
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|webdavResource
operator|.
name|headMethod
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to verify that file/contents<"
operator|+
name|path
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"> exists against<"
operator|+
name|httpurl
operator|+
literal|"> due to<"
operator|+
name|webdavResource
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|String
name|oldPath
init|=
name|webdavResource
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|WebdavResources
name|resources
init|=
name|webdavResource
operator|.
name|getChildResources
argument_list|()
decl_stmt|;
name|WebdavResource
name|testResource
init|=
name|resources
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|testResource
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"The file/contents<"
operator|+
name|path
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"> does not exist in<"
operator|+
name|httpurl
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testResource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"The file/contents<"
operator|+
name|path
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"> is incorrectly being reported as a collection."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|oldPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertDavFileNotExists
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|httpurl
init|=
name|webdavResource
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|webdavResource
operator|.
name|headMethod
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encountered unexpected file/contents<"
operator|+
name|path
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"> at<"
operator|+
name|httpurl
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|String
name|oldPath
init|=
name|webdavResource
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|WebdavResources
name|resources
init|=
name|webdavResource
operator|.
name|getChildResources
argument_list|()
decl_stmt|;
name|WebdavResource
name|testResource
init|=
name|resources
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|testResource
operator|==
literal|null
condition|)
block|{
comment|// Nothing found. we're done.
return|return;
block|}
if|if
condition|(
operator|!
name|testResource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Encountered unexpected file/contents<"
operator|+
name|path
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"> at<"
operator|+
name|httpurl
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|oldPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertDavDirExists
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|httpurl
init|=
name|webdavResource
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|oldPath
init|=
name|webdavResource
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|webdavResource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isHttpStatusOk
argument_list|(
name|webdavResource
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to verify that path<"
operator|+
name|path
operator|+
literal|"> is really a collection against<"
operator|+
name|httpurl
operator|+
literal|"> due to<"
operator|+
name|webdavResource
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|oldPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertDavDirNotExists
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|httpurl
init|=
name|webdavResource
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|oldPath
init|=
name|webdavResource
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|webdavResource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Encountered unexpected collection<"
operator|+
name|path
operator|+
literal|"> at<"
operator|+
name|httpurl
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getReasonCode
argument_list|()
operator|==
name|HttpStatus
operator|.
name|SC_NOT_FOUND
condition|)
block|{
comment|// Expected path.
return|return;
block|}
name|fail
argument_list|(
literal|"Unable to set path due to HttpException: "
operator|+
name|e
operator|.
name|getReasonCode
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|webdavResource
operator|.
name|setPath
argument_list|(
name|oldPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertDavTouchFile
parameter_list|(
name|WebdavResource
name|webdavResource
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|httpurl
init|=
name|webdavResource
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|webdavResource
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|webdavResource
operator|.
name|putMethod
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|filename
argument_list|,
name|contents
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to create file/contents<"
operator|+
name|path
operator|+
literal|"/"
operator|+
name|filename
operator|+
literal|"> against<"
operator|+
name|httpurl
operator|+
literal|"> due to<"
operator|+
name|webdavResource
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|assertDavFileExists
argument_list|(
name|webdavResource
argument_list|,
name|path
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertGet404
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|GetMethod
name|method
init|=
operator|new
name|GetMethod
argument_list|(
name|url
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|404
condition|)
block|{
comment|// Expected path.
return|return;
block|}
name|fail
argument_list|(
literal|"Request for resource "
operator|+
name|url
operator|+
literal|" should have resulted in an HTTP 404 (Not Found) response, "
operator|+
literal|"instead got code "
operator|+
name|method
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|"<"
operator|+
name|method
operator|.
name|getStatusText
argument_list|()
operator|+
literal|">."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HTTP Response: "
operator|+
name|e
operator|.
name|getReasonCode
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

