begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|ArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceIteratorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|MultiStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|io
operator|.
name|InputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|io
operator|.
name|OutputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|ActiveLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|LockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|property
operator|.
name|DavProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|property
operator|.
name|DavPropertyName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|property
operator|.
name|DavPropertyNameSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|property
operator|.
name|DavPropertySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|property
operator|.
name|DefaultDavProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|property
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaDavResource
implements|implements
name|DavResource
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HIDDEN_PATH_PREFIX
init|=
literal|"."
decl_stmt|;
specifier|private
specifier|final
name|ArchivaDavResourceLocator
name|locator
decl_stmt|;
specifier|private
specifier|final
name|DavResourceFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|File
name|localResource
decl_stmt|;
specifier|private
specifier|final
name|String
name|logicalResource
decl_stmt|;
specifier|private
name|DavPropertySet
name|properties
init|=
literal|null
decl_stmt|;
specifier|private
name|LockManager
name|lockManager
decl_stmt|;
specifier|private
specifier|final
name|DavSession
name|session
decl_stmt|;
specifier|private
name|String
name|remoteAddr
decl_stmt|;
specifier|private
specifier|final
name|ManagedRepository
name|repository
decl_stmt|;
specifier|private
specifier|final
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
decl_stmt|;
specifier|private
name|String
name|principal
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPLIANCE_CLASS
init|=
literal|"1, 2"
decl_stmt|;
specifier|private
specifier|final
name|ArchivaTaskScheduler
name|scheduler
decl_stmt|;
specifier|private
specifier|final
name|FileLockManager
name|fileLockManager
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaDavResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ArchivaDavResource
parameter_list|(
name|String
name|localResource
parameter_list|,
name|String
name|logicalResource
parameter_list|,
name|ManagedRepository
name|repository
parameter_list|,
name|DavSession
name|session
parameter_list|,
name|ArchivaDavResourceLocator
name|locator
parameter_list|,
name|DavResourceFactory
name|factory
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
parameter_list|,
name|RepositoryArchivaTaskScheduler
name|scheduler
parameter_list|,
name|FileLockManager
name|fileLockManager
parameter_list|)
block|{
name|this
operator|.
name|localResource
operator|=
operator|new
name|File
argument_list|(
name|localResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|logicalResource
operator|=
name|logicalResource
expr_stmt|;
name|this
operator|.
name|locator
operator|=
name|locator
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
comment|// TODO: push into locator as well as moving any references out of the resource factory
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
comment|// TODO: these should be pushed into the repository layer, along with the physical file operations in this class
name|this
operator|.
name|mimeTypes
operator|=
name|mimeTypes
expr_stmt|;
name|this
operator|.
name|auditListeners
operator|=
name|auditListeners
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|fileLockManager
operator|=
name|fileLockManager
expr_stmt|;
block|}
specifier|public
name|ArchivaDavResource
parameter_list|(
name|String
name|localResource
parameter_list|,
name|String
name|logicalResource
parameter_list|,
name|ManagedRepository
name|repository
parameter_list|,
name|String
name|remoteAddr
parameter_list|,
name|String
name|principal
parameter_list|,
name|DavSession
name|session
parameter_list|,
name|ArchivaDavResourceLocator
name|locator
parameter_list|,
name|DavResourceFactory
name|factory
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
parameter_list|,
name|RepositoryArchivaTaskScheduler
name|scheduler
parameter_list|,
name|FileLockManager
name|fileLockManager
parameter_list|)
block|{
name|this
argument_list|(
name|localResource
argument_list|,
name|logicalResource
argument_list|,
name|repository
argument_list|,
name|session
argument_list|,
name|locator
argument_list|,
name|factory
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|,
name|fileLockManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteAddr
operator|=
name|remoteAddr
expr_stmt|;
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getComplianceClass
parameter_list|()
block|{
return|return
name|COMPLIANCE_CLASS
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSupportedMethods
parameter_list|()
block|{
return|return
name|METHODS
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|localResource
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCollection
parameter_list|()
block|{
return|return
name|localResource
operator|.
name|isDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
name|String
name|resPath
init|=
name|getResourcePath
argument_list|()
decl_stmt|;
return|return
operator|(
name|resPath
operator|!=
literal|null
operator|)
condition|?
name|Text
operator|.
name|getName
argument_list|(
name|resPath
argument_list|)
else|:
name|resPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|DavResourceLocator
name|getLocator
parameter_list|()
block|{
return|return
name|locator
return|;
block|}
specifier|public
name|File
name|getLocalResource
parameter_list|()
block|{
return|return
name|localResource
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getResourcePath
parameter_list|()
block|{
return|return
name|locator
operator|.
name|getResourcePath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHref
parameter_list|()
block|{
return|return
name|locator
operator|.
name|getHref
argument_list|(
name|isCollection
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
name|localResource
operator|.
name|lastModified
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|spool
parameter_list|(
name|OutputContext
name|outputContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isCollection
argument_list|()
condition|)
block|{
name|outputContext
operator|.
name|setContentLength
argument_list|(
name|localResource
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|outputContext
operator|.
name|setContentType
argument_list|(
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
name|localResource
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|isCollection
argument_list|()
operator|&&
name|outputContext
operator|.
name|hasStream
argument_list|()
condition|)
block|{
name|Lock
name|lock
init|=
name|fileLockManager
operator|.
name|readFileLock
argument_list|(
name|localResource
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|lock
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|outputContext
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|outputContext
operator|.
name|hasStream
argument_list|()
condition|)
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|this
argument_list|,
name|localResource
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|outputContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileLockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|FileLockTimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DavPropertyName
index|[]
name|getPropertyNames
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getPropertyNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DavProperty
name|getProperty
parameter_list|(
name|DavPropertyName
name|name
parameter_list|)
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DavPropertySet
name|getProperties
parameter_list|()
block|{
return|return
name|initProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|DavProperty
name|property
parameter_list|)
throws|throws
name|DavException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|DavPropertyName
name|propertyName
parameter_list|)
throws|throws
name|DavException
block|{
block|}
specifier|public
name|MultiStatusResponse
name|alterProperties
parameter_list|(
name|DavPropertySet
name|setProperties
parameter_list|,
name|DavPropertyNameSet
name|removePropertyNames
parameter_list|)
throws|throws
name|DavException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|MultiStatusResponse
name|alterProperties
parameter_list|(
name|List
name|changeList
parameter_list|)
throws|throws
name|DavException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DavResource
name|getCollection
parameter_list|()
block|{
name|DavResource
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getResourcePath
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getResourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|String
name|parentPath
init|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|getResourcePath
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|parentPath
operator|=
literal|"/"
expr_stmt|;
block|}
name|DavResourceLocator
name|parentloc
init|=
name|locator
operator|.
name|getFactory
argument_list|()
operator|.
name|createResourceLocator
argument_list|(
name|locator
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|parentPath
argument_list|)
decl_stmt|;
try|try
block|{
name|parent
operator|=
name|factory
operator|.
name|createResource
argument_list|(
name|parentloc
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
comment|// should not occur
block|}
block|}
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMember
parameter_list|(
name|DavResource
name|resource
parameter_list|,
name|InputContext
name|inputContext
parameter_list|)
throws|throws
name|DavException
block|{
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|localResource
argument_list|,
name|resource
operator|.
name|getDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|localFile
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCollection
argument_list|()
operator|&&
name|inputContext
operator|.
name|hasStream
argument_list|()
condition|)
comment|// New File
block|{
try|try
init|(
name|OutputStream
name|stream
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|localFile
operator|.
name|toPath
argument_list|()
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|inputContext
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// TODO: a bad deployment shouldn't delete an existing file - do we need to write to a temporary location first?
name|long
name|expectedContentLength
init|=
name|inputContext
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|long
name|actualContentLength
init|=
name|localFile
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// length of -1 is given for a chunked request or unknown length, in which case we accept what was uploaded
if|if
condition|(
name|expectedContentLength
operator|>=
literal|0
operator|&&
name|expectedContentLength
operator|!=
name|actualContentLength
condition|)
block|{
name|String
name|msg
init|=
literal|"Content Header length was "
operator|+
name|expectedContentLength
operator|+
literal|" but was "
operator|+
name|actualContentLength
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Upload failed: {}"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|msg
argument_list|)
throw|;
block|}
name|queueRepositoryTask
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"File '{}{}(current user '{}')"
argument_list|,
name|resource
operator|.
name|getDisplayName
argument_list|()
argument_list|,
operator|(
name|exists
condition|?
literal|"' modified "
else|:
literal|"' created "
operator|)
argument_list|,
name|this
operator|.
name|principal
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|resource
argument_list|,
name|exists
condition|?
name|AuditEvent
operator|.
name|MODIFY_FILE
else|:
name|AuditEvent
operator|.
name|CREATE_FILE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|inputContext
operator|.
name|hasStream
argument_list|()
operator|&&
name|isCollection
argument_list|()
condition|)
comment|// New directory
block|{
name|localFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Directory '{}' (current user '{}')"
argument_list|,
name|resource
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|this
operator|.
name|principal
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|resource
argument_list|,
name|AuditEvent
operator|.
name|CREATE_DIR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Could not write member "
operator|+
name|resource
operator|.
name|getResourcePath
argument_list|()
operator|+
literal|" at "
operator|+
name|getResourcePath
argument_list|()
operator|+
literal|" as this is not a DAV collection"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DavResourceIterator
name|getMembers
parameter_list|()
block|{
name|List
argument_list|<
name|DavResource
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|exists
argument_list|()
operator|&&
name|isCollection
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|item
range|:
name|localResource
operator|.
name|list
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|startsWith
argument_list|(
name|HIDDEN_PATH_PREFIX
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|+
literal|'/'
operator|+
name|item
decl_stmt|;
name|DavResourceLocator
name|resourceLocator
init|=
name|locator
operator|.
name|getFactory
argument_list|()
operator|.
name|createResourceLocator
argument_list|(
name|locator
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DavResource
name|resource
init|=
name|factory
operator|.
name|createResource
argument_list|(
name|resourceLocator
argument_list|,
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Resource '{}' retrieved by '{}'"
argument_list|,
name|item
argument_list|,
name|this
operator|.
name|principal
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
comment|// Should not occur
block|}
block|}
block|}
return|return
operator|new
name|DavResourceIteratorImpl
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMember
parameter_list|(
name|DavResource
name|member
parameter_list|)
throws|throws
name|DavException
block|{
name|File
name|resource
init|=
name|checkDavResourceIsArchivaDavResource
argument_list|(
name|member
argument_list|)
operator|.
name|getLocalResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|resource
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|resource
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not remove directory"
argument_list|)
throw|;
block|}
name|triggerAuditEvent
argument_list|(
name|member
argument_list|,
name|AuditEvent
operator|.
name|REMOVE_DIR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not remove file"
argument_list|)
throw|;
block|}
name|triggerAuditEvent
argument_list|(
name|member
argument_list|,
name|AuditEvent
operator|.
name|REMOVE_FILE
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"{}{}' removed (current user '{}')"
argument_list|,
operator|(
name|resource
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"Directory '"
else|:
literal|"File '"
operator|)
argument_list|,
name|member
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|this
operator|.
name|principal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|DavResource
name|member
parameter_list|,
name|String
name|event
parameter_list|)
throws|throws
name|DavException
block|{
name|String
name|path
init|=
name|logicalResource
operator|+
literal|"/"
operator|+
name|member
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|ArchivaDavResource
name|resource
init|=
name|checkDavResourceIsArchivaDavResource
argument_list|(
name|member
argument_list|)
decl_stmt|;
name|AuditEvent
name|auditEvent
init|=
operator|new
name|AuditEvent
argument_list|(
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|resource
operator|.
name|principal
argument_list|,
name|path
argument_list|,
name|event
argument_list|)
decl_stmt|;
name|auditEvent
operator|.
name|setRemoteIP
argument_list|(
name|resource
operator|.
name|remoteAddr
argument_list|)
expr_stmt|;
for|for
control|(
name|AuditListener
name|listener
range|:
name|auditListeners
control|)
block|{
name|listener
operator|.
name|auditEvent
argument_list|(
name|auditEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|DavResource
name|destination
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Resource to copy does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|ArchivaDavResource
name|resource
init|=
name|checkDavResourceIsArchivaDavResource
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCollection
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|moveDirectory
argument_list|(
name|getLocalResource
argument_list|()
argument_list|,
name|resource
operator|.
name|getLocalResource
argument_list|()
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|remoteAddr
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|logicalResource
argument_list|,
name|AuditEvent
operator|.
name|MOVE_DIRECTORY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|moveFile
argument_list|(
name|getLocalResource
argument_list|()
argument_list|,
name|resource
operator|.
name|getLocalResource
argument_list|()
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|remoteAddr
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|logicalResource
argument_list|,
name|AuditEvent
operator|.
name|MOVE_FILE
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"{}{}' moved to '{}' (current user '{}')"
argument_list|,
operator|(
name|isCollection
argument_list|()
condition|?
literal|"Directory '"
else|:
literal|"File '"
operator|)
argument_list|,
name|getLocalResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|destination
argument_list|,
name|this
operator|.
name|principal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|DavResource
name|destination
parameter_list|,
name|boolean
name|shallow
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Resource to copy does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|shallow
operator|&&
name|isCollection
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|DavServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Unable to perform shallow copy for collection"
argument_list|)
throw|;
block|}
try|try
block|{
name|ArchivaDavResource
name|resource
init|=
name|checkDavResourceIsArchivaDavResource
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCollection
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|getLocalResource
argument_list|()
argument_list|,
name|resource
operator|.
name|getLocalResource
argument_list|()
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|remoteAddr
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|logicalResource
argument_list|,
name|AuditEvent
operator|.
name|COPY_DIRECTORY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|getLocalResource
argument_list|()
argument_list|,
name|resource
operator|.
name|getLocalResource
argument_list|()
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|remoteAddr
argument_list|,
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|logicalResource
argument_list|,
name|AuditEvent
operator|.
name|COPY_FILE
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"{}{}' copied to '{}' (current user '{)')"
argument_list|,
operator|(
name|isCollection
argument_list|()
condition|?
literal|"Directory '"
else|:
literal|"File '"
operator|)
argument_list|,
name|getLocalResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|destination
argument_list|,
name|this
operator|.
name|principal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLockable
parameter_list|(
name|Type
name|type
parameter_list|,
name|Scope
name|scope
parameter_list|)
block|{
return|return
name|Type
operator|.
name|WRITE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|Scope
operator|.
name|EXCLUSIVE
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasLock
parameter_list|(
name|Type
name|type
parameter_list|,
name|Scope
name|scope
parameter_list|)
block|{
return|return
name|getLock
argument_list|(
name|type
argument_list|,
name|scope
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveLock
name|getLock
parameter_list|(
name|Type
name|type
parameter_list|,
name|Scope
name|scope
parameter_list|)
block|{
name|ActiveLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exists
argument_list|()
operator|&&
name|Type
operator|.
name|WRITE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|Scope
operator|.
name|EXCLUSIVE
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
condition|)
block|{
name|lock
operator|=
name|lockManager
operator|.
name|getLock
argument_list|(
name|type
argument_list|,
name|scope
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveLock
index|[]
name|getLocks
parameter_list|()
block|{
name|ActiveLock
name|writeLock
init|=
name|getLock
argument_list|(
name|Type
operator|.
name|WRITE
argument_list|,
name|Scope
operator|.
name|EXCLUSIVE
argument_list|)
decl_stmt|;
return|return
operator|(
name|writeLock
operator|!=
literal|null
operator|)
condition|?
operator|new
name|ActiveLock
index|[]
block|{
name|writeLock
block|}
else|:
operator|new
name|ActiveLock
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveLock
name|lock
parameter_list|(
name|LockInfo
name|lockInfo
parameter_list|)
throws|throws
name|DavException
block|{
name|ActiveLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isLockable
argument_list|(
name|lockInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|lockInfo
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|lock
operator|=
name|lockManager
operator|.
name|createLock
argument_list|(
name|lockInfo
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|DavServletResponse
operator|.
name|SC_PRECONDITION_FAILED
argument_list|,
literal|"Unsupported lock type or scope."
argument_list|)
throw|;
block|}
return|return
name|lock
return|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveLock
name|refreshLock
parameter_list|(
name|LockInfo
name|lockInfo
parameter_list|,
name|String
name|lockToken
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|DavServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
name|ActiveLock
name|lock
init|=
name|getLock
argument_list|(
name|lockInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|lockInfo
operator|.
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|DavServletResponse
operator|.
name|SC_PRECONDITION_FAILED
argument_list|,
literal|"No lock with the given type/scope present on resource "
operator|+
name|getResourcePath
argument_list|()
argument_list|)
throw|;
block|}
name|lock
operator|=
name|lockManager
operator|.
name|refreshLock
argument_list|(
name|lockInfo
argument_list|,
name|lockToken
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|(
name|String
name|lockToken
parameter_list|)
throws|throws
name|DavException
block|{
name|ActiveLock
name|lock
init|=
name|getLock
argument_list|(
name|Type
operator|.
name|WRITE
argument_list|,
name|Scope
operator|.
name|EXCLUSIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_PRECONDITION_FAILED
argument_list|)
throw|;
block|}
if|else if
condition|(
name|lock
operator|.
name|isLockedByToken
argument_list|(
name|lockToken
argument_list|)
condition|)
block|{
name|lockManager
operator|.
name|releaseLock
argument_list|(
name|lockToken
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|DavServletResponse
operator|.
name|SC_LOCKED
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLockManager
parameter_list|(
name|LockManager
name|lockManager
parameter_list|)
block|{
name|this
operator|.
name|lockManager
operator|=
name|lockManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DavResourceFactory
name|getFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
annotation|@
name|Override
specifier|public
name|DavSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
comment|/**      * Fill the set of properties      */
specifier|protected
name|DavPropertySet
name|initProperties
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exists
argument_list|()
condition|)
block|{
name|properties
operator|=
operator|new
name|DavPropertySet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|properties
return|;
block|}
name|DavPropertySet
name|properties
init|=
operator|new
name|DavPropertySet
argument_list|()
decl_stmt|;
comment|// set (or reset) fundamental properties
if|if
condition|(
name|getDisplayName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|add
argument_list|(
operator|new
name|DefaultDavProperty
argument_list|(
name|DavPropertyName
operator|.
name|DISPLAYNAME
argument_list|,
name|getDisplayName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCollection
argument_list|()
condition|)
block|{
name|properties
operator|.
name|add
argument_list|(
operator|new
name|ResourceType
argument_list|(
name|ResourceType
operator|.
name|COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Windows XP support
name|properties
operator|.
name|add
argument_list|(
operator|new
name|DefaultDavProperty
argument_list|(
name|DavPropertyName
operator|.
name|ISCOLLECTION
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|add
argument_list|(
operator|new
name|ResourceType
argument_list|(
name|ResourceType
operator|.
name|DEFAULT_RESOURCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Windows XP support
name|properties
operator|.
name|add
argument_list|(
operator|new
name|DefaultDavProperty
argument_list|(
name|DavPropertyName
operator|.
name|ISCOLLECTION
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Need to get the ISO8601 date for properties
name|DateTime
name|dt
init|=
operator|new
name|DateTime
argument_list|(
name|localResource
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
name|DateTimeFormatter
name|fmt
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|String
name|modifiedDate
init|=
name|fmt
operator|.
name|print
argument_list|(
name|dt
argument_list|)
decl_stmt|;
name|properties
operator|.
name|add
argument_list|(
operator|new
name|DefaultDavProperty
argument_list|(
name|DavPropertyName
operator|.
name|GETLASTMODIFIED
argument_list|,
name|modifiedDate
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
operator|new
name|DefaultDavProperty
argument_list|(
name|DavPropertyName
operator|.
name|CREATIONDATE
argument_list|,
name|modifiedDate
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
operator|new
name|DefaultDavProperty
argument_list|(
name|DavPropertyName
operator|.
name|GETCONTENTLENGTH
argument_list|,
name|localResource
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|properties
return|;
block|}
specifier|private
name|ArchivaDavResource
name|checkDavResourceIsArchivaDavResource
parameter_list|(
name|DavResource
name|resource
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
operator|!
operator|(
name|resource
operator|instanceof
name|ArchivaDavResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"DavResource is not instance of ArchivaDavResource"
argument_list|)
throw|;
block|}
return|return
operator|(
name|ArchivaDavResource
operator|)
name|resource
return|;
block|}
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|String
name|remoteIP
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|AuditEvent
name|event
init|=
operator|new
name|AuditEvent
argument_list|(
name|repositoryId
argument_list|,
name|principal
argument_list|,
name|resource
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|event
operator|.
name|setRemoteIP
argument_list|(
name|remoteIP
argument_list|)
expr_stmt|;
for|for
control|(
name|AuditListener
name|listener
range|:
name|auditListeners
control|)
block|{
name|listener
operator|.
name|auditEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|queueRepositoryTask
parameter_list|(
name|File
name|localFile
parameter_list|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setResourceFile
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|task
operator|.
name|setUpdateRelatedArtifacts
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to queue repository task to execute consumers on resource file ['"
operator|+
name|localFile
operator|.
name|getName
argument_list|()
operator|+
literal|"']."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

