begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|WebdavRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|WebdavMethodUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|RepositoryPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|xwork
operator|.
name|filter
operator|.
name|authentication
operator|.
name|HttpAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|policy
operator|.
name|MustChangePasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|policy
operator|.
name|AccountLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusToSpringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|WebApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:james@atlassian.com">James William Dumay</a>  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaDavSessionProvider
implements|implements
name|DavSessionProvider
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaDavSessionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SecuritySystem
name|securitySystem
decl_stmt|;
specifier|private
name|HttpAuthenticator
name|httpAuth
decl_stmt|;
specifier|public
name|ArchivaDavSessionProvider
parameter_list|(
name|WebApplicationContext
name|applicationContext
parameter_list|)
block|{
name|securitySystem
operator|=
operator|(
name|SecuritySystem
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|PlexusToSpringUtils
operator|.
name|buildSpringId
argument_list|(
name|SecuritySystem
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
name|httpAuth
operator|=
operator|(
name|HttpAuthenticator
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|PlexusToSpringUtils
operator|.
name|buildSpringId
argument_list|(
name|HttpAuthenticator
operator|.
name|ROLE
argument_list|,
literal|"basic"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|attachSession
parameter_list|(
name|WebdavRequest
name|request
parameter_list|)
throws|throws
name|DavException
block|{
specifier|final
name|String
name|repositoryId
init|=
name|RepositoryPathUtil
operator|.
name|getRepositoryName
argument_list|(
name|removeContextPath
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|isAuthenticated
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|)
return|;
block|}
specifier|public
name|void
name|releaseSession
parameter_list|(
name|WebdavRequest
name|webdavRequest
parameter_list|)
block|{
block|}
specifier|protected
name|boolean
name|isAuthenticated
parameter_list|(
name|WebdavRequest
name|request
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|DavException
block|{
comment|// Authentication Tests.
try|try
block|{
name|AuthenticationResult
name|result
init|=
name|httpAuth
operator|.
name|getAuthenticationResult
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
operator|!
name|result
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
comment|//Unfortunatly, the DavSessionProvider does not pass in the response
name|httpAuth
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You are not authenticated"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccountLockedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"User account is locked."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MustChangePasswordException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You must change your password."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|isAuthorized
parameter_list|(
name|WebdavRequest
name|request
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|DavException
block|{
comment|// Authorization Tests.
specifier|final
name|boolean
name|isWriteRequest
init|=
name|WebdavMethodUtil
operator|.
name|isWriteMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
name|SecuritySession
name|securitySession
init|=
name|httpAuth
operator|.
name|getSecuritySession
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|permission
init|=
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_ACCESS
decl_stmt|;
if|if
condition|(
name|isWriteRequest
condition|)
block|{
name|permission
operator|=
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_UPLOAD
expr_stmt|;
block|}
comment|//DavServletRequestInfo requestInfo = new DavServletRequestInfo(request);
name|AuthorizationResult
name|authzResult
init|=
name|securitySystem
operator|.
name|authorize
argument_list|(
name|securitySession
argument_list|,
name|permission
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authzResult
operator|.
name|isAuthorized
argument_list|()
condition|)
block|{
if|if
condition|(
name|authzResult
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Authorization Denied [ip="
operator|+
name|request
operator|.
name|getRemoteAddr
argument_list|()
operator|+
literal|",isWriteRequest="
operator|+
name|isWriteRequest
operator|+
literal|",permission="
operator|+
name|permission
operator|+
literal|",repo="
operator|+
name|repositoryId
operator|+
literal|"] : "
operator|+
name|authzResult
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|,
literal|"Access denied for repository "
operator|+
name|repositoryId
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Fatal Authorization Subsystem Error."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|removeContextPath
parameter_list|(
specifier|final
name|DavServletRequest
name|request
parameter_list|)
block|{
name|String
name|path
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|String
name|ctx
init|=
name|request
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|ctx
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|ctx
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

