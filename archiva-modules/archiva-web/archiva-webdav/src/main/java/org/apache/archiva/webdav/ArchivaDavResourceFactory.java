begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|Auditable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|IndexMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|IndexMergerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|TemporaryGroupIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|RepositorySearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|metadata
operator|.
name|MavenMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ProxyDownloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|RepositoryProxyConnectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|LegacyPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|RepositoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|ServletAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|RepositoryPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|TemporaryGroupIndexSessionCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|WebdavMethodUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|SimpleLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DistributionManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Relocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|ChecksumFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|DigesterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|UnauthorizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|policy
operator|.
name|AccountLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|policy
operator|.
name|MustChangePasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|filter
operator|.
name|authentication
operator|.
name|HttpAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"davResourceFactory#archiva"
argument_list|)
specifier|public
class|class
name|ArchivaDavResourceFactory
implements|implements
name|DavResourceFactory
implements|,
name|Auditable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROXIED_SUFFIX
init|=
literal|" (proxied)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT_METHOD
init|=
literal|"PUT"
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaDavResourceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|AuditListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
comment|/**      *      */
specifier|private
name|RepositoryRequest
name|repositoryRequest
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"repositoryProxyConnectors#default"
argument_list|)
specifier|private
name|RepositoryProxyConnectors
name|connectors
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|MimeTypes
name|mimeTypes
decl_stmt|;
comment|/**      *      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|ServletAuthenticator
name|servletAuth
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"httpAuthenticator#basic"
argument_list|)
specifier|private
name|HttpAuthenticator
name|httpAuth
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|IndexMerger
name|indexMerger
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositorySearch
name|repositorySearch
decl_stmt|;
comment|/**      * Lock Manager - use simple implementation from JackRabbit      */
specifier|private
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|SimpleLockManager
argument_list|()
decl_stmt|;
comment|/**      *      */
specifier|private
name|ChecksumFile
name|checksum
decl_stmt|;
comment|/**      *      */
specifier|private
name|Digester
name|digestSha1
decl_stmt|;
comment|/**      *      */
specifier|private
name|Digester
name|digestMd5
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|RepositoryArchivaTaskScheduler
name|scheduler
decl_stmt|;
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|ArchivaDavResourceFactory
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|PlexusSisuBridge
name|plexusSisuBridge
parameter_list|,
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
throws|throws
name|PlexusSisuBridgeException
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|ChecksumFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|digestMd5
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|Digester
operator|.
name|class
argument_list|,
literal|"md5"
argument_list|)
expr_stmt|;
name|this
operator|.
name|digestSha1
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|Digester
operator|.
name|class
argument_list|,
literal|"sha1"
argument_list|)
expr_stmt|;
name|repositoryRequest
operator|=
operator|new
name|RepositoryRequest
argument_list|(
operator|new
name|LegacyPathParser
argument_list|(
name|archivaConfiguration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|DavResource
name|createResource
parameter_list|(
specifier|final
name|DavResourceLocator
name|locator
parameter_list|,
specifier|final
name|DavServletRequest
name|request
parameter_list|,
specifier|final
name|DavServletResponse
name|response
parameter_list|)
throws|throws
name|DavException
block|{
name|ArchivaDavResourceLocator
name|archivaLocator
init|=
name|checkLocatorIsInstanceOfRepositoryLocator
argument_list|(
name|locator
argument_list|)
decl_stmt|;
name|RepositoryGroupConfiguration
name|repoGroupConfig
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
operator|.
name|get
argument_list|(
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|activePrincipal
init|=
name|getActivePrincipal
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resourcesInAbsolutePath
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|readMethod
init|=
name|WebdavMethodUtil
operator|.
name|isReadMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
name|DavResource
name|resource
decl_stmt|;
if|if
condition|(
name|repoGroupConfig
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|readMethod
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|,
literal|"Write method not allowed for repository groups."
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Repository group '{}' accessed by '{}"
argument_list|,
name|repoGroupConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
comment|// handle browse requests for virtual repos
if|if
condition|(
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|archivaLocator
operator|.
name|getOrigResourcePath
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|getResource
argument_list|(
name|request
argument_list|,
name|repoGroupConfig
operator|.
name|getRepositories
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// make a copy to avoid potential concurrent modifications (eg. by configuration)
comment|// TODO: ultimately, locking might be more efficient than copying in this fashion since updates are
comment|//  infrequent
name|List
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|repoGroupConfig
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
name|resource
operator|=
name|processRepositoryGroup
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|repositories
argument_list|,
name|activePrincipal
argument_list|,
name|resourcesInAbsolutePath
argument_list|,
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ManagedRepositoryContent
name|managedRepository
init|=
literal|null
decl_stmt|;
try|try
block|{
name|managedRepository
operator|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Invalid repository: "
operator|+
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Managed repository '{}' accessed by '{}'"
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
name|resource
operator|=
name|processRepository
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|activePrincipal
argument_list|,
name|managedRepository
argument_list|)
expr_stmt|;
name|String
name|logicalResource
init|=
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|resourcesInAbsolutePath
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|requestedResource
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
comment|// MRM-872 : merge all available metadata
comment|// merge metadata only when requested via the repo group
if|if
condition|(
operator|(
name|repositoryRequest
operator|.
name|isMetadata
argument_list|(
name|requestedResource
argument_list|)
operator|||
name|repositoryRequest
operator|.
name|isMetadataSupportFile
argument_list|(
name|requestedResource
argument_list|)
operator|)
operator|&&
name|repoGroupConfig
operator|!=
literal|null
condition|)
block|{
comment|// this should only be at the project level not version level!
if|if
condition|(
name|isProjectReference
argument_list|(
name|requestedResource
argument_list|)
condition|)
block|{
name|String
name|artifactId
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|requestedResource
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|artifactId
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|artifactId
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|ArchivaDavResource
name|res
init|=
operator|(
name|ArchivaDavResource
operator|)
name|resource
decl_stmt|;
name|String
name|filePath
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|res
operator|.
name|getLocalResource
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|filePath
operator|=
name|filePath
operator|+
literal|"/maven-metadata-"
operator|+
name|repoGroupConfig
operator|.
name|getId
argument_list|()
operator|+
literal|".xml"
expr_stmt|;
comment|// for MRM-872 handle checksums of the merged metadata files
if|if
condition|(
name|repositoryRequest
operator|.
name|isSupportFile
argument_list|(
name|requestedResource
argument_list|)
condition|)
block|{
name|File
name|metadataChecksum
init|=
operator|new
name|File
argument_list|(
name|filePath
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|requestedResource
argument_list|,
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataChecksum
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|metadataChecksum
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|resourcesInAbsolutePath
operator|!=
literal|null
operator|&&
name|resourcesInAbsolutePath
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// merge the metadata of all repos under group
name|ArchivaRepositoryMetadata
name|mergedMetadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|resourceAbsPath
range|:
name|resourcesInAbsolutePath
control|)
block|{
try|try
block|{
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|resourceAbsPath
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|repoMetadata
init|=
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|mergedMetadata
operator|=
name|RepositoryMetadataMerge
operator|.
name|merge
argument_list|(
name|mergedMetadata
argument_list|,
name|repoMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while reading metadata file."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while merging metadata file."
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|File
name|resourceFile
init|=
name|writeMergedMetadataToFile
argument_list|(
name|mergedMetadata
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while writing metadata file."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while generating checksum files."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DigesterException
name|de
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while generating checksum files."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|setHeaders
argument_list|(
name|response
argument_list|,
name|locator
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// compatibility with MRM-440 to ensure browsing the repository works ok
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BrowserRedirectException
argument_list|(
name|resource
operator|.
name|getHref
argument_list|()
argument_list|)
throw|;
block|}
name|resource
operator|.
name|addLockManager
argument_list|(
name|lockManager
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|private
name|DavResource
name|processRepositoryGroup
parameter_list|(
specifier|final
name|DavServletRequest
name|request
parameter_list|,
name|ArchivaDavResourceLocator
name|archivaLocator
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
name|String
name|activePrincipal
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|resourcesInAbsolutePath
parameter_list|,
name|String
name|repositoryGroupId
parameter_list|)
throws|throws
name|DavException
block|{
name|DavResource
name|resource
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|DavException
argument_list|>
name|storedExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|DavException
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|pathInfo
init|=
name|StringUtils
operator|.
name|removeEnd
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|rootPath
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|pathInfo
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|rootPath
argument_list|,
literal|"/.indexer"
argument_list|)
condition|)
block|{
comment|// we are in the case of index file request
name|String
name|requestedFileName
init|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|pathInfo
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|File
name|temporaryIndexDirectory
init|=
name|buildMergedIndexDirectory
argument_list|(
name|repositories
argument_list|,
name|activePrincipal
argument_list|,
name|request
argument_list|,
name|repositoryGroupId
argument_list|)
decl_stmt|;
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|temporaryIndexDirectory
argument_list|,
name|requestedFileName
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|requestedFileName
argument_list|,
literal|null
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|repositoryId
range|:
name|repositories
control|)
block|{
name|ManagedRepositoryContent
name|managedRepository
decl_stmt|;
try|try
block|{
name|managedRepository
operator|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|DavResource
name|updatedResource
init|=
name|processRepository
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|activePrincipal
argument_list|,
name|managedRepository
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|updatedResource
expr_stmt|;
block|}
name|String
name|logicalResource
init|=
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|archivaLocator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logicalResource
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|logicalResource
operator|=
name|logicalResource
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|resourcesInAbsolutePath
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
name|storedExceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|storedExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// MRM-1232
for|for
control|(
name|DavException
name|e
range|:
name|storedExceptions
control|)
block|{
if|if
condition|(
literal|401
operator|==
name|e
operator|.
name|getErrorCode
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
block|}
return|return
name|resource
return|;
block|}
specifier|private
name|DavResource
name|processRepository
parameter_list|(
specifier|final
name|DavServletRequest
name|request
parameter_list|,
name|ArchivaDavResourceLocator
name|archivaLocator
parameter_list|,
name|String
name|activePrincipal
parameter_list|,
name|ManagedRepositoryContent
name|managedRepository
parameter_list|)
throws|throws
name|DavException
block|{
name|DavResource
name|resource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|archivaLocator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|path
argument_list|,
name|managedRepository
operator|.
name|getRepository
argument_list|()
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
if|if
condition|(
name|WebdavMethodUtil
operator|.
name|isReadMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|archivaLocator
operator|.
name|getHref
argument_list|(
literal|false
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|!
name|resourceFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// force a resource not found
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Resource does not exist"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|boolean
name|previouslyExisted
init|=
name|resourceFile
operator|.
name|exists
argument_list|()
decl_stmt|;
comment|// Attempt to fetch the resource from any defined proxy.
name|boolean
name|fromProxy
init|=
name|fetchContentFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|request
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
comment|// At this point the incoming request can either be in default or
comment|// legacy layout format.
try|try
block|{
comment|// Perform an adjustment of the resource to the managed
comment|// repository expected path.
name|String
name|localResourcePath
init|=
name|repositoryRequest
operator|.
name|toNativePath
argument_list|(
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|managedRepository
argument_list|)
decl_stmt|;
name|resourceFile
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|localResourcePath
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getRepository
argument_list|()
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|resourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fromProxy
condition|)
block|{
name|String
name|event
init|=
operator|(
name|previouslyExisted
condition|?
name|AuditEvent
operator|.
name|MODIFY_FILE
else|:
name|AuditEvent
operator|.
name|CREATE_FILE
operator|)
operator|+
name|PROXIED_SUFFIX
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Proxied artifact '"
operator|+
name|resourceFile
operator|.
name|getName
argument_list|()
operator|+
literal|"' in repository '"
operator|+
name|managedRepository
operator|.
name|getId
argument_list|()
operator|+
literal|"' (current user '"
operator|+
name|activePrincipal
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
name|triggerAuditEvent
argument_list|(
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|event
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Resource does not exist"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|HTTP_PUT_METHOD
argument_list|)
condition|)
block|{
name|String
name|resourcePath
init|=
name|logicalResource
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// check if target repo is enabled for releases
comment|// we suppose that release-artifacts can be deployed only to repos enabled for releases
if|if
condition|(
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|isReleases
argument_list|()
operator|&&
operator|!
name|repositoryRequest
operator|.
name|isMetadata
argument_list|(
name|resourcePath
argument_list|)
operator|&&
operator|!
name|repositoryRequest
operator|.
name|isSupportFile
argument_list|(
name|resourcePath
argument_list|)
condition|)
block|{
name|ArtifactReference
name|artifact
init|=
literal|null
decl_stmt|;
try|try
block|{
name|artifact
operator|=
name|managedRepository
operator|.
name|toArtifactReference
argument_list|(
name|resourcePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// check if artifact already exists and if artifact re-deployment to the repository is allowed
if|if
condition|(
name|managedRepository
operator|.
name|hasContent
argument_list|(
name|artifact
argument_list|)
operator|&&
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|isBlockRedeployments
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overwriting released artifacts in repository '"
operator|+
name|managedRepository
operator|.
name|getId
argument_list|()
operator|+
literal|"' is not allowed."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CONFLICT
argument_list|,
literal|"Overwriting released artifacts is not allowed."
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Artifact path '"
operator|+
name|resourcePath
operator|+
literal|"' is invalid."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*                  * Create parent directories that don't exist when writing a file This actually makes this                  * implementation not compliant to the WebDAV RFC - but we have enough knowledge about how the                  * collection is being used to do this reasonably and some versions of Maven's WebDAV don't correctly                  * create the collections themselves.                  */
name|File
name|rootDirectory
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
name|rootDirectory
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|destDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|relPath
init|=
name|PathUtil
operator|.
name|getRelative
argument_list|(
name|rootDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|destDir
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Creating destination directory '{}' (current user '{}')"
argument_list|,
name|destDir
operator|.
name|getName
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|relPath
argument_list|,
name|AuditEvent
operator|.
name|CREATE_DIR
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|resource
return|;
block|}
specifier|public
name|DavResource
name|createResource
parameter_list|(
specifier|final
name|DavResourceLocator
name|locator
parameter_list|,
specifier|final
name|DavSession
name|davSession
parameter_list|)
throws|throws
name|DavException
block|{
name|ArchivaDavResourceLocator
name|archivaLocator
init|=
name|checkLocatorIsInstanceOfRepositoryLocator
argument_list|(
name|locator
argument_list|)
decl_stmt|;
name|ManagedRepositoryContent
name|managedRepository
decl_stmt|;
try|try
block|{
name|managedRepository
operator|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Invalid repository: "
operator|+
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|logicalResource
init|=
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logicalResource
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|logicalResource
operator|=
name|logicalResource
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
name|DavResource
name|resource
init|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
argument_list|,
name|managedRepository
operator|.
name|getRepository
argument_list|()
argument_list|,
name|davSession
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addLockManager
argument_list|(
name|lockManager
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|private
name|boolean
name|fetchContentFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|LogicalResource
name|resource
parameter_list|)
throws|throws
name|DavException
block|{
name|String
name|path
init|=
name|resource
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryRequest
operator|.
name|isSupportFile
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|File
name|proxiedFile
init|=
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|proxiedFile
operator|!=
literal|null
operator|)
return|;
block|}
comment|// Is it a Metadata resource?
if|if
condition|(
name|repositoryRequest
operator|.
name|isDefault
argument_list|(
name|path
argument_list|)
operator|&&
name|repositoryRequest
operator|.
name|isMetadata
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|connectors
operator|.
name|fetchMetatadaFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|// Not any of the above? Then it's gotta be an artifact reference.
try|try
block|{
comment|// Get the artifact reference in a layout neutral way.
name|ArtifactReference
name|artifact
init|=
name|repositoryRequest
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|applyServerSideRelocation
argument_list|(
name|managedRepository
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setPath
argument_list|(
name|managedRepository
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Proxied artifact '"
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getVersion
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|proxiedFile
operator|!=
literal|null
operator|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* eat it */
block|}
catch|catch
parameter_list|(
name|ProxyDownloadException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Unable to fetch artifact resource."
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * A relocation capable client will request the POM prior to the artifact, and will then read meta-data and do      * client side relocation. A simplier client (like maven 1) will only request the artifact and not use the      * metadatas.      *<p/>      * For such clients, archiva does server-side relocation by reading itself the&lt;relocation&gt; element in      * metadatas and serving the expected artifact.      */
specifier|protected
name|void
name|applyServerSideRelocation
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
throws|throws
name|ProxyDownloadException
block|{
if|if
condition|(
literal|"pom"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Build the artifact POM reference
name|ArtifactReference
name|pomReference
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|pomReference
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|pomReference
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|pomReference
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|pomReference
operator|.
name|setType
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
comment|// Get the artifact POM from proxied repositories if needed
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|pomReference
argument_list|)
expr_stmt|;
comment|// Open and read the POM from the managed repo
name|File
name|pom
init|=
name|managedRepository
operator|.
name|toFile
argument_list|(
name|pomReference
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pom
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// MavenXpp3Reader leaves the file open, so we need to close it ourselves.
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|pom
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
name|model
operator|=
operator|new
name|MavenXpp3Reader
argument_list|()
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|DistributionManagement
name|dist
init|=
name|model
operator|.
name|getDistributionManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|dist
operator|!=
literal|null
condition|)
block|{
name|Relocation
name|relocation
init|=
name|dist
operator|.
name|getRelocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|relocation
operator|!=
literal|null
condition|)
block|{
comment|// artifact is relocated : update the repositoryPath
if|if
condition|(
name|relocation
operator|.
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setGroupId
argument_list|(
name|relocation
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relocation
operator|.
name|getArtifactId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setArtifactId
argument_list|(
name|relocation
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relocation
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setVersion
argument_list|(
name|relocation
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Artifact has no POM in repo : ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Unable to read POM : ignore.
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
comment|// Invalid POM : ignore
block|}
block|}
comment|// TODO: remove?
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|String
name|remoteIP
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|principal
parameter_list|)
block|{
name|AuditEvent
name|event
init|=
operator|new
name|AuditEvent
argument_list|(
name|repositoryId
argument_list|,
name|principal
argument_list|,
name|resource
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|event
operator|.
name|setRemoteIP
argument_list|(
name|remoteIP
argument_list|)
expr_stmt|;
for|for
control|(
name|AuditListener
name|listener
range|:
name|auditListeners
control|)
block|{
name|listener
operator|.
name|auditEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addAuditListener
parameter_list|(
name|AuditListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearAuditListeners
parameter_list|()
block|{
name|this
operator|.
name|auditListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeAuditListener
parameter_list|(
name|AuditListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHeaders
parameter_list|(
name|DavServletResponse
name|response
parameter_list|,
name|DavResourceLocator
name|locator
parameter_list|,
name|DavResource
name|resource
parameter_list|)
block|{
comment|// [MRM-503] - Metadata file need Pragma:no-cache response
comment|// header.
if|if
condition|(
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/maven-metadata.xml"
argument_list|)
condition|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
block|}
comment|// We need to specify this so connecting wagons can work correctly
name|response
operator|.
name|addDateHeader
argument_list|(
literal|"last-modified"
argument_list|,
name|resource
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: [MRM-524] determine http caching options for other types of files (artifacts, sha1, md5, snapshots)
block|}
specifier|private
name|ArchivaDavResourceLocator
name|checkLocatorIsInstanceOfRepositoryLocator
parameter_list|(
name|DavResourceLocator
name|locator
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
operator|!
operator|(
name|locator
operator|instanceof
name|ArchivaDavResourceLocator
operator|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Locator does not implement RepositoryLocator"
argument_list|)
throw|;
block|}
comment|// Hidden paths
if|if
condition|(
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ArchivaDavResource
operator|.
name|HIDDEN_PATH_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
name|ArchivaDavResourceLocator
name|archivaLocator
init|=
operator|(
name|ArchivaDavResourceLocator
operator|)
name|locator
decl_stmt|;
comment|// MRM-419 - Windows Webdav support. Should not 404 if there is no content.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|)
throw|;
block|}
return|return
name|archivaLocator
return|;
block|}
specifier|private
specifier|static
class|class
name|LogicalResource
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|public
name|LogicalResource
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isAuthorized
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|DavException
block|{
try|try
block|{
name|AuthenticationResult
name|result
init|=
name|httpAuth
operator|.
name|getAuthenticationResult
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SecuritySession
name|securitySession
init|=
name|httpAuth
operator|.
name|getSecuritySession
argument_list|(
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|servletAuth
operator|.
name|isAuthenticated
argument_list|(
name|request
argument_list|,
name|result
argument_list|)
operator|&&
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|securitySession
argument_list|,
name|repositoryId
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
comment|// safety check for MRM-911
name|String
name|guest
init|=
name|UserManager
operator|.
name|GUEST_USERNAME
decl_stmt|;
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|guest
argument_list|,
operator|(
operator|(
name|ArchivaDavResourceLocator
operator|)
name|request
operator|.
name|getRequestLocator
argument_list|()
operator|)
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You are not authenticated and authorized to access any repository."
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You are not authenticated"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MustChangePasswordException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You must change your password."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccountLockedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"User account is locked."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Fatal Authorization Subsystem Error."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DavResource
name|getResource
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
name|ArchivaDavResourceLocator
name|locator
parameter_list|,
name|String
name|groupId
parameter_list|)
throws|throws
name|DavException
block|{
name|List
argument_list|<
name|File
argument_list|>
name|mergedRepositoryContents
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// flow:
comment|// if the current user logged in has permission to any of the repositories, allow user to
comment|// browse the repo group but displaying only the repositories which the user has permission to access.
comment|// otherwise, prompt for authentication.
name|String
name|activePrincipal
init|=
name|getActivePrincipal
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|allow
init|=
name|isAllowedToContinue
argument_list|(
name|request
argument_list|,
name|repositories
argument_list|,
name|activePrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|allow
condition|)
block|{
comment|// remove last /
name|String
name|pathInfo
init|=
name|StringUtils
operator|.
name|removeEnd
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|pathInfo
argument_list|,
literal|"/.indexer"
argument_list|)
condition|)
block|{
name|File
name|mergedRepoDir
init|=
name|buildMergedIndexDirectory
argument_list|(
name|repositories
argument_list|,
name|activePrincipal
argument_list|,
name|request
argument_list|,
name|groupId
argument_list|)
decl_stmt|;
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|mergedRepoDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
name|ManagedRepositoryContent
name|managedRepository
init|=
literal|null
decl_stmt|;
try|try
block|{
name|managedRepository
operator|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Invalid managed repository<"
operator|+
name|repository
operator|+
literal|">: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Invalid managed repository<"
operator|+
name|repository
operator|+
literal|">: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// in case of group displaying index directory doesn't have sense !!
name|String
name|repoIndexDirectory
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getIndexDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|repoIndexDirectory
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|repoIndexDirectory
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|repoIndexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repoIndexDirectory
argument_list|)
condition|?
literal|".indexer"
else|:
name|repoIndexDirectory
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repoIndexDirectory
argument_list|)
condition|)
block|{
name|repoIndexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|".indexer"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|repoIndexDirectory
argument_list|)
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// for prompted authentication
if|if
condition|(
name|httpAuth
operator|.
name|getSecuritySession
argument_list|(
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|repository
argument_list|)
condition|)
block|{
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|resourceFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Repository '{}' accessed by '{}'"
argument_list|,
name|repository
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
comment|// TODO: review exception handling
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping repository '"
operator|+
name|managedRepository
operator|+
literal|"' for user '"
operator|+
name|activePrincipal
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// for the current user logged in
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|activePrincipal
argument_list|,
name|repository
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|resourceFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Repository '{}' accessed by '{}'"
argument_list|,
name|repository
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
comment|// TODO: review exception handling
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping repository '"
operator|+
name|managedRepository
operator|+
literal|"' for user '"
operator|+
name|activePrincipal
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
literal|"User not authorized."
argument_list|)
throw|;
block|}
name|ArchivaVirtualDavResource
name|resource
init|=
operator|new
name|ArchivaVirtualDavResource
argument_list|(
name|mergedRepositoryContents
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|mimeTypes
argument_list|,
name|locator
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// compatibility with MRM-440 to ensure browsing the repository group works ok
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BrowserRedirectException
argument_list|(
name|resource
operator|.
name|getHref
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|resource
return|;
block|}
specifier|protected
name|String
name|getActivePrincipal
parameter_list|(
name|DavServletRequest
name|request
parameter_list|)
block|{
name|User
name|sessionUser
init|=
name|httpAuth
operator|.
name|getSessionUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sessionUser
operator|!=
literal|null
condition|?
name|sessionUser
operator|.
name|getUsername
argument_list|()
else|:
name|UserManager
operator|.
name|GUEST_USERNAME
return|;
block|}
comment|/**      * Check if the current user is authorized to access any of the repos      *      * @param request      * @param repositories      * @param activePrincipal      * @return      */
specifier|private
name|boolean
name|isAllowedToContinue
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
name|String
name|activePrincipal
parameter_list|)
block|{
name|boolean
name|allow
init|=
literal|false
decl_stmt|;
comment|// if securitySession != null, it means that the user was prompted for authentication
if|if
condition|(
name|httpAuth
operator|.
name|getSecuritySession
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
if|if
condition|(
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|repository
argument_list|)
condition|)
block|{
name|allow
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|activePrincipal
argument_list|,
name|repository
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allow
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
return|return
name|allow
return|;
block|}
specifier|private
name|File
name|writeMergedMetadataToFile
parameter_list|(
name|ArchivaRepositoryMetadata
name|mergedMetadata
parameter_list|,
name|String
name|outputFilename
parameter_list|)
throws|throws
name|RepositoryMetadataException
throws|,
name|DigesterException
throws|,
name|IOException
block|{
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|outputFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|mergedMetadata
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
name|createChecksumFile
argument_list|(
name|outputFilename
argument_list|,
name|digestSha1
argument_list|)
expr_stmt|;
name|createChecksumFile
argument_list|(
name|outputFilename
argument_list|,
name|digestMd5
argument_list|)
expr_stmt|;
return|return
name|outputFile
return|;
block|}
specifier|private
name|void
name|createChecksumFile
parameter_list|(
name|String
name|path
parameter_list|,
name|Digester
name|digester
parameter_list|)
throws|throws
name|DigesterException
throws|,
name|IOException
block|{
name|File
name|checksumFile
init|=
operator|new
name|File
argument_list|(
name|path
operator|+
name|digester
operator|.
name|getFilenameExtension
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checksumFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|checksumFile
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|createChecksum
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|,
name|digester
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|checksumFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Checksum file is not a file."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isProjectReference
parameter_list|(
name|String
name|requestedResource
parameter_list|)
block|{
try|try
block|{
name|metadataTools
operator|.
name|toVersionedReference
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|re
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|protected
name|File
name|buildMergedIndexDirectory
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
name|String
name|activePrincipal
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|String
name|groupId
parameter_list|)
throws|throws
name|DavException
block|{
try|try
block|{
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TemporaryGroupIndex
argument_list|>
name|temporaryGroupIndexMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|TemporaryGroupIndex
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|TemporaryGroupIndexSessionCleaner
operator|.
name|TEMPORARY_INDEX_SESSION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|temporaryGroupIndexMap
operator|==
literal|null
condition|)
block|{
name|temporaryGroupIndexMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TemporaryGroupIndex
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|TemporaryGroupIndex
name|tmp
init|=
name|temporaryGroupIndexMap
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
operator|&&
name|tmp
operator|.
name|getDirectory
argument_list|()
operator|!=
literal|null
operator|&&
name|tmp
operator|.
name|getDirectory
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tmp
operator|.
name|getCreationTime
argument_list|()
operator|>
operator|(
name|indexMerger
operator|.
name|getDefaultGroupIndexTtl
argument_list|()
operator|*
literal|60
operator|*
literal|1000
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"tmp group index is too old so delete it"
argument_list|)
expr_stmt|;
name|indexMerger
operator|.
name|cleanTemporaryGroupIndex
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|tmp
operator|.
name|getDirectory
argument_list|()
return|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|authzRepos
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|activePrincipal
argument_list|,
name|repository
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|authzRepos
operator|.
name|add
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|authzRepos
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|repositorySearch
operator|.
name|getRemoteIndexingContextIds
argument_list|(
name|repository
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
comment|// TODO: review exception handling
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping repository '"
operator|+
name|repository
operator|+
literal|"' for user '"
operator|+
name|activePrincipal
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|IndexingContext
name|indexingContext
init|=
name|indexMerger
operator|.
name|buildMergedIndex
argument_list|(
name|authzRepos
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|mergedRepoDir
init|=
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|()
decl_stmt|;
name|TemporaryGroupIndex
name|temporaryGroupIndex
init|=
operator|new
name|TemporaryGroupIndex
argument_list|(
name|mergedRepoDir
argument_list|,
name|indexingContext
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCreationTime
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|temporaryGroupIndexMap
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|temporaryGroupIndex
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|TemporaryGroupIndexSessionCleaner
operator|.
name|TEMPORARY_INDEX_SESSION_KEY
argument_list|,
name|temporaryGroupIndexMap
argument_list|)
expr_stmt|;
return|return
name|mergedRepoDir
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
literal|500
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndexMergerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
literal|500
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setServletAuth
parameter_list|(
name|ServletAuthenticator
name|servletAuth
parameter_list|)
block|{
name|this
operator|.
name|servletAuth
operator|=
name|servletAuth
expr_stmt|;
block|}
specifier|public
name|void
name|setHttpAuth
parameter_list|(
name|HttpAuthenticator
name|httpAuth
parameter_list|)
block|{
name|this
operator|.
name|httpAuth
operator|=
name|httpAuth
expr_stmt|;
block|}
specifier|public
name|void
name|setScheduler
parameter_list|(
name|RepositoryArchivaTaskScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryFactory
parameter_list|(
name|RepositoryContentFactory
name|repositoryFactory
parameter_list|)
block|{
name|this
operator|.
name|repositoryFactory
operator|=
name|repositoryFactory
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryRequest
parameter_list|(
name|RepositoryRequest
name|repositoryRequest
parameter_list|)
block|{
name|this
operator|.
name|repositoryRequest
operator|=
name|repositoryRequest
expr_stmt|;
block|}
specifier|public
name|void
name|setConnectors
parameter_list|(
name|RepositoryProxyConnectors
name|connectors
parameter_list|)
block|{
name|this
operator|.
name|connectors
operator|=
name|connectors
expr_stmt|;
block|}
block|}
end_class

end_unit

