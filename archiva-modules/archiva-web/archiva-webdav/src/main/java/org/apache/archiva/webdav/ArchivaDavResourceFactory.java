begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|Auditable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|StreamingChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|IndexMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|IndexMergerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|IndexMergerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|base
operator|.
name|MergedRemoteIndexesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|base
operator|.
name|MergedRemoteIndexesTaskRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|TemporaryGroupIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|RepositorySearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|RepositorySearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|facets
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RelocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ProxyDownloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|ProxyRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|RepositoryProxyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authentication
operator|.
name|AuthenticationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|authorization
operator|.
name|UnauthorizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|integration
operator|.
name|filter
operator|.
name|authentication
operator|.
name|HttpAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|policy
operator|.
name|AccountLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|policy
operator|.
name|MustChangePasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|users
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|BaseRepositoryContentLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ReleaseScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|fs
operator|.
name|FilesystemStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|base
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|base
operator|.
name|RepositoryMetadataMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|base
operator|.
name|RepositoryMetadataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|ServletAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|TemporaryGroupIndexSessionCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|WebdavMethodUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|DavSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|lock
operator|.
name|SimpleLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"davResourceFactory#archiva"
argument_list|)
specifier|public
class|class
name|ArchivaDavResourceFactory
implements|implements
name|DavResourceFactory
implements|,
name|Auditable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROXIED_SUFFIX
init|=
literal|" (proxied)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT_METHOD
init|=
literal|"PUT"
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaDavResourceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ProxyRegistry
name|proxyRegistry
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServletAuthenticator
name|servletAuth
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"httpAuthenticator#basic"
argument_list|)
specifier|private
name|HttpAuthenticator
name|httpAuth
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|IndexMerger
name|indexMerger
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositorySearch
name|repositorySearch
decl_stmt|;
comment|/**      * Lock Manager - use simple implementation from JackRabbit      */
specifier|private
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|SimpleLockManager
argument_list|()
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|RepositoryArchivaTaskScheduler
name|scheduler
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"fileLockManager#default"
argument_list|)
specifier|private
name|FileLockManager
name|fileLockManager
decl_stmt|;
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|ArchivaDavResourceFactory
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
throws|throws
name|PlexusSisuBridgeException
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
block|}
annotation|@
name|Override
specifier|public
name|DavResource
name|createResource
parameter_list|(
specifier|final
name|DavResourceLocator
name|locator
parameter_list|,
specifier|final
name|DavServletRequest
name|request
parameter_list|,
specifier|final
name|DavServletResponse
name|response
parameter_list|)
throws|throws
name|DavException
block|{
specifier|final
name|ArchivaDavResourceLocator
name|archivaLocator
init|=
name|checkLocatorIsInstanceOfRepositoryLocator
argument_list|(
name|locator
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sRepoId
init|=
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
decl_stmt|;
name|RepositoryGroup
name|repoGroup
init|=
name|repositoryRegistry
operator|.
name|getRepositoryGroup
argument_list|(
name|sRepoId
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isGroupRepo
init|=
name|repoGroup
operator|!=
literal|null
decl_stmt|;
name|String
name|activePrincipal
init|=
name|getActivePrincipal
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resourcesInAbsolutePath
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|readMethod
init|=
name|WebdavMethodUtil
operator|.
name|isReadMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryRequestInfo
name|repositoryRequestInfo
init|=
literal|null
decl_stmt|;
name|DavResource
name|resource
decl_stmt|;
if|if
condition|(
name|isGroupRepo
condition|)
block|{
if|if
condition|(
operator|!
name|readMethod
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|,
literal|"Write method not allowed for repository groups."
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Repository group '{}' accessed by '{}"
argument_list|,
name|repoGroup
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
comment|// handle browse requests for virtual repos
if|if
condition|(
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|DavResource
name|davResource
init|=
name|getResourceFromGroup
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|repoGroup
argument_list|)
decl_stmt|;
name|setHeaders
argument_list|(
name|response
argument_list|,
name|locator
argument_list|,
name|davResource
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|davResource
return|;
block|}
else|else
block|{
comment|// make a copy to avoid potential concurrent modifications (eg. by configuration)
comment|// TODO: ultimately, locking might be more efficient than copying in this fashion since updates are
comment|//  infrequent
name|resource
operator|=
name|processRepositoryGroup
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|activePrincipal
argument_list|,
name|resourcesInAbsolutePath
argument_list|,
name|repoGroup
argument_list|)
expr_stmt|;
for|for
control|(
name|ManagedRepository
name|repo
range|:
name|repoGroup
operator|.
name|getRepositories
argument_list|()
control|)
block|{
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repositoryRequestInfo
operator|=
name|repo
operator|.
name|getRequestInfo
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// We do not provide folders for remote repositories
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|sRepoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Invalid repository: "
operator|+
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
throw|;
block|}
name|ManagedRepositoryContent
name|managedRepositoryContent
init|=
name|repo
operator|.
name|getContent
argument_list|( )
decl_stmt|;
if|if
condition|(
name|managedRepositoryContent
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Inconsistency detected. Repository content not found for '{}'"
argument_list|,
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Invalid repository: "
operator|+
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Managed repository '{}' accessed by '{}'"
argument_list|,
name|managedRepositoryContent
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
name|resource
operator|=
name|processRepository
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|activePrincipal
argument_list|,
name|managedRepositoryContent
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|repositoryRequestInfo
operator|=
name|repo
operator|.
name|getRequestInfo
argument_list|()
expr_stmt|;
name|String
name|logicalResource
init|=
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|resourcesInAbsolutePath
operator|.
name|add
argument_list|(
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|getFilePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|logicalResource
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|requestedResource
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
comment|// MRM-872 : merge all available metadata
comment|// merge metadata only when requested via the repo group
if|if
condition|(
operator|(
name|repositoryRequestInfo
operator|.
name|isMetadata
argument_list|(
name|requestedResource
argument_list|)
operator|||
name|repositoryRequestInfo
operator|.
name|isMetadataSupportFile
argument_list|(
name|requestedResource
argument_list|)
operator|)
operator|&&
name|isGroupRepo
condition|)
block|{
comment|// this should only be at the project level not version level!
if|if
condition|(
name|isProjectReference
argument_list|(
name|requestedResource
argument_list|)
condition|)
block|{
name|ArchivaDavResource
name|res
init|=
operator|(
name|ArchivaDavResource
operator|)
name|resource
decl_stmt|;
name|String
name|newPath
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getAsset
argument_list|()
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|newPath
operator|=
name|res
operator|.
name|getAsset
argument_list|( )
operator|.
name|getParent
argument_list|( )
operator|.
name|getPath
argument_list|( )
operator|+
literal|"/maven-metadata-"
operator|+
name|sRepoId
operator|+
literal|".xml"
expr_stmt|;
block|}
else|else
block|{
name|newPath
operator|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|res
operator|.
name|getAsset
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|"/maven-metadata-"
operator|+
name|sRepoId
operator|+
literal|".xml"
expr_stmt|;
empty_stmt|;
block|}
comment|// for MRM-872 handle checksums of the merged metadata files
if|if
condition|(
name|repositoryRequestInfo
operator|.
name|isSupportFile
argument_list|(
name|requestedResource
argument_list|)
condition|)
block|{
name|String
name|metadataChecksumPath
init|=
name|newPath
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|requestedResource
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|StorageAsset
name|metadataChecksum
init|=
name|repoGroup
operator|.
name|getAsset
argument_list|(
name|metadataChecksumPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoGroup
operator|.
name|getAsset
argument_list|(
name|metadataChecksumPath
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|metadataChecksum
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|repoGroup
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Incompatible layout: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
literal|500
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|resourcesInAbsolutePath
operator|!=
literal|null
operator|&&
name|resourcesInAbsolutePath
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// merge the metadata of all repos under group
name|ArchivaRepositoryMetadata
name|mergedMetadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|resourceAbsPath
range|:
name|resourcesInAbsolutePath
control|)
block|{
try|try
block|{
name|Path
name|metadataFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|resourceAbsPath
argument_list|)
decl_stmt|;
name|FilesystemStorage
name|storage
init|=
operator|new
name|FilesystemStorage
argument_list|(
name|metadataFile
operator|.
name|getParent
argument_list|( )
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|( )
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|repoMetadata
init|=
name|repositoryRegistry
operator|.
name|getMetadataReader
argument_list|(
name|repoGroup
operator|.
name|getType
argument_list|( )
argument_list|)
operator|.
name|read
argument_list|(
name|storage
operator|.
name|getAsset
argument_list|(
name|metadataFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mergedMetadata
operator|=
name|RepositoryMetadataMerge
operator|.
name|merge
argument_list|(
name|mergedMetadata
argument_list|,
name|repoMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while merging metadata file."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while merging metadata file."
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|StorageAsset
name|resourceFile
init|=
name|writeMergedMetadataToFile
argument_list|(
name|repoGroup
argument_list|,
name|mergedMetadata
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|repoGroup
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while writing metadata file."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occurred while generating checksum files."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Incompatible layout: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Incompatible layout for repository "
operator|+
name|repoGroup
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|setHeaders
argument_list|(
name|response
argument_list|,
name|locator
argument_list|,
name|resource
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// compatibility with MRM-440 to ensure browsing the repository works ok
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BrowserRedirectException
argument_list|(
name|resource
operator|.
name|getHref
argument_list|()
argument_list|)
throw|;
block|}
name|resource
operator|.
name|addLockManager
argument_list|(
name|lockManager
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|private
name|DavResource
name|processRepositoryGroup
parameter_list|(
specifier|final
name|DavServletRequest
name|request
parameter_list|,
name|ArchivaDavResourceLocator
name|archivaLocator
parameter_list|,
name|String
name|activePrincipal
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|resourcesInAbsolutePath
parameter_list|,
name|RepositoryGroup
name|repoGroup
parameter_list|)
throws|throws
name|DavException
block|{
name|DavResource
name|resource
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|DavException
argument_list|>
name|storedExceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|pathInfo
init|=
name|StringUtils
operator|.
name|removeEnd
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|rootPath
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|pathInfo
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|mergedIndexPath
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|repoGroup
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|mergedIndexPath
operator|=
name|repoGroup
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getIndexPath
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|rootPath
argument_list|,
name|mergedIndexPath
argument_list|)
condition|)
block|{
comment|// we are in the case of index file request
name|String
name|requestedFileName
init|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|pathInfo
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|StorageAsset
name|temporaryIndexDirectory
init|=
name|buildMergedIndexDirectory
argument_list|(
name|activePrincipal
argument_list|,
name|request
argument_list|,
name|repoGroup
argument_list|)
decl_stmt|;
name|StorageAsset
name|asset
init|=
name|temporaryIndexDirectory
operator|.
name|resolve
argument_list|(
name|requestedFileName
argument_list|)
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|asset
argument_list|,
name|requestedFileName
argument_list|,
name|repoGroup
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad layout: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
literal|500
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|ManagedRepository
name|repository
range|:
name|repoGroup
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|String
name|repositoryId
init|=
name|repository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ManagedRepositoryContent
name|managedRepositoryContent
decl_stmt|;
name|ManagedRepository
name|managedRepository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not find repository with id "
operator|+
name|repositoryId
argument_list|)
throw|;
block|}
name|managedRepositoryContent
operator|=
name|managedRepository
operator|.
name|getContent
argument_list|()
expr_stmt|;
if|if
condition|(
name|managedRepositoryContent
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Inconsistency detected. Repository content not found for '{}'"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not find repository content with id "
operator|+
name|repositoryId
argument_list|)
throw|;
block|}
try|try
block|{
name|DavResource
name|updatedResource
init|=
name|processRepository
argument_list|(
name|request
argument_list|,
name|archivaLocator
argument_list|,
name|activePrincipal
argument_list|,
name|managedRepositoryContent
argument_list|,
name|managedRepository
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|updatedResource
expr_stmt|;
block|}
name|String
name|logicalResource
init|=
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|logicalResource
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|logicalResource
operator|=
name|logicalResource
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|resourcesInAbsolutePath
operator|.
name|add
argument_list|(
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|resolve
argument_list|(
name|logicalResource
argument_list|)
operator|.
name|getFilePath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
name|storedExceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|storedExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// MRM-1232
for|for
control|(
name|DavException
name|e
range|:
name|storedExceptions
control|)
block|{
if|if
condition|(
literal|401
operator|==
name|e
operator|.
name|getErrorCode
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
block|}
return|return
name|resource
return|;
block|}
specifier|private
name|String
name|getLogicalResource
parameter_list|(
name|ArchivaDavResourceLocator
name|archivaLocator
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|managedRepository
parameter_list|,
name|boolean
name|useOrigResourcePath
parameter_list|)
block|{
comment|// FIXME remove this hack
comment|// but currently managedRepository can be null in case of group
name|String
name|layout
init|=
name|managedRepository
operator|==
literal|null
condition|?
literal|"default"
else|:
name|managedRepository
operator|.
name|getLayout
argument_list|()
decl_stmt|;
name|RepositoryStorage
name|repositoryStorage
init|=
name|this
operator|.
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"repositoryStorage#"
operator|+
name|layout
argument_list|,
name|RepositoryStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|repositoryStorage
operator|.
name|getFilePath
argument_list|(
name|useOrigResourcePath
condition|?
name|archivaLocator
operator|.
name|getOrigResourcePath
argument_list|()
else|:
name|archivaLocator
operator|.
name|getResourcePath
argument_list|()
argument_list|,
name|managedRepository
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"found path {} for resourcePath: '{}' with managedRepo '{}' and layout '{}'"
argument_list|,
name|path
argument_list|,
name|archivaLocator
operator|.
name|getResourcePath
argument_list|()
argument_list|,
name|managedRepository
operator|==
literal|null
condition|?
literal|"null"
else|:
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|layout
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
specifier|private
name|String
name|evaluatePathWithVersion
parameter_list|(
name|ArchivaDavResourceLocator
name|archivaLocator
parameter_list|,
comment|//
name|ManagedRepositoryContent
name|managedRepositoryContent
parameter_list|,
comment|//
name|String
name|contextPath
parameter_list|)
throws|throws
name|DavException
block|{
name|String
name|layout
init|=
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|()
operator|==
literal|null
condition|?
literal|"default"
else|:
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|()
operator|.
name|getLayout
argument_list|()
decl_stmt|;
name|RepositoryStorage
name|repositoryStorage
init|=
name|this
operator|.
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"repositoryStorage#"
operator|+
name|layout
argument_list|,
name|RepositoryStorage
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|repositoryStorage
operator|.
name|getFilePathWithVersion
argument_list|(
name|archivaLocator
operator|.
name|getResourcePath
argument_list|()
argument_list|,
comment|//
name|managedRepositoryContent
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RelocationException
name|e
parameter_list|)
block|{
name|String
name|path
init|=
name|e
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Relocation to {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BrowserRedirectException
argument_list|(
name|addHrefPrefix
argument_list|(
name|contextPath
argument_list|,
name|path
argument_list|)
argument_list|,
name|e
operator|.
name|getRelocationType
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DavResource
name|processRepository
parameter_list|(
specifier|final
name|DavServletRequest
name|request
parameter_list|,
name|ArchivaDavResourceLocator
name|archivaLocator
parameter_list|,
name|String
name|activePrincipal
parameter_list|,
name|ManagedRepositoryContent
name|managedRepositoryContent
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|DavException
block|{
name|DavResource
name|resource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|managedRepositoryContent
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|readMethod
init|=
name|WebdavMethodUtil
operator|.
name|isReadMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
comment|// Maven Centric part ask evaluation if -SNAPSHOT
comment|// MRM-1846 test if read method to prevent issue with maven 2.2.1 and uniqueVersion false
name|String
name|path
init|=
name|readMethod
condition|?
name|evaluatePathWithVersion
argument_list|(
name|archivaLocator
argument_list|,
name|managedRepositoryContent
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
else|:
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
name|managedRepository
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|StorageAsset
name|repoAsset
init|=
name|managedRepository
operator|.
name|getAsset
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Path resourceFile = Paths.get( managedRepositoryContent.getRepoRoot(), path );
try|try
block|{
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|repoAsset
argument_list|,
name|path
argument_list|,
name|managedRepository
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Incompatible layout: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|WebdavMethodUtil
operator|.
name|isReadMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|archivaLocator
operator|.
name|getHref
argument_list|(
literal|false
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|!
name|repoAsset
operator|.
name|isContainer
argument_list|()
condition|)
block|{
comment|// force a resource not found
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Resource does not exist"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|boolean
name|previouslyExisted
init|=
name|repoAsset
operator|.
name|exists
argument_list|()
decl_stmt|;
name|boolean
name|fromProxy
init|=
name|fetchContentFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|request
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
name|StorageAsset
name|resourceAsset
init|=
literal|null
decl_stmt|;
comment|// At this point the incoming request can either be in default or
comment|// legacy layout format.
try|try
block|{
comment|// Perform an adjustment of the resource to the managed
comment|// repository expected path.
comment|// String localResourcePath = managedRepository.getRequestInfo().toNativePath( logicalResource.getPath() );
name|resourceAsset
operator|=
name|managedRepository
operator|.
name|getAsset
argument_list|(
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceAsset
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|managedRepository
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|activePrincipal
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
if|if
condition|(
name|resourceAsset
operator|==
literal|null
operator|||
operator|!
name|resourceAsset
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fromProxy
condition|)
block|{
name|String
name|action
init|=
operator|(
name|previouslyExisted
condition|?
name|AuditEvent
operator|.
name|MODIFY_FILE
else|:
name|AuditEvent
operator|.
name|CREATE_FILE
operator|)
operator|+
name|PROXIED_SUFFIX
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Proxied artifact '{}' in repository '{}' (current user '{}')"
argument_list|,
name|resourceAsset
operator|.
name|getName
argument_list|()
argument_list|,
name|managedRepositoryContent
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|action
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resourceAsset
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Resource does not exist"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|HTTP_PUT_METHOD
argument_list|)
condition|)
block|{
name|String
name|resourcePath
init|=
name|logicalResource
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|RepositoryRequestInfo
name|repositoryRequestInfo
init|=
name|managedRepository
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
comment|// check if target repo is enabled for releases
comment|// we suppose that release-artifacts can be deployed only to repos enabled for releases
if|if
condition|(
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|()
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
operator|&&
operator|!
name|repositoryRequestInfo
operator|.
name|isMetadata
argument_list|(
name|resourcePath
argument_list|)
operator|&&
operator|!
name|repositoryRequestInfo
operator|.
name|isSupportFile
argument_list|(
name|resourcePath
argument_list|)
condition|)
block|{
name|ArtifactReference
name|artifact
init|=
literal|null
decl_stmt|;
try|try
block|{
name|BaseRepositoryContentLayout
name|layout
init|=
name|managedRepositoryContent
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
decl_stmt|;
name|artifact
operator|=
name|layout
operator|.
name|toArtifactReference
argument_list|(
name|resourcePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// check if artifact already exists and if artifact re-deployment to the repository is allowed
if|if
condition|(
name|layout
operator|.
name|hasContent
argument_list|(
name|artifact
argument_list|)
operator|&&
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|()
operator|.
name|blocksRedeployments
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overwriting released artifacts in repository '{}' is not allowed."
argument_list|,
name|managedRepositoryContent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CONFLICT
argument_list|,
literal|"Overwriting released artifacts is not allowed."
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Artifact path '{}' is invalid."
argument_list|,
name|resourcePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/*                  * Create parent directories that don't exist when writing a file This actually makes this                  * implementation not compliant to the WebDAV RFC - but we have enough knowledge about how the                  * collection is being used to do this reasonably and some versions of Maven's WebDAV don't correctly                  * create the collections themselves.                  */
name|StorageAsset
name|rootDirectory
init|=
name|managedRepositoryContent
operator|.
name|getRepository
argument_list|( )
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|StorageAsset
name|destDir
init|=
name|rootDirectory
operator|.
name|resolve
argument_list|(
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|destDir
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|destDir
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create directory {}: {}"
argument_list|,
name|destDir
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not create directory "
operator|+
name|destDir
argument_list|)
throw|;
block|}
name|String
name|relPath
init|=
name|PathUtil
operator|.
name|getRelative
argument_list|(
name|rootDirectory
operator|.
name|getPath
argument_list|()
argument_list|,
name|destDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Creating destination directory '{}' (current user '{}')"
argument_list|,
name|destDir
operator|.
name|getName
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|managedRepositoryContent
operator|.
name|getId
argument_list|()
argument_list|,
name|relPath
argument_list|,
name|AuditEvent
operator|.
name|CREATE_DIR
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|resource
return|;
block|}
annotation|@
name|Override
specifier|public
name|DavResource
name|createResource
parameter_list|(
specifier|final
name|DavResourceLocator
name|locator
parameter_list|,
specifier|final
name|DavSession
name|davSession
parameter_list|)
throws|throws
name|DavException
block|{
name|ArchivaDavResourceLocator
name|archivaLocator
init|=
name|checkLocatorIsInstanceOfRepositoryLocator
argument_list|(
name|locator
argument_list|)
decl_stmt|;
name|ManagedRepositoryContent
name|managedRepositoryContent
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Invalid repository: "
operator|+
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
throw|;
block|}
name|managedRepositoryContent
operator|=
name|repo
operator|.
name|getContent
argument_list|()
expr_stmt|;
if|if
condition|(
name|managedRepositoryContent
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Inconsistency detected. Repository content not found for '{}'"
argument_list|,
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Invalid repository: "
operator|+
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
throw|;
block|}
name|DavResource
name|resource
init|=
literal|null
decl_stmt|;
name|String
name|logicalResource
init|=
name|getLogicalResource
argument_list|(
name|archivaLocator
argument_list|,
name|repo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|logicalResource
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|logicalResource
operator|=
name|logicalResource
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|StorageAsset
name|resourceAsset
init|=
name|repo
operator|.
name|getAsset
argument_list|(
name|logicalResource
argument_list|)
decl_stmt|;
try|try
block|{
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceAsset
argument_list|,
name|logicalResource
argument_list|,
name|repo
argument_list|,
name|davSession
argument_list|,
name|archivaLocator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Incompatible layout: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|resource
operator|.
name|addLockManager
argument_list|(
name|lockManager
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|private
name|boolean
name|fetchContentFromProxies
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|LogicalResource
name|resource
parameter_list|)
throws|throws
name|DavException
block|{
name|String
name|path
init|=
name|resource
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|proxyRegistry
operator|.
name|hasHandler
argument_list|(
name|managedRepository
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"No proxy handler found for repository type "
operator|+
name|managedRepository
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|RepositoryRequestInfo
name|repositoryRequestInfo
init|=
name|managedRepository
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
name|RepositoryProxyHandler
name|proxyHandler
init|=
name|proxyRegistry
operator|.
name|getHandler
argument_list|(
name|managedRepository
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryRequestInfo
operator|.
name|isSupportFile
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|StorageAsset
name|proxiedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|proxiedFile
operator|!=
literal|null
operator|)
return|;
block|}
comment|// Is it a Metadata resource?
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|repositoryRequestInfo
operator|.
name|getLayout
argument_list|(
name|path
argument_list|)
argument_list|)
operator|&&
name|repositoryRequestInfo
operator|.
name|isMetadata
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|proxyHandler
operator|.
name|fetchMetadataFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
operator|.
name|isModified
argument_list|()
return|;
block|}
comment|// Is it an Archetype Catalog?
if|if
condition|(
name|repositoryRequestInfo
operator|.
name|isArchetypeCatalog
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// FIXME we must implement a merge of remote archetype catalog from remote servers.
name|StorageAsset
name|proxiedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|proxiedFile
operator|!=
literal|null
operator|)
return|;
block|}
comment|// Not any of the above? Then it's gotta be an artifact reference.
try|try
block|{
comment|// Get the artifact reference in a layout neutral way.
name|ArtifactReference
name|artifact
init|=
name|repositoryRequestInfo
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|String
name|repositoryLayout
init|=
name|managedRepository
operator|.
name|getLayout
argument_list|()
decl_stmt|;
name|RepositoryStorage
name|repositoryStorage
init|=
name|this
operator|.
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"repositoryStorage#"
operator|+
name|repositoryLayout
argument_list|,
name|RepositoryStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|repositoryStorage
operator|.
name|applyServerSideRelocation
argument_list|(
name|managedRepository
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|StorageAsset
name|proxiedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setPath
argument_list|(
name|managedRepository
operator|.
name|getContent
argument_list|()
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Proxied artifact '{}:{}:{}'"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|proxiedFile
operator|!=
literal|null
operator|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* eat it */
block|}
catch|catch
parameter_list|(
name|ProxyDownloadException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Unable to fetch artifact resource."
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|// TODO: remove?
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|String
name|remoteIP
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|principal
parameter_list|)
block|{
name|AuditEvent
name|event
init|=
operator|new
name|AuditEvent
argument_list|(
name|repositoryId
argument_list|,
name|principal
argument_list|,
name|resource
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|event
operator|.
name|setRemoteIP
argument_list|(
name|remoteIP
argument_list|)
expr_stmt|;
for|for
control|(
name|AuditListener
name|listener
range|:
name|auditListeners
control|)
block|{
name|listener
operator|.
name|auditEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAuditListener
parameter_list|(
name|AuditListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAuditListeners
parameter_list|()
block|{
name|this
operator|.
name|auditListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAuditListener
parameter_list|(
name|AuditListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHeaders
parameter_list|(
name|DavServletResponse
name|response
parameter_list|,
name|DavResourceLocator
name|locator
parameter_list|,
name|DavResource
name|resource
parameter_list|,
name|boolean
name|group
parameter_list|)
block|{
comment|// [MRM-503] - Metadata file need Pragma:no-cache response
comment|// header.
if|if
condition|(
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/maven-metadata.xml"
argument_list|)
operator|||
operator|(
name|resource
operator|instanceof
name|ArchivaDavResource
operator|&&
operator|(
name|ArchivaDavResource
operator|.
name|class
operator|.
name|cast
argument_list|(
name|resource
argument_list|)
operator|.
name|getAsset
argument_list|()
operator|.
name|isContainer
argument_list|()
operator|)
operator|)
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if the resource is a directory don't cache it as new groupId deployed will be available
comment|// without need of refreshing browser
if|else if
condition|(
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/maven-metadata.xml"
argument_list|)
operator|||
operator|(
name|resource
operator|instanceof
name|ArchivaVirtualDavResource
operator|&&
operator|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|ArchivaVirtualDavResource
operator|.
name|class
operator|.
name|cast
argument_list|(
name|resource
argument_list|)
operator|.
name|getLogicalResource
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|group
condition|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|ArchivaVirtualDavResource
condition|)
block|{
comment|//MRM-1854 here we have a directory so force "Last-Modified"
name|response
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We need to specify this so connecting wagons can work correctly
name|response
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|resource
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: [MRM-524] determine http caching options for other types of files (artifacts, sha1, md5, snapshots)
block|}
specifier|private
name|ArchivaDavResourceLocator
name|checkLocatorIsInstanceOfRepositoryLocator
parameter_list|(
name|DavResourceLocator
name|locator
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
operator|!
operator|(
name|locator
operator|instanceof
name|ArchivaDavResourceLocator
operator|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Locator does not implement RepositoryLocator"
argument_list|)
throw|;
block|}
comment|// Hidden paths
if|if
condition|(
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ArchivaDavResource
operator|.
name|HIDDEN_PATH_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
throw|;
block|}
name|ArchivaDavResourceLocator
name|archivaLocator
init|=
operator|(
name|ArchivaDavResourceLocator
operator|)
name|locator
decl_stmt|;
comment|// MRM-419 - Windows Webdav support. Should not 404 if there is no content.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|archivaLocator
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|)
throw|;
block|}
return|return
name|archivaLocator
return|;
block|}
specifier|private
name|String
name|addHrefPrefix
parameter_list|(
name|String
name|contextPath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|prefix
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getWebapp
argument_list|()
operator|.
name|getUi
argument_list|()
operator|.
name|getApplicationUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefix
operator|=
name|contextPath
expr_stmt|;
block|}
return|return
name|prefix
operator|+
operator|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
condition|?
literal|""
else|:
operator|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|prefix
argument_list|,
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|)
operator|+
name|path
return|;
block|}
specifier|public
name|void
name|setProxyRegistry
parameter_list|(
name|ProxyRegistry
name|proxyRegistry
parameter_list|)
block|{
name|this
operator|.
name|proxyRegistry
operator|=
name|proxyRegistry
expr_stmt|;
block|}
specifier|public
name|ProxyRegistry
name|getProxyRegistry
parameter_list|()
block|{
return|return
name|this
operator|.
name|proxyRegistry
return|;
block|}
specifier|private
specifier|static
class|class
name|LogicalResource
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|public
name|LogicalResource
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isAuthorized
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|DavException
block|{
try|try
block|{
name|AuthenticationResult
name|result
init|=
name|httpAuth
operator|.
name|getAuthenticationResult
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SecuritySession
name|securitySession
init|=
name|httpAuth
operator|.
name|getSecuritySession
argument_list|(
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|servletAuth
operator|.
name|isAuthenticated
argument_list|(
name|request
argument_list|,
name|result
argument_list|)
comment|//
operator|&&
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|securitySession
argument_list|,
name|repositoryId
argument_list|,
comment|//
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
comment|// safety check for MRM-911
name|String
name|guest
init|=
name|UserManager
operator|.
name|GUEST_USERNAME
decl_stmt|;
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|guest
argument_list|,
operator|(
operator|(
name|ArchivaDavResourceLocator
operator|)
name|request
operator|.
name|getRequestLocator
argument_list|()
operator|)
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You are not authenticated and authorized to access any repository."
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You are not authenticated"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MustChangePasswordException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"You must change your password."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccountLockedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
literal|"User account is locked."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Fatal Authorization Subsystem Error."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|repositoryId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DavResource
name|getResourceFromGroup
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|ArchivaDavResourceLocator
name|locator
parameter_list|,
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|DavException
block|{
specifier|final
name|String
name|id
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repositories
init|=
name|repositoryGroup
operator|.
name|getRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositories
operator|==
literal|null
operator|||
name|repositories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
return|return
operator|new
name|ArchivaDavResource
argument_list|(
name|repositoryGroup
operator|.
name|getAsset
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"groups/"
operator|+
name|id
argument_list|,
literal|null
argument_list|,
name|request
operator|.
name|getDavSession
argument_list|()
argument_list|,
name|locator
argument_list|,
name|this
argument_list|,
name|mimeTypes
argument_list|,
name|auditListeners
argument_list|,
name|scheduler
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad repository layout: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
literal|500
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|StorageAsset
argument_list|>
name|mergedRepositoryContents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ManagedRepository
name|firstRepo
init|=
name|repositories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getLogicalResource
argument_list|(
name|locator
argument_list|,
name|firstRepo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// flow:
comment|// if the current user logged in has permission to any of the repositories, allow user to
comment|// browse the repo group but displaying only the repositories which the user has permission to access.
comment|// otherwise, prompt for authentication.
name|String
name|activePrincipal
init|=
name|getActivePrincipal
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|allow
init|=
name|isAllowedToContinue
argument_list|(
name|request
argument_list|,
name|repositories
argument_list|,
name|activePrincipal
argument_list|)
decl_stmt|;
comment|// remove last /
name|String
name|pathInfo
init|=
name|StringUtils
operator|.
name|removeEnd
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|mergedIndexPath
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|repositoryGroup
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|repositoryGroup
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|mergedIndexPath
operator|=
name|indexCreationFeature
operator|.
name|getIndexPath
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|allow
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|pathInfo
argument_list|,
name|mergedIndexPath
argument_list|)
condition|)
block|{
name|StorageAsset
name|mergedRepoDirPath
init|=
name|buildMergedIndexDirectory
argument_list|(
name|activePrincipal
argument_list|,
name|request
argument_list|,
name|repositoryGroup
argument_list|)
decl_stmt|;
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|mergedRepoDirPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|pathInfo
argument_list|,
literal|"/"
operator|+
name|id
argument_list|)
condition|)
block|{
name|Path
name|tmpDirectory
init|=
name|Paths
operator|.
name|get
argument_list|(
name|SystemUtils
operator|.
name|getJavaIoTmpDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|id
argument_list|,
name|mergedIndexPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|tmpDirectory
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|tmpDirectory
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
init|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|tmpDirectory
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|tmpDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not create direcotory "
operator|+
name|tmpDirectory
argument_list|)
throw|;
block|}
block|}
block|}
block|}
try|try
block|{
name|FilesystemStorage
name|storage
init|=
operator|new
name|FilesystemStorage
argument_list|(
name|tmpDirectory
operator|.
name|getParent
argument_list|()
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|()
argument_list|)
decl_stmt|;
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|storage
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not create storage for "
operator|+
name|tmpDirectory
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|ManagedRepository
name|repo
range|:
name|repositories
control|)
block|{
name|ManagedRepositoryContent
name|managedRepository
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Invalid managed repository<"
operator|+
name|repo
operator|.
name|getId
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
name|managedRepository
operator|=
name|repo
operator|.
name|getContent
argument_list|()
expr_stmt|;
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Inconsistency detected. Repository content not found for '{}'"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Invalid managed repository<"
operator|+
name|repo
operator|.
name|getId
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
comment|// Path resourceFile = Paths.get( managedRepository.getRepoRoot(), logicalResource.getPath() );
name|StorageAsset
name|resourceFile
init|=
name|repo
operator|.
name|getAsset
argument_list|(
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceFile
operator|.
name|exists
argument_list|()
operator|&&
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// in case of group displaying index directory doesn't have sense !!
name|IndexCreationFeature
name|idf
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|StorageAsset
name|repoIndexDirectory
init|=
name|idf
operator|.
name|getLocalIndexPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|repoIndexDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// for prompted authentication
if|if
condition|(
name|httpAuth
operator|.
name|getSecuritySession
argument_list|(
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|resourceFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Repository '{}' accessed by '{}'"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
comment|// TODO: review exception handling
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping repository '{}' for user '{}': {}"
argument_list|,
name|managedRepository
argument_list|,
name|activePrincipal
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// for the current user logged in
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|activePrincipal
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|mergedRepositoryContents
operator|.
name|add
argument_list|(
name|resourceFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Repository '{}' accessed by '{}'"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|activePrincipal
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
comment|// TODO: review exception handling
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping repository '{}' for user '{}': {}"
argument_list|,
name|managedRepository
argument_list|,
name|activePrincipal
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnauthorizedDavException
argument_list|(
name|locator
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
literal|"User not authorized."
argument_list|)
throw|;
block|}
name|ArchivaVirtualDavResource
name|resource
init|=
operator|new
name|ArchivaVirtualDavResource
argument_list|(
name|mergedRepositoryContents
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|mimeTypes
argument_list|,
name|locator
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// compatibility with MRM-440 to ensure browsing the repository group works ok
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BrowserRedirectException
argument_list|(
name|resource
operator|.
name|getHref
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|resource
return|;
block|}
specifier|protected
name|String
name|getActivePrincipal
parameter_list|(
name|DavServletRequest
name|request
parameter_list|)
block|{
name|User
name|sessionUser
init|=
name|httpAuth
operator|.
name|getSessionUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sessionUser
operator|!=
literal|null
condition|?
name|sessionUser
operator|.
name|getUsername
argument_list|()
else|:
name|UserManager
operator|.
name|GUEST_USERNAME
return|;
block|}
comment|/**      * Check if the current user is authorized to access any of the repos      *      * @param request      * @param repositories      * @param activePrincipal      * @return      */
specifier|private
name|boolean
name|isAllowedToContinue
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repositories
parameter_list|,
name|String
name|activePrincipal
parameter_list|)
block|{
comment|// when no repositories configured it's impossible to browse nothing !
comment|// at least make possible to see nothing :-)
if|if
condition|(
name|repositories
operator|==
literal|null
operator|||
name|repositories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|allow
init|=
literal|false
decl_stmt|;
comment|// if securitySession != null, it means that the user was prompted for authentication
if|if
condition|(
name|httpAuth
operator|.
name|getSecuritySession
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ManagedRepository
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
if|if
condition|(
name|isAuthorized
argument_list|(
name|request
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|allow
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|DavException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|ManagedRepository
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|activePrincipal
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allow
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
return|return
name|allow
return|;
block|}
specifier|private
name|StorageAsset
name|writeMergedMetadataToFile
parameter_list|(
name|RepositoryGroup
name|repoGroup
parameter_list|,
name|ArchivaRepositoryMetadata
name|mergedMetadata
parameter_list|,
name|String
name|outputFilename
parameter_list|)
throws|throws
name|RepositoryMetadataException
throws|,
name|IOException
block|{
name|StorageAsset
name|asset
init|=
name|repoGroup
operator|.
name|addAsset
argument_list|(
name|outputFilename
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OutputStream
name|stream
init|=
name|asset
operator|.
name|getWriteStream
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|sw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|mergedMetadata
argument_list|,
name|sw
argument_list|)
expr_stmt|;
name|createChecksumFiles
argument_list|(
name|repoGroup
argument_list|,
name|outputFilename
argument_list|)
expr_stmt|;
return|return
name|asset
return|;
block|}
specifier|private
name|void
name|createChecksumFiles
parameter_list|(
name|RepositoryGroup
name|repo
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|algorithms
init|=
name|ChecksumUtil
operator|.
name|getAlgorithms
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|( )
operator|.
name|getArchivaRuntimeConfiguration
argument_list|( )
operator|.
name|getChecksumTypes
argument_list|( )
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OutputStream
argument_list|>
name|outStreams
init|=
name|algorithms
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|algo
lambda|->
block|{
name|String
name|ext
init|=
name|algo
operator|.
name|getDefaultExtension
argument_list|( )
decl_stmt|;
try|try
block|{
return|return
name|repo
operator|.
name|getAsset
argument_list|(
name|path
operator|+
literal|"."
operator|+
name|ext
argument_list|)
operator|.
name|getWriteStream
argument_list|(
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
try|try
block|{
name|StreamingChecksum
operator|.
name|updateChecksums
argument_list|(
name|repo
operator|.
name|getAsset
argument_list|(
name|path
argument_list|)
operator|.
name|getReadStream
argument_list|()
argument_list|,
name|algorithms
argument_list|,
name|outStreams
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isProjectReference
parameter_list|(
name|String
name|requestedResource
parameter_list|)
block|{
try|try
block|{
name|metadataTools
operator|.
name|toVersionedReference
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|re
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|protected
name|StorageAsset
name|buildMergedIndexDirectory
parameter_list|(
name|String
name|activePrincipal
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|DavException
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repositories
init|=
name|repositoryGroup
operator|.
name|getRepositories
argument_list|()
decl_stmt|;
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|TemporaryGroupIndex
argument_list|>
name|temporaryGroupIndexMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|TemporaryGroupIndex
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|TemporaryGroupIndexSessionCleaner
operator|.
name|TEMPORARY_INDEX_SESSION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|temporaryGroupIndexMap
operator|==
literal|null
condition|)
block|{
name|temporaryGroupIndexMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|id
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|()
decl_stmt|;
name|TemporaryGroupIndex
name|tmp
init|=
name|temporaryGroupIndexMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
operator|&&
name|tmp
operator|.
name|getDirectory
argument_list|()
operator|!=
literal|null
operator|&&
name|tmp
operator|.
name|getDirectory
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tmp
operator|.
name|getCreationTime
argument_list|()
operator|>
operator|(
name|repositoryGroup
operator|.
name|getMergedIndexTTL
argument_list|()
operator|*
literal|60
operator|*
literal|1000
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
literal|"group.merged.index"
argument_list|)
argument_list|,
literal|"tmp group index '{}' is too old so delete it"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|indexMerger
operator|.
name|cleanTemporaryGroupIndex
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
literal|"group.merged.index"
argument_list|)
argument_list|,
literal|"merged index for group '{}' found in cache"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|tmp
operator|.
name|getDirectory
argument_list|()
return|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|authzRepos
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|permission
init|=
name|WebdavMethodUtil
operator|.
name|getMethodPermission
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ManagedRepository
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
if|if
condition|(
name|servletAuth
operator|.
name|isAuthorized
argument_list|(
name|activePrincipal
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|authzRepos
operator|.
name|add
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|authzRepos
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|repositorySearch
operator|.
name|getRemoteIndexingContextIds
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnauthorizedException
name|e
parameter_list|)
block|{
comment|// TODO: review exception handling
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping repository '{}' for user '{}': {}"
argument_list|,
name|repository
argument_list|,
name|activePrincipal
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"generate temporary merged index for repository group '{}' for repositories '{}'"
argument_list|,
name|id
argument_list|,
name|authzRepos
argument_list|)
expr_stmt|;
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|repositoryGroup
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Path
name|indexPath
init|=
name|indexCreationFeature
operator|.
name|getLocalIndexPath
argument_list|()
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexPath
operator|!=
literal|null
condition|)
block|{
name|Path
name|tempRepoFile
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"temp"
argument_list|)
decl_stmt|;
name|tempRepoFile
operator|.
name|toFile
argument_list|( )
operator|.
name|deleteOnExit
argument_list|( )
expr_stmt|;
name|FilesystemStorage
name|storage
init|=
operator|new
name|FilesystemStorage
argument_list|(
name|tempRepoFile
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|()
argument_list|)
decl_stmt|;
name|StorageAsset
name|tmpAsset
init|=
name|storage
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|IndexMergerRequest
name|indexMergerRequest
init|=
operator|new
name|IndexMergerRequest
argument_list|(
name|authzRepos
argument_list|,
literal|true
argument_list|,
name|id
argument_list|,
name|indexPath
operator|.
name|toString
argument_list|( )
argument_list|,
name|repositoryGroup
operator|.
name|getMergedIndexTTL
argument_list|( )
argument_list|)
operator|.
name|mergedIndexDirectory
argument_list|(
name|tmpAsset
argument_list|)
operator|.
name|temporary
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MergedRemoteIndexesTaskRequest
name|taskRequest
init|=
operator|new
name|MergedRemoteIndexesTaskRequest
argument_list|(
name|indexMergerRequest
argument_list|,
name|indexMerger
argument_list|)
decl_stmt|;
name|MergedRemoteIndexesTask
name|job
init|=
operator|new
name|MergedRemoteIndexesTask
argument_list|(
name|taskRequest
argument_list|)
decl_stmt|;
name|ArchivaIndexingContext
name|indexingContext
init|=
name|job
operator|.
name|execute
argument_list|( )
operator|.
name|getIndexingContext
argument_list|( )
decl_stmt|;
name|StorageAsset
name|mergedRepoDir
init|=
name|indexingContext
operator|.
name|getPath
argument_list|( )
decl_stmt|;
name|TemporaryGroupIndex
name|temporaryGroupIndex
init|=
operator|new
name|TemporaryGroupIndex
argument_list|(
name|mergedRepoDir
argument_list|,
name|indexingContext
operator|.
name|getId
argument_list|( )
argument_list|,
name|id
argument_list|,
name|repositoryGroup
operator|.
name|getMergedIndexTTL
argument_list|( )
argument_list|)
comment|//
operator|.
name|setCreationTime
argument_list|(
operator|new
name|Date
argument_list|( )
operator|.
name|getTime
argument_list|( )
argument_list|)
decl_stmt|;
name|temporaryGroupIndexMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|temporaryGroupIndex
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|TemporaryGroupIndexSessionCleaner
operator|.
name|TEMPORARY_INDEX_SESSION_KEY
argument_list|,
name|temporaryGroupIndexMap
argument_list|)
expr_stmt|;
return|return
name|mergedRepoDir
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Local index path for repository group {} does not exist."
argument_list|,
name|repositoryGroup
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositorySearchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndexMergerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setServletAuth
parameter_list|(
name|ServletAuthenticator
name|servletAuth
parameter_list|)
block|{
name|this
operator|.
name|servletAuth
operator|=
name|servletAuth
expr_stmt|;
block|}
specifier|public
name|void
name|setHttpAuth
parameter_list|(
name|HttpAuthenticator
name|httpAuth
parameter_list|)
block|{
name|this
operator|.
name|httpAuth
operator|=
name|httpAuth
expr_stmt|;
block|}
specifier|public
name|void
name|setScheduler
parameter_list|(
name|RepositoryArchivaTaskScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
block|}
specifier|public
name|RemoteRepositoryAdmin
name|getRemoteRepositoryAdmin
parameter_list|()
block|{
return|return
name|remoteRepositoryAdmin
return|;
block|}
specifier|public
name|void
name|setRemoteRepositoryAdmin
parameter_list|(
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
parameter_list|)
block|{
name|this
operator|.
name|remoteRepositoryAdmin
operator|=
name|remoteRepositoryAdmin
expr_stmt|;
block|}
specifier|public
name|ManagedRepositoryAdmin
name|getManagedRepositoryAdmin
parameter_list|()
block|{
return|return
name|managedRepositoryAdmin
return|;
block|}
specifier|public
name|void
name|setManagedRepositoryAdmin
parameter_list|(
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
parameter_list|)
block|{
name|this
operator|.
name|managedRepositoryAdmin
operator|=
name|managedRepositoryAdmin
expr_stmt|;
block|}
specifier|public
name|RepositoryRegistry
name|getRepositoryRegistry
parameter_list|( )
block|{
return|return
name|repositoryRegistry
return|;
block|}
specifier|public
name|void
name|setRepositoryRegistry
parameter_list|(
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|)
block|{
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
block|}
block|}
end_class

end_unit

