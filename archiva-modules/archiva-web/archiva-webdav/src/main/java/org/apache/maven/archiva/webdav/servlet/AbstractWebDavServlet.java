begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|BooleanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusToSpringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|WebApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|support
operator|.
name|WebApplicationContextUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_comment
comment|/**  * AbstractWebDavServlet   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: AbstractWebDavServlet.java 7009 2007-10-25 23:34:43Z joakime $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractWebDavServlet
extends|extends
name|HttpServlet
block|{
specifier|public
specifier|static
specifier|final
name|String
name|INIT_USE_INDEX_HTML
init|=
literal|"dav.use.index.html"
decl_stmt|;
specifier|private
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
specifier|protected
name|DavServerManager
name|davManager
decl_stmt|;
specifier|public
name|String
name|getServletInfo
parameter_list|()
block|{
return|return
literal|"Plexus WebDAV Servlet"
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|WebApplicationContext
name|wac
init|=
name|WebApplicationContextUtils
operator|.
name|getRequiredWebApplicationContext
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
argument_list|)
decl_stmt|;
name|davManager
operator|=
operator|(
name|DavServerManager
operator|)
name|wac
operator|.
name|getBean
argument_list|(
name|PlexusToSpringUtils
operator|.
name|buildSpringId
argument_list|(
name|DavServerManager
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|davManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to lookup davManager"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Perform any authentication steps here.      *       * If authentication fails, it is the responsibility of the implementor to issue      * the appropriate status codes and/or challenge back on the response object, then      * return false on the overridden version of this method.      *       * To effectively not have authentication, just implement this method and always      * return true.      *       * @param davRequest the incoming dav request.      * @param httpResponse the outgoing http response.      * @return true if user is authenticated, false if not.      * @throws ServletException if there was a problem performing authencation.      * @throws IOException if there was a problem obtaining credentials or issuing challenge.      */
specifier|public
name|boolean
name|isAuthenticated
parameter_list|(
name|DavServerRequest
name|davRequest
parameter_list|,
name|HttpServletResponse
name|httpResponse
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// Always return true. Effectively no Authentication done.
return|return
literal|true
return|;
block|}
comment|/**      * Perform any authorization steps here.      *       * If authorization fails, it is the responsibility of the implementor to issue      * the appropriate status codes and/or challenge back on the response object, then      * return false on the overridden version of this method.      *       * to effectively not have authorization, just implement this method and always      * return true.      *       * @param davRequest      * @param httpResponse      * @return      * @throws ServletException      * @throws IOException      */
specifier|public
name|boolean
name|isAuthorized
parameter_list|(
name|DavServerRequest
name|davRequest
parameter_list|,
name|HttpServletResponse
name|httpResponse
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// Always return true. Effectively no Authorization done.
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isDebug
parameter_list|()
block|{
return|return
name|debug
return|;
block|}
specifier|public
name|void
name|setDebug
parameter_list|(
name|boolean
name|debug
parameter_list|)
block|{
name|this
operator|.
name|debug
operator|=
name|debug
expr_stmt|;
block|}
specifier|protected
name|void
name|requestDebug
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-->>> request ----------------------------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> "
operator|+
name|request
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
name|request
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|request
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
condition|?
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
literal|"HTTP/1.1"
argument_list|)
expr_stmt|;
name|Enumeration
name|enHeaders
init|=
name|request
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|enHeaders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|headerName
init|=
operator|(
name|String
operator|)
name|enHeaders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|headerValue
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|headerName
operator|+
literal|": "
operator|+
name|headerValue
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|setUseIndexHtml
parameter_list|(
name|boolean
name|useIndexHtml
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|getUseIndexHtml
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|useIndexHtml
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
name|INIT_USE_INDEX_HTML
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|useIndexHtml
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|BooleanUtils
operator|.
name|toBoolean
argument_list|(
name|useIndexHtml
argument_list|)
return|;
block|}
block|}
end_class

end_unit

