begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|RepositoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|audit
operator|.
name|AuditListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|audit
operator|.
name|Auditable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|WebdavMethodUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|RepositoryPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|RepositoryProxyConnectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ProxyDownloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaXworkUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DistributionManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Relocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MavenXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:james@atlassian.com">James William Dumay</a>  * @plexus.component role="org.apache.maven.archiva.webdav.ArchivaDavResourceFactory"  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaDavResourceFactory
implements|implements
name|DavResourceFactory
implements|,
name|Auditable
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaDavResourceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.repository.audit.AuditListener"      */
specifier|private
name|List
argument_list|<
name|AuditListener
argument_list|>
name|auditListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|AuditListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryRequest
name|repositoryRequest
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|private
name|RepositoryProxyConnectors
name|connectors
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|public
name|DavResource
name|createResource
parameter_list|(
specifier|final
name|DavResourceLocator
name|locator
parameter_list|,
specifier|final
name|DavServletRequest
name|request
parameter_list|,
specifier|final
name|DavServletResponse
name|response
parameter_list|)
throws|throws
name|DavException
block|{
specifier|final
name|ManagedRepositoryContent
name|managedRepository
init|=
name|getManagedRepository
argument_list|(
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LogicalResource
name|logicalResource
init|=
operator|new
name|LogicalResource
argument_list|(
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DavResource
name|resource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|managedRepository
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|isGet
init|=
name|WebdavMethodUtil
operator|.
name|isReadMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isPut
init|=
name|WebdavMethodUtil
operator|.
name|isWriteMethod
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGet
condition|)
block|{
name|resource
operator|=
name|doGet
argument_list|(
name|managedRepository
argument_list|,
name|request
argument_list|,
name|locator
argument_list|,
name|logicalResource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPut
condition|)
block|{
name|resource
operator|=
name|doPut
argument_list|(
name|managedRepository
argument_list|,
name|request
argument_list|,
name|locator
argument_list|,
name|logicalResource
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Repository does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|setHeaders
argument_list|(
name|locator
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not get resource for method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|DavResource
name|createResource
parameter_list|(
specifier|final
name|DavResourceLocator
name|locator
parameter_list|,
specifier|final
name|DavSession
name|davSession
parameter_list|)
throws|throws
name|DavException
block|{
specifier|final
name|ManagedRepositoryContent
name|managedRepository
init|=
name|getManagedRepository
argument_list|(
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|logicalResource
init|=
name|RepositoryPathUtil
operator|.
name|getLogicalResource
argument_list|(
name|locator
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
argument_list|,
name|mimeTypes
argument_list|,
name|locator
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|DavResource
name|doGet
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|DavResourceLocator
name|locator
parameter_list|,
name|LogicalResource
name|logicalResource
parameter_list|)
throws|throws
name|DavException
block|{
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ArchivaDavResource
name|resource
init|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|mimeTypes
argument_list|,
name|locator
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
comment|// At this point the incoming request can either be in default or
comment|// legacy layout format.
name|boolean
name|fromProxy
init|=
name|fetchContentFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|request
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
name|boolean
name|previouslyExisted
init|=
name|resourceFile
operator|.
name|exists
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Perform an adjustment of the resource to the managed
comment|// repository expected path.
name|String
name|localResourcePath
init|=
name|repositoryRequest
operator|.
name|toNativePath
argument_list|(
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|managedRepository
argument_list|)
decl_stmt|;
name|resourceFile
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|localResourcePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
if|if
condition|(
name|previouslyExisted
condition|)
block|{
return|return
name|resource
return|;
block|}
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Attempt to fetch the resource from any defined proxy.
if|if
condition|(
name|fromProxy
condition|)
block|{
name|processAuditEvents
argument_list|(
name|request
argument_list|,
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|previouslyExisted
argument_list|,
name|resourceFile
argument_list|,
literal|" (proxied)"
argument_list|)
expr_stmt|;
block|}
name|resource
operator|=
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|mimeTypes
argument_list|,
name|locator
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
specifier|private
name|DavResource
name|doPut
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|DavResourceLocator
name|locator
parameter_list|,
name|LogicalResource
name|logicalResource
parameter_list|)
throws|throws
name|DavException
block|{
comment|/*          * Create parent directories that don't exist when writing a file          * This actually makes this implementation not compliant to the          * WebDAV RFC - but we have enough knowledge about how the          * collection is being used to do this reasonably and some versions          * of Maven's WebDAV don't correctly create the collections          * themselves.          */
name|File
name|rootDirectory
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
name|rootDirectory
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|destDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|relPath
init|=
name|PathUtil
operator|.
name|getRelative
argument_list|(
name|rootDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|destDir
argument_list|)
decl_stmt|;
name|triggerAuditEvent
argument_list|(
name|request
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|relPath
argument_list|,
name|AuditEvent
operator|.
name|CREATE_DIR
argument_list|)
expr_stmt|;
block|}
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|previouslyExisted
init|=
name|resourceFile
operator|.
name|exists
argument_list|()
decl_stmt|;
name|processAuditEvents
argument_list|(
name|request
argument_list|,
name|locator
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|previouslyExisted
argument_list|,
name|resourceFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArchivaDavResource
argument_list|(
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|logicalResource
operator|.
name|getPath
argument_list|()
argument_list|,
name|mimeTypes
argument_list|,
name|locator
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|fetchContentFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|LogicalResource
name|resource
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
name|repositoryRequest
operator|.
name|isSupportFile
argument_list|(
name|resource
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// Checksums are fetched with artifact / metadata.
comment|// Need to adjust the path for the checksum resource.
return|return
literal|false
return|;
block|}
comment|// Is it a Metadata resource?
if|if
condition|(
name|repositoryRequest
operator|.
name|isDefault
argument_list|(
name|resource
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|repositoryRequest
operator|.
name|isMetadata
argument_list|(
name|resource
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fetchMetadataFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|request
argument_list|,
name|resource
argument_list|)
return|;
block|}
comment|// Not any of the above? Then it's gotta be an artifact reference.
try|try
block|{
comment|// Get the artifact reference in a layout neutral way.
name|ArtifactReference
name|artifact
init|=
name|repositoryRequest
operator|.
name|toArtifactReference
argument_list|(
name|resource
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|applyServerSideRelocation
argument_list|(
name|managedRepository
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|File
name|proxiedFile
init|=
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setPath
argument_list|(
name|managedRepository
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|proxiedFile
operator|!=
literal|null
operator|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|/* eat it */
block|}
catch|catch
parameter_list|(
name|ProxyDownloadException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Unable to fetch artifact resource."
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|fetchMetadataFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|DavServletRequest
name|request
parameter_list|,
name|LogicalResource
name|resource
parameter_list|)
throws|throws
name|DavException
block|{
name|ProjectReference
name|project
decl_stmt|;
name|VersionedReference
name|versioned
decl_stmt|;
try|try
block|{
name|versioned
operator|=
name|metadataTools
operator|.
name|toVersionedReference
argument_list|(
name|resource
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|versioned
operator|!=
literal|null
condition|)
block|{
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|versioned
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|e
parameter_list|)
block|{
comment|/* eat it */
block|}
try|try
block|{
name|project
operator|=
name|metadataTools
operator|.
name|toProjectReference
argument_list|(
name|resource
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|project
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|e
parameter_list|)
block|{
comment|/* eat it */
block|}
return|return
literal|false
return|;
block|}
comment|/**      * A relocation capable client will request the POM prior to the artifact,      * and will then read meta-data and do client side relocation. A simplier      * client (like maven 1) will only request the artifact and not use the      * metadatas.      *<p>      * For such clients, archiva does server-side relocation by reading itself      * the&lt;relocation&gt; element in metadatas and serving the expected      * artifact.      */
specifier|protected
name|void
name|applyServerSideRelocation
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
throws|throws
name|ProxyDownloadException
block|{
if|if
condition|(
literal|"pom"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Build the artifact POM reference
name|ArtifactReference
name|pomReference
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|pomReference
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|pomReference
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|pomReference
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|pomReference
operator|.
name|setType
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
comment|// Get the artifact POM from proxied repositories if needed
name|connectors
operator|.
name|fetchFromProxies
argument_list|(
name|managedRepository
argument_list|,
name|pomReference
argument_list|)
expr_stmt|;
comment|// Open and read the POM from the managed repo
name|File
name|pom
init|=
name|managedRepository
operator|.
name|toFile
argument_list|(
name|pomReference
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pom
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Model
name|model
init|=
operator|new
name|MavenXpp3Reader
argument_list|()
operator|.
name|read
argument_list|(
operator|new
name|FileReader
argument_list|(
name|pom
argument_list|)
argument_list|)
decl_stmt|;
name|DistributionManagement
name|dist
init|=
name|model
operator|.
name|getDistributionManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|dist
operator|!=
literal|null
condition|)
block|{
name|Relocation
name|relocation
init|=
name|dist
operator|.
name|getRelocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|relocation
operator|!=
literal|null
condition|)
block|{
comment|// artifact is relocated : update the repositoryPath
if|if
condition|(
name|relocation
operator|.
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setGroupId
argument_list|(
name|relocation
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relocation
operator|.
name|getArtifactId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setArtifactId
argument_list|(
name|relocation
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relocation
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|.
name|setVersion
argument_list|(
name|relocation
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Artifact has no POM in repo : ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Unable to read POM : ignore.
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
comment|// Invalid POM : ignore
block|}
block|}
specifier|private
name|void
name|processAuditEvents
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|resource
parameter_list|,
name|boolean
name|previouslyExisted
parameter_list|,
name|File
name|resourceFile
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
condition|)
block|{
name|suffix
operator|=
literal|""
expr_stmt|;
block|}
comment|// Process Create Audit Events.
if|if
condition|(
operator|!
name|previouslyExisted
operator|&&
name|resourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|resourceFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|triggerAuditEvent
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|,
name|resource
argument_list|,
name|AuditEvent
operator|.
name|CREATE_FILE
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|resourceFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|triggerAuditEvent
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|,
name|resource
argument_list|,
name|AuditEvent
operator|.
name|CREATE_DIR
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Process Remove Audit Events.
if|else if
condition|(
name|previouslyExisted
operator|&&
operator|!
name|resourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|resourceFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|triggerAuditEvent
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|,
name|resource
argument_list|,
name|AuditEvent
operator|.
name|REMOVE_FILE
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|resourceFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|triggerAuditEvent
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|,
name|resource
argument_list|,
name|AuditEvent
operator|.
name|REMOVE_DIR
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Process modify events.
else|else
block|{
if|if
condition|(
name|resourceFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|triggerAuditEvent
argument_list|(
name|request
argument_list|,
name|repositoryId
argument_list|,
name|resource
argument_list|,
name|AuditEvent
operator|.
name|MODIFY_FILE
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|remoteIP
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|AuditEvent
name|event
init|=
operator|new
name|AuditEvent
argument_list|(
name|repositoryId
argument_list|,
name|user
argument_list|,
name|resource
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|event
operator|.
name|setRemoteIP
argument_list|(
name|remoteIP
argument_list|)
expr_stmt|;
for|for
control|(
name|AuditListener
name|listener
range|:
name|auditListeners
control|)
block|{
name|listener
operator|.
name|auditEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|DavServletRequest
name|request
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|triggerAuditEvent
argument_list|(
name|ArchivaXworkUser
operator|.
name|getActivePrincipal
argument_list|(
name|ActionContext
operator|.
name|getContext
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|getRemoteIP
argument_list|(
name|request
argument_list|)
argument_list|,
name|repositoryId
argument_list|,
name|resource
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getRemoteIP
parameter_list|(
name|DavServletRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|getRemoteAddr
argument_list|()
return|;
block|}
specifier|public
name|void
name|addAuditListener
parameter_list|(
name|AuditListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearAuditListeners
parameter_list|()
block|{
name|this
operator|.
name|auditListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeAuditListener
parameter_list|(
name|AuditListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|auditListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHeaders
parameter_list|(
name|DavResourceLocator
name|locator
parameter_list|,
name|DavServletResponse
name|response
parameter_list|)
block|{
comment|// [MRM-503] - Metadata file need Pragma:no-cache response
comment|// header.
if|if
condition|(
name|locator
operator|.
name|getResourcePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/maven-metadata.xml"
argument_list|)
condition|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: [MRM-524] determine http caching options for other types of files (artifacts, sha1, md5, snapshots)
block|}
specifier|private
name|ManagedRepositoryContent
name|getManagedRepository
parameter_list|(
name|String
name|respositoryId
parameter_list|)
throws|throws
name|DavException
block|{
if|if
condition|(
name|respositoryId
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|respositoryId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DavException
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
class|class
name|LogicalResource
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|public
name|LogicalResource
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

