begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * RepositoryRequest - wrapped servlet request to adjust the incoming request before the components get it.  * It eliminates the prefix from the pathInfo portion of the URL requested.  * And also allows for Header adjustment.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: WrappedRepositoryRequest.java 7001 2007-10-23 22:40:14Z joakime $  */
end_comment

begin_class
specifier|public
class|class
name|WrappedRepositoryRequest
extends|extends
name|HttpServletRequestWrapper
block|{
specifier|private
name|String
name|pathInfo
decl_stmt|;
specifier|private
name|Map
name|headers
decl_stmt|;
comment|/**      * The Date Formats most commonly seen in Request Headers.      */
specifier|private
name|SimpleDateFormat
name|dateFormats
index|[]
decl_stmt|;
specifier|public
name|WrappedRepositoryRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|dateFormats
operator|=
operator|new
name|SimpleDateFormat
index|[]
block|{
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss zzz"
argument_list|)
block|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd-MMM-yy HH:mm:ss"
argument_list|)
block|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MMM dd HH:mm:ss yyyy"
argument_list|)
block|}
expr_stmt|;
name|headers
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Enumeration
name|enHeaders
init|=
name|request
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|enHeaders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|enHeaders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getDateHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// no value? return -1
return|return
operator|-
literal|1
return|;
block|}
comment|// Try most common formats first.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dateFormats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Date
name|date
init|=
operator|(
name|Date
operator|)
name|dateFormats
index|[
name|i
index|]
operator|.
name|parseObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
comment|/* ignore exception */
block|}
block|}
comment|// Now check for the odd "GMT" formats (hey, it happens)
if|if
condition|(
name|value
operator|.
name|endsWith
argument_list|(
literal|" GMT"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dateFormats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Date
name|date
init|=
operator|(
name|Date
operator|)
name|dateFormats
index|[
name|i
index|]
operator|.
name|parseObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
comment|/* ignore exception */
block|}
block|}
block|}
comment|// unrecognized format? return -1
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Enumeration
name|getHeaderNames
parameter_list|()
block|{
return|return
operator|new
name|Enumeration
argument_list|()
block|{
specifier|private
name|Iterator
name|iter
init|=
name|headers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
return|return
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|public
name|int
name|getIntHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|void
name|setPathInfo
parameter_list|(
name|String
name|alternatePathInfo
parameter_list|)
block|{
name|this
operator|.
name|pathInfo
operator|=
name|alternatePathInfo
expr_stmt|;
block|}
specifier|public
name|String
name|getPathInfo
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|pathInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|pathInfo
return|;
block|}
return|return
name|super
operator|.
name|getPathInfo
argument_list|()
return|;
block|}
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|pathInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getServletPath
argument_list|()
operator|+
literal|"/"
operator|+
name|this
operator|.
name|pathInfo
return|;
block|}
return|return
name|super
operator|.
name|getServletPath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

