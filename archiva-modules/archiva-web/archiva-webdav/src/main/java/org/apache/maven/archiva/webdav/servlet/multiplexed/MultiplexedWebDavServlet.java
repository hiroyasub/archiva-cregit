begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|multiplexed
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|AbstractWebDavServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|DavServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|WrappedRepositoryRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *<p>  * MultiplexedWebDavServlet - and abstracted multiplexed webdav servlet.  *</p>  *   *<p>  * Implementations of this servlet should override the {@link #initServers} method and create all of the  * appropriate DavServerComponents needed using the {@link DavServerManager} obtained via the {@link #getDavManager()}  * method.  *</p>  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: MultiplexedWebDavServlet.java 6000 2007-03-04 22:01:49Z joakime $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MultiplexedWebDavServlet
extends|extends
name|AbstractWebDavServlet
block|{
specifier|private
name|boolean
name|useIndexHtml
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|useIndexHtml
operator|=
name|getUseIndexHtml
argument_list|(
name|config
argument_list|)
expr_stmt|;
try|try
block|{
name|initServers
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create any DavServerComponents here.      * Use the {@link #createServer(String, File, ServletConfig)} method to create your servers.      *       * @param config the config to use.      * @throws DavServerException if there was a problem initializing the server components.      */
specifier|public
specifier|abstract
name|void
name|initServers
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|DavServerException
function_decl|;
specifier|public
name|DavServerComponent
name|createServer
parameter_list|(
name|String
name|prefix
parameter_list|,
name|File
name|rootDirectory
parameter_list|,
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|DavServerException
block|{
name|DavServerComponent
name|serverComponent
init|=
name|davManager
operator|.
name|createServer
argument_list|(
name|prefix
argument_list|,
name|rootDirectory
argument_list|)
decl_stmt|;
name|serverComponent
operator|.
name|setUseIndexHtml
argument_list|(
name|useIndexHtml
argument_list|)
expr_stmt|;
name|serverComponent
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|serverComponent
return|;
block|}
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|httpRequest
parameter_list|,
name|HttpServletResponse
name|httpResponse
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|DavServerRequest
name|davRequest
init|=
operator|new
name|MultiplexedDavServerRequest
argument_list|(
operator|new
name|WrappedRepositoryRequest
argument_list|(
name|httpRequest
argument_list|)
argument_list|)
decl_stmt|;
name|DavServerComponent
name|davServer
init|=
name|davManager
operator|.
name|getServer
argument_list|(
name|davRequest
operator|.
name|getPrefix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|davServer
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"["
operator|+
name|davRequest
operator|.
name|getPrefix
argument_list|()
operator|+
literal|"] Not Found (Likely Unconfigured)."
decl_stmt|;
name|httpResponse
operator|.
name|sendError
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
return|return;
block|}
name|requestDebug
argument_list|(
name|httpRequest
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthenticated
argument_list|(
name|davRequest
argument_list|,
name|httpResponse
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isAuthorized
argument_list|(
name|davRequest
argument_list|,
name|httpResponse
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|davServer
operator|.
name|process
argument_list|(
name|davRequest
argument_list|,
name|httpResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to process request."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setUseIndexHtml
parameter_list|(
name|boolean
name|useIndexHtml
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|davManager
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DavServerComponent
name|davServer
init|=
operator|(
name|DavServerComponent
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|davServer
operator|.
name|setUseIndexHtml
argument_list|(
name|useIndexHtml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

