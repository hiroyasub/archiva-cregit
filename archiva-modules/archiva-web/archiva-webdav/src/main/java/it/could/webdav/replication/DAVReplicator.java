begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|location
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVListener
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVLogger
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVRepository
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  *<p>The {@link DAVReplicator} class is a {@link DAVListener} replicating  * all content to the WebDAV repository specified at construction.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVReplicator
extends|extends
name|HttpServlet
block|{
comment|/**<p>The {@link DAVReplica} instances managed by this.</p> */
specifier|private
specifier|final
name|List
name|replicas
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVServlet} instance.</p>      */
specifier|public
name|DAVReplicator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Initialize this {@link Servlet} instance.</p>      *       *<p>This servlet requires a couple of initialization parameters: the      * first one is&quot;<code>repository</code>&quot; indicating the name of      * the {@link DAVServlet} in the&quot;<code>web.xml</code>&quot; deployment      * descriptor whose repository should be replicated.</p>      *      *<p>The second required parameter&quot;<code>replicas</code>&quot;      * must contain a (whitespace separated list of) URL(s) where the original      * repository should be replicated to.</p>      *      *<p>Finally, when set to<code>true</code>, the optional parameter      *<code>debugEnabled</code> will enable logging of method invocation and      * events in the repository.</p>       */
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
comment|/* Initialize the super, just in case, and remember the context */
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|/* Setup logging */
name|boolean
name|debug
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"debugEnabled"
argument_list|)
argument_list|)
decl_stmt|;
name|DAVLogger
name|logger
init|=
operator|new
name|DAVLogger
argument_list|(
name|config
argument_list|,
name|debug
argument_list|)
decl_stmt|;
comment|/* Try to retrieve the WebDAV repository from the servlet context */
specifier|final
name|String
name|repositoryName
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"repository"
argument_list|)
decl_stmt|;
specifier|final
name|DAVRepository
name|repository
decl_stmt|;
if|if
condition|(
name|repositoryName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Parameter \"rootPath\" not specified"
argument_list|)
throw|;
block|}
else|else
try|try
block|{
specifier|final
name|String
name|key
init|=
name|DAVServlet
operator|.
name|getRepositoryKey
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
specifier|final
name|ServletContext
name|context
init|=
name|config
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|repository
operator|=
operator|(
name|DAVRepository
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to access repository from "
operator|+
literal|"servlet \""
operator|+
name|repository
operator|+
literal|"\""
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Class cast exception accessing repository"
decl_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|message
argument_list|,
name|exception
argument_list|)
throw|;
block|}
comment|/* Access the different WebDAV replicas */
specifier|final
name|String
name|replicas
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"replicas"
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicas
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Parameter \"replicas\" not specified"
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|replicas
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
specifier|final
name|Location
name|location
init|=
name|Location
operator|.
name|parse
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DAVReplica
name|replica
init|=
operator|new
name|DAVReplica
argument_list|(
name|repository
argument_list|,
name|location
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|logger
operator|.
name|log
argument_list|(
literal|"Added repository replica to \""
operator|+
name|location
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|repository
operator|.
name|addListener
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicas
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|replica
operator|.
name|synchronize
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Error creating replica"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
comment|/* Check that we have at least one replica in */
if|if
condition|(
name|this
operator|.
name|replicas
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
return|return;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No replicas specified for repository"
argument_list|)
throw|;
block|}
comment|/**      *<p>Destroy {@link DAVServlet} instance interrupting all running      * {@link DAVReplica} instances.</p>      */
specifier|public
name|void
name|destroy
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|this
operator|.
name|replicas
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|DAVReplica
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

