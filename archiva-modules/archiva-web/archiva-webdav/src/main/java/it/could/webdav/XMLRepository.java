begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  *<p>A {@link DAVRepository} instance enforcing all {@link DAVResource}s to  * be XML files.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|XMLRepository
extends|extends
name|DAVRepository
block|{
comment|/**      *<p>Create a new {@link XMLRepository} instance.</p>      */
specifier|public
name|XMLRepository
parameter_list|(
name|File
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Return the {@link DAVResource} associated with a {@link URI}.</p>      */
specifier|public
name|DAVResource
name|getResource
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|XMLResource
argument_list|(
name|this
argument_list|,
name|super
operator|.
name|getResource
argument_list|(
name|uri
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>A simple {@link DAVResource} extension enforcing XML writes.</p>      */
specifier|private
specifier|static
specifier|final
class|class
name|XMLResource
extends|extends
name|DAVResource
block|{
comment|/**          *<p>Create a new {@link XMLResource} instance.</p>          */
specifier|public
name|XMLResource
parameter_list|(
name|XMLRepository
name|repository
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
block|{
name|super
argument_list|(
name|repository
argument_list|,
name|resource
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          *<p>Override the MIME Content-Type to<code>text/xml</code> for          * normal resources.</p>          */
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isResource
argument_list|()
condition|)
return|return
literal|"text/xml"
return|;
return|return
name|super
operator|.
name|getContentType
argument_list|()
return|;
block|}
comment|/**          *<p>Return a {@link DAVOutputStream} enforcing XML formatted data.</p>          */
specifier|public
name|DAVOutputStream
name|write
parameter_list|()
block|{
return|return
operator|new
name|XMLOutputStream
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**      *<p>A simple {@link DAVOutputStream} enforcing XML formatted data.</p>      */
specifier|private
specifier|static
specifier|final
class|class
name|XMLOutputStream
extends|extends
name|DAVOutputStream
block|{
comment|/**          *<p>Create a new {@link XMLOutputStream} instance.</p>          */
specifier|protected
name|XMLOutputStream
parameter_list|(
name|XMLResource
name|resource
parameter_list|)
block|{
name|super
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**          *<p>Ensure that whatever is in the temporary file is XML.</p>          */
specifier|protected
name|void
name|rename
parameter_list|(
name|File
name|temporary
parameter_list|,
name|File
name|original
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|temporary
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|rename
argument_list|(
name|temporary
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|500
argument_list|,
literal|"JAXP parser error"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|415
argument_list|,
literal|"Error parsing data"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

