begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  *<p>The<a href="http://www.rfc-editor.org/rfc/rfc2518.txt">WebDAV</a>  * transactions processor.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVProcessor
block|{
comment|/**<p>All the implemented methods, comma separated.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|METHODS
init|=
literal|"COPY,DELETE,GET,HEAD,MKCOL,MOVE,"
operator|+
literal|"OPTIONS,PROPFIND,PROPPATCH,PUT"
decl_stmt|;
comment|/**<p>A static map of all known webdav methods.</p> */
specifier|private
specifier|static
name|Map
name|INSTANCES
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
comment|/* Load and verify all the known methods */
specifier|final
name|String
name|thisName
init|=
name|DAVProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|packageDelimiter
init|=
name|thisName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
specifier|final
name|String
name|packageName
init|=
name|packageDelimiter
operator|<
literal|1
condition|?
literal|"methods."
else|:
name|thisName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|packageDelimiter
argument_list|)
operator|+
literal|".methods."
decl_stmt|;
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|METHODS
argument_list|,
literal|","
argument_list|)
decl_stmt|;
specifier|final
name|ClassLoader
name|classLoader
init|=
name|DAVProcessor
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
try|try
block|{
specifier|final
name|String
name|method
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|packageName
operator|+
name|method
decl_stmt|;
specifier|final
name|Class
name|clazz
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|INSTANCES
operator|.
name|put
argument_list|(
name|method
argument_list|,
operator|(
name|DAVMethod
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|InternalError
name|error
init|=
operator|new
name|InternalError
argument_list|(
literal|"Error loading method"
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|InternalError
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
comment|/**<p>The {@link DAVRepository} associated with this instance.</p> */
specifier|private
name|DAVRepository
name|repository
init|=
literal|null
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVProcessor} instance.</p>      */
specifier|public
name|DAVProcessor
parameter_list|(
name|DAVRepository
name|repository
parameter_list|)
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
comment|/**      *<p>Process the specified {@link DAVTransaction} fully.</p>      */
specifier|public
name|void
name|process
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|method
init|=
name|transaction
operator|.
name|getMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|INSTANCES
operator|.
name|containsKey
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|transaction
operator|.
name|getNormalizedPath
argument_list|()
decl_stmt|;
name|DAVResource
name|resource
init|=
name|this
operator|.
name|repository
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|DAVMethod
name|instance
init|=
operator|(
operator|(
name|DAVMethod
operator|)
name|INSTANCES
operator|.
name|get
argument_list|(
name|method
argument_list|)
operator|)
decl_stmt|;
name|instance
operator|.
name|process
argument_list|(
name|transaction
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Method \""
operator|+
name|method
operator|+
literal|"\" not implemented"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|501
argument_list|,
name|message
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|DAVException
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|write
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMethod
parameter_list|(
name|String
name|methodKey
parameter_list|,
name|DAVMethod
name|method
parameter_list|)
block|{
name|INSTANCES
operator|.
name|put
argument_list|(
name|methodKey
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

