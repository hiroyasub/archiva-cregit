begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|methods
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVException
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVMethod
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVResource
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVTransaction
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVUtilities
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *<p><a href="http://www.rfc-editor.org/rfc/rfc2518.txt">WebDAV</a>  *<code>PROPFIND</code> metohd implementation.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|PROPFIND
implements|implements
name|DAVMethod
block|{
comment|/**      *<p>Create a new {@link PROPFIND} instance.</p>      */
specifier|public
name|PROPFIND
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Process the<code>PROPFIND</code> method.</p>      */
specifier|public
name|void
name|process
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Check if we have to force a resource not found or a redirection */
if|if
condition|(
name|resource
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|404
argument_list|,
literal|"Not found"
argument_list|,
name|resource
argument_list|)
throw|;
comment|/* Check depth */
name|int
name|depth
init|=
name|transaction
operator|.
name|getDepth
argument_list|()
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|1
condition|)
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Invalid depth"
argument_list|)
expr_stmt|;
comment|/* What to do on a collection resource */
name|transaction
operator|.
name|setStatus
argument_list|(
literal|207
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|setContentType
argument_list|(
literal|"text/xml; charset=\"UTF-8\""
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|transaction
operator|.
name|write
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|/* Output the XML declaration and the root document tag */
name|out
operator|.
name|print
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:multistatus xmlns:D=\"DAV:\">"
argument_list|)
expr_stmt|;
comment|/* Process this resource's property (always) */
name|this
operator|.
name|process
argument_list|(
name|transaction
argument_list|,
name|out
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|/* Process this resource's children (if required) */
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
operator|&&
operator|(
name|depth
operator|>
literal|0
operator|)
condition|)
block|{
name|Iterator
name|children
init|=
name|resource
operator|.
name|getChildren
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DAVResource
name|child
init|=
operator|(
name|DAVResource
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|process
argument_list|(
name|transaction
argument_list|,
name|out
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Close up the XML Multi-Status response */
name|out
operator|.
name|println
argument_list|(
literal|"</D:multistatus>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|process
parameter_list|(
name|DAVTransaction
name|txn
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|DAVResource
name|res
parameter_list|)
block|{
comment|/* The href of the resource is only the absolute path */
name|out
operator|.
name|println
argument_list|(
literal|"<D:response>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:href>"
operator|+
name|txn
operator|.
name|lookup
argument_list|(
name|res
argument_list|)
operator|.
name|getPath
argument_list|()
operator|+
literal|"</D:href>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:propstat>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:prop>"
argument_list|)
expr_stmt|;
comment|/* Figure out what we're dealing with here */
if|if
condition|(
name|res
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|this
operator|.
name|process
argument_list|(
name|out
argument_list|,
literal|"resourcetype"
argument_list|,
literal|"<D:collection/>"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|process
argument_list|(
name|out
argument_list|,
literal|"getcontenttype"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|process
argument_list|(
name|out
argument_list|,
literal|"getetag"
argument_list|,
name|res
operator|.
name|getEntityTag
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|date
init|=
name|DAVUtilities
operator|.
name|formatIsoDate
argument_list|(
name|res
operator|.
name|getCreationDate
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|process
argument_list|(
name|out
argument_list|,
literal|"creationdate"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|String
name|lmod
init|=
name|DAVUtilities
operator|.
name|formatHttpDate
argument_list|(
name|res
operator|.
name|getLastModified
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|process
argument_list|(
name|out
argument_list|,
literal|"getlastmodified"
argument_list|,
name|lmod
argument_list|)
expr_stmt|;
name|String
name|clen
init|=
name|DAVUtilities
operator|.
name|formatNumber
argument_list|(
name|res
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|process
argument_list|(
name|out
argument_list|,
literal|"getcontentlength"
argument_list|,
name|clen
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</D:prop>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:status>HTTP/1.1 200 OK</D:status>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</D:propstat>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</D:response>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|process
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return;
name|out
operator|.
name|print
argument_list|(
literal|"<D:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</D:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

