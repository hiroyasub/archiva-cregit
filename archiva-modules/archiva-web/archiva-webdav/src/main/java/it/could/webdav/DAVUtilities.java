begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  *<p>A collection of static utilities.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DAVUtilities
block|{
comment|/**<p>A {@link HashMap} of configured mime types.</p> */
specifier|private
specifier|static
name|Map
name|MIME_TYPES
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**<p>A {@link HashMap} of configured mime types.</p> */
specifier|private
specifier|static
name|Properties
name|PROPERTIES
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|/**<p>The {@link SimpleDateFormat} RFC-822 date format.</p> */
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_822
init|=
literal|"EEE, dd MMM yyyy HH:mm:ss 'GMT'"
decl_stmt|;
comment|/**<p>The {@link SimpleDateFormat} RFC-822 date format.</p> */
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_ISO
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
decl_stmt|;
comment|/**<p>The {@link TimeZone} to use for dates.</p> */
specifier|private
specifier|static
specifier|final
name|TimeZone
name|TIMEZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
comment|/**<p>The {@link Locale} to use for dates.</p> */
specifier|private
specifier|static
specifier|final
name|Locale
name|LOCALE
init|=
name|Locale
operator|.
name|US
decl_stmt|;
comment|/**      *<p>Load the mime types map from a resource.</p>      */
static|static
block|{
name|Class
name|clazz
init|=
name|DAVUtilities
operator|.
name|class
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|/* Load up the properties file */
name|String
name|webdavPropResource
init|=
literal|"plexus-webdav/webdav.props"
decl_stmt|;
name|InputStream
name|prop
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|webdavPropResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
try|try
block|{
name|DAVUtilities
operator|.
name|PROPERTIES
operator|.
name|load
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|prop
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid resource: "
operator|+
name|webdavPropResource
argument_list|)
expr_stmt|;
block|}
comment|/* Load up the mime types table */
name|String
name|mimeTypeResource
init|=
literal|"plexus-webdav/mime.types"
decl_stmt|;
name|InputStream
name|mime
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|mimeTypeResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
condition|)
try|try
block|{
name|InputStreamReader
name|read
init|=
operator|new
name|InputStreamReader
argument_list|(
name|mime
argument_list|)
decl_stmt|;
name|BufferedReader
name|buff
init|=
operator|new
name|BufferedReader
argument_list|(
name|read
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|buff
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
continue|continue;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|countTokens
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|type
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|extension
init|=
literal|'.'
operator|+
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|DAVUtilities
operator|.
name|MIME_TYPES
operator|.
name|put
argument_list|(
name|extension
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buff
operator|.
name|close
argument_list|()
expr_stmt|;
name|read
operator|.
name|close
argument_list|()
expr_stmt|;
name|mime
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid resource: "
operator|+
name|mimeTypeResource
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**<p>The signature of this package usable from a servlet.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|SERVLET_SIGNATURE
init|=
name|DAVUtilities
operator|.
name|getProperty
argument_list|(
literal|"servlet.signature"
argument_list|)
operator|+
literal|'/'
operator|+
name|DAVUtilities
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
comment|/**<p>The information detail of this package usable from a servlet.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|SERVLET_INFORMATION
init|=
name|DAVUtilities
operator|.
name|getProperty
argument_list|(
literal|"servlet.information"
argument_list|)
operator|+
literal|" version "
operator|+
name|DAVUtilities
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
comment|/**      *<p>Deny public construction of {@link DAVUtilities} instances.</p>      */
specifier|private
name|DAVUtilities
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Return the value of a property configured for this package.</p>      *       * @param name the property name      * @return a {@link String} instance or<b>null</b> if unknown.      */
specifier|public
specifier|static
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|DAVUtilities
operator|.
name|PROPERTIES
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      *<p>Return the MIME Type configured for a given resource.</p>      *       * @param name the resource name whose MIME Type needs to be looked up.      * @return a {@link String} instance or<b>null</b> if the type is unknown.      */
specifier|public
specifier|static
name|String
name|getMimeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Iterator
name|iterator
init|=
name|DAVUtilities
operator|.
name|MIME_TYPES
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|extension
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
name|extension
argument_list|)
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|DAVUtilities
operator|.
name|MIME_TYPES
operator|.
name|get
argument_list|(
name|extension
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      *<p>Return a {@link String} message given an HTTP status code.</p>      */
specifier|public
specifier|static
name|String
name|getStatusMessage
parameter_list|(
name|int
name|status
parameter_list|)
block|{
switch|switch
condition|(
name|status
condition|)
block|{
comment|/* HTTP/1.1 RFC-2616 */
case|case
literal|100
case|:
return|return
literal|"100 Continue"
return|;
case|case
literal|101
case|:
return|return
literal|"101 Switching Protocols"
return|;
case|case
literal|200
case|:
return|return
literal|"200 OK"
return|;
case|case
literal|201
case|:
return|return
literal|"201 Created"
return|;
case|case
literal|202
case|:
return|return
literal|"202 Accepted"
return|;
case|case
literal|203
case|:
return|return
literal|"203 Non-Authoritative Information"
return|;
case|case
literal|204
case|:
return|return
literal|"204 No Content"
return|;
case|case
literal|205
case|:
return|return
literal|"205 Reset Content"
return|;
case|case
literal|206
case|:
return|return
literal|"206 Partial Content"
return|;
case|case
literal|300
case|:
return|return
literal|"300 Multiple Choices"
return|;
case|case
literal|301
case|:
return|return
literal|"301 Moved Permanently"
return|;
case|case
literal|302
case|:
return|return
literal|"302 Found"
return|;
case|case
literal|303
case|:
return|return
literal|"303 See Other"
return|;
case|case
literal|304
case|:
return|return
literal|"304 Not Modified"
return|;
case|case
literal|305
case|:
return|return
literal|"305 Use Proxy"
return|;
case|case
literal|306
case|:
return|return
literal|"306 (Unused)"
return|;
case|case
literal|307
case|:
return|return
literal|"307 Temporary Redirect"
return|;
case|case
literal|400
case|:
return|return
literal|"400 Bad Request"
return|;
case|case
literal|401
case|:
return|return
literal|"401 Unauthorized"
return|;
case|case
literal|402
case|:
return|return
literal|"402 Payment Required"
return|;
case|case
literal|403
case|:
return|return
literal|"403 Forbidden"
return|;
case|case
literal|404
case|:
return|return
literal|"404 Not Found"
return|;
case|case
literal|405
case|:
return|return
literal|"405 Method Not Allowed"
return|;
case|case
literal|406
case|:
return|return
literal|"406 Not Acceptable"
return|;
case|case
literal|407
case|:
return|return
literal|"407 Proxy Authentication Required"
return|;
case|case
literal|408
case|:
return|return
literal|"408 Request Timeout"
return|;
case|case
literal|409
case|:
return|return
literal|"409 Conflict"
return|;
case|case
literal|410
case|:
return|return
literal|"410 Gone"
return|;
case|case
literal|411
case|:
return|return
literal|"411 Length Required"
return|;
case|case
literal|412
case|:
return|return
literal|"412 Precondition Failed"
return|;
case|case
literal|413
case|:
return|return
literal|"413 Request Entity Too Large"
return|;
case|case
literal|414
case|:
return|return
literal|"414 Request-URI Too Long"
return|;
case|case
literal|415
case|:
return|return
literal|"415 Unsupported Media Type"
return|;
case|case
literal|416
case|:
return|return
literal|"416 Requested Range Not Satisfiable"
return|;
case|case
literal|417
case|:
return|return
literal|"417 Expectation Failed"
return|;
case|case
literal|500
case|:
return|return
literal|"500 Internal Server Error"
return|;
case|case
literal|501
case|:
return|return
literal|"501 Not Implemented"
return|;
case|case
literal|502
case|:
return|return
literal|"502 Bad Gateway"
return|;
case|case
literal|503
case|:
return|return
literal|"503 Service Unavailable"
return|;
case|case
literal|504
case|:
return|return
literal|"504 Gateway Timeout"
return|;
case|case
literal|505
case|:
return|return
literal|"505 HTTP Version Not Supported"
return|;
comment|/* DAV/1.0 RFC-2518 */
case|case
literal|102
case|:
return|return
literal|"102 Processing"
return|;
case|case
literal|207
case|:
return|return
literal|"207 Multi-Status"
return|;
case|case
literal|422
case|:
return|return
literal|"422 Unprocessable Entity"
return|;
case|case
literal|423
case|:
return|return
literal|"423 Locked"
return|;
case|case
literal|424
case|:
return|return
literal|"424 Failed Dependency"
return|;
case|case
literal|507
case|:
return|return
literal|"507 Insufficient Storage"
return|;
comment|/* Unknown */
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Format a {@link Number} into a {@link String} making sure that      * {@link NullPointerException}s are not thrown.</p>      *       * @param number the {@link Number} to format.      * @return a {@link String} instance or<b>null</b> if the object was null.      */
specifier|public
specifier|static
name|String
name|formatNumber
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|number
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
comment|/**      *<p>Parse a {@link String} into a {@link Long}.</p>      *       * @param string the {@link String} to parse.      * @return a {@link Long} instance or<b>null</b> if the date was null or      *         if there was an error parsing the specified {@link String}.      */
specifier|public
specifier|static
name|Long
name|parseNumber
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
operator|new
name|Long
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Format a {@link Date} according to the HTTP/1.1 RFC.</p>      *       * @param date the {@link Date} to format.      * @return a {@link String} instance or<b>null</b> if the date was null.      */
specifier|public
specifier|static
name|String
name|formatHttpDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_822
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
return|return
name|formatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**      *<p>Format a {@link Date} according to the ISO 8601 specification.</p>      *       * @param date the {@link Date} to format.      * @return a {@link String} instance or<b>null</b> if the date was null.      */
specifier|public
specifier|static
name|String
name|formatIsoDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_ISO
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
return|return
name|formatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**      *<p>Parse a {@link String} into a {@link Date} according to the      * HTTP/1.1 RFC (<code>Mon, 31 Jan 2000 11:59:00 GMT</code>).</p>      *       * @param string the {@link String} to parse.      * @return a {@link Date} instance or<b>null</b> if the date was null or      *         if there was an error parsing the specified {@link String}.      */
specifier|public
specifier|static
name|Date
name|parseHttpDate
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_822
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|formatter
operator|.
name|parse
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exception
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Parse a {@link String} into a {@link Date} according to the ISO 8601      * specification (<code>2000-12-31T11:59:00Z</code>).</p>      *       * @param string the {@link String} to parse.      * @return a {@link Date} instance or<b>null</b> if the date was null or      *         if there was an error parsing the specified {@link String}.      */
specifier|public
specifier|static
name|Date
name|parseIsoDate
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_ISO
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|formatter
operator|.
name|parse
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exception
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Return the HEX representation of an array of bytes.</p>      *       * @param buffer the array of bytes to convert in a HEX {@link String}.      * @return a<b>non-null</b> {@link String} instance.      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|byte
name|buffer
index|[]
parameter_list|)
block|{
name|char
name|output
index|[]
init|=
operator|new
name|char
index|[
name|buffer
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|buffer
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|output
index|[
name|position
operator|++
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
name|buffer
index|[
name|x
index|]
operator|>>
literal|4
argument_list|)
expr_stmt|;
name|output
index|[
name|position
operator|++
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|)
return|;
block|}
comment|/**      *<p>Return the HEX representation of a long integer.</p>      *       * @param number the long to convert in a HEX {@link String}.      * @return a<b>non-null</b> 16-characters {@link String} instance.      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|long
name|number
parameter_list|)
block|{
name|char
name|output
index|[]
init|=
operator|new
name|char
index|[
literal|16
index|]
decl_stmt|;
name|output
index|[
literal|0
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|60
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|1
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|56
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|2
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|52
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|3
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|48
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|4
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|44
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|5
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|40
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|6
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|36
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|7
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|8
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|28
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|9
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|24
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|10
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|20
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|11
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|16
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|12
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|13
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|14
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|15
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|)
return|;
block|}
comment|/**      *<p>Return the HEX representation of an integer.</p>      *       * @param number the int to convert in a HEX {@link String}.      * @return a<b>non-null</b> 8-characters {@link String} instance.      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|char
name|output
index|[]
init|=
operator|new
name|char
index|[
literal|8
index|]
decl_stmt|;
name|output
index|[
literal|0
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|28
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|1
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|24
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|2
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|20
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|3
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|16
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|4
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|5
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|6
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|7
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|)
return|;
block|}
comment|/**      *<p>Return the HEX representation of a char.</p>      *       * @param number the char to convert in a HEX {@link String}.      * @return a<b>non-null</b> 4-characters {@link String} instance.      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|char
name|number
parameter_list|)
block|{
name|char
name|output
index|[]
init|=
operator|new
name|char
index|[
literal|4
index|]
decl_stmt|;
name|output
index|[
literal|0
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|1
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|2
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|3
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|)
return|;
block|}
comment|/**      *<p>Return the HEX representation of a byte.</p>      *       * @param number the byte to convert in a HEX {@link String}.      * @return a<b>non-null</b> 2-characters {@link String} instance.      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|byte
name|number
parameter_list|)
block|{
name|char
name|output
index|[]
init|=
operator|new
name|char
index|[
literal|2
index|]
decl_stmt|;
name|output
index|[
literal|0
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|output
index|[
literal|1
index|]
operator|=
name|DAVUtilities
operator|.
name|toHexDigit
argument_list|(
operator|(
name|int
operator|)
operator|(
name|number
operator|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|)
return|;
block|}
comment|/**      *<p>Return the single digit character representing the HEX encoding of      * the lower four bits of a given integer.</p>      */
specifier|private
specifier|static
name|char
name|toHexDigit
parameter_list|(
name|int
name|number
parameter_list|)
block|{
switch|switch
condition|(
name|number
operator|&
literal|0x0F
condition|)
block|{
case|case
literal|0x00
case|:
return|return
literal|'0'
return|;
case|case
literal|0x01
case|:
return|return
literal|'1'
return|;
case|case
literal|0x02
case|:
return|return
literal|'2'
return|;
case|case
literal|0x03
case|:
return|return
literal|'3'
return|;
case|case
literal|0x04
case|:
return|return
literal|'4'
return|;
case|case
literal|0x05
case|:
return|return
literal|'5'
return|;
case|case
literal|0x06
case|:
return|return
literal|'6'
return|;
case|case
literal|0x07
case|:
return|return
literal|'7'
return|;
case|case
literal|0x08
case|:
return|return
literal|'8'
return|;
case|case
literal|0x09
case|:
return|return
literal|'9'
return|;
case|case
literal|0x0A
case|:
return|return
literal|'A'
return|;
case|case
literal|0x0B
case|:
return|return
literal|'B'
return|;
case|case
literal|0x0C
case|:
return|return
literal|'C'
return|;
case|case
literal|0x0D
case|:
return|return
literal|'D'
return|;
case|case
literal|0x0E
case|:
return|return
literal|'E'
return|;
case|case
literal|0x0F
case|:
return|return
literal|'F'
return|;
block|}
name|String
name|message
init|=
literal|"Invalid HEX digit "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|number
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

