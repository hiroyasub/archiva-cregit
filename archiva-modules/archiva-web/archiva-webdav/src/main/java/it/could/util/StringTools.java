begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|util
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|encoding
operator|.
name|Encodable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  *<p>An utility class providing various static methods operating on  * {@link String}s.</p>  *   *<p>This class implement the {@link Encodable} interface from which it  * inherits its {@link Encodable#DEFAULT_ENCODING default encoding}.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|StringTools
block|{
comment|/**<p>The {@link SimpleDateFormat} RFC-822 date format.</p> */
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_822
init|=
literal|"EEE, dd MMM yyyy HH:mm:ss 'GMT'"
decl_stmt|;
comment|/**<p>The {@link SimpleDateFormat} RFC-822 date format.</p> */
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_ISO
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
decl_stmt|;
comment|/**<p>The {@link TimeZone} to use for dates.</p> */
specifier|private
specifier|static
specifier|final
name|TimeZone
name|TIMEZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
comment|/**<p>The {@link Locale} to use for dates.</p> */
specifier|private
specifier|static
specifier|final
name|Locale
name|LOCALE
init|=
name|Locale
operator|.
name|US
decl_stmt|;
comment|/**<p>Deny construction.</p> */
specifier|private
name|StringTools
parameter_list|()
block|{
block|}
comment|/* ====================================================================== */
comment|/* NUMBER AND DATE PARSING AND FORMATTING                                 */
comment|/* ====================================================================== */
comment|/**      *<p>Format a {@link Number} into a {@link String} making sure that      * {@link NullPointerException}s are not thrown.</p>      *       * @param number the {@link Number} to format.      * @return a {@link String} instance or<b>null</b> if the object was null.      */
specifier|public
specifier|static
name|String
name|formatNumber
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|number
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
comment|/**      *<p>Parse a {@link String} into a {@link Long}.</p>      *       * @param string the {@link String} to parse.      * @return a {@link Long} instance or<b>null</b> if the date was null or      *         if there was an error parsing the specified {@link String}.      */
specifier|public
specifier|static
name|Long
name|parseNumber
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
operator|new
name|Long
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Format a {@link Date} according to the HTTP/1.1 RFC.</p>      *       * @param date the {@link Date} to format.      * @return a {@link String} instance or<b>null</b> if the date was null.      */
specifier|public
specifier|static
name|String
name|formatHttpDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_822
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
return|return
name|formatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**      *<p>Format a {@link Date} according to the ISO 8601 specification.</p>      *       * @param date the {@link Date} to format.      * @return a {@link String} instance or<b>null</b> if the date was null.      */
specifier|public
specifier|static
name|String
name|formatIsoDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_ISO
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
return|return
name|formatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**      *<p>Parse a {@link String} into a {@link Date} according to the      * HTTP/1.1 RFC (<code>Mon, 31 Jan 2000 11:59:00 GMT</code>).</p>      *       * @param string the {@link String} to parse.      * @return a {@link Date} instance or<b>null</b> if the date was null or      *         if there was an error parsing the specified {@link String}.      */
specifier|public
specifier|static
name|Date
name|parseHttpDate
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_822
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|formatter
operator|.
name|parse
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exception
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Parse a {@link String} into a {@link Date} according to the ISO 8601      * specification (<code>2000-12-31T11:59:00Z</code>).</p>      *       * @param string the {@link String} to parse.      * @return a {@link Date} instance or<b>null</b> if the date was null or      *         if there was an error parsing the specified {@link String}.      */
specifier|public
specifier|static
name|Date
name|parseIsoDate
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FORMAT_ISO
argument_list|,
name|LOCALE
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|formatter
operator|.
name|parse
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exception
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/* ====================================================================== */
comment|/* STRING SPLITTING                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>Split the specified string in two parts according to the specified      * delimiter, and any resulting path of zero length will be converted to      *<b>null</b>.</p>      */
specifier|public
specifier|static
name|String
index|[]
name|splitOnce
parameter_list|(
name|String
name|source
parameter_list|,
name|char
name|delimiter
parameter_list|,
name|boolean
name|noDelimReturnSecond
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|}
return|;
specifier|final
name|int
name|position
init|=
name|source
operator|.
name|indexOf
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|<
literal|0
condition|)
block|{
comment|// --> first
if|if
condition|(
name|noDelimReturnSecond
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|null
block|,
name|source
block|}
return|;
else|else
return|return
operator|new
name|String
index|[]
block|{
name|source
block|,
literal|null
block|}
return|;
block|}
if|else if
condition|(
name|position
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|source
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// --> |
return|return
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|}
return|;
block|}
else|else
block|{
comment|// --> |second
return|return
operator|new
name|String
index|[]
block|{
literal|null
block|,
name|source
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
block|}
return|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|first
init|=
name|source
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|==
name|position
condition|)
block|{
comment|// --> first|
return|return
operator|new
name|String
index|[]
block|{
name|first
block|,
literal|null
block|}
return|;
block|}
else|else
block|{
comment|// --> first|second
return|return
operator|new
name|String
index|[]
block|{
name|first
block|,
name|source
operator|.
name|substring
argument_list|(
name|position
operator|+
literal|1
argument_list|)
block|}
return|;
block|}
block|}
block|}
comment|/**      *<p>Split the specified string according to the specified delimiter, and      * any resulting path of zero length will be converted to<b>null</b>.</p>      */
specifier|public
specifier|static
name|String
index|[]
name|splitAll
parameter_list|(
name|String
name|source
parameter_list|,
name|char
name|delimiter
parameter_list|)
block|{
specifier|final
name|List
name|strings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|current
init|=
name|source
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|String
name|split
index|[]
init|=
name|splitOnce
argument_list|(
name|current
argument_list|,
name|delimiter
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|strings
operator|.
name|add
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|current
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
name|strings
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|source
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|length
operator|>
literal|0
operator|)
operator|&&
operator|(
name|source
operator|.
name|charAt
argument_list|(
name|length
operator|-
literal|1
argument_list|)
operator|==
name|delimiter
operator|)
condition|)
block|{
name|strings
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|strings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|strings
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      *<p>Find the first occurrence of one of the specified delimiter characters      * in the specified source string.</p>      */
specifier|public
specifier|static
name|int
name|findFirst
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|delimiters
parameter_list|)
block|{
specifier|final
name|char
name|array
index|[]
init|=
name|source
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|final
name|char
name|delim
index|[]
init|=
name|delimiters
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|array
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|delim
operator|.
name|length
condition|;
name|y
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|x
index|]
operator|==
name|delim
index|[
name|y
index|]
condition|)
return|return
name|x
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

