begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  *<p>A simple wrapper isolating the Java Servlet API from this  *<a href="http://www.rfc-editor.org/rfc/rfc2518.txt">WebDAV</a>  * implementation.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVTransaction
block|{
comment|/**      *<p>The identifyication of the<code>infinity</code> value      * in the<code>Depth</code> header.</p>      */
specifier|public
specifier|static
specifier|final
name|int
name|INFINITY
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**<p>The nested {@link HttpServletRequest}.</p> */
specifier|private
name|HttpServletRequest
name|request
init|=
literal|null
decl_stmt|;
comment|/**<p>The nested {@link HttpServletResponse}.</p> */
specifier|private
name|HttpServletResponse
name|response
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link URI} associated with the base of the repository.</p> */
specifier|private
name|URI
name|base
init|=
literal|null
decl_stmt|;
comment|/**<p>The status for the HTTP response.</p> */
specifier|private
name|int
name|status
init|=
operator|-
literal|1
decl_stmt|;
comment|/* ====================================================================== */
comment|/* Constructors                                                           */
comment|/* ====================================================================== */
comment|/**      *<p>Create a new {@link DAVTransaction} instance.</p>      */
specifier|public
name|DAVTransaction
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null request"
argument_list|)
throw|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null response"
argument_list|)
throw|;
name|this
operator|.
name|request
operator|=
operator|(
name|HttpServletRequest
operator|)
name|request
expr_stmt|;
name|this
operator|.
name|response
operator|=
operator|(
name|HttpServletResponse
operator|)
name|response
expr_stmt|;
name|this
operator|.
name|response
operator|.
name|setHeader
argument_list|(
literal|"DAV"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|response
operator|.
name|setHeader
argument_list|(
literal|"MS-Author-Via"
argument_list|,
literal|"DAV"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|scheme
init|=
name|this
operator|.
name|request
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|this
operator|.
name|request
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|this
operator|.
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
name|this
operator|.
name|request
operator|.
name|getServletPath
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|this
operator|.
name|request
operator|.
name|getServerPort
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|path
operator|+=
literal|"/"
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|this
operator|.
name|base
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to create base URI"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/* ====================================================================== */
comment|/* Request methods                                                        */
comment|/* ====================================================================== */
comment|/**      *<p>Return the path originally requested by the client.</p>      */
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
operator|.
name|getMethod
argument_list|()
return|;
block|}
comment|/**      *<p>Return the path originally requested by the client.</p>      */
specifier|public
name|String
name|getOriginalPath
parameter_list|()
block|{
name|String
name|path
init|=
name|this
operator|.
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
operator|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|)
operator|&&
operator|(
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|path
return|;
block|}
block|}
comment|/**      *<p>Return the path originally requested by the client.</p>      */
specifier|public
name|String
name|getNormalizedPath
parameter_list|()
block|{
specifier|final
name|String
name|path
init|=
name|this
operator|.
name|getOriginalPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
return|return
name|path
return|;
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      *<p>Return the depth requested by the client for this transaction.</p>      */
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
name|String
name|depth
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Depth"
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|null
condition|)
return|return
name|INFINITY
return|;
if|if
condition|(
literal|"infinity"
operator|.
name|equalsIgnoreCase
argument_list|(
name|depth
argument_list|)
condition|)
return|return
name|INFINITY
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|depth
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|412
argument_list|,
literal|"Unable to parse depth"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Return a {@link URI}       */
specifier|public
name|URI
name|getDestination
parameter_list|()
block|{
name|String
name|destination
init|=
name|this
operator|.
name|request
operator|.
name|getHeader
argument_list|(
literal|"Destination"
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
try|try
block|{
return|return
name|this
operator|.
name|base
operator|.
name|relativize
argument_list|(
operator|new
name|URI
argument_list|(
name|destination
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|412
argument_list|,
literal|"Can't parse destination"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *<p>Return the overwrite flag requested by the client for this      * transaction.</p>      */
specifier|public
name|boolean
name|getOverwrite
parameter_list|()
block|{
name|String
name|overwrite
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Overwrite"
argument_list|)
decl_stmt|;
if|if
condition|(
name|overwrite
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"T"
operator|.
name|equals
argument_list|(
name|overwrite
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"F"
operator|.
name|equals
argument_list|(
name|overwrite
argument_list|)
condition|)
return|return
literal|false
return|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|412
argument_list|,
literal|"Unable to parse overwrite flag"
argument_list|)
throw|;
block|}
comment|/**      *<p>Check if the client requested a date-based conditional operation.</p>      */
specifier|public
name|Date
name|getIfModifiedSince
parameter_list|()
block|{
name|String
name|name
init|=
literal|"If-Modified-Since"
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|request
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Date
argument_list|(
name|this
operator|.
name|request
operator|.
name|getDateHeader
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* Response methods                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>Set the HTTP status code of the response.</p>      */
specifier|public
name|void
name|setStatus
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
operator|.
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
comment|/**      *<p>Set the HTTP status code of the response.</p>      */
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
comment|/**      *<p>Set the HTTP<code>Content-Type</code> header.</p>      */
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|response
operator|.
name|setContentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Set an HTTP header in the response.</p>      */
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|response
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* ====================================================================== */
comment|/* I/O methods                                                            */
comment|/* ====================================================================== */
comment|/**      *<p>Check if there is a body in the request.</p>      *       *<p>This method differs from checking if the return value of the      * {@link #read()} method is not<b>null</b> as a request body of length      * zero will return<b>false</b> in this case, while in the {@link #read()}      * method will return an empty {@link InputStream}.</p>      */
specifier|public
name|boolean
name|hasRequestBody
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* We don't support ranges */
if|if
condition|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Range"
argument_list|)
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|501
argument_list|,
literal|"Content-Range not supported"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|request
operator|.
name|getContentLength
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
name|String
name|len
init|=
name|this
operator|.
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|null
condition|)
try|try
block|{
return|return
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|len
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|411
argument_list|,
literal|"Invalid Content-Length specified"
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      *<p>Read from the body of the original request.</p>      */
specifier|public
name|InputStream
name|read
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* We don't support ranges */
if|if
condition|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Range"
argument_list|)
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|501
argument_list|,
literal|"Content-Range not supported"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|request
operator|.
name|getContentLength
argument_list|()
operator|>=
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|request
operator|.
name|getInputStream
argument_list|()
return|;
block|}
name|String
name|len
init|=
name|this
operator|.
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|null
condition|)
try|try
block|{
if|if
condition|(
name|Long
operator|.
name|parseLong
argument_list|(
name|len
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|this
operator|.
name|request
operator|.
name|getInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|411
argument_list|,
literal|"Invalid Content-Length specified"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *<p>Write the body of the response.</p>      */
specifier|public
name|OutputStream
name|write
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|response
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
comment|/**      *<p>Write the body of the response.</p>      */
specifier|public
name|PrintWriter
name|write
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|this
operator|.
name|write
argument_list|()
argument_list|,
name|encoding
argument_list|)
argument_list|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* Lookup methods                                                         */
comment|/* ====================================================================== */
comment|/**      *<p>Look up the final URI of a {@link DAVResource} as visible from the      * HTTP client requesting this transaction.</p>      */
specifier|public
name|URI
name|lookup
parameter_list|(
name|DAVResource
name|resource
parameter_list|)
block|{
name|URI
name|uri
init|=
name|resource
operator|.
name|getRelativeURI
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|base
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
operator|.
name|normalize
argument_list|()
return|;
block|}
block|}
end_class

end_unit

