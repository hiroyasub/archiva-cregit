begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|http
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|StreamTools
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|StringTools
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|location
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|location
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  *<p>A class implementing an extremely simple WebDAV Level 1 client based on  * the {@link HttpClient}.</p>  *   *<p>Once opened this class will represent a WebDAV collection. Users of this  * class can then from an instance of this, deal with relative parent and  * children resources.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|WebDavClient
block|{
comment|/**<p>The WebDAV resource asociated with this instance.</p> */
specifier|private
name|Resource
name|resource
decl_stmt|;
comment|/**<p>A map of children resources of this instance.</p> */
specifier|private
name|Map
name|children
decl_stmt|;
comment|/**      *<p>Create a new {@link WebDavClient} instance opening the collection      * identified by the specified {@link Location}.</p>      *       * @param location the {@link Location} of the WebDAV collection to open.      * @throws IOException if an I/O or network error occurred, or if the      *                     {@link Location} specified does not point to a      *                     WebDAV collection.      * @throws NullPointerException if the {@link Location} was<b>null</b>.      */
specifier|public
name|WebDavClient
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IOException
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null location"
argument_list|)
throw|;
name|this
operator|.
name|reload
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/* ====================================================================== */
comment|/* ACTIONS                                                                */
comment|/* ====================================================================== */
comment|/**      *<p>Refresh this {@link WebDavClient} instance re-connecting to the remote      * collection and re-reading its properties.</p>      *       * @return this {@link WebDavClient} instance.      */
specifier|public
name|WebDavClient
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|reload
argument_list|(
name|this
operator|.
name|resource
operator|.
name|location
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>Fetch the contents of the specified child resource of the collection      * represented by this {@link WebDavClient} instance.</p>      *       * @see #isCollection(String)      * @return a<b>non-null</b> {@link InputStream}.      * @throws IOException if an I/O or network error occurred, or if the      *                     child specified represents a collection.      * @throws NullPointerException if the child was<b>null</b>.      */
specifier|public
name|InputStream
name|get
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IOException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null child"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|this
operator|.
name|isCollection
argument_list|(
name|child
argument_list|)
condition|)
block|{
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|getLocation
argument_list|(
name|child
argument_list|)
decl_stmt|;
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAcceptableStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|connect
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getResponseStream
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Child \""
operator|+
name|child
operator|+
literal|"\" is a collection"
argument_list|)
throw|;
block|}
comment|/**      *<p>Delete the child resource (or collection) of the collection      * represented by this {@link WebDavClient} instance.</p>      *       * @return this {@link WebDavClient} instance.      * @throws IOException if an I/O or network error occurred, or if the      *                     child specified represents a collection.      * @throws NullPointerException if the child was<b>null</b>.      */
specifier|public
name|WebDavClient
name|delete
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IOException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null child"
argument_list|)
throw|;
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|this
operator|.
name|getLocation
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAcceptableStatus
argument_list|(
literal|204
argument_list|)
operator|.
name|connect
argument_list|(
literal|"DELETE"
argument_list|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|refresh
argument_list|()
return|;
block|}
comment|/**      *<p>Create a new collection as a child of the collection represented      * by this {@link WebDavClient} instance.</p>      *       *<p>In comparison to {@link #put(String)} and {@link #put(String, long)}      * this method will fail if the specified child already exist.</p>      *       * @see #hasChild(String)      * @return this {@link WebDavClient} instance.      * @throws IOException if an I/O or network error occurred, or if the      *                     child specified already exist.      * @throws NullPointerException if the child was<b>null</b>.      */
specifier|public
name|WebDavClient
name|mkcol
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IOException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null child"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|hasChild
argument_list|(
name|child
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Child \""
operator|+
name|child
operator|+
literal|"\" already exists"
argument_list|)
throw|;
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|resource
operator|.
name|location
operator|.
name|resolve
argument_list|(
name|child
argument_list|)
decl_stmt|;
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAcceptableStatus
argument_list|(
literal|201
argument_list|)
operator|.
name|connect
argument_list|(
literal|"MKCOL"
argument_list|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|refresh
argument_list|()
return|;
block|}
comment|/**      *<p>Create a new (or update the contents of a) child of of the collection      * represented by this {@link WebDavClient} instance.</p>      *       *<p>This method will behave exactly like the {@link #put(String, long)}      * method, but the data written to the returned {@link OutputStream} will      * be<i>buffered in memory</i> and will be transmitted to the remote      * server only when the {@link OutputStream#close()} method is called.</p>      *       *<p>If the returned {@link OutputStream} is garbage collected before the      * {@link OutputStream#close() close()} method is called, the entire      * transaction will be aborted and no connection to the remote server will      * be established.</p>      *       *<p>Use this method in extreme cases. In normal circumstances always rely      * on the {@link #put(String, long)} method.</p>      *       * @see #put(String, long)      * @return a<b>non-null</b> {@link OutputStream} instance.      * @throws NullPointerException if the child was<b>null</b>.      */
specifier|public
name|OutputStream
name|put
parameter_list|(
specifier|final
name|String
name|child
parameter_list|)
throws|throws
name|NullPointerException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null child"
argument_list|)
throw|;
specifier|final
name|WebDavClient
name|client
init|=
name|this
decl_stmt|;
return|return
operator|new
name|ByteArrayOutputStream
argument_list|()
block|{
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
return|return;
name|this
operator|.
name|flush
argument_list|()
expr_stmt|;
name|OutputStream
name|output
init|=
name|client
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|this
operator|.
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|this
operator|.
name|buf
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      *<p>Create a new (or update the contents of a) child of of the collection      * represented by this {@link WebDavClient} instance.</p>      *       *<p>If the specified child {@link #hasChild(String) already exists} on      * the remote server, it will be {@link #delete(String) deleted} before      * writing.</p>      *       * @return a<b>non-null</b> {@link OutputStream} instance.      * @throws NullPointerException if the child was<b>null</b>.      * @throws IOException if an I/O or network error occurred, or if the      *                     child specified already exist.      */
specifier|public
name|OutputStream
name|put
parameter_list|(
name|String
name|child
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IOException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null child"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|hasChild
argument_list|(
name|child
argument_list|)
condition|)
name|this
operator|.
name|delete
argument_list|(
name|child
argument_list|)
expr_stmt|;
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|resource
operator|.
name|location
operator|.
name|resolve
argument_list|(
name|child
argument_list|)
decl_stmt|;
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAcceptableStatuses
argument_list|(
operator|new
name|int
index|[]
block|{
literal|201
block|,
literal|204
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|connect
argument_list|(
literal|"PUT"
argument_list|,
name|length
argument_list|)
expr_stmt|;
specifier|final
name|WebDavClient
name|webdav
init|=
name|this
decl_stmt|;
return|return
operator|new
name|BufferedOutputStream
argument_list|(
name|client
operator|.
name|getRequestStream
argument_list|()
argument_list|)
block|{
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
return|return;
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|webdav
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
comment|/**      *<p>Open the specified child collection of the collection represented by      * this {@link WebDavClient} as a new {@link WebDavClient} instance.</p>      *       *<p>If the specified child is&quot;<code>.</code>&quot; this method      * will behave exactly like {@link #refresh()} and<i>this instance</i>      * will be returned.</p>      *       *<p>If the specified child is&quot;<code>..</code>&quot; this method      * will behave exactly like {@link #parent()}.</p>      *      * @return a<b>non-null</b> {@link WebDavClient} instance.      * @throws NullPointerException if the child was<b>null</b>.      * @throws IOException if an I/O or network error occurred, or if the      *                     child specified did not exist.      */
specifier|public
name|WebDavClient
name|open
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IOException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null child"
argument_list|)
throw|;
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
return|return
name|this
operator|.
name|refresh
argument_list|()
return|;
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
return|return
name|this
operator|.
name|parent
argument_list|()
return|;
if|if
condition|(
name|resource
operator|.
name|collection
condition|)
block|{
name|Location
name|loc
init|=
name|this
operator|.
name|getLocation
argument_list|()
operator|.
name|resolve
argument_list|(
name|this
operator|.
name|getLocation
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|WebDavClient
argument_list|(
name|loc
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Child \""
operator|+
name|child
operator|+
literal|"\" is not a collection"
argument_list|)
throw|;
block|}
comment|/**      *<p>Open the parent collection of the collection represented by this      * {@link WebDavClient} as a new {@link WebDavClient} instance.</p>      *      * @return a<b>non-null</b> {@link WebDavClient} instance.      * @throws IOException if an I/O or network error occurred, or if the      *                     child specified did not exist.      */
specifier|public
name|WebDavClient
name|parent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|resource
operator|.
name|location
operator|.
name|resolve
argument_list|(
literal|".."
argument_list|)
decl_stmt|;
return|return
operator|new
name|WebDavClient
argument_list|(
name|location
argument_list|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* ACCESSOR METHODS                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>Return an {@link Iterator} over {@link String}s for all the children      * of the collection represented by this {@link WebDavClient} instance.</p>      */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|this
operator|.
name|children
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      *<p>Checks if the collection represented by this {@link WebDavClient}      * contains the specified child.</p>      */
specifier|public
name|boolean
name|hasChild
parameter_list|(
name|String
name|child
parameter_list|)
block|{
return|return
name|this
operator|.
name|children
operator|.
name|containsKey
argument_list|(
name|child
argument_list|)
return|;
block|}
comment|/**      *<p>Return the {@link Location} associated with the collection      * represented by this {@link WebDavClient}.</p>      *      *<p>The returned {@link Location} can be different from the one specified      * at construction, in case the server redirected us upon connection.</p>      */
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
operator|.
name|location
return|;
block|}
comment|/**      *<p>Return the content length (in bytes) of the collection represented      * by this {@link WebDavClient} as passed to us by the WebDAV server.</p>      */
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
operator|.
name|contentLength
return|;
block|}
comment|/**      *<p>Return the content type (mime-type) of the collection represented      * by this {@link WebDavClient} as passed to us by the WebDAV server.</p>      */
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
operator|.
name|contentType
return|;
block|}
comment|/**      *<p>Return the last modified {@link Date} of the collection represented      * by this {@link WebDavClient} as passed to us by the WebDAV server.</p>      */
specifier|public
name|Date
name|getLastModified
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
operator|.
name|lastModified
return|;
block|}
comment|/**      *<p>Return the creation {@link Date} of the collection represented      * by this {@link WebDavClient} as passed to us by the WebDAV server.</p>      */
specifier|public
name|Date
name|getCreationDate
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
operator|.
name|creationDate
return|;
block|}
comment|/**      *<p>Return the {@link Location} associated with the specified child of      * the collection represented by this {@link WebDavClient}.</p>      *      * @throws IOException if the specified child does not exist.      * @throws NullPointerException if the specified child was<b>null</b>.      */
specifier|public
name|Location
name|getLocation
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|location
init|=
name|this
operator|.
name|getResource
argument_list|(
name|child
argument_list|)
operator|.
name|location
decl_stmt|;
return|return
name|this
operator|.
name|resource
operator|.
name|location
operator|.
name|resolve
argument_list|(
name|location
argument_list|)
return|;
block|}
comment|/**      *<p>Checks if the specified child of the collection represented by this      * {@link WebDavClient} instance is a collection.</p>      */
specifier|public
name|boolean
name|isCollection
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|getResource
argument_list|(
name|child
argument_list|)
operator|.
name|collection
return|;
block|}
comment|/**      *<p>Return the content length (in bytes) associated with the specified      * child of the collection represented by this {@link WebDavClient}.</p>      *      * @throws IOException if the specified child does not exist.      * @throws NullPointerException if the specified child was<b>null</b>.      */
specifier|public
name|long
name|getContentLength
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|getResource
argument_list|(
name|child
argument_list|)
operator|.
name|contentLength
return|;
block|}
comment|/**      *<p>Return the content type (mime-type) associated with the specified      * child of the collection represented by this {@link WebDavClient}.</p>      *      * @throws IOException if the specified child does not exist.      * @throws NullPointerException if the specified child was<b>null</b>.      */
specifier|public
name|String
name|getContentType
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|getResource
argument_list|(
name|child
argument_list|)
operator|.
name|contentType
return|;
block|}
comment|/**      *<p>Return the last modified {@link Date} associated with the specified      * child of the collection represented by this {@link WebDavClient}.</p>      *      * @throws IOException if the specified child does not exist.      * @throws NullPointerException if the specified child was<b>null</b>.      */
specifier|public
name|Date
name|getLastModified
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|getResource
argument_list|(
name|child
argument_list|)
operator|.
name|lastModified
return|;
block|}
comment|/**      *<p>Return the creation {@link Date} associated with the specified      * child of the collection represented by this {@link WebDavClient}.</p>      *      * @throws IOException if the specified child does not exist.      * @throws NullPointerException if the specified child was<b>null</b>.      */
specifier|public
name|Date
name|getCreationDate
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|getResource
argument_list|(
name|child
argument_list|)
operator|.
name|creationDate
return|;
block|}
comment|/* ====================================================================== */
comment|/* INTERNAL METHODS                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>Return the resource associated with the specified child.</p>      *      * @throws IOException if the specified child does not exist.      * @throws NullPointerException if the specified child was<b>null</b>.      */
specifier|private
name|Resource
name|getResource
parameter_list|(
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
specifier|final
name|Resource
name|resource
init|=
operator|(
name|Resource
operator|)
name|this
operator|.
name|children
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not found: "
operator|+
name|child
argument_list|)
throw|;
return|return
name|resource
return|;
block|}
comment|/**      *<p>Contact the remote WebDAV server and fetch all properties.</p>      */
specifier|private
name|void
name|reload
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Do an OPTIONS over onto the location */
name|location
operator|=
name|this
operator|.
name|options
argument_list|(
name|location
argument_list|)
expr_stmt|;
comment|/* Do a PROPFIND to figure out the properties and the children */
specifier|final
name|Iterator
name|iterator
init|=
name|this
operator|.
name|propfind
argument_list|(
name|location
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Map
name|children
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|resource
init|=
operator|(
name|Resource
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|resource
operator|.
name|location
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resource
operator|.
name|location
operator|=
name|location
operator|.
name|resolve
argument_list|(
name|resource
operator|.
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
if|else if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Path
operator|.
name|Element
name|element
init|=
operator|(
name|Path
operator|.
name|Element
operator|)
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|children
operator|.
name|put
argument_list|(
name|element
operator|.
name|toString
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Check if the current resource was discovered */
if|if
condition|(
name|this
operator|.
name|resource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Current resource not returned in PROOPFIND"
argument_list|)
throw|;
comment|/* Don't actually allow resources to be modified */
name|this
operator|.
name|children
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Contact the remote WebDAV server and do an OPTIONS lookup.</p>      */
specifier|private
name|Location
name|options
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Create the new HttpClient instance associated with the location */
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAcceptableStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|connect
argument_list|(
literal|"OPTIONS"
argument_list|,
literal|true
argument_list|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|/* Check that the remote server returned the "Dav" header */
specifier|final
name|List
name|davHeader
init|=
name|client
operator|.
name|getResponseHeaderValues
argument_list|(
literal|"dav"
argument_list|)
decl_stmt|;
if|if
condition|(
name|davHeader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server did not respond with a DAV header"
argument_list|)
throw|;
block|}
comment|/* Check if the OPTIONS request contained the DAV header */
specifier|final
name|Iterator
name|iterator
init|=
name|davHeader
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|foundLevel1
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
operator|!
name|foundLevel1
operator|)
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
literal|"1"
operator|.
name|equals
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
continue|continue;
name|foundLevel1
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|/* Return the (possibly redirected) location or fail miserably */
if|if
condition|(
name|foundLevel1
condition|)
return|return
name|client
operator|.
name|getLocation
argument_list|()
return|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server doesn't support DAV Level 1"
argument_list|)
throw|;
block|}
comment|/**      *<p>Contact the remote WebDAV server and do a PROPFIND lookup, returning      * a {@link List} of all scavenged resources.</p>      */
specifier|private
name|List
name|propfind
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Create the new HttpClient instance associated with the location */
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|client
operator|.
name|addRequestHeader
argument_list|(
literal|"Depth"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAcceptableStatus
argument_list|(
literal|207
argument_list|)
operator|.
name|connect
argument_list|(
literal|"PROPFIND"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* Get the XML SAX Parser and parse the output of the PROPFIND */
try|try
block|{
specifier|final
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|systemId
init|=
name|location
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|systemId
argument_list|)
decl_stmt|;
specifier|final
name|Handler
name|handler
init|=
operator|new
name|Handler
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|source
operator|.
name|setByteStream
argument_list|(
name|client
operator|.
name|getResponseStream
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|source
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|list
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|exception
parameter_list|)
block|{
name|Exception
name|throwable
init|=
operator|new
name|IOException
argument_list|(
literal|"Error creating XML parser"
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|IOException
operator|)
name|throwable
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|exception
parameter_list|)
block|{
name|Exception
name|throwable
init|=
operator|new
name|IOException
argument_list|(
literal|"Error creating XML parser"
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|IOException
operator|)
name|throwable
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
finally|finally
block|{
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* ====================================================================== */
comment|/* INTERNAL CLASSES                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>An internal XML {@link DefaultHandler} used to parse out the various      * details of a PROPFIND response.</p>       */
specifier|private
specifier|static
specifier|final
class|class
name|Handler
extends|extends
name|DefaultHandler
block|{
comment|/* ================================================================== */
comment|/* PSEUDO-XPATH LOCATIONS FOR QUICK-AND-DIRTY LOCATION LOOKUP         */
comment|/* ================================================================== */
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE_PATH
init|=
literal|"/multistatus/response"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HREF_PATH
init|=
literal|"/multistatus/response/href"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_PATH
init|=
literal|"/multistatus/response/propstat/prop/resourcetype/collection"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GETCONTENTTYPE_PATH
init|=
literal|"/multistatus/response/propstat/prop/getcontenttype"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GETLASTMODIFIED_PATH
init|=
literal|"/multistatus/response/propstat/prop/getlastmodified"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GETCONTENTLENGTH_PATH
init|=
literal|"/multistatus/response/propstat/prop/getcontentlength"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATIONDATE_PATH
init|=
literal|"/multistatus/response/propstat/prop/creationdate"
decl_stmt|;
comment|/**<p>The {@link Location} for resolving all other links.</p> */
specifier|private
specifier|final
name|Location
name|base
decl_stmt|;
comment|/**<p>The {@link List} of all scavenged resources.</p> */
specifier|private
specifier|final
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**<p>The resource currently being processed.</p> */
specifier|private
name|Resource
name|rsrc
init|=
literal|null
decl_stmt|;
comment|/**<p>A {@link StringBuffer} holding character data.</p> */
specifier|private
name|StringBuffer
name|buff
init|=
literal|null
decl_stmt|;
comment|/**<p>A {@link Stack} for quick-and-dirty pseudo XPath lookups.</p> */
specifier|private
name|Stack
name|stack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|/**          *<p>Create a new instance specifying the base {@link Location}.</p>          */
specifier|private
name|Handler
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|location
expr_stmt|;
block|}
comment|/**          *<p>Push an element name in the stack for pseudo-XPath lookups.</p>          *           * @return a {@link String} like<code>/element/element/element</code>.          */
specifier|private
name|String
name|pushPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|stack
operator|.
name|push
argument_list|(
name|path
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|this
operator|.
name|stack
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|stack
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**          *<p>Pop the last element name from the pseudo-XPath lookup stack.</p>          *           * @return a {@link String} like<code>/element/element/element</code>.          */
specifier|private
name|String
name|popPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|String
name|last
init|=
operator|(
name|String
operator|)
name|this
operator|.
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|this
operator|.
name|stack
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|stack
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|last
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Tag<"
operator|+
name|path
operator|+
literal|"/> unbalanced at path \""
operator|+
name|pushPath
argument_list|(
name|last
argument_list|)
operator|+
literal|"\""
argument_list|)
throw|;
block|}
comment|/**          *<p>Handle the start-of-element SAX event.</p>          */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|l
parameter_list|,
name|String
name|q
parameter_list|,
name|Attributes
name|a
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
literal|"DAV:"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
return|return;
specifier|final
name|String
name|path
init|=
name|this
operator|.
name|pushPath
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|RESPONSE_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|this
operator|.
name|rsrc
operator|=
operator|new
name|Resource
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|COLLECTION_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
name|this
operator|.
name|rsrc
operator|.
name|collection
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|GETCONTENTTYPE_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|GETLASTMODIFIED_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|GETCONTENTLENGTH_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|CREATIONDATE_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|HREF_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|this
operator|.
name|buff
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          *<p>Handle the end-of-element SAX event.</p>          */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|l
parameter_list|,
name|String
name|q
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
literal|"DAV:"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
return|return;
specifier|final
name|String
name|path
init|=
name|this
operator|.
name|popPath
argument_list|(
name|l
argument_list|)
decl_stmt|;
specifier|final
name|String
name|data
init|=
name|this
operator|.
name|resetBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|RESPONSE_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|.
name|location
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|.
name|location
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
specifier|final
name|String
name|z
init|=
name|this
operator|.
name|rsrc
operator|.
name|location
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unresolved location "
operator|+
name|z
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|list
operator|.
name|add
argument_list|(
name|this
operator|.
name|rsrc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Null location for resource"
argument_list|)
throw|;
block|}
block|}
block|}
if|else if
condition|(
name|HREF_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
try|try
block|{
specifier|final
name|Location
name|resolved
init|=
name|this
operator|.
name|base
operator|.
name|resolve
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|this
operator|.
name|rsrc
operator|.
name|location
operator|=
name|this
operator|.
name|base
operator|.
name|relativize
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|rsrc
operator|.
name|location
operator|.
name|isRelative
argument_list|()
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unable to relativize location "
operator|+
name|this
operator|.
name|rsrc
operator|.
name|location
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Unable to resolve URL \""
operator|+
name|data
operator|+
literal|"\""
decl_stmt|;
name|SAXException
name|throwable
init|=
operator|new
name|SAXException
argument_list|(
name|msg
argument_list|,
name|exception
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|SAXException
operator|)
name|throwable
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|CREATIONDATE_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
name|this
operator|.
name|rsrc
operator|.
name|creationDate
operator|=
name|StringTools
operator|.
name|parseIsoDate
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|GETCONTENTTYPE_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
name|this
operator|.
name|rsrc
operator|.
name|contentType
operator|=
name|data
expr_stmt|;
block|}
if|else if
condition|(
name|GETLASTMODIFIED_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
name|this
operator|.
name|rsrc
operator|.
name|lastModified
operator|=
name|StringTools
operator|.
name|parseHttpDate
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|GETCONTENTLENGTH_PATH
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rsrc
operator|!=
literal|null
condition|)
block|{
name|Long
name|length
init|=
name|StringTools
operator|.
name|parseNumber
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rsrc
operator|.
name|contentLength
operator|=
name|length
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          *<p>Handle SAX characters notification.</p>          */
specifier|public
name|void
name|characters
parameter_list|(
name|char
name|buffer
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|buff
operator|!=
literal|null
condition|)
name|this
operator|.
name|buff
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**          *<p>Reset the current characters buffer and return it as a          * {@link String}.</p>          */
specifier|private
name|String
name|resetBuffer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buff
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|this
operator|.
name|buff
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|buff
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|value
init|=
name|this
operator|.
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|buff
operator|=
literal|null
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
comment|/**      *<p>A simple class holding the core resource properties.</p>      */
specifier|private
specifier|static
class|class
name|Resource
block|{
specifier|private
name|Location
name|location
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|collection
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|contentLength
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|contentType
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|lastModified
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|creationDate
init|=
literal|null
decl_stmt|;
block|}
comment|/* ====================================================================== */
comment|/* COMMAND LINE CLIENT                                                    */
comment|/* ====================================================================== */
comment|/**      *<p>A command-line interface to a WebDAV repository.</p>      *       *<p>When invoked from the command line, this class requires one only      * argument, the URL location of the WebDAV repository to connect to.</p>      *      *<p>After connection this method will interact with the user using an      * extremely simple console-based interface.</p>      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InputStreamReader
name|r
init|=
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
decl_stmt|;
specifier|final
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|WebDavClient
name|client
init|=
operator|new
name|WebDavClient
argument_list|(
name|Location
operator|.
name|parse
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
try|try
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"["
operator|+
name|client
operator|.
name|getLocation
argument_list|()
operator|+
literal|"] -> "
argument_list|)
expr_stmt|;
name|args
operator|=
name|parse
argument_list|(
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"list"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|==
literal|null
condition|)
name|list
argument_list|(
name|client
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
else|else
name|list
argument_list|(
name|client
operator|.
name|open
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"refresh"
argument_list|)
condition|)
block|{
name|client
operator|=
name|client
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|InputStream
name|input
init|=
name|client
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
specifier|final
name|OutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|long
name|bytes
init|=
name|StreamTools
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Fetched child \""
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|"\" to file \""
operator|+
name|file
operator|+
literal|"\" ("
operator|+
name|bytes
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
block|}
else|else
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Can't \"get\" null"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"put"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|OutputStream
name|output
init|=
name|client
operator|.
name|put
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|bytes
init|=
name|StreamTools
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Uploaded file \""
operator|+
name|file
operator|+
literal|"\" to child \""
operator|+
name|args
index|[
literal|2
index|]
operator|+
literal|"\" ("
operator|+
name|bytes
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
block|}
else|else
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Can't \"put\" null"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"mkcol"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|mkcol
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created \""
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Can't \"mkcol\" null"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|delete
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleted \""
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Can't \"delete\" null"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"cd"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
name|client
operator|=
name|client
operator|.
name|open
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Can't \"cd\" to null"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"quit"
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Invalid command \""
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"\". "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Valid commands are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"list\"    list the children child"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"get\"     fetch the specified child"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"put\"     put the specified child"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"mkcol\"   create a collection"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"delete\"  delete a child"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"put\"     put the specified resource"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"cd\"      change the location"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"refresh\" refresh this location"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" - \"quit\"    quit this application"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Parse a line entered by the user returning a three-tokens argument      * list (command, argument 1, argument 2)</p>      */
specifier|private
specifier|static
name|String
index|[]
name|parse
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|String
name|array
index|[]
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
operator|&&
operator|(
name|offset
operator|<
literal|3
operator|)
condition|)
name|array
index|[
name|offset
operator|++
index|]
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|array
index|[
literal|0
index|]
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|array
index|[
literal|2
index|]
operator|==
literal|null
condition|)
name|array
index|[
literal|2
index|]
operator|=
name|array
index|[
literal|1
index|]
expr_stmt|;
return|return
name|array
return|;
block|}
comment|/**      *<p>Pseudo-nicely display a list of the children of a collection</p>      */
specifier|private
specifier|static
name|void
name|list
parameter_list|(
name|WebDavClient
name|client
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"C | "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"CONTENT TYPE    | "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"CREATED             | "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"MODIFIED            | "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"SIZE       | "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"NAME "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|client
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|child
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|.
name|isCollection
argument_list|(
name|child
argument_list|)
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|"* | "
argument_list|)
expr_stmt|;
else|else
name|buffer
operator|.
name|append
argument_list|(
literal|"  | "
argument_list|)
expr_stmt|;
name|format
argument_list|(
name|buffer
argument_list|,
name|client
operator|.
name|getContentType
argument_list|(
name|child
argument_list|)
argument_list|,
literal|15
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|format
argument_list|(
name|buffer
argument_list|,
name|client
operator|.
name|getCreationDate
argument_list|(
name|child
argument_list|)
argument_list|,
literal|19
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|format
argument_list|(
name|buffer
argument_list|,
name|client
operator|.
name|getLastModified
argument_list|(
name|child
argument_list|)
argument_list|,
literal|19
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|format
argument_list|(
name|buffer
argument_list|,
name|client
operator|.
name|getContentLength
argument_list|(
name|child
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|buffer
operator|.
name|append
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**<p>Format a number aligning it to the right of a string.</p> */
specifier|private
specifier|static
name|StringBuffer
name|format
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|long
name|num
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|String
name|data
decl_stmt|;
if|if
condition|(
name|num
operator|<
literal|0
condition|)
name|data
operator|=
literal|""
expr_stmt|;
else|else
name|data
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|num
argument_list|)
expr_stmt|;
specifier|final
name|int
name|spaces
init|=
name|len
operator|-
name|data
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|spaces
condition|;
name|x
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/**<p>Format a string into an exact number of characters.</p> */
specifier|private
specifier|static
name|StringBuffer
name|format
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|Object
name|obj
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|String
name|string
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|string
operator|=
operator|(
literal|"[null]"
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Date
condition|)
block|{
name|SimpleDateFormat
name|f
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|string
operator|=
name|f
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|string
operator|=
name|obj
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|string
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|string
operator|.
name|length
argument_list|()
init|;
name|x
operator|<
name|len
condition|;
name|x
operator|++
control|)
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|append
argument_list|(
name|buffer
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

