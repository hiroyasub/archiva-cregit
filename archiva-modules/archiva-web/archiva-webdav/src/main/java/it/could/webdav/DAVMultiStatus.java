begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<p>A {@link DAVException} representing a  *<a href="http://www.rfc-editor.org/rfc/rfc2518.txt">WebDAV</a>  *<code>207</code> (Multi-Status) response.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVMultiStatus
extends|extends
name|DAVException
block|{
specifier|private
name|Set
name|responses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVMultiStatus} instance.</p>      */
specifier|public
name|DAVMultiStatus
parameter_list|()
block|{
name|super
argument_list|(
literal|207
argument_list|,
literal|"Multi-Status response"
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Write the body of the multi-status response to the specified      * {@link DAVTransaction}'s output.</p>      */
specifier|public
name|void
name|write
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* What to do on a collection resource */
name|transaction
operator|.
name|setStatus
argument_list|(
literal|207
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|setContentType
argument_list|(
literal|"text/xml; charset=\"UTF-8\""
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|transaction
operator|.
name|write
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|/* Output the XML declaration and the root document tag */
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:multistatus xmlns:D=\"DAV:\">"
argument_list|)
expr_stmt|;
name|Iterator
name|responses
init|=
name|this
operator|.
name|responses
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|responses
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|responses
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<D:response>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<D:href>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|transaction
operator|.
name|lookup
argument_list|(
name|response
operator|.
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</D:href>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|status
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<D:status>HTTP/1.1 "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|DAVUtilities
operator|.
name|getStatusMessage
argument_list|(
name|response
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</D:status>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|message
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<D:responsedescription>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</D:responsedescription>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</D:response>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</D:multistatus>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Return the number of responses held in this instance.</p>      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|responses
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<p>Merge the responses held into the specified {@link DAVMultiStatus}      * into this instance.</p>      */
specifier|public
name|void
name|merge
parameter_list|(
name|DAVMultiStatus
name|multistatus
parameter_list|)
block|{
if|if
condition|(
name|multistatus
operator|==
literal|null
condition|)
return|return;
name|Iterator
name|iterator
init|=
name|multistatus
operator|.
name|responses
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
name|this
operator|.
name|responses
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Merge the details held into the specified {@link DAVException}      * into this instance.</p>      */
specifier|public
name|void
name|merge
parameter_list|(
name|DAVException
name|exception
parameter_list|)
block|{
name|DAVResource
name|resource
init|=
name|exception
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
throw|throw
name|exception
throw|;
name|int
name|status
init|=
name|exception
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|this
operator|.
name|responses
operator|.
name|add
argument_list|(
operator|new
name|Response
argument_list|(
name|resource
argument_list|,
name|status
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Response
implements|implements
name|Comparable
block|{
specifier|private
name|DAVResource
name|resource
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|status
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|message
init|=
literal|null
decl_stmt|;
specifier|public
name|Response
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|this
argument_list|(
name|response
operator|.
name|resource
argument_list|,
name|response
operator|.
name|status
argument_list|,
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Response
parameter_list|(
name|DAVResource
name|resource
parameter_list|,
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|object
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|resource
operator|.
name|compareTo
argument_list|(
name|response
operator|.
name|resource
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Response
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|object
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|resource
operator|.
name|equals
argument_list|(
name|response
operator|.
name|resource
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

