begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<p>A simple representation of a WebDAV resource based on {@link File}s.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVResource
implements|implements
name|Comparable
block|{
comment|/**<p>The mime type when {@link #isCollection()} is<b>true</b>.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_MIME_TYPE
init|=
literal|"httpd/unix-directory"
decl_stmt|;
comment|/**<p>The prefix for all temporary resources.</p> */
specifier|protected
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|".dav_"
decl_stmt|;
comment|/**<p>The suffix for all temporary resources.</p> */
specifier|protected
specifier|static
specifier|final
name|String
name|SUFFIX
init|=
literal|".temp"
decl_stmt|;
comment|/**<p>The {@link DAVRepository} instance containing this resource.</p> */
specifier|private
name|DAVRepository
name|repository
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link File} associated with this resource.</p> */
specifier|private
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|/* ====================================================================== */
comment|/* Constructors                                                           */
comment|/* ====================================================================== */
comment|/**      *<p>Create a new {@link DAVResource} instance.</p>      */
specifier|protected
name|DAVResource
parameter_list|(
name|DAVRepository
name|repo
parameter_list|,
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null repository"
argument_list|)
throw|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null resource"
argument_list|)
throw|;
name|init
argument_list|(
name|repo
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|DAVRepository
name|repo
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getRelativeURI
argument_list|()
operator|.
name|isAbsolute
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|412
argument_list|,
literal|"Error relativizing resource"
argument_list|)
throw|;
block|}
comment|/* ====================================================================== */
comment|/* Generic object methods                                                 */
comment|/* ====================================================================== */
comment|/**      *<p>Return an integer number for the hash value of this instance.</p>      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|file
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      *<p>Compare this instance to another object for equality.</p>      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
return|return
operator|(
literal|false
operator|)
return|;
if|if
condition|(
name|object
operator|instanceof
name|DAVResource
condition|)
block|{
name|DAVResource
name|resource
init|=
operator|(
name|DAVResource
operator|)
name|object
decl_stmt|;
name|boolean
name|u
init|=
name|this
operator|.
name|file
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|file
argument_list|)
decl_stmt|;
name|boolean
name|r
init|=
name|this
operator|.
name|repository
operator|==
name|resource
operator|.
name|repository
decl_stmt|;
return|return
operator|(
name|u
operator|&&
name|r
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
comment|/**      *<p>Compare this instance to another object for sorting.</p>      */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|DAVResource
name|resource
init|=
operator|(
name|DAVResource
operator|)
name|object
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|file
operator|.
name|compareTo
argument_list|(
name|resource
operator|.
name|file
argument_list|)
operator|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* Resource checkers                                                      */
comment|/* ====================================================================== */
comment|/**      *<p>Checks if this {@link DAVResource} is a null (non existant) one.</p>      *       * @return<b>true</b> if this resource does not esist (is a null resource).      */
specifier|public
name|boolean
name|isNull
parameter_list|()
block|{
return|return
operator|(
operator|!
name|this
operator|.
name|file
operator|.
name|exists
argument_list|()
operator|)
return|;
block|}
comment|/**      *<p>Checks if this {@link DAVResource} is a collection.</p>      *       * @return<b>true</b> if this resource is a collection.      */
specifier|public
name|boolean
name|isCollection
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|this
operator|.
name|file
operator|.
name|isDirectory
argument_list|()
operator|)
return|;
block|}
comment|/**      *<p>Checks if this {@link DAVResource} is an existing resource.</p>      *       * @return<b>true</b> if this resource is a collection.      */
specifier|public
name|boolean
name|isResource
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|!
name|this
operator|.
name|isCollection
argument_list|()
operator|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* Resource methods                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>Return the {@link File} associated with this resource.</p>      */
specifier|protected
name|File
name|getFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|file
return|;
block|}
comment|/**      *<p>Return the {@link DAVRepository} associated with this resource.</p>      */
specifier|public
name|DAVRepository
name|getRepository
parameter_list|()
block|{
return|return
name|this
operator|.
name|repository
return|;
block|}
comment|/**      *<p>Return the bare name of this resource (without any&quot;/&quot;      * slashes at the end if it is a collection).</p>      *       * @return a<b>non null</b> {@link String}.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|file
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      *<p>Return the display name of this resource (with an added&quot;/&quot;      * slash at the end if it is a collection).</p>      *       * @return a<b>non null</b> {@link String}.      */
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
name|String
name|name
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isCollection
argument_list|()
condition|)
return|return
operator|(
name|name
operator|+
literal|"/"
operator|)
return|;
return|return
name|name
return|;
block|}
comment|/**      *<p>Return the path of this {@link DAVResource} relative to the root      * of the associated {@link DAVRepository}.</p>      *       * @return a<b>non null</b> {@link String}.      */
specifier|public
name|String
name|getRelativePath
parameter_list|()
block|{
return|return
name|this
operator|.
name|getRelativeURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
return|;
block|}
comment|/**      *<p>Return the {@link URI} of this {@link DAVResource} relative to the      * root of the associated {@link DAVRepository}.</p>      *       * @return a<b>non-null</b> {@link URI} instance.      */
specifier|public
name|URI
name|getRelativeURI
parameter_list|()
block|{
name|URI
name|uri
init|=
name|this
operator|.
name|file
operator|.
name|toURI
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|repository
operator|.
name|getRepositoryURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|uri
argument_list|)
operator|.
name|normalize
argument_list|()
return|;
block|}
comment|/**      *<p>Return the parent {@link DAVResource} of this instance.</p>      *       * @return a<b>non-null</b> {@link DAVResource} instance or<b>null</b>      *         if this {@link DAVResource} is the repository root.      */
specifier|public
name|DAVResource
name|getParent
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|DAVResource
argument_list|(
name|this
operator|.
name|repository
argument_list|,
name|this
operator|.
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      *<p>Return an {@link Iterator} over all children of this instance.</p>       *       * @return a<b>non-null</b> {@link Iterator} instance or<b>null</b> if      *         this {@link DAVResource} is not a collection.      * @throws IOException If the resource could not be resolved.      */
specifier|public
name|Iterator
name|getChildren
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isCollection
argument_list|()
condition|)
return|return
literal|null
return|;
name|File
name|children
index|[]
init|=
name|this
operator|.
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
name|children
operator|=
operator|new
name|File
index|[
literal|0
index|]
expr_stmt|;
name|List
name|resources
init|=
operator|new
name|ArrayList
argument_list|(
name|children
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|children
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|String
name|c
init|=
name|children
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
operator|&&
name|c
operator|.
name|endsWith
argument_list|(
name|SUFFIX
argument_list|)
condition|)
continue|continue;
name|resources
operator|.
name|add
argument_list|(
operator|new
name|DAVResource
argument_list|(
name|this
operator|.
name|repository
argument_list|,
name|children
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/* ====================================================================== */
comment|/* DAV Properties                                                         */
comment|/* ====================================================================== */
comment|/**      *<p>Return the MIME Content-Type of this {@link DAVResource}.</p>      *       *<p>If the {@link #isCollection()} method returns<b>true</b> this      * method always returns<code>text/html</code>.</p>      *       * @return a {@link String} instance or<b>null</b> if this resource does      *         not exist.      */
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|this
operator|.
name|isCollection
argument_list|()
condition|)
return|return
name|COLLECTION_MIME_TYPE
return|;
return|return
name|DAVUtilities
operator|.
name|getMimeType
argument_list|(
name|this
operator|.
name|getDisplayName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Return the MIME Content-Length of this {@link DAVResource}.</p>      *       * @return a {@link Long} instance or<b>null</b> if this resource does      *         not exist or is a collection.      */
specifier|public
name|Long
name|getContentLength
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
operator|||
name|this
operator|.
name|isCollection
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Long
argument_list|(
name|this
operator|.
name|file
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Return the creation date of this {@link DAVResource}.</p>      *       *<p>As this implementation relies on a {@link File} backend, this method      * will always return the same as {@link #getLastModified()}.</p>      *      * @return a {@link String} instance or<b>null</b> if this resource does      *         not exist.      */
specifier|public
name|Date
name|getCreationDate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Date
argument_list|(
name|this
operator|.
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Return the last modification date of this {@link DAVResource}.</p>      *       * @return a {@link String} instance or<b>null</b> if this resource does      *         not exist.      */
specifier|public
name|Date
name|getLastModified
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Date
argument_list|(
name|this
operator|.
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Return a {@link String} representing the Entity Tag of this      * {@link DAVResource} as described by the      *<a href="http://www.rfc-editor.org/rfc/rfc2616.txt">HTTP RFC</a>.</p>      *       * @return a {@link String} instance or<b>null</b> if this resource does      *         not exist.      */
specifier|public
name|String
name|getEntityTag
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|path
init|=
name|this
operator|.
name|getRelativePath
argument_list|()
decl_stmt|;
name|StringBuffer
name|etag
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|etag
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
comment|/* Append the MD5 hash of this resource name */
try|try
block|{
name|MessageDigest
name|digester
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|digester
operator|.
name|reset
argument_list|()
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|path
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|etag
operator|.
name|append
argument_list|(
name|DAVUtilities
operator|.
name|toHexString
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|etag
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// If we can't get the MD5 HASH, let's ignore and hope...
block|}
comment|/* Append the hashCode of this resource name */
name|etag
operator|.
name|append
argument_list|(
name|DAVUtilities
operator|.
name|toHexString
argument_list|(
name|path
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Append the last modification date if possible */
name|Date
name|date
init|=
name|this
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|etag
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|etag
operator|.
name|append
argument_list|(
name|DAVUtilities
operator|.
name|toHexString
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Close the ETag */
name|etag
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
return|return
operator|(
name|etag
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* DAV Operations                                                         */
comment|/* ====================================================================== */
comment|/**      *<p>Delete this resource.</p>      *      * @throws DAVException If for any reason this resource cannot be deleted.      */
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|DAVMultiStatus
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|404
argument_list|,
literal|"Not found"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|isResource
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|windowsSafeDelete
argument_list|(
name|this
operator|.
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't delete resource"
argument_list|,
name|this
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|repository
operator|.
name|notify
argument_list|(
name|this
argument_list|,
name|DAVListener
operator|.
name|RESOURCE_REMOVED
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|this
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|DAVMultiStatus
name|multistatus
init|=
operator|new
name|DAVMultiStatus
argument_list|()
decl_stmt|;
name|Iterator
name|children
init|=
name|this
operator|.
name|getChildren
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
try|try
block|{
operator|(
operator|(
name|DAVResource
operator|)
name|children
operator|.
name|next
argument_list|()
operator|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DAVException
name|exception
parameter_list|)
block|{
name|multistatus
operator|.
name|merge
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multistatus
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|multistatus
throw|;
if|if
condition|(
operator|!
name|this
operator|.
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't delete collection"
argument_list|,
name|this
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|repository
operator|.
name|notify
argument_list|(
name|this
argument_list|,
name|DAVListener
operator|.
name|COLLECTION_REMOVED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *<p>Copy this resource to the specified destination.</p>      *      * @throws DAVException If for any reason this resource cannot be deleted.      */
specifier|public
name|void
name|copy
parameter_list|(
name|DAVResource
name|dest
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|DAVMultiStatus
block|{
comment|/*          * NOTE: Since the COPY operation relies on other operation defined in          * this class (and in DAVOutputStream for resources) rather than on          * files temselves, notifications are sent elsewhere, not here.          */
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|404
argument_list|,
literal|"Not found"
argument_list|,
name|this
argument_list|)
throw|;
comment|/* Check if the destination exists and delete if possible */
if|if
condition|(
operator|!
name|dest
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
name|String
name|msg
init|=
literal|"Not overwriting existing destination"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|412
argument_list|,
name|msg
argument_list|,
name|dest
argument_list|)
throw|;
block|}
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/* Copy a single resource (destination is null as we deleted it) */
if|if
condition|(
name|this
operator|.
name|isResource
argument_list|()
condition|)
block|{
name|DAVInputStream
name|in
init|=
name|this
operator|.
name|read
argument_list|()
decl_stmt|;
name|DAVOutputStream
name|out
init|=
name|dest
operator|.
name|write
argument_list|()
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|k
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|k
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* Copy the collection and all nested members */
if|if
condition|(
name|this
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|dest
operator|.
name|makeCollection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|recursive
condition|)
return|return;
name|DAVMultiStatus
name|multistatus
init|=
operator|new
name|DAVMultiStatus
argument_list|()
decl_stmt|;
name|Iterator
name|children
init|=
name|this
operator|.
name|getChildren
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
try|try
block|{
name|DAVResource
name|childResource
init|=
operator|(
name|DAVResource
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|child
init|=
operator|new
name|File
argument_list|(
name|dest
operator|.
name|file
argument_list|,
name|childResource
operator|.
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|DAVResource
name|target
init|=
operator|new
name|DAVResource
argument_list|(
name|this
operator|.
name|repository
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|childResource
operator|.
name|copy
argument_list|(
name|target
argument_list|,
name|overwrite
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DAVException
name|exception
parameter_list|)
block|{
name|multistatus
operator|.
name|merge
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multistatus
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|multistatus
throw|;
block|}
block|}
comment|/**      *<p>Moves this resource to the specified destination.</p>      *      * @throws DAVException If for any reason this resource cannot be deleted.      */
specifier|public
name|void
name|move
parameter_list|(
name|DAVResource
name|dest
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|DAVMultiStatus
block|{
comment|// the base class implementation is just copy-then-delete
name|copy
argument_list|(
name|dest
argument_list|,
name|overwrite
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|this
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Create a collection identified by this {@link DAVResource}.</p>      *      *<p>This resource must be {@link #isNull() non-null} and its      * {@link #getParent() parent} must be accessible and be a      * {@link #isCollection() collection}.</p>      *       * @throws DAVException If for any reason a collection identified by this      *                      resource cannot be created.      */
specifier|public
name|void
name|makeCollection
parameter_list|()
block|{
name|DAVResource
name|parent
init|=
name|this
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|405
argument_list|,
literal|"Resource exists"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
name|parent
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|409
argument_list|,
literal|"Parent does not not exist"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isCollection
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Parent not a collection"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
operator|!
name|this
operator|.
name|file
operator|.
name|mkdir
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
literal|"Can't create collection"
argument_list|,
name|this
argument_list|)
throw|;
name|this
operator|.
name|repository
operator|.
name|notify
argument_list|(
name|this
argument_list|,
name|DAVListener
operator|.
name|COLLECTION_CREATED
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Return an {@link InputStream} reading the resource.</p>      *      * @return a<b>non-null</b> {@link InputStream} instance.      */
specifier|public
name|DAVInputStream
name|read
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|404
argument_list|,
literal|"Not found"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|isCollection
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Resource is collection"
argument_list|,
name|this
argument_list|)
throw|;
return|return
operator|new
name|DAVInputStream
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      *<p>Return a {@link DAVOutputStream} writing to this {@link DAVResource}      * instance.</p>      *      * @return a<b>non-null</b> {@link DAVOutputStream} instance.      */
specifier|public
name|DAVOutputStream
name|write
parameter_list|()
block|{
name|DAVResource
name|parent
init|=
name|this
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isCollection
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|409
argument_list|,
literal|"Can't write a collection"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
name|parent
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|409
argument_list|,
literal|"Parent doesn't exist"
argument_list|,
name|this
argument_list|)
throw|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isCollection
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Parent not a collection"
argument_list|,
name|this
argument_list|)
throw|;
return|return
operator|new
name|DAVOutputStream
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** File.delete(file) sometimes fails transiently on Windows.      * This occurs even in low-I/O conditions, with file Explorer closed.      * Delete can still fail (correctly) due to the separate Windows problem       * of file sharing violations.      * @return the status of the last attempt of File.delete()      */
specifier|private
specifier|static
name|boolean
name|windowsSafeDelete
parameter_list|(
name|File
name|f
parameter_list|)
block|{
comment|// www.mail-archive.com/java-user@lucene.apache.org/msg08994.html
name|boolean
name|success
init|=
name|f
operator|.
name|delete
argument_list|()
decl_stmt|;
name|int
name|attempts
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|success
operator|&&
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|attempts
operator|<
literal|3
condition|)
block|{
if|if
condition|(
name|attempts
operator|>
literal|2
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
block|}
name|success
operator|=
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
name|attempts
operator|++
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
block|}
end_class

end_unit

