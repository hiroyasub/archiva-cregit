begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|methods
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVInputStream
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVResource
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVTransaction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  *<p><a href="http://www.rfc-editor.org/rfc/rfc2616.txt">HTTP</a>  *<code>GET</code> metohd implementation.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|GET
extends|extends
name|HEAD
block|{
comment|/**<p>The encoding charset to repsesent collections.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|/**<p>The mime type that {@link GET} will use serving collections.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_MIME_TYPE
init|=
literal|"text/html ;charset=\""
operator|+
name|ENCODING
operator|+
literal|"\""
decl_stmt|;
comment|/**      *<p>Create a new {@link GET} instance.</p>      */
specifier|public
name|GET
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Process the<code>GET</code> method.</p>      */
specifier|public
name|void
name|process
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|process
argument_list|(
name|transaction
argument_list|,
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|String
name|originalPath
init|=
name|transaction
operator|.
name|getOriginalPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|normalizedPath
init|=
name|transaction
operator|.
name|getNormalizedPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|current
decl_stmt|;
specifier|final
name|String
name|parent
decl_stmt|;
if|if
condition|(
name|originalPath
operator|.
name|equals
argument_list|(
name|normalizedPath
argument_list|)
condition|)
block|{
specifier|final
name|String
name|relativePath
init|=
name|resource
operator|.
name|getRelativePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|current
operator|=
name|transaction
operator|.
name|lookup
argument_list|(
name|resource
argument_list|)
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|relativePath
expr_stmt|;
block|}
name|parent
operator|=
literal|"./"
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|"./"
expr_stmt|;
name|parent
operator|=
literal|"../"
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|transaction
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"inline; filename=\"index.html\""
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|transaction
operator|.
name|write
argument_list|(
name|ENCODING
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|resource
operator|.
name|getRelativePath
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Collection: /"
operator|+
name|path
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<h2>Collection: /"
operator|+
name|path
operator|+
literal|"</h2>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
comment|/* Process the parent */
specifier|final
name|DAVResource
name|parentResource
init|=
name|resource
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentResource
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<li><a href=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|parentResource
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</a><i><small>(Parent)</small></i></li>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
block|}
comment|/* Process the children (in two sorted sets, for nice ordering) */
name|Set
name|resources
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Set
name|collections
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Iterator
name|iterator
init|=
name|resource
operator|.
name|getChildren
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DAVResource
name|child
init|=
operator|(
name|DAVResource
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|String
name|childPath
init|=
name|child
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"<li><a href=\""
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"</li>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|collections
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resources
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Spit out the collections first and the resources then */
for|for
control|(
name|Iterator
name|i
init|=
name|collections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|out
operator|.
name|println
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|resources
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|out
operator|.
name|println
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
comment|/* Processing a normal resource request */
name|OutputStream
name|out
init|=
name|transaction
operator|.
name|write
argument_list|()
decl_stmt|;
name|DAVInputStream
name|in
init|=
name|resource
operator|.
name|read
argument_list|()
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|k
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|k
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

