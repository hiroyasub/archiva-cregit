begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|location
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|StringTools
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|encoding
operator|.
name|Encodable
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|encoding
operator|.
name|EncodingTools
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *<p>An utility class representing an HTTP-like URL.</p>  *   *<p>This class can be used to represent any URL that roughly uses the HTTP  * format. Compared to the standard {@link java.net.URL} class, the scheme part  * of the a {@link Location} is never checked, and it's up to the application  * to verify its correctness, while compared to the {@link java.net.URI} class,  * its parsing mechanism is a lot more relaxed (be liberal in what you accept,  * be strict in what you send).</p>  *   *<p>For a bigger picture on how this class works, this is an easy-to-read  * representation of what the different parts of a {@link Location} are:</p>  *   *<div align="center">  *<a href="url.pdf" target="_new" title="PDF Version">  *<img src="url.gif" alt="URL components" border="0">  *</a>  *</div>  *   *<p>One important difference between this implementation and the description  * of<a href="http://www.ietf.org/rfc/rfc1738.txt">URLs</a> and  *<a href="http://www.ietf.org/rfc/rfc2396.txt">URIs</a> is that parameter  * paths are represented<i>only at the end of the entire path structure</i>  * rather than for each path element. This over-simplification allows easy  * relativization of {@link Location}s when used with servlet containers, which  * normally use path parameters to encode the session id.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|Location
implements|implements
name|Encodable
block|{
comment|/**<p>A {@link Map} of schemes and their default port number.</p> */
specifier|private
specifier|static
specifier|final
name|Map
name|schemePorts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|schemePorts
operator|.
name|put
argument_list|(
literal|"acap"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|674
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"dav"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"ftp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"gopher"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"http"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"https"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|443
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"imap"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"ldap"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|389
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"mailto"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"news"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|119
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"nntp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|119
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"pop"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"rtsp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|554
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"sip"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5060
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"sips"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5061
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"snmp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|161
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"telnet"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|schemePorts
operator|.
name|put
argument_list|(
literal|"tftp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|69
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**<p>The {@link List} of schemes of this {@link Location}.</p> */
specifier|private
specifier|final
name|Schemes
name|schemes
decl_stmt|;
comment|/**<p>The {@link Authority} of this {@link Location}.</p> */
specifier|private
specifier|final
name|Authority
name|authority
decl_stmt|;
comment|/**<p>The {@link Path} of this {@link Location}.</p> */
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
comment|/**<p>The {@link Parameters} of this {@link Location}.</p> */
specifier|private
specifier|final
name|Parameters
name|parameters
decl_stmt|;
comment|/**<p>The fragment part of this {@link Location}.</p> */
specifier|private
specifier|final
name|String
name|fragment
decl_stmt|;
comment|/**<p>The string representation of this {@link Location}.</p> */
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
comment|/**      *<p>Create a new {@link Location} instance.</p>       */
specifier|public
name|Location
parameter_list|(
name|Schemes
name|schemes
parameter_list|,
name|Authority
name|authority
parameter_list|,
name|Path
name|path
parameter_list|,
name|Parameters
name|parameters
parameter_list|,
name|String
name|fragment
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
operator|(
name|schemes
operator|==
literal|null
operator|)
operator|&&
operator|(
name|authority
operator|!=
literal|null
operator|)
condition|)
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"No schemes specified"
argument_list|)
throw|;
if|if
condition|(
operator|(
name|schemes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|authority
operator|==
literal|null
operator|)
condition|)
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"No authority specified"
argument_list|)
throw|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"No path specified"
argument_list|)
throw|;
name|this
operator|.
name|schemes
operator|=
name|schemes
expr_stmt|;
name|this
operator|.
name|authority
operator|=
name|authority
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|fragment
operator|=
name|fragment
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|EncodingTools
operator|.
name|toString
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/* ====================================================================== */
comment|/* STATIC CONSTRUCTION METHODS                                            */
comment|/* ====================================================================== */
specifier|public
specifier|static
name|Location
name|parse
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
try|try
block|{
return|return
name|parse
argument_list|(
name|url
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Unsupported encoding "
operator|+
name|DEFAULT_ENCODING
decl_stmt|;
specifier|final
name|InternalError
name|error
init|=
operator|new
name|InternalError
argument_list|(
name|message
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|InternalError
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Location
name|parse
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
return|return
literal|null
return|;
empty_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
name|DEFAULT_ENCODING
expr_stmt|;
specifier|final
name|String
name|components
index|[]
init|=
name|parseComponents
argument_list|(
name|url
argument_list|)
decl_stmt|;
specifier|final
name|Schemes
name|schemes
init|=
name|parseSchemes
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|findPort
argument_list|(
name|schemes
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|Authority
name|auth
init|=
name|parseAuthority
argument_list|(
name|components
index|[
literal|1
index|]
argument_list|,
name|port
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|Path
operator|.
name|parse
argument_list|(
name|components
index|[
literal|2
index|]
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|Parameters
name|params
init|=
name|Parameters
operator|.
name|parse
argument_list|(
name|components
index|[
literal|3
index|]
argument_list|,
literal|'&'
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fragment
init|=
name|components
index|[
literal|4
index|]
decl_stmt|;
return|return
operator|new
name|Location
argument_list|(
name|schemes
argument_list|,
name|auth
argument_list|,
name|path
argument_list|,
name|params
argument_list|,
name|fragment
argument_list|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* ACCESSOR METHODS                                                       */
comment|/* ====================================================================== */
comment|/**      *<p>Return an unmodifiable {@link Schemes list of all schemes} for this      * {@link Location} instance or<b>null</b>.</p>      */
specifier|public
name|Schemes
name|getSchemes
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemes
return|;
block|}
comment|/**      *<p>Return the {@link Location.Authority Authority} part for this      * {@link Location} or<b>null</b>.</p>      */
specifier|public
name|Authority
name|getAuthority
parameter_list|()
block|{
return|return
name|this
operator|.
name|authority
return|;
block|}
comment|/**      *<p>Return the<b>non-null</b> {@link Path Path} structure      * associated with this {@link Location} instance.</p>       */
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
comment|/**      *<p>Return an unmodifiable {@link Parameters list of all parameters}      * parsed from this {@link Location}'s query string or<b>null</b>.</p>      */
specifier|public
name|Parameters
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
comment|/**      *<p>Return the fragment of this {@link Location} unencoded.</p>      */
specifier|public
name|String
name|getFragment
parameter_list|()
block|{
return|return
name|this
operator|.
name|fragment
return|;
block|}
comment|/* ====================================================================== */
comment|/* OBJECT METHODS                                                         */
comment|/* ====================================================================== */
comment|/**      *<p>Check if the specified {@link Object} is equal to this instance.</p>      *       *<p>The specified {@link Object} must be a<b>non-null</b>      * {@link Location} instance whose {@link #toString() string value} equals      * this one's.</p>      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|(
name|object
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|object
operator|instanceof
name|Location
operator|)
condition|)
block|{
return|return
name|this
operator|.
name|string
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Location
operator|)
name|object
operator|)
operator|.
name|string
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      *<p>Return the hash code value for this {@link Location} instance.</p>      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|string
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      *<p>Return the {@link String} representation of this {@link Location}      * instance.</p>      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|string
return|;
block|}
comment|/**      *<p>Return the {@link String} representation of this {@link Location}      * instance using the specified character encoding.</p>      */
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|/* Render the schemes */
if|if
condition|(
name|this
operator|.
name|schemes
operator|!=
literal|null
condition|)
name|buffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|schemes
operator|.
name|toString
argument_list|(
name|encoding
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
comment|/* Render the authority part */
if|if
condition|(
name|this
operator|.
name|authority
operator|!=
literal|null
condition|)
name|buffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|authority
operator|.
name|toString
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Render the paths */
name|buffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|path
operator|.
name|toString
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Render the query string */
if|if
condition|(
name|this
operator|.
name|parameters
operator|!=
literal|null
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|parameters
operator|.
name|toString
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Render the fragment */
if|if
condition|(
name|this
operator|.
name|fragment
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|EncodingTools
operator|.
name|urlEncode
argument_list|(
name|this
operator|.
name|fragment
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Return the string */
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* ====================================================================== */
comment|/* PUBLIC METHODS                                                         */
comment|/* ====================================================================== */
comment|/**      *<p>Checks whether this {@link Location} is absolute or not.</p>      *       *<p>This method must not be confused with the similarly named      * {@link Path#isAbsolute() Path.isAbsolute()} method.      * This method will check whether the full {@link Location} is absolute (it      * has a scheme), while the one exposed by the {@link Path Path}      * class will check if the path is absolute.</p>      */
specifier|public
name|boolean
name|isAbsolute
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemes
operator|!=
literal|null
operator|&&
name|this
operator|.
name|authority
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isRelative
parameter_list|()
block|{
return|return
operator|!
operator|(
name|this
operator|.
name|isAbsolute
argument_list|()
operator|||
name|this
operator|.
name|path
operator|.
name|isAbsolute
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isAuthoritative
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isAbsolute
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|location
operator|.
name|isAbsolute
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|this
operator|.
name|schemes
operator|.
name|equals
argument_list|(
name|location
operator|.
name|schemes
argument_list|)
operator|&&
name|this
operator|.
name|authority
operator|.
name|equals
argument_list|(
name|location
operator|.
name|authority
argument_list|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* RESOLUTION METHODS                                                     */
comment|/* ====================================================================== */
specifier|public
name|Location
name|resolve
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
try|try
block|{
return|return
name|this
operator|.
name|resolve
argument_list|(
name|parse
argument_list|(
name|url
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Unsupported encoding "
operator|+
name|DEFAULT_ENCODING
decl_stmt|;
specifier|final
name|InternalError
name|error
init|=
operator|new
name|InternalError
argument_list|(
name|message
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|InternalError
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Location
name|resolve
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
name|DEFAULT_ENCODING
expr_stmt|;
return|return
name|this
operator|.
name|resolve
argument_list|(
name|parse
argument_list|(
name|url
argument_list|,
name|encoding
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Location
name|resolve
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isAuthoritative
argument_list|(
name|location
argument_list|)
condition|)
return|return
name|location
return|;
comment|/* Schemes are the same */
specifier|final
name|Schemes
name|schemes
init|=
name|this
operator|.
name|schemes
decl_stmt|;
comment|/* Authority needs to be merged (for username and password) */
specifier|final
name|Authority
name|auth
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|authority
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|username
init|=
name|location
operator|.
name|authority
operator|.
name|username
operator|!=
literal|null
condition|?
name|location
operator|.
name|authority
operator|.
name|username
else|:
name|this
operator|.
name|authority
operator|.
name|username
decl_stmt|;
specifier|final
name|String
name|password
init|=
name|location
operator|.
name|authority
operator|.
name|password
operator|!=
literal|null
condition|?
name|location
operator|.
name|authority
operator|.
name|password
else|:
name|this
operator|.
name|authority
operator|.
name|password
decl_stmt|;
specifier|final
name|String
name|host
init|=
name|location
operator|.
name|authority
operator|.
name|host
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|location
operator|.
name|authority
operator|.
name|port
decl_stmt|;
name|auth
operator|=
operator|new
name|Authority
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|auth
operator|=
name|this
operator|.
name|authority
expr_stmt|;
block|}
comment|/* Path can be resolved */
specifier|final
name|Path
name|path
init|=
name|this
operator|.
name|path
operator|.
name|resolve
argument_list|(
name|location
operator|.
name|path
argument_list|)
decl_stmt|;
comment|/* Parametrs and fragment are the ones of the target */
specifier|final
name|Parameters
name|params
init|=
name|location
operator|.
name|parameters
decl_stmt|;
specifier|final
name|String
name|fragment
init|=
name|location
operator|.
name|fragment
decl_stmt|;
comment|/* Create a new {@link Location} instance */
try|try
block|{
return|return
operator|new
name|Location
argument_list|(
name|schemes
argument_list|,
name|auth
argument_list|,
name|path
argument_list|,
name|params
argument_list|,
name|fragment
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|exception
parameter_list|)
block|{
comment|/* Should really never happen */
name|Error
name|error
init|=
operator|new
name|InternalError
argument_list|(
literal|"Can't instantiate Location"
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|Error
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/* ====================================================================== */
comment|/* RELATIVIZATION METHODS                                                 */
comment|/* ====================================================================== */
specifier|public
name|Location
name|relativize
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
try|try
block|{
return|return
name|this
operator|.
name|relativize
argument_list|(
name|parse
argument_list|(
name|url
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Unsupported encoding "
operator|+
name|DEFAULT_ENCODING
decl_stmt|;
specifier|final
name|InternalError
name|error
init|=
operator|new
name|InternalError
argument_list|(
name|message
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|InternalError
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Location
name|relativize
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
name|DEFAULT_ENCODING
expr_stmt|;
return|return
name|this
operator|.
name|relativize
argument_list|(
name|parse
argument_list|(
name|url
argument_list|,
name|encoding
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Location
name|relativize
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
specifier|final
name|Path
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|location
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|/* Target location is not absolute, its path might */
name|path
operator|=
name|this
operator|.
name|path
operator|.
name|relativize
argument_list|(
name|location
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|isAuthoritative
argument_list|(
name|location
argument_list|)
condition|)
block|{
comment|/* Target location is not on the same authority, process path */
name|path
operator|=
name|this
operator|.
name|path
operator|.
name|relativize
argument_list|(
name|location
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* Not authoritative for a non-relative location, yah! */
return|return
name|location
return|;
block|}
block|}
try|try
block|{
return|return
operator|new
name|Location
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|location
operator|.
name|parameters
argument_list|,
name|location
operator|.
name|fragment
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|exception
parameter_list|)
block|{
comment|/* Should really never happen */
name|Error
name|error
init|=
operator|new
name|InternalError
argument_list|(
literal|"Can't instantiate Location"
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|Error
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/* ====================================================================== */
comment|/* INTERNAL PARSING ROUTINES                                              */
comment|/* ====================================================================== */
comment|/**      *<p>Return the port number associated with the specified schemes.</p>      */
specifier|public
specifier|static
name|int
name|findPort
parameter_list|(
name|List
name|schemes
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|schemes
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|schemes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
return|return
operator|-
literal|1
return|;
name|Integer
name|p
init|=
operator|(
name|Integer
operator|)
name|schemePorts
operator|.
name|get
argument_list|(
name|schemes
operator|.
name|get
argument_list|(
name|schemes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|p
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      *<p>Parse<code>scheme://authority/path?query#fragment</code>.</p>      *      * @return an array of five {@link String}s: scheme (0), authority (1),      *         path (2), query (3) and fragment (4).      */
specifier|private
specifier|static
name|String
index|[]
name|parseComponents
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
comment|/* Scheme, easy and simple */
specifier|final
name|String
name|scheme
decl_stmt|;
specifier|final
name|String
name|afterScheme
decl_stmt|;
specifier|final
name|int
name|schemeEnd
init|=
name|url
operator|.
name|indexOf
argument_list|(
literal|":/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemeEnd
operator|>
literal|0
condition|)
block|{
name|scheme
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|schemeEnd
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|afterScheme
operator|=
name|url
operator|.
name|substring
argument_list|(
name|schemeEnd
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|schemeEnd
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Missing scheme"
argument_list|)
throw|;
block|}
else|else
block|{
name|scheme
operator|=
literal|null
expr_stmt|;
name|afterScheme
operator|=
name|url
expr_stmt|;
block|}
comment|/* Authority (can be tricky because it can be emtpy) */
specifier|final
name|String
name|auth
decl_stmt|;
specifier|final
name|String
name|afterAuth
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
comment|// --> /path... or path...
name|afterAuth
operator|=
name|afterScheme
expr_stmt|;
name|auth
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|afterScheme
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|afterScheme
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
comment|// --> scheme://...
specifier|final
name|int
name|pathStart
init|=
name|afterScheme
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStart
operator|==
literal|1
condition|)
block|{
comment|// --> scheme:///path...
name|afterAuth
operator|=
name|afterScheme
operator|.
name|substring
argument_list|(
name|pathStart
argument_list|)
expr_stmt|;
name|auth
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|pathStart
operator|>
literal|1
condition|)
block|{
comment|// --> scheme://authority/path...
name|afterAuth
operator|=
name|afterScheme
operator|.
name|substring
argument_list|(
name|pathStart
argument_list|)
expr_stmt|;
name|auth
operator|=
name|afterScheme
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|pathStart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// --> scheme://authority (but no slashes for the path)
specifier|final
name|int
name|authEnds
init|=
name|StringTools
operator|.
name|findFirst
argument_list|(
name|afterScheme
argument_list|,
literal|"?#"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authEnds
operator|<
literal|0
condition|)
block|{
comment|// --> scheme://authority (that's it, return)
name|auth
operator|=
name|afterScheme
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|scheme
block|,
name|auth
block|,
literal|"/"
block|,
literal|null
block|,
literal|null
block|}
return|;
block|}
comment|// --> scheme://authority?... or scheme://authority#...
name|auth
operator|=
name|afterScheme
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|authEnds
argument_list|)
expr_stmt|;
name|afterAuth
operator|=
literal|"/"
operator|+
name|afterScheme
operator|.
name|substring
argument_list|(
name|authEnds
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// --> scheme:/path...
name|afterAuth
operator|=
name|url
operator|.
name|substring
argument_list|(
name|schemeEnd
operator|+
literal|1
argument_list|)
expr_stmt|;
name|auth
operator|=
literal|null
expr_stmt|;
block|}
comment|/* Path, can be terminated by '?' or '#' whichever is first */
specifier|final
name|int
name|pathEnds
init|=
name|StringTools
operator|.
name|findFirst
argument_list|(
name|afterAuth
argument_list|,
literal|"?#"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEnds
operator|<
literal|0
condition|)
block|{
comment|// --> ...path... (no fragment or query, return now)
return|return
operator|new
name|String
index|[]
block|{
name|scheme
block|,
name|auth
block|,
name|afterAuth
block|,
literal|null
block|,
literal|null
block|}
return|;
block|}
comment|/* We have either a query, a fragment or both after the path */
specifier|final
name|String
name|path
init|=
name|afterAuth
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathEnds
argument_list|)
decl_stmt|;
specifier|final
name|String
name|afterPath
init|=
name|afterAuth
operator|.
name|substring
argument_list|(
name|pathEnds
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|/* Query? The query can contain a "#" and has an extra fragment */
if|if
condition|(
name|afterAuth
operator|.
name|charAt
argument_list|(
name|pathEnds
argument_list|)
operator|==
literal|'?'
condition|)
block|{
specifier|final
name|int
name|fragmPos
init|=
name|afterPath
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragmPos
operator|<
literal|0
condition|)
block|{
comment|// --> ...path...?... (no fragment)
return|return
operator|new
name|String
index|[]
block|{
name|scheme
block|,
name|auth
block|,
name|path
block|,
name|afterPath
block|,
literal|null
block|}
return|;
block|}
comment|// --> ...path...?...#... (has also a fragment)
specifier|final
name|String
name|query
init|=
name|afterPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|fragmPos
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fragm
init|=
name|afterPath
operator|.
name|substring
argument_list|(
name|fragmPos
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|scheme
block|,
name|auth
block|,
name|path
block|,
name|query
block|,
name|fragm
block|}
return|;
block|}
comment|// --> ...path...#... (a path followed by a fragment but no query)
return|return
operator|new
name|String
index|[]
block|{
name|scheme
block|,
name|auth
block|,
name|path
block|,
literal|null
block|,
name|afterPath
block|}
return|;
block|}
comment|/**      *<p>Parse<code>scheme:scheme:scheme...</code>.</p>      */
specifier|private
specifier|static
name|Schemes
name|parseSchemes
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|String
name|split
index|[]
init|=
name|StringTools
operator|.
name|splitAll
argument_list|(
name|scheme
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|split
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|split
index|[
name|x
index|]
operator|==
literal|null
condition|)
continue|continue;
name|list
operator|.
name|add
argument_list|(
name|EncodingTools
operator|.
name|urlDecode
argument_list|(
name|split
index|[
name|x
index|]
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
return|return
operator|new
name|Schemes
argument_list|(
name|list
argument_list|)
return|;
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Empty scheme detected"
argument_list|)
throw|;
block|}
comment|/**      *<p>Parse<code>username:password@hostname:port</code>.</p>      */
specifier|private
specifier|static
name|Authority
name|parseAuthority
parameter_list|(
name|String
name|auth
parameter_list|,
name|int
name|defaultPort
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|String
name|split
index|[]
init|=
name|StringTools
operator|.
name|splitOnce
argument_list|(
name|auth
argument_list|,
literal|'@'
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uinfo
index|[]
init|=
name|StringTools
operator|.
name|splitOnce
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
literal|':'
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|hinfo
index|[]
init|=
name|StringTools
operator|.
name|splitOnce
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|,
literal|':'
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|port
decl_stmt|;
if|if
condition|(
operator|(
name|split
index|[
literal|0
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|split
index|[
literal|1
index|]
operator|==
literal|null
operator|)
condition|)
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Missing required host info part"
argument_list|)
throw|;
if|if
condition|(
operator|(
name|uinfo
index|[
literal|0
index|]
operator|==
literal|null
operator|)
operator|&&
operator|(
name|uinfo
index|[
literal|1
index|]
operator|!=
literal|null
operator|)
condition|)
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Password specified without user"
argument_list|)
throw|;
if|if
condition|(
operator|(
name|hinfo
index|[
literal|0
index|]
operator|==
literal|null
operator|)
operator|&&
operator|(
name|hinfo
index|[
literal|1
index|]
operator|!=
literal|null
operator|)
condition|)
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Port specified without host"
argument_list|)
throw|;
try|try
block|{
if|if
condition|(
name|hinfo
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|parsedPort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hinfo
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|parsedPort
operator|<
literal|1
operator|)
operator|||
operator|(
name|parsedPort
operator|>
literal|65535
operator|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Invalid port number "
operator|+
name|parsedPort
decl_stmt|;
throw|throw
operator|new
name|MalformedURLException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/* If the specified port is the default one, ignore it! */
if|if
condition|(
name|defaultPort
operator|==
name|parsedPort
condition|)
name|port
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|port
operator|=
name|parsedPort
expr_stmt|;
block|}
else|else
block|{
name|port
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Specified port is not a number"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Authority
argument_list|(
name|EncodingTools
operator|.
name|urlDecode
argument_list|(
name|uinfo
index|[
literal|0
index|]
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|EncodingTools
operator|.
name|urlDecode
argument_list|(
name|uinfo
index|[
literal|1
index|]
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|EncodingTools
operator|.
name|urlDecode
argument_list|(
name|hinfo
index|[
literal|0
index|]
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|port
argument_list|)
return|;
block|}
comment|/* ====================================================================== */
comment|/* PUBLIC INNER CLASSES                                                   */
comment|/* ====================================================================== */
comment|/**      *<p>The {@link Location.Schemes Schemes} class represents an unmodifiable      * ordered collection of {@link String} schemes for a {@link Location}.</p>      *       * @author<a href="http://could.it/">Pier Fumagalli</a>      */
specifier|public
specifier|static
class|class
name|Schemes
extends|extends
name|AbstractList
implements|implements
name|Encodable
block|{
comment|/**<p>All the {@link String} schemes in order.</p> */
specifier|private
specifier|final
name|String
name|schemes
index|[]
decl_stmt|;
comment|/**<p>The {@link String} representation of this instance.</p> */
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
comment|/**          *<p>Create a new {@link Schemes} instance.</p>          */
specifier|private
name|Schemes
parameter_list|(
name|List
name|schemes
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|schemes
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|schemes
operator|=
operator|(
name|String
index|[]
operator|)
name|schemes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|size
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|EncodingTools
operator|.
name|toString
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**          *<p>Return the {@link String} scheme at the specified index.</p>           */
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|this
operator|.
name|schemes
index|[
name|index
index|]
return|;
block|}
comment|/**          *<p>Return the number of {@link String} schemes contained by this          * {@link Location.Schemes Schemes} instance.</p>           */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemes
operator|.
name|length
return|;
block|}
comment|/**          *<p>Return the URL-encoded {@link String} representation of this          * {@link Location.Schemes Schemes} instance.</p>          */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|string
return|;
block|}
comment|/**          *<p>Return the URL-encoded {@link String} representation of this          * {@link Location.Schemes Schemes} instance using the specified          * character encoding.</p>          */
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|this
operator|.
name|schemes
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|EncodingTools
operator|.
name|urlEncode
argument_list|(
name|this
operator|.
name|schemes
index|[
name|x
index|]
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**          *<p>Return the hash code value for this          * {@link Location.Schemes Schemes} instance.</p>          */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|string
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**          *<p>Check if the specified {@link Object} is equal to this          * {@link Location.Schemes Schemes} instance.</p>          *           *<p>The specified {@link Object} is considered equal to this one if          * it is<b>non-null</b>, it is a {@link Location.Schemes Schemes}          * instance, and its {@link #toString() string representation} equals          * this one's.</p>          */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|(
name|object
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|object
operator|instanceof
name|Schemes
operator|)
condition|)
block|{
return|return
name|this
operator|.
name|string
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Schemes
operator|)
name|object
operator|)
operator|.
name|string
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/* ====================================================================== */
comment|/**      *<p>The {@link Location.Authority Authority} class represents the autority      * and user information for a {@link Location}.</p>      *       * @author<a href="http://could.it/">Pier Fumagalli</a>      */
specifier|public
specifier|static
class|class
name|Authority
implements|implements
name|Encodable
block|{
comment|/**<p>The username of this instance (decoded).</p> */
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
comment|/**<p>The password of this instance (decoded).</p> */
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
comment|/**<p>The host name of this instance (decoded).</p> */
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
comment|/**<p>The port number of this instance.</p> */
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
comment|/**<p>The encoded host and port representation.</p> */
specifier|private
specifier|final
name|String
name|hostinfo
decl_stmt|;
comment|/**<p>The encoded string representation of this instance.</p> */
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
comment|/**          *<p>Create a new {@link Location.Authority Authority} instance.</p>          */
specifier|private
name|Authority
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|pass
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|pass
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
try|try
block|{
name|this
operator|.
name|hostinfo
operator|=
name|this
operator|.
name|getHostInfo
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|this
operator|.
name|toString
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Default encoding \""
operator|+
name|DEFAULT_ENCODING
operator|+
literal|"\" not supported by the platform"
decl_stmt|;
specifier|final
name|InternalError
name|error
init|=
operator|new
name|InternalError
argument_list|(
name|message
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|InternalError
operator|)
name|error
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**          *<p>Returns the decoded user name.</p>           */
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|this
operator|.
name|username
return|;
block|}
comment|/**          *<p>Returns the decoded password.</p>           */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|password
return|;
block|}
comment|/**          *<p>Returns the&quot;user info&quot; field.</p>          *           *<p>This method will concatenate the username and password using the          * colon character and return a<b>non-null</b> {@link String} only if          * both of them are<b>non-null</b>.</p>          */
specifier|public
name|String
name|getUserInfo
parameter_list|()
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|username
operator|==
literal|null
operator|)
operator|||
operator|(
name|this
operator|.
name|password
operator|==
literal|null
operator|)
condition|)
return|return
literal|null
return|;
return|return
name|this
operator|.
name|username
operator|+
literal|':'
operator|+
name|this
operator|.
name|password
return|;
block|}
comment|/**          *<p>Returns the decoded host name.</p>           */
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|this
operator|.
name|host
return|;
block|}
comment|/**          *<p>Returns the port number.</p>           */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|port
return|;
block|}
comment|/**          *<p>Returns the host info part of the          * {@link Location.Authority Authority}.</p>          *           *<p>This is the encoded representation of the          * {@link #getUsername() user name} optionally follwed by the colon (:)          * character and the encoded {@link #getPassword() password}.</p>          */
specifier|public
name|String
name|getHostInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostinfo
return|;
block|}
comment|/**          *<p>Returns the host info part of the          * {@link Location.Authority Authority} using the specified character          * encoding.</p>          *           *<p>This is the encoded representation of the          * {@link #getUsername() user name} optionally follwed by the colon (:)          * character and the encoded {@link #getPassword() password}.</p>          */
specifier|public
name|String
name|getHostInfo
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
specifier|final
name|StringBuffer
name|hostinfo
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|hostinfo
operator|.
name|append
argument_list|(
name|EncodingTools
operator|.
name|urlEncode
argument_list|(
name|this
operator|.
name|host
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
name|hostinfo
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|hostinfo
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**          *<p>Return the URL-encoded {@link String} representation of this          * {@link Location.Authority Authority} instance.</p>          */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|string
return|;
block|}
comment|/**          *<p>Return the URL-encoded {@link String} representation of this          * {@link Location.Authority Authority} instance using the specified          * character encoding.</p>          */
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
specifier|final
name|StringBuffer
name|buffer
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|username
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|EncodingTools
operator|.
name|urlEncode
argument_list|(
name|this
operator|.
name|username
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|password
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|EncodingTools
operator|.
name|urlEncode
argument_list|(
name|this
operator|.
name|password
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
return|return
name|this
operator|.
name|getHostInfo
argument_list|(
name|encoding
argument_list|)
return|;
name|buffer
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getHostInfo
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**          *<p>Return the hash code value for this          * {@link Location.Authority Authority} instance.</p>          */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostinfo
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**          *<p>Check if the specified {@link Object} is equal to this          * {@link Location.Authority Authority} instance.</p>          *           *<p>The specified {@link Object} is considered equal to this one if          * it is<b>non-null</b>, it is a {@link Location.Authority Authority}          * instance, and its {@link #getHostInfo() host info} equals          * this one's.</p>          */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|(
name|object
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|object
operator|instanceof
name|Authority
operator|)
condition|)
block|{
return|return
name|this
operator|.
name|hostinfo
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Authority
operator|)
name|object
operator|)
operator|.
name|hostinfo
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

