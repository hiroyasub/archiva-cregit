begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_comment
comment|/**  *<p>A simplicisting class defining an esay way to log stuff to the  * {@link ServletContext}.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVLogger
block|{
specifier|private
specifier|final
name|ServletContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|String
name|servletName
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|debug
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVLogger} from a {@link ServletConfig}.</p>      */
specifier|public
name|DAVLogger
parameter_list|(
name|ServletConfig
name|config
parameter_list|,
name|boolean
name|debug
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|config
operator|.
name|getServletContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|servletName
operator|=
name|config
operator|.
name|getServletName
argument_list|()
expr_stmt|;
name|this
operator|.
name|debug
operator|=
name|debug
expr_stmt|;
block|}
comment|/**      *<p>Log a debug message to the context logger.</p>      */
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|debug
condition|)
name|this
operator|.
name|doLog
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Log a debug message and related exception to the context logger.</p>      */
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|debug
condition|)
name|this
operator|.
name|doLog
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Log a message to the context logger.</p>      */
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|doLog
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Log a message and related exception to the context logger.</p>      */
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
operator|.
name|doLog
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Internal method for formatting messages and logging.</p>      */
specifier|private
name|void
name|doLog
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
operator|(
name|message
operator|==
literal|null
operator|)
operator|&&
operator|(
name|throwable
operator|==
literal|null
operator|)
condition|)
return|return;
if|if
condition|(
operator|(
name|message
operator|==
literal|null
operator|)
operator|||
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|message
argument_list|)
operator|)
condition|)
name|message
operator|=
literal|"No message"
expr_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|servletName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwable
operator|==
literal|null
condition|)
name|this
operator|.
name|context
operator|.
name|log
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|this
operator|.
name|context
operator|.
name|log
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

