begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  *<p>An utility class providing various static methods operating on  * {@link InputStream input} and {@link OutputStream output} streams.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|StreamTools
block|{
comment|/**<p>Deny construction.</p> */
specifier|private
name|StreamTools
parameter_list|()
block|{
block|}
empty_stmt|;
comment|/**      *<p>Copy every byte from the specified {@link InputStream} to the specifed      * {@link OutputStream} and then close both of them.</p>      *       *<p>This method is equivalent to a call to the following method:      * {@link #copy(InputStream,OutputStream,boolean) copy(in, out, true)}.</p>      *       * @param in the {@link InputStream} to read bytes from.      * @param out the {@link OutputStream} to write bytes to.      * @return the number of bytes copied.      * @throws IOException if an I/O error occurred copying the data.      */
specifier|public
specifier|static
name|long
name|copy
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      *<p>Copy every byte from the specified {@link InputStream} to the specifed      * {@link OutputStream} and then optionally close both of them.</p>      *       * @param in the {@link InputStream} to read bytes from.      * @param out the {@link OutputStream} to write bytes to.      * @param close whether to close the streams or not.      * @return the number of bytes copied.      * @throws IOException if an I/O error occurred copying the data.      */
specifier|public
specifier|static
name|long
name|copy
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null input"
argument_list|)
throw|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null output"
argument_list|)
throw|;
specifier|final
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|length
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|total
operator|+=
name|length
expr_stmt|;
block|}
if|if
condition|(
name|close
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**      * Closes the output stream. The output stream can be null and any IOException's will be swallowed.      *       * @param outputStream The stream to close.      */
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|)
block|{
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|/**      * Closes the input stream. The input stream can be null and any IOException's will be swallowed.      *       * @param inputStream The stream to close.      */
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

