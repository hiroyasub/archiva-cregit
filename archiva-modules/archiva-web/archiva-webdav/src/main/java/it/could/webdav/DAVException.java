begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_comment
comment|/**  *<p>A {@link RuntimeException} representing a  *<a href="http://www.rfc-editor.org/rfc/rfc2518.txt">WebDAV</a>  * response for a specified {@link DAVResource}.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVException
extends|extends
name|RuntimeException
block|{
specifier|private
name|DAVResource
name|resource
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|status
init|=
literal|0
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVException} instance.</p>      */
specifier|public
name|DAVException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Create a new {@link DAVException} instance.</p>      */
specifier|public
name|DAVException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
name|message
argument_list|,
name|throwable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Create a new {@link DAVException} instance.</p>      */
specifier|public
name|DAVException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Create a new {@link DAVException} instance.</p>      */
specifier|public
name|DAVException
parameter_list|(
name|int
name|s
parameter_list|,
name|String
name|m
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|DAVResource
name|r
parameter_list|)
block|{
name|super
argument_list|(
name|m
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|s
expr_stmt|;
block|}
comment|/**      *<p>Return the status code associated with this instance.</p>      */
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
comment|/**      *<p>Return the {@link DAVResource} associated with this instance.</p>      */
specifier|public
name|DAVResource
name|getResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
return|;
block|}
comment|/**      *<p>Write the body of this {@link DAVException} to the specified      * {@link DAVTransaction}'s output.</p>      */
specifier|public
name|void
name|write
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|transaction
operator|.
name|setContentType
argument_list|(
literal|"text/html; charset=\"UTF-8\""
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|setStatus
argument_list|(
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Prepare and log the error message */
name|String
name|message
init|=
name|DAVUtilities
operator|.
name|getStatusMessage
argument_list|(
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|transaction
operator|.
name|setStatus
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|message
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|+
literal|" Unknown"
expr_stmt|;
block|}
comment|/* Write the error message to the client */
name|PrintWriter
name|out
init|=
name|transaction
operator|.
name|write
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<head><title>Error "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</title></head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<p><b>Error "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</b></p>"
argument_list|)
expr_stmt|;
comment|/* Check if we have a resource associated with the extension */
if|if
condition|(
name|this
operator|.
name|getResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|r
init|=
name|transaction
operator|.
name|lookup
argument_list|(
name|this
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|toASCIIString
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<p>Resource in error:<a href=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</a></p>"
argument_list|)
expr_stmt|;
block|}
comment|/* Process any exception and its cause */
name|Throwable
name|throwable
init|=
name|this
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<hr /><p>Exception details:</p>"
argument_list|)
expr_stmt|;
while|while
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<pre>"
argument_list|)
expr_stmt|;
name|throwable
operator|.
name|printStackTrace
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
name|throwable
operator|=
name|throwable
operator|.
name|getCause
argument_list|()
expr_stmt|;
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<hr /><p>Caused by:</p>"
argument_list|)
expr_stmt|;
block|}
comment|/* Close up the HTML */
name|out
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

