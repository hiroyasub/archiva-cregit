begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|InvalidRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|NoSuchBeanDefinitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|AutowireCapableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|MessageSourceResolvable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|NoSuchMessageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * RepositoryContentConsumersTest  *  * @version $Id$  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath:/spring-context.xml"
block|}
argument_list|)
specifier|public
class|class
name|RepositoryContentConsumersTest
extends|extends
name|TestCase
block|{
annotation|@
name|Inject
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|protected
name|ManagedRepository
name|createRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|location
parameter_list|)
block|{
name|ManagedRepository
name|repo
init|=
operator|new
name|ManagedRepository
argument_list|( )
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLocation
argument_list|(
name|location
operator|.
name|getAbsolutePath
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|protected
name|RemoteRepository
name|createRemoteRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|RemoteRepository
name|repo
init|=
operator|new
name|RemoteRepository
argument_list|( )
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
name|RepositoryContentConsumers
name|lookupRepositoryConsumers
parameter_list|( )
throws|throws
name|Exception
block|{
name|ArchivaConfiguration
name|configuration
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"archivaConfiguration#test-conf"
argument_list|,
name|ArchivaConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArchivaAdministrationStub
name|administrationStub
init|=
operator|new
name|ArchivaAdministrationStub
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|RepositoryContentConsumers
name|consumerUtilStub
init|=
operator|new
name|RepositoryContentConsumersStub
argument_list|(
name|administrationStub
argument_list|)
decl_stmt|;
name|RepositoryContentConsumers
name|consumerUtil
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"repositoryContentConsumers#test"
argument_list|,
name|RepositoryContentConsumers
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationContext
name|context
init|=
operator|new
name|MockApplicationContext
argument_list|(
name|consumerUtil
operator|.
name|getAvailableKnownConsumers
argument_list|( )
argument_list|,
name|consumerUtil
operator|.
name|getAvailableInvalidConsumers
argument_list|( )
argument_list|)
decl_stmt|;
name|consumerUtilStub
operator|.
name|setApplicationContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|consumerUtilStub
operator|.
name|setSelectedInvalidConsumers
argument_list|(
name|consumerUtil
operator|.
name|getSelectedInvalidConsumers
argument_list|( )
argument_list|)
expr_stmt|;
name|consumerUtilStub
operator|.
name|setSelectedKnownConsumers
argument_list|(
name|consumerUtil
operator|.
name|getSelectedKnownConsumers
argument_list|( )
argument_list|)
expr_stmt|;
name|consumerUtilStub
operator|.
name|setArchivaAdministration
argument_list|(
name|administrationStub
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"RepositoryContentConsumers should not be null."
argument_list|,
name|consumerUtilStub
argument_list|)
expr_stmt|;
return|return
name|consumerUtilStub
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectedKnownIds
parameter_list|( )
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|String
name|expectedKnownIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"create-missing-checksums"
block|,
literal|"validate-checksum"
block|,
literal|"validate-signature"
block|,
literal|"index-content"
block|,
literal|"auto-remove"
block|,
literal|"auto-rename"
block|,
literal|"create-archiva-metadata"
block|,
literal|"duplicate-artifacts"
block|}
decl_stmt|;
comment|//update-db-artifact, create-missing-checksums, update-db-repository-metadata,
comment|//validate-checksum, validate-signature, index-content, auto-remove, auto-rename,
comment|//metadata-updater
name|List
argument_list|<
name|String
argument_list|>
name|knownConsumers
init|=
name|consumerutil
operator|.
name|getSelectedKnownConsumerIds
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known Consumer IDs should not be null"
argument_list|,
name|knownConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known Consumer IDs.size "
operator|+
name|knownConsumers
argument_list|,
name|expectedKnownIds
operator|.
name|length
argument_list|,
name|knownConsumers
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedKnownIds
control|)
block|{
name|assertTrue
argument_list|(
literal|"Known id ["
operator|+
name|expectedId
operator|+
literal|"] exists."
argument_list|,
name|knownConsumers
operator|.
name|contains
argument_list|(
name|expectedId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectedInvalidIds
parameter_list|( )
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|String
name|expectedInvalidIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-bad-content"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|invalidConsumers
init|=
name|consumerutil
operator|.
name|getSelectedInvalidConsumerIds
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Invalid Consumer IDs should not be null"
argument_list|,
name|invalidConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Consumer IDs.size"
argument_list|,
name|expectedInvalidIds
operator|.
name|length
argument_list|,
name|invalidConsumers
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedInvalidIds
control|)
block|{
name|assertTrue
argument_list|(
literal|"Invalid id ["
operator|+
name|expectedId
operator|+
literal|"] exists."
argument_list|,
name|invalidConsumers
operator|.
name|contains
argument_list|(
name|expectedId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectedKnownConsumerMap
parameter_list|( )
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|String
name|expectedSelectedKnownIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"create-missing-checksums"
block|,
literal|"validate-checksum"
block|,
literal|"index-content"
block|,
literal|"auto-remove"
block|,
literal|"auto-rename"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumerMap
init|=
name|consumerutil
operator|.
name|getSelectedKnownConsumersMap
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known Consumer Map should not be null"
argument_list|,
name|knownConsumerMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known Consumer Map.size but "
operator|+
name|knownConsumerMap
argument_list|,
name|expectedSelectedKnownIds
operator|.
name|length
argument_list|,
name|knownConsumerMap
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedSelectedKnownIds
control|)
block|{
name|KnownRepositoryContentConsumer
name|consumer
init|=
name|knownConsumerMap
operator|.
name|get
argument_list|(
name|expectedId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"] should not be null."
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"].id"
argument_list|,
name|expectedId
argument_list|,
name|consumer
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectedInvalidConsumerMap
parameter_list|( )
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|String
name|expectedSelectedInvalidIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-bad-content"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumerMap
init|=
name|consumerutil
operator|.
name|getSelectedInvalidConsumersMap
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Invalid Consumer Map should not be null"
argument_list|,
name|invalidConsumerMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Consumer Map.size"
argument_list|,
name|expectedSelectedInvalidIds
operator|.
name|length
argument_list|,
name|invalidConsumerMap
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedSelectedInvalidIds
control|)
block|{
name|InvalidRepositoryContentConsumer
name|consumer
init|=
name|invalidConsumerMap
operator|.
name|get
argument_list|(
name|expectedId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"] should not be null."
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"].id"
argument_list|,
name|expectedId
argument_list|,
name|consumer
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAvailableKnownList
parameter_list|( )
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|String
name|expectedKnownIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-artifact"
block|,
literal|"create-missing-checksums"
block|,
literal|"update-db-repository-metadata"
block|,
literal|"validate-checksum"
block|,
literal|"index-content"
block|,
literal|"auto-remove"
block|,
literal|"auto-rename"
block|,
literal|"available-but-unselected"
block|}
decl_stmt|;
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumers
init|=
name|consumerutil
operator|.
name|getAvailableKnownConsumers
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known consumers should not be null."
argument_list|,
name|knownConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"known consumers"
argument_list|,
name|expectedKnownIds
operator|.
name|length
argument_list|,
name|knownConsumers
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedKnownIds
argument_list|)
decl_stmt|;
for|for
control|(
name|KnownRepositoryContentConsumer
name|consumer
range|:
name|knownConsumers
control|)
block|{
name|assertTrue
argument_list|(
literal|"Consumer ["
operator|+
name|consumer
operator|.
name|getId
argument_list|( )
operator|+
literal|"] returned by .getAvailableKnownConsumers() is unexpected."
argument_list|,
name|expectedIds
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAvailableInvalidList
parameter_list|( )
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|String
name|expectedInvalidIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-bad-content"
block|,
literal|"move-to-trash-then-notify"
block|}
decl_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumers
init|=
name|consumerutil
operator|.
name|getAvailableInvalidConsumers
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"invalid consumers should not be null."
argument_list|,
name|invalidConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"invalid consumers"
argument_list|,
name|expectedInvalidIds
operator|.
name|length
argument_list|,
name|invalidConsumers
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedInvalidIds
argument_list|)
decl_stmt|;
for|for
control|(
name|InvalidRepositoryContentConsumer
name|consumer
range|:
name|invalidConsumers
control|)
block|{
name|assertTrue
argument_list|(
literal|"Consumer ["
operator|+
name|consumer
operator|.
name|getId
argument_list|( )
operator|+
literal|"] returned by .getAvailableInvalidConsumers() is unexpected."
argument_list|,
name|expectedIds
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecution
parameter_list|( )
throws|throws
name|Exception
block|{
name|MockControl
name|knownControl
init|=
name|MockControl
operator|.
name|createNiceControl
argument_list|(
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|RepositoryContentConsumers
name|consumers
init|=
name|lookupRepositoryConsumers
argument_list|( )
decl_stmt|;
name|KnownRepositoryContentConsumer
name|selectedKnownConsumer
init|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|knownControl
operator|.
name|getMock
argument_list|( )
decl_stmt|;
name|KnownRepositoryContentConsumer
name|unselectedKnownConsumer
init|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|MockControl
operator|.
name|createNiceControl
argument_list|(
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|)
operator|.
name|getMock
argument_list|( )
decl_stmt|;
name|consumers
operator|.
name|setApplicationContext
argument_list|(
operator|new
name|MockApplicationContext
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|selectedKnownConsumer
argument_list|,
name|unselectedKnownConsumer
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|setSelectedKnownConsumers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|selectedKnownConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|MockControl
name|invalidControl
init|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|InvalidRepositoryContentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|InvalidRepositoryContentConsumer
name|selectedInvalidConsumer
init|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|invalidControl
operator|.
name|getMock
argument_list|( )
decl_stmt|;
name|InvalidRepositoryContentConsumer
name|unselectedInvalidConsumer
init|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|MockControl
operator|.
name|createControl
argument_list|(
name|InvalidRepositoryContentConsumer
operator|.
name|class
argument_list|)
operator|.
name|getMock
argument_list|( )
decl_stmt|;
name|consumers
operator|.
name|setApplicationContext
argument_list|(
operator|new
name|MockApplicationContext
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|selectedInvalidConsumer
argument_list|,
name|unselectedInvalidConsumer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|setSelectedInvalidConsumers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|selectedInvalidConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repo
init|=
name|createRepository
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
operator|new
name|File
argument_list|(
literal|"target/test-repo"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
literal|"target/test-repo/path/to/test-file.txt"
argument_list|)
decl_stmt|;
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|( )
argument_list|)
decl_stmt|;
name|startTime
operator|.
name|setTime
argument_list|(
literal|12345678
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getExcludes
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getIncludes
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|processFile
argument_list|(
name|_OS
argument_list|(
literal|"path/to/test-file.txt"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|( )
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|( )
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|testFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|reset
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|reset
argument_list|( )
expr_stmt|;
name|File
name|notIncludedTestFile
init|=
operator|new
name|File
argument_list|(
literal|"target/test-repo/path/to/test-file.xml"
argument_list|)
decl_stmt|;
name|selectedKnownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getExcludes
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getIncludes
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|( )
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|processFile
argument_list|(
name|_OS
argument_list|(
literal|"path/to/test-file.xml"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|getId
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|setReturnValue
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|( )
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|notIncludedTestFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|reset
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|reset
argument_list|( )
expr_stmt|;
name|File
name|excludedTestFile
init|=
operator|new
name|File
argument_list|(
literal|"target/test-repo/path/to/test-file.txt"
argument_list|)
decl_stmt|;
name|selectedKnownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getExcludes
argument_list|( )
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/test-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|( )
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|processFile
argument_list|(
name|_OS
argument_list|(
literal|"path/to/test-file.txt"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|getId
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|setReturnValue
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|( )
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|excludedTestFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|( )
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|( )
expr_stmt|;
block|}
comment|/**      * Create an OS specific version of the filepath.      * Provide path in unix "/" format.      */
specifier|private
name|String
name|_OS
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
condition|)
block|{
return|return
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'\\'
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
specifier|private
specifier|static
name|Map
name|convertToMap
parameter_list|(
name|List
name|objects
parameter_list|)
block|{
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|( )
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|objects
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
class|class
name|MockApplicationContext
implements|implements
name|ApplicationContext
block|{
specifier|private
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownRepositoryContentConsumer
decl_stmt|;
specifier|private
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidRepositoryContentConsumers
decl_stmt|;
specifier|public
name|MockApplicationContext
parameter_list|(
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownRepositoryContentConsumer
parameter_list|,
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidRepositoryContentConsumers
parameter_list|)
block|{
name|this
operator|.
name|knownRepositoryContentConsumer
operator|=
name|knownRepositoryContentConsumer
expr_stmt|;
name|this
operator|.
name|invalidRepositoryContentConsumers
operator|=
name|invalidRepositoryContentConsumers
expr_stmt|;
block|}
specifier|public
name|AutowireCapableBeanFactory
name|getAutowireCapableBeanFactory
parameter_list|( )
throws|throws
name|IllegalStateException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getDisplayName
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getId
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|ApplicationContext
name|getParent
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|long
name|getStartupDate
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|containsBeanDefinition
parameter_list|(
name|String
name|beanName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getBeanDefinitionCount
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
index|[]
name|getBeanDefinitionNames
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
index|[]
name|getBeanNamesForType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
index|[]
name|getBeanNamesForType
parameter_list|(
name|Class
name|type
parameter_list|,
name|boolean
name|includeNonSingletons
parameter_list|,
name|boolean
name|allowEagerInit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Map
name|getBeansOfType
parameter_list|(
name|Class
name|type
parameter_list|)
throws|throws
name|BeansException
block|{
if|if
condition|(
name|type
operator|==
name|KnownRepositoryContentConsumer
operator|.
name|class
condition|)
block|{
return|return
name|convertToMap
argument_list|(
name|knownRepositoryContentConsumer
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|InvalidRepositoryContentConsumer
operator|.
name|class
condition|)
block|{
return|return
name|convertToMap
argument_list|(
name|invalidRepositoryContentConsumers
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Should not have been called"
argument_list|)
throw|;
block|}
specifier|public
name|Map
name|getBeansOfType
parameter_list|(
name|Class
name|type
parameter_list|,
name|boolean
name|includeNonSingletons
parameter_list|,
name|boolean
name|allowEagerInit
parameter_list|)
throws|throws
name|BeansException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|containsBean
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
index|[]
name|getAliases
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getBean
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|BeansException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
name|requiredType
parameter_list|)
throws|throws
name|BeansException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|BeansException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isPrototype
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isTypeMatch
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
name|targetType
parameter_list|)
throws|throws
name|NoSuchBeanDefinitionException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|containsLocalBean
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|BeanFactory
name|getParentBeanFactory
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|(
name|String
name|code
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|String
name|defaultMessage
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|(
name|String
name|code
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|NoSuchMessageException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|(
name|MessageSourceResolvable
name|resolvable
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|NoSuchMessageException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|publishEvent
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Resource
index|[]
name|getResources
parameter_list|(
name|String
name|locationPattern
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|( )
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|location
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|)
throws|throws
name|BeansException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getBeansWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|BeansException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|A
name|findAnnotationOnBean
parameter_list|(
name|String
name|s
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|aClass
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|Environment
name|getEnvironment
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

