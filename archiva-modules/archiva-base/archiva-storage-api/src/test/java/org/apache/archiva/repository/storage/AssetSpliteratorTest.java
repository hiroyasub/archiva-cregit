begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|mock
operator|.
name|MockAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the AssetSpliterator class  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
class|class
name|AssetSpliteratorTest
block|{
specifier|private
name|StorageAsset
name|createTree
parameter_list|()
block|{
name|MockAsset
name|root
init|=
operator|new
name|MockAsset
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name1
init|=
literal|"a"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|MockAsset
name|parent1
init|=
operator|new
name|MockAsset
argument_list|(
name|root
argument_list|,
name|name1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|15
condition|;
name|k
operator|++
control|)
block|{
name|String
name|name2
init|=
name|name1
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|MockAsset
name|parent2
init|=
operator|new
name|MockAsset
argument_list|(
name|parent1
argument_list|,
name|name2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|u
init|=
literal|0
init|;
name|u
operator|<
literal|5
condition|;
name|u
operator|++
control|)
block|{
name|String
name|name3
init|=
name|name2
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|u
argument_list|)
decl_stmt|;
name|MockAsset
name|parent3
init|=
operator|new
name|MockAsset
argument_list|(
name|parent2
argument_list|,
name|name3
argument_list|)
decl_stmt|;
block|}
block|}
block|}
return|return
name|root
return|;
block|}
specifier|private
class|class
name|Status
block|{
name|LinkedList
argument_list|<
name|StorageAsset
argument_list|>
name|visited
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|( )
decl_stmt|;
name|Status
parameter_list|()
block|{
block|}
specifier|public
name|void
name|add
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
name|visited
operator|.
name|addLast
argument_list|(
name|asset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StorageAsset
name|getLast
parameter_list|()
block|{
return|return
name|visited
operator|.
name|getLast
argument_list|( )
return|;
block|}
specifier|public
name|List
argument_list|<
name|StorageAsset
argument_list|>
name|getVisited
parameter_list|()
block|{
return|return
name|visited
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|visited
operator|.
name|size
argument_list|( )
return|;
block|}
block|}
annotation|@
name|Test
name|void
name|tryAdvance
parameter_list|( )
block|{
name|StorageAsset
name|root
init|=
name|createTree
argument_list|( )
decl_stmt|;
name|AssetSpliterator
name|spliterator
init|=
operator|new
name|AssetSpliterator
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|StorageAsset
name|expectedTarget
init|=
name|root
operator|.
name|list
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|list
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|list
argument_list|( )
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Status
name|status
init|=
operator|new
name|Status
argument_list|( )
decl_stmt|;
name|spliterator
operator|.
name|tryAdvance
argument_list|(
name|a
lambda|->
name|status
operator|.
name|add
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTarget
argument_list|,
name|status
operator|.
name|getLast
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|forEachRemaining
parameter_list|( )
block|{
block|}
annotation|@
name|Test
name|void
name|trySplit
parameter_list|( )
block|{
block|}
block|}
end_class

end_unit

