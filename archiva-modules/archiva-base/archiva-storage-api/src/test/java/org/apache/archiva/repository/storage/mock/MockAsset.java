begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|mock
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|AssetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
operator|.
name|StorageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_class
specifier|public
class|class
name|MockAsset
implements|implements
name|StorageAsset
block|{
specifier|private
name|MockAsset
name|parent
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|MockAsset
argument_list|>
name|children
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|boolean
name|container
init|=
literal|false
decl_stmt|;
specifier|private
name|RepositoryStorage
name|storage
decl_stmt|;
specifier|private
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|throwException
decl_stmt|;
specifier|public
name|MockAsset
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
specifier|public
name|MockAsset
parameter_list|(
name|MockAsset
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad asset creation with empty name and parent"
argument_list|)
throw|;
block|}
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|getPath
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|parent
operator|.
name|getStorage
argument_list|( )
expr_stmt|;
name|parent
operator|.
name|registerChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getPath
parameter_list|(
name|MockAsset
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|hasParent
argument_list|()
operator|&&
operator|!
name|parent
operator|.
name|getPath
argument_list|(  )
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|parent
operator|.
name|getPath
argument_list|( )
operator|+
literal|"/"
operator|+
name|name
return|;
block|}
else|else
block|{
return|return
literal|"/"
operator|+
name|name
return|;
block|}
block|}
specifier|public
name|void
name|registerChild
parameter_list|(
name|MockAsset
name|child
parameter_list|)
block|{
name|children
operator|.
name|putIfAbsent
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unregisterChild
parameter_list|(
name|MockAsset
name|child
parameter_list|)
block|{
name|children
operator|.
name|remove
argument_list|(
name|child
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setStorage
parameter_list|(
name|RepositoryStorage
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
block|}
specifier|public
name|boolean
name|isThrowException
parameter_list|( )
block|{
return|return
name|throwException
return|;
block|}
specifier|public
name|void
name|setThrowException
parameter_list|(
name|boolean
name|throwException
parameter_list|)
block|{
name|this
operator|.
name|throwException
operator|=
name|throwException
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryStorage
name|getStorage
parameter_list|( )
block|{
return|return
name|storage
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|( )
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|( )
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|Instant
name|getModificationTime
parameter_list|( )
block|{
return|return
name|Instant
operator|.
name|now
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isContainer
parameter_list|( )
block|{
return|return
name|this
operator|.
name|container
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLeaf
parameter_list|( )
block|{
return|return
operator|!
name|this
operator|.
name|container
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MockAsset
argument_list|>
name|list
parameter_list|( )
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|children
operator|.
name|values
argument_list|( )
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|( )
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getReadStream
parameter_list|( )
throws|throws
name|IOException
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReadableByteChannel
name|getReadChannel
parameter_list|( )
throws|throws
name|IOException
block|{
name|ReadableByteChannel
name|channel
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ReadableByteChannel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|channel
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|channel
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|getWriteStream
parameter_list|(
name|boolean
name|replace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WritableByteChannel
name|getWriteChannel
parameter_list|(
name|boolean
name|replace
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|WritableByteChannel
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|replaceDataFromFile
parameter_list|(
name|Path
name|newData
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|( )
block|{
return|return
name|exists
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|( )
throws|throws
name|IOException
block|{
name|this
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|(
name|AssetType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|AssetType
operator|.
name|CONTAINER
argument_list|)
condition|)
block|{
name|this
operator|.
name|container
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getFilePath
parameter_list|( )
throws|throws
name|UnsupportedOperationException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileBased
parameter_list|( )
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasParent
parameter_list|( )
block|{
return|return
name|this
operator|.
name|parent
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MockAsset
name|getParent
parameter_list|( )
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|resolve
parameter_list|(
name|String
name|toPath
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|containsKey
argument_list|(
name|toPath
argument_list|)
condition|)
block|{
return|return
name|children
operator|.
name|get
argument_list|(
name|toPath
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|toPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|toPath
operator|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|toPath
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|toPath
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
index|[]
name|destPath
init|=
name|toPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|StringBuilder
name|destPathStr
init|=
operator|new
name|StringBuilder
argument_list|( )
decl_stmt|;
name|MockAsset
name|destParent
init|=
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|destPath
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|destPathStr
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|destPath
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|StorageAsset
name|child
init|=
name|storage
operator|.
name|getAsset
argument_list|(
name|destPathStr
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|destParent
operator|=
operator|(
name|MockAsset
operator|)
name|child
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Resolve "
operator|+
name|destParent
operator|.
name|getPath
argument_list|( )
operator|+
literal|" -- "
operator|+
name|destPath
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|destParent
operator|=
operator|new
name|MockAsset
argument_list|(
name|destParent
argument_list|,
name|destPath
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|destParent
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|relativize
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"relativize this "
operator|+
name|this
operator|.
name|getPath
argument_list|( )
operator|+
literal|" -> other "
operator|+
name|asset
operator|.
name|getPath
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
name|asset
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getPath
argument_list|( )
argument_list|)
operator|.
name|relativize
argument_list|(
name|asset
operator|.
name|getFilePath
argument_list|( )
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|asset
operator|.
name|getPath
argument_list|( )
argument_list|,
name|this
operator|.
name|getPath
argument_list|( )
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
return|return
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|MockAsset
name|mockAsset
init|=
operator|(
name|MockAsset
operator|)
name|o
decl_stmt|;
return|return
name|path
operator|.
name|equals
argument_list|(
name|mockAsset
operator|.
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
return|return
name|path
operator|.
name|hashCode
argument_list|( )
return|;
block|}
block|}
end_class

end_unit

