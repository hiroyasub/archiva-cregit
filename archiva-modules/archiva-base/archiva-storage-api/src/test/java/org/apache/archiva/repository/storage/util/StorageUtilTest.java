begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|AssetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|mock
operator|.
name|MockAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|mock
operator|.
name|MockStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
class|class
name|StorageUtilTest
extends|extends
name|AbstractStorageUtilTest
block|{
specifier|private
name|MockStorage
name|createStorage
parameter_list|(
name|MockAsset
name|root
parameter_list|)
block|{
return|return
operator|new
name|MockStorage
argument_list|(
name|root
argument_list|)
return|;
block|}
specifier|private
name|MockAsset
name|createAsset
parameter_list|(
name|MockAsset
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|AssetType
name|type
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|MockAsset
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MockAsset
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|activateException
parameter_list|(
name|MockAsset
name|root
parameter_list|)
block|{
name|root
operator|.
name|list
argument_list|( )
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|( )
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setThrowException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|StorageAsset
name|createAsset
parameter_list|(
name|StorageAsset
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|AssetType
name|type
parameter_list|)
block|{
return|return
name|createAsset
argument_list|(
operator|(
name|MockAsset
operator|)
name|parent
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|StorageAsset
name|createRootAsset
parameter_list|( )
block|{
return|return
operator|new
name|MockAsset
argument_list|(
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|activateException
parameter_list|(
name|StorageAsset
name|root
parameter_list|)
block|{
name|activateException
argument_list|(
operator|(
name|MockAsset
operator|)
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RepositoryStorage
name|createStorage
parameter_list|(
name|StorageAsset
name|root
parameter_list|)
block|{
return|return
operator|new
name|MockStorage
argument_list|(
operator|(
name|MockAsset
operator|)
name|root
argument_list|)
return|;
block|}
specifier|protected
name|void
name|testDeletionStatus
parameter_list|(
name|int
name|expected
parameter_list|,
name|RepositoryStorage
name|storage
parameter_list|)
block|{
if|if
condition|(
name|storage
operator|instanceof
name|MockStorage
condition|)
block|{
name|Assertions
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
operator|(
name|MockStorage
operator|)
name|storage
operator|)
operator|.
name|getStatus
argument_list|( )
operator|.
name|size
argument_list|(
name|MockStorage
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assertions
operator|.
name|fail
argument_list|(
literal|"Deletion status not implemented for this storage "
operator|+
name|storage
operator|.
name|getClass
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

