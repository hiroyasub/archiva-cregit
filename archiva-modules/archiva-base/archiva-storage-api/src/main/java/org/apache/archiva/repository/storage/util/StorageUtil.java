begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|CopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_comment
comment|/**  *  * Utility class for traversing the asset tree recursively and stream based access to the assets.  *  * @since 3.0  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|StorageUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
comment|/**      * Walk the tree starting at the given asset. The consumer is called for each asset found.      * It runs a depth-first search where children are consumed before their parents.      *      * @param start the starting asset      * @param consumer the consumer that is applied to each asset      */
specifier|public
specifier|static
name|void
name|walk
parameter_list|(
name|StorageAsset
name|start
parameter_list|,
name|Consumer
argument_list|<
name|StorageAsset
argument_list|>
name|consumer
parameter_list|)
block|{
try|try
init|(
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|assetStream
init|=
name|newAssetStream
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|assetStream
operator|.
name|forEach
argument_list|(
name|consumer
operator|::
name|accept
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Walk the tree starting at the given asset. The consumer function is called for each asset found      * as long as it returns<code>true</code> as result. If the function returns<code>false</code> the      * processing stops.      * It runs a depth-first search where children are consumed before their parents.      *      * @param start the starting asset      * @param consumer the consumer function that is applied to each asset and that has to return<code>true</code>,      *                 if the walk should continue.      */
specifier|public
specifier|static
name|void
name|walk
parameter_list|(
name|StorageAsset
name|start
parameter_list|,
name|Function
argument_list|<
name|StorageAsset
argument_list|,
name|Boolean
argument_list|>
name|consumer
parameter_list|)
block|{
try|try
init|(
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|assetStream
init|=
name|newAssetStream
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|assetStream
operator|.
name|anyMatch
argument_list|(
name|a
lambda|->
operator|!
name|consumer
operator|.
name|apply
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a stream of assets starting at the given start node. The returned stream returns a closable      * stream and should always be used in a try-with-resources statement.      *      * @param start the starting asset      * @param parallel<code>true</code>, if a parallel stream should be created, otherwise<code>false</code>      * @return the newly created stream      */
specifier|public
specifier|static
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|newAssetStream
parameter_list|(
name|StorageAsset
name|start
parameter_list|,
name|boolean
name|parallel
parameter_list|)
block|{
specifier|final
name|AssetSpliterator
name|spliterator
init|=
operator|new
name|AssetSpliterator
argument_list|(
name|start
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|spliterator
argument_list|,
name|parallel
argument_list|)
operator|.
name|onClose
argument_list|(
parameter_list|( )
lambda|->
name|spliterator
operator|.
name|close
argument_list|( )
argument_list|)
return|;
block|}
comment|/**      * Returns a non-parallel stream.      * Calls {@link #newAssetStream(StorageAsset, boolean)} with<code>parallel=false</code>.      *      * @param start the starting asset      * @return the returned stream object      */
specifier|public
specifier|static
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|newAssetStream
parameter_list|(
name|StorageAsset
name|start
parameter_list|)
block|{
return|return
name|newAssetStream
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Deletes the given asset and all child assets recursively.      * IOExceptions during deletion are ignored.      *      * @param baseDir The base asset to remove.      *      */
specifier|public
specifier|static
specifier|final
name|void
name|deleteRecursively
parameter_list|(
name|StorageAsset
name|baseDir
parameter_list|)
block|{
name|RepositoryStorage
name|storage
init|=
name|baseDir
operator|.
name|getStorage
argument_list|( )
decl_stmt|;
name|walk
argument_list|(
name|baseDir
argument_list|,
name|a
lambda|->
block|{
try|try
block|{
name|storage
operator|.
name|removeAsset
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not delete asset {}: {}"
argument_list|,
name|a
operator|.
name|getPath
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes the given asset and all child assets recursively.      * @param baseDir The base asset to remove.      * @param stopOnError if<code>true</code> the traversal stops, if an exception is encountered      * @return returns<code>true</code>, if every item was removed. If an IOException was encountered during      * traversal it returns<code>false</code>      */
specifier|public
specifier|static
specifier|final
name|boolean
name|deleteRecursively
parameter_list|(
specifier|final
name|StorageAsset
name|baseDir
parameter_list|,
specifier|final
name|boolean
name|stopOnError
parameter_list|)
block|{
specifier|final
name|RepositoryStorage
name|storage
init|=
name|baseDir
operator|.
name|getStorage
argument_list|( )
decl_stmt|;
try|try
init|(
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|stream
init|=
name|newAssetStream
argument_list|(
name|baseDir
argument_list|)
init|)
block|{
if|if
condition|(
name|stopOnError
condition|)
block|{
comment|// Return true, if no exception occurred
comment|// anyMatch is short-circuiting, that means it stops if the condition matches
return|return
operator|!
name|stream
operator|.
name|map
argument_list|(
name|a
lambda|->
block|{
try|try
block|{
name|storage
operator|.
name|removeAsset
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// Returning false, if OK
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not delete asset {}: {}"
argument_list|,
name|a
operator|.
name|getPath
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Returning true, if exception
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|r
lambda|->
name|r
argument_list|)
return|;
block|}
else|else
block|{
comment|// Return true, if all removals were OK
comment|// We want to consume all, so we use allMatch
return|return
name|stream
operator|.
name|map
argument_list|(
name|a
lambda|->
block|{
try|try
block|{
name|storage
operator|.
name|removeAsset
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// Returning true, if OK
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not delete asset {}: {}"
argument_list|,
name|a
operator|.
name|getPath
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Returning false, if exception
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
argument_list|)
operator|.
name|allMatch
argument_list|(
name|r
lambda|->
name|r
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Moves a asset between different storage instances.      * If you know that source and asset are from the same storage instance, the move method of the storage      * instance may be faster.      *      * @param source The source asset      * @param target The target asset      * @param locked If true, a lock is used for the move operation.      * @param copyOptions Options for copying      * @throws IOException If the move fails      */
specifier|public
specifier|static
specifier|final
name|void
name|moveAsset
parameter_list|(
name|StorageAsset
name|source
parameter_list|,
name|StorageAsset
name|target
parameter_list|,
name|boolean
name|locked
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|isFileBased
argument_list|()
operator|&&
name|target
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
comment|// Short cut for FS operations
comment|// Move is atomic operation
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|target
operator|.
name|getFilePath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|target
operator|.
name|getFilePath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|move
argument_list|(
name|source
operator|.
name|getFilePath
argument_list|()
argument_list|,
name|target
operator|.
name|getFilePath
argument_list|()
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
specifier|final
name|RepositoryStorage
name|sourceStorage
init|=
name|source
operator|.
name|getStorage
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryStorage
name|targetStorage
init|=
name|target
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|sourceStorage
operator|.
name|consumeDataFromChannel
argument_list|(
name|source
argument_list|,
name|is
lambda|->
name|wrapWriteFunction
argument_list|(
name|is
argument_list|,
name|targetStorage
argument_list|,
name|target
argument_list|,
name|locked
argument_list|)
argument_list|,
name|locked
argument_list|)
expr_stmt|;
name|sourceStorage
operator|.
name|removeAsset
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|void
name|wrapWriteFunction
parameter_list|(
name|ReadableByteChannel
name|is
parameter_list|,
name|RepositoryStorage
name|targetStorage
parameter_list|,
name|StorageAsset
name|target
parameter_list|,
name|boolean
name|locked
parameter_list|)
block|{
try|try
block|{
name|targetStorage
operator|.
name|writeDataToChannel
argument_list|(
name|target
argument_list|,
name|os
lambda|->
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
argument_list|,
name|locked
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|void
name|copy
parameter_list|(
specifier|final
name|ReadableByteChannel
name|is
parameter_list|,
specifier|final
name|WritableByteChannel
name|os
parameter_list|)
block|{
if|if
condition|(
name|is
operator|instanceof
name|FileChannel
condition|)
block|{
name|copy
argument_list|(
operator|(
name|FileChannel
operator|)
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|os
operator|instanceof
name|FileChannel
condition|)
block|{
name|copy
argument_list|(
name|is
argument_list|,
operator|(
name|FileChannel
operator|)
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|flip
argument_list|( )
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|( )
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|clear
argument_list|( )
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
name|void
name|copy
parameter_list|(
specifier|final
name|FileChannel
name|is
parameter_list|,
specifier|final
name|WritableByteChannel
name|os
parameter_list|)
block|{
try|try
block|{
name|is
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|is
operator|.
name|size
argument_list|( )
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|void
name|copy
parameter_list|(
specifier|final
name|ReadableByteChannel
name|is
parameter_list|,
specifier|final
name|FileChannel
name|os
parameter_list|)
block|{
try|try
block|{
name|os
operator|.
name|transferFrom
argument_list|(
name|is
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the extension of the name of a given asset. Extension is the substring after the last occurence of '.' in the      * string. If no '.' is found, the empty string is returned.      *      * @param asset The asset from which to return the extension string.      * @return The extension.      */
specifier|public
specifier|static
specifier|final
name|String
name|getExtension
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|asset
operator|.
name|getName
argument_list|()
argument_list|,
literal|"."
argument_list|)
return|;
block|}
block|}
end_class

end_unit

