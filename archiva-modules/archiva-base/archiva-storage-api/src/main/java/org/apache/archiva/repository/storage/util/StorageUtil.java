begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_comment
comment|/**  *  * Utility class for traversing the asset tree recursively and stream based access to the assets.  *  * @since 3.0  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|StorageUtil
block|{
comment|/**      * Walk the tree starting at the given asset. The consumer is called for each asset found.      * It runs a depth-first search where children are consumed before their parents.      *      * @param start the starting asset      * @param consumer the consumer that is applied to each asset      */
specifier|public
specifier|static
name|void
name|walk
parameter_list|(
name|StorageAsset
name|start
parameter_list|,
name|Consumer
argument_list|<
name|StorageAsset
argument_list|>
name|consumer
parameter_list|)
block|{
try|try
init|(
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|assetStream
init|=
name|newAssetStream
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|assetStream
operator|.
name|forEach
argument_list|(
name|consumer
operator|::
name|accept
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Walk the tree starting at the given asset. The consumer function is called for each asset found      * as long as it returns<code>true</code> as result. If the function returns<code>false</code> the      * processing stops.      * It runs a depth-first search where children are consumed before their parents.      *      * @param start the starting asset      * @param consumer the consumer function that is applied to each asset and that has to return<code>true</code>,      *                 if the walk should continue.      */
specifier|public
specifier|static
name|void
name|walk
parameter_list|(
name|StorageAsset
name|start
parameter_list|,
name|Function
argument_list|<
name|StorageAsset
argument_list|,
name|Boolean
argument_list|>
name|consumer
parameter_list|)
block|{
try|try
init|(
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|assetStream
init|=
name|newAssetStream
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|assetStream
operator|.
name|anyMatch
argument_list|(
name|a
lambda|->
operator|!
name|consumer
operator|.
name|apply
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a stream of assets starting at the given start node. The returned stream returns a closable      * stream and should always be used in a try-with-resources statement.      *      * @param start the starting asset      * @param parallel<code>true</code>, if a parallel stream should be created, otherwise<code>false</code>      * @return the newly created stream      */
specifier|public
specifier|static
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|newAssetStream
parameter_list|(
name|StorageAsset
name|start
parameter_list|,
name|boolean
name|parallel
parameter_list|)
block|{
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
operator|new
name|AssetSpliterator
argument_list|(
name|start
argument_list|)
argument_list|,
name|parallel
argument_list|)
return|;
block|}
comment|/**      * Returns a non-parallel stream.      * Calls {@link #newAssetStream(StorageAsset, boolean)} with<code>parallel=false</code>.      *      * @param start the starting asset      * @return the returned stream object      */
specifier|public
specifier|static
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|newAssetStream
parameter_list|(
name|StorageAsset
name|start
parameter_list|)
block|{
return|return
name|newAssetStream
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

