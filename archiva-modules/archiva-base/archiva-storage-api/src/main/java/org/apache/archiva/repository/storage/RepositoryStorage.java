begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|CopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  *  * This is the low level API to access artifacts in a repository. Each artifact is represented  * by one storage asset. Each asset can be accessed by a path that is independent on the underlying storage  * implementation. Paths always use '/' as path separator. The path is local to the repository and  * is unique for each asset.  * The storage API knows nothing about the repository layout or repository specific metadata.  * If you use this API you must either have knowledge about the specific repository layout or use the structure  * as it is, e.g. for browsing.  *  * The base implementation for the storage uses a directory structure on the local filesystem.  *  *  * It is the decision of the repository type specific implementation, if this API provides access to all elements, that  * is really stored or just a selected view.  *  * Checking access is not part of this API.  */
end_comment

begin_interface
specifier|public
interface|interface
name|RepositoryStorage
block|{
comment|/**      * Returns a URI representation of the storage location.      *      * @return The URI that is pointing to the storage.      */
name|URI
name|getLocation
parameter_list|()
function_decl|;
comment|/**      * Updates the base location of the repository storage. The method does not move any data.      * It just points to the new location. Artifacts may not be accessible anymore if the data has      * not been moved or copied. Assets retrieved before the relocation may still be pointing to the      * old location.      *      * @param newLocation The URI to the new location      *      * @throws IOException If the repository cannot be relocated      */
name|void
name|updateLocation
parameter_list|(
name|URI
name|newLocation
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns information about a specific storage asset.      * @param path      * @return      */
name|StorageAsset
name|getAsset
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
comment|/**      * Returns the root asset of the storage      * @return the storage asset that represents the root      */
name|StorageAsset
name|getRoot
parameter_list|( )
function_decl|;
comment|/**      * Consumes the data and sets a lock for the file during the operation.      *      * @param asset The asset from which the data is consumed.      * @param consumerFunction The consumer that reads the data      * @param readLock If true, a read lock is acquired on the asset.      * @throws IOException      */
name|void
name|consumeData
parameter_list|(
name|StorageAsset
name|asset
parameter_list|,
name|Consumer
argument_list|<
name|InputStream
argument_list|>
name|consumerFunction
parameter_list|,
name|boolean
name|readLock
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Consumes the data and sets a lock for the file during the operation.      *      * @param asset The asset from which the data is consumed.      * @param consumerFunction The consumer that reads the data      * @param readLock If true, a read lock is acquired on the asset.      * @throws IOException      */
name|void
name|consumeDataFromChannel
parameter_list|(
name|StorageAsset
name|asset
parameter_list|,
name|Consumer
argument_list|<
name|ReadableByteChannel
argument_list|>
name|consumerFunction
parameter_list|,
name|boolean
name|readLock
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Writes data to the asset using a write lock.      *      * @param asset The asset to which the data is written.      * @param consumerFunction The function that provides the data.      * @param writeLock If true, a write lock is acquired on the destination.      */
name|void
name|writeData
parameter_list|(
name|StorageAsset
name|asset
parameter_list|,
name|Consumer
argument_list|<
name|OutputStream
argument_list|>
name|consumerFunction
parameter_list|,
name|boolean
name|writeLock
parameter_list|)
throws|throws
name|IOException
function_decl|;
empty_stmt|;
comment|/**      * Writes data and sets a lock during the operation.      *      * @param asset The asset to which the data is written.      * @param consumerFunction The function that provides the data.      * @param writeLock If true, a write lock is acquired on the destination.      * @throws IOException      */
name|void
name|writeDataToChannel
parameter_list|(
name|StorageAsset
name|asset
parameter_list|,
name|Consumer
argument_list|<
name|WritableByteChannel
argument_list|>
name|consumerFunction
parameter_list|,
name|boolean
name|writeLock
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Adds a new asset to the underlying storage.      * @param path The path to the asset.      * @param container True, if the asset should be a container, false, if it is a file.      * @return      */
name|StorageAsset
name|addAsset
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|container
parameter_list|)
function_decl|;
comment|/**      * Removes the given asset from the storage.      *      * @param asset      * @throws IOException      */
name|void
name|removeAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Moves the asset to the given location and returns the asset object for the destination. Moves only assets that      * belong to the same storage instance. It will throw a IOException if the assets are from differents storage      * instances.      *      * @param origin The original asset      * @param destination The destination path pointing to the new asset.      * @param copyOptions The copy options.      * @return The asset representation of the moved object.      */
name|StorageAsset
name|moveAsset
parameter_list|(
name|StorageAsset
name|origin
parameter_list|,
name|String
name|destination
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Moves the asset to the given location and returns the asset object for the destination. Moves only assets that      * belong to the same storage instance. It will throw a IOException if the assets are from differents storage      * instances.      * *      * @param origin The original asset      * @param destination The destination path.      * @param copyOptions The copy options (e.g. {@link java.nio.file.StandardCopyOption#REPLACE_EXISTING}      * @throws IOException If it was not possible to copy the asset.      */
name|void
name|moveAsset
parameter_list|(
name|StorageAsset
name|origin
parameter_list|,
name|StorageAsset
name|destination
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Copies the given asset to the new destination. Copies only assets that belong to the same storage instance.      * It will throw a IOException if the assets are from differents storage instances.      *      * @param origin The original asset      * @param destination The path to the new asset      * @param copyOptions The copy options, e.g. (e.g. {@link java.nio.file.StandardCopyOption#REPLACE_EXISTING}      * @return The asset representation of the copied object      * @throws IOException If it was not possible to copy the asset      */
name|StorageAsset
name|copyAsset
parameter_list|(
name|StorageAsset
name|origin
parameter_list|,
name|String
name|destination
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Copies the given asset to the new destination. Copies only assets that belong to the same storage instance.      * It will throw a IOException if the assets are from differents storage instances.      *      * @param origin The original asset      * @param destination The path to the new asset      * @param copyOptions The copy options, e.g. (e.g. {@link java.nio.file.StandardCopyOption#REPLACE_EXISTING}      * @throws IOException If it was not possible to copy the asset      */
name|void
name|copyAsset
parameter_list|(
name|StorageAsset
name|origin
parameter_list|,
name|StorageAsset
name|destination
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

