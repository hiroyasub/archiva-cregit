begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|transaction
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|CopyFileEventTest
extends|extends
name|AbstractFileEventTest
block|{
specifier|private
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/transaction-tests/copy-file"
argument_list|)
decl_stmt|;
specifier|private
name|File
name|testDest
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"test-file.txt"
argument_list|)
decl_stmt|;
specifier|private
name|File
name|testSource
init|=
operator|new
name|File
argument_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/transaction-tests/test-file.txt"
argument_list|)
decl_stmt|;
specifier|private
name|File
name|testDestChecksum
decl_stmt|;
specifier|private
name|String
name|source
decl_stmt|,
name|oldChecksum
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testSource
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testSource
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|testSource
argument_list|,
literal|"source contents"
argument_list|)
expr_stmt|;
name|testDestChecksum
operator|=
operator|new
name|File
argument_list|(
name|testDest
operator|.
name|getPath
argument_list|()
operator|+
literal|".sha1"
argument_list|)
expr_stmt|;
name|testDestChecksum
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testDestChecksum
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|testDestChecksum
argument_list|,
literal|"this is the checksum"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test if the source exists"
argument_list|,
name|testSource
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test if the destination checksum exists"
argument_list|,
name|testDestChecksum
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
name|readFile
argument_list|(
name|testSource
argument_list|)
expr_stmt|;
name|oldChecksum
operator|=
name|readFile
argument_list|(
name|testDestChecksum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyCommitRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|CopyFileEvent
name|event
init|=
operator|new
name|CopyFileEvent
argument_list|(
name|testSource
argument_list|,
name|testDest
argument_list|,
name|digesters
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Test that the destination is not yet created"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination is created"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertChecksumCommit
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|readFile
argument_list|(
name|testDest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination contents are copied correctly"
argument_list|,
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Test that the destination file has been deleted"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertChecksumRollback
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyCommitRollbackWithBackup
parameter_list|()
throws|throws
name|Exception
block|{
name|testDest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testDest
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|testDest
argument_list|,
literal|"overwritten contents"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination exists"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|CopyFileEvent
name|event
init|=
operator|new
name|CopyFileEvent
argument_list|(
name|testSource
argument_list|,
name|testDest
argument_list|,
name|digesters
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|readFile
argument_list|(
name|testDest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination contents have not changed"
argument_list|,
name|target
operator|.
name|equals
argument_list|(
literal|"overwritten contents"
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|commit
argument_list|()
expr_stmt|;
name|target
operator|=
name|readFile
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination contents are copied correctly"
argument_list|,
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertChecksumCommit
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
name|event
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|target
operator|=
name|readFile
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test the destination file contents have been restored"
argument_list|,
name|target
operator|.
name|equals
argument_list|(
literal|"overwritten contents"
argument_list|)
argument_list|)
expr_stmt|;
name|assertChecksumRollback
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateRollbackCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|CopyFileEvent
name|event
init|=
operator|new
name|CopyFileEvent
argument_list|(
name|testSource
argument_list|,
name|testDest
argument_list|,
name|digesters
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Test that the destination is not yet created"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Test that the destination file is not yet created"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination is created"
argument_list|,
name|testDest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertChecksumCommit
argument_list|(
name|testDest
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|readFile
argument_list|(
name|testDest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Test that the destination contents are copied correctly"
argument_list|,
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/transaction-tests"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|assertChecksumCommit
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|assertChecksumCommit
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|readFile
argument_list|(
name|testDestChecksum
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Test that the destination checksum contents are created correctly"
argument_list|,
name|oldChecksum
operator|.
name|equals
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|assertChecksumRollback
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|assertChecksumDoesNotExist
argument_list|(
name|file
argument_list|,
literal|"md5"
argument_list|)
expr_stmt|;
name|assertChecksumExists
argument_list|(
name|file
argument_list|,
literal|"sha1"
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|readFile
argument_list|(
name|testDestChecksum
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test that the destination checksum contents are reverted correctly"
argument_list|,
name|oldChecksum
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

