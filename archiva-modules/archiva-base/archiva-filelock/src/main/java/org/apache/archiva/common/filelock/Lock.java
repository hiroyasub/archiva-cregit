begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 2.0.0  */
end_comment

begin_class
specifier|public
class|class
name|Lock
block|{
specifier|private
name|Path
name|file
decl_stmt|;
specifier|private
name|AtomicBoolean
name|write
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|AtomicInteger
argument_list|>
name|fileClients
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|FileLock
name|fileLock
decl_stmt|;
specifier|private
name|FileChannel
name|fileChannel
decl_stmt|;
specifier|public
name|Lock
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|Lock
parameter_list|(
name|Path
name|file
parameter_list|,
name|boolean
name|write
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|write
operator|=
operator|new
name|AtomicBoolean
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|fileChannel
operator|=
name|write
condition|?
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
else|:
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|AtomicBoolean
name|isWrite
parameter_list|()
block|{
return|return
name|write
return|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setWrite
parameter_list|(
name|boolean
name|write
parameter_list|)
block|{
name|this
operator|.
name|write
operator|.
name|set
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShared
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileLock
operator|.
name|isValid
argument_list|()
operator|&&
name|this
operator|.
name|fileLock
operator|.
name|isShared
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileLock
operator|!=
literal|null
operator|&&
name|this
operator|.
name|fileLock
operator|.
name|isValid
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Thread
argument_list|,
name|AtomicInteger
argument_list|>
name|getFileClients
parameter_list|()
block|{
return|return
name|fileClients
return|;
block|}
specifier|public
name|void
name|addFileClient
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
name|this
operator|.
name|fileClients
operator|.
name|put
argument_list|(
name|thread
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeFileClient
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
return|return
name|this
operator|.
name|fileClients
operator|.
name|remove
argument_list|(
name|thread
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|ioException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|fileLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioException
operator|=
name|e
expr_stmt|;
block|}
name|closeQuietly
argument_list|(
name|fileChannel
argument_list|)
expr_stmt|;
name|fileClients
operator|.
name|remove
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioException
throw|;
block|}
block|}
specifier|protected
name|void
name|openLock
parameter_list|(
name|boolean
name|write
parameter_list|,
name|boolean
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|fileClients
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileLock
operator|=
name|timeout
condition|?
name|fileChannel
operator|.
name|tryLock
argument_list|(
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|write
condition|?
literal|false
else|:
literal|true
argument_list|)
else|:
name|fileChannel
operator|.
name|lock
argument_list|(
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|write
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|closeQuietly
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Lock{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"file="
argument_list|)
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

