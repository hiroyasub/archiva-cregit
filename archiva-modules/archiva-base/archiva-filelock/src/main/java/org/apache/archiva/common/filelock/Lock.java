begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|Lock
block|{
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|AtomicBoolean
name|write
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|AtomicInteger
argument_list|>
name|fileClients
init|=
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|FileLock
name|fileLock
decl_stmt|;
specifier|public
name|Lock
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|write
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|write
operator|=
operator|new
name|AtomicBoolean
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|this
operator|.
name|openLock
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|AtomicBoolean
name|isWrite
parameter_list|()
block|{
return|return
name|write
return|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setWrite
parameter_list|(
name|boolean
name|write
parameter_list|)
block|{
name|this
operator|.
name|write
operator|.
name|set
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileLock
name|getFileLock
parameter_list|()
block|{
return|return
name|fileLock
return|;
block|}
specifier|public
name|void
name|setFileLock
parameter_list|(
name|FileLock
name|fileLock
parameter_list|)
block|{
name|this
operator|.
name|fileLock
operator|=
name|fileLock
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Thread
argument_list|,
name|AtomicInteger
argument_list|>
name|getFileClients
parameter_list|()
block|{
return|return
name|fileClients
return|;
block|}
specifier|public
name|void
name|addFileClient
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
name|this
operator|.
name|fileClients
operator|.
name|put
argument_list|(
name|thread
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeFileClient
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
return|return
name|this
operator|.
name|fileClients
operator|.
name|remove
argument_list|(
name|thread
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|write
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|fileLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|fileClients
operator|.
name|remove
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|openLock
parameter_list|(
name|boolean
name|write
parameter_list|)
throws|throws
name|IOException
block|{
name|fileClients
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
name|write
condition|?
literal|"rw"
else|:
literal|"r"
argument_list|)
decl_stmt|;
name|this
operator|.
name|fileLock
operator|=
name|raf
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|!
name|write
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Lock{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"file="
argument_list|)
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

