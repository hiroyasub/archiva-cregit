begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|OverlappingFileLockException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"fileLockManager#default"
argument_list|)
specifier|public
class|class
name|DefaultFileLockManager
implements|implements
name|FileLockManager
block|{
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|File
argument_list|,
name|Lock
argument_list|>
name|lockFiles
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|File
argument_list|,
name|Lock
argument_list|>
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|skipLocking
init|=
literal|false
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Lock
name|readFileLock
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileLockException
block|{
if|if
condition|(
name|skipLocking
condition|)
block|{
try|try
block|{
return|return
operator|new
name|Lock
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Lock
name|lock
init|=
name|lockFiles
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|lock
operator|=
operator|new
name|Lock
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Lock
name|current
init|=
name|lockFiles
operator|.
name|putIfAbsent
argument_list|(
name|file
argument_list|,
name|lock
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|lock
operator|=
name|current
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OverlappingFileLockException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"OverlappingFileLockException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
name|lockFiles
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// FIXME add a timeout on getting that!!!
while|while
condition|(
literal|true
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"wait read lock"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|lock
operator|.
name|getFileLock
argument_list|()
operator|.
name|isShared
argument_list|()
operator|||
operator|!
name|lock
operator|.
name|getFileLock
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lock
operator|.
name|addFileClient
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
block|}
block|}
comment|//return lock;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeFileLock
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileLockException
block|{
try|try
block|{
if|if
condition|(
name|skipLocking
condition|)
block|{
return|return
operator|new
name|Lock
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// FIXME add a timeout on getting that!!!
while|while
condition|(
literal|true
condition|)
block|{
name|Lock
name|lock
init|=
name|lockFiles
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"wait write lock"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|lock
operator|.
name|getFileLock
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
name|lock
operator|.
name|getFileClients
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
continue|continue;
block|}
return|return
name|lock
return|;
block|}
block|}
else|else
block|{
try|try
block|{
name|lock
operator|=
operator|new
name|Lock
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OverlappingFileLockException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"OverlappingFileLockException: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
name|lockFiles
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|lock
operator|=
name|lockFiles
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"OverlappingFileLockException get: {}"
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
name|Lock
name|current
init|=
name|lockFiles
operator|.
name|putIfAbsent
argument_list|(
name|file
argument_list|,
name|lock
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|lock
operator|=
name|current
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|(
name|Lock
name|lock
parameter_list|)
throws|throws
name|FileLockException
block|{
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"skip releasing null"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|skipLocking
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|lock
operator|.
name|isWrite
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|lock
operator|.
name|getFileLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|getFileClients
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|lockFiles
operator|.
name|remove
argument_list|(
name|lock
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

