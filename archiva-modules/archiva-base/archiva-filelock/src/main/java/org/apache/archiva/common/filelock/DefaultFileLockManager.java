begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"fileLockManager#default"
argument_list|)
specifier|public
class|class
name|DefaultFileLockManager
implements|implements
name|FileLockManager
block|{
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|File
argument_list|,
name|Lock
argument_list|>
name|lockFiles
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|File
argument_list|,
name|Lock
argument_list|>
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|skipLocking
init|=
literal|false
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|timeout
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Lock
name|readFileLock
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileLockException
throws|,
name|FileLockTimeoutException
block|{
if|if
condition|(
name|skipLocking
condition|)
block|{
return|return
operator|new
name|Lock
argument_list|(
name|file
argument_list|)
return|;
block|}
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|boolean
name|acquired
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Lock
name|lock
init|=
operator|new
name|Lock
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|acquired
condition|)
block|{
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|long
name|delta
init|=
name|stopWatch
operator|.
name|getTotalTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|>
name|timeout
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot acquire read lock within {} millis. Will skip the file: {}"
argument_list|,
name|timeout
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// we could not get the lock within the timeout period, so  throw  FileLockTimeoutException
throw|throw
operator|new
name|FileLockTimeoutException
argument_list|()
throw|;
block|}
block|}
try|try
block|{
name|lock
operator|.
name|openLock
argument_list|(
literal|false
argument_list|,
name|timeout
operator|>
literal|0
argument_list|)
expr_stmt|;
name|acquired
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"openLock {}:{}"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lock
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeFileLock
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileLockException
throws|,
name|FileLockTimeoutException
block|{
if|if
condition|(
name|skipLocking
condition|)
block|{
return|return
operator|new
name|Lock
argument_list|(
name|file
argument_list|)
return|;
block|}
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|boolean
name|acquired
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Lock
name|lock
init|=
operator|new
name|Lock
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|acquired
condition|)
block|{
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|long
name|delta
init|=
name|stopWatch
operator|.
name|getTotalTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|>
name|timeout
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot acquire read lock within {} millis. Will skip the file: {}"
argument_list|,
name|timeout
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// we could not get the lock within the timeout period, so throw FileLockTimeoutException
throw|throw
operator|new
name|FileLockTimeoutException
argument_list|()
throw|;
block|}
block|}
try|try
block|{
name|lock
operator|.
name|openLock
argument_list|(
literal|true
argument_list|,
name|timeout
operator|>
literal|0
argument_list|)
expr_stmt|;
name|acquired
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"openLock {}:{}"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lock
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|(
name|Lock
name|lock
parameter_list|)
throws|throws
name|FileLockException
block|{
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"skip releasing null"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|skipLocking
condition|)
block|{
return|return;
block|}
try|try
block|{
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileLockException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
block|}
end_class

end_unit

