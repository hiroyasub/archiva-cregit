begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|Md5Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|digest
operator|.
name|Sha1Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"digesterUtils"
argument_list|)
specifier|public
class|class
name|DigesterUtils
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|Digester
argument_list|>
name|allDigesters
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|DigesterUtils
parameter_list|(
name|PlexusSisuBridge
name|plexusSisuBridge
parameter_list|)
throws|throws
name|PlexusSisuBridgeException
block|{
name|this
operator|.
name|allDigesters
operator|=
name|plexusSisuBridge
operator|.
name|lookupList
argument_list|(
name|Digester
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|allDigesters
operator|==
literal|null
operator|||
name|allDigesters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// olamy when the TCL is not a URLClassLoader lookupList fail !
comment|// when using tomcat maven plugin so adding a simple hack
name|log
operator|.
name|warn
argument_list|(
literal|"using lookList from sisu plexus failed so build plexus Digesters manually"
argument_list|)
expr_stmt|;
name|allDigesters
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Sha1Digester
argument_list|()
argument_list|,
operator|new
name|Md5Digester
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"allIndexCreators {}"
argument_list|,
name|allDigesters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Digester
argument_list|>
name|getAllDigesters
parameter_list|()
block|{
return|return
name|allDigesters
return|;
block|}
specifier|public
name|void
name|setAllDigesters
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Digester
argument_list|>
name|allDigesters
parameter_list|)
block|{
name|this
operator|.
name|allDigesters
operator|=
name|allDigesters
expr_stmt|;
block|}
block|}
end_class

end_unit

