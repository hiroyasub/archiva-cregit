begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Copyright 2012 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Generator of list of random test method  * -Dorg.apache.archiva.test=n  * n&lt;=0 default jdk behavior  * n&gt;0 number of round of random collection  *  * @author Eric  */
end_comment

begin_class
specifier|public
class|class
name|ListGenerator
block|{
specifier|private
specifier|static
name|int
name|MAXROUND
init|=
literal|10
decl_stmt|;
specifier|private
name|ListGenerator
parameter_list|()
block|{
block|}
specifier|static
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|getShuffleList
parameter_list|(
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|computeTestMethods
parameter_list|)
block|{
name|int
name|testRound
decl_stmt|;
try|try
block|{
name|testRound
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.archiva.test"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|testRound
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|testRound
operator|<=
literal|0
condition|)
comment|// default list usage
block|{
return|return
name|computeTestMethods
return|;
block|}
if|if
condition|(
name|computeTestMethods
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|generated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|testRound
operator|=
name|Math
operator|.
name|min
argument_list|(
name|MAXROUND
argument_list|,
name|testRound
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testRound
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|computeTestMethods
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|computeTestMethods
argument_list|)
expr_stmt|;
block|}
comment|// Collections.sort( generated, new FrameworkMethodComparator() );
return|return
name|generated
return|;
block|}
comment|/*private static class FrameworkMethodComparator         implements Comparator<FrameworkMethod>     {         public int compare( FrameworkMethod frameworkMethod, FrameworkMethod frameworkMethod1 )         {             return frameworkMethod.getName().compareTo( frameworkMethod1.getName() );         }     }*/
block|}
end_class

end_unit

