begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ManagedDefaultRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|DefaultArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|UnsupportedExistingLuceneIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|creator
operator|.
name|AbstractIndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|creator
operator|.
name|IndexerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPacker
import|;
end_import

begin_comment
comment|/**  * Consumer for indexing the repository to provide search and IDE integration features.  */
end_comment

begin_class
specifier|public
class|class
name|NexusIndexerConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|KnownRepositoryContentConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NexusIndexerConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|NexusIndexer
name|indexer
decl_stmt|;
specifier|private
name|ArtifactContextProducer
name|artifactContextProducer
decl_stmt|;
specifier|private
name|IndexPacker
name|indexPacker
decl_stmt|;
specifier|private
name|ManagedDefaultRepositoryContent
name|repositoryContent
decl_stmt|;
specifier|private
name|IndexingContext
name|context
decl_stmt|;
specifier|private
name|File
name|managedRepository
decl_stmt|;
specifier|private
name|IndexerEngine
name|indexerEngine
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|uinfos
decl_stmt|;
specifier|public
name|NexusIndexerConsumer
parameter_list|(
name|NexusIndexer
name|indexer
parameter_list|,
name|IndexPacker
name|indexPacker
parameter_list|,
name|IndexerEngine
name|indexerEngine
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|indexPacker
operator|=
name|indexPacker
expr_stmt|;
name|this
operator|.
name|indexerEngine
operator|=
name|indexerEngine
expr_stmt|;
name|this
operator|.
name|artifactContextProducer
operator|=
operator|new
name|DefaultArtifactContextProducer
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Indexes the repository to provide search and IDE integration features"
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"index-content"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|Date
name|whenGathered
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|managedRepository
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|indexDir
init|=
name|repository
operator|.
name|getIndexDir
argument_list|()
decl_stmt|;
name|File
name|indexDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexDir
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
literal|".indexer"
argument_list|)
expr_stmt|;
block|}
name|repositoryContent
operator|=
operator|new
name|ManagedDefaultRepositoryContent
argument_list|()
expr_stmt|;
name|repositoryContent
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|uinfos
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|indexer
init|)
block|{
try|try
block|{
name|context
operator|=
name|indexer
operator|.
name|addIndexingContext
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
argument_list|,
name|indexDirectory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NexusIndexer
operator|.
name|FULL_INDEX
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSearchable
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
comment|// read index to get all the artifacts already indexed
name|IndexReader
name|r
init|=
name|context
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|d
init|=
name|r
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|uinfo
init|=
name|d
operator|.
name|get
argument_list|(
name|ArtifactInfo
operator|.
name|UINFO
argument_list|)
decl_stmt|;
comment|// should we add a check here if the contents of the document still exist in the file system
comment|// for cases when there is already an existing index& the contents of that index doesn't exist
comment|// in the file system& in the database?
if|if
condition|(
name|uinfo
operator|!=
literal|null
condition|)
block|{
name|uinfos
operator|.
name|add
argument_list|(
name|uinfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|indexerEngine
operator|.
name|beginIndexing
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedExistingLuceneIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Could not create index at "
operator|+
name|indexDirectory
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Could not create index at "
operator|+
name|indexDirectory
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|ConsumerException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
comment|// didn't start correctly, so skip
return|return;
block|}
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactContext
name|artifactContext
init|=
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|context
argument_list|,
name|artifactFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactContext
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ArtifactInfo
name|ai
init|=
name|artifactContext
operator|.
name|getArtifactInfo
argument_list|()
decl_stmt|;
name|String
name|uinfo
init|=
name|AbstractIndexCreator
operator|.
name|getGAV
argument_list|(
name|ai
operator|.
name|groupId
argument_list|,
name|ai
operator|.
name|artifactId
argument_list|,
name|ai
operator|.
name|version
argument_list|,
name|ai
operator|.
name|classifier
argument_list|,
name|ai
operator|.
name|packaging
argument_list|)
decl_stmt|;
comment|// already indexed so update!
if|if
condition|(
name|uinfos
operator|.
name|contains
argument_list|(
name|uinfo
argument_list|)
condition|)
block|{
name|indexerEngine
operator|.
name|update
argument_list|(
name|context
argument_list|,
name|artifactContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexerEngine
operator|.
name|index
argument_list|(
name|context
argument_list|,
name|artifactContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ZipException
name|e
parameter_list|)
block|{
comment|// invalid JAR file
name|log
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
specifier|final
name|File
name|indexLocation
init|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
literal|".index"
argument_list|)
decl_stmt|;
try|try
block|{
name|indexerEngine
operator|.
name|endIndexing
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|indexPacker
operator|.
name|packIndex
argument_list|(
name|context
argument_list|,
name|indexLocation
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|removeIndexingContext
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|uinfos
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not pack index"
operator|+
name|indexLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExcludes
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncludes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"**/*"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

