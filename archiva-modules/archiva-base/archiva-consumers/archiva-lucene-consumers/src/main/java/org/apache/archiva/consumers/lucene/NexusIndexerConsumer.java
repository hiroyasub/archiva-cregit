begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ManagedDefaultRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|DefaultArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|DefaultIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|UnsupportedExistingLuceneIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|IndexerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPackingRequest
import|;
end_import

begin_comment
comment|/**  * Consumer for indexing the repository to provide search and IDE integration features.  */
end_comment

begin_class
specifier|public
class|class
name|NexusIndexerConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|KnownRepositoryContentConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NexusIndexerConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ArtifactContextProducer
name|artifactContextProducer
decl_stmt|;
specifier|private
name|IndexPacker
name|indexPacker
decl_stmt|;
specifier|private
name|ManagedDefaultRepositoryContent
name|repositoryContent
decl_stmt|;
specifier|private
name|IndexingContext
name|context
decl_stmt|;
specifier|private
name|File
name|managedRepository
decl_stmt|;
specifier|private
name|IndexerEngine
name|indexerEngine
decl_stmt|;
comment|//private IndexingContextMap indexingContextMap;
specifier|public
name|NexusIndexerConsumer
parameter_list|(
name|IndexPacker
name|indexPacker
parameter_list|,
name|IndexerEngine
name|indexerEngine
parameter_list|)
block|{
name|this
operator|.
name|indexPacker
operator|=
name|indexPacker
expr_stmt|;
name|this
operator|.
name|indexerEngine
operator|=
name|indexerEngine
expr_stmt|;
name|this
operator|.
name|artifactContextProducer
operator|=
operator|new
name|DefaultArtifactContextProducer
argument_list|()
expr_stmt|;
block|}
comment|/* public NexusIndexerConsumer( IndexPacker indexPacker, IndexerEngine indexerEngine, IndexingContextMap indexingContextMap )     {         this.indexPacker = indexPacker;         this.indexerEngine = indexerEngine;         this.indexingContextMap = indexingContextMap;         this.artifactContextProducer = new DefaultArtifactContextProducer();     }*/
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Indexes the repository to provide search and IDE integration features"
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"index-content"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|Date
name|whenGathered
parameter_list|)
throws|throws
name|ConsumerException
block|{
comment|//synchronized( context )
comment|//{
name|log
operator|.
name|debug
argument_list|(
literal|"Begin indexing of repository '"
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"'.."
argument_list|)
expr_stmt|;
name|managedRepository
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|indexDir
init|=
name|repository
operator|.
name|getIndexDir
argument_list|()
decl_stmt|;
name|File
name|indexDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexDir
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
literal|".indexer"
argument_list|)
expr_stmt|;
block|}
name|repositoryContent
operator|=
operator|new
name|ManagedDefaultRepositoryContent
argument_list|()
expr_stmt|;
name|repositoryContent
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|=
operator|new
name|DefaultIndexingContext
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
argument_list|,
name|indexDirectory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NexusIndexer
operator|.
name|FULL_INDEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//context = indexingContextMap.addIndexingContext( repository.getId(), repository.getId(), managedRepository,
comment|//                                indexDirectory, null, null, NexusIndexer.FULL_INDEX, false );
name|context
operator|.
name|setSearchable
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
comment|//indexerEngine.beginIndexing( context );
block|}
catch|catch
parameter_list|(
name|UnsupportedExistingLuceneIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Could not create index at "
operator|+
name|indexDirectory
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Could not create index at "
operator|+
name|indexDirectory
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//}
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|ConsumerException
block|{
synchronized|synchronized
init|(
name|indexerEngine
init|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
comment|// didn't start correctly, so skip
return|return;
block|}
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactContext
name|artifactContext
init|=
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|context
argument_list|,
name|artifactFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactContext
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexerEngine
operator|.
name|index
argument_list|(
name|context
argument_list|,
name|artifactContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZipException
name|e
parameter_list|)
block|{
comment|// invalid JAR file
name|log
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
comment|//synchronized( context )
comment|//{
name|log
operator|.
name|debug
argument_list|(
literal|"End indexing of repository '"
operator|+
name|context
operator|.
name|getRepositoryId
argument_list|()
operator|+
literal|"'.."
argument_list|)
expr_stmt|;
specifier|final
name|File
name|indexLocation
init|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
literal|".index"
argument_list|)
decl_stmt|;
try|try
block|{
comment|//indexerEngine.endIndexing( context );
name|IndexPackingRequest
name|request
init|=
operator|new
name|IndexPackingRequest
argument_list|(
name|context
argument_list|,
name|indexLocation
argument_list|)
decl_stmt|;
name|indexPacker
operator|.
name|packIndex
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//indexingContextMap.removeIndexingContext( context.getId() );
name|context
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not pack index"
operator|+
name|indexLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExcludes
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncludes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"**/*"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

