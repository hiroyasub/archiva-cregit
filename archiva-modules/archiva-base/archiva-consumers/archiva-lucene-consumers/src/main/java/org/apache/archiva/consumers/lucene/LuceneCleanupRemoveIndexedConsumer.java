begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseCleanupConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|ArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|DefaultArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|DefaultIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|context
operator|.
name|UnsupportedExistingLuceneIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|nexus
operator|.
name|index
operator|.
name|IndexerEngine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * LuceneCleanupRemoveIndexedConsumer  *   * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|LuceneCleanupRemoveIndexedConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|DatabaseCleanupConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneCleanupRemoveIndexedConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RepositoryContentFactory
name|repoFactory
decl_stmt|;
specifier|private
name|ArtifactContextProducer
name|artifactContextProducer
decl_stmt|;
specifier|private
name|IndexingContext
name|context
decl_stmt|;
specifier|private
name|IndexerEngine
name|indexerEngine
decl_stmt|;
comment|//TODO - deng - use indexerEngine to remove documents instead of directly using the IndexingContext!
specifier|public
name|LuceneCleanupRemoveIndexedConsumer
parameter_list|(
name|RepositoryContentFactory
name|repoFactory
parameter_list|,
name|IndexerEngine
name|indexerEngine
parameter_list|)
block|{
name|this
operator|.
name|repoFactory
operator|=
name|repoFactory
expr_stmt|;
name|this
operator|.
name|indexerEngine
operator|=
name|indexerEngine
expr_stmt|;
name|this
operator|.
name|artifactContextProducer
operator|=
operator|new
name|DefaultArtifactContextProducer
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|()
block|{
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
comment|/*synchronized( indexerEngine )         {             try             {                 //context.getIndexWriter().close();                  //indexerEngine.endIndexing( context );                 //indexer.removeIndexingContext( context, false );             }             catch ( IOException e )             {                 log.error( e.getMessage() );             }         }        */
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncludedTypes
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|processArchivaArtifact
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ConsumerException
block|{
comment|//synchronized( context )
comment|//{
comment|// TODO - deng - block this if there is the nexus indexer consumer is executing?
name|ManagedRepositoryContent
name|repoContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repoContent
operator|=
name|repoFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Can't run index cleanup consumer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|ManagedRepositoryConfiguration
name|repository
init|=
name|repoContent
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|String
name|indexDir
init|=
name|repository
operator|.
name|getIndexDir
argument_list|()
decl_stmt|;
name|File
name|managedRepository
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|indexDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexDir
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
literal|".indexer"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|context
operator|=
operator|new
name|DefaultIndexingContext
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
argument_list|,
name|indexDirectory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NexusIndexer
operator|.
name|FULL_INDEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//context =
comment|//    indexer.addIndexingContext( repository.getId(), repository.getId(), managedRepository,
comment|//                                indexDirectory, null, null, NexusIndexer.FULL_INDEX );
name|context
operator|.
name|setSearchable
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedExistingLuceneIndexException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported index format."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to open index at "
operator|+
name|indexDirectory
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|repoContent
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|repoContent
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ArtifactContext
name|artifactContext
init|=
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|context
argument_list|,
name|artifactFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactContext
operator|!=
literal|null
condition|)
block|{
comment|//indexerEngine.remove( context, artifactContext );
name|indexerEngine
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|artifactContext
argument_list|)
expr_stmt|;
name|context
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// hack for deleting documents - indexer engine's remove(...) isn't working for me
comment|//removeDocuments( artifactContext );
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to open index at "
operator|+
name|indexDirectory
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// }
block|}
comment|/* private void removeDocuments( ArtifactContext ac )         throws IOException     {         synchronized( indexerEngine )         {             IndexWriter w = context.getIndexWriter();                  ArtifactInfo ai = ac.getArtifactInfo();             String uinfo = AbstractIndexCreator.getGAV( ai.groupId, ai.artifactId, ai.version, ai.classifier, ai.packaging );                  Document doc = new Document();             doc.add( new Field( ArtifactInfo.DELETED, uinfo, Field.Store.YES, Field.Index.NO ) );             doc.add( new Field( ArtifactInfo.LAST_MODIFIED, Long.toString( System.currentTimeMillis() ), Field.Store.YES,                                 Field.Index.NO ) );                  w.addDocument( doc );                  w.deleteDocuments( new Term( ArtifactInfo.UINFO, uinfo ) );                  w.commit();                  context.updateTimestamp();         }     }*/
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Remove indexed content if not present on filesystem."
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"not-present-remove-indexed"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setRepositoryContentFactory
parameter_list|(
name|RepositoryContentFactory
name|repoFactory
parameter_list|)
block|{
name|this
operator|.
name|repoFactory
operator|=
name|repoFactory
expr_stmt|;
block|}
specifier|public
name|void
name|setArtifactContextProducer
parameter_list|(
name|ArtifactContextProducer
name|artifactContextProducer
parameter_list|)
block|{
name|this
operator|.
name|artifactContextProducer
operator|=
name|artifactContextProducer
expr_stmt|;
block|}
block|}
end_class

end_unit

