begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseCleanupConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|ArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|ArtifactIndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduled
operator|.
name|tasks
operator|.
name|TaskCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * LuceneCleanupRemoveIndexedConsumer  *   * Clean up the index of artifacts that are no longer existing in the file system (managed repositories).    *   * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|LuceneCleanupRemoveIndexedConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|DatabaseCleanupConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneCleanupRemoveIndexedConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RepositoryContentFactory
name|repoFactory
decl_stmt|;
specifier|private
name|ArchivaTaskScheduler
name|scheduler
decl_stmt|;
specifier|public
name|LuceneCleanupRemoveIndexedConsumer
parameter_list|(
name|RepositoryContentFactory
name|repoFactory
parameter_list|,
name|ArchivaTaskScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|repoFactory
operator|=
name|repoFactory
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|()
block|{
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncludedTypes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|processArchivaArtifact
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|ManagedRepositoryContent
name|repoContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repoContent
operator|=
name|repoFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Can't run index cleanup consumer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|ManagedRepositoryConfiguration
name|repository
init|=
name|repoContent
operator|.
name|getRepository
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|repoContent
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|repoContent
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ArtifactIndexingTask
name|task
init|=
name|TaskCreator
operator|.
name|createIndexingTask
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactFile
argument_list|,
name|ArtifactIndexingTask
operator|.
name|DELETE
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Queueing indexing task '"
operator|+
name|task
operator|.
name|getName
argument_list|()
operator|+
literal|"' to remove the artifact from the index."
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|queueIndexingTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// note we finish immediately here since it isn't done repo-by-repo. It might be nice to ensure that is
comment|// the case for optimisation though
name|task
operator|=
name|TaskCreator
operator|.
name|createIndexingTask
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactFile
argument_list|,
name|ArtifactIndexingTask
operator|.
name|FINISH
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Queueing indexing task + '"
operator|+
name|task
operator|.
name|getName
argument_list|()
operator|+
literal|"' to finish indexing."
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|queueIndexingTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Remove indexed content if not present on filesystem."
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"not-present-remove-indexed"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setRepositoryContentFactory
parameter_list|(
name|RepositoryContentFactory
name|repoFactory
parameter_list|)
block|{
name|this
operator|.
name|repoFactory
operator|=
name|repoFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

