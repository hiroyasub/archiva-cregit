begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|dependencytree
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|DefaultMavenProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|ProjectBuildingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|filter
operator|.
name|AncestorOrSelfDependencyNodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|filter
operator|.
name|DependencyNodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|filter
operator|.
name|StateDependencyNodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|BuildingDependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|CollectingDependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|DependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|FilteringDependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="org.apache.maven.archiva.consumers.KnownRepositoryContentConsumer"  *                   role-hint="dependency-tree-generator" instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|DependencyTreeGeneratorConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|KnownRepositoryContentConsumer
block|{
comment|/** @plexus.configuration */
specifier|private
name|File
name|generatedRepositoryLocation
decl_stmt|;
comment|/** @plexus.configuration */
specifier|private
name|File
name|localRepository
decl_stmt|;
comment|/** @plexus.requirement */
specifier|private
name|DependencyTreeBuilder
name|dependencyTreeBuilder
decl_stmt|;
comment|/** @plexus.requirement */
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/** @plexus.requirement role-hint="maven" */
specifier|private
name|ArtifactMetadataSource
name|artifactMetadataSource
decl_stmt|;
comment|/** @plexus.requirement */
specifier|private
name|ArtifactCollector
name|artifactCollector
decl_stmt|;
comment|/** @plexus.requirement */
specifier|private
name|MavenProjectBuilder
name|projectBuilder
decl_stmt|;
comment|/** @plexus.requirement */
specifier|private
name|ArtifactRepositoryFactory
name|artifactRepositoryFactory
decl_stmt|;
specifier|private
name|String
name|repositoryLocation
decl_stmt|;
specifier|private
specifier|final
name|DefaultRepositoryLayout
name|layout
init|=
operator|new
name|DefaultRepositoryLayout
argument_list|()
decl_stmt|;
specifier|private
name|ArtifactRepository
name|localArtifactRepository
decl_stmt|;
specifier|private
name|Field
name|rawProjectCacheField
decl_stmt|;
specifier|private
name|Field
name|processedProjectCacheField
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|includes
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.pom"
argument_list|)
decl_stmt|;
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Generate dependency tree metadata for tracking changes across algorithms"
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"dependency-tree-generator"
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setGeneratedRepositoryLocation
parameter_list|(
name|File
name|generatedRepositoryLocation
parameter_list|)
block|{
name|this
operator|.
name|generatedRepositoryLocation
operator|=
name|generatedRepositoryLocation
expr_stmt|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|repositoryLocation
operator|=
name|repository
operator|.
name|getLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|generatedRepositoryLocation
operator|==
literal|null
condition|)
block|{
name|generatedRepositoryLocation
operator|=
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localRepository
operator|==
literal|null
condition|)
block|{
comment|// This is a bit crappy, it would be better to operate entirely within
comment|// the base repository, but would need to adjust maven-artifact
name|localRepository
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".m2/repository"
argument_list|)
expr_stmt|;
try|try
block|{
name|localArtifactRepository
operator|=
name|artifactRepositoryFactory
operator|.
name|createArtifactRepository
argument_list|(
literal|"local"
argument_list|,
name|localRepository
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
block|}
specifier|public
name|List
name|getExcludes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|MavenProject
name|project
decl_stmt|;
try|try
block|{
name|project
operator|=
name|projectBuilder
operator|.
name|build
argument_list|(
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
name|path
argument_list|)
argument_list|,
name|localArtifactRepository
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// manually flush out the cache for memory concerns and more accurate building
name|flushProjectCache
argument_list|(
name|projectBuilder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProjectBuildingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|DependencyNode
name|rootNode
decl_stmt|;
try|try
block|{
comment|// TODO: do this for different values of new ScopeArtifactFilter( scope )
name|ArtifactFilter
name|artifactFilter
init|=
literal|null
decl_stmt|;
name|rootNode
operator|=
name|dependencyTreeBuilder
operator|.
name|buildDependencyTree
argument_list|(
name|project
argument_list|,
name|localArtifactRepository
argument_list|,
name|artifactFactory
argument_list|,
name|artifactMetadataSource
argument_list|,
name|artifactFilter
argument_list|,
name|artifactCollector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DependencyTreeBuilderException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Document
name|document
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|DependencyNodeVisitor
name|visitor
init|=
operator|new
name|XmlSerializingDependencyNodeVisitor
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|// TODO: remove the need for this when the serializer can calculate last nodes from visitor calls only
name|visitor
operator|=
operator|new
name|BuildingDependencyNodeVisitor
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|CollectingDependencyNodeVisitor
name|collectingVisitor
init|=
operator|new
name|CollectingDependencyNodeVisitor
argument_list|()
decl_stmt|;
name|DependencyNodeVisitor
name|firstPassVisitor
init|=
operator|new
name|FilteringDependencyNodeVisitor
argument_list|(
name|collectingVisitor
argument_list|,
name|StateDependencyNodeFilter
operator|.
name|INCLUDED
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|accept
argument_list|(
name|firstPassVisitor
argument_list|)
expr_stmt|;
name|DependencyNodeFilter
name|secondPassFilter
init|=
operator|new
name|AncestorOrSelfDependencyNodeFilter
argument_list|(
name|collectingVisitor
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|visitor
operator|=
operator|new
name|FilteringDependencyNodeVisitor
argument_list|(
name|visitor
argument_list|,
name|secondPassFilter
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Artifact
name|artifact
init|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|project
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|p
init|=
name|layout
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Bad path: "
operator|+
name|p
operator|+
literal|"; should be: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|File
name|generatedFile
init|=
operator|new
name|File
argument_list|(
name|generatedRepositoryLocation
argument_list|,
name|p
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|generatedFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|generatedFile
argument_list|)
expr_stmt|;
name|OutputFormat
name|format
init|=
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
decl_stmt|;
name|XMLWriter
name|w
init|=
operator|new
name|XMLWriter
argument_list|(
name|writer
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushProjectCache
parameter_list|(
name|MavenProjectBuilder
name|projectBuilder
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|rawProjectCacheField
operator|==
literal|null
condition|)
block|{
name|rawProjectCacheField
operator|=
name|DefaultMavenProjectBuilder
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"rawProjectCache"
argument_list|)
expr_stmt|;
name|rawProjectCacheField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processedProjectCacheField
operator|==
literal|null
condition|)
block|{
name|processedProjectCacheField
operator|=
name|DefaultMavenProjectBuilder
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"processedProjectCache"
argument_list|)
expr_stmt|;
name|processedProjectCacheField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|rawProjectCacheField
operator|.
name|set
argument_list|(
name|projectBuilder
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|processedProjectCacheField
operator|.
name|set
argument_list|(
name|projectBuilder
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|XmlSerializingDependencyNodeVisitor
implements|implements
name|DependencyNodeVisitor
block|{
specifier|private
name|Element
name|xmlNode
decl_stmt|;
specifier|public
name|XmlSerializingDependencyNodeVisitor
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|xmlNode
operator|=
name|document
operator|.
name|addElement
argument_list|(
literal|"tree"
argument_list|)
expr_stmt|;
block|}
comment|// DependencyNodeVisitor methods ------------------------------------------
comment|/*          * @see org.apache.maven.shared.dependency.tree.traversal.DependencyNodeVisitor#visit(org.apache.maven.shared.dependency.tree.DependencyNode)          */
specifier|public
name|boolean
name|visit
parameter_list|(
name|DependencyNode
name|node
parameter_list|)
block|{
name|Element
name|dependency
init|=
name|xmlNode
operator|.
name|addElement
argument_list|(
literal|"dependency"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|node
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|dependency
operator|.
name|addElement
argument_list|(
literal|"groupId"
argument_list|)
operator|.
name|setText
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|addElement
argument_list|(
literal|"artifactId"
argument_list|)
operator|.
name|setText
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|addElement
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setText
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|addElement
argument_list|(
literal|"version"
argument_list|)
operator|.
name|setText
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getScope
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dependency
operator|.
name|addElement
argument_list|(
literal|"scope"
argument_list|)
operator|.
name|setText
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dependency
operator|.
name|addElement
argument_list|(
literal|"classifier"
argument_list|)
operator|.
name|setText
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xmlNode
operator|=
name|dependency
operator|.
name|addElement
argument_list|(
literal|"dependencies"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/*          * @see org.apache.maven.shared.dependency.tree.traversal.DependencyNodeVisitor#endVisit(org.apache.maven.shared.dependency.tree.DependencyNode)          */
specifier|public
name|boolean
name|endVisit
parameter_list|(
name|DependencyNode
name|node
parameter_list|)
block|{
name|Element
name|e
init|=
name|xmlNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xmlNode
operator|.
name|hasContent
argument_list|()
condition|)
block|{
name|e
operator|.
name|remove
argument_list|(
name|xmlNode
argument_list|)
expr_stmt|;
block|}
name|xmlNode
operator|=
name|e
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|setIncludes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
block|}
block|}
end_class

end_unit

