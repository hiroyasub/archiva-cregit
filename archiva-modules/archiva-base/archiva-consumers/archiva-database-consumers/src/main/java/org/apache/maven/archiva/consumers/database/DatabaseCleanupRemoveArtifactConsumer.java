begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|RepositoryProblemDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|RepositoryProblemByArtifactConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|DatabaseCleanupConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArtifactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Consumer for cleaning up the database of artifacts that are no longer existing in the repository.   *  *<a href="mailto:oching@apache.org">Maria Odea Ching</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.database.updater.DatabaseCleanupConsumer"  *                   role-hint="not-present-remove-db-artifact"  *                   instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseCleanupRemoveArtifactConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|DatabaseCleanupConsumer
block|{
comment|/**      * @plexus.configuration default-value="not-present-remove-db-artifact"      */
specifier|private
name|String
name|id
decl_stmt|;
comment|/**      * @plexus.configuration default-value="Remove artifact from database if not present on filesystem."      */
specifier|private
name|String
name|description
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|ArtifactDAO
name|artifactDAO
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|RepositoryProblemDAO
name|repositoryProblemDAO
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.archiva.AuditLog"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|DELIM
init|=
literal|' '
decl_stmt|;
specifier|public
name|void
name|beginScan
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncludedTypes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|processArchivaArtifact
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ConsumerException
block|{
try|try
block|{
name|ManagedRepositoryContent
name|repositoryContent
init|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repositoryContent
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|repositoryContent
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|artifactDAO
operator|.
name|deleteArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|repositoryContent
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|AuditEvent
operator|.
name|REMOVE_SCANNED
argument_list|)
expr_stmt|;
comment|// Remove all repository problems related to this artifact
name|Constraint
name|artifactConstraint
init|=
operator|new
name|RepositoryProblemByArtifactConstraint
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RepositoryProblem
argument_list|>
name|repositoryProblems
init|=
name|repositoryProblemDAO
operator|.
name|queryRepositoryProblems
argument_list|(
name|artifactConstraint
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryProblems
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RepositoryProblem
name|repositoryProblem
range|:
name|repositoryProblems
control|)
block|{
name|repositoryProblemDAO
operator|.
name|deleteRepositoryProblem
argument_list|(
name|repositoryProblem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Can't run database cleanup remove artifact consumer: "
operator|+
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setArtifactDAO
parameter_list|(
name|ArtifactDAO
name|artifactDAO
parameter_list|)
block|{
name|this
operator|.
name|artifactDAO
operator|=
name|artifactDAO
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryProblemDAO
parameter_list|(
name|RepositoryProblemDAO
name|repositoryProblemDAO
parameter_list|)
block|{
name|this
operator|.
name|repositoryProblemDAO
operator|=
name|repositoryProblemDAO
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryFactory
parameter_list|(
name|RepositoryContentFactory
name|repositoryFactory
parameter_list|)
block|{
name|this
operator|.
name|repositoryFactory
operator|=
name|repositoryFactory
expr_stmt|;
block|}
specifier|private
name|void
name|triggerAuditEvent
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|String
name|msg
init|=
name|repoId
operator|+
name|DELIM
operator|+
literal|"<db-scan>"
operator|+
name|DELIM
operator|+
literal|"<system>"
operator|+
name|DELIM
operator|+
literal|'\"'
operator|+
name|resource
operator|+
literal|'\"'
operator|+
name|DELIM
operator|+
literal|'\"'
operator|+
name|action
operator|+
literal|'\"'
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

