begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumValidatorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|isValidChecksum
parameter_list|( )
throws|throws
name|URISyntaxException
throws|,
name|ChecksumValidationException
block|{
name|ChecksumValidator
name|validator
init|=
operator|new
name|ChecksumValidator
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"checksum/checksumTest1.txt"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"md5"
argument_list|,
literal|"sha1"
argument_list|,
literal|"sha2"
argument_list|,
literal|"sha3"
argument_list|,
literal|"sha5"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ext
range|:
name|exts
control|)
block|{
name|Path
name|hashFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
name|fileName
operator|+
literal|"."
operator|+
name|ext
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validator
operator|.
name|isValidChecksum
argument_list|(
name|hashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fileName
operator|=
literal|"checksum/checksumTest2.txt"
expr_stmt|;
for|for
control|(
name|String
name|ext
range|:
name|exts
control|)
block|{
name|Path
name|hashFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
name|fileName
operator|+
literal|"."
operator|+
name|ext
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validator
operator|.
name|isValidChecksum
argument_list|(
name|hashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|isInValidChecksum
parameter_list|( )
throws|throws
name|URISyntaxException
throws|,
name|ChecksumValidationException
block|{
name|ChecksumValidator
name|validator
init|=
operator|new
name|ChecksumValidator
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"checksum/checksumTest3.txt"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"md5"
argument_list|,
literal|"sha1"
argument_list|,
literal|"sha2"
argument_list|,
literal|"sha3"
argument_list|,
literal|"sha5"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ext
range|:
name|exts
control|)
block|{
name|Path
name|hashFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
name|fileName
operator|+
literal|"."
operator|+
name|ext
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|validator
operator|.
name|isValidChecksum
argument_list|(
name|hashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|isInvalidExtension
parameter_list|( )
throws|throws
name|URISyntaxException
throws|,
name|ChecksumValidationException
block|{
name|ChecksumValidator
name|validator
init|=
operator|new
name|ChecksumValidator
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"checksum/checksumTest1.txt"
decl_stmt|;
name|String
name|ext
init|=
literal|"md8"
decl_stmt|;
try|try
block|{
name|Path
name|hashFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
name|fileName
operator|+
literal|"."
operator|+
name|ext
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
name|validator
operator|.
name|isValidChecksum
argument_list|(
name|hashFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumValidationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ChecksumValidationException
operator|.
name|ValidationError
operator|.
name|INVALID_FORMAT
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeFileDoesNotExist
parameter_list|( )
throws|throws
name|URISyntaxException
throws|,
name|ChecksumValidationException
block|{
name|ChecksumValidator
name|validator
init|=
operator|new
name|ChecksumValidator
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"checksum/checksumTest4.txt"
decl_stmt|;
name|String
name|ext
init|=
literal|"md5"
decl_stmt|;
try|try
block|{
name|Path
name|hashFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
name|fileName
operator|+
literal|"."
operator|+
name|ext
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
name|validator
operator|.
name|isValidChecksum
argument_list|(
name|hashFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumValidationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ChecksumValidationException
operator|.
name|ValidationError
operator|.
name|READ_ERROR
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checksumFileDoesNotExist
parameter_list|( )
throws|throws
name|URISyntaxException
throws|,
name|ChecksumValidationException
block|{
name|ChecksumValidator
name|validator
init|=
operator|new
name|ChecksumValidator
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"checksumTest5.txt"
decl_stmt|;
name|String
name|ext
init|=
literal|"md5"
decl_stmt|;
try|try
block|{
name|Path
name|sibling
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
literal|"checksum/checksumTest1.txt."
operator|+
name|ext
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
name|Path
name|hashFile
init|=
name|sibling
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|isValidChecksum
argument_list|(
name|hashFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumValidationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ChecksumValidationException
operator|.
name|ValidationError
operator|.
name|FILE_NOT_FOUND
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeHash
parameter_list|( )
throws|throws
name|URISyntaxException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
throws|,
name|ChecksumValidationException
block|{
name|ChecksumValidator
name|validator
init|=
operator|new
name|ChecksumValidator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hashes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
name|hashes
operator|.
name|put
argument_list|(
literal|"md5"
argument_list|,
literal|"079fe13e970ae7311172df6657f36892"
argument_list|)
expr_stmt|;
name|hashes
operator|.
name|put
argument_list|(
literal|"sha1"
argument_list|,
literal|"01e14abba5401e1a63be468f9c3b723167f27dc8"
argument_list|)
expr_stmt|;
name|hashes
operator|.
name|put
argument_list|(
literal|"sha2"
argument_list|,
literal|"ae7278e7bdfd8d7c06f9b1932ddccdddb0061a58a893aec3f00932e53ef9c794"
argument_list|)
expr_stmt|;
name|hashes
operator|.
name|put
argument_list|(
literal|"sha3"
argument_list|,
literal|"a52efc629f256cd2b390f080ab7e23fc706ab9e2c8948cea2bd8504a70894f69f44f48e83c889edc82b40b673b575bad"
argument_list|)
expr_stmt|;
name|hashes
operator|.
name|put
argument_list|(
literal|"sha5"
argument_list|,
literal|"b2340bbf150403725fdf6a6f340a8a33bb9526bad7e0220f1dfea67d5a06217bc1d5c3a773b083ed8c9f5352c94ecc6da2a6d8a33ad0347566f0acc55e042fde"
argument_list|)
expr_stmt|;
name|Path
name|hashFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|getContextClassLoader
argument_list|( )
operator|.
name|getResource
argument_list|(
literal|"checksum/checksumTest1.txt"
argument_list|)
operator|.
name|toURI
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|hashes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|expectedSum
init|=
name|validator
operator|.
name|convertFromHex
argument_list|(
name|hashes
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|computedSum
init|=
name|validator
operator|.
name|computeHash
argument_list|(
name|hashFile
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedSum
argument_list|,
name|computedSum
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|readHashFile
parameter_list|( )
block|{
block|}
block|}
end_class

end_unit

