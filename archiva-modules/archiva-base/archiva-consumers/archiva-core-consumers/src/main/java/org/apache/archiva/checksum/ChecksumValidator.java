begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumValidationException
operator|.
name|ValidationError
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Class for validating checksums.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumValidator
block|{
specifier|private
specifier|final
name|int
name|NOT_INITALIZED
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|INITIALIZING
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
name|INITIALIZED
init|=
literal|2
decl_stmt|;
specifier|private
name|AtomicInteger
name|status
init|=
operator|new
name|AtomicInteger
argument_list|(
name|NOT_INITALIZED
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|supportedTypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
specifier|public
name|ChecksumValidator
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|int
name|val
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|compareAndSet
argument_list|(
name|NOT_INITALIZED
argument_list|,
name|INITIALIZING
argument_list|)
condition|)
block|{
try|try
block|{
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"md5"
argument_list|,
literal|"MD5"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha1"
argument_list|,
literal|"SHA-1"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha-1"
argument_list|,
literal|"SHA-1"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha2"
argument_list|,
literal|"SHA-256"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha256"
argument_list|,
literal|"SHA-256"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha-256"
argument_list|,
literal|"SHA-256"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha3"
argument_list|,
literal|"SHA-384"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha384"
argument_list|,
literal|"SHA-384"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha-384"
argument_list|,
literal|"SHA-384"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha5"
argument_list|,
literal|"SHA-512"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha512"
argument_list|,
literal|"SHA-512"
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|put
argument_list|(
literal|"sha-512"
argument_list|,
literal|"SHA-512"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|status
operator|.
name|set
argument_list|(
name|INITIALIZED
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|val
operator|=
name|status
operator|.
name|intValue
argument_list|()
operator|)
operator|!=
name|INITIALIZED
condition|)
block|{
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|val
operator|=
name|status
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
do|while
condition|(
name|val
operator|!=
name|INITIALIZED
condition|)
do|;
block|}
block|}
specifier|public
name|boolean
name|isValidChecksum
parameter_list|(
name|Path
name|checksumFile
parameter_list|)
throws|throws
name|ChecksumValidationException
block|{
name|String
name|fileName
init|=
name|checksumFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|checksumFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ChecksumValidationException
argument_list|(
name|FILE_NOT_FOUND
argument_list|,
literal|"Checksum file does not exist: "
operator|+
name|checksumFile
argument_list|)
throw|;
block|}
name|String
name|extension
init|=
name|fileName
operator|.
name|substring
argument_list|(
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|digestType
init|=
name|this
operator|.
name|supportedTypes
operator|.
name|get
argument_list|(
name|extension
argument_list|)
decl_stmt|;
if|if
condition|(
name|digestType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ChecksumValidationException
argument_list|(
name|INVALID_FORMAT
argument_list|,
literal|"The extension '"
operator|+
name|extension
operator|+
literal|"' ist not known."
argument_list|)
throw|;
block|}
name|Path
name|checkFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|digestType
argument_list|)
decl_stmt|;
name|checkFile
operator|=
name|getCheckFile
argument_list|(
name|checksumFile
argument_list|)
expr_stmt|;
name|byte
index|[]
name|computedChecksum
init|=
name|computeHash
argument_list|(
name|checkFile
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readChecksum
init|=
name|readHashFile
argument_list|(
name|checksumFile
argument_list|)
decl_stmt|;
return|return
name|md
operator|.
name|isEqual
argument_list|(
name|computedChecksum
argument_list|,
name|readChecksum
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ChecksumValidationException
argument_list|(
name|DIGEST_ERROR
argument_list|,
literal|"The digest is not supported "
operator|+
name|digestType
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ChecksumValidationException
argument_list|(
name|READ_ERROR
argument_list|,
literal|"Error while computing the checksum of "
operator|+
name|checkFile
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Path
name|getCheckFile
parameter_list|(
name|Path
name|checksumFile
parameter_list|)
block|{
name|String
name|fileName
init|=
name|checksumFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|checksumFile
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|newName
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSupportedExtensions
parameter_list|()
block|{
return|return
name|supportedTypes
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|computeHash
parameter_list|(
name|Path
name|file
parameter_list|,
name|MessageDigest
name|digest
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
decl_stmt|;
try|try
init|(
name|FileChannel
name|inChannel
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
init|)
block|{
name|MappedByteBuffer
name|buffer
init|=
name|inChannel
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_ONLY
argument_list|,
literal|0
argument_list|,
name|inChannel
operator|.
name|size
argument_list|( )
argument_list|)
decl_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|result
operator|=
name|digest
operator|.
name|digest
argument_list|( )
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|byte
index|[]
name|computeHash
parameter_list|(
name|Path
name|file
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|ChecksumValidationException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|supportedTypes
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ChecksumValidationException
argument_list|(
name|INVALID_FORMAT
argument_list|)
throw|;
block|}
return|return
name|computeHash
argument_list|(
name|file
argument_list|,
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|supportedTypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|readHashFile
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(  )
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|file
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
init|)
block|{
name|int
name|ci
decl_stmt|;
while|while
condition|(
operator|(
name|ci
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|ci
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|convertFromHex
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|protected
name|String
name|convertToHex
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
return|return
name|DatatypeConverter
operator|.
name|printHexBinary
argument_list|(
name|array
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|protected
name|byte
index|[]
name|convertFromHex
parameter_list|(
name|String
name|checksum
parameter_list|)
block|{
return|return
name|DatatypeConverter
operator|.
name|parseHexBinary
argument_list|(
name|checksum
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

