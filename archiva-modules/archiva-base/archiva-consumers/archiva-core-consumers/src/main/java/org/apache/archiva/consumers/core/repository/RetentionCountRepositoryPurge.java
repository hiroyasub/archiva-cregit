begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|audit
operator|.
name|RepositoryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|BaseRepositoryContentLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Purge the repository by retention count. Retain only the specified number of snapshots.  */
end_comment

begin_class
specifier|public
class|class
name|RetentionCountRepositoryPurge
extends|extends
name|AbstractRepositoryPurge
block|{
specifier|private
name|int
name|retentionCount
decl_stmt|;
specifier|public
name|RetentionCountRepositoryPurge
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|int
name|retentionCount
parameter_list|,
name|RepositorySession
name|repositorySession
parameter_list|,
name|List
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
parameter_list|)
block|{
name|super
argument_list|(
name|repository
argument_list|,
name|repositorySession
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
name|this
operator|.
name|retentionCount
operator|=
name|retentionCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryPurgeException
block|{
try|try
block|{
name|ContentItem
name|item
init|=
name|repository
operator|.
name|toItem
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|BaseRepositoryContentLayout
name|layout
init|=
name|repository
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|layout
operator|.
name|adaptItem
argument_list|(
name|Artifact
operator|.
name|class
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifact
operator|.
name|exists
argument_list|( )
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
condition|)
block|{
name|ArchivaItemSelector
name|selector
init|=
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getProject
argument_list|( )
operator|.
name|getNamespace
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getProject
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withArtifactId
argument_list|(
name|artifact
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withClassifier
argument_list|(
literal|"*"
argument_list|)
operator|.
name|includeRelatedArtifacts
argument_list|( )
operator|.
name|build
argument_list|( )
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|versions
decl_stmt|;
try|try
init|(
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|stream
init|=
name|repository
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
operator|.
name|newArtifactStream
argument_list|(
name|selector
argument_list|)
init|)
block|{
name|versions
operator|=
name|stream
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getArtifactVersion
argument_list|( )
argument_list|)
operator|.
name|filter
argument_list|(
name|StringUtils
operator|::
name|isNotEmpty
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|versions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
name|retentionCount
operator|>
name|versions
operator|.
name|size
argument_list|( )
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"No deletion, because retention count is higher than actual number of artifacts."
argument_list|)
expr_stmt|;
comment|// Done. nothing to do here. skip it.
return|return;
block|}
name|ArchivaItemSelector
operator|.
name|Builder
name|selectorBuilder
init|=
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getProject
argument_list|( )
operator|.
name|getNamespace
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getProject
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withArtifactId
argument_list|(
name|artifact
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withClassifier
argument_list|(
literal|"*"
argument_list|)
operator|.
name|includeRelatedArtifacts
argument_list|( )
operator|.
name|withVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
decl_stmt|;
name|int
name|countToPurge
init|=
name|versions
operator|.
name|size
argument_list|( )
operator|-
name|retentionCount
decl_stmt|;
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifactsToDelete
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|String
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|countToPurge
operator|--
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|List
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|delArtifacts
init|=
name|repository
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
operator|.
name|getArtifacts
argument_list|(
name|selectorBuilder
operator|.
name|withArtifactVersion
argument_list|(
name|version
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|delArtifacts
operator|!=
literal|null
operator|&&
name|delArtifacts
operator|.
name|size
argument_list|( )
operator|>
literal|0
condition|)
block|{
name|artifactsToDelete
operator|.
name|addAll
argument_list|(
name|delArtifacts
argument_list|)
expr_stmt|;
block|}
block|}
name|purge
argument_list|(
name|artifactsToDelete
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryPurgeException
argument_list|(
name|le
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|le
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentAccessException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while accessing the repository data: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryPurgeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

