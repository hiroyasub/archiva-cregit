begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|BaseRepositoryContentLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ReleaseScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|audit
operator|.
name|RepositoryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|base
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<p>  * This will look in a single managed repository, and purge any snapshots that are present  * that have a corresponding released version on the same repository.  *</p>  *<p>  * So, if you have the following (presented in the m2/default layout form) ...  *<pre>  *   /com/foo/foo-tool/1.0-SNAPSHOT/foo-tool-1.0-SNAPSHOT.jar  *   /com/foo/foo-tool/1.1-SNAPSHOT/foo-tool-1.1-SNAPSHOT.jar  *   /com/foo/foo-tool/1.2.1-SNAPSHOT/foo-tool-1.2.1-SNAPSHOT.jar  *   /com/foo/foo-tool/1.2.1/foo-tool-1.2.1.jar  *   /com/foo/foo-tool/2.0-SNAPSHOT/foo-tool-2.0-SNAPSHOT.jar  *   /com/foo/foo-tool/2.0/foo-tool-2.0.jar  *   /com/foo/foo-tool/2.1-SNAPSHOT/foo-tool-2.1-SNAPSHOT.jar  *</pre>  * then the current highest ranked released (non-snapshot) version is 2.0, which means  * the snapshots from 1.0-SNAPSHOT, 1.1-SNAPSHOT, 1.2.1-SNAPSHOT, and 2.0-SNAPSHOT can  * be purged.  Leaving 2.1-SNAPSHOT in alone.  */
end_comment

begin_class
specifier|public
class|class
name|CleanupReleasedSnapshotsRepositoryPurge
extends|extends
name|AbstractRepositoryPurge
block|{
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
specifier|private
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|public
name|CleanupReleasedSnapshotsRepositoryPurge
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|MetadataTools
name|metadataTools
parameter_list|,
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|,
name|RepositorySession
name|repositorySession
parameter_list|,
name|List
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
parameter_list|)
block|{
name|super
argument_list|(
name|repository
argument_list|,
name|repositorySession
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataTools
operator|=
name|metadataTools
expr_stmt|;
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryPurgeException
block|{
try|try
block|{
name|StorageAsset
name|artifactFile
init|=
name|repository
operator|.
name|getRepository
argument_list|( )
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|BaseRepositoryContentLayout
name|layout
init|=
name|repository
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Nothing to do here, file doesn't exist, skip it.
return|return;
block|}
name|ArtifactReference
name|artifactRef
init|=
name|repository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifactRef
operator|.
name|getVersion
argument_list|( )
argument_list|)
condition|)
block|{
comment|// Nothing to do here, not a snapshot, skip it.
return|return;
block|}
name|ItemSelector
name|projectSelector
init|=
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|artifactRef
operator|.
name|getGroupId
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|artifactRef
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Gether the released versions
name|List
argument_list|<
name|String
argument_list|>
name|releasedVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|Collection
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|( )
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repo
range|:
name|repos
control|)
block|{
if|if
condition|(
name|repo
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
condition|)
block|{
name|BaseRepositoryContentLayout
name|repoContent
init|=
name|repo
operator|.
name|getContent
argument_list|()
operator|.
name|getLayout
argument_list|(
name|BaseRepositoryContentLayout
operator|.
name|class
argument_list|)
decl_stmt|;
name|Project
name|proj
init|=
name|repoContent
operator|.
name|getProject
argument_list|(
name|projectSelector
argument_list|)
decl_stmt|;
for|for
control|(
name|Version
name|version
range|:
name|repoContent
operator|.
name|getVersions
argument_list|(
name|proj
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|releasedVersions
operator|.
name|add
argument_list|(
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|releasedVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|( )
argument_list|)
expr_stmt|;
comment|// Now clean out any version that is earlier than the highest released version.
name|boolean
name|needsMetadataUpdate
init|=
literal|false
decl_stmt|;
name|VersionedReference
name|versionRef
init|=
operator|new
name|VersionedReference
argument_list|( )
decl_stmt|;
name|versionRef
operator|.
name|setGroupId
argument_list|(
name|artifactRef
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
name|versionRef
operator|.
name|setArtifactId
argument_list|(
name|artifactRef
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
name|ArchivaItemSelector
operator|.
name|Builder
name|versionSelectorBuilder
init|=
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|artifactRef
operator|.
name|getGroupId
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|artifactRef
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|.
name|withArtifactId
argument_list|(
name|artifactRef
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
decl_stmt|;
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|( )
decl_stmt|;
if|if
condition|(
name|releasedVersions
operator|.
name|contains
argument_list|(
name|VersionUtil
operator|.
name|getReleaseVersion
argument_list|(
name|artifactRef
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
condition|)
block|{
name|ArchivaItemSelector
name|selector
init|=
name|versionSelectorBuilder
operator|.
name|withVersion
argument_list|(
name|artifactRef
operator|.
name|getVersion
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|Version
name|version
init|=
name|layout
operator|.
name|getVersion
argument_list|(
name|selector
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|exists
argument_list|()
condition|)
block|{
name|repository
operator|.
name|deleteItem
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RepositoryListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|metadataRepository
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|,
name|artifactRef
operator|.
name|getGroupId
argument_list|( )
argument_list|,
name|artifactRef
operator|.
name|getArtifactId
argument_list|( )
argument_list|,
name|artifactRef
operator|.
name|getVersion
argument_list|( )
argument_list|,
name|artifactFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataRepository
operator|.
name|removeProjectVersion
argument_list|(
name|repositorySession
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|,
name|artifactRef
operator|.
name|getGroupId
argument_list|( )
argument_list|,
name|artifactRef
operator|.
name|getArtifactId
argument_list|( )
argument_list|,
name|artifactRef
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|needsMetadataUpdate
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|needsMetadataUpdate
condition|)
block|{
name|updateMetadata
argument_list|(
name|artifactRef
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not processing file that is not an artifact: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not remove metadata during cleanup of released snapshots of {}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find item to delete {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * TODO: Uses a deprecated API, but if we use the API with location string, it does not work as expected      * -> not sure what needs to be changed here.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|updateMetadata
parameter_list|(
name|ArtifactReference
name|artifact
parameter_list|)
block|{
name|VersionedReference
name|versionRef
init|=
operator|new
name|VersionedReference
argument_list|( )
decl_stmt|;
name|versionRef
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
name|versionRef
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
name|versionRef
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
name|ProjectReference
name|projectRef
init|=
operator|new
name|ProjectReference
argument_list|( )
decl_stmt|;
name|projectRef
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|( )
argument_list|)
expr_stmt|;
name|projectRef
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
expr_stmt|;
try|try
block|{
name|metadataTools
operator|.
name|updateMetadata
argument_list|(
name|repository
argument_list|,
name|versionRef
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContentNotFoundException
name|e
parameter_list|)
block|{
comment|// Ignore. (Just means we have no snapshot versions left to reference).
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
decl||
name|IOException
decl||
name|LayoutException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
try|try
block|{
name|metadataTools
operator|.
name|updateMetadata
argument_list|(
name|repository
argument_list|,
name|projectRef
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContentNotFoundException
decl||
name|RepositoryMetadataException
decl||
name|IOException
decl||
name|LayoutException
name|e
parameter_list|)
block|{
comment|// Ignore. (Just means we have no snapshot versions left to reference).
block|}
block|}
block|}
end_class

end_unit

