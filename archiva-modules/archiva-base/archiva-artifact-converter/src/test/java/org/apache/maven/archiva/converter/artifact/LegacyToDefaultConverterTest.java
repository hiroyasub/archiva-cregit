begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|artifact
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * LegacyToDefaultConverterTest   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|LegacyToDefaultConverterTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|ArtifactRepository
name|sourceRepository
decl_stmt|;
specifier|private
name|ArtifactRepository
name|targetRepository
decl_stmt|;
specifier|private
name|ArtifactConverter
name|artifactConverter
decl_stmt|;
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SLEEP_MILLIS
init|=
literal|100
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ArtifactRepositoryFactory
name|factory
init|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|ArtifactRepositoryLayout
name|layout
init|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"legacy"
argument_list|)
decl_stmt|;
name|File
name|sourceBase
init|=
name|getTestFile
argument_list|(
literal|"src/test/source-repository"
argument_list|)
decl_stmt|;
name|sourceRepository
operator|=
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"source"
argument_list|,
name|sourceBase
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|layout
operator|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|File
name|targetBase
init|=
name|getTestFile
argument_list|(
literal|"target/test-target-repository"
argument_list|)
decl_stmt|;
name|copyDirectoryStructure
argument_list|(
name|getTestFile
argument_list|(
literal|"src/test/target-repository"
argument_list|)
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|targetRepository
operator|=
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"target"
argument_list|,
name|targetBase
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|artifactConverter
operator|=
operator|(
name|ArtifactConverter
operator|)
name|lookup
argument_list|(
name|ArtifactConverter
operator|.
name|ROLE
argument_list|,
literal|"legacy-to-default"
argument_list|)
expr_stmt|;
name|artifactFactory
operator|=
operator|(
name|ArtifactFactory
operator|)
name|lookup
argument_list|(
name|ArtifactFactory
operator|.
name|ROLE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copyDirectoryStructure
parameter_list|(
name|File
name|sourceDirectory
parameter_list|,
name|File
name|destinationDirectory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sourceDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source directory doesn't exists ("
operator|+
name|sourceDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|")."
argument_list|)
throw|;
block|}
name|File
index|[]
name|files
init|=
name|sourceDirectory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|String
name|sourcePath
init|=
name|sourceDirectory
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|String
name|dest
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|dest
operator|=
name|dest
operator|.
name|substring
argument_list|(
name|sourcePath
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|File
name|destination
init|=
operator|new
name|File
argument_list|(
name|destinationDirectory
argument_list|,
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|destination
operator|=
name|destination
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
name|file
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
literal|".svn"
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|destination
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|destination
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create destination directory '"
operator|+
name|destination
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|copyDirectoryStructure
argument_list|(
name|file
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown file type: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|testV4PomConvert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that it is copied as is
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v4artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|artifactFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|versionMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-version-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|versionMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3PomConvert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that the pom is coverted
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|versionMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-version-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|versionMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3PomConvertWithRelocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"relocated-v3artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
comment|//checkSuccess();  --> commented until MNG-2100 is fixed
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check if relocated artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check if relocated artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createArtifact
argument_list|(
literal|"relocated-test"
argument_list|,
literal|"relocated-v3artifact"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"pom"
argument_list|)
decl_stmt|;
name|File
name|pomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/"
operator|+
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-target-repository/"
operator|+
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|pomFile
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|Artifact
name|orig
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"relocated-v3artifact"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"pom"
argument_list|)
decl_stmt|;
name|artifactFile
operator|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|orig
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check if relocation artifact pom is created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|testFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/"
operator|+
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|orig
argument_list|)
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|artifactFile
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3PomWarningsOnConvert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that the pom is converted but that warnings are reported
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3-warnings-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|versionMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3-warnings.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
comment|// TODO: check 2 warnings (extend and versions) matched on i18n key
block|}
specifier|private
name|void
name|doTestV4SnapshotPomConvert
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|expectedMetadataFileName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// test that it is copied as is
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v4artifact"
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v4-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
name|expectedMetadataFileName
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV3SnapshotPomConvert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that the pom is coverted
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3artifact"
argument_list|,
literal|"1.0.0-SNAPSHOT"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3-snapshot.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot metadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV4SnapshotPomConvert
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestV4SnapshotPomConvert
argument_list|(
literal|"1.0.0-SNAPSHOT"
argument_list|,
literal|"src/test/expected-files/v4-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testV4TimestampedSnapshotPomConvert
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestV4SnapshotPomConvert
argument_list|(
literal|"1.0.0-20060111.120115-1"
argument_list|,
literal|"src/test/expected-files/v4-timestamped-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMavenOnePluginConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"org.apache.maven.plugins"
argument_list|,
literal|"maven-foo-plugin"
argument_list|,
literal|"1.0"
argument_list|,
literal|"1.0"
argument_list|,
literal|"maven-plugin"
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
literal|"src/test/source-repository/test/plugins/maven-foo-plugin-1.0.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
comment|// There is a warning but I can't figure out how to look at it. Eyeballing the results it appears
comment|// the plugin is being coverted correctly.
comment|//checkSuccess();
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          The POM isn't needed for Maven 1.x plugins but the raw conversion for             artifact = createPomArtifact( artifact );          File pomFile = new File( targetRepository.getBasedir(), targetRepository.pathOf( artifact ) );          File expectedPomFile = getTestFile( "src/test/expected-files/maven-foo-plugin-1.0.pom" );          assertTrue( "Check POM created", pomFile.exists() );          compareFiles( expectedPomFile, pomFile );          */
block|}
specifier|public
name|void
name|testV3TimestampedSnapshotPomConvert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that the pom is coverted
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"v3artifact"
argument_list|,
literal|"1.0.0-20060105.130101-3"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|artifactMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ArtifactMetadata
name|snapshotMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|snapshotMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|snapshotMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotMetadataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-v3-timestamped-snapshot.pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact snapshotMetadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-snapshot-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check snapshot snapshotMetadata created"
argument_list|,
name|snapshotMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMetadataFile
operator|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/v3-timestamped-snapshot-metadata.xml"
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|snapshotMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoPomConvert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that a POM is not created when there was none at the source
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"noPomArtifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"warning.missing.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check no POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No source POM"
argument_list|,
name|sourcePomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncorrectSourceChecksumMd5
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that it fails when the source md5 is wrong
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"incorrectMd5Artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.incorrect.md5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check artifact not created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncorrectSourceChecksumSha1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that it fails when the source sha1 is wrong
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"incorrectSha1Artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.incorrect.sha1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check artifact not created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnmodifiedArtifact
parameter_list|()
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
comment|// test the unmodified artifact is untouched
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"unmodified-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check target file exists"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check target POM exists"
argument_list|,
name|targetPomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePomFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|origTime
init|=
name|targetFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|long
name|origPomTime
init|=
name|targetPomFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
comment|// Need to guarantee last modified is not equal
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|targetPomFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check artifact unmodified"
argument_list|,
name|origTime
argument_list|,
name|targetFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check POM unmodified"
argument_list|,
name|origPomTime
argument_list|,
name|targetPomFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testModifedArtifactFails
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that it fails when the source artifact has changed and is different to the existing artifact in the
comment|// target repository
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"modified-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check target file exists"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check target POM exists"
argument_list|,
name|targetPomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePomFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|origTime
init|=
name|targetFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|long
name|origPomTime
init|=
name|targetPomFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
comment|// Need to guarantee last modified is not equal
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.target.already.exists"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check unmodified"
argument_list|,
name|origTime
argument_list|,
name|targetFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check unmodified"
argument_list|,
name|origPomTime
argument_list|,
name|targetPomFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testForcedUnmodifiedArtifact
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test unmodified artifact is still converted when set to force
name|artifactConverter
operator|=
operator|(
name|ArtifactConverter
operator|)
name|lookup
argument_list|(
name|ArtifactConverter
operator|.
name|ROLE
argument_list|,
literal|"force-repository-converter"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"unmodified-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|origTime
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"2006-03-03"
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|targetFile
operator|.
name|setLastModified
argument_list|(
name|origTime
argument_list|)
expr_stmt|;
name|targetPomFile
operator|.
name|setLastModified
argument_list|(
name|origTime
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|setLastModified
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"2006-01-01"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePomFile
operator|.
name|setLastModified
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"2006-02-02"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourceFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|targetPomFile
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check modified"
argument_list|,
name|origTime
operator|==
name|targetFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check modified"
argument_list|,
name|origTime
operator|==
name|targetPomFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check metadata created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDryRunSuccess
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test dry run does nothing on a run that will be successful, and returns success
name|artifactConverter
operator|=
operator|(
name|ArtifactConverter
operator|)
name|lookup
argument_list|(
name|ArtifactConverter
operator|.
name|ROLE
argument_list|,
literal|"dryrun-repository-converter"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"dryrun-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check source file exists"
argument_list|,
name|sourceFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check source POM exists"
argument_list|,
name|sourcePomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check target file doesn't exist"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check target POM doesn't exist"
argument_list|,
name|targetPomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDryRunFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test dry run does nothing on a run that will fail, and returns failure
name|artifactConverter
operator|=
operator|(
name|ArtifactConverter
operator|)
name|lookup
argument_list|(
name|ArtifactConverter
operator|.
name|ROLE
argument_list|,
literal|"dryrun-repository-converter"
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"modified-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|Artifact
name|pomArtifact
init|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|targetPomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|pomArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check target file exists"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check target POM exists"
argument_list|,
name|targetPomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePomFile
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|origTime
init|=
name|targetFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|long
name|origPomTime
init|=
name|targetPomFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
comment|// Need to guarantee last modified is not equal
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.target.already.exists"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check unmodified"
argument_list|,
name|origTime
argument_list|,
name|targetFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check unmodified"
argument_list|,
name|origPomTime
argument_list|,
name|targetPomFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRollbackArtifactCreated
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test rollback can remove a created artifact, including checksums
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"rollback-created-artifact"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|artifactMetadataFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|versionMetadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|versionMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|versionMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|pattern
init|=
literal|"^"
operator|+
name|Messages
operator|.
name|getString
argument_list|(
literal|"invalid.source.pom"
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"\\{0\\}"
argument_list|,
literal|".*"
argument_list|)
operator|+
literal|"$"
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|artifactConverter
operator|.
name|getWarnings
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|;
control|)
block|{
name|List
name|messages
init|=
operator|(
name|List
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itmsgs
init|=
name|messages
operator|.
name|iterator
argument_list|()
init|;
name|itmsgs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|message
init|=
operator|(
name|String
operator|)
name|itmsgs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|matches
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Check failure message."
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"check artifact rolled back"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"check metadata rolled back"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"check metadata rolled back"
argument_list|,
name|versionMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleArtifacts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test multiple artifacts are converted
name|List
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"artifact-one"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"artifact-two"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"artifact-three"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|arti
init|=
operator|(
name|Artifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|arti
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedPomFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/converted-"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|".pom"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|expectedPomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testInvalidSourceArtifactMetadata
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test artifact is not converted when source metadata is invalid, and returns failure
name|createModernSourceRepository
argument_list|()
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"incorrectArtifactMetadata"
argument_list|,
literal|"1.0.0"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.incorrect.artifactMetadata.versions"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check artifact not created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidSourceSnapshotMetadata
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test artifact is not converted when source snapshot metadata is invalid and returns failure
name|createModernSourceRepository
argument_list|()
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"incorrectSnapshotMetadata"
argument_list|,
literal|"1.0.0-20060102.030405-6"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkWarnings
argument_list|(
name|artifactConverter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHasWarningReason
argument_list|(
name|artifactConverter
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"failure.incorrect.snapshotMetadata.snapshot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check artifact not created"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactRepositoryMetadata
name|metadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check metadata not created"
argument_list|,
name|metadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMergeArtifactMetadata
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test artifact level metadata is merged when it already exists on successful conversion
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"newversion-artifact"
argument_list|,
literal|"1.0.1"
argument_list|)
decl_stmt|;
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|checkSuccess
argument_list|(
name|artifactConverter
argument_list|)
expr_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact created"
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact matches"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|artifactFile
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createPomArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourcePomFile
init|=
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check POM created"
argument_list|,
name|pomFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|compareFiles
argument_list|(
name|sourcePomFile
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|artifactMetadataFile
init|=
operator|new
name|File
argument_list|(
name|targetRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|artifactMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check artifact metadata created"
argument_list|,
name|artifactMetadataFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|expectedMetadataFile
init|=
name|getTestFile
argument_list|(
literal|"src/test/expected-files/newversion-artifact-metadata.xml"
argument_list|)
decl_stmt|;
name|compareFiles
argument_list|(
name|expectedMetadataFile
argument_list|,
name|artifactMetadataFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSourceAndTargetRepositoriesMatch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test that it fails if the same
name|ArtifactRepositoryFactory
name|factory
init|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|sourceRepository
operator|=
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"source"
argument_list|,
name|targetRepository
operator|.
name|getUrl
argument_list|()
argument_list|,
name|targetRepository
operator|.
name|getLayout
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test"
argument_list|,
literal|"repository-artifact"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|artifactConverter
operator|.
name|convert
argument_list|(
name|artifact
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed trying to convert within the same repository"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactConversionException
name|e
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"check message"
argument_list|,
name|Messages
operator|.
name|getString
argument_list|(
literal|"exception.repositories.match"
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Check no additional cause"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|Artifact
operator|.
name|VERSION_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|String
name|baseVersion
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|baseVersion
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"-SNAPSHOT"
expr_stmt|;
block|}
else|else
block|{
name|baseVersion
operator|=
name|version
expr_stmt|;
block|}
return|return
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|baseVersion
argument_list|,
name|version
argument_list|,
literal|"jar"
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|baseVersion
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|artifactFactory
operator|.
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|null
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|setBaseVersion
argument_list|(
name|baseVersion
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepository
argument_list|(
name|sourceRepository
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|sourceRepository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|sourceRepository
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|private
name|Artifact
name|createPomArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|createArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|"pom"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|compareFiles
parameter_list|(
name|File
name|expectedPomFile
parameter_list|,
name|File
name|pomFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|expectedContent
init|=
name|normalizeString
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|expectedPomFile
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|targetContent
init|=
name|normalizeString
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|pomFile
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check file match between "
operator|+
name|expectedPomFile
operator|+
literal|" and "
operator|+
name|pomFile
argument_list|,
name|expectedContent
argument_list|,
name|targetContent
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|normalizeString
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<\\?xml .+\\?>"
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkSuccess
parameter_list|(
name|ArtifactConverter
name|converter
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Warnings should never be null."
argument_list|,
name|converter
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have no warnings."
argument_list|,
literal|0
argument_list|,
name|countWarningMessages
argument_list|(
name|converter
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkWarnings
parameter_list|(
name|ArtifactConverter
name|converter
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Warnings should never be null."
argument_list|,
name|converter
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have some warnings."
argument_list|,
name|count
argument_list|,
name|countWarningMessages
argument_list|(
name|converter
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countWarningMessages
parameter_list|(
name|ArtifactConverter
name|converter
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|converter
operator|.
name|getWarnings
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|values
init|=
operator|(
name|List
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|values
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|assertHasWarningReason
parameter_list|(
name|ArtifactConverter
name|converter
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Warnings should never be null."
argument_list|,
name|converter
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting 1 or more Warnings"
argument_list|,
name|countWarningMessages
argument_list|(
name|converter
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|converter
operator|.
name|getWarnings
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|messages
init|=
operator|(
name|List
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|messages
operator|.
name|contains
argument_list|(
name|reason
argument_list|)
condition|)
block|{
comment|/* No need to check any furthor */
return|return;
block|}
block|}
comment|/* didn't find it. */
for|for
control|(
name|Iterator
name|it
init|=
name|converter
operator|.
name|getWarnings
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-Artifact: "
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|messages
init|=
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itmsgs
init|=
name|messages
operator|.
name|iterator
argument_list|()
init|;
name|itmsgs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|message
init|=
operator|(
name|String
operator|)
name|itmsgs
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Unable to find message<"
operator|+
name|reason
operator|+
literal|"> in warnings."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createModernSourceRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|ArtifactRepositoryFactory
name|factory
init|=
operator|(
name|ArtifactRepositoryFactory
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|ArtifactRepositoryLayout
name|layout
init|=
operator|(
name|ArtifactRepositoryLayout
operator|)
name|lookup
argument_list|(
name|ArtifactRepositoryLayout
operator|.
name|ROLE
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|File
name|sourceBase
init|=
name|getTestFile
argument_list|(
literal|"src/test/source-modern-repository"
argument_list|)
decl_stmt|;
name|sourceRepository
operator|=
name|factory
operator|.
name|createArtifactRepository
argument_list|(
literal|"source"
argument_list|,
name|sourceBase
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|layout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

