begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * This is a class that can be used for the Try monad  *  * The Try monad is able to collect exceptions during processing  * of a stream.  *  *  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Try
parameter_list|<
name|V
parameter_list|>
block|{
specifier|private
name|Try
parameter_list|()
block|{
block|}
specifier|public
specifier|abstract
name|Boolean
name|isSuccess
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Boolean
name|isFailure
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|throwException
parameter_list|()
function_decl|;
comment|/**      * Returns the value if this is a success instance. Otherwise throws      * a runtime exception with the stored throwable as cause.      *      * @return The value      */
specifier|public
specifier|abstract
name|V
name|get
parameter_list|()
function_decl|;
comment|/**      * Returns the throwable that is stored in the failure.      *      * @return The Throwable or null.      */
specifier|public
specifier|abstract
name|Throwable
name|getError
parameter_list|()
function_decl|;
comment|/**      * A mapping method for mapping the current instance to a new type.      *      * @param fn      * @param<U>      * @return      */
specifier|public
parameter_list|<
name|U
parameter_list|>
name|Try
argument_list|<
name|U
argument_list|>
name|map
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|V
argument_list|,
name|U
argument_list|>
name|fn
parameter_list|)
block|{
try|try
block|{
return|return
name|Try
operator|.
name|success
argument_list|(
name|fn
operator|.
name|apply
argument_list|(
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|Try
operator|.
name|failure
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**      * This is the bind method.      * If this instance is success the function will be applied. If any error occurs      * a failure instance will be returned.      * If this instance is failure a new failure will be returned.      *      * @param fn      * @param<U>      * @return      */
specifier|public
parameter_list|<
name|U
parameter_list|>
name|Try
argument_list|<
name|U
argument_list|>
name|flatMap
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|V
argument_list|,
name|Try
argument_list|<
name|U
argument_list|>
argument_list|>
name|fn
parameter_list|)
block|{
try|try
block|{
return|return
name|fn
operator|.
name|apply
argument_list|(
name|get
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|Try
operator|.
name|failure
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Try
argument_list|<
name|V
argument_list|>
name|failure
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|Failure
argument_list|<>
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Try
argument_list|<
name|V
argument_list|>
name|failure
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
return|return
operator|new
name|Failure
argument_list|<>
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|/**      * If you need type coercion, you should call this method as      *  Try.&lt;YOUR_TYPE&gt;failure(e)      *      *      *      * @param e The exception that is thrown      * @param<V> The generic type this monad keeps      * @return A new Try instance that represents a failure.      */
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Try
argument_list|<
name|V
argument_list|>
name|failure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
operator|new
name|Failure
argument_list|<>
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**      * Returns a instance for the success case.      *      * @param value The value that should be stored.      * @param<V> The return type      * @return A new Try instance with the given value      */
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Try
argument_list|<
name|V
argument_list|>
name|success
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|Success
argument_list|<>
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|Failure
parameter_list|<
name|V
parameter_list|>
extends|extends
name|Try
argument_list|<
name|V
argument_list|>
block|{
specifier|private
name|Throwable
name|exception
decl_stmt|;
specifier|public
name|Failure
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|exception
operator|=
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Failure
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|exception
operator|=
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Failure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|exception
operator|=
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isFailure
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwException
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|this
operator|.
name|exception
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|this
operator|.
name|exception
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Throwable
name|getError
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Success
parameter_list|<
name|V
parameter_list|>
extends|extends
name|Try
argument_list|<
name|V
argument_list|>
block|{
specifier|private
name|V
name|value
decl_stmt|;
specifier|public
name|Success
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isFailure
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwException
parameter_list|()
block|{
comment|//log.error("Method throwException() called on a Success instance");
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|Throwable
name|getError
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// various method such as map an flatMap
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|isSuccess
argument_list|()
condition|?
literal|"true: "
operator|+
name|get
argument_list|()
else|:
literal|"false: "
operator|+
name|getError
argument_list|()
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

