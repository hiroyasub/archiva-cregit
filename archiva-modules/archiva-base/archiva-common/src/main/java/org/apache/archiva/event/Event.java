begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_comment
comment|/**  * Base class for events. Events have a type and a source.  * The source is the instance that raised the event.  *  * There are different event types for a given event. The types are represented in a hierarchical structure.  *  * Events can be chained, which means a event listener can catch events and rethrow them as its own event.  *  */
end_comment

begin_class
specifier|public
class|class
name|Event
extends|extends
name|EventObject
implements|implements
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7171846575892044990L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EventType
argument_list|<
name|Event
argument_list|>
name|ANY
init|=
name|EventType
operator|.
name|ROOT
decl_stmt|;
specifier|private
name|Event
name|previous
decl_stmt|;
specifier|private
specifier|final
name|EventType
argument_list|<
name|?
extends|extends
name|Event
argument_list|>
name|type
decl_stmt|;
specifier|private
specifier|final
name|LocalDateTime
name|createTime
decl_stmt|;
specifier|public
name|Event
parameter_list|(
name|EventType
argument_list|<
name|?
extends|extends
name|Event
argument_list|>
name|type
parameter_list|,
name|Object
name|originator
parameter_list|)
block|{
name|super
argument_list|(
name|originator
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|LocalDateTime
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Event
parameter_list|(
name|Event
name|previous
parameter_list|,
name|Object
name|originator
parameter_list|)
block|{
name|super
argument_list|(
name|originator
argument_list|)
expr_stmt|;
name|this
operator|.
name|previous
operator|=
name|previous
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|previous
operator|.
name|getType
argument_list|()
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|previous
operator|.
name|getCreateTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the event type that is associated with this event instance.      * @return the event type      */
specifier|public
name|EventType
argument_list|<
name|?
extends|extends
name|Event
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
empty_stmt|;
comment|/**      * Returns the time, when the event was created.      * @return      */
specifier|public
name|LocalDateTime
name|getCreateTime
parameter_list|()
block|{
return|return
name|createTime
return|;
block|}
comment|/**      * Recreates the event with the given instance as the new source. The      * current source is stored in the previous event.      * @param newSource The new source      * @return a new event instance, where<code>this</code> is stored as previous event      */
specifier|public
name|Event
name|copyFor
parameter_list|(
name|Object
name|newSource
parameter_list|)
block|{
name|Event
name|newEvent
init|=
operator|(
name|Event
operator|)
name|this
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newEvent
operator|.
name|previous
operator|=
name|this
expr_stmt|;
name|newEvent
operator|.
name|source
operator|=
name|newSource
expr_stmt|;
return|return
name|newEvent
return|;
block|}
comment|/**      * Returns the previous event or<code>null</code>, if this is a root event.      * @return the previous event or<code>null</code>, if it does not exist      */
specifier|public
name|Event
name|getPreviousEvent
parameter_list|()
block|{
return|return
name|previous
return|;
block|}
comment|/**      * Returns<code>true</code>, if the event has a previous event.      * @return<code>true</code>, if this has a previous event, otherwise<code>false</code>      */
specifier|public
name|boolean
name|hasPreviousEvent
parameter_list|()
block|{
return|return
name|previous
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// this should not happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Event is not clonable"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

