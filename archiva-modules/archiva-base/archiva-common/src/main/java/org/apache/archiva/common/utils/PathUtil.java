begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_comment
comment|/**  *  * PathUtil - simple utility methods for path manipulation.  *  * Some code is from Apache Ant SelectorUtils  *  */
end_comment

begin_class
specifier|public
class|class
name|PathUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEEP_TREE_MATCH
init|=
literal|"**"
decl_stmt|;
specifier|public
specifier|static
name|String
name|toUrl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// Is our work already done for us?
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
name|toUrl
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toUrl
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
try|try
block|{
return|return
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|String
name|pathCorrected
init|=
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathCorrected
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
return|return
name|pathCorrected
return|;
block|}
return|return
literal|"file://"
operator|+
name|pathCorrected
return|;
block|}
block|}
comment|/**      * Given a basedir and a child file, return the relative path to the child.      *      * @param basedir the basedir.      * @param file    the file to get the relative path for.      * @return the relative path to the child. (NOTE: this path will NOT start with a file separator character)      */
specifier|public
specifier|static
name|String
name|getRelative
parameter_list|(
name|Path
name|basedir
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
if|if
condition|(
name|basedir
operator|.
name|isAbsolute
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|basedir
operator|.
name|normalize
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
operator|!
name|basedir
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|basedir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|normalize
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|basedir
operator|.
name|normalize
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|normalize
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getRelative
parameter_list|(
name|String
name|basedir
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
return|return
name|getRelative
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|basedir
argument_list|)
argument_list|,
name|file
argument_list|)
return|;
block|}
comment|/**      * Given a basedir and a child file, return the relative path to the child.      *      * @param basedir the basedir.      * @param child   the child path (can be a full path)      * @return the relative path to the child. (NOTE: this path will NOT start with a file separator character)      */
specifier|public
specifier|static
name|String
name|getRelative
parameter_list|(
name|String
name|basedir
parameter_list|,
name|String
name|child
parameter_list|)
block|{
return|return
name|getRelative
argument_list|(
name|basedir
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a path object from the given URI. If the URI has no scheme, the path of the URI is used      * for creating the filesystem path.      *      * @param uri the uri to convert      * @return a path object with the given path      * @throws java.nio.file.FileSystemNotFoundException if the uri scheme is not known.      */
specifier|public
specifier|static
name|Path
name|getPathFromUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
return|;
block|}
if|else if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isAbsolutePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|isAbsolute
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|char
name|getSeparatorChar
parameter_list|()
block|{
return|return
name|FileSystems
operator|.
name|getDefault
argument_list|( )
operator|.
name|getSeparator
argument_list|( )
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|dissect
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|path
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toString
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|separatorsToUnix
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|indexOf
argument_list|(
literal|92
argument_list|)
operator|!=
operator|-
literal|1
condition|?
name|path
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
else|:
name|path
return|;
block|}
comment|/**      * Tests whether or not a given path matches a given pattern.      *      * If you need to call this method multiple times with the same      * pattern you should rather use TokenizedPath      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      *      * @return<code>true</code> if the pattern matches against the string,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|String
index|[]
name|patDirs
init|=
name|tokenizePathAsArray
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|matchPath
argument_list|(
name|patDirs
argument_list|,
name|tokenizePathAsArray
argument_list|(
name|str
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a given path matches a given pattern.      *      * If you need to call this method multiple times with the same      * pattern you should rather use TokenizedPattern      *      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      * @param isCaseSensitive Whether or not matching should be performed      *                        case sensitively.      *      * @return<code>true</code> if the pattern matches against the string,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
name|String
index|[]
name|patDirs
init|=
name|tokenizePathAsArray
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|matchPath
argument_list|(
name|patDirs
argument_list|,
name|tokenizePathAsArray
argument_list|(
name|str
argument_list|)
argument_list|,
name|isCaseSensitive
argument_list|)
return|;
block|}
comment|/**      * Core implementation of matchPath.  It is isolated so that it      * can be called from TokenizedPattern.      */
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
index|[]
name|tokenizedPattern
parameter_list|,
name|String
index|[]
name|strDirs
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|patIdxEnd
init|=
name|tokenizedPattern
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|strIdxEnd
init|=
name|strDirs
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// up to first '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|String
name|patDir
init|=
name|tokenizedPattern
index|[
name|patIdxStart
index|]
decl_stmt|;
if|if
condition|(
name|patDir
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
index|[
name|strIdxStart
index|]
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|tokenizedPattern
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|patIdxStart
operator|>
name|patIdxEnd
condition|)
block|{
comment|// String not exhausted, but pattern is. Failure.
return|return
literal|false
return|;
block|}
comment|// up to last '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|String
name|patDir
init|=
name|tokenizedPattern
index|[
name|patIdxEnd
index|]
decl_stmt|;
if|if
condition|(
name|patDir
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
index|[
name|strIdxEnd
index|]
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxEnd
operator|--
expr_stmt|;
name|strIdxEnd
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|tokenizedPattern
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
while|while
condition|(
name|patIdxStart
operator|!=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|int
name|patIdxTmp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
operator|+
literal|1
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tokenizedPattern
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
name|patIdxTmp
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|patIdxTmp
operator|==
name|patIdxStart
operator|+
literal|1
condition|)
block|{
comment|// '**/**' situation, so skip one
name|patIdxStart
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between padIdxStart& padIdxTmp in str between
comment|// strIdxStart& strIdxEnd
name|int
name|patLength
init|=
operator|(
name|patIdxTmp
operator|-
name|patIdxStart
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|strLength
init|=
operator|(
name|strIdxEnd
operator|-
name|strIdxStart
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|strLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|strLength
operator|-
name|patLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|patLength
condition|;
name|j
operator|++
control|)
block|{
name|String
name|subPat
init|=
name|tokenizedPattern
index|[
name|patIdxStart
operator|+
name|j
operator|+
literal|1
index|]
decl_stmt|;
name|String
name|subStr
init|=
name|strDirs
index|[
name|strIdxStart
operator|+
name|i
operator|+
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|subPat
argument_list|,
name|subStr
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
block|}
name|foundIdx
operator|=
name|strIdxStart
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIdx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|=
name|patIdxTmp
expr_stmt|;
name|strIdxStart
operator|=
name|foundIdx
operator|+
name|patLength
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|DEEP_TREE_MATCH
operator|.
name|equals
argument_list|(
name|tokenizedPattern
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern The pattern to match against.      *                Must not be<code>null</code>.      * @param str     The string which must be matched against the pattern.      *                Must not be<code>null</code>.      *      * @return<code>true</code> if the string matches against the pattern,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|pattern
argument_list|,
name|str
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern The pattern to match against.      *                Must not be<code>null</code>.      * @param str     The string which must be matched against the pattern.      *                Must not be<code>null</code>.      * @param caseSensitive Whether or not matching should be performed      *                        case sensitively.      *      *      * @return<code>true</code> if the string matches against the pattern,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|char
index|[]
name|patArr
init|=
name|pattern
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|char
index|[]
name|strArr
init|=
name|str
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|patIdxEnd
init|=
name|patArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|strIdxEnd
init|=
name|strArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|boolean
name|containsStar
init|=
literal|false
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|patArr
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'*'
condition|)
block|{
name|containsStar
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|containsStar
condition|)
block|{
comment|// No '*'s, so we make a shortcut
if|if
condition|(
name|patIdxEnd
operator|!=
name|strIdxEnd
condition|)
block|{
return|return
literal|false
return|;
comment|// Pattern and string do not have the same size
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
return|return
literal|true
return|;
comment|// String matches against pattern
block|}
if|if
condition|(
name|patIdxEnd
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
comment|// Pattern contains only '*', which matches anything
block|}
comment|// Process characters before first star
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|patIdxStart
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'*'
operator|||
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|strIdxStart
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// All characters in the string are used. Check if only '*'s are
comment|// left in the pattern. If so, we succeeded. Otherwise failure.
return|return
name|allStars
argument_list|(
name|patArr
argument_list|,
name|patIdxStart
argument_list|,
name|patIdxEnd
argument_list|)
return|;
block|}
comment|// Process characters after last star
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|patIdxEnd
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'*'
operator|||
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|strIdxEnd
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
name|patIdxEnd
operator|--
expr_stmt|;
name|strIdxEnd
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// All characters in the string are used. Check if only '*'s are
comment|// left in the pattern. If so, we succeeded. Otherwise failure.
return|return
name|allStars
argument_list|(
name|patArr
argument_list|,
name|patIdxStart
argument_list|,
name|patIdxEnd
argument_list|)
return|;
block|}
comment|// process pattern between stars. padIdxStart and patIdxEnd point
comment|// always to a '*'.
while|while
condition|(
name|patIdxStart
operator|!=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|int
name|patIdxTmp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
operator|+
literal|1
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|==
literal|'*'
condition|)
block|{
name|patIdxTmp
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|patIdxTmp
operator|==
name|patIdxStart
operator|+
literal|1
condition|)
block|{
comment|// Two stars next to each other, skip the first one.
name|patIdxStart
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between padIdxStart& padIdxTmp in str between
comment|// strIdxStart& strIdxEnd
name|int
name|patLength
init|=
operator|(
name|patIdxTmp
operator|-
name|patIdxStart
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|strLength
init|=
operator|(
name|strIdxEnd
operator|-
name|strIdxStart
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|strLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|strLength
operator|-
name|patLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|patLength
condition|;
name|j
operator|++
control|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|patIdxStart
operator|+
name|j
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|strIdxStart
operator|+
name|i
operator|+
name|j
index|]
argument_list|)
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
block|}
name|foundIdx
operator|=
name|strIdxStart
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIdx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|=
name|patIdxTmp
expr_stmt|;
name|strIdxStart
operator|=
name|foundIdx
operator|+
name|patLength
expr_stmt|;
block|}
comment|// All characters in the string are used. Check if only '*'s are left
comment|// in the pattern. If so, we succeeded. Otherwise failure.
return|return
name|allStars
argument_list|(
name|patArr
argument_list|,
name|patIdxStart
argument_list|,
name|patIdxEnd
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|allStars
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|different
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|,
name|char
name|ch
parameter_list|,
name|char
name|other
parameter_list|)
block|{
return|return
name|caseSensitive
condition|?
name|ch
operator|!=
name|other
else|:
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|!=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**      * Breaks a path up into a Vector of path elements, tokenizing on      *<code>File.separator</code>.      *      * @param path Path to tokenize. Must not be<code>null</code>.      *      * @return a Vector of path elements from the tokenized path      */
specifier|public
specifier|static
name|Vector
argument_list|<
name|String
argument_list|>
name|tokenizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|tokenizePath
argument_list|(
name|path
argument_list|,
name|FileSystems
operator|.
name|getDefault
argument_list|( )
operator|.
name|getSeparator
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Breaks a path up into a Vector of path elements, tokenizing on      *      * @param path Path to tokenize. Must not be<code>null</code>.      * @param separator the separator against which to tokenize.      *      * @return a Vector of path elements from the tokenized path      * @since Ant 1.6      */
specifier|public
specifier|static
name|Vector
argument_list|<
name|String
argument_list|>
name|tokenizePath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|Vector
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAbsolutePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
index|[]
name|s
init|=
name|dissect
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|path
operator|=
name|s
index|[
literal|1
index|]
expr_stmt|;
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
name|separator
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|ret
operator|.
name|addElement
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Same as {@link #tokenizePath tokenizePath} but hopefully faster.      */
comment|/* package */
specifier|static
name|String
index|[]
name|tokenizePathAsArray
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|root
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isAbsolutePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
index|[]
name|s
init|=
name|dissect
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|root
operator|=
name|s
index|[
literal|0
index|]
expr_stmt|;
name|path
operator|=
name|s
index|[
literal|1
index|]
expr_stmt|;
block|}
name|char
name|sep
init|=
name|getSeparatorChar
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|len
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
name|sep
condition|)
block|{
if|if
condition|(
name|pos
operator|!=
name|start
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|start
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|len
operator|!=
name|start
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|String
index|[]
name|l
init|=
operator|new
name|String
index|[
name|count
operator|+
operator|(
operator|(
name|root
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
index|]
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|l
index|[
literal|0
index|]
operator|=
name|root
expr_stmt|;
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|start
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|len
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
name|sep
condition|)
block|{
if|if
condition|(
name|pos
operator|!=
name|start
condition|)
block|{
name|String
name|tok
init|=
name|path
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|l
index|[
name|count
operator|++
index|]
operator|=
name|tok
expr_stmt|;
block|}
name|start
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|len
operator|!=
name|start
condition|)
block|{
name|String
name|tok
init|=
name|path
operator|.
name|substring
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|l
index|[
name|count
comment|/*++*/
index|]
operator|=
name|tok
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
block|}
end_class

end_unit

