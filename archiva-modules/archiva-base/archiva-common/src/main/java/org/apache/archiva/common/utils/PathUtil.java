begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  * PathUtil - simple utility methods for path manipulation.  *  *  */
end_comment

begin_class
specifier|public
class|class
name|PathUtil
block|{
specifier|public
specifier|static
name|String
name|toUrl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// Is our work already done for us?
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
name|toUrl
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toUrl
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
try|try
block|{
return|return
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|String
name|pathCorrected
init|=
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathCorrected
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
return|return
name|pathCorrected
return|;
block|}
return|return
literal|"file://"
operator|+
name|pathCorrected
return|;
block|}
block|}
comment|/**      * Given a basedir and a child file, return the relative path to the child.      *      * @param basedir the basedir.      * @param file    the file to get the relative path for.      * @return the relative path to the child. (NOTE: this path will NOT start with a file separator character)      */
specifier|public
specifier|static
name|String
name|getRelative
parameter_list|(
name|Path
name|basedir
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
if|if
condition|(
name|basedir
operator|.
name|isAbsolute
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|basedir
operator|.
name|normalize
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
operator|!
name|basedir
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|basedir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|normalize
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|basedir
operator|.
name|normalize
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|normalize
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getRelative
parameter_list|(
name|String
name|basedir
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
return|return
name|getRelative
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|basedir
argument_list|)
argument_list|,
name|file
argument_list|)
return|;
block|}
comment|/**      * Given a basedir and a child file, return the relative path to the child.      *      * @param basedir the basedir.      * @param child   the child path (can be a full path)      * @return the relative path to the child. (NOTE: this path will NOT start with a file separator character)      */
specifier|public
specifier|static
name|String
name|getRelative
parameter_list|(
name|String
name|basedir
parameter_list|,
name|String
name|child
parameter_list|)
block|{
return|return
name|getRelative
argument_list|(
name|basedir
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

