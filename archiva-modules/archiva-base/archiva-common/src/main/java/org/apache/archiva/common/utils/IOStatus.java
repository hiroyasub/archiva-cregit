begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  *  * Collects information about file system operational status, e.g. if a file could be deleted,  * or IOException was thrown.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|IOStatus
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|IOException
argument_list|>
name|errorList
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|StatusResult
argument_list|>
name|okList
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(  )
decl_stmt|;
comment|/**      * Returns<code>true</code>, if no error was recorded.      * @return      */
name|boolean
name|isOk
parameter_list|()
block|{
return|return
operator|!
name|hasErrors
argument_list|( )
return|;
block|}
comment|/**      * Returns<code>true</code>, if at least one error was recorded      * @return      */
name|boolean
name|hasErrors
parameter_list|()
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
operator|||
name|errorList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Accumulator method used for stream collecting      *      * @param ioStatus      * @param fileStatus      * @return      */
specifier|public
specifier|static
name|IOStatus
name|accumulate
parameter_list|(
name|IOStatus
name|ioStatus
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|)
block|{
name|ioStatus
operator|.
name|addStatus
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
return|return
name|ioStatus
return|;
block|}
comment|/**      * Combiner used for stream collecting      * @param ioStatus1      * @param ioStatus2      * @return      */
specifier|public
specifier|static
name|IOStatus
name|combine
parameter_list|(
name|IOStatus
name|ioStatus1
parameter_list|,
name|IOStatus
name|ioStatus2
parameter_list|)
block|{
name|IOStatus
name|status
init|=
operator|new
name|IOStatus
argument_list|( )
decl_stmt|;
name|status
operator|.
name|addAllSuccess
argument_list|(
name|ioStatus1
operator|.
name|getSuccessFiles
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|addAllSuccess
argument_list|(
name|ioStatus2
operator|.
name|getSuccessFiles
argument_list|( )
argument_list|)
expr_stmt|;
name|status
operator|.
name|addAllErrors
argument_list|(
name|ioStatus1
operator|.
name|getErrorFiles
argument_list|( )
argument_list|)
expr_stmt|;
name|status
operator|.
name|addAllErrors
argument_list|(
name|ioStatus2
operator|.
name|getErrorFiles
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
comment|/**      * Add the status for a specific file to this status collection.      *      * @param status the status for a given file      * @return the status object itself      */
specifier|public
name|IOStatus
name|addStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|.
name|getResult
argument_list|()
operator|==
name|StatusResult
operator|.
name|ERROR
condition|)
block|{
name|addError
argument_list|(
name|status
operator|.
name|getPath
argument_list|( )
argument_list|,
name|status
operator|.
name|getException
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSuccess
argument_list|(
name|status
operator|.
name|getPath
argument_list|( )
argument_list|,
name|status
operator|.
name|getResult
argument_list|( )
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Adds an error to the status collection.      *      * @param path the file path      * @param e the exception thrown during the file operation      */
specifier|public
name|void
name|addError
parameter_list|(
name|Path
name|path
parameter_list|,
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
block|{
name|errorList
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
name|errorList
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds multiple errors to the collection.      *      * @param errors the map of file, error pairs      */
specifier|public
name|void
name|addAllErrors
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|IOException
argument_list|>
name|errors
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
block|{
name|errorList
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
name|errorList
operator|.
name|putAll
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds all successful states to the collection.      *      * @param success a map of file, StatusResult pairs      */
specifier|public
name|void
name|addAllSuccess
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|StatusResult
argument_list|>
name|success
parameter_list|)
block|{
name|okList
operator|.
name|putAll
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add success status for a given file to the collection.      *      * @param path the file path      * @param status the status of the file operation, e.g. DELETED      */
specifier|public
name|void
name|addSuccess
parameter_list|(
name|Path
name|path
parameter_list|,
name|StatusResult
name|status
parameter_list|)
block|{
name|okList
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns all the recorded errors as map of path, exception pairs.      * @return the map of path, exception pairs.      */
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|IOException
argument_list|>
name|getErrorFiles
parameter_list|()
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
return|return
name|errorList
return|;
block|}
comment|/**      * Returns all the recorded successful operations.      *      * @return the map of path, StatusResult pairs      */
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|StatusResult
argument_list|>
name|getSuccessFiles
parameter_list|()
block|{
if|if
condition|(
name|okList
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
return|return
name|okList
return|;
block|}
block|}
end_class

end_unit

