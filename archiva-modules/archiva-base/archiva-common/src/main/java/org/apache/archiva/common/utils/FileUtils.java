begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  *  * Utility class for file manipulation  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|FileUtils
block|{
comment|/**      * Deletes the directory recursively and quietly.      *      * @param dir      */
specifier|public
specifier|static
name|void
name|deleteQuietly
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|walk
argument_list|(
name|dir
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|file
lambda|->
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore this
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore this
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Given path is not a directory "
argument_list|)
throw|;
block|}
name|boolean
name|result
init|=
name|Files
operator|.
name|walk
argument_list|(
name|dir
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|file
lambda|->
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|allMatch
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error during recursive delete of "
operator|+
name|dir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

