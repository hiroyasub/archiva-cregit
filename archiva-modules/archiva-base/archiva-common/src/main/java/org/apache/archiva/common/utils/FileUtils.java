begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_comment
comment|/**  * Utility class for file manipulation  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|FileUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Deletes the directory recursively and quietly.      *      * @param dir      */
specifier|public
specifier|static
name|void
name|deleteQuietly
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|walk
argument_list|(
name|dir
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|file
lambda|->
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore this
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore this
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Given path is not a directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
try|try
block|{
name|result
operator|=
name|Files
operator|.
name|walk
argument_list|(
name|dir
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|file
lambda|->
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UncheckedIOException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"File could not be deleted {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|allMatch
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedIOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File deletion failed "
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error during recursive delete of "
operator|+
name|dir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|readFileToString
parameter_list|(
name|Path
name|file
parameter_list|,
name|Charset
name|encoding
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|,
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not read from file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|writeStringToFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|Charset
name|encoding
parameter_list|,
name|String
name|value
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
name|value
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not write to file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return the base directory      *      * @return      */
specifier|public
specifier|static
name|String
name|getBasedir
parameter_list|()
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|basedir
return|;
block|}
comment|/**      * This checks, if the given child is a absolute path. If this is the case      * the relative path is used.      *      * @param parent The parent directory      * @param child  The child      * @return The path parent/child      */
specifier|public
name|Path
name|resolveNonAbsolute
parameter_list|(
name|Path
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|Path
name|childPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|parent
operator|.
name|resolve
argument_list|(
name|childPath
operator|.
name|getNameCount
argument_list|()
operator|>
literal|0
condition|?
name|childPath
operator|.
name|subpath
argument_list|(
literal|0
argument_list|,
name|childPath
operator|.
name|getNameCount
argument_list|()
argument_list|)
else|:
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parent
operator|.
name|resolve
argument_list|(
name|child
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|unzipFileEntry
parameter_list|(
name|ZipFile
name|file
parameter_list|,
name|ZipEntry
name|entry
parameter_list|,
name|Path
name|destinationPath
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|file
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bis
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Path
name|uncompressedFilePath
init|=
name|destinationPath
operator|.
name|resolve
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parentPath
init|=
name|uncompressedFilePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|parentPath
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|createFile
argument_list|(
name|uncompressedFilePath
argument_list|)
expr_stmt|;
name|OutputStream
name|fileOutput
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|uncompressedFilePath
argument_list|)
decl_stmt|;
while|while
condition|(
name|bis
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fileOutput
operator|.
name|write
argument_list|(
name|bis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fileOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Unzips a file into a destination directory. It does not update the modification time according the      * the date in the zip file. All subdirectories will be created if the zip file contains a directory structure.      *      * @param zipFile the path to the zip file      * @param destinationPath the destination path where the files should be extracted.      * @throws IOException if an error occurs during extract.      */
specifier|public
specifier|static
name|void
name|unzip
parameter_list|(
name|Path
name|zipFile
parameter_list|,
name|Path
name|destinationPath
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ZipFile
name|file
init|=
operator|new
name|ZipFile
argument_list|(
name|zipFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|file
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|e
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|destinationPath
operator|.
name|resolve
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unzipFileEntry
argument_list|(
name|file
argument_list|,
name|e
argument_list|,
name|destinationPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occured during unzip of zipFile={}, entry={}. Message: {}"
argument_list|,
name|zipFile
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

