begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * BaseFileTest  *  *  */
end_comment

begin_class
specifier|public
class|class
name|BaseFileTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testFileString
parameter_list|()
block|{
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository"
argument_list|)
decl_stmt|;
name|String
name|pathFile
init|=
literal|"path/to/resource.xml"
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|repoDir
argument_list|,
name|pathFile
argument_list|)
decl_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFileFile
parameter_list|()
block|{
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository"
argument_list|)
decl_stmt|;
name|File
name|pathFile
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|)
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|repoDir
argument_list|,
name|pathFile
argument_list|)
decl_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringFile
parameter_list|()
block|{
name|String
name|repoDir
init|=
literal|"/home/user/foo/repository"
decl_stmt|;
name|File
name|pathFile
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|)
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|repoDir
argument_list|,
name|pathFile
argument_list|)
decl_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFileThenSetBaseString
parameter_list|()
block|{
name|String
name|repoDir
init|=
literal|"/home/user/foo/repository"
decl_stmt|;
name|File
name|pathFile
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|)
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|pathFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|setBaseDir
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFileThenSetBaseFile
parameter_list|()
block|{
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository"
argument_list|)
decl_stmt|;
name|File
name|pathFile
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|)
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|pathFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|setBaseDir
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringThenSetBaseString
parameter_list|()
block|{
name|String
name|repoDir
init|=
literal|"/home/user/foo/repository"
decl_stmt|;
name|String
name|pathFile
init|=
literal|"/home/user/foo/repository/path/to/resource.xml"
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|pathFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|setBaseDir
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringThenSetBaseFile
parameter_list|()
block|{
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
literal|"/home/user/foo/repository"
argument_list|)
decl_stmt|;
name|String
name|pathFile
init|=
literal|"/home/user/foo/repository/path/to/resource.xml"
decl_stmt|;
name|BaseFile
name|file
init|=
operator|new
name|BaseFile
argument_list|(
name|pathFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|setBaseDir
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
name|assertAbsolutePath
argument_list|(
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertRelativePath
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertBasedir
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAbsolutePath
parameter_list|(
name|String
name|expectedPath
parameter_list|,
name|BaseFile
name|actualFile
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|expectedPath
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|actualFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertRelativePath
parameter_list|(
name|String
name|expectedPath
parameter_list|,
name|BaseFile
name|actualFile
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|StringUtils
operator|.
name|replace
argument_list|(
name|actualFile
operator|.
name|getRelativePath
argument_list|()
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertBasedir
parameter_list|(
name|String
name|expectedPath
parameter_list|,
name|BaseFile
name|actualFile
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|expectedPath
argument_list|)
argument_list|,
name|actualFile
operator|.
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

