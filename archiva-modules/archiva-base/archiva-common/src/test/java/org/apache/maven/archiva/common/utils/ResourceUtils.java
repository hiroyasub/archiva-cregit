begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  *<code>ResourceUtils</code>  */
end_comment

begin_class
specifier|public
class|class
name|ResourceUtils
block|{
comment|/**      * Lookup resource at the given path relative to the root of the classpath and if it exists return a file object      * that can be used to access it.      *<p>      * At test time the contents of both the src/resources and test/resources dirs are available at the root of the      * classpath.      *<p>      * To retrieve the file src/test/resources/sometest/test.properties use getResource("/sometest/test.properties").      *       * @param resourcePath the path to the resource relative to the root of the classpath      * @return File a file object pointing to the resource on the classpath or null if the resource cannot be found      */
specifier|public
specifier|static
name|File
name|getResource
parameter_list|(
name|String
name|resourcePath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getResource
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Lookup resource at the given path relative to the root of the classpath and if it exists return a file object      * that can be used to access it.      *<p>      * At test time the contents of both the src/resources and test/resources dirs are available at the root of the      * classpath.      *<p>      * To retrieve the file src/test/resources/sometest/test.properties use getResource("/sometest/test.properties").      *       * @param resourcePath the path to the resource relative to the root of the classpath      * @param classloader the classloader who's classpath should be searched for the resource      * @return File a file object pointing to the resource on the classpath or null if the resource cannot be found      */
specifier|public
specifier|static
name|File
name|getResource
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|ClassLoader
name|classloader
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|testResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|resourcePath
argument_list|)
condition|)
block|{
comment|// make sure the retrieval is relative to the root of the classpath
name|resourcePath
operator|=
name|resourcePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|resourcePath
else|:
literal|"/"
operator|+
name|resourcePath
expr_stmt|;
name|URL
name|resourceUrl
init|=
name|getResourceUrl
argument_list|(
name|resourcePath
argument_list|,
name|classloader
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find test resource at path '"
operator|+
name|resourcePath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|testResource
operator|=
operator|new
name|File
argument_list|(
name|resourceUrl
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|testResource
return|;
block|}
specifier|private
specifier|static
name|URL
name|getResourceUrl
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|ClassLoader
name|classloader
parameter_list|)
block|{
return|return
name|classloader
operator|!=
literal|null
condition|?
name|classloader
operator|.
name|getResource
argument_list|(
name|resourcePath
argument_list|)
else|:
name|ResourceUtils
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|resourcePath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

