begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|FileUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDeleteQuietly
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tf
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"FileUtilsTest"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tf
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tf
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|td
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"FileUtilsTest"
argument_list|)
decl_stmt|;
name|Path
name|f1
init|=
name|td
operator|.
name|resolve
argument_list|(
literal|"file1.txt"
argument_list|)
decl_stmt|;
name|Path
name|f2
init|=
name|td
operator|.
name|resolve
argument_list|(
literal|"file2.txt"
argument_list|)
decl_stmt|;
name|Path
name|d1
init|=
name|td
operator|.
name|resolve
argument_list|(
literal|"dir1"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|Path
name|d11
init|=
name|d1
operator|.
name|resolve
argument_list|(
literal|"dir11"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|d11
argument_list|)
expr_stmt|;
name|Path
name|f111
init|=
name|d11
operator|.
name|resolve
argument_list|(
literal|"file111.txt"
argument_list|)
decl_stmt|;
name|Path
name|f112
init|=
name|d11
operator|.
name|resolve
argument_list|(
literal|"file112.txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f1
argument_list|,
literal|"file1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f2
argument_list|,
literal|"file2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f111
argument_list|,
literal|"file111"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f112
argument_list|,
literal|"file112"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|d1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f111
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f112
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f111
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f112
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|d1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|td
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"FileUtilsTest"
argument_list|)
decl_stmt|;
name|Path
name|f1
init|=
name|td
operator|.
name|resolve
argument_list|(
literal|"file1.txt"
argument_list|)
decl_stmt|;
name|Path
name|f2
init|=
name|td
operator|.
name|resolve
argument_list|(
literal|"file2.txt"
argument_list|)
decl_stmt|;
name|Path
name|d1
init|=
name|td
operator|.
name|resolve
argument_list|(
literal|"dir1"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|Path
name|d11
init|=
name|d1
operator|.
name|resolve
argument_list|(
literal|"dir11"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|d11
argument_list|)
expr_stmt|;
name|Path
name|f111
init|=
name|d11
operator|.
name|resolve
argument_list|(
literal|"file111.txt"
argument_list|)
decl_stmt|;
name|Path
name|f112
init|=
name|d11
operator|.
name|resolve
argument_list|(
literal|"file112.txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f1
argument_list|,
literal|"file1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f2
argument_list|,
literal|"file2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f111
argument_list|,
literal|"file111"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|f112
argument_list|,
literal|"file112"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|d1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f111
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f112
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f111
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|f112
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|d1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|io
operator|.
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDeleteException
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tf
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"aaserijdmcjdjhdejeidmdjdlasrjerjnbmckdkdk"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tf
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

