begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * PathUtilTest   *  *  */
end_comment

begin_class
specifier|public
class|class
name|PathUtilTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testToRelativeWithoutSlash
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|PathUtil
operator|.
name|getRelative
argument_list|(
literal|"/home/user/foo/repository"
argument_list|,
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToRelativeWithSlash
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path/to/resource.xml"
argument_list|,
name|PathUtil
operator|.
name|getRelative
argument_list|(
literal|"/home/user/foo/repository/"
argument_list|,
literal|"/home/user/foo/repository/path/to/resource.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToUrlRelativePath
parameter_list|()
block|{
name|File
name|workingDir
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|workingDirname
init|=
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|workingDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
comment|// Some JVM's retain the "." at the end of the path.  Drop it.
if|if
condition|(
name|workingDirname
operator|.
name|endsWith
argument_list|(
literal|"/."
argument_list|)
condition|)
block|{
name|workingDirname
operator|=
name|workingDirname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|workingDirname
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|workingDirname
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|workingDirname
operator|=
literal|"/"
operator|+
name|workingDirname
expr_stmt|;
block|}
name|String
name|path
init|=
literal|"path/to/resource.xml"
decl_stmt|;
name|String
name|expectedPath
init|=
literal|"file:"
operator|+
name|workingDirname
operator|+
literal|"/"
operator|+
name|path
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|PathUtil
operator|.
name|toUrl
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToUrlUsingFileUrl
parameter_list|()
block|{
name|File
name|workingDir
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|workingDirname
init|=
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|workingDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
comment|// Some JVM's retain the "." at the end of the path.  Drop it.
if|if
condition|(
name|workingDirname
operator|.
name|endsWith
argument_list|(
literal|"/."
argument_list|)
condition|)
block|{
name|workingDirname
operator|=
name|workingDirname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|workingDirname
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|workingDirname
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|workingDirname
operator|=
literal|"/"
operator|+
name|workingDirname
expr_stmt|;
block|}
name|String
name|path
init|=
literal|"path/to/resource.xml"
decl_stmt|;
name|String
name|expectedPath
init|=
literal|"file:"
operator|+
name|workingDirname
operator|+
literal|"/"
operator|+
name|path
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|PathUtil
operator|.
name|toUrl
argument_list|(
name|expectedPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

