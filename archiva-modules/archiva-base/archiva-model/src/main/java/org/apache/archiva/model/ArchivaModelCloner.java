begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Utility methods for cloning various Archiva Model objects.  *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaModelCloner
block|{
specifier|public
specifier|static
name|ArtifactReference
name|clone
parameter_list|(
name|ArtifactReference
name|artifactReference
parameter_list|)
block|{
if|if
condition|(
name|artifactReference
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArtifactReference
name|cloned
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|cloned
operator|.
name|setGroupId
argument_list|(
name|artifactReference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setArtifactId
argument_list|(
name|artifactReference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setVersion
argument_list|(
name|artifactReference
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setClassifier
argument_list|(
name|artifactReference
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setType
argument_list|(
name|artifactReference
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Properties
name|clone
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Properties
name|cloned
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|(
name|Enumeration
argument_list|<
name|String
argument_list|>
operator|)
name|properties
operator|.
name|propertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|cloned
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|cloned
return|;
block|}
specifier|public
specifier|static
name|SnapshotVersion
name|clone
parameter_list|(
name|SnapshotVersion
name|snapshotVersion
parameter_list|)
block|{
if|if
condition|(
name|snapshotVersion
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SnapshotVersion
name|cloned
init|=
operator|new
name|SnapshotVersion
argument_list|()
decl_stmt|;
name|cloned
operator|.
name|setTimestamp
argument_list|(
name|snapshotVersion
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setBuildNumber
argument_list|(
name|snapshotVersion
operator|.
name|getBuildNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
specifier|public
specifier|static
name|VersionedReference
name|clone
parameter_list|(
name|VersionedReference
name|versionedReference
parameter_list|)
block|{
if|if
condition|(
name|versionedReference
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|VersionedReference
name|cloned
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|cloned
operator|.
name|setGroupId
argument_list|(
name|versionedReference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setArtifactId
argument_list|(
name|versionedReference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|cloned
operator|.
name|setVersion
argument_list|(
name|versionedReference
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|cloneArtifactReferences
parameter_list|(
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|artifactReferenceList
parameter_list|)
block|{
if|if
condition|(
name|artifactReferenceList
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactReference
argument_list|>
argument_list|(
name|artifactReferenceList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactReference
name|ref
range|:
name|artifactReferenceList
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|cloneSimpleStringList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|simple
parameter_list|)
block|{
if|if
condition|(
name|simple
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|simple
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|txt
range|:
name|simple
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|cloneAvailableVersions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|availableVersions
parameter_list|)
block|{
return|return
name|cloneSimpleStringList
argument_list|(
name|availableVersions
argument_list|)
return|;
block|}
block|}
end_class

end_unit

