begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|fs
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|AssetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
operator|.
name|AbstractStorageUtilTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|TestInstance
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|TestInstance
argument_list|(
name|TestInstance
operator|.
name|Lifecycle
operator|.
name|PER_CLASS
argument_list|)
specifier|public
class|class
name|FileSystemStorageUtilTest
extends|extends
name|AbstractStorageUtilTest
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|tmpDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|StorageAsset
name|createAsset
parameter_list|(
name|StorageAsset
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|AssetType
name|type
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|FilesystemAsset
condition|)
block|{
return|return
name|createAsset
argument_list|(
operator|(
name|FilesystemAsset
operator|)
name|parent
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Bad asset instance type"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|AfterAll
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
for|for
control|(
name|Path
name|dir
range|:
name|tmpDirs
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
operator|.
name|toFile
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|FilesystemAsset
name|createAsset
parameter_list|(
name|FilesystemAsset
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|AssetType
name|type
parameter_list|)
block|{
name|FilesystemAsset
name|asset
init|=
operator|(
name|FilesystemAsset
operator|)
name|parent
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|asset
operator|.
name|create
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|asset
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not create asset "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|StorageAsset
name|createRootAsset
parameter_list|( )
block|{
try|try
block|{
name|Path
name|tmpDir
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"testfs"
argument_list|)
decl_stmt|;
name|tmpDirs
operator|.
name|add
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|FilesystemStorage
name|storage
init|=
operator|new
name|FilesystemStorage
argument_list|(
name|tmpDir
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|storage
operator|.
name|getRoot
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not create storage"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|activateException
parameter_list|(
name|StorageAsset
name|root
parameter_list|)
block|{
comment|// Not done here
block|}
annotation|@
name|Override
specifier|protected
name|RepositoryStorage
name|createStorage
parameter_list|(
name|StorageAsset
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|instanceof
name|FilesystemAsset
condition|)
block|{
return|return
name|root
operator|.
name|getStorage
argument_list|( )
return|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Wrong asset implementation "
operator|+
name|root
operator|.
name|getClass
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|testDeletionStatus
parameter_list|(
name|int
name|expected
parameter_list|,
name|RepositoryStorage
name|storage
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|storage
operator|.
name|getRoot
argument_list|( )
operator|.
name|getFilePath
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

