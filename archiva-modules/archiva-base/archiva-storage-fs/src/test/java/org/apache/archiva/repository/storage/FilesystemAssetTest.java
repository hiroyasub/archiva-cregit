begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_class
specifier|public
class|class
name|FilesystemAssetTest
block|{
name|Path
name|assetPathFile
decl_stmt|;
name|Path
name|assetPathDir
decl_stmt|;
name|FilesystemStorage
name|filesystemStorage
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|assetPathDir
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"assetDir"
argument_list|)
expr_stmt|;
name|assetPathFile
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|assetPathDir
argument_list|,
literal|"assetFile"
argument_list|,
literal|"dat"
argument_list|)
expr_stmt|;
name|filesystemStorage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|assetPathDir
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|assetPathFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|assetPathDir
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPath
parameter_list|()
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
name|assetPathFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|assetPathFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|asset
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getName
parameter_list|()
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/"
operator|+
name|assetPathFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|assetPathFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|asset
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getModificationTime
parameter_list|()
throws|throws
name|IOException
block|{
name|Instant
name|modTime
init|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|assetPathFile
argument_list|)
operator|.
name|toInstant
argument_list|()
decl_stmt|;
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test123"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|modTime
operator|.
name|equals
argument_list|(
name|asset
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isContainer
parameter_list|()
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1323"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|asset
operator|.
name|isContainer
argument_list|()
argument_list|)
expr_stmt|;
name|FilesystemAsset
name|asset2
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|asset2
operator|.
name|isContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|list
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|asset
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FilesystemAsset
name|asset2
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1235"
argument_list|,
name|assetPathDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|asset2
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|f1
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|assetPathDir
argument_list|,
literal|"testfile"
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|Path
name|f2
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|assetPathDir
argument_list|,
literal|"testfile"
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|Path
name|d1
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|assetPathDir
argument_list|,
literal|"testdir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|asset2
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|asset2
operator|.
name|list
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|f1
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|asset2
operator|.
name|list
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|f2
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|asset2
operator|.
name|list
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|d1
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|d1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getSize
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|asset
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|assetPathFile
argument_list|,
operator|new
name|String
argument_list|(
literal|"abcdef"
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|asset
operator|.
name|getSize
argument_list|()
operator|>=
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getData
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|assetPathFile
argument_list|,
literal|"abcdef"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|asset
operator|.
name|getReadStream
argument_list|()
init|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"abcdef"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDataExceptionOnDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathDir
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|assetPathFile
argument_list|,
literal|"abcdef"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|asset
operator|.
name|getReadStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Exception expected for data on dir"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// fine
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeData
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|assetPathFile
argument_list|,
literal|"abcdef"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|asset
operator|.
name|getWriteStream
argument_list|(
literal|true
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"test12345"
argument_list|,
name|os
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test12345"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|assetPathFile
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeDataAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|assetPathFile
argument_list|,
literal|"abcdef"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|asset
operator|.
name|getWriteStream
argument_list|(
literal|false
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"test12345"
argument_list|,
name|os
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"abcdeftest12345"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|assetPathFile
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeDataExceptionOnDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathDir
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputStream
name|os
init|=
name|asset
operator|.
name|getWriteStream
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Writing to a directory should throw a IOException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Fine
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeDataFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Path
name|dataFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"testdata"
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dataFile
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"testkdkdkd"
argument_list|,
name|os
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
name|asset
operator|.
name|replaceDataFromFile
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testkdkdkd"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|assetPathFile
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exists
parameter_list|()
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|asset
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FilesystemAsset
name|asset2
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
literal|"abcdefgkdkdk"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|asset2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getFilePath
parameter_list|()
block|{
name|FilesystemAsset
name|asset
init|=
operator|new
name|FilesystemAsset
argument_list|(
name|filesystemStorage
argument_list|,
literal|"/test1234"
argument_list|,
name|assetPathFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|assetPathFile
argument_list|,
name|asset
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

