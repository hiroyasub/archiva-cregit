begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_comment
comment|/**  *  * Utility class for assets. Allows to copy, move between different storage instances and  * recursively consume the tree.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|FsStorageUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FsStorageUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Copies the source asset to the target. The assets may be from different RepositoryStorage instances.      * If you know that source and asset are from the same storage instance, the copy method of the storage      * instance may be faster.      *      * @param source The source asset      * @param target The target asset      * @param locked If true, a readlock is set on the source and a write lock is set on the target.      * @param copyOptions Copy options      * @throws IOException      */
specifier|public
specifier|static
specifier|final
name|void
name|copyAsset
parameter_list|(
specifier|final
name|StorageAsset
name|source
parameter_list|,
specifier|final
name|StorageAsset
name|target
parameter_list|,
name|boolean
name|locked
parameter_list|,
specifier|final
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|isFileBased
argument_list|()
operator|&&
name|target
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
comment|// Short cut for FS operations
specifier|final
name|Path
name|sourcePath
init|=
name|source
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|targetPath
init|=
name|target
operator|.
name|getFilePath
argument_list|( )
decl_stmt|;
if|if
condition|(
name|locked
condition|)
block|{
specifier|final
name|FileLockManager
name|lmSource
init|=
operator|(
operator|(
name|FilesystemStorage
operator|)
name|source
operator|.
name|getStorage
argument_list|()
operator|)
operator|.
name|getFileLockManager
argument_list|()
decl_stmt|;
specifier|final
name|FileLockManager
name|lmTarget
init|=
operator|(
operator|(
name|FilesystemStorage
operator|)
name|target
operator|.
name|getStorage
argument_list|()
operator|)
operator|.
name|getFileLockManager
argument_list|()
decl_stmt|;
name|Lock
name|lockRead
init|=
literal|null
decl_stmt|;
name|Lock
name|lockWrite
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lockRead
operator|=
name|lmSource
operator|.
name|readFileLock
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create read lock on {}"
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|lockWrite
operator|=
name|lmTarget
operator|.
name|writeFileLock
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create write lock on {}"
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Files
operator|.
name|copy
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lockRead
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|lmSource
operator|.
name|release
argument_list|(
name|lockRead
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileLockException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during lock release of read lock {}"
argument_list|,
name|lockRead
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lockWrite
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|lmTarget
operator|.
name|release
argument_list|(
name|lockWrite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileLockException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during lock release of write lock {}"
argument_list|,
name|lockWrite
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|Files
operator|.
name|copy
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
specifier|final
name|RepositoryStorage
name|sourceStorage
init|=
name|source
operator|.
name|getStorage
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryStorage
name|targetStorage
init|=
name|target
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|sourceStorage
operator|.
name|consumeDataFromChannel
argument_list|(
name|source
argument_list|,
name|is
lambda|->
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
operator|.
name|StorageUtil
operator|.
name|wrapWriteFunction
argument_list|(
name|is
argument_list|,
name|targetStorage
argument_list|,
name|target
argument_list|,
name|locked
argument_list|)
argument_list|,
name|locked
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
name|void
name|copyToLocalFile
parameter_list|(
name|StorageAsset
name|asset
parameter_list|,
name|Path
name|destination
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|asset
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|asset
operator|.
name|getFilePath
argument_list|()
argument_list|,
name|destination
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|HashSet
argument_list|<
name|OpenOption
argument_list|>
name|openOptions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CopyOption
name|option
range|:
name|copyOptions
control|)
block|{
if|if
condition|(
name|option
operator|==
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
condition|)
block|{
name|openOptions
operator|.
name|add
argument_list|(
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|openOptions
operator|.
name|add
argument_list|(
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
expr_stmt|;
name|openOptions
operator|.
name|add
argument_list|(
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|openOptions
operator|.
name|add
argument_list|(
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|openOptions
operator|.
name|add
argument_list|(
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
expr_stmt|;
block|}
block|}
name|asset
operator|.
name|getStorage
argument_list|()
operator|.
name|consumeDataFromChannel
argument_list|(
name|asset
argument_list|,
name|channel
lambda|->
block|{
try|try
block|{
name|FileChannel
operator|.
name|open
argument_list|(
name|destination
argument_list|,
name|openOptions
argument_list|)
operator|.
name|transferFrom
argument_list|(
name|channel
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|PathInformation
block|{
specifier|final
name|Path
name|path
decl_stmt|;
specifier|final
name|boolean
name|tmpFile
decl_stmt|;
name|PathInformation
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|tmpFile
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|tmpFile
operator|=
name|tmpFile
expr_stmt|;
block|}
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|boolean
name|isTmpFile
parameter_list|()
block|{
return|return
name|tmpFile
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|PathInformation
name|getAssetDataAsPath
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|asset
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Asset does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|asset
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|PathInformation
argument_list|(
name|asset
operator|.
name|getFilePath
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|Path
name|tmpFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|asset
operator|.
name|getName
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
operator|.
name|StorageUtil
operator|.
name|getExtension
argument_list|(
name|asset
argument_list|)
argument_list|)
decl_stmt|;
name|copyToLocalFile
argument_list|(
name|asset
argument_list|,
name|tmpFile
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
return|return
operator|new
name|PathInformation
argument_list|(
name|tmpFile
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

