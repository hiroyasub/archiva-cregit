begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Class Configuration.  *   * @version $Revision$ $Date$  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
specifier|public
class|class
name|Configuration
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
comment|//--------------------------/
comment|//- Class/Member Variables -/
comment|//--------------------------/
comment|/**      * This is the version of the configuration format.      */
specifier|private
name|String
name|version
init|=
literal|"3.0.0"
decl_stmt|;
comment|/**      * The type of the metadata storage. Allowed values: jcr, file,      * cassandra.      */
specifier|private
name|String
name|metadataStore
init|=
literal|"jcr"
decl_stmt|;
comment|/**      * Field repositoryGroups.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
name|repositoryGroups
decl_stmt|;
comment|/**      * Field managedRepositories.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepositories
decl_stmt|;
comment|/**      * Field remoteRepositories.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepositories
decl_stmt|;
comment|/**      * Field proxyConnectors.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
decl_stmt|;
comment|/**      * Field networkProxies.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
name|networkProxies
decl_stmt|;
comment|/**      * Field legacyArtifactPaths.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|LegacyArtifactPath
argument_list|>
name|legacyArtifactPaths
decl_stmt|;
comment|/**      *       *             The repository scanning configuration.      *                 */
specifier|private
name|RepositoryScanningConfiguration
name|repositoryScanning
decl_stmt|;
comment|/**      *       *             The webapp configuration.      *                 */
specifier|private
name|WebappConfiguration
name|webapp
decl_stmt|;
comment|/**      *       *             The organisation info.      *                 */
specifier|private
name|OrganisationInformation
name|organisationInfo
decl_stmt|;
comment|/**      *       *             The NetworkConfiguration .      *                 */
specifier|private
name|NetworkConfiguration
name|networkConfiguration
decl_stmt|;
comment|/**      * The RedbackRuntimeConfiguration.      */
specifier|private
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
decl_stmt|;
comment|/**      * The ArchivaRuntimeConfiguration.      */
specifier|private
name|ArchivaRuntimeConfiguration
name|archivaRuntimeConfiguration
decl_stmt|;
comment|/**      * Field proxyConnectorRuleConfigurations.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|proxyConnectorRuleConfigurations
decl_stmt|;
comment|/**      * Archiva default settings.      */
specifier|private
name|ArchivaDefaultConfiguration
name|archivaDefaultConfiguration
decl_stmt|;
comment|/**      * Field modelEncoding.      */
specifier|private
name|String
name|modelEncoding
init|=
literal|"UTF-8"
decl_stmt|;
comment|//-----------/
comment|//- Methods -/
comment|//-----------/
comment|/**      * Method addLegacyArtifactPath.      *       * @param legacyArtifactPath      */
specifier|public
name|void
name|addLegacyArtifactPath
parameter_list|(
name|LegacyArtifactPath
name|legacyArtifactPath
parameter_list|)
block|{
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|add
argument_list|(
name|legacyArtifactPath
argument_list|)
expr_stmt|;
block|}
comment|//-- void addLegacyArtifactPath( LegacyArtifactPath )
comment|/**      * Method addManagedRepository.      *       * @param managedRepositoryConfiguration      */
specifier|public
name|void
name|addManagedRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|)
block|{
name|getManagedRepositories
argument_list|()
operator|.
name|add
argument_list|(
name|managedRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void addManagedRepository( ManagedRepositoryConfiguration )
comment|/**      * Method addNetworkProxy.      *       * @param networkProxyConfiguration      */
specifier|public
name|void
name|addNetworkProxy
parameter_list|(
name|NetworkProxyConfiguration
name|networkProxyConfiguration
parameter_list|)
block|{
name|getNetworkProxies
argument_list|()
operator|.
name|add
argument_list|(
name|networkProxyConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void addNetworkProxy( NetworkProxyConfiguration )
comment|/**      * Method addProxyConnector.      *       * @param proxyConnectorConfiguration      */
specifier|public
name|void
name|addProxyConnector
parameter_list|(
name|ProxyConnectorConfiguration
name|proxyConnectorConfiguration
parameter_list|)
block|{
name|getProxyConnectors
argument_list|()
operator|.
name|add
argument_list|(
name|proxyConnectorConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void addProxyConnector( ProxyConnectorConfiguration )
comment|/**      * Method addProxyConnectorRuleConfiguration.      *       * @param proxyConnectorRuleConfiguration      */
specifier|public
name|void
name|addProxyConnectorRuleConfiguration
parameter_list|(
name|ProxyConnectorRuleConfiguration
name|proxyConnectorRuleConfiguration
parameter_list|)
block|{
name|getProxyConnectorRuleConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|proxyConnectorRuleConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void addProxyConnectorRuleConfiguration( ProxyConnectorRuleConfiguration )
comment|/**      * Method addRemoteRepository.      *       * @param remoteRepositoryConfiguration      */
specifier|public
name|void
name|addRemoteRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|)
block|{
name|getRemoteRepositories
argument_list|()
operator|.
name|add
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void addRemoteRepository( RemoteRepositoryConfiguration )
comment|/**      * Method addRepositoryGroup.      *       * @param repositoryGroupConfiguration      */
specifier|public
name|void
name|addRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
block|{
name|getRepositoryGroups
argument_list|()
operator|.
name|add
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void addRepositoryGroup( RepositoryGroupConfiguration )
comment|/**      * Get archiva default settings.      *       * @return ArchivaDefaultConfiguration      */
specifier|public
name|ArchivaDefaultConfiguration
name|getArchivaDefaultConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|archivaDefaultConfiguration
return|;
block|}
comment|//-- ArchivaDefaultConfiguration getArchivaDefaultConfiguration()
comment|/**      * Get the ArchivaRuntimeConfiguration.      *       * @return ArchivaRuntimeConfiguration      */
specifier|public
name|ArchivaRuntimeConfiguration
name|getArchivaRuntimeConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|archivaRuntimeConfiguration
return|;
block|}
comment|//-- ArchivaRuntimeConfiguration getArchivaRuntimeConfiguration()
comment|/**      * Method getLegacyArtifactPaths.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|LegacyArtifactPath
argument_list|>
name|getLegacyArtifactPaths
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|legacyArtifactPaths
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|legacyArtifactPaths
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|LegacyArtifactPath
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|legacyArtifactPaths
return|;
block|}
comment|//-- java.util.List<LegacyArtifactPath> getLegacyArtifactPaths()
comment|/**      * Method getManagedRepositories.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|getManagedRepositories
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|managedRepositories
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|managedRepositories
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|managedRepositories
return|;
block|}
comment|//-- java.util.List<ManagedRepositoryConfiguration> getManagedRepositories()
comment|/**      * Get the type of the metadata storage. Allowed values: jcr,      * file, cassandra.      *       * @return String      */
specifier|public
name|String
name|getMetadataStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|metadataStore
return|;
block|}
comment|//-- String getMetadataStore()
comment|/**      * Get the modelEncoding field.      *       * @return String      */
specifier|public
name|String
name|getModelEncoding
parameter_list|()
block|{
return|return
name|this
operator|.
name|modelEncoding
return|;
block|}
comment|//-- String getModelEncoding()
comment|/**      * Get the NetworkConfiguration .      *       * @return NetworkConfiguration      */
specifier|public
name|NetworkConfiguration
name|getNetworkConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|networkConfiguration
return|;
block|}
comment|//-- NetworkConfiguration getNetworkConfiguration()
comment|/**      * Method getNetworkProxies.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
name|getNetworkProxies
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|networkProxies
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|networkProxies
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|networkProxies
return|;
block|}
comment|//-- java.util.List<NetworkProxyConfiguration> getNetworkProxies()
comment|/**      * Get the organisation info.      *       * @return OrganisationInformation      */
specifier|public
name|OrganisationInformation
name|getOrganisationInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|organisationInfo
return|;
block|}
comment|//-- OrganisationInformation getOrganisationInfo()
comment|/**      * Method getProxyConnectorRuleConfigurations.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|getProxyConnectorRuleConfigurations
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|proxyConnectorRuleConfigurations
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|proxyConnectorRuleConfigurations
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|proxyConnectorRuleConfigurations
return|;
block|}
comment|//-- java.util.List<ProxyConnectorRuleConfiguration> getProxyConnectorRuleConfigurations()
comment|/**      * Method getProxyConnectors.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|getProxyConnectors
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|proxyConnectors
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|proxyConnectors
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|proxyConnectors
return|;
block|}
comment|//-- java.util.List<ProxyConnectorConfiguration> getProxyConnectors()
comment|/**      * Get the RedbackRuntimeConfiguration.      *       * @return RedbackRuntimeConfiguration      */
specifier|public
name|RedbackRuntimeConfiguration
name|getRedbackRuntimeConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|redbackRuntimeConfiguration
return|;
block|}
comment|//-- RedbackRuntimeConfiguration getRedbackRuntimeConfiguration()
comment|/**      * Method getRemoteRepositories.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|getRemoteRepositories
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|remoteRepositories
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|remoteRepositories
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|remoteRepositories
return|;
block|}
comment|//-- java.util.List<RemoteRepositoryConfiguration> getRemoteRepositories()
comment|/**      * Method getRepositoryGroups.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
name|getRepositoryGroups
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|repositoryGroups
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|repositoryGroups
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|repositoryGroups
return|;
block|}
comment|//-- java.util.List<RepositoryGroupConfiguration> getRepositoryGroups()
comment|/**      * Get the repository scanning configuration.      *       * @return RepositoryScanningConfiguration      */
specifier|public
name|RepositoryScanningConfiguration
name|getRepositoryScanning
parameter_list|()
block|{
return|return
name|this
operator|.
name|repositoryScanning
return|;
block|}
comment|//-- RepositoryScanningConfiguration getRepositoryScanning()
comment|/**      * Get this is the version of the configuration format.      *       * @return String      */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|//-- String getVersion()
comment|/**      * Get the webapp configuration.      *       * @return WebappConfiguration      */
specifier|public
name|WebappConfiguration
name|getWebapp
parameter_list|()
block|{
return|return
name|this
operator|.
name|webapp
return|;
block|}
comment|//-- WebappConfiguration getWebapp()
comment|/**      * Method removeLegacyArtifactPath.      *       * @param legacyArtifactPath      */
specifier|public
name|void
name|removeLegacyArtifactPath
parameter_list|(
name|LegacyArtifactPath
name|legacyArtifactPath
parameter_list|)
block|{
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|remove
argument_list|(
name|legacyArtifactPath
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeLegacyArtifactPath( LegacyArtifactPath )
comment|/**      * Method removeManagedRepository.      *       * @param managedRepositoryConfiguration      */
specifier|public
name|void
name|removeManagedRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|)
block|{
name|getManagedRepositories
argument_list|()
operator|.
name|remove
argument_list|(
name|managedRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeManagedRepository( ManagedRepositoryConfiguration )
comment|/**      * Method removeNetworkProxy.      *       * @param networkProxyConfiguration      */
specifier|public
name|void
name|removeNetworkProxy
parameter_list|(
name|NetworkProxyConfiguration
name|networkProxyConfiguration
parameter_list|)
block|{
name|getNetworkProxies
argument_list|()
operator|.
name|remove
argument_list|(
name|networkProxyConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeNetworkProxy( NetworkProxyConfiguration )
comment|/**      * Method removeProxyConnector.      *       * @param proxyConnectorConfiguration      */
specifier|public
name|void
name|removeProxyConnector
parameter_list|(
name|ProxyConnectorConfiguration
name|proxyConnectorConfiguration
parameter_list|)
block|{
name|getProxyConnectors
argument_list|()
operator|.
name|remove
argument_list|(
name|proxyConnectorConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeProxyConnector( ProxyConnectorConfiguration )
comment|/**      * Method removeProxyConnectorRuleConfiguration.      *       * @param proxyConnectorRuleConfiguration      */
specifier|public
name|void
name|removeProxyConnectorRuleConfiguration
parameter_list|(
name|ProxyConnectorRuleConfiguration
name|proxyConnectorRuleConfiguration
parameter_list|)
block|{
name|getProxyConnectorRuleConfigurations
argument_list|()
operator|.
name|remove
argument_list|(
name|proxyConnectorRuleConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeProxyConnectorRuleConfiguration( ProxyConnectorRuleConfiguration )
comment|/**      * Method removeRemoteRepository.      *       * @param remoteRepositoryConfiguration      */
specifier|public
name|void
name|removeRemoteRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|)
block|{
name|getRemoteRepositories
argument_list|()
operator|.
name|remove
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeRemoteRepository( RemoteRepositoryConfiguration )
comment|/**      * Method removeRepositoryGroup.      *       * @param repositoryGroupConfiguration      */
specifier|public
name|void
name|removeRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
block|{
name|getRepositoryGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
block|}
comment|//-- void removeRepositoryGroup( RepositoryGroupConfiguration )
comment|/**      * Set archiva default settings.      *       * @param archivaDefaultConfiguration      */
specifier|public
name|void
name|setArchivaDefaultConfiguration
parameter_list|(
name|ArchivaDefaultConfiguration
name|archivaDefaultConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaDefaultConfiguration
operator|=
name|archivaDefaultConfiguration
expr_stmt|;
block|}
comment|//-- void setArchivaDefaultConfiguration( ArchivaDefaultConfiguration )
comment|/**      * Set the ArchivaRuntimeConfiguration.      *       * @param archivaRuntimeConfiguration      */
specifier|public
name|void
name|setArchivaRuntimeConfiguration
parameter_list|(
name|ArchivaRuntimeConfiguration
name|archivaRuntimeConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaRuntimeConfiguration
operator|=
name|archivaRuntimeConfiguration
expr_stmt|;
block|}
comment|//-- void setArchivaRuntimeConfiguration( ArchivaRuntimeConfiguration )
comment|/**      * Set the list of custom legacy path to artifact.      *       * @param legacyArtifactPaths      */
specifier|public
name|void
name|setLegacyArtifactPaths
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|LegacyArtifactPath
argument_list|>
name|legacyArtifactPaths
parameter_list|)
block|{
name|this
operator|.
name|legacyArtifactPaths
operator|=
name|legacyArtifactPaths
expr_stmt|;
block|}
comment|//-- void setLegacyArtifactPaths( java.util.List )
comment|/**      * Set the list of repositories that this archiva instance      * uses.      *       * @param managedRepositories      */
specifier|public
name|void
name|setManagedRepositories
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepositories
parameter_list|)
block|{
name|this
operator|.
name|managedRepositories
operator|=
name|managedRepositories
expr_stmt|;
block|}
comment|//-- void setManagedRepositories( java.util.List )
comment|/**      * Set the type of the metadata storage. Allowed values: jcr,      * file, cassandra.      *       * @param metadataStore      */
specifier|public
name|void
name|setMetadataStore
parameter_list|(
name|String
name|metadataStore
parameter_list|)
block|{
name|this
operator|.
name|metadataStore
operator|=
name|metadataStore
expr_stmt|;
block|}
comment|//-- void setMetadataStore( String )
comment|/**      * Set the modelEncoding field.      *       * @param modelEncoding      */
specifier|public
name|void
name|setModelEncoding
parameter_list|(
name|String
name|modelEncoding
parameter_list|)
block|{
name|this
operator|.
name|modelEncoding
operator|=
name|modelEncoding
expr_stmt|;
block|}
comment|//-- void setModelEncoding( String )
comment|/**      * Set the NetworkConfiguration .      *       * @param networkConfiguration      */
specifier|public
name|void
name|setNetworkConfiguration
parameter_list|(
name|NetworkConfiguration
name|networkConfiguration
parameter_list|)
block|{
name|this
operator|.
name|networkConfiguration
operator|=
name|networkConfiguration
expr_stmt|;
block|}
comment|//-- void setNetworkConfiguration( NetworkConfiguration )
comment|/**      * Set the list of network proxies to use for outgoing      * requests.      *       * @param networkProxies      */
specifier|public
name|void
name|setNetworkProxies
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
name|networkProxies
parameter_list|)
block|{
name|this
operator|.
name|networkProxies
operator|=
name|networkProxies
expr_stmt|;
block|}
comment|//-- void setNetworkProxies( java.util.List )
comment|/**      * Set the organisation info.      *       * @param organisationInfo      */
specifier|public
name|void
name|setOrganisationInfo
parameter_list|(
name|OrganisationInformation
name|organisationInfo
parameter_list|)
block|{
name|this
operator|.
name|organisationInfo
operator|=
name|organisationInfo
expr_stmt|;
block|}
comment|//-- void setOrganisationInfo( OrganisationInformation )
comment|/**      * Set the list of ProxyConnectorRuleConfigurations.      *       * @param proxyConnectorRuleConfigurations      */
specifier|public
name|void
name|setProxyConnectorRuleConfigurations
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|proxyConnectorRuleConfigurations
parameter_list|)
block|{
name|this
operator|.
name|proxyConnectorRuleConfigurations
operator|=
name|proxyConnectorRuleConfigurations
expr_stmt|;
block|}
comment|//-- void setProxyConnectorRuleConfigurations( java.util.List )
comment|/**      * Set the list of proxy connectors for this archiva instance.      *       * @param proxyConnectors      */
specifier|public
name|void
name|setProxyConnectors
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
parameter_list|)
block|{
name|this
operator|.
name|proxyConnectors
operator|=
name|proxyConnectors
expr_stmt|;
block|}
comment|//-- void setProxyConnectors( java.util.List )
comment|/**      * Set the RedbackRuntimeConfiguration.      *       * @param redbackRuntimeConfiguration      */
specifier|public
name|void
name|setRedbackRuntimeConfiguration
parameter_list|(
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
parameter_list|)
block|{
name|this
operator|.
name|redbackRuntimeConfiguration
operator|=
name|redbackRuntimeConfiguration
expr_stmt|;
block|}
comment|//-- void setRedbackRuntimeConfiguration( RedbackRuntimeConfiguration )
comment|/**      * Set the list of repositories that this archiva can retrieve      * from or publish to.      *       * @param remoteRepositories      */
specifier|public
name|void
name|setRemoteRepositories
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepositories
parameter_list|)
block|{
name|this
operator|.
name|remoteRepositories
operator|=
name|remoteRepositories
expr_stmt|;
block|}
comment|//-- void setRemoteRepositories( java.util.List )
comment|/**      * Set the list of repository groups.      *       * @param repositoryGroups      */
specifier|public
name|void
name|setRepositoryGroups
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
name|repositoryGroups
parameter_list|)
block|{
name|this
operator|.
name|repositoryGroups
operator|=
name|repositoryGroups
expr_stmt|;
block|}
comment|//-- void setRepositoryGroups( java.util.List )
comment|/**      * Set the repository scanning configuration.      *       * @param repositoryScanning      */
specifier|public
name|void
name|setRepositoryScanning
parameter_list|(
name|RepositoryScanningConfiguration
name|repositoryScanning
parameter_list|)
block|{
name|this
operator|.
name|repositoryScanning
operator|=
name|repositoryScanning
expr_stmt|;
block|}
comment|//-- void setRepositoryScanning( RepositoryScanningConfiguration )
comment|/**      * Set this is the version of the configuration format.      *       * @param version      */
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|//-- void setVersion( String )
comment|/**      * Set the webapp configuration.      *       * @param webapp      */
specifier|public
name|void
name|setWebapp
parameter_list|(
name|WebappConfiguration
name|webapp
parameter_list|)
block|{
name|this
operator|.
name|webapp
operator|=
name|webapp
expr_stmt|;
block|}
comment|//-- void setWebapp( WebappConfiguration )
specifier|private
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|repositoryToGroupMap
decl_stmt|;
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getRepositoryToGroupMap
parameter_list|()
block|{
if|if
condition|(
name|repositoryGroups
operator|!=
literal|null
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RepositoryGroupConfiguration
name|group
range|:
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
operator|)
name|repositoryGroups
control|)
block|{
for|for
control|(
name|String
name|repositoryId
range|:
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|group
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|map
operator|.
name|get
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
name|groups
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|repositoryId
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
name|groups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|repositoryToGroupMap
operator|=
name|map
expr_stmt|;
block|}
return|return
name|repositoryToGroupMap
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|getRepositoryGroupsAsMap
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|map
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryGroups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RepositoryGroupConfiguration
name|group
range|:
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
operator|)
name|repositoryGroups
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|RepositoryGroupConfiguration
name|findRepositoryGroupById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|repositoryGroups
operator|!=
literal|null
operator|&&
name|id
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
operator|)
name|repositoryGroups
operator|)
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|g
lambda|->
name|g
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|( )
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupToRepositoryMap
decl_stmt|;
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getGroupToRepositoryMap
parameter_list|()
block|{
if|if
condition|(
name|repositoryGroups
operator|!=
literal|null
operator|&&
name|managedRepositories
operator|!=
literal|null
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|repo
range|:
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
operator|)
name|managedRepositories
control|)
block|{
for|for
control|(
name|RepositoryGroupConfiguration
name|group
range|:
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
operator|)
name|repositoryGroups
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|getRepositories
argument_list|()
operator|.
name|contains
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|groupId
init|=
name|group
operator|.
name|getId
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|repos
init|=
name|map
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repos
operator|==
literal|null
condition|)
block|{
name|repos
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|repos
argument_list|)
expr_stmt|;
block|}
name|repos
operator|.
name|add
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|groupToRepositoryMap
operator|=
name|map
expr_stmt|;
block|}
return|return
name|groupToRepositoryMap
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxyConfiguration
argument_list|>
name|getNetworkProxiesAsMap
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxyConfiguration
argument_list|>
name|map
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|NetworkProxyConfiguration
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|networkProxies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
name|i
init|=
name|networkProxies
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkProxyConfiguration
name|proxy
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|proxy
operator|.
name|getId
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|>
name|getProxyConnectorAsMap
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxyConnectors
operator|!=
literal|null
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|it
init|=
name|proxyConnectors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProxyConnectorConfiguration
name|proxyConfig
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|connectors
init|=
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectors
operator|==
literal|null
condition|)
block|{
name|connectors
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|()
expr_stmt|;
name|proxyConnectorMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|connectors
argument_list|)
expr_stmt|;
block|}
name|connectors
operator|.
name|add
argument_list|(
name|proxyConfig
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|sort
argument_list|(
name|connectors
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
operator|.
name|ProxyConnectorConfigurationOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|proxyConnectorMap
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|getRemoteRepositoriesAsMap
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|map
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteRepositories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|i
init|=
name|remoteRepositories
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|RemoteRepositoryConfiguration
name|findRemoteRepositoryById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|remoteRepositories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|i
init|=
name|remoteRepositories
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|getManagedRepositoriesAsMap
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|map
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedRepositories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|i
init|=
name|managedRepositories
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|ManagedRepositoryConfiguration
name|findManagedRepositoryById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|managedRepositories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|i
init|=
name|managedRepositories
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

