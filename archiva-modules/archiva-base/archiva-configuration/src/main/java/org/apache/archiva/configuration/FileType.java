begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * The FileType object.  *   * @version $Revision$ $Date$  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
specifier|public
class|class
name|FileType
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
comment|//--------------------------/
comment|//- Class/Member Variables -/
comment|//--------------------------/
comment|/**      * Field id.      */
specifier|private
name|String
name|id
decl_stmt|;
comment|/**      * Field patterns.      */
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|patterns
decl_stmt|;
comment|//-----------/
comment|//- Methods -/
comment|//-----------/
comment|/**      * Method addPattern.      *       * @param string      */
specifier|public
name|void
name|addPattern
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|getPatterns
argument_list|()
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|//-- void addPattern( String )
comment|/**      * Get the id field.      *       * @return String      */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|//-- String getId()
comment|/**      * Method getPatterns.      *       * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|getPatterns
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|patterns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|patterns
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|patterns
return|;
block|}
comment|//-- java.util.List<String> getPatterns()
comment|/**      * Method removePattern.      *       * @param string      */
specifier|public
name|void
name|removePattern
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|getPatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|//-- void removePattern( String )
comment|/**      * Set the id field.      *       * @param id      */
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|//-- void setId( String )
comment|/**      * Set the patterns field.      *       * @param patterns      */
specifier|public
name|void
name|setPatterns
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
name|this
operator|.
name|patterns
operator|=
name|patterns
expr_stmt|;
block|}
comment|//-- void setPatterns( java.util.List )
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileType
name|fileType
init|=
operator|(
name|FileType
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|?
operator|!
name|id
operator|.
name|equals
argument_list|(
name|fileType
operator|.
name|id
argument_list|)
else|:
name|fileType
operator|.
name|id
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
condition|?
literal|37
operator|+
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

