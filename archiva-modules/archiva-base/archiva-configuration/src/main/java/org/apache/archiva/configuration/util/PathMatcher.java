begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  *  * This provides a path matcher like in the SelectorUtils of the ant project.  *  * Using code from apache ant org.apache.tools.ant.types.selectors.SelectorUtils to remove the ant dependency for code  * compilation.  * See https://github.com/apache/ant/blob/master/src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java  *  * @author Martin Stockhammer<martin_s@apache.org>  *  *  */
end_comment

begin_class
specifier|public
class|class
name|PathMatcher
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEEP_TREE_MATCH
init|=
literal|"**"
decl_stmt|;
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern The pattern to match against.      *                Must not be<code>null</code>.      * @param str     The string which must be matched against the pattern.      *                Must not be<code>null</code>.      *      * @return<code>true</code> if the string matches against the pattern,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|pattern
argument_list|,
name|str
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern The pattern to match against.      *                Must not be<code>null</code>.      * @param str     The string which must be matched against the pattern.      *                Must not be<code>null</code>.      * @param caseSensitive Whether or not matching should be performed      *                        case sensitively.      *      *      * @return<code>true</code> if the string matches against the pattern,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|char
index|[]
name|patArr
init|=
name|pattern
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|char
index|[]
name|strArr
init|=
name|str
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|patIdxEnd
init|=
name|patArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|strIdxEnd
init|=
name|strArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|boolean
name|containsStar
init|=
literal|false
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|patArr
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'*'
condition|)
block|{
name|containsStar
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|containsStar
condition|)
block|{
comment|// No '*'s, so we make a shortcut
if|if
condition|(
name|patIdxEnd
operator|!=
name|strIdxEnd
condition|)
block|{
return|return
literal|false
return|;
comment|// Pattern and string do not have the same size
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
return|return
literal|true
return|;
comment|// String matches against pattern
block|}
if|if
condition|(
name|patIdxEnd
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
comment|// Pattern contains only '*', which matches anything
block|}
comment|// Process characters before first star
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|patIdxStart
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'*'
operator|||
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|strIdxStart
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// All characters in the string are used. Check if only '*'s are
comment|// left in the pattern. If so, we succeeded. Otherwise failure.
return|return
name|allStars
argument_list|(
name|patArr
argument_list|,
name|patIdxStart
argument_list|,
name|patIdxEnd
argument_list|)
return|;
block|}
comment|// Process characters after last star
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|patIdxEnd
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'*'
operator|||
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|strIdxEnd
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
name|patIdxEnd
operator|--
expr_stmt|;
name|strIdxEnd
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// All characters in the string are used. Check if only '*'s are
comment|// left in the pattern. If so, we succeeded. Otherwise failure.
return|return
name|allStars
argument_list|(
name|patArr
argument_list|,
name|patIdxStart
argument_list|,
name|patIdxEnd
argument_list|)
return|;
block|}
comment|// process pattern between stars. padIdxStart and patIdxEnd point
comment|// always to a '*'.
while|while
condition|(
name|patIdxStart
operator|!=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|int
name|patIdxTmp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
operator|+
literal|1
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|==
literal|'*'
condition|)
block|{
name|patIdxTmp
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|patIdxTmp
operator|==
name|patIdxStart
operator|+
literal|1
condition|)
block|{
comment|// Two stars next to each other, skip the first one.
name|patIdxStart
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between padIdxStart& padIdxTmp in str between
comment|// strIdxStart& strIdxEnd
name|int
name|patLength
init|=
operator|(
name|patIdxTmp
operator|-
name|patIdxStart
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|strLength
init|=
operator|(
name|strIdxEnd
operator|-
name|strIdxStart
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|strLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|strLength
operator|-
name|patLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|patLength
condition|;
name|j
operator|++
control|)
block|{
name|char
name|ch
init|=
name|patArr
index|[
name|patIdxStart
operator|+
name|j
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
operator|&&
name|different
argument_list|(
name|caseSensitive
argument_list|,
name|ch
argument_list|,
name|strArr
index|[
name|strIdxStart
operator|+
name|i
operator|+
name|j
index|]
argument_list|)
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
block|}
name|foundIdx
operator|=
name|strIdxStart
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIdx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|=
name|patIdxTmp
expr_stmt|;
name|strIdxStart
operator|=
name|foundIdx
operator|+
name|patLength
expr_stmt|;
block|}
comment|// All characters in the string are used. Check if only '*'s are left
comment|// in the pattern. If so, we succeeded. Otherwise failure.
return|return
name|allStars
argument_list|(
name|patArr
argument_list|,
name|patIdxStart
argument_list|,
name|patIdxEnd
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|allStars
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|different
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|,
name|char
name|ch
parameter_list|,
name|char
name|other
parameter_list|)
block|{
return|return
name|caseSensitive
condition|?
name|ch
operator|!=
name|other
else|:
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|!=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a given path matches a given pattern.      *      * If you need to call this method multiple times with the same      * pattern you should rather use TokenizedPath      *      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      *      * @return<code>true</code> if the pattern matches against the string,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|String
index|[]
name|patDirs
init|=
name|tokenizePathAsArray
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|matchPath
argument_list|(
name|patDirs
argument_list|,
name|tokenizePathAsArray
argument_list|(
name|str
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a given path matches a given pattern.      *      * If you need to call this method multiple times with the same      * pattern you should rather use TokenizedPattern      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      * @param isCaseSensitive Whether or not matching should be performed      *                        case sensitively.      *      * @return<code>true</code> if the pattern matches against the string,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
name|String
index|[]
name|patDirs
init|=
name|tokenizePathAsArray
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|matchPath
argument_list|(
name|patDirs
argument_list|,
name|tokenizePathAsArray
argument_list|(
name|str
argument_list|)
argument_list|,
name|isCaseSensitive
argument_list|)
return|;
block|}
specifier|static
name|String
index|[]
name|tokenizePathAsArray
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Path
name|root
init|=
literal|null
decl_stmt|;
name|Path
name|fsPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|root
operator|=
name|fsPath
operator|.
name|getRoot
argument_list|( )
expr_stmt|;
name|path
operator|=
name|root
operator|.
name|relativize
argument_list|(
name|fsPath
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|char
name|sep
init|=
name|File
operator|.
name|separatorChar
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|len
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
name|sep
condition|)
block|{
if|if
condition|(
name|pos
operator|!=
name|start
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|start
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|len
operator|!=
name|start
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|String
index|[]
name|l
init|=
operator|new
name|String
index|[
name|count
operator|+
operator|(
operator|(
name|root
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
index|]
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|l
index|[
literal|0
index|]
operator|=
name|root
operator|.
name|toString
argument_list|()
expr_stmt|;
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|start
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|len
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
name|sep
condition|)
block|{
if|if
condition|(
name|pos
operator|!=
name|start
condition|)
block|{
name|String
name|tok
init|=
name|path
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|l
index|[
name|count
operator|++
index|]
operator|=
name|tok
expr_stmt|;
block|}
name|start
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|len
operator|!=
name|start
condition|)
block|{
name|String
name|tok
init|=
name|path
operator|.
name|substring
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|l
index|[
name|count
comment|/*++*/
index|]
operator|=
name|tok
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**      * Core implementation of matchPath.  It is isolated so that it      * can be called from TokenizedPattern.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
index|[]
name|tokenizedPattern
parameter_list|,
name|String
index|[]
name|strDirs
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|patIdxEnd
init|=
name|tokenizedPattern
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|strIdxEnd
init|=
name|strDirs
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// up to first '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|String
name|patDir
init|=
name|tokenizedPattern
index|[
name|patIdxStart
index|]
decl_stmt|;
if|if
condition|(
name|patDir
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
index|[
name|strIdxStart
index|]
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|tokenizedPattern
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|patIdxStart
operator|>
name|patIdxEnd
condition|)
block|{
comment|// String not exhausted, but pattern is. Failure.
return|return
literal|false
return|;
block|}
comment|// up to last '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|String
name|patDir
init|=
name|tokenizedPattern
index|[
name|patIdxEnd
index|]
decl_stmt|;
if|if
condition|(
name|patDir
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
index|[
name|strIdxEnd
index|]
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxEnd
operator|--
expr_stmt|;
name|strIdxEnd
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|tokenizedPattern
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
while|while
condition|(
name|patIdxStart
operator|!=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|int
name|patIdxTmp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
operator|+
literal|1
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tokenizedPattern
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEEP_TREE_MATCH
argument_list|)
condition|)
block|{
name|patIdxTmp
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|patIdxTmp
operator|==
name|patIdxStart
operator|+
literal|1
condition|)
block|{
comment|// '**/**' situation, so skip one
name|patIdxStart
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between padIdxStart& padIdxTmp in str between
comment|// strIdxStart& strIdxEnd
name|int
name|patLength
init|=
operator|(
name|patIdxTmp
operator|-
name|patIdxStart
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|strLength
init|=
operator|(
name|strIdxEnd
operator|-
name|strIdxStart
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|strLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|strLength
operator|-
name|patLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|patLength
condition|;
name|j
operator|++
control|)
block|{
name|String
name|subPat
init|=
name|tokenizedPattern
index|[
name|patIdxStart
operator|+
name|j
operator|+
literal|1
index|]
decl_stmt|;
name|String
name|subStr
init|=
name|strDirs
index|[
name|strIdxStart
operator|+
name|i
operator|+
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|subPat
argument_list|,
name|subStr
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
block|}
name|foundIdx
operator|=
name|strIdxStart
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIdx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|=
name|patIdxTmp
expr_stmt|;
name|strIdxStart
operator|=
name|foundIdx
operator|+
name|patLength
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|DEEP_TREE_MATCH
operator|.
name|equals
argument_list|(
name|tokenizedPattern
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

