begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
operator|.
name|ProxyConnectorConfigurationOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|io
operator|.
name|registry
operator|.
name|ConfigurationRegistryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|io
operator|.
name|registry
operator|.
name|ConfigurationRegistryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|AbstractUpdatePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|CachedFailuresPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ChecksumPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|DownloadErrorPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|PostDownloadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|PreDownloadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|evaluator
operator|.
name|DefaultExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|evaluator
operator|.
name|EvaluatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|evaluator
operator|.
name|ExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|evaluator
operator|.
name|sources
operator|.
name|SystemPropertyExpressionSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|commons
operator|.
name|CommonsConfigurationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|springutils
operator|.
name|ComponentContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ListUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|BaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<p>  * Implementation of configuration holder that retrieves it from the registry.  *</p>  *<p>  * The registry layers and merges the 2 configuration files: user, and application server.  *</p>  *<p>  * Instead of relying on the model defaults, if the registry is empty a default configuration file is loaded and  * applied from a resource. The defaults are not loaded into the registry as the lists (eg repositories) could no longer  * be removed if that was the case.  *</p>  *<p>  * When saving the configuration, it is saved to the location it was read from. If it was read from the defaults, it  * will be saved to the user location.  * However, if the configuration contains information from both sources, an exception is raised as this is currently  * unsupported. The reason for this is that it is not possible to identify where to re-save elements, and can result  * in list configurations (eg repositories) becoming inconsistent.  *</p>  *<p>  * If the configuration is outdated, it will be upgraded when it is loaded. This is done by checking the version flag  * before reading it from the registry.  *</p>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"archivaConfiguration#default"
argument_list|)
specifier|public
class|class
name|DefaultArchivaConfiguration
implements|implements
name|ArchivaConfiguration
implements|,
name|RegistryListener
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultArchivaConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Plexus registry to read the configuration from.      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"commons-configuration"
argument_list|)
specifier|private
name|Registry
name|registry
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ComponentContainer
name|componentContainer
decl_stmt|;
comment|/**      * The configuration that has been converted.      */
specifier|private
name|Configuration
name|configuration
decl_stmt|;
comment|/**      * see #initialize      *      * @todo these don't strictly belong in here      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PreDownloadPolicy
argument_list|>
name|prePolicies
decl_stmt|;
comment|/**      * see #initialize      *      * @todo these don't strictly belong in here      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PostDownloadPolicy
argument_list|>
name|postPolicies
decl_stmt|;
comment|/**      * see #initialize      *      * @todo these don't strictly belong in here      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|downloadErrorPolicies
decl_stmt|;
comment|/**      * see #initialize      * default-value="${user.home}/.m2/archiva.xml"      */
specifier|private
name|String
name|userConfigFilename
init|=
literal|"${user.home}/.m2/archiva.xml"
decl_stmt|;
comment|/**      * see #initialize      * default-value="${appserver.base}/conf/archiva.xml"      */
specifier|private
name|String
name|altConfigFilename
init|=
literal|"${appserver.base}/conf/archiva.xml"
decl_stmt|;
comment|/**      * Configuration Listeners we've registered.      */
specifier|private
name|Set
argument_list|<
name|ConfigurationListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|ConfigurationListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Registry Listeners we've registered.      */
specifier|private
name|Set
argument_list|<
name|RegistryListener
argument_list|>
name|registryListeners
init|=
operator|new
name|HashSet
argument_list|<
name|RegistryListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Boolean to help determine if the configuration exists as a result of pulling in      * the default-archiva.xml      */
specifier|private
name|boolean
name|isConfigurationDefaulted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"org.apache.archiva"
decl_stmt|;
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|loadConfiguration
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|Configuration
name|loadConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
name|load
argument_list|()
expr_stmt|;
name|configuration
operator|=
name|unescapeExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|isConfigurationDefaulted
condition|)
block|{
name|configuration
operator|=
name|checkRepositoryLocations
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configuration
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Configuration
name|load
parameter_list|()
block|{
comment|// TODO: should this be the same as section? make sure unnamed sections still work (eg, sys properties)
name|Registry
name|subset
init|=
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|subset
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// a little autodetection of v1, even if version is omitted (this was previously allowed)
if|if
condition|(
name|subset
operator|.
name|getSubset
argument_list|(
literal|"repositoryScanning"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only for empty, or v< 1
name|subset
operator|=
name|readDefaultConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
name|Configuration
name|config
init|=
operator|new
name|ConfigurationRegistryReader
argument_list|()
operator|.
name|read
argument_list|(
name|subset
argument_list|)
decl_stmt|;
name|config
operator|.
name|getRepositoryGroups
argument_list|()
expr_stmt|;
name|config
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|getRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|V1RepositoryConfiguration
argument_list|>
name|i
init|=
name|config
operator|.
name|getRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|V1RepositoryConfiguration
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|setScanned
argument_list|(
name|r
operator|.
name|isIndexed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
argument_list|,
literal|"file://"
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLocation
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
argument_list|,
literal|"file:"
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLocation
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
comment|// in case of empty url we can consider it as a managed one
comment|// check if location is null
comment|//file://${appserver.base}/repositories/${id}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|r
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLocation
argument_list|(
literal|"file://${appserver.base}/repositories/"
operator|+
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|addManagedRepository
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
name|r
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|r
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRemoteRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Prevent duplicate repositories from showing up.
name|config
operator|.
name|getRepositories
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|.
name|removeSubset
argument_list|(
name|KEY
operator|+
literal|".repositories"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|config
operator|.
name|getRemoteRepositories
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepos
init|=
name|config
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repo
range|:
name|remoteRepos
control|)
block|{
comment|// [MRM-582] Remote Repositories with empty<username> and<password> fields shouldn't be created in configuration.
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repo
operator|.
name|getUsername
argument_list|()
argument_list|)
condition|)
block|{
name|repo
operator|.
name|setUsername
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repo
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|repo
operator|.
name|setPassword
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Fix Proxy Connector Settings.
comment|// Create a copy of the list to read from (to prevent concurrent modification exceptions)
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|config
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
comment|// Remove the old connector list.
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|connector
range|:
name|proxyConnectorList
control|)
block|{
comment|// Fix policies
name|boolean
name|connectorValid
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|policies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Make copy of policies
name|policies
operator|.
name|putAll
argument_list|(
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clear out policies
name|connector
operator|.
name|getPolicies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Work thru policies. cleaning them up.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|policyId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|setting
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Upgrade old policy settings.
if|if
condition|(
literal|"releases"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
operator|||
literal|"snapshots"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"ignored"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|AbstractUpdatePolicy
operator|.
name|ALWAYS
expr_stmt|;
block|}
if|else if
condition|(
literal|"disabled"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|AbstractUpdatePolicy
operator|.
name|NEVER
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"cache-failures"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"ignored"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|CachedFailuresPolicy
operator|.
name|NO
expr_stmt|;
block|}
if|else if
condition|(
literal|"cached"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|CachedFailuresPolicy
operator|.
name|YES
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"checksum"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"ignored"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|ChecksumPolicy
operator|.
name|IGNORE
expr_stmt|;
block|}
block|}
comment|// Validate existance of policy key.
if|if
condition|(
name|policyExists
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
name|Policy
name|policy
init|=
name|findPolicy
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
comment|// Does option exist?
if|if
condition|(
operator|!
name|policy
operator|.
name|getOptions
argument_list|()
operator|.
name|contains
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|policy
operator|.
name|getDefaultOption
argument_list|()
expr_stmt|;
block|}
name|connector
operator|.
name|addPolicy
argument_list|(
name|policyId
argument_list|,
name|setting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Policy key doesn't exist. Don't add it to golden version.
name|log
operator|.
name|warn
argument_list|(
literal|"Policy [{}] does not exist."
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connectorValid
condition|)
block|{
name|config
operator|.
name|addProxyConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Normalize the order fields in the proxy connectors.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
name|config
operator|.
name|getProxyConnectorAsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|connectors
range|:
name|proxyConnectorMap
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Sort connectors by order field.
name|Collections
operator|.
name|sort
argument_list|(
name|connectors
argument_list|,
name|ProxyConnectorConfigurationOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normalize the order field values.
name|int
name|order
init|=
literal|1
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|connector
range|:
name|connectors
control|)
block|{
name|connector
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|config
return|;
block|}
specifier|private
name|Policy
name|findPolicy
parameter_list|(
name|String
name|policyId
parameter_list|)
block|{
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|prePolicies
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No PreDownloadPolicies found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|postPolicies
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No PostDownloadPolicies found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Policy
name|policy
decl_stmt|;
name|policy
operator|=
name|prePolicies
operator|.
name|get
argument_list|(
name|policyId
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
name|policy
return|;
block|}
name|policy
operator|=
name|postPolicies
operator|.
name|get
argument_list|(
name|policyId
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
name|policy
return|;
block|}
name|policy
operator|=
name|downloadErrorPolicies
operator|.
name|get
argument_list|(
name|policyId
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
name|policy
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|policyExists
parameter_list|(
name|String
name|policyId
parameter_list|)
block|{
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|prePolicies
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No PreDownloadPolicies found!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|postPolicies
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No PostDownloadPolicies found!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
name|prePolicies
operator|.
name|containsKey
argument_list|(
name|policyId
argument_list|)
operator|||
name|postPolicies
operator|.
name|containsKey
argument_list|(
name|policyId
argument_list|)
operator|||
name|downloadErrorPolicies
operator|.
name|containsKey
argument_list|(
name|policyId
argument_list|)
operator|)
return|;
block|}
specifier|private
name|Registry
name|readDefaultConfiguration
parameter_list|()
block|{
comment|// if it contains some old configuration, remove it (Archiva 0.9)
name|registry
operator|.
name|removeSubset
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|addConfigurationFromResource
argument_list|(
literal|"org/apache/archiva/configuration/default-archiva.xml"
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
name|this
operator|.
name|isConfigurationDefaulted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationRuntimeException
argument_list|(
literal|"Fatal error: Unable to find the built-in default configuration and load it into the registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|save
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IndeterminateConfigurationException
throws|,
name|RegistryException
block|{
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
name|Registry
name|baseSection
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
name|baseSection
expr_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
name|createDefaultConfigurationFile
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|baseSection
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|baseSection
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|boolean
name|foundList
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundList
condition|;
control|)
block|{
name|String
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// a little aggressive with the repositoryScanning and databaseScanning - should be no need to split
comment|// that configuration
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositories"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"proxyConnectors"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"networkProxies"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositoryScanning"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"remoteRepositories"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"managedRepositories"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositoryGroups"
argument_list|)
condition|)
block|{
name|foundList
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundList
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IndeterminateConfigurationException
argument_list|(
literal|"Configuration can not be saved when it is loaded from two sources"
argument_list|)
throw|;
block|}
block|}
comment|// escape all cron expressions to handle ','
name|escapeCronExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// [MRM-661] Due to a bug in the modello registry writer, we need to take these out by hand. They'll be put back by the writer.
if|if
condition|(
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"managedRepositories"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"remoteRepositories"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"proxyConnectors"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getNetworkProxies
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"networkProxies"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"legacyArtifactPaths"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"repositoryGroups"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"repositoryScanning.knownContentConsumers"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"repositoryScanning.invalidContentConsumers"
argument_list|)
expr_stmt|;
block|}
block|}
operator|new
name|ConfigurationRegistryWriter
argument_list|()
operator|.
name|write
argument_list|(
name|configuration
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|section
operator|.
name|save
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|unescapeExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|triggerEvent
argument_list|(
name|ConfigurationEvent
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|escapeCronExpressions
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
for|for
control|(
name|ManagedRepositoryConfiguration
name|c
range|:
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
control|)
block|{
name|c
operator|.
name|setRefreshCronExpression
argument_list|(
name|escapeCronExpression
argument_list|(
name|c
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Registry
name|createDefaultConfigurationFile
parameter_list|()
throws|throws
name|RegistryException
block|{
comment|// TODO: may not be needed under commons-configuration 1.4 - check
name|String
name|contents
init|=
literal|"<configuration />"
decl_stmt|;
name|String
name|fileLocation
init|=
name|userConfigFilename
decl_stmt|;
if|if
condition|(
operator|!
name|writeFile
argument_list|(
literal|"user configuration"
argument_list|,
name|userConfigFilename
argument_list|,
name|contents
argument_list|)
condition|)
block|{
name|fileLocation
operator|=
name|altConfigFilename
expr_stmt|;
if|if
condition|(
operator|!
name|writeFile
argument_list|(
literal|"alternative configuration"
argument_list|,
name|altConfigFilename
argument_list|,
name|contents
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Unable to create configuration file in either user ["
operator|+
name|userConfigFilename
operator|+
literal|"] or alternative ["
operator|+
name|altConfigFilename
operator|+
literal|"] locations on disk, usually happens when not allowed to write to those locations."
argument_list|)
throw|;
block|}
block|}
comment|// olamy hackish I know :-)
name|contents
operator|=
literal|"<configuration><xml fileName=\""
operator|+
name|fileLocation
operator|+
literal|"\" config-forceCreate=\"true\" config-name=\"org.apache.archiva.user\"/>"
operator|+
literal|"</configuration>"
expr_stmt|;
operator|(
operator|(
name|CommonsConfigurationRegistry
operator|)
name|registry
operator|)
operator|.
name|setProperties
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|registry
operator|.
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|RegistryListener
name|regListener
range|:
name|registryListeners
control|)
block|{
name|addRegistryChangeListener
argument_list|(
name|regListener
argument_list|)
expr_stmt|;
block|}
name|triggerEvent
argument_list|(
name|ConfigurationEvent
operator|.
name|SAVED
argument_list|)
expr_stmt|;
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
return|return
name|section
operator|==
literal|null
condition|?
operator|new
name|CommonsConfigurationRegistry
argument_list|(
operator|new
name|BaseConfiguration
argument_list|()
argument_list|)
else|:
name|section
return|;
block|}
comment|/**      * Attempts to write the contents to a file, if an IOException occurs, return false.      *<p>      * The file will be created if the directory to the file exists, otherwise this will return false.      *      * @param filetype the filetype (freeform text) to use in logging messages when failure to write.      * @param path     the path to write to.      * @param contents the contents to write.      * @return true if write successful.      */
specifier|private
name|boolean
name|writeFile
parameter_list|(
name|String
name|filetype
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contents
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Check parent directory (if it is declared)
if|if
condition|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Check that directory exists
if|if
condition|(
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// Directory to file must exist for file to be created
return|return
literal|false
return|;
block|}
block|}
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|file
argument_list|,
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create "
operator|+
name|filetype
operator|+
literal|" file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|triggerEvent
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|ConfigurationEvent
name|evt
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigurationListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|configurationEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addListener
parameter_list|(
name|ConfigurationListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeListener
parameter_list|(
name|ConfigurationListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|addRegistryChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// keep track for later
name|registryListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRegistryChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|addChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|section
operator|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|addChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|this
operator|.
name|postPolicies
operator|=
name|componentContainer
operator|.
name|buildMapWithRole
argument_list|(
name|PostDownloadPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|prePolicies
operator|=
name|componentContainer
operator|.
name|buildMapWithRole
argument_list|(
name|PreDownloadPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|downloadErrorPolicies
operator|=
name|componentContainer
operator|.
name|buildMapWithRole
argument_list|(
name|DownloadErrorPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Resolve expressions in the userConfigFilename and altConfigFilename
try|try
block|{
name|ExpressionEvaluator
name|expressionEvaluator
init|=
operator|new
name|DefaultExpressionEvaluator
argument_list|()
decl_stmt|;
name|expressionEvaluator
operator|.
name|addExpressionSource
argument_list|(
operator|new
name|SystemPropertyExpressionSource
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|userConfigFileNameSysProps
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"archiva.user.configFileName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|userConfigFileNameSysProps
argument_list|)
condition|)
block|{
name|userConfigFilename
operator|=
name|userConfigFileNameSysProps
expr_stmt|;
block|}
else|else
block|{
name|userConfigFilename
operator|=
name|expressionEvaluator
operator|.
name|expand
argument_list|(
name|userConfigFilename
argument_list|)
expr_stmt|;
block|}
name|altConfigFilename
operator|=
name|expressionEvaluator
operator|.
name|expand
argument_list|(
name|altConfigFilename
argument_list|)
expr_stmt|;
name|loadConfiguration
argument_list|()
expr_stmt|;
name|handleUpgradeConfiguration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed during upgrade from previous version"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed during upgrade from previous version"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EvaluatorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to evaluate expressions found in "
operator|+
literal|"userConfigFilename or altConfigFilename."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|registry
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * upgrade from 1.3      */
specifier|private
name|void
name|handleUpgradeConfiguration
parameter_list|()
throws|throws
name|RegistryException
throws|,
name|IndeterminateConfigurationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbConsumers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"update-db-artifact"
argument_list|,
literal|"update-db-repository-metadata"
argument_list|)
decl_stmt|;
comment|// remove database consumers if here
name|List
argument_list|<
name|String
argument_list|>
name|intersec
init|=
name|ListUtils
operator|.
name|intersection
argument_list|(
name|dbConsumers
argument_list|,
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intersec
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knowContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|knowContentConsumer
range|:
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dbConsumers
operator|.
name|contains
argument_list|(
name|knowContentConsumer
argument_list|)
condition|)
block|{
name|knowContentConsumers
operator|.
name|add
argument_list|(
name|knowContentConsumer
argument_list|)
expr_stmt|;
block|}
block|}
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|setKnownContentConsumers
argument_list|(
name|knowContentConsumers
argument_list|)
expr_stmt|;
block|}
comment|// ensure create-archiva-metadata is here
if|if
condition|(
operator|!
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"create-archiva-metadata"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knowContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
name|knowContentConsumers
operator|.
name|add
argument_list|(
literal|"create-archiva-metadata"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|setKnownContentConsumers
argument_list|(
name|knowContentConsumers
argument_list|)
expr_stmt|;
block|}
comment|// ensure duplicate-artifacts is here
if|if
condition|(
operator|!
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"duplicate-artifacts"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knowContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
name|knowContentConsumers
operator|.
name|add
argument_list|(
literal|"duplicate-artifacts"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|setKnownContentConsumers
argument_list|(
name|knowContentConsumers
argument_list|)
expr_stmt|;
block|}
comment|// save ??
comment|//save( configuration );
block|}
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|registry
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|// nothing to do here
block|}
specifier|public
specifier|synchronized
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
name|configuration
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|String
name|removeExpressions
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|String
name|value
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|directory
argument_list|,
literal|"${appserver.base}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|,
literal|"${appserver.base}"
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|value
argument_list|,
literal|"${appserver.home}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.home"
argument_list|,
literal|"${appserver.home}"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|private
name|String
name|unescapeCronExpression
parameter_list|(
name|String
name|cronExpression
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|cronExpression
argument_list|,
literal|"\\,"
argument_list|,
literal|","
argument_list|)
return|;
block|}
specifier|private
name|String
name|escapeCronExpression
parameter_list|(
name|String
name|cronExpression
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|cronExpression
argument_list|,
literal|","
argument_list|,
literal|"\\,"
argument_list|)
return|;
block|}
specifier|private
name|Configuration
name|unescapeExpressions
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|// TODO: for commons-configuration 1.3 only
for|for
control|(
name|Iterator
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|i
init|=
name|config
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagedRepositoryConfiguration
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setLocation
argument_list|(
name|removeExpressions
argument_list|(
name|c
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRefreshCronExpression
argument_list|(
name|unescapeCronExpression
argument_list|(
name|c
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
specifier|private
name|Configuration
name|checkRepositoryLocations
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|// additional check for [MRM-789], ensure that the location of the default repositories
comment|// are not installed in the server installation
for|for
control|(
name|ManagedRepositoryConfiguration
name|repo
range|:
operator|(
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
operator|)
name|config
operator|.
name|getManagedRepositories
argument_list|()
control|)
block|{
name|String
name|repoPath
init|=
name|repo
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|File
name|repoLocation
init|=
operator|new
name|File
argument_list|(
name|repoPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoLocation
operator|.
name|exists
argument_list|()
operator|&&
name|repoLocation
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|repoPath
operator|.
name|endsWith
argument_list|(
literal|"data/repositories/"
operator|+
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|repo
operator|.
name|setLocation
argument_list|(
name|repoPath
operator|+
literal|"/data/repositories/"
operator|+
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|config
return|;
block|}
specifier|public
name|String
name|getUserConfigFilename
parameter_list|()
block|{
return|return
name|userConfigFilename
return|;
block|}
specifier|public
name|String
name|getAltConfigFilename
parameter_list|()
block|{
return|return
name|altConfigFilename
return|;
block|}
specifier|public
name|boolean
name|isDefaulted
parameter_list|()
block|{
return|return
name|this
operator|.
name|isConfigurationDefaulted
return|;
block|}
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
specifier|public
name|void
name|setRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
specifier|public
name|void
name|setUserConfigFilename
parameter_list|(
name|String
name|userConfigFilename
parameter_list|)
block|{
name|this
operator|.
name|userConfigFilename
operator|=
name|userConfigFilename
expr_stmt|;
block|}
specifier|public
name|void
name|setAltConfigFilename
parameter_list|(
name|String
name|altConfigFilename
parameter_list|)
block|{
name|this
operator|.
name|altConfigFilename
operator|=
name|altConfigFilename
expr_stmt|;
block|}
block|}
end_class

end_unit

