begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
operator|.
name|ProxyConnectorConfigurationOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|io
operator|.
name|registry
operator|.
name|ConfigurationRegistryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|io
operator|.
name|registry
operator|.
name|ConfigurationRegistryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|AbstractUpdatePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|CachedFailuresPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ChecksumPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|evaluator
operator|.
name|DefaultExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|evaluator
operator|.
name|EvaluatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|evaluator
operator|.
name|ExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|evaluator
operator|.
name|sources
operator|.
name|SystemPropertyExpressionSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|commons
operator|.
name|CommonsConfigurationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|ListUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|BaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  *<p>  * Implementation of configuration holder that retrieves it from the registry.  *</p>  *<p>  * The registry layers and merges the 2 configuration files: user, and application server.  *</p>  *<p>  * Instead of relying on the model defaults, if the registry is empty a default configuration file is loaded and  * applied from a resource. The defaults are not loaded into the registry as the lists (eg repositories) could no longer  * be removed if that was the case.  *</p>  *<p>  * When saving the configuration, it is saved to the location it was read from. If it was read from the defaults, it  * will be saved to the user location.  * However, if the configuration contains information from both sources, an exception is raised as this is currently  * unsupported. The reason for this is that it is not possible to identify where to re-save elements, and can result  * in list configurations (eg repositories) becoming inconsistent.  *</p>  *<p>  * If the configuration is outdated, it will be upgraded when it is loaded. This is done by checking the version flag  * before reading it from the registry.  *<p>  * FIXME: The synchronization must be improved, the current impl may lead to inconsistent data or multiple getConfiguration() calls (martin_s@apache.org)  *</p>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"archivaConfiguration#default"
argument_list|)
specifier|public
class|class
name|DefaultArchivaConfiguration
implements|implements
name|ArchivaConfiguration
implements|,
name|RegistryListener
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultArchivaConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|FILE_ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|/**      * Plexus registry to read the configuration from.      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"commons-configuration"
argument_list|)
specifier|private
name|Registry
name|registry
decl_stmt|;
comment|/**      * The configuration that has been converted.      */
specifier|private
name|Configuration
name|configuration
decl_stmt|;
comment|/**      * see #initialize      * default-value="${user.home}/.m2/archiva.xml"      */
specifier|private
name|String
name|userConfigFilename
init|=
literal|"${user.home}/.m2/archiva.xml"
decl_stmt|;
comment|/**      * see #initialize      * default-value="${appserver.base}/conf/archiva.xml"      */
specifier|private
name|String
name|altConfigFilename
init|=
literal|"${appserver.base}/conf/archiva.xml"
decl_stmt|;
comment|/**      * Configuration Listeners we've registered.      */
specifier|private
name|Set
argument_list|<
name|ConfigurationListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Registry Listeners we've registered.      */
specifier|private
name|Set
argument_list|<
name|RegistryListener
argument_list|>
name|registryListeners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Boolean to help determine if the configuration exists as a result of pulling in      * the default-archiva.xml      */
specifier|private
name|boolean
name|isConfigurationDefaulted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"org.apache.archiva"
decl_stmt|;
comment|// Section used for default only configuration
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DEFAULT_ONLY
init|=
literal|"org.apache.archiva_default"
decl_stmt|;
specifier|private
name|Locale
name|defaultLocale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Locale
operator|.
name|LanguageRange
argument_list|>
name|languagePriorities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|Path
name|dataDirectory
decl_stmt|;
specifier|private
specifier|volatile
name|Path
name|repositoryBaseDirectory
decl_stmt|;
specifier|private
specifier|volatile
name|Path
name|remoteRepositoryBaseDirectory
decl_stmt|;
specifier|private
specifier|volatile
name|Path
name|repositoryGroupBaseDirectory
decl_stmt|;
annotation|@
name|PostConstruct
specifier|private
name|void
name|init
parameter_list|()
block|{
name|languagePriorities
operator|=
name|Locale
operator|.
name|LanguageRange
operator|.
name|parse
argument_list|(
literal|"en,fr,de"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|loadConfiguration
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|Configuration
name|loadConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
name|load
argument_list|()
expr_stmt|;
name|configuration
operator|=
name|unescapeExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|isConfigurationDefaulted
condition|)
block|{
name|configuration
operator|=
name|checkRepositoryLocations
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configuration
return|;
block|}
specifier|private
name|boolean
name|hasConfigVersionChanged
parameter_list|(
name|Configuration
name|current
parameter_list|,
name|Registry
name|defaultOnlyConfiguration
parameter_list|)
block|{
return|return
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|current
operator|.
name|getVersion
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|defaultOnlyConfiguration
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Configuration
name|load
parameter_list|()
block|{
comment|// TODO: should this be the same as section? make sure unnamed sections still work (eg, sys properties)
name|Registry
name|subset
init|=
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|subset
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|subset
operator|.
name|getSubset
argument_list|(
literal|"repositoryScanning"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only for empty
name|subset
operator|=
name|readDefaultConfiguration
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No version tag found in configuration. Archiva configuration version 1.x is not longer supported."
argument_list|)
throw|;
block|}
block|}
name|Configuration
name|config
init|=
operator|new
name|ConfigurationRegistryReader
argument_list|()
operator|.
name|read
argument_list|(
name|subset
argument_list|)
decl_stmt|;
comment|// Resolving data and repositories directories
comment|// If the config entries are absolute, the path is used as it is
comment|// if the config entries are empty, they are resolved:
comment|//   dataDirectory = ${appserver.base}/data
comment|//   repositoryDirectory = ${dataDirectory}/repositories
comment|// If the entries are relative they are resolved
comment|//   relative to the appserver.base, for dataDirectory
comment|//   relative to dataDirectory for repositoryBase
name|String
name|dataDir
init|=
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getDataDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dataDir
argument_list|)
condition|)
block|{
name|dataDirectory
operator|=
name|getAppServerBaseDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|tmpDataDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpDataDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|dataDirectory
operator|=
name|tmpDataDir
expr_stmt|;
block|}
else|else
block|{
name|dataDirectory
operator|=
name|getAppServerBaseDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|tmpDataDir
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|setDataDirectory
argument_list|(
name|dataDirectory
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|repoBaseDir
init|=
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getRepositoryBaseDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repoBaseDir
argument_list|)
condition|)
block|{
name|repositoryBaseDirectory
operator|=
name|dataDirectory
operator|.
name|resolve
argument_list|(
literal|"repositories"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|tmpRepoBaseDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|repoBaseDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpRepoBaseDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|repositoryBaseDirectory
operator|=
name|tmpRepoBaseDir
expr_stmt|;
block|}
else|else
block|{
name|dataDirectory
operator|.
name|resolve
argument_list|(
name|tmpRepoBaseDir
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|remoteRepoBaseDir
init|=
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getRemoteRepositoryBaseDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|remoteRepoBaseDir
argument_list|)
condition|)
block|{
name|remoteRepositoryBaseDirectory
operator|=
name|dataDirectory
operator|.
name|resolve
argument_list|(
literal|"remotes"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|tmpRemoteRepoDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|remoteRepoBaseDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpRemoteRepoDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|remoteRepositoryBaseDirectory
operator|=
name|tmpRemoteRepoDir
expr_stmt|;
block|}
else|else
block|{
name|dataDirectory
operator|.
name|resolve
argument_list|(
name|tmpRemoteRepoDir
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|repositoryGroupBaseDir
init|=
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getRepositoryGroupBaseDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryGroupBaseDir
argument_list|)
condition|)
block|{
name|repositoryGroupBaseDirectory
operator|=
name|dataDirectory
operator|.
name|resolve
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|tmpGroupDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|repositoryGroupBaseDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpGroupDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|repositoryGroupBaseDirectory
operator|=
name|tmpGroupDir
expr_stmt|;
block|}
else|else
block|{
name|dataDirectory
operator|.
name|resolve
argument_list|(
name|tmpGroupDir
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|getRepositoryGroups
argument_list|()
expr_stmt|;
name|config
operator|.
name|getRepositoryGroupsAsMap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|config
operator|.
name|getRemoteRepositories
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepos
init|=
name|config
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repo
range|:
name|remoteRepos
control|)
block|{
comment|// [MRM-582] Remote Repositories with empty<username> and<password> fields shouldn't be created in configuration.
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repo
operator|.
name|getUsername
argument_list|()
argument_list|)
condition|)
block|{
name|repo
operator|.
name|setUsername
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repo
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|repo
operator|.
name|setPassword
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Fix Proxy Connector Settings.
comment|// Create a copy of the list to read from (to prevent concurrent modification exceptions)
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|config
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
comment|// Remove the old connector list.
name|config
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|connector
range|:
name|proxyConnectorList
control|)
block|{
comment|// Fix policies
name|boolean
name|connectorValid
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|policies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Make copy of policies
name|policies
operator|.
name|putAll
argument_list|(
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clear out policies
name|connector
operator|.
name|getPolicies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Work thru policies. cleaning them up.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|policyId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|setting
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Upgrade old policy settings.
if|if
condition|(
literal|"releases"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
operator|||
literal|"snapshots"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"ignored"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|AbstractUpdatePolicy
operator|.
name|ALWAYS
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"disabled"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|AbstractUpdatePolicy
operator|.
name|NEVER
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"cache-failures"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"ignored"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|CachedFailuresPolicy
operator|.
name|NO
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"cached"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|CachedFailuresPolicy
operator|.
name|YES
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"checksum"
operator|.
name|equals
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"ignored"
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
name|setting
operator|=
name|ChecksumPolicy
operator|.
name|IGNORE
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Validate existance of policy key.
name|connector
operator|.
name|addPolicy
argument_list|(
name|policyId
argument_list|,
name|setting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectorValid
condition|)
block|{
name|config
operator|.
name|addProxyConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Normalize the order fields in the proxy connectors.
name|Map
argument_list|<
name|String
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
name|config
operator|.
name|getProxyConnectorAsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|connectors
range|:
name|proxyConnectorMap
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Sort connectors by order field.
name|Collections
operator|.
name|sort
argument_list|(
name|connectors
argument_list|,
name|ProxyConnectorConfigurationOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normalize the order field values.
name|int
name|order
init|=
literal|1
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|connector
range|:
name|connectors
control|)
block|{
name|connector
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|defaultLocale
operator|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getDefaultLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|languagePriorities
operator|=
name|Locale
operator|.
name|LanguageRange
operator|.
name|parse
argument_list|(
name|config
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getLanguageRange
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
comment|/*      * Updates the checkpath list for repositories.      *      * We are replacing existing ones and adding new ones. This allows to update the list with new releases.      *      * We are also updating existing remote repositories, if they exist already.      *      * This update method should only be called, if the config version changes to avoid overwriting      * user repository settings all the time.      */
specifier|private
name|void
name|updateCheckPathDefaults
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|Registry
name|defaultConfiguration
parameter_list|)
block|{
name|List
argument_list|<
name|RepositoryCheckPath
argument_list|>
name|existingCheckPathList
init|=
name|config
operator|.
name|getArchivaDefaultConfiguration
argument_list|()
operator|.
name|getDefaultCheckPaths
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|RepositoryCheckPath
argument_list|>
name|existingCheckPaths
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|RepositoryCheckPath
argument_list|>
name|newCheckPaths
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RepositoryCheckPath
name|path
range|:
name|config
operator|.
name|getArchivaDefaultConfiguration
argument_list|()
operator|.
name|getDefaultCheckPaths
argument_list|()
control|)
block|{
name|existingCheckPaths
operator|.
name|put
argument_list|(
name|path
operator|.
name|getUrl
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|List
name|defaultCheckPathsSubsets
init|=
name|defaultConfiguration
operator|.
name|getSubsetList
argument_list|(
literal|"archivaDefaultConfiguration.defaultCheckPaths.defaultCheckPath"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|defaultCheckPathsSubsets
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryCheckPath
name|v
init|=
name|readRepositoryCheckPath
argument_list|(
operator|(
name|Registry
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCheckPaths
operator|.
name|containsKey
argument_list|(
name|v
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|existingCheckPathList
operator|.
name|remove
argument_list|(
name|existingCheckPaths
operator|.
name|get
argument_list|(
name|v
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|existingCheckPathList
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|newCheckPaths
operator|.
name|put
argument_list|(
name|v
operator|.
name|getUrl
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|// Remote repositories update
for|for
control|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
range|:
name|config
operator|.
name|getRemoteRepositories
argument_list|()
control|)
block|{
name|String
name|url
init|=
name|remoteRepositoryConfiguration
operator|.
name|getUrl
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCheckPaths
operator|.
name|containsKey
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|String
name|currentPath
init|=
name|remoteRepositoryConfiguration
operator|.
name|getCheckPath
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|newCheckPaths
operator|.
name|get
argument_list|(
name|url
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Updating connection check path for repository {}, from '{}' to '{}'."
argument_list|,
name|remoteRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
name|currentPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setCheckPath
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|RepositoryCheckPath
name|readRepositoryCheckPath
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|RepositoryCheckPath
name|value
init|=
operator|new
name|RepositoryCheckPath
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|registry
operator|.
name|getString
argument_list|(
literal|"url"
argument_list|,
name|value
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
name|value
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|registry
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|,
name|value
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|value
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|private
name|Registry
name|readDefaultConfiguration
parameter_list|()
block|{
comment|// if it contains some old configuration, remove it (Archiva 0.9)
name|registry
operator|.
name|removeSubset
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|addConfigurationFromResource
argument_list|(
literal|"org/apache/archiva/configuration/default-archiva.xml"
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
name|this
operator|.
name|isConfigurationDefaulted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationRuntimeException
argument_list|(
literal|"Fatal error: Unable to find the built-in default configuration and load it into the registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY
argument_list|)
return|;
block|}
comment|/*      * Reads the default only configuration into a special prefix. This allows to check for changes      * of the default configuration.      */
specifier|private
name|Registry
name|readDefaultOnlyConfiguration
parameter_list|()
block|{
name|registry
operator|.
name|removeSubset
argument_list|(
name|KEY_DEFAULT_ONLY
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|addConfigurationFromResource
argument_list|(
literal|"org/apache/archiva/configuration/default-archiva.xml"
argument_list|,
name|KEY_DEFAULT_ONLY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationRuntimeException
argument_list|(
literal|"Fatal error: Unable to find the built-in default configuration and load it into the registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|registry
operator|.
name|getSubset
argument_list|(
name|KEY_DEFAULT_ONLY
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|save
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IndeterminateConfigurationException
throws|,
name|RegistryException
block|{
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
name|Registry
name|baseSection
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
name|baseSection
expr_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
name|createDefaultConfigurationFile
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|baseSection
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|baseSection
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|boolean
name|foundList
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundList
condition|;
control|)
block|{
name|String
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// a little aggressive with the repositoryScanning and databaseScanning - should be no need to split
comment|// that configuration
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositories"
argument_list|)
comment|//
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"proxyConnectors"
argument_list|)
comment|//
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"networkProxies"
argument_list|)
comment|//
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositoryScanning"
argument_list|)
comment|//
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"remoteRepositories"
argument_list|)
comment|//
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"managedRepositories"
argument_list|)
comment|//
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"repositoryGroups"
argument_list|)
condition|)
comment|//
block|{
name|foundList
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundList
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IndeterminateConfigurationException
argument_list|(
literal|"Configuration can not be saved when it is loaded from two sources"
argument_list|)
throw|;
block|}
block|}
comment|// escape all cron expressions to handle ','
name|escapeCronExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// [MRM-661] Due to a bug in the modello registry writer, we need to take these out by hand. They'll be put back by the writer.
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"managedRepositories"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"remoteRepositories"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"proxyConnectors"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getNetworkProxies
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"networkProxies"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"legacyArtifactPaths"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"repositoryGroups"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"repositoryScanning.knownContentConsumers"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"repositoryScanning.invalidContentConsumers"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeSubset
argument_list|(
literal|"archivaRuntimeConfiguration.defaultCheckPaths"
argument_list|)
expr_stmt|;
block|}
operator|new
name|ConfigurationRegistryWriter
argument_list|()
operator|.
name|write
argument_list|(
name|configuration
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|section
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|configuration
operator|=
name|unescapeExpressions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|isConfigurationDefaulted
operator|=
literal|false
expr_stmt|;
name|triggerEvent
argument_list|(
name|ConfigurationEvent
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|escapeCronExpressions
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
for|for
control|(
name|ManagedRepositoryConfiguration
name|c
range|:
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
control|)
block|{
name|c
operator|.
name|setRefreshCronExpression
argument_list|(
name|escapeCronExpression
argument_list|(
name|c
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Registry
name|createDefaultConfigurationFile
parameter_list|()
throws|throws
name|RegistryException
block|{
comment|// TODO: may not be needed under commons-configuration 1.4 - check
name|String
name|contents
init|=
literal|"<configuration />"
decl_stmt|;
name|String
name|fileLocation
init|=
name|userConfigFilename
decl_stmt|;
if|if
condition|(
operator|!
name|writeFile
argument_list|(
literal|"user configuration"
argument_list|,
name|userConfigFilename
argument_list|,
name|contents
argument_list|)
condition|)
block|{
name|fileLocation
operator|=
name|altConfigFilename
expr_stmt|;
if|if
condition|(
operator|!
name|writeFile
argument_list|(
literal|"alternative configuration"
argument_list|,
name|altConfigFilename
argument_list|,
name|contents
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Unable to create configuration file in either user ["
operator|+
name|userConfigFilename
operator|+
literal|"] or alternative ["
operator|+
name|altConfigFilename
operator|+
literal|"] locations on disk, usually happens when not allowed to write to those locations."
argument_list|)
throw|;
block|}
block|}
comment|// olamy hackish I know :-)
name|contents
operator|=
literal|"<configuration><xml fileName=\""
operator|+
name|fileLocation
operator|+
literal|"\" config-forceCreate=\"true\" config-name=\"org.apache.archiva.user\"/>"
operator|+
literal|"</configuration>"
expr_stmt|;
operator|(
operator|(
name|CommonsConfigurationRegistry
operator|)
name|registry
operator|)
operator|.
name|setProperties
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|registry
operator|.
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|RegistryListener
name|regListener
range|:
name|registryListeners
control|)
block|{
name|addRegistryChangeListener
argument_list|(
name|regListener
argument_list|)
expr_stmt|;
block|}
name|triggerEvent
argument_list|(
name|ConfigurationEvent
operator|.
name|SAVED
argument_list|)
expr_stmt|;
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
return|return
name|section
operator|==
literal|null
condition|?
operator|new
name|CommonsConfigurationRegistry
argument_list|(
operator|new
name|BaseConfiguration
argument_list|()
argument_list|)
else|:
name|section
return|;
block|}
specifier|private
name|boolean
name|writeFile
parameter_list|(
name|String
name|filetype
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contents
parameter_list|)
block|{
return|return
name|writeFile
argument_list|(
name|filetype
argument_list|,
name|path
argument_list|,
name|contents
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Attempts to write the contents to a file, if an IOException occurs, return false.      *<p/>      * The file will be created if the directory to the file exists, otherwise this will return false.      *      * @param filetype the filetype (freeform text) to use in logging messages when failure to write.      * @param path     the path to write to.      * @param contents the contents to write.      * @return true if write successful.      */
specifier|private
name|boolean
name|writeFile
parameter_list|(
name|String
name|filetype
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contents
parameter_list|,
name|boolean
name|createDirs
parameter_list|)
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Check parent directory (if it is declared)
specifier|final
name|Path
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
comment|// Check that directory exists
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
operator|&&
name|createDirs
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|parent
argument_list|)
condition|)
block|{
comment|// Directory to file must exist for file to be created
return|return
literal|false
return|;
block|}
block|}
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|,
name|contents
argument_list|,
name|FILE_ENCODING
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create {} file: {}"
argument_list|,
name|filetype
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|triggerEvent
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|ConfigurationEvent
name|evt
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigurationListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|configurationEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|ConfigurationListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|ConfigurationListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|addRegistryChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// keep track for later
name|registryListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRegistryChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|addChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|section
operator|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|addChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeChangeListener
parameter_list|(
name|RegistryListener
name|listener
parameter_list|)
block|{
name|boolean
name|removed
init|=
name|registryListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"RegistryListener: '{}' removed {}"
argument_list|,
name|listener
argument_list|,
name|removed
argument_list|)
expr_stmt|;
name|Registry
name|section
init|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|section
operator|=
name|registry
operator|.
name|getSection
argument_list|(
name|KEY
operator|+
literal|".base"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|removeChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
comment|// Resolve expressions in the userConfigFilename and altConfigFilename
try|try
block|{
name|ExpressionEvaluator
name|expressionEvaluator
init|=
operator|new
name|DefaultExpressionEvaluator
argument_list|()
decl_stmt|;
name|expressionEvaluator
operator|.
name|addExpressionSource
argument_list|(
operator|new
name|SystemPropertyExpressionSource
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|userConfigFileNameSysProps
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|USER_CONFIG_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|userConfigFileNameSysProps
argument_list|)
condition|)
block|{
name|userConfigFilename
operator|=
name|userConfigFileNameSysProps
expr_stmt|;
block|}
else|else
block|{
name|String
name|userConfigFileNameEnv
init|=
name|System
operator|.
name|getenv
argument_list|(
name|USER_CONFIG_ENVVAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|userConfigFileNameEnv
argument_list|)
condition|)
block|{
name|userConfigFilename
operator|=
name|userConfigFileNameEnv
expr_stmt|;
block|}
else|else
block|{
name|userConfigFilename
operator|=
name|expressionEvaluator
operator|.
name|expand
argument_list|(
name|userConfigFilename
argument_list|)
expr_stmt|;
block|}
block|}
name|altConfigFilename
operator|=
name|expressionEvaluator
operator|.
name|expand
argument_list|(
name|altConfigFilename
argument_list|)
expr_stmt|;
name|loadConfiguration
argument_list|()
expr_stmt|;
name|handleUpgradeConfiguration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
decl||
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed during upgrade from previous version"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EvaluatorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to evaluate expressions found in "
operator|+
literal|"userConfigFilename or altConfigFilename."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|registry
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Handle upgrade to newer version      */
specifier|private
name|void
name|handleUpgradeConfiguration
parameter_list|()
throws|throws
name|RegistryException
throws|,
name|IndeterminateConfigurationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbConsumers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"update-db-artifact"
argument_list|,
literal|"update-db-repository-metadata"
argument_list|)
decl_stmt|;
comment|// remove database consumers if here
name|List
argument_list|<
name|String
argument_list|>
name|intersec
init|=
name|ListUtils
operator|.
name|intersection
argument_list|(
name|dbConsumers
argument_list|,
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intersec
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knowContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|knowContentConsumer
range|:
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dbConsumers
operator|.
name|contains
argument_list|(
name|knowContentConsumer
argument_list|)
condition|)
block|{
name|knowContentConsumers
operator|.
name|add
argument_list|(
name|knowContentConsumer
argument_list|)
expr_stmt|;
block|}
block|}
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|setKnownContentConsumers
argument_list|(
name|knowContentConsumers
argument_list|)
expr_stmt|;
block|}
comment|// ensure create-archiva-metadata is here
if|if
condition|(
operator|!
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"create-archiva-metadata"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knowContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
name|knowContentConsumers
operator|.
name|add
argument_list|(
literal|"create-archiva-metadata"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|setKnownContentConsumers
argument_list|(
name|knowContentConsumers
argument_list|)
expr_stmt|;
block|}
comment|// ensure duplicate-artifacts is here
if|if
condition|(
operator|!
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"duplicate-artifacts"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|knowContentConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|getKnownContentConsumers
argument_list|()
argument_list|)
decl_stmt|;
name|knowContentConsumers
operator|.
name|add
argument_list|(
literal|"duplicate-artifacts"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|getRepositoryScanning
argument_list|()
operator|.
name|setKnownContentConsumers
argument_list|(
name|knowContentConsumers
argument_list|)
expr_stmt|;
block|}
name|Registry
name|defaultOnlyConfiguration
init|=
name|readDefaultOnlyConfiguration
argument_list|()
decl_stmt|;
comment|// Currently we check only for configuration version change, not certain version numbers.
if|if
condition|(
name|hasConfigVersionChanged
argument_list|(
name|configuration
argument_list|,
name|defaultOnlyConfiguration
argument_list|)
condition|)
block|{
name|updateCheckPathDefaults
argument_list|(
name|configuration
argument_list|,
name|defaultOnlyConfiguration
argument_list|)
expr_stmt|;
name|String
name|newVersion
init|=
name|defaultOnlyConfiguration
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVersion
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndeterminateConfigurationException
argument_list|(
literal|"The default configuration has no version information!"
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|setVersion
argument_list|(
name|newVersion
argument_list|)
expr_stmt|;
try|try
block|{
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occured during configuration update to new version: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occured during configuration update to new version: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|registry
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getDefaultLocale
parameter_list|()
block|{
return|return
name|defaultLocale
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Locale
operator|.
name|LanguageRange
argument_list|>
name|getLanguagePriorities
parameter_list|()
block|{
return|return
name|languagePriorities
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getAppServerBaseDir
parameter_list|()
block|{
name|String
name|basePath
init|=
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|basePath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getRepositoryBaseDir
parameter_list|()
block|{
if|if
condition|(
name|repositoryBaseDirectory
operator|==
literal|null
condition|)
block|{
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|repositoryBaseDirectory
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getRemoteRepositoryBaseDir
parameter_list|()
block|{
if|if
condition|(
name|remoteRepositoryBaseDirectory
operator|==
literal|null
condition|)
block|{
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|remoteRepositoryBaseDirectory
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getRepositoryGroupBaseDir
parameter_list|()
block|{
if|if
condition|(
name|repositoryGroupBaseDirectory
operator|==
literal|null
condition|)
block|{
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|repositoryGroupBaseDirectory
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getDataDirectory
parameter_list|()
block|{
if|if
condition|(
name|dataDirectory
operator|==
literal|null
condition|)
block|{
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|dataDirectory
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|// nothing to do here
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
name|configuration
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataDirectory
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|repositoryBaseDirectory
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|String
name|removeExpressions
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|String
name|value
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|directory
argument_list|,
literal|"${appserver.base}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|,
literal|"${appserver.base}"
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|value
argument_list|,
literal|"${appserver.home}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.home"
argument_list|,
literal|"${appserver.home}"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|private
name|String
name|unescapeCronExpression
parameter_list|(
name|String
name|cronExpression
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|cronExpression
argument_list|,
literal|"\\,"
argument_list|,
literal|","
argument_list|)
return|;
block|}
specifier|private
name|String
name|escapeCronExpression
parameter_list|(
name|String
name|cronExpression
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|replace
argument_list|(
name|cronExpression
argument_list|,
literal|","
argument_list|,
literal|"\\,"
argument_list|)
return|;
block|}
specifier|private
name|Configuration
name|unescapeExpressions
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|// TODO: for commons-configuration 1.3 only
for|for
control|(
name|ManagedRepositoryConfiguration
name|c
range|:
name|config
operator|.
name|getManagedRepositories
argument_list|()
control|)
block|{
name|c
operator|.
name|setLocation
argument_list|(
name|removeExpressions
argument_list|(
name|c
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRefreshCronExpression
argument_list|(
name|unescapeCronExpression
argument_list|(
name|c
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
specifier|private
name|Configuration
name|checkRepositoryLocations
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|// additional check for [MRM-789], ensure that the location of the default repositories
comment|// are not installed in the server installation
for|for
control|(
name|ManagedRepositoryConfiguration
name|repo
range|:
operator|(
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
operator|)
name|config
operator|.
name|getManagedRepositories
argument_list|()
control|)
block|{
name|String
name|repoPath
init|=
name|repo
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|repoLocation
init|=
name|Paths
operator|.
name|get
argument_list|(
name|repoPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|repoLocation
argument_list|)
operator|&&
name|Files
operator|.
name|isDirectory
argument_list|(
name|repoLocation
argument_list|)
operator|&&
operator|!
name|repoPath
operator|.
name|endsWith
argument_list|(
literal|"data/repositories/"
operator|+
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|repo
operator|.
name|setLocation
argument_list|(
name|repoPath
operator|+
literal|"/data/repositories/"
operator|+
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|config
return|;
block|}
specifier|public
name|String
name|getUserConfigFilename
parameter_list|()
block|{
return|return
name|userConfigFilename
return|;
block|}
specifier|public
name|String
name|getAltConfigFilename
parameter_list|()
block|{
return|return
name|altConfigFilename
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDefaulted
parameter_list|()
block|{
return|return
name|this
operator|.
name|isConfigurationDefaulted
return|;
block|}
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
specifier|public
name|void
name|setRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
specifier|public
name|void
name|setUserConfigFilename
parameter_list|(
name|String
name|userConfigFilename
parameter_list|)
block|{
name|this
operator|.
name|userConfigFilename
operator|=
name|userConfigFilename
expr_stmt|;
block|}
specifier|public
name|void
name|setAltConfigFilename
parameter_list|(
name|String
name|altConfigFilename
parameter_list|)
block|{
name|this
operator|.
name|altConfigFilename
operator|=
name|altConfigFilename
expr_stmt|;
block|}
block|}
end_class

end_unit

