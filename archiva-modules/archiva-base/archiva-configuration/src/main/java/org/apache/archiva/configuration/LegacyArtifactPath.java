begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Class LegacyArtifactPath.  *   * @version $Revision$ $Date$  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
specifier|public
class|class
name|LegacyArtifactPath
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
comment|//--------------------------/
comment|//- Class/Member Variables -/
comment|//--------------------------/
comment|/**      *       *             The legacy path.      *                 */
specifier|private
name|String
name|path
decl_stmt|;
comment|/**      *       *             The artifact reference, as " [groupId] :      * [artifactId] : [version] : [classifier] : [type] ".      *                 */
specifier|private
name|String
name|artifact
decl_stmt|;
comment|//-----------/
comment|//- Methods -/
comment|//-----------/
comment|/**      * Get the artifact reference, as " [groupId] : [artifactId] :      * [version] : [classifier] : [type] ".      *       * @return String      */
specifier|public
name|String
name|getArtifact
parameter_list|()
block|{
return|return
name|this
operator|.
name|artifact
return|;
block|}
comment|//-- String getArtifact()
comment|/**      * Get the legacy path.      *       * @return String      */
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
comment|//-- String getPath()
comment|/**      * Set the artifact reference, as " [groupId] : [artifactId] :      * [version] : [classifier] : [type] ".      *       * @param artifact      */
specifier|public
name|void
name|setArtifact
parameter_list|(
name|String
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
comment|//-- void setArtifact( String )
comment|/**      * Set the legacy path.      *       * @param path      */
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|//-- void setPath( String )
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|equals
argument_list|(
name|this
operator|.
name|path
argument_list|)
return|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|2
index|]
return|;
block|}
specifier|public
name|String
name|getClassifier
parameter_list|()
block|{
name|String
name|classifier
init|=
name|artifact
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|3
index|]
decl_stmt|;
return|return
name|classifier
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|classifier
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|4
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LegacyArtifactPath
name|that
init|=
operator|(
name|LegacyArtifactPath
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|that
operator|.
name|path
argument_list|)
else|:
name|that
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|!=
literal|null
condition|?
literal|37
operator|+
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

