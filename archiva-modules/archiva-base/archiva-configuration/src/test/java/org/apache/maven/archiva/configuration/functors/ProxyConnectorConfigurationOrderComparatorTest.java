begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * ProxyConnectorConfigurationOrderComparatorTest   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ProxyConnectorConfigurationOrderComparatorTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testSortOfAllZeros
parameter_list|()
block|{
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxies
init|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"corporate"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"snapshots"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"3rdparty"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"sandbox"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|proxies
argument_list|,
name|ProxyConnectorConfigurationOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertProxyOrder
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"corporate"
block|,
literal|"snapshots"
block|,
literal|"3rdparty"
block|,
literal|"sandbox"
block|}
argument_list|,
name|proxies
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSortNormal
parameter_list|()
block|{
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxies
init|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"corporate"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"snapshots"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"3rdparty"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"sandbox"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|proxies
argument_list|,
operator|new
name|ProxyConnectorConfigurationOrderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertProxyOrder
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"snapshots"
block|,
literal|"3rdparty"
block|,
literal|"corporate"
block|,
literal|"sandbox"
block|}
argument_list|,
name|proxies
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSortPartial
parameter_list|()
block|{
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxies
init|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"corporate"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"snapshots"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"3rdparty"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
name|createConnector
argument_list|(
literal|"sandbox"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|proxies
argument_list|,
operator|new
name|ProxyConnectorConfigurationOrderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertProxyOrder
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"3rdparty"
block|,
literal|"corporate"
block|,
literal|"snapshots"
block|,
literal|"sandbox"
block|}
argument_list|,
name|proxies
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertProxyOrder
parameter_list|(
name|String
index|[]
name|ids
parameter_list|,
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxies
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Proxies.size() == ids.length"
argument_list|,
name|ids
operator|.
name|length
argument_list|,
name|proxies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|orderFailedAt
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProxyId
argument_list|()
argument_list|)
condition|)
block|{
name|orderFailedAt
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|orderFailedAt
operator|>=
literal|0
condition|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Failed expected order of the proxies<"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|ids
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|">, actual<"
argument_list|)
expr_stmt|;
name|boolean
name|needsComma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxy
range|:
name|proxies
control|)
block|{
if|if
condition|(
name|needsComma
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|needsComma
operator|=
literal|true
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"> failure at index<"
argument_list|)
operator|.
name|append
argument_list|(
name|orderFailedAt
argument_list|)
operator|.
name|append
argument_list|(
literal|">."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ProxyConnectorConfiguration
name|createConnector
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|ProxyConnectorConfiguration
name|proxy
init|=
operator|new
name|ProxyConnectorConfiguration
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|setProxyId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceRepoId
argument_list|(
name|id
operator|+
literal|"_m"
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setTargetRepoId
argument_list|(
name|id
operator|+
literal|"_r"
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
block|}
end_class

end_unit

