begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|maven
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|RemoteIndexFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index_shaded
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Maven implementation of index manager  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"archivaIndexManager#maven"
argument_list|)
specifier|public
class|class
name|MavenIndexManager
implements|implements
name|ArchivaIndexManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MavenIndexManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Indexer
name|indexer
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|IndexCreator
argument_list|>
name|indexCreators
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|pack
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|scan
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|boolean
name|update
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|URI
name|remoteUpdateUri
parameter_list|,
name|boolean
name|fullUpdate
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|addArtifactToIndex
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|ArtifactReference
name|artifactReference
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifactFromIndex
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|ArtifactReference
name|artifactReference
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsRepository
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaIndexingContext
name|createContext
parameter_list|(
name|Repository
name|remoteRepository
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexingContext
name|mvnCtx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteRepository
operator|instanceof
name|RemoteRepository
condition|)
block|{
name|mvnCtx
operator|=
name|createRemoteContext
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|remoteRepository
operator|instanceof
name|ManagedRepository
condition|)
block|{
comment|// TODO: Implement managed repository index creation
name|mvnCtx
operator|=
literal|null
expr_stmt|;
block|}
name|MavenIndexContext
name|context
init|=
operator|new
name|MavenIndexContext
argument_list|(
name|remoteRepository
argument_list|,
name|mvnCtx
argument_list|)
decl_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|IndexingContext
name|createRemoteContext
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appServerBase
init|=
name|archivaConfiguration
operator|.
name|getAppServerBaseDir
argument_list|()
decl_stmt|;
name|String
name|contextKey
init|=
literal|"remote-"
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// create remote repository path
name|Path
name|repoDir
init|=
name|appServerBase
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"remotes"
argument_list|)
operator|.
name|resolve
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
block|}
name|Path
name|indexDirectory
init|=
literal|null
decl_stmt|;
comment|// is there configured indexDirectory ?
if|if
condition|(
name|remoteRepository
operator|.
name|supportsFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|RemoteIndexFeature
name|rif
init|=
name|remoteRepository
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|indexDirectory
operator|=
name|PathUtil
operator|.
name|getPathFromUri
argument_list|(
name|rif
operator|.
name|getIndexUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indexDirectory
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|indexDirectory
operator|=
name|repoDir
operator|.
name|resolve
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
comment|// if not configured use a default value
if|if
condition|(
name|indexDirectory
operator|==
literal|null
condition|)
block|{
name|indexDirectory
operator|=
name|repoDir
operator|.
name|resolve
argument_list|(
literal|".index"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|indexer
operator|.
name|createIndexingContext
argument_list|(
name|contextKey
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|repoDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|indexDirectory
operator|.
name|toFile
argument_list|()
argument_list|,
name|remoteRepository
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|remoteRepository
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|calculateIndexRemoteUrl
argument_list|(
name|remoteRepository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|rif
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|indexCreators
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// existing index with an old lucene format so we need to delete it!!!
comment|// delete it first then recreate it.
name|log
operator|.
name|warn
argument_list|(
literal|"the index of repository {} is too old we have to delete and recreate it"
argument_list|,
comment|//
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
return|return
name|indexer
operator|.
name|createIndexingContext
argument_list|(
name|contextKey
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|repoDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|indexDirectory
operator|.
name|toFile
argument_list|()
argument_list|,
name|remoteRepository
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|remoteRepository
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|calculateIndexRemoteUrl
argument_list|(
name|remoteRepository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|rif
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|indexCreators
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No remote index defined"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|calculateIndexRemoteUrl
parameter_list|(
name|URI
name|baseUri
parameter_list|,
name|RemoteIndexFeature
name|rif
parameter_list|)
block|{
if|if
condition|(
name|rif
operator|.
name|getIndexUri
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|baseUri
operator|.
name|resolve
argument_list|(
literal|".index"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|baseUri
operator|.
name|resolve
argument_list|(
name|rif
operator|.
name|getIndexUri
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

