begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|AndPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|NotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|EdgeExactScopePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|EdgeFromPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|NodeFromParentPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|NodePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|ToKeyTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * AbstractDependencyGraphFactoryTestCase   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDependencyGraphFactoryTestCase
extends|extends
name|PlexusTestCase
block|{
specifier|public
class|class
name|ExpectedEdge
block|{
specifier|public
name|String
name|from
decl_stmt|;
specifier|public
name|String
name|to
decl_stmt|;
specifier|public
name|ExpectedEdge
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|GraphEdgePredicate
implements|implements
name|Predicate
block|{
specifier|private
name|String
name|edgeFrom
decl_stmt|;
specifier|private
name|String
name|edgeTo
decl_stmt|;
specifier|public
name|GraphEdgePredicate
parameter_list|(
name|String
name|edgeFrom
parameter_list|,
name|String
name|edgeTo
parameter_list|)
block|{
name|this
operator|.
name|edgeFrom
operator|=
name|edgeFrom
expr_stmt|;
name|this
operator|.
name|edgeTo
operator|=
name|edgeTo
expr_stmt|;
block|}
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|DependencyGraphEdge
condition|)
block|{
name|DependencyGraphEdge
name|edge
init|=
operator|(
name|DependencyGraphEdge
operator|)
name|object
decl_stmt|;
name|String
name|actualFrom
init|=
name|ArtifactReference
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeFrom
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|actualTo
init|=
name|ArtifactReference
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
decl_stmt|;
name|satisfies
operator|=
operator|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|edgeFrom
argument_list|,
name|actualFrom
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|edgeTo
argument_list|,
name|actualTo
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
specifier|protected
name|void
name|assertDirectNodes
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|,
name|List
name|expectedNodes
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|Iterator
name|it
decl_stmt|;
name|DependencyGraphNode
name|rootNode
init|=
name|graph
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|List
name|rootEdges
init|=
name|graph
operator|.
name|getEdgesFrom
argument_list|(
name|rootNode
argument_list|)
decl_stmt|;
name|List
name|actualEdges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Predicate
name|directDep
init|=
name|NotPredicate
operator|.
name|getInstance
argument_list|(
operator|new
name|NodeFromParentPredicate
argument_list|()
argument_list|)
decl_stmt|;
name|Predicate
name|scopedDirectDeps
init|=
name|AndPredicate
operator|.
name|getInstance
argument_list|(
operator|new
name|EdgeExactScopePredicate
argument_list|(
name|scope
argument_list|)
argument_list|,
name|directDep
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|rootEdges
argument_list|,
name|scopedDirectDeps
argument_list|,
name|actualEdges
argument_list|)
expr_stmt|;
comment|// CollectionUtils.select( rootEdges, new EdgeExactScopePredicate( scope ), actualEdges );
if|if
condition|(
name|expectedNodes
operator|.
name|size
argument_list|()
operator|!=
name|actualEdges
operator|.
name|size
argument_list|()
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Direct node.count with<"
argument_list|)
operator|.
name|append
argument_list|(
name|scope
argument_list|)
operator|.
name|append
argument_list|(
literal|"> edges from ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|rootNode
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" expected:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|expectedNodes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> but was:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|actualEdges
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|actualEdges
argument_list|,
operator|new
name|ToKeyTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|missingActualKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|actualEdges
argument_list|,
name|expectedNodes
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingActualKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Actual) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|missingExpectedKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|expectedNodes
argument_list|,
name|actualEdges
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingExpectedKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Expected) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|actualEdges
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DependencyGraphEdge
name|edge
init|=
operator|(
name|DependencyGraphEdge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|actualKey
init|=
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Direct<"
operator|+
name|scope
operator|+
literal|"> node To ["
operator|+
name|actualKey
operator|+
literal|"] exists in expectedNodes."
argument_list|,
name|expectedNodes
operator|.
name|contains
argument_list|(
name|actualKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertEdges
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|,
name|List
name|expectedEdges
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Graph.edges should never be null."
argument_list|,
name|graph
operator|.
name|getEdges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Graph.edges.size()"
argument_list|,
name|expectedEdges
operator|.
name|size
argument_list|()
argument_list|,
name|graph
operator|.
name|getEdges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|expectedEdges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExpectedEdge
name|expectedEdge
init|=
operator|(
name|ExpectedEdge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Predicate
name|edgePredicate
init|=
operator|new
name|GraphEdgePredicate
argument_list|(
name|expectedEdge
operator|.
name|from
argument_list|,
name|expectedEdge
operator|.
name|to
argument_list|)
decl_stmt|;
name|DependencyGraphEdge
name|edge
init|=
operator|(
name|DependencyGraphEdge
operator|)
name|CollectionUtils
operator|.
name|find
argument_list|(
name|graph
operator|.
name|getEdges
argument_list|()
argument_list|,
name|edgePredicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|edge
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to find expected edge from:<"
operator|+
name|expectedEdge
operator|.
name|from
operator|+
literal|"> to:<"
operator|+
name|expectedEdge
operator|.
name|to
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|assertGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|,
name|String
name|rootRefKey
parameter_list|,
name|List
name|expectedNodeKeys
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Graph.nodes should never be null."
argument_list|,
name|graph
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Graph.nodes.size() should always be 1 or better."
argument_list|,
name|graph
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|ArtifactReference
name|rootRef
init|=
name|graph
operator|.
name|getRootNode
argument_list|()
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|StringBuffer
name|actualRootRef
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|actualRootRef
operator|.
name|append
argument_list|(
name|rootRef
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|actualRootRef
operator|.
name|append
argument_list|(
name|rootRef
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|actualRootRef
operator|.
name|append
argument_list|(
name|rootRef
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Graph.root"
argument_list|,
name|rootRefKey
argument_list|,
name|actualRootRef
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
decl_stmt|;
name|List
name|actualNodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Predicate
name|notRootNode
init|=
name|NotPredicate
operator|.
name|getInstance
argument_list|(
operator|new
name|NodePredicate
argument_list|(
name|graph
operator|.
name|getRootNode
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|graph
operator|.
name|getNodes
argument_list|()
argument_list|,
name|notRootNode
argument_list|,
name|actualNodes
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedNodeKeys
operator|.
name|size
argument_list|()
operator|!=
name|actualNodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"node.count expected:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|expectedNodeKeys
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> but was:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|actualNodes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|actualNodes
argument_list|,
operator|new
name|ToKeyTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|missingActualKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|actualNodes
argument_list|,
name|expectedNodeKeys
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingActualKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Actual) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|Collection
name|missingExpectedKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|expectedNodeKeys
argument_list|,
name|actualNodes
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingExpectedKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Expected) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|fail
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         it = actualNodes.iterator();         while ( it.hasNext() )         {             DependencyGraphNode node = (DependencyGraphNode) it.next();             assertNotNull( "Artifact reference in node should not be null.", node.getArtifact() );             String key = ArtifactReference.toKey( node.getArtifact() );             assertTrue( "Artifact reference [" + key + "] should be in expectedNodeKeys.", expectedNodeKeys                 .contains( key ) );         }         */
block|}
specifier|protected
name|void
name|assertNodes
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|,
name|List
name|expectedNodeKeys
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Graph.nodes should never be null."
argument_list|,
name|graph
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Graph.nodes.size() should always be 1 or better."
argument_list|,
name|graph
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
comment|// assertEquals( "Graph.nodes.size()", expectedNodeKeys.size(), graph.getNodes().size() );
name|Iterator
name|it
decl_stmt|;
name|List
name|actualNodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|actualNodes
operator|.
name|addAll
argument_list|(
name|graph
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedNodeKeys
operator|.
name|size
argument_list|()
operator|!=
name|actualNodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"node.count expected:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|expectedNodeKeys
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> but was:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|actualNodes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|actualNodes
argument_list|,
operator|new
name|ToKeyTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|missingActualKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|actualNodes
argument_list|,
name|expectedNodeKeys
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingActualKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Actual) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|missingExpectedKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|expectedNodeKeys
argument_list|,
name|actualNodes
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingExpectedKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Expected) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|graph
operator|.
name|getNodes
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DependencyGraphNode
name|node
init|=
operator|(
name|DependencyGraphNode
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Artifact reference in node should not be null."
argument_list|,
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|ArtifactReference
operator|.
name|toKey
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Artifact reference ["
operator|+
name|key
operator|+
literal|"] should be in expectedNodeKeys."
argument_list|,
name|expectedNodeKeys
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertRootNode
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|,
name|String
name|expectedKey
parameter_list|)
block|{
name|DependencyGraphNode
name|node
init|=
name|graph
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|actualKey
init|=
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Root Node"
argument_list|,
name|expectedKey
argument_list|,
name|actualKey
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertTransientNodes
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|,
name|List
name|expectedNodes
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|Iterator
name|it
decl_stmt|;
comment|// Gather up the transient nodes from the DependencyGraph.
name|List
name|actualEdges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|DependencyGraphNode
name|rootNode
init|=
name|graph
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Predicate
name|transientDep
init|=
name|NotPredicate
operator|.
name|getInstance
argument_list|(
operator|new
name|EdgeFromPredicate
argument_list|(
name|rootNode
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Predicate
name|edgeByExactScope
init|=
operator|new
name|EdgeExactScopePredicate
argument_list|(
name|scope
argument_list|)
decl_stmt|;
name|Predicate
name|transitiveEdgesByScopePredicate
init|=
name|AndPredicate
operator|.
name|getInstance
argument_list|(
name|transientDep
argument_list|,
name|edgeByExactScope
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|graph
operator|.
name|getEdges
argument_list|()
argument_list|,
name|transitiveEdgesByScopePredicate
argument_list|,
name|actualEdges
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedNodes
operator|.
name|size
argument_list|()
operator|!=
name|actualEdges
operator|.
name|size
argument_list|()
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Transient node.count with<"
argument_list|)
operator|.
name|append
argument_list|(
name|scope
argument_list|)
operator|.
name|append
argument_list|(
literal|"> edges from ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|rootNode
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" expected:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|expectedNodes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> but was:<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|actualEdges
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|transform
argument_list|(
name|actualEdges
argument_list|,
operator|new
name|ToKeyTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|missingActualKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|actualEdges
argument_list|,
name|expectedNodes
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingActualKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Actual) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|missingExpectedKeys
init|=
name|CollectionUtils
operator|.
name|subtract
argument_list|(
name|expectedNodes
argument_list|,
name|actualEdges
argument_list|)
decl_stmt|;
name|it
operator|=
name|missingExpectedKeys
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n (Extra Expected) "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|actualEdges
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DependencyGraphEdge
name|edge
init|=
operator|(
name|DependencyGraphEdge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|actualKey
init|=
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Transient Node To ["
operator|+
name|actualKey
operator|+
literal|"] exists in expectedNodes."
argument_list|,
name|expectedNodes
operator|.
name|contains
argument_list|(
name|actualKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Dependency
name|toDependency
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Dependency key ["
operator|+
name|key
operator|+
literal|"] should be 5 parts."
argument_list|,
literal|5
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setClassifier
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setType
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
specifier|protected
name|ArchivaProjectModel
name|toModel
parameter_list|(
name|String
name|key
parameter_list|,
name|Dependency
name|deps
index|[]
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Dependency key ["
operator|+
name|key
operator|+
literal|"] should be 3 parts."
argument_list|,
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArchivaProjectModel
name|model
init|=
operator|new
name|ArchivaProjectModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|model
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|model
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|model
operator|.
name|setOrigin
argument_list|(
literal|"testcase"
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPackaging
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
if|if
condition|(
name|deps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Dependency
name|dep
init|=
name|deps
index|[
name|i
index|]
decl_stmt|;
name|model
operator|.
name|addDependency
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|model
return|;
block|}
specifier|protected
name|VersionedReference
name|toVersionedReference
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|key
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Versioned Reference ["
operator|+
name|key
operator|+
literal|"] part count."
argument_list|,
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
block|}
end_class

end_unit

