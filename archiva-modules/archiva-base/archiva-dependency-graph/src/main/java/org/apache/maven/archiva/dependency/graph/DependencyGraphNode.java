begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * DependencyGraphNode   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyGraphNode
block|{
comment|/**      * The artifact reference for this node.      */
specifier|private
name|ArtifactReference
name|artifact
decl_stmt|;
comment|/**      * The project level dependency management section for this artifact.      */
specifier|private
name|List
name|dependencyManagement
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The list of excluded groupId:artifactId for this node's sub-nodes.       */
specifier|private
name|Set
name|excludes
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|/**      * Flag indicating that this node has been resolved from disk.      * Initially this is set to false, when the node is added due to a dependency entry in the      * project's pom.      * When the resolver comes through and reads the model for this node, it sets this to true.      */
specifier|private
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
comment|/**      * Flag indicating that this dependency exists because of a parent dependency.      * TODO: move this to DependencyGraphEdge (where it really belongs)      */
specifier|private
name|boolean
name|fromParent
init|=
literal|false
decl_stmt|;
comment|/**      * Booleaning indicating that this node is in conflict with another node in the graph.      * If this is true, that means this node is flagged for removal.      */
specifier|private
name|boolean
name|conflicted
init|=
literal|false
decl_stmt|;
specifier|public
name|DependencyGraphNode
parameter_list|(
name|ArtifactReference
name|artifact
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|void
name|addExclude
parameter_list|(
name|Exclusion
name|exclusion
parameter_list|)
block|{
name|this
operator|.
name|excludes
operator|.
name|add
argument_list|(
name|DependencyGraphKeys
operator|.
name|toManagementKey
argument_list|(
name|exclusion
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|DependencyGraphNode
name|other
init|=
operator|(
name|DependencyGraphNode
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|artifact
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|artifact
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|artifact
operator|.
name|equals
argument_list|(
name|other
operator|.
name|artifact
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|ArtifactReference
name|getArtifact
parameter_list|()
block|{
return|return
name|artifact
return|;
block|}
specifier|public
name|List
name|getDependencyManagement
parameter_list|()
block|{
return|return
name|dependencyManagement
return|;
block|}
specifier|public
name|Set
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|PRIME
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|PRIME
operator|*
name|result
operator|+
operator|(
operator|(
name|artifact
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|artifact
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isConflicted
parameter_list|()
block|{
return|return
name|conflicted
return|;
block|}
specifier|public
name|boolean
name|isResolved
parameter_list|()
block|{
return|return
name|resolved
return|;
block|}
specifier|public
name|void
name|addDependencyManagement
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
name|this
operator|.
name|dependencyManagement
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setArtifact
parameter_list|(
name|ArtifactReference
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|void
name|setConflicted
parameter_list|(
name|boolean
name|conflicted
parameter_list|)
block|{
name|this
operator|.
name|conflicted
operator|=
name|conflicted
expr_stmt|;
block|}
specifier|public
name|void
name|setDependencyManagement
parameter_list|(
name|List
name|dependencyManagement
parameter_list|)
block|{
name|this
operator|.
name|dependencyManagement
operator|=
name|dependencyManagement
expr_stmt|;
block|}
specifier|public
name|void
name|setExcludes
parameter_list|(
name|Set
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
specifier|public
name|void
name|setResolved
parameter_list|(
name|boolean
name|resolved
parameter_list|)
block|{
name|this
operator|.
name|resolved
operator|=
name|resolved
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isFromParent
parameter_list|()
block|{
return|return
name|fromParent
return|;
block|}
specifier|public
name|void
name|setFromParent
parameter_list|(
name|boolean
name|fromParent
parameter_list|)
block|{
name|this
operator|.
name|fromParent
operator|=
name|fromParent
expr_stmt|;
block|}
block|}
end_class

end_unit

