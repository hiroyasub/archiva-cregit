begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphTaskException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|DependencyGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|WalkDepthFirstSearch
import|;
end_import

begin_comment
comment|/**  * PopulateGraphMasterTask - will perform a resolve / depman apply loop until the graph is fully populated.   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|PopulateGraphMasterTask
implements|implements
name|GraphTask
block|{
specifier|private
name|DependencyGraphBuilder
name|builder
decl_stmt|;
specifier|private
name|ResolveGraphTask
name|resolveGraphTask
init|=
operator|new
name|ResolveGraphTask
argument_list|()
decl_stmt|;
specifier|private
name|DependencyManagementApplier
name|depManApplier
init|=
operator|new
name|DependencyManagementApplier
argument_list|()
decl_stmt|;
specifier|public
name|void
name|executeTask
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
throws|throws
name|GraphTaskException
block|{
name|DependencyGraphWalker
name|walker
init|=
operator|new
name|WalkDepthFirstSearch
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|maxiters
init|=
literal|5
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|resolveGraphTask
operator|.
name|executeTask
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|walker
operator|.
name|visit
argument_list|(
name|graph
argument_list|,
name|depManApplier
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|depManApplier
operator|.
name|hasCreatedNodes
argument_list|()
operator|||
operator|(
name|maxiters
operator|<
literal|0
operator|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|maxiters
operator|--
expr_stmt|;
block|}
name|DependencyGraphUtils
operator|.
name|cleanupOrphanedNodes
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTaskId
parameter_list|()
block|{
return|return
literal|"populate-graph"
return|;
block|}
specifier|public
name|DependencyGraphBuilder
name|getBuilder
parameter_list|()
block|{
return|return
name|builder
return|;
block|}
specifier|public
name|void
name|setBuilder
parameter_list|(
name|DependencyGraphBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|resolveGraphTask
operator|.
name|setBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|depManApplier
operator|.
name|setBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

