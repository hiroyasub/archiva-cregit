begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|EdgeFromPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|BaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|DependencyGraphVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|DependencyScope
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * UpdateScopesVisitor   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|UpdateScopesVisitor
extends|extends
name|BaseVisitor
implements|implements
name|DependencyGraphVisitor
block|{
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|scopeStack
decl_stmt|;
specifier|private
name|Predicate
name|rootEdgePredicate
decl_stmt|;
specifier|public
name|UpdateScopesVisitor
parameter_list|()
block|{
name|scopeStack
operator|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|// Default setting.
name|scopeStack
operator|.
name|add
argument_list|(
name|DependencyScope
operator|.
name|COMPILE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|discoverGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|super
operator|.
name|discoverGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|rootEdgePredicate
operator|=
operator|new
name|EdgeFromPredicate
argument_list|(
name|graph
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|discoverEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
name|super
operator|.
name|discoverEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|String
name|scope
init|=
name|edge
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rootEdgePredicate
operator|.
name|evaluate
argument_list|(
name|edge
argument_list|)
condition|)
block|{
comment|// Not a root edge.  Set the scope.
name|scope
operator|=
operator|(
name|String
operator|)
name|scopeStack
operator|.
name|peek
argument_list|()
expr_stmt|;
name|edge
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
comment|// Push the scope used onto the stack.
name|scopeStack
operator|.
name|push
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finishEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
name|super
operator|.
name|finishEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|scopeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

