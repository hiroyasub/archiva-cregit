begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|ListOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|EdgeFromPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|functors
operator|.
name|EdgeToPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * DependencyGraph   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyGraph
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DISABLED_CYCLIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DISABLED_EXCLUDED
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DISABLED_OPTIONAL
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DISABLED_NEARER_DEP
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DISABLED_NEARER_EDGE
init|=
literal|4
decl_stmt|;
specifier|private
name|DependencyGraphNode
name|rootNode
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|edges
init|=
operator|new
name|HashSet
argument_list|<
name|DependencyGraphEdge
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ListOrderedMap
name|nodes
init|=
operator|new
name|ListOrderedMap
argument_list|()
decl_stmt|;
specifier|public
name|DependencyGraph
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ArtifactReference
name|rootRef
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|rootRef
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|rootRef
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|rootRef
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|rootRef
operator|.
name|setClassifier
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rootRef
operator|.
name|setType
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootNode
operator|=
operator|new
name|DependencyGraphNode
argument_list|(
name|rootRef
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DependencyGraph
parameter_list|(
name|DependencyGraphNode
name|root
parameter_list|)
block|{
name|this
operator|.
name|rootNode
operator|=
name|root
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|getEdges
parameter_list|()
block|{
return|return
name|edges
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|DependencyGraphNode
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|DependencyGraphNode
name|getRootNode
parameter_list|()
block|{
return|return
name|rootNode
return|;
block|}
specifier|public
name|void
name|setRootNode
parameter_list|(
name|DependencyGraphNode
name|rootNode
parameter_list|)
block|{
name|this
operator|.
name|rootNode
operator|=
name|rootNode
expr_stmt|;
block|}
comment|/**      * Add the edge to the {@link DependencyGraph}.      *       * @param edge the edge to add.      */
specifier|public
name|void
name|addEdge
parameter_list|(
specifier|final
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|getNodeFrom
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"edge.nodeFrom cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|edge
operator|.
name|getNodeTo
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"edge.nodeTo cannot be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|edges
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DependencyGraphNode
name|addNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to add a null node."
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to add a node with a null artifact reference."
argument_list|)
throw|;
block|}
name|int
name|prevNodeIdx
init|=
name|this
operator|.
name|nodes
operator|.
name|indexOf
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// Found it in the node tree?
if|if
condition|(
name|prevNodeIdx
operator|>=
literal|0
condition|)
block|{
comment|// Merge new node into existing node.
name|DependencyGraphNode
name|previousNode
init|=
operator|(
name|DependencyGraphNode
operator|)
name|this
operator|.
name|nodes
operator|.
name|get
argument_list|(
name|prevNodeIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|node
operator|.
name|getExcludes
argument_list|()
argument_list|)
condition|)
block|{
name|previousNode
operator|.
name|getExcludes
argument_list|()
operator|.
name|addAll
argument_list|(
name|node
operator|.
name|getExcludes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|node
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
condition|)
block|{
name|previousNode
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|addAll
argument_list|(
name|node
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|isFromParent
argument_list|()
condition|)
block|{
name|previousNode
operator|.
name|setFromParent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Return newly merged node (from existing node)
return|return
name|previousNode
return|;
block|}
comment|// This is a new node, didn't exist before, just save it.
name|this
operator|.
name|nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|boolean
name|hasNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
return|return
name|this
operator|.
name|nodes
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
return|return
name|this
operator|.
name|edges
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
return|;
block|}
comment|/**      * Get the list of edges from the provided node.      *       * @param node the node to use as the 'from' side of an edge.      * @return the edges from the provided node.      */
specifier|public
name|List
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|getEdgesFrom
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DependencyGraphEdge
argument_list|>
argument_list|()
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|this
operator|.
name|edges
argument_list|,
operator|new
name|EdgeFromPredicate
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get the list of edges to the provided node.      *       * @param node the node to use as the 'to' side of an edge.      * @return the edges to the provided node.      */
specifier|public
name|List
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|getEdgesTo
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DependencyGraphEdge
argument_list|>
argument_list|()
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|this
operator|.
name|edges
argument_list|,
operator|new
name|EdgeToPredicate
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get the node for the specified artifact reference.      *       * @param ref the artifact reference to use to find the node.      * @return the node that was found. (null if not found)      */
specifier|public
name|DependencyGraphNode
name|getNode
parameter_list|(
name|ArtifactReference
name|ref
parameter_list|)
block|{
return|return
operator|(
name|DependencyGraphNode
operator|)
name|this
operator|.
name|nodes
operator|.
name|get
argument_list|(
name|ref
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
name|this
operator|.
name|edges
operator|.
name|remove
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|edges
init|=
name|getEdgesFrom
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|edges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removing node left<"
operator|+
name|edges
operator|+
literal|"> hanging<from> edges."
argument_list|)
expr_stmt|;
block|}
name|edges
operator|=
name|getEdgesTo
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|edges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removing node left<"
operator|+
name|edges
operator|+
literal|"> hanging<to> edges."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodes
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

