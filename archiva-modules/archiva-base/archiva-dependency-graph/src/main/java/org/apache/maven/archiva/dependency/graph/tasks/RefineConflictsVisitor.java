begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|comparators
operator|.
name|ReverseComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|NotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|list
operator|.
name|TypedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|BaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|DependencyGraphVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_comment
comment|/**  * RefineConflictsVisitor   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RefineConflictsVisitor
extends|extends
name|BaseVisitor
implements|implements
name|DependencyGraphVisitor
block|{
class|class
name|DepthComparator
implements|implements
name|Comparator
argument_list|<
name|NodeLocation
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|NodeLocation
name|obj0
parameter_list|,
name|NodeLocation
name|obj1
parameter_list|)
block|{
return|return
name|obj0
operator|.
name|depth
operator|-
name|obj1
operator|.
name|depth
return|;
block|}
block|}
class|class
name|NodeLocation
block|{
specifier|public
name|ArtifactReference
name|artifact
decl_stmt|;
specifier|public
name|DependencyGraphEdge
name|edge
decl_stmt|;
specifier|public
name|int
name|depth
decl_stmt|;
specifier|public
name|NodeLocation
parameter_list|(
name|ArtifactReference
name|artifact
parameter_list|,
name|DependencyGraphEdge
name|edge
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
name|this
operator|.
name|edge
operator|=
name|edge
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
block|}
class|class
name|NodeLocationPredicate
implements|implements
name|Predicate
block|{
specifier|private
name|ArtifactReference
name|artifact
decl_stmt|;
specifier|public
name|NodeLocationPredicate
parameter_list|(
name|ArtifactReference
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|NodeLocationPredicate
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|this
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|NodeLocation
condition|)
block|{
name|NodeLocation
name|nodeloc
init|=
operator|(
name|NodeLocation
operator|)
name|object
decl_stmt|;
name|satisfies
operator|=
name|nodeloc
operator|.
name|artifact
operator|.
name|equals
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
class|class
name|NodeLocationVersionComparator
implements|implements
name|Comparator
argument_list|<
name|NodeLocation
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|NodeLocation
name|o1
parameter_list|,
name|NodeLocation
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|version1
init|=
name|o1
operator|.
name|artifact
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|String
name|version2
init|=
name|o2
operator|.
name|artifact
operator|.
name|getVersion
argument_list|()
decl_stmt|;
return|return
name|VersionComparator
operator|.
name|getInstance
argument_list|()
operator|.
name|compare
argument_list|(
name|version1
argument_list|,
name|version2
argument_list|)
return|;
block|}
block|}
class|class
name|DistantNodeLocationPredicate
implements|implements
name|Predicate
block|{
specifier|private
name|int
name|cutoff
decl_stmt|;
specifier|public
name|DistantNodeLocationPredicate
parameter_list|(
name|int
name|distantCutoff
parameter_list|)
block|{
name|this
operator|.
name|cutoff
operator|=
name|distantCutoff
expr_stmt|;
block|}
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|NodeLocation
condition|)
block|{
name|NodeLocation
name|nodeloc
init|=
operator|(
name|NodeLocation
operator|)
name|object
decl_stmt|;
name|satisfies
operator|=
operator|(
name|nodeloc
operator|.
name|depth
operator|>=
name|this
operator|.
name|cutoff
operator|)
expr_stmt|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|DependencyGraphNode
argument_list|>
name|conflictingArtifacts
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeLocation
argument_list|>
name|foundNodesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeLocation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|currentDepth
init|=
literal|0
decl_stmt|;
specifier|private
name|DependencyGraph
name|currentGraph
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|RefineConflictsVisitor
parameter_list|()
block|{
name|conflictingArtifacts
operator|=
name|TypedList
operator|.
name|decorate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ArtifactReference
argument_list|>
argument_list|()
argument_list|,
name|ArtifactReference
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|discoverGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|super
operator|.
name|discoverGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentGraph
operator|=
name|graph
expr_stmt|;
name|this
operator|.
name|foundNodesMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|discoverNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|super
operator|.
name|discoverNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentDepth
operator|++
expr_stmt|;
name|List
argument_list|<
name|DependencyGraphEdge
argument_list|>
name|edgesFrom
init|=
name|currentGraph
operator|.
name|getEdgesFrom
argument_list|(
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|DependencyGraphEdge
name|edge
range|:
name|edgesFrom
control|)
block|{
if|if
condition|(
name|this
operator|.
name|conflictingArtifacts
operator|.
name|contains
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|nodeKey
init|=
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check for existing NodeLocation with same key
name|NodeLocation
name|nodeloc
init|=
name|this
operator|.
name|foundNodesMap
operator|.
name|get
argument_list|(
name|nodeKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nodeloc
operator|==
literal|null
operator|)
operator|||
operator|(
name|currentDepth
operator|<
name|nodeloc
operator|.
name|depth
operator|)
condition|)
block|{
name|nodeloc
operator|=
operator|new
name|NodeLocation
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|,
name|edge
argument_list|,
name|currentDepth
argument_list|)
expr_stmt|;
name|this
operator|.
name|foundNodesMap
operator|.
name|put
argument_list|(
name|nodeKey
argument_list|,
name|nodeloc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|finishGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|super
operator|.
name|finishGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|this
operator|.
name|foundNodesMap
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Find winning node.
name|ArtifactReference
name|winningArtifact
init|=
name|findWinningArtifact
argument_list|(
name|this
operator|.
name|foundNodesMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|DependencyGraphNode
name|winningNode
init|=
name|graph
operator|.
name|getNode
argument_list|(
name|winningArtifact
argument_list|)
decl_stmt|;
comment|// Gather up Losing Nodes.
name|Set
argument_list|<
name|NodeLocation
argument_list|>
name|losingNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeLocation
argument_list|>
argument_list|()
decl_stmt|;
name|Predicate
name|losersPredicate
init|=
name|NotPredicate
operator|.
name|getInstance
argument_list|(
operator|new
name|NodeLocationPredicate
argument_list|(
name|winningArtifact
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|select
argument_list|(
name|this
operator|.
name|foundNodesMap
operator|.
name|values
argument_list|()
argument_list|,
name|losersPredicate
argument_list|,
name|losingNodes
argument_list|)
expr_stmt|;
comment|// Swing losing nodes to winning node.
for|for
control|(
name|NodeLocation
name|losingNodeLoc
range|:
name|losingNodes
control|)
block|{
name|DependencyGraphNode
name|losingNode
init|=
name|graph
operator|.
name|getNode
argument_list|(
name|losingNodeLoc
operator|.
name|artifact
argument_list|)
decl_stmt|;
name|DependencyGraphUtils
operator|.
name|collapseNodes
argument_list|(
name|graph
argument_list|,
name|losingNode
argument_list|,
name|winningNode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArtifactReference
name|findWinningArtifact
parameter_list|(
name|Collection
argument_list|<
name|NodeLocation
argument_list|>
name|nodes
parameter_list|)
block|{
name|List
argument_list|<
name|NodeLocation
argument_list|>
name|remainingNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeLocation
argument_list|>
argument_list|()
decl_stmt|;
name|remainingNodes
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
comment|/* .\ Filter by Depth \.____________________________________________________ */
comment|// Sort by depth.
name|Collections
operator|.
name|sort
argument_list|(
name|remainingNodes
argument_list|,
operator|new
name|DepthComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Determine 'closest' node depth.
name|NodeLocation
name|nearestNode
init|=
name|remainingNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|nearest
init|=
name|nearestNode
operator|.
name|depth
decl_stmt|;
comment|// Filter out distant nodes.
name|Predicate
name|distantLocations
init|=
operator|new
name|DistantNodeLocationPredicate
argument_list|(
name|nearest
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|filter
argument_list|(
name|remainingNodes
argument_list|,
name|distantLocations
argument_list|)
expr_stmt|;
comment|// Do we have 1 node left?
if|if
condition|(
name|remainingNodes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// A winner!
name|NodeLocation
name|nodeloc
init|=
name|remainingNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|nodeloc
operator|.
name|artifact
return|;
block|}
comment|/* .\ Filter by Newest Version \.___________________________________________ */
comment|// We have 2 or more nodes that are equal distance from the root.
comment|// Determine which one is 'newest' based on version id.
name|Collections
operator|.
name|sort
argument_list|(
name|remainingNodes
argument_list|,
operator|new
name|ReverseComparator
argument_list|(
operator|new
name|NodeLocationVersionComparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NodeLocation
name|nodeloc
init|=
name|remainingNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|nodeloc
operator|.
name|artifact
return|;
block|}
specifier|public
name|void
name|finishNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|super
operator|.
name|finishNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentDepth
operator|--
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|DependencyGraphNode
argument_list|>
name|getConflictingArtifacts
parameter_list|()
block|{
return|return
name|conflictingArtifacts
return|;
block|}
specifier|public
name|void
name|addAllConflictingArtifacts
parameter_list|(
name|Collection
argument_list|<
name|DependencyGraphNode
argument_list|>
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|conflictingArtifacts
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|resetConflictingArtifacts
parameter_list|()
block|{
name|this
operator|.
name|conflictingArtifacts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

