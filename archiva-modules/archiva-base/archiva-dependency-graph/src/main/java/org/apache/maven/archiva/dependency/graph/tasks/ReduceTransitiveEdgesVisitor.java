begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|DependencyGraphVisitor
import|;
end_import

begin_comment
comment|/**  * Perform a transitive reduction of the graph.   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ReduceTransitiveEdgesVisitor
extends|extends
name|AbstractReduceEdgeVisitor
implements|implements
name|DependencyGraphVisitor
block|{
class|class
name|EdgeInfo
block|{
specifier|public
name|DependencyGraphEdge
name|edge
decl_stmt|;
specifier|public
name|int
name|depth
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
block|}
class|class
name|EdgeInfoDepthComparator
implements|implements
name|Comparator
argument_list|<
name|EdgeInfo
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|EdgeInfo
name|obj0
parameter_list|,
name|EdgeInfo
name|obj1
parameter_list|)
block|{
return|return
name|obj0
operator|.
name|depth
operator|-
name|obj1
operator|.
name|depth
return|;
block|}
block|}
comment|/**      * A Map of&lt;(Node To) ArtifactReference, Map of&lt;(Node From) ArtifactReference, EdgeInfo&gt;&gt;      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|EdgeInfo
argument_list|>
argument_list|>
name|nodeDistanceMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|EdgeInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|currentDepth
decl_stmt|;
specifier|public
name|void
name|discoverGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|super
operator|.
name|discoverGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|nodeDistanceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentDepth
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|discoverEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
comment|/* WARNING: it is unwise to remove the edge at this point.          *          as modifying the graph as it's being walked is dangerous.          *                    * Just record the edge's current depth.          */
name|String
name|nodeTo
init|=
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeFrom
init|=
name|DependencyGraphKeys
operator|.
name|toKey
argument_list|(
name|edge
operator|.
name|getNodeFrom
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get sub-map
name|Map
argument_list|<
name|String
argument_list|,
name|EdgeInfo
argument_list|>
name|edgeInfoMap
init|=
name|nodeDistanceMap
operator|.
name|get
argument_list|(
name|nodeTo
argument_list|)
decl_stmt|;
comment|// Create sub-map if not present (yet)
if|if
condition|(
name|edgeInfoMap
operator|==
literal|null
condition|)
block|{
name|edgeInfoMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|EdgeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|nodeDistanceMap
operator|.
name|put
argument_list|(
name|nodeTo
argument_list|,
name|edgeInfoMap
argument_list|)
expr_stmt|;
block|}
comment|// Get sub-map-value.
name|EdgeInfo
name|edgeInfo
init|=
operator|(
name|EdgeInfo
operator|)
name|edgeInfoMap
operator|.
name|get
argument_list|(
name|nodeFrom
argument_list|)
decl_stmt|;
if|if
condition|(
name|edgeInfo
operator|==
literal|null
condition|)
block|{
comment|// Create a new edgeinfo.
name|edgeInfo
operator|=
operator|new
name|EdgeInfo
argument_list|()
expr_stmt|;
name|edgeInfo
operator|.
name|edge
operator|=
name|edge
expr_stmt|;
name|edgeInfo
operator|.
name|depth
operator|=
name|currentDepth
expr_stmt|;
name|edgeInfoMap
operator|.
name|put
argument_list|(
name|nodeFrom
argument_list|,
name|edgeInfo
argument_list|)
expr_stmt|;
block|}
comment|// test the current depth, if it is less than previous depth, save it
if|else if
condition|(
name|currentDepth
operator|<
name|edgeInfo
operator|.
name|depth
condition|)
block|{
name|edgeInfo
operator|.
name|depth
operator|=
name|currentDepth
expr_stmt|;
name|edgeInfoMap
operator|.
name|put
argument_list|(
name|nodeFrom
argument_list|,
name|edgeInfo
argument_list|)
expr_stmt|;
block|}
name|nodeDistanceMap
operator|.
name|put
argument_list|(
name|nodeTo
argument_list|,
name|edgeInfoMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|discoverNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|super
operator|.
name|discoverNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentDepth
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|finishNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|super
operator|.
name|finishNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentDepth
operator|--
expr_stmt|;
block|}
specifier|public
name|void
name|finishGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|super
operator|.
name|finishGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
comment|// Now we prune/remove the edges that are transitive in nature.
name|Comparator
argument_list|<
name|EdgeInfo
argument_list|>
name|edgeInfoDepthComparator
init|=
operator|new
name|EdgeInfoDepthComparator
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|EdgeInfo
argument_list|>
name|edgeInfoMap
range|:
name|nodeDistanceMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|edgeInfoMap
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|EdgeInfo
argument_list|>
name|edgeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|EdgeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|edgeInfos
operator|.
name|addAll
argument_list|(
name|edgeInfoMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|edgeInfos
argument_list|,
name|edgeInfoDepthComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|edgeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|EdgeInfo
name|edgeInfo
init|=
operator|(
name|EdgeInfo
operator|)
name|edgeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|graph
operator|.
name|removeEdge
argument_list|(
name|edgeInfo
operator|.
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

