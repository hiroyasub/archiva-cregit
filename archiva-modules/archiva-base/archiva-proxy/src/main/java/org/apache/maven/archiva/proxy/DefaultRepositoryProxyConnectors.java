begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|NetworkProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Keys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|RepositoryURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|DownloadErrorPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|DownloadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|PolicyConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|PolicyViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|PostDownloadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|PreDownloadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ProxyDownloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|urlcache
operator|.
name|UrlFailureCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ResourceDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|Wagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|WagonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authentication
operator|.
name|AuthenticationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|proxy
operator|.
name|ProxyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|SelectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * DefaultRepositoryProxyConnectors  *   * @version $Id$  * @todo exception handling needs work - "not modified" is not really an exceptional case, and it has more layers than  *       your average brown onion  * @plexus.component role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryProxyConnectors
implements|implements
name|RepositoryProxyConnectors
implements|,
name|RegistryListener
implements|,
name|Initializable
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRepositoryProxyConnectors
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.policies.PreDownloadPolicy"      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PreDownloadPolicy
argument_list|>
name|preDownloadPolicies
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.policies.PostDownloadPolicy"      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PostDownloadPolicy
argument_list|>
name|postDownloadPolicies
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.policies.DownloadErrorPolicy"      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|downloadErrorPolicies
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|private
name|UrlFailureCache
name|urlFailureCache
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ProxyInfo
argument_list|>
name|networkProxyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProxyInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|WagonFactory
name|wagonFactory
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.archiva.scheduler.ArchivaTaskScheduler" role-hint="repository"      */
specifier|private
name|RepositoryArchivaTaskScheduler
name|scheduler
decl_stmt|;
specifier|public
name|File
name|fetchFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
throws|throws
name|ProxyDownloadException
block|{
name|File
name|localFile
init|=
name|toLocalFile
argument_list|(
name|repository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|Properties
name|requestProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"filetype"
argument_list|,
literal|"artifact"
argument_list|)
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"managedRepositoryId"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|previousExceptions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RemoteRepositoryContent
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"remoteRepositoryId"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|targetRepository
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
try|try
block|{
name|File
name|downloadedFile
init|=
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
argument_list|,
name|targetPath
argument_list|,
name|repository
argument_list|,
name|localFile
argument_list|,
name|requestProperties
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileExists
argument_list|(
name|downloadedFile
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Successfully transferred: "
operator|+
name|downloadedFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|downloadedFile
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact "
operator|+
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
operator|+
literal|" not found on repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact "
operator|+
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
operator|+
literal|" not updated on repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|validatePolicies
argument_list|(
name|this
operator|.
name|downloadErrorPolicies
argument_list|,
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|,
name|requestProperties
argument_list|,
name|artifact
argument_list|,
name|targetRepository
argument_list|,
name|localFile
argument_list|,
name|e
argument_list|,
name|previousExceptions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|previousExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyDownloadException
argument_list|(
literal|"Failures occurred downloading from some remote repositories"
argument_list|,
name|previousExceptions
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Exhausted all target repositories, artifact "
operator|+
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|File
name|fetchFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
comment|// no update policies for these paths
if|if
condition|(
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Properties
name|requestProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"filetype"
argument_list|,
literal|"resource"
argument_list|)
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"managedRepositoryId"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RemoteRepositoryContent
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"remoteRepositoryId"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|path
decl_stmt|;
try|try
block|{
name|File
name|downloadedFile
init|=
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
argument_list|,
name|targetPath
argument_list|,
name|repository
argument_list|,
name|localFile
argument_list|,
name|requestProperties
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileExists
argument_list|(
name|downloadedFile
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Successfully transferred: "
operator|+
name|downloadedFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|downloadedFile
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not found on repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not updated on repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer error from repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\" for resource "
operator|+
name|path
operator|+
literal|", continuing to next repository. Error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Full stack trace"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Exhausted all target repositories, resource "
operator|+
name|path
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|File
name|fetchMetatadaFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|String
name|logicalPath
parameter_list|)
block|{
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|logicalPath
argument_list|)
decl_stmt|;
name|Properties
name|requestProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"filetype"
argument_list|,
literal|"metadata"
argument_list|)
expr_stmt|;
name|boolean
name|metadataNeedsUpdating
init|=
literal|false
decl_stmt|;
name|long
name|originalTimestamp
init|=
name|getLastModified
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RemoteRepositoryContent
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
name|File
name|localRepoFile
init|=
name|toLocalRepoFile
argument_list|(
name|repository
argument_list|,
name|targetRepository
argument_list|,
name|logicalPath
argument_list|)
decl_stmt|;
name|long
name|originalMetadataTimestamp
init|=
name|getLastModified
argument_list|(
name|localRepoFile
argument_list|)
decl_stmt|;
try|try
block|{
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
argument_list|,
name|logicalPath
argument_list|,
name|repository
argument_list|,
name|localRepoFile
argument_list|,
name|requestProperties
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasBeenUpdated
argument_list|(
name|localRepoFile
argument_list|,
name|originalMetadataTimestamp
argument_list|)
condition|)
block|{
name|metadataNeedsUpdating
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Metadata "
operator|+
name|logicalPath
operator|+
literal|" not found on remote repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Metadata "
operator|+
name|logicalPath
operator|+
literal|" not updated on remote repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer error from repository \""
operator|+
name|targetRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\" for versioned Metadata "
operator|+
name|logicalPath
operator|+
literal|", continuing to next repository. Error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Full stack trace"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasBeenUpdated
argument_list|(
name|localFile
argument_list|,
name|originalTimestamp
argument_list|)
condition|)
block|{
name|metadataNeedsUpdating
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|metadataNeedsUpdating
operator|||
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|metadataTools
operator|.
name|updateMetadata
argument_list|(
name|repository
argument_list|,
name|logicalPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to update metadata "
operator|+
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileExists
argument_list|(
name|localFile
argument_list|)
condition|)
block|{
return|return
name|localFile
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|long
name|getLastModified
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|file
operator|.
name|lastModified
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|hasBeenUpdated
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|originalLastModified
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|currentLastModified
init|=
name|getLastModified
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
operator|(
name|currentLastModified
operator|>
name|originalLastModified
operator|)
return|;
block|}
specifier|private
name|File
name|toLocalRepoFile
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|RemoteRepositoryContent
name|targetRepository
parameter_list|,
name|String
name|targetPath
parameter_list|)
block|{
name|String
name|repoPath
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|targetRepository
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|repoPath
argument_list|)
return|;
block|}
comment|/**      * Test if the provided ManagedRepositoryContent has any proxies configured for it.      */
specifier|public
name|boolean
name|hasProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
return|return
name|this
operator|.
name|proxyConnectorMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|File
name|toLocalFile
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
block|{
return|return
name|repository
operator|.
name|toFile
argument_list|(
name|artifact
argument_list|)
return|;
block|}
comment|/**      * Simple method to test if the file exists on the local disk.      *       * @param file the file to test. (may be null)      * @return true if file exists. false if the file param is null, doesn't exist, or is not of type File.      */
specifier|private
name|boolean
name|fileExists
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Perform the transfer of the file.      *       * @param connector the connector configuration to use.      * @param remoteRepository the remote repository get the resource from.      * @param remotePath the path in the remote repository to the resource to get.      * @param repository the managed repository that will hold the file      * @param resource the local file to place the downloaded resource into      * @param requestProperties the request properties to utilize for policy handling.      * @param executeConsumers whether to execute the consumers after proxying      * @return the local file that was downloaded, or null if not downloaded.      * @throws NotFoundException if the file was not found on the remote repository.      * @throws NotModifiedException if the localFile was present, and the resource was present on remote repository, but      *             the remote resource is not newer than the local File.      * @throws ProxyException if transfer was unsuccessful.      */
specifier|private
name|File
name|transferFile
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|,
name|RemoteRepositoryContent
name|remoteRepository
parameter_list|,
name|String
name|remotePath
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|File
name|resource
parameter_list|,
name|Properties
name|requestProperties
parameter_list|,
name|boolean
name|executeConsumers
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|NotModifiedException
block|{
name|String
name|url
init|=
name|remoteRepository
operator|.
name|getURL
argument_list|()
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"/"
expr_stmt|;
block|}
name|url
operator|=
name|url
operator|+
name|remotePath
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// Is a whitelist defined?
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|connector
operator|.
name|getWhitelist
argument_list|()
argument_list|)
condition|)
block|{
comment|// Path must belong to whitelist.
if|if
condition|(
operator|!
name|matchesPattern
argument_list|(
name|remotePath
argument_list|,
name|connector
operator|.
name|getWhitelist
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Path ["
operator|+
name|remotePath
operator|+
literal|"] is not part of defined whitelist (skipping transfer from repository ["
operator|+
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"])."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Is target path part of blacklist?
if|if
condition|(
name|matchesPattern
argument_list|(
name|remotePath
argument_list|,
name|connector
operator|.
name|getBlacklist
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Path ["
operator|+
name|remotePath
operator|+
literal|"] is part of blacklist (skipping transfer from repository ["
operator|+
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"])."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Handle pre-download policy
try|try
block|{
name|validatePolicies
argument_list|(
name|this
operator|.
name|preDownloadPolicies
argument_list|,
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|,
name|requestProperties
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyViolationException
name|e
parameter_list|)
block|{
name|String
name|emsg
init|=
literal|"Transfer not attempted on "
operator|+
name|url
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileExists
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|emsg
operator|+
literal|": using already present local file."
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
name|emsg
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|File
name|tmpMd5
init|=
literal|null
decl_stmt|;
name|File
name|tmpSha1
init|=
literal|null
decl_stmt|;
name|File
name|tmpResource
init|=
literal|null
decl_stmt|;
name|File
name|workingDirectory
init|=
name|createWorkingDirectory
argument_list|(
name|repository
argument_list|)
decl_stmt|;
try|try
block|{
name|Wagon
name|wagon
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RepositoryURL
name|repoUrl
init|=
name|remoteRepository
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
name|repoUrl
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|wagon
operator|=
operator|(
name|Wagon
operator|)
name|wagonFactory
operator|.
name|getWagon
argument_list|(
literal|"wagon#"
operator|+
name|protocol
argument_list|)
expr_stmt|;
if|if
condition|(
name|wagon
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unsupported target repository protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
name|boolean
name|connected
init|=
name|connectToRepository
argument_list|(
name|connector
argument_list|,
name|wagon
argument_list|,
name|remoteRepository
argument_list|)
decl_stmt|;
if|if
condition|(
name|connected
condition|)
block|{
name|tmpResource
operator|=
operator|new
name|File
argument_list|(
name|workingDirectory
argument_list|,
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|transferSimpleFile
argument_list|(
name|wagon
argument_list|,
name|remoteRepository
argument_list|,
name|remotePath
argument_list|,
name|repository
argument_list|,
name|resource
argument_list|,
name|tmpResource
argument_list|)
expr_stmt|;
comment|// TODO: these should be used to validate the download based on the policies, not always downloaded
comment|// to
comment|// save on connections since md5 is rarely used
name|tmpSha1
operator|=
name|transferChecksum
argument_list|(
name|wagon
argument_list|,
name|remoteRepository
argument_list|,
name|remotePath
argument_list|,
name|repository
argument_list|,
name|resource
argument_list|,
name|workingDirectory
argument_list|,
literal|".sha1"
argument_list|)
expr_stmt|;
name|tmpMd5
operator|=
name|transferChecksum
argument_list|(
name|wagon
argument_list|,
name|remoteRepository
argument_list|,
name|remotePath
argument_list|,
name|repository
argument_list|,
name|resource
argument_list|,
name|workingDirectory
argument_list|,
literal|".md5"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|urlFailureCache
operator|.
name|cacheFailure
argument_list|(
name|url
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
comment|// Do not cache url here.
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|urlFailureCache
operator|.
name|cacheFailure
argument_list|(
name|url
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|wagon
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|wagon
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to disconnect wagon."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Handle post-download policies.
try|try
block|{
name|validatePolicies
argument_list|(
name|this
operator|.
name|postDownloadPolicies
argument_list|,
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|,
name|requestProperties
argument_list|,
name|tmpResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyViolationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer invalidated from "
operator|+
name|url
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|executeConsumers
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|fileExists
argument_list|(
name|tmpResource
argument_list|)
condition|)
block|{
name|resource
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|resource
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|intern
argument_list|()
init|)
block|{
name|File
name|directory
init|=
name|resource
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|moveFileIfExists
argument_list|(
name|tmpMd5
argument_list|,
name|directory
argument_list|)
expr_stmt|;
name|moveFileIfExists
argument_list|(
name|tmpSha1
argument_list|,
name|directory
argument_list|)
expr_stmt|;
name|moveFileIfExists
argument_list|(
name|tmpResource
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|workingDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executeConsumers
condition|)
block|{
comment|// Just-in-time update of the index and database by executing the consumers for this artifact
comment|//consumers.executeConsumers( connector.getSourceRepository().getRepository(), resource );
name|queueRepositoryTask
argument_list|(
name|connector
operator|.
name|getSourceRepository
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
specifier|private
name|void
name|queueRepositoryTask
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|File
name|localFile
parameter_list|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setResourceFile
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|task
operator|.
name|setUpdateRelatedArtifacts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to queue repository task to execute consumers on resource file ['"
operator|+
name|localFile
operator|.
name|getName
argument_list|()
operator|+
literal|"']."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Moves the file into repository location if it exists      *       * @param fileToMove this could be either the main artifact, sha1 or md5 checksum file.      * @param directory directory to write files to      */
specifier|private
name|void
name|moveFileIfExists
parameter_list|(
name|File
name|fileToMove
parameter_list|,
name|File
name|directory
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|fileToMove
operator|!=
literal|null
operator|&&
name|fileToMove
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|newLocation
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|fileToMove
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|moveTempToTarget
argument_list|(
name|fileToMove
argument_list|,
name|newLocation
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Quietly transfer the checksum file from the remote repository to the local file.      *</p>      *       * @param wagon the wagon instance (should already be connected) to use.      * @param remoteRepository the remote repository to transfer from.      * @param remotePath the remote path to the resource to get.      * @param repository the managed repository that will hold the file      * @param resource the local file that should contain the downloaded contents      * @param tmpDirectory the temporary directory to download to      * @param ext the type of checksum to transfer (example: ".md5" or ".sha1")      * @throws ProxyException if copying the downloaded file into place did not succeed.      */
specifier|private
name|File
name|transferChecksum
parameter_list|(
name|Wagon
name|wagon
parameter_list|,
name|RemoteRepositoryContent
name|remoteRepository
parameter_list|,
name|String
name|remotePath
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|File
name|resource
parameter_list|,
name|File
name|tmpDirectory
parameter_list|,
name|String
name|ext
parameter_list|)
throws|throws
name|ProxyException
block|{
name|String
name|url
init|=
name|remoteRepository
operator|.
name|getURL
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|+
name|remotePath
operator|+
name|ext
decl_stmt|;
comment|// Transfer checksum does not use the policy.
if|if
condition|(
name|urlFailureCache
operator|.
name|hasFailedBefore
argument_list|(
name|url
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|tmpDirectory
argument_list|,
name|resource
operator|.
name|getName
argument_list|()
operator|+
name|ext
argument_list|)
decl_stmt|;
try|try
block|{
name|transferSimpleFile
argument_list|(
name|wagon
argument_list|,
name|remoteRepository
argument_list|,
name|remotePath
operator|+
name|ext
argument_list|,
name|repository
argument_list|,
name|resource
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Checksum "
operator|+
name|url
operator|+
literal|" Downloaded: "
operator|+
name|destFile
operator|+
literal|" to move to "
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|urlFailureCache
operator|.
name|cacheFailure
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Transfer failed, checksum not found: "
operator|+
name|url
argument_list|)
expr_stmt|;
comment|// Consume it, do not pass this on.
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Transfer skipped, checksum not modified: "
operator|+
name|url
argument_list|)
expr_stmt|;
comment|// Consume it, do not pass this on.
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|urlFailureCache
operator|.
name|cacheFailure
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer failed on checksum: "
operator|+
name|url
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Critical issue, pass it on.
throw|throw
name|e
throw|;
block|}
return|return
name|destFile
return|;
block|}
comment|/**      * Perform the transfer of the remote file to the local file specified.      *       * @param wagon the wagon instance to use.      * @param remoteRepository the remote repository to use      * @param remotePath the remote path to attempt to get      * @param repository the managed repository that will hold the file      * @param origFile the local file to save to      * @return The local file that was transfered.      * @throws ProxyException if there was a problem moving the downloaded file into place.      * @throws WagonException if there was a problem tranfering the file.      */
specifier|private
name|void
name|transferSimpleFile
parameter_list|(
name|Wagon
name|wagon
parameter_list|,
name|RemoteRepositoryContent
name|remoteRepository
parameter_list|,
name|String
name|remotePath
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|File
name|origFile
parameter_list|,
name|File
name|destFile
parameter_list|)
throws|throws
name|ProxyException
block|{
assert|assert
operator|(
name|remotePath
operator|!=
literal|null
operator|)
assert|;
comment|// Transfer the file.
try|try
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|origFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieving "
operator|+
name|remotePath
operator|+
literal|" from "
operator|+
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|wagon
operator|.
name|get
argument_list|(
name|remotePath
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
comment|// You wouldn't get here on failure, a WagonException would have been thrown.
name|log
operator|.
name|debug
argument_list|(
literal|"Downloaded successfully."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieving "
operator|+
name|remotePath
operator|+
literal|" from "
operator|+
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" if updated"
argument_list|)
expr_stmt|;
name|success
operator|=
name|wagon
operator|.
name|getIfNewer
argument_list|(
name|remotePath
argument_list|,
name|destFile
argument_list|,
name|origFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|NotModifiedException
argument_list|(
literal|"Not downloaded, as local file is newer than remote side: "
operator|+
name|origFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|destFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Downloaded successfully."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Resource ["
operator|+
name|remoteRepository
operator|.
name|getURL
argument_list|()
operator|+
literal|"/"
operator|+
name|remotePath
operator|+
literal|"] does not exist: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|WagonException
name|e
parameter_list|)
block|{
comment|// TODO: shouldn't have to drill into the cause, but TransferFailedException is often not descriptive enough
name|String
name|msg
init|=
literal|"Download failure on resource ["
operator|+
name|remoteRepository
operator|.
name|getURL
argument_list|()
operator|+
literal|"/"
operator|+
name|remotePath
operator|+
literal|"]:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|+=
literal|" (cause: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
throw|throw
operator|new
name|ProxyException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Apply the policies.      *       * @param policies the map of policies to execute. (Map of String policy keys, to {@link DownloadPolicy} objects)      * @param settings the map of settings for the policies to execute. (Map of String policy keys, to String policy      *            setting)      * @param request the request properties (utilized by the {@link DownloadPolicy#applyPolicy(String,Properties,File)}      *            )      * @param localFile the local file (utilized by the {@link DownloadPolicy#applyPolicy(String,Properties,File)})      */
specifier|private
name|void
name|validatePolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DownloadPolicy
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|,
name|Properties
name|request
parameter_list|,
name|File
name|localFile
parameter_list|)
throws|throws
name|PolicyViolationException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DownloadPolicy
argument_list|>
name|entry
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DownloadPolicy
name|policy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|defaultSetting
init|=
name|policy
operator|.
name|getDefaultOption
argument_list|()
decl_stmt|;
name|String
name|setting
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultSetting
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Applying ["
operator|+
name|key
operator|+
literal|"] policy with ["
operator|+
name|setting
operator|+
literal|"]"
argument_list|)
expr_stmt|;
try|try
block|{
name|policy
operator|.
name|applyPolicy
argument_list|(
name|setting
argument_list|,
name|request
argument_list|,
name|localFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|validatePolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|,
name|Properties
name|request
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|,
name|RemoteRepositoryContent
name|content
parameter_list|,
name|File
name|localFile
parameter_list|,
name|ProxyException
name|exception
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|previousExceptions
parameter_list|)
throws|throws
name|ProxyDownloadException
block|{
name|boolean
name|process
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DownloadErrorPolicy
argument_list|>
name|entry
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DownloadErrorPolicy
name|policy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|defaultSetting
init|=
name|policy
operator|.
name|getDefaultOption
argument_list|()
decl_stmt|;
name|String
name|setting
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultSetting
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Applying ["
operator|+
name|key
operator|+
literal|"] policy with ["
operator|+
name|setting
operator|+
literal|"]"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// all policies must approve the exception, any can cancel
name|process
operator|=
name|policy
operator|.
name|applyPolicy
argument_list|(
name|setting
argument_list|,
name|request
argument_list|,
name|localFile
argument_list|,
name|exception
argument_list|,
name|previousExceptions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|process
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|PolicyConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|process
condition|)
block|{
comment|// if the exception was queued, don't throw it
if|if
condition|(
operator|!
name|previousExceptions
operator|.
name|containsKey
argument_list|(
name|content
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProxyDownloadException
argument_list|(
literal|"An error occurred in downloading from the remote repository, and the policy is to fail immediately"
argument_list|,
name|content
operator|.
name|getId
argument_list|()
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// if the exception was queued, but cancelled, remove it
name|previousExceptions
operator|.
name|remove
argument_list|(
name|content
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer error from repository \""
operator|+
name|content
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\" for artifact "
operator|+
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
operator|+
literal|", continuing to next repository. Error message: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Full stack trace"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a working directory in the repository root for this request      *       * @param repository      * @return file location of working directory      * @throws IOException      */
specifier|private
name|File
name|createWorkingDirectory
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
comment|// TODO: This is ugly - lets actually clean this up when we get the new repository api
try|try
block|{
name|File
name|tmpDir
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|".workingdirectory"
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getRepoRoot
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tmpDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|tmpDir
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create working directory for this request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Used to move the temporary file to its real destination. This is patterned from the way WagonManager handles its      * downloaded files.      *       * @param temp The completed download file      * @param target The final location of the downloaded file      * @throws ProxyException when the temp file cannot replace the target file      */
specifier|private
name|void
name|moveTempToTarget
parameter_list|(
name|File
name|temp
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|target
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Unable to overwrite existing target file: "
operator|+
name|target
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|target
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|temp
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to rename tmp file to its final name... resorting to copy command."
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|temp
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Tried to copy file "
operator|+
name|temp
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|target
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" but file with this name already exists."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Cannot copy tmp file "
operator|+
name|temp
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" to its final location"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Using wagon, connect to the remote repository.      *       * @param connector the connector configuration to utilize (for obtaining network proxy configuration from)      * @param wagon the wagon instance to establish the connection on.      * @param remoteRepository the remote repository to connect to.      * @return true if the connection was successful. false if not connected.      */
specifier|private
name|boolean
name|connectToRepository
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|,
name|Wagon
name|wagon
parameter_list|,
name|RemoteRepositoryContent
name|remoteRepository
parameter_list|)
block|{
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
specifier|final
name|ProxyInfo
name|networkProxy
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|networkProxyMap
init|)
block|{
name|networkProxy
operator|=
operator|(
name|ProxyInfo
operator|)
name|this
operator|.
name|networkProxyMap
operator|.
name|get
argument_list|(
name|connector
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|networkProxy
operator|!=
literal|null
condition|)
block|{
comment|// TODO: move to proxyInfo.toString()
name|String
name|msg
init|=
literal|"Using network proxy "
operator|+
name|networkProxy
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|networkProxy
operator|.
name|getPort
argument_list|()
operator|+
literal|" to connect to remote repository "
operator|+
name|remoteRepository
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|networkProxy
operator|.
name|getNonProxyHosts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|+=
literal|"; excluding hosts: "
operator|+
name|networkProxy
operator|.
name|getNonProxyHosts
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|networkProxy
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|msg
operator|+=
literal|"; as user: "
operator|+
name|networkProxy
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
name|AuthenticationInfo
name|authInfo
init|=
literal|null
decl_stmt|;
name|String
name|username
init|=
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getUsername
argument_list|()
decl_stmt|;
name|String
name|password
init|=
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|username
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using username "
operator|+
name|username
operator|+
literal|" to connect to remote repository "
operator|+
name|remoteRepository
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|authInfo
operator|=
operator|new
name|AuthenticationInfo
argument_list|()
expr_stmt|;
name|authInfo
operator|.
name|setUserName
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|authInfo
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
comment|// Convert seconds to milliseconds
name|int
name|timeoutInMilliseconds
init|=
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getTimeout
argument_list|()
operator|*
literal|1000
decl_stmt|;
comment|// Set timeout
name|wagon
operator|.
name|setTimeout
argument_list|(
name|timeoutInMilliseconds
argument_list|)
expr_stmt|;
try|try
block|{
name|Repository
name|wagonRepository
init|=
operator|new
name|Repository
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|remoteRepository
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|wagon
operator|.
name|connect
argument_list|(
name|wagonRepository
argument_list|,
name|authInfo
argument_list|,
name|networkProxy
argument_list|)
expr_stmt|;
name|connected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not connect to "
operator|+
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|connected
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not connect to "
operator|+
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|connected
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|connected
return|;
block|}
comment|/**      * Tests whitelist and blacklist patterns against path.      *       * @param path the path to test.      * @param patterns the list of patterns to check.      * @return true if the path matches at least 1 pattern in the provided patterns list.      */
specifier|private
name|boolean
name|matchesPattern
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|patterns
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
if|if
condition|(
operator|!
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pattern
operator|=
literal|"/"
operator|+
name|pattern
expr_stmt|;
block|}
if|if
condition|(
name|SelectorUtils
operator|.
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * TODO: Ensure that list is correctly ordered based on configuration. See MRM-477      */
specifier|public
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|getProxyConnectors
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|ret
init|=
operator|(
name|List
argument_list|<
name|ProxyConnector
argument_list|>
operator|)
name|this
operator|.
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
name|ProxyConnectorOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ConfigurationNames
operator|.
name|isNetworkProxy
argument_list|(
name|propertyName
argument_list|)
operator|||
name|ConfigurationNames
operator|.
name|isManagedRepositories
argument_list|(
name|propertyName
argument_list|)
operator|||
name|ConfigurationNames
operator|.
name|isRemoteRepositories
argument_list|(
name|propertyName
argument_list|)
operator|||
name|ConfigurationNames
operator|.
name|isProxyConnector
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|initConnectorsAndNetworkProxies
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* do nothing */
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|initConnectorsAndNetworkProxies
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
name|ProxyConnectorOrderComparator
name|proxyOrderSorter
init|=
operator|new
name|ProxyConnectorOrderComparator
argument_list|()
decl_stmt|;
name|this
operator|.
name|proxyConnectorMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConfigs
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProxyConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConfig
range|:
name|proxyConfigs
control|)
block|{
name|String
name|key
init|=
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Create connector object.
name|ProxyConnector
name|connector
init|=
operator|new
name|ProxyConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setSourceRepository
argument_list|(
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setTargetRepository
argument_list|(
name|repositoryFactory
operator|.
name|getRemoteRepositoryContent
argument_list|(
name|proxyConfig
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setProxyId
argument_list|(
name|proxyConfig
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPolicies
argument_list|(
name|proxyConfig
operator|.
name|getPolicies
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setOrder
argument_list|(
name|proxyConfig
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDisabled
argument_list|(
name|proxyConfig
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy any blacklist patterns.
name|List
argument_list|<
name|String
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxyConfig
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
condition|)
block|{
name|blacklist
operator|.
name|addAll
argument_list|(
name|proxyConfig
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setBlacklist
argument_list|(
name|blacklist
argument_list|)
expr_stmt|;
comment|// Copy any whitelist patterns.
name|List
argument_list|<
name|String
argument_list|>
name|whitelist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxyConfig
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
condition|)
block|{
name|whitelist
operator|.
name|addAll
argument_list|(
name|proxyConfig
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setWhitelist
argument_list|(
name|whitelist
argument_list|)
expr_stmt|;
comment|// Get other connectors
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|this
operator|.
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectors
operator|==
literal|null
condition|)
block|{
comment|// Create if we are the first.
name|connectors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Add the connector.
name|connectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
comment|// Ensure the list is sorted.
name|Collections
operator|.
name|sort
argument_list|(
name|connectors
argument_list|,
name|proxyOrderSorter
argument_list|)
expr_stmt|;
comment|// Set the key to the list of connectors.
name|this
operator|.
name|proxyConnectorMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|connectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to use proxy connector: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to use proxy connector: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|networkProxyMap
init|)
block|{
name|this
operator|.
name|networkProxyMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NetworkProxyConfiguration
argument_list|>
name|networkProxies
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getNetworkProxies
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkProxyConfiguration
name|networkProxyConfig
range|:
name|networkProxies
control|)
block|{
name|String
name|key
init|=
name|networkProxyConfig
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ProxyInfo
name|proxy
init|=
operator|new
name|ProxyInfo
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|setType
argument_list|(
name|networkProxyConfig
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setHost
argument_list|(
name|networkProxyConfig
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPort
argument_list|(
name|networkProxyConfig
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setUserName
argument_list|(
name|networkProxyConfig
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPassword
argument_list|(
name|networkProxyConfig
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|networkProxyMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|initConnectorsAndNetworkProxies
argument_list|()
expr_stmt|;
name|archivaConfiguration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

