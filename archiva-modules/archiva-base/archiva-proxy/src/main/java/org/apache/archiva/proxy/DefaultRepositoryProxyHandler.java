begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|ProxyConnectorRuleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|Keys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|urlcache
operator|.
name|UrlFailureCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|ProxyFetchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|RepositoryProxyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|FilesystemStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|ArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|selectors
operator|.
name|SelectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DefaultRepositoryProxyHandler
implements|implements
name|RepositoryProxyHandler
implements|,
name|RegistryListener
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRepositoryProxyHandler
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|UrlFailureCache
name|urlFailureCache
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaConfiguration#default"
argument_list|)
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"metadataTools#default"
argument_list|)
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PreDownloadPolicy
argument_list|>
name|preDownloadPolicies
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PostDownloadPolicy
argument_list|>
name|postDownloadPolicies
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|downloadErrorPolicies
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|ArchivaTaskScheduler
argument_list|<
name|RepositoryTask
argument_list|>
name|scheduler
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"fileLockManager#default"
argument_list|)
specifier|private
name|FileLockManager
name|fileLockManager
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
name|networkProxyMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|checksumAlgorithms
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|initConnectors
argument_list|()
expr_stmt|;
name|archivaConfiguration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|checksumAlgorithms
operator|=
name|ChecksumUtil
operator|.
name|getAlgorithms
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getArchivaRuntimeConfiguration
argument_list|()
operator|.
name|getChecksumTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|initConnectors
parameter_list|()
block|{
name|ProxyConnectorOrderComparator
name|proxyOrderSorter
init|=
operator|new
name|ProxyConnectorOrderComparator
argument_list|()
decl_stmt|;
name|this
operator|.
name|proxyConnectorMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|allProxyConnectorRuleConfigurations
init|=
name|configuration
operator|.
name|getProxyConnectorRuleConfigurations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConfigs
init|=
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConfig
range|:
name|proxyConfigs
control|)
block|{
name|String
name|key
init|=
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
comment|// Create connector object.
name|ProxyConnector
name|connector
init|=
operator|new
name|ProxyConnector
argument_list|()
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot find source repository after config change "
operator|+
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|connector
operator|.
name|setSourceRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|RemoteRepository
name|rRepo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
name|proxyConfig
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rRepo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot find target repository after config change "
operator|+
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|connector
operator|.
name|setTargetRepository
argument_list|(
name|rRepo
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setProxyId
argument_list|(
name|proxyConfig
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPolicies
argument_list|(
name|proxyConfig
operator|.
name|getPolicies
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setOrder
argument_list|(
name|proxyConfig
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDisabled
argument_list|(
name|proxyConfig
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy any blacklist patterns.
name|List
argument_list|<
name|String
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxyConfig
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
condition|)
block|{
name|blacklist
operator|.
name|addAll
argument_list|(
name|proxyConfig
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setBlacklist
argument_list|(
name|blacklist
argument_list|)
expr_stmt|;
comment|// Copy any whitelist patterns.
name|List
argument_list|<
name|String
argument_list|>
name|whitelist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxyConfig
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
condition|)
block|{
name|whitelist
operator|.
name|addAll
argument_list|(
name|proxyConfig
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setWhitelist
argument_list|(
name|whitelist
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|proxyConnectorRuleConfigurations
init|=
name|findProxyConnectorRules
argument_list|(
name|connector
operator|.
name|getSourceRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|connector
operator|.
name|getTargetRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|allProxyConnectorRuleConfigurations
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxyConnectorRuleConfigurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProxyConnectorRuleConfiguration
name|proxyConnectorRuleConfiguration
range|:
name|proxyConnectorRuleConfigurations
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnectorRuleConfiguration
operator|.
name|getRuleType
argument_list|()
argument_list|,
name|ProxyConnectorRuleType
operator|.
name|BLACK_LIST
operator|.
name|getRuleType
argument_list|()
argument_list|)
condition|)
block|{
name|connector
operator|.
name|getBlacklist
argument_list|()
operator|.
name|add
argument_list|(
name|proxyConnectorRuleConfiguration
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnectorRuleConfiguration
operator|.
name|getRuleType
argument_list|()
argument_list|,
name|ProxyConnectorRuleType
operator|.
name|WHITE_LIST
operator|.
name|getRuleType
argument_list|()
argument_list|)
condition|)
block|{
name|connector
operator|.
name|getWhitelist
argument_list|()
operator|.
name|add
argument_list|(
name|proxyConnectorRuleConfiguration
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Get other connectors
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|this
operator|.
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectors
operator|==
literal|null
condition|)
block|{
comment|// Create if we are the first.
name|connectors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Add the connector.
name|connectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
comment|// Ensure the list is sorted.
name|Collections
operator|.
name|sort
argument_list|(
name|connectors
argument_list|,
name|proxyOrderSorter
argument_list|)
expr_stmt|;
comment|// Set the key to the list of connectors.
name|this
operator|.
name|proxyConnectorMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|connectors
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|findProxyConnectorRules
parameter_list|(
name|String
name|sourceRepository
parameter_list|,
name|String
name|targetRepository
parameter_list|,
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|all
parameter_list|)
block|{
name|List
argument_list|<
name|ProxyConnectorRuleConfiguration
argument_list|>
name|proxyConnectorRuleConfigurations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnectorRuleConfiguration
name|proxyConnectorRuleConfiguration
range|:
name|all
control|)
block|{
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectorRuleConfiguration
operator|.
name|getProxyConnectors
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|sourceRepository
argument_list|,
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|targetRepository
argument_list|,
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
condition|)
block|{
name|proxyConnectorRuleConfigurations
operator|.
name|add
argument_list|(
name|proxyConnectorRuleConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|proxyConnectorRuleConfigurations
return|;
block|}
specifier|private
name|void
name|updateNetworkProxies
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
name|proxies
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getNetworkProxies
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
block|{
name|NetworkProxy
name|np
init|=
operator|new
name|NetworkProxy
argument_list|()
decl_stmt|;
name|np
operator|.
name|setId
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setUseNtlm
argument_list|(
name|p
operator|.
name|isUseNtlm
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setUsername
argument_list|(
name|p
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setPassword
argument_list|(
name|p
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|char
index|[
literal|0
index|]
else|:
name|p
operator|.
name|getPassword
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setProtocol
argument_list|(
name|p
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setHost
argument_list|(
name|p
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setPort
argument_list|(
name|p
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|np
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getId
argument_list|()
argument_list|,
name|p
lambda|->
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|setNetworkProxies
argument_list|(
name|proxies
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|fetchFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
throws|throws
name|ProxyDownloadException
block|{
name|StorageAsset
name|localFile
init|=
name|toLocalFile
argument_list|(
name|repository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|Properties
name|requestProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"filetype"
argument_list|,
literal|"artifact"
argument_list|)
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"managedRepositoryId"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|previousExceptions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RemoteRepository
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"remoteRepositoryId"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|targetRepository
operator|.
name|getContent
argument_list|()
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
condition|)
block|{
comment|// toPath use system PATH_SEPARATOR so on windows url are \ which doesn't work very well :-)
name|targetPath
operator|=
name|FilenameUtils
operator|.
name|separatorsToUnix
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|StorageAsset
name|downloadedFile
init|=
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
operator|.
name|getContent
argument_list|()
argument_list|,
name|targetPath
argument_list|,
name|repository
argument_list|,
name|localFile
argument_list|,
name|requestProperties
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileExists
argument_list|(
name|downloadedFile
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Successfully transferred: {}"
argument_list|,
name|downloadedFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|downloadedFile
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact {} not found on repository \"{}\"."
argument_list|,
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact {} not updated on repository \"{}\"."
argument_list|,
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|validatePolicies
argument_list|(
name|this
operator|.
name|downloadErrorPolicies
argument_list|,
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|,
name|requestProperties
argument_list|,
name|artifact
argument_list|,
name|targetRepository
operator|.
name|getContent
argument_list|()
argument_list|,
name|localFile
argument_list|,
name|e
argument_list|,
name|previousExceptions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|previousExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProxyDownloadException
argument_list|(
literal|"Failures occurred downloading from some remote repositories"
argument_list|,
name|previousExceptions
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Exhausted all target repositories, artifact {} not found."
argument_list|,
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|fetchFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|StorageAsset
name|localFile
init|=
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// no update policies for these paths
if|if
condition|(
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Properties
name|requestProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"filetype"
argument_list|,
literal|"resource"
argument_list|)
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"managedRepositoryId"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RemoteRepository
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"remoteRepositoryId"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|path
decl_stmt|;
try|try
block|{
name|StorageAsset
name|downloadedFile
init|=
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
operator|.
name|getContent
argument_list|()
argument_list|,
name|targetPath
argument_list|,
name|repository
argument_list|,
name|localFile
argument_list|,
name|requestProperties
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileExists
argument_list|(
name|downloadedFile
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Successfully transferred: {}"
argument_list|,
name|downloadedFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|downloadedFile
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resource {} not found on repository \"{}\"."
argument_list|,
name|path
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resource {} not updated on repository \"{}\"."
argument_list|,
name|path
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer error from repository {} for resource {}, continuing to next repository. Error message: {}"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|MarkerFactory
operator|.
name|getDetachedMarker
argument_list|(
literal|"transfer.error"
argument_list|)
argument_list|,
literal|"Transfer error from repository \"{}"
operator|+
literal|"\" for resource {}, continuing to next repository. Error message: {}"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Exhausted all target repositories, resource {} not found."
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProxyFetchResult
name|fetchMetadataFromProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|String
name|logicalPath
parameter_list|)
block|{
name|StorageAsset
name|localFile
init|=
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|logicalPath
argument_list|)
decl_stmt|;
name|Properties
name|requestProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"filetype"
argument_list|,
literal|"metadata"
argument_list|)
expr_stmt|;
name|boolean
name|metadataNeedsUpdating
init|=
literal|false
decl_stmt|;
name|long
name|originalTimestamp
init|=
name|getLastModified
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|connectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getProxyConnectors
argument_list|(
name|repository
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RemoteRepository
name|targetRepository
init|=
name|connector
operator|.
name|getTargetRepository
argument_list|()
decl_stmt|;
name|StorageAsset
name|localRepoFile
init|=
name|toLocalRepoFile
argument_list|(
name|repository
argument_list|,
name|targetRepository
operator|.
name|getContent
argument_list|()
argument_list|,
name|logicalPath
argument_list|)
decl_stmt|;
name|long
name|originalMetadataTimestamp
init|=
name|getLastModified
argument_list|(
name|localRepoFile
argument_list|)
decl_stmt|;
try|try
block|{
name|transferFile
argument_list|(
name|connector
argument_list|,
name|targetRepository
operator|.
name|getContent
argument_list|()
argument_list|,
name|logicalPath
argument_list|,
name|repository
argument_list|,
name|localRepoFile
argument_list|,
name|requestProperties
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasBeenUpdated
argument_list|(
name|localRepoFile
argument_list|,
name|originalMetadataTimestamp
argument_list|)
condition|)
block|{
name|metadataNeedsUpdating
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Metadata {} not found on remote repository '{}'."
argument_list|,
name|logicalPath
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotModifiedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Metadata {} not updated on remote repository '{}'."
argument_list|,
name|logicalPath
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProxyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer error from repository {} for versioned Metadata {}, continuing to next repository. Error message: {}"
argument_list|,
name|targetRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|logicalPath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Full stack trace"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasBeenUpdated
argument_list|(
name|localFile
argument_list|,
name|originalTimestamp
argument_list|)
condition|)
block|{
name|metadataNeedsUpdating
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|metadataNeedsUpdating
operator|||
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|metadataTools
operator|.
name|updateMetadata
argument_list|(
name|repository
argument_list|,
name|logicalPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMetadataException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to update metadata {}:{}"
argument_list|,
name|localFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileExists
argument_list|(
name|localFile
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProxyFetchResult
argument_list|(
name|localFile
argument_list|,
name|metadataNeedsUpdating
argument_list|)
return|;
block|}
return|return
operator|new
name|ProxyFetchResult
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|long
name|getLastModified
parameter_list|(
name|StorageAsset
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|isContainer
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|file
operator|.
name|getModificationTime
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|hasBeenUpdated
parameter_list|(
name|StorageAsset
name|file
parameter_list|,
name|long
name|originalLastModified
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|isContainer
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|currentLastModified
init|=
name|getLastModified
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
operator|(
name|currentLastModified
operator|>
name|originalLastModified
operator|)
return|;
block|}
specifier|private
name|StorageAsset
name|toLocalRepoFile
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|RemoteRepositoryContent
name|targetRepository
parameter_list|,
name|String
name|targetPath
parameter_list|)
block|{
name|String
name|repoPath
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|targetRepository
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
return|return
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|repoPath
argument_list|)
return|;
block|}
comment|/**      * Test if the provided ManagedRepositoryContent has any proxies configured for it.      */
annotation|@
name|Override
specifier|public
name|boolean
name|hasProxies
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|proxyConnectorMap
init|)
block|{
return|return
name|this
operator|.
name|proxyConnectorMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|StorageAsset
name|toLocalFile
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|)
block|{
return|return
name|repository
operator|.
name|toFile
argument_list|(
name|artifact
argument_list|)
return|;
block|}
comment|/**      * Simple method to test if the file exists on the local disk.      *      * @param file the file to test. (may be null)      * @return true if file exists. false if the file param is null, doesn't exist, or is not of type File.      */
specifier|private
name|boolean
name|fileExists
parameter_list|(
name|StorageAsset
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|file
operator|.
name|isContainer
argument_list|()
return|;
block|}
comment|/**      * Perform the transfer of the file.      *      * @param connector         the connector configuration to use.      * @param remoteRepository  the remote repository get the resource from.      * @param remotePath        the path in the remote repository to the resource to get.      * @param repository        the managed repository that will hold the file      * @param resource          the path relative to the repository storage where the file should be downloaded to      * @param requestProperties the request properties to utilize for policy handling.      * @param executeConsumers  whether to execute the consumers after proxying      * @return the local file that was downloaded, or null if not downloaded.      * @throws NotFoundException    if the file was not found on the remote repository.      * @throws NotModifiedException if the localFile was present, and the resource was present on remote repository, but      *                              the remote resource is not newer than the local File.      * @throws ProxyException       if transfer was unsuccessful.      */
specifier|protected
name|StorageAsset
name|transferFile
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|,
name|RemoteRepositoryContent
name|remoteRepository
parameter_list|,
name|String
name|remotePath
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|StorageAsset
name|resource
parameter_list|,
name|Properties
name|requestProperties
parameter_list|,
name|boolean
name|executeConsumers
parameter_list|)
throws|throws
name|ProxyException
throws|,
name|NotModifiedException
block|{
name|String
name|url
init|=
name|remoteRepository
operator|.
name|getURL
argument_list|()
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"/"
expr_stmt|;
block|}
name|url
operator|=
name|url
operator|+
name|remotePath
expr_stmt|;
name|requestProperties
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// Is a whitelist defined?
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|connector
operator|.
name|getWhitelist
argument_list|()
argument_list|)
condition|)
block|{
comment|// Path must belong to whitelist.
if|if
condition|(
operator|!
name|matchesPattern
argument_list|(
name|remotePath
argument_list|,
name|connector
operator|.
name|getWhitelist
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Path [{}] is not part of defined whitelist (skipping transfer from repository [{}])."
argument_list|,
name|remotePath
argument_list|,
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Is target path part of blacklist?
if|if
condition|(
name|matchesPattern
argument_list|(
name|remotePath
argument_list|,
name|connector
operator|.
name|getBlacklist
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Path [{}] is part of blacklist (skipping transfer from repository [{}])."
argument_list|,
name|remotePath
argument_list|,
name|remoteRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Handle pre-download policy
try|try
block|{
name|validatePolicies
argument_list|(
name|this
operator|.
name|preDownloadPolicies
argument_list|,
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|,
name|requestProperties
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyViolationException
name|e
parameter_list|)
block|{
name|String
name|emsg
init|=
literal|"Transfer not attempted on "
operator|+
name|url
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} : using already present local file."
argument_list|,
name|emsg
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
name|emsg
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Path
name|workingDirectory
init|=
name|createWorkingDirectory
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|FilesystemStorage
name|tmpStorage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpStorage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|workingDirectory
argument_list|,
name|fileLockManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Could not create tmp storage"
argument_list|)
throw|;
block|}
name|StorageAsset
name|tmpResource
init|=
name|tmpStorage
operator|.
name|getAsset
argument_list|(
name|resource
operator|.
name|getName
argument_list|( )
argument_list|)
decl_stmt|;
name|StorageAsset
index|[]
name|tmpChecksumFiles
init|=
operator|new
name|StorageAsset
index|[
name|checksumAlgorithms
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checksumAlgorithms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ChecksumAlgorithm
name|alg
init|=
name|checksumAlgorithms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|tmpChecksumFiles
index|[
name|i
index|]
operator|=
name|tmpStorage
operator|.
name|getAsset
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|alg
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|transferResources
argument_list|(
name|connector
argument_list|,
name|remoteRepository
argument_list|,
name|tmpResource
argument_list|,
name|tmpChecksumFiles
argument_list|,
name|url
argument_list|,
name|remotePath
argument_list|,
name|resource
argument_list|,
name|workingDirectory
argument_list|,
name|repository
argument_list|)
expr_stmt|;
comment|// Handle post-download policies.
try|try
block|{
name|validatePolicies
argument_list|(
name|this
operator|.
name|postDownloadPolicies
argument_list|,
name|connector
operator|.
name|getPolicies
argument_list|()
argument_list|,
name|requestProperties
argument_list|,
name|tmpResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyViolationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer invalidated from {} : {}"
argument_list|,
name|url
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|executeConsumers
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|fileExists
argument_list|(
name|tmpResource
argument_list|)
condition|)
block|{
name|resource
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|resource
operator|.
name|getPath
argument_list|()
operator|.
name|intern
argument_list|()
init|)
block|{
name|StorageAsset
name|directory
init|=
name|resource
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmpChecksumFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|moveFileIfExists
argument_list|(
name|tmpChecksumFiles
index|[
name|i
index|]
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
name|moveFileIfExists
argument_list|(
name|tmpResource
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|workingDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executeConsumers
condition|)
block|{
comment|// Just-in-time update of the index and database by executing the consumers for this artifact
comment|//consumers.executeConsumers( connector.getSourceRepository().getRepository(), resource );
name|queueRepositoryTask
argument_list|(
name|connector
operator|.
name|getSourceRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|transferResources
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|,
name|RemoteRepositoryContent
name|remoteRepository
parameter_list|,
name|StorageAsset
name|tmpResource
parameter_list|,
name|StorageAsset
index|[]
name|checksumFiles
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|remotePath
parameter_list|,
name|StorageAsset
name|resource
parameter_list|,
name|Path
name|workingDirectory
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|)
throws|throws
name|ProxyException
function_decl|;
specifier|private
name|void
name|queueRepositoryTask
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|StorageAsset
name|localFile
parameter_list|)
block|{
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setResourceFile
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|task
operator|.
name|setUpdateRelatedArtifacts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to queue repository task to execute consumers on resource file ['{}"
operator|+
literal|"']."
argument_list|,
name|localFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Moves the file into repository location if it exists      *      * @param fileToMove this could be either the main artifact, sha1 or md5 checksum file.      * @param directory  directory to write files to      */
specifier|private
name|void
name|moveFileIfExists
parameter_list|(
name|StorageAsset
name|fileToMove
parameter_list|,
name|StorageAsset
name|directory
parameter_list|)
throws|throws
name|ProxyException
block|{
if|if
condition|(
name|fileToMove
operator|!=
literal|null
operator|&&
name|fileToMove
operator|.
name|exists
argument_list|()
condition|)
block|{
name|StorageAsset
name|newLocation
init|=
name|directory
operator|.
name|getStorage
argument_list|()
operator|.
name|getAsset
argument_list|(
name|directory
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|fileToMove
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|moveTempToTarget
argument_list|(
name|fileToMove
argument_list|,
name|newLocation
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Apply the policies.      *      * @param policies  the map of policies to execute. (Map of String policy keys, to {@link DownloadPolicy} objects)      * @param settings  the map of settings for the policies to execute. (Map of String policy keys, to String policy      *                  setting)      * @param request   the request properties (utilized by the {@link DownloadPolicy#applyPolicy(String, Properties, StorageAsset)}      *                  )      * @param localFile the local file (utilized by the {@link DownloadPolicy#applyPolicy(String, Properties, StorageAsset)})      * @throws PolicyViolationException      */
specifier|private
name|void
name|validatePolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DownloadPolicy
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|,
name|Properties
name|request
parameter_list|,
name|StorageAsset
name|localFile
parameter_list|)
throws|throws
name|PolicyViolationException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DownloadPolicy
argument_list|>
name|entry
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// olamy with spring rolehint is now downloadPolicy#hint
comment|// so substring after last # to get the hint as with plexus
name|String
name|key
init|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|DownloadPolicy
name|policy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|defaultSetting
init|=
name|policy
operator|.
name|getDefaultOption
argument_list|()
decl_stmt|;
name|String
name|setting
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultSetting
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Applying [{}] policy with [{}]"
argument_list|,
name|key
argument_list|,
name|setting
argument_list|)
expr_stmt|;
try|try
block|{
name|policy
operator|.
name|applyPolicy
argument_list|(
name|setting
argument_list|,
name|request
argument_list|,
name|localFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|validatePolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|,
name|Properties
name|request
parameter_list|,
name|ArtifactReference
name|artifact
parameter_list|,
name|RemoteRepositoryContent
name|content
parameter_list|,
name|StorageAsset
name|localFile
parameter_list|,
name|Exception
name|exception
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|previousExceptions
parameter_list|)
throws|throws
name|ProxyDownloadException
block|{
name|boolean
name|process
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DownloadErrorPolicy
argument_list|>
name|entry
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// olamy with spring rolehint is now downloadPolicy#hint
comment|// so substring after last # to get the hint as with plexus
name|String
name|key
init|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|DownloadErrorPolicy
name|policy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|defaultSetting
init|=
name|policy
operator|.
name|getDefaultOption
argument_list|()
decl_stmt|;
name|String
name|setting
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultSetting
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Applying [{}] policy with [{}]"
argument_list|,
name|key
argument_list|,
name|setting
argument_list|)
expr_stmt|;
try|try
block|{
comment|// all policies must approve the exception, any can cancel
name|process
operator|=
name|policy
operator|.
name|applyPolicy
argument_list|(
name|setting
argument_list|,
name|request
argument_list|,
name|localFile
argument_list|,
name|exception
argument_list|,
name|previousExceptions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|process
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|PolicyConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|process
condition|)
block|{
comment|// if the exception was queued, don't throw it
if|if
condition|(
operator|!
name|previousExceptions
operator|.
name|containsKey
argument_list|(
name|content
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProxyDownloadException
argument_list|(
literal|"An error occurred in downloading from the remote repository, and the policy is to fail immediately"
argument_list|,
name|content
operator|.
name|getId
argument_list|()
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// if the exception was queued, but cancelled, remove it
name|previousExceptions
operator|.
name|remove
argument_list|(
name|content
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Transfer error from repository {} for artifact {} , continuing to next repository. Error message: {}"
argument_list|,
name|content
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|Keys
operator|.
name|toKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Full stack trace"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a working directory      *      * @param repository      * @return file location of working directory      */
specifier|private
name|Path
name|createWorkingDirectory
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
try|try
block|{
return|return
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"temp"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Used to move the temporary file to its real destination. This is patterned from the way WagonManager handles its      * downloaded files.      *      * @param temp   The completed download file      * @param target The final location of the downloaded file      * @throws ProxyException when the temp file cannot replace the target file      */
specifier|private
name|void
name|moveTempToTarget
parameter_list|(
name|StorageAsset
name|temp
parameter_list|,
name|StorageAsset
name|target
parameter_list|)
throws|throws
name|ProxyException
block|{
try|try
block|{
name|StorageUtil
operator|.
name|moveAsset
argument_list|(
name|temp
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Move failed from {} to {}, trying copy."
argument_list|,
name|temp
argument_list|,
name|target
argument_list|)
expr_stmt|;
try|try
block|{
name|StorageUtil
operator|.
name|copyAsset
argument_list|(
name|temp
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|temp
operator|.
name|getStorage
argument_list|( )
operator|.
name|removeAsset
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Copy failed from {} to {}: ({}) {}"
argument_list|,
name|temp
argument_list|,
name|target
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProxyException
argument_list|(
literal|"Could not move temp file "
operator|+
name|temp
operator|.
name|getPath
argument_list|()
operator|+
literal|" to target "
operator|+
name|target
operator|.
name|getPath
argument_list|()
operator|+
literal|": ("
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|") "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Tests whitelist and blacklist patterns against path.      *      * @param path     the path to test.      * @param patterns the list of patterns to check.      * @return true if the path matches at least 1 pattern in the provided patterns list.      */
specifier|private
name|boolean
name|matchesPattern
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|patterns
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
if|if
condition|(
operator|!
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pattern
operator|=
literal|"/"
operator|+
name|pattern
expr_stmt|;
block|}
if|if
condition|(
name|SelectorUtils
operator|.
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * TODO: Ensure that list is correctly ordered based on configuration. See MRM-477      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|getProxyConnectors
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|proxyConnectorMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
name|ProxyConnectorOrderComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ConfigurationNames
operator|.
name|isManagedRepositories
argument_list|(
name|propertyName
argument_list|)
comment|//
operator|||
name|ConfigurationNames
operator|.
name|isRemoteRepositories
argument_list|(
name|propertyName
argument_list|)
comment|//
operator|||
name|ConfigurationNames
operator|.
name|isProxyConnector
argument_list|(
name|propertyName
argument_list|)
condition|)
comment|//
block|{
name|initConnectors
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|ConfigurationNames
operator|.
name|isNetworkProxy
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|updateNetworkProxies
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|addParameters
parameter_list|(
name|String
name|path
parameter_list|,
name|RemoteRepository
name|remoteRepository
parameter_list|)
block|{
if|if
condition|(
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
name|boolean
name|question
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|==
literal|null
condition|?
literal|""
else|:
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|question
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* do nothing */
block|}
specifier|public
name|ArchivaConfiguration
name|getArchivaConfiguration
parameter_list|()
block|{
return|return
name|archivaConfiguration
return|;
block|}
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
block|}
specifier|public
name|MetadataTools
name|getMetadataTools
parameter_list|()
block|{
return|return
name|metadataTools
return|;
block|}
specifier|public
name|void
name|setMetadataTools
parameter_list|(
name|MetadataTools
name|metadataTools
parameter_list|)
block|{
name|this
operator|.
name|metadataTools
operator|=
name|metadataTools
expr_stmt|;
block|}
specifier|public
name|UrlFailureCache
name|getUrlFailureCache
parameter_list|()
block|{
return|return
name|urlFailureCache
return|;
block|}
specifier|public
name|void
name|setUrlFailureCache
parameter_list|(
name|UrlFailureCache
name|urlFailureCache
parameter_list|)
block|{
name|this
operator|.
name|urlFailureCache
operator|=
name|urlFailureCache
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PreDownloadPolicy
argument_list|>
name|getPreDownloadPolicies
parameter_list|()
block|{
return|return
name|preDownloadPolicies
return|;
block|}
specifier|public
name|void
name|setPreDownloadPolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PreDownloadPolicy
argument_list|>
name|preDownloadPolicies
parameter_list|)
block|{
name|this
operator|.
name|preDownloadPolicies
operator|=
name|preDownloadPolicies
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PostDownloadPolicy
argument_list|>
name|getPostDownloadPolicies
parameter_list|()
block|{
return|return
name|postDownloadPolicies
return|;
block|}
specifier|public
name|void
name|setPostDownloadPolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PostDownloadPolicy
argument_list|>
name|postDownloadPolicies
parameter_list|)
block|{
name|this
operator|.
name|postDownloadPolicies
operator|=
name|postDownloadPolicies
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|getDownloadErrorPolicies
parameter_list|()
block|{
return|return
name|downloadErrorPolicies
return|;
block|}
specifier|public
name|void
name|setDownloadErrorPolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DownloadErrorPolicy
argument_list|>
name|downloadErrorPolicies
parameter_list|)
block|{
name|this
operator|.
name|downloadErrorPolicies
operator|=
name|downloadErrorPolicies
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNetworkProxies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
name|proxies
parameter_list|)
block|{
name|this
operator|.
name|networkProxyMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|networkProxyMap
operator|.
name|putAll
argument_list|(
name|proxies
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NetworkProxy
name|getNetworkProxy
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|this
operator|.
name|networkProxyMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
name|getNetworkProxies
parameter_list|()
block|{
return|return
name|this
operator|.
name|networkProxyMap
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|List
argument_list|<
name|RepositoryType
argument_list|>
name|supports
parameter_list|()
function_decl|;
block|}
end_class

end_unit

