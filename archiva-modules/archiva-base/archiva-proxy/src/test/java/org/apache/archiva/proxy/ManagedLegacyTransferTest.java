begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|CachedFailuresPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ChecksumPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ReleasesPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|SnapshotsPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * ManagedLegacyTransferTest   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ManagedLegacyTransferTest
extends|extends
name|AbstractProxyTestCase
block|{
comment|/**      * Incoming request on a Managed Legacy repository, for content that does not      * exist in the managed legacy repository, but does exist on a remote default layout repository.      */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyNotPresentRemoteDefaultPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotExistsInManagedLegacyRepo
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|File
name|proxied2File
init|=
operator|new
name|File
argument_list|(
name|REPOPATH_PROXIED1
argument_list|,
literal|"org/apache/maven/test/get-default-layout/1.0/get-default-layout-1.0.jar"
argument_list|)
decl_stmt|;
name|assertFileEquals
argument_list|(
name|expectedFile
argument_list|,
name|downloadedFile
argument_list|,
name|proxied2File
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that already      * exist in the managed legacy repository, and also exist on a remote default layout repository.      */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyPresentRemoteDefaultPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|String
name|remotePath
init|=
literal|"org/apache/maven/test/get-default-layout-present/1.0/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|File
name|remoteFile
init|=
operator|new
name|File
argument_list|(
name|REPOPATH_PROXIED1
argument_list|,
name|remotePath
argument_list|)
decl_stmt|;
name|setManagedOlderThanRemote
argument_list|(
name|expectedFile
argument_list|,
name|remoteFile
argument_list|)
expr_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|assertFileEquals
argument_list|(
name|expectedFile
argument_list|,
name|downloadedFile
argument_list|,
name|remoteFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that does not      * exist in the managed legacy repository, and does not exist on a remote legacy layout repository.      */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyNotPresentRemoteLegacyPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/plugins/get-legacy-plugin-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotExistsInManagedLegacyRepo
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_LEGACY_PROXIED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|File
name|proxiedFile
init|=
operator|new
name|File
argument_list|(
name|REPOPATH_PROXIED_LEGACY
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertFileEquals
argument_list|(
name|expectedFile
argument_list|,
name|downloadedFile
argument_list|,
name|proxiedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that does exist in the       * managed legacy repository, and also exists on a remote legacy layout repository.       */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyPresentRemoteLegacyPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/get-default-layout-present-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|File
name|remoteFile
init|=
operator|new
name|File
argument_list|(
name|REPOPATH_PROXIED_LEGACY
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|setManagedOlderThanRemote
argument_list|(
name|expectedFile
argument_list|,
name|remoteFile
argument_list|)
expr_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_LEGACY_PROXIED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|assertFileEquals
argument_list|(
name|expectedFile
argument_list|,
name|downloadedFile
argument_list|,
name|remoteFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that does exist in the       * managed legacy repository, and does not exist on a remote legacy layout repository.       */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyPresentRemoteLegacyNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/managed-only-lib-2.1.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_LEGACY_PROXIED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|assertNotDownloaded
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that does exist in the       * managed legacy repository, and does not exists on a remote default layout repository.       */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyPresentRemoteDefaultNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.maven.test/jars/managed-only-lib-2.1.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|assertNotDownloaded
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that does not exist in the       * managed legacy repository, and does not exists on a remote legacy layout repository.       */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyNotPresentRemoteLegacyNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.archiva.test/jars/mystery-lib-1.0.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotExistsInManagedLegacyRepo
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_LEGACY_PROXIED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|assertNotDownloaded
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Incoming request on a Managed Legacy repository, for content that does not exist in the       * managed legacy repository, and does not exists on a remote default layout repository.       */
annotation|@
name|Test
specifier|public
name|void
name|testManagedLegacyNotPresentRemoteDefaultNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"org.apache.archiva.test/jars/mystery-lib-2.1.jar"
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|managedLegacyDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifact
init|=
name|managedLegacyRepository
operator|.
name|toArtifactReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotExistsInManagedLegacyRepo
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_LEGACY_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchFromProxies
argument_list|(
name|managedLegacyRepository
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|assertNotDownloaded
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

