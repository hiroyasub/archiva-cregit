begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|metadata
operator|.
name|MavenMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|CachedFailuresPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ChecksumPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ReleasesPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|policies
operator|.
name|SnapshotsPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|TransferFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|DetailedDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * MetadataTransferTest - Tests the various fetching / merging concepts surrounding the maven-metadata.xml files  * present in the repository.  *<p/>  * Test Case Naming is as follows.  *<p/>  *<code>  * public void testGet[Release|Snapshot|Project]Metadata[Not]Proxied[Not|On]Local[Not|On|Multiple]Remote  *</code>  *<p/>  *<pre>  * Which should leave the following matrix of test cases.  *  *   Metadata  | Proxied  | Local | Remote  *   ----------+----------+-------+---------  *   Release   | Not      | Not   | n/a (1)  *   Release   | Not      | On    | n/a (1)  *   Release   |          | Not   | Not  *   Release   |          | Not   | On  *   Release   |          | Not   | Multiple  *   Release   |          | On    | Not  *   Release   |          | On    | On  *   Release   |          | On    | Multiple  *   Snapshot  | Not      | Not   | n/a (1)  *   Snapshot  | Not      | On    | n/a (1)  *   Snapshot  |          | Not   | Not  *   Snapshot  |          | Not   | On  *   Snapshot  |          | Not   | Multiple  *   Snapshot  |          | On    | Not  *   Snapshot  |          | On    | On  *   Snapshot  |          | On    | Multiple  *   Project   | Not      | Not   | n/a (1)  *   Project   | Not      | On    | n/a (1)  *   Project   |          | Not   | Not  *   Project   |          | Not   | On  *   Project   |          | Not   | Multiple  *   Project   |          | On    | Not  *   Project   |          | On    | On  *   Project   |          | On    | Multiple  *  * (1) If it isn't proxied, no point in having a remote.  *</pre>  *  *  */
end_comment

begin_class
specifier|public
class|class
name|MetadataTransferTest
extends|extends
name|AbstractProxyTestCase
block|{
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"metadataTools#mocked"
argument_list|)
specifier|private
name|MetadataTools
name|metadataTools
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedNotLocalOnRemoteConnectoDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// New project metadata that does not exist locally but exists on remote.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-found-in-proxy/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|ProjectReference
name|metadata
init|=
name|createProjectReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchMetadataFromProxies
argument_list|(
name|managedDefaultRepository
argument_list|,
name|managedDefaultRepository
operator|.
name|toMetadataPath
argument_list|(
name|metadata
argument_list|)
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Should not have downloaded a file."
argument_list|,
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|// TODO: same test for other fetch* methods
annotation|@
name|Test
specifier|public
name|void
name|testFetchFromTwoProxiesWhenFirstConnectionFails
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that does not exist locally, but has multiple versions in remote repos
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-layout/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|saveRemoteRepositoryConfig
argument_list|(
literal|"badproxied1"
argument_list|,
literal|"Bad Proxied 1"
argument_list|,
literal|"test://bad.machine.com/repo/"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
literal|"badproxied1"
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
literal|"badproxied1"
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// ensure that a hard failure in the first proxy connector is skipped and the second repository checked
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
literal|"badproxied1"
argument_list|,
name|requestedResource
argument_list|)
argument_list|)
decl_stmt|;
name|wagonMock
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|requestedResource
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|TransferFailedException
argument_list|(
literal|"can't connect"
argument_list|)
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|wagonMockControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.1"
block|}
argument_list|,
literal|"1.0.1"
argument_list|,
literal|"1.0.1"
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
literal|"badproxied1"
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.1"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempt to get the project metadata for non-existant artifact.      *<p/>      * Expected result: the maven-metadata.xml file is not created on the managed repository, nor returned      * to the requesting client.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataNotProxiedNotLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId "get-default-metadata-nonexistant" does not exist (intentionally).
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-metadata-nonexistant/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProxyConnectors
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|( )
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched, failure expected.
name|assertFetchProjectOrGroupFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No local artifactId, and no fetch, should equal no metadata file downloaded / created / updated.
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataNotProxiedOnLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exists and has multiple versions
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-project-metadata/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProxyConnectors
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|( )
argument_list|)
expr_stmt|;
name|assertResourceExists
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched from remote, but local exists.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Nothing fetched.  Should only contain contents of what is in the repository.
comment|// A metadata update is not performed in this use case.  Local metadata content is only
comment|// updated via the metadata updater consumer.
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedNotLocalMultipleRemotes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that does not exist locally, but has multiple versions in remote repos
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-layout/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, metadata fetched from both remotes.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Nothing fetched.  Should only contain contents of what is in the repository.
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1.0.1"
block|}
argument_list|,
literal|"1.0.1"
argument_list|,
literal|"1.0.1"
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|}
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedNotLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Non-existant project metadata that does not exist locally and doesn't exist on remotes.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-bogus-artifact/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, nothing fetched from remotes, local does not exist.
name|assertFetchProjectOrGroupFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Nothing fetched.  Nothing should exist.
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedNotLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// New project metadata that does not exist locally but exists on remote.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-found-in-proxy/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// One proxy setup, metadata fetched from remote, local does not exist.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Remote fetched.  Local created/updated.
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.5"
block|}
argument_list|,
literal|"1.0.5"
argument_list|,
literal|"1.0.5"
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.5"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedOnLocalMultipleRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exist locally, and has multiple versions in remote repos
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-on-multiple-repos/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, metadata fetched from both remotes.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// metadata fetched from both repos, and merged with local version.
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1.0.1"
block|,
literal|"2.0"
block|}
argument_list|,
literal|"2.0"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"2.0"
block|}
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1.0.1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedOnLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exist locally, and does not exist in remote repos.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-not-on-remotes/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProxyConnectors
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|( )
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-beta-2"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, metadata fetch from remotes fail (because they dont exist).
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// metadata not fetched from both repos, and local version exists.
comment|// Since there was no updated metadata content from a remote/proxy, a metadata update on
comment|// the local file never ran.  Local only updates are performed via the metadata updater consumer.
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-beta-2"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProjectMetadataProxiedOnLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exist locally and exists on remote.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-on-local-on-remote/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.8"
block|,
literal|"1.0.22"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// One proxy setup, metadata fetched from remote, local exists.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Remote fetched.  Local updated.
name|assertProjectMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.8"
block|,
literal|"1.0.22"
block|,
literal|"2.0"
block|}
argument_list|,
literal|"2.0"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|assertRepoProjectMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0.22"
block|,
literal|"2.0"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a release maven-metadata.xml file that does not exist locally, and the managed      * repository has no proxied repositories set up.      *<p/>      * Expected result: the maven-metadata.xml file is not created on the managed repository, nor returned      * to the requesting client.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataNotProxiedNotLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId "get-default-metadata-nonexistant" does not exist (intentionally).
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-metadata-nonexistant/1.0/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoMetadata
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched, failure expected.
name|assertFetchVersionedFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No local artifactId, and no fetch, should equal no metadata file downloaded / created / updated.
name|assertNoMetadata
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a maven-metadata.xml file that does exist locally, and the managed      * repository has no proxied repositories set up.      *<p/>      * Expected result: the maven-metadata.xml file is updated locally, based off of the managed repository      * information, and then returned to the client.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataNotProxiedOnLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-metadata/1.0/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertResourceExists
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a release maven-metadata.xml file that does not exist on the managed repository, but      * exists on multiple remote repositories.      *<p/>      * Expected result: the maven-metadata.xml file is downloaded from the remote into the repository specific      * file location on the managed repository, a merge of the contents to the requested      * maven-metadata.xml is performed, and then the merged maven-metadata.xml file is      * returned to the client.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataProxiedNotLocalMultipleRemotes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoReleaseMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoReleaseMetadataContents
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a maven-metadata.xml file that does not exist locally, nor does it exist in a remote      * proxied repository.      *<p/>      * Expected result: the maven-metadata.xml file is created locally, based off of managed repository      * information, and then return to the client.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataProxiedNotLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-bad-metadata/1.0/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchProjectOrGroupFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a maven-metadata.xml file that does not exist on the managed repository, but      * exists on 1 remote repository.      *<p/>      * Expected result: the maven-metadata.xml file is downloaded from the remote into the repository specific      * file location on the managed repository, a merge of the contents to the requested      * maven-metadata.xml is performed, and then the merged maven-metadata.xml file is      * returned to the client.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataProxiedNotLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-layout/1.0/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoReleaseMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a maven-metadata.xml file that exists in the managed repository, but      * not on any remote repository.      *<p/>      * Expected result: the maven-metadata.xml file does not exist on the remote proxied repository and      * is not downloaded.  There is no repository specific metadata file on the managed      * repository.  The managed repository maven-metadata.xml is returned to the      * client as-is.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataProxiedOnLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-not-on-remotes/1.0-beta-2/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a maven-metadata.xml file that exists in the managed repository, and on multiple      * remote repositories.      *<p/>      * Expected result: the maven-metadata.xml file on the remote proxied repository is downloaded      * and merged into the contents of the existing managed repository copy of      * the maven-metadata.xml file.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataProxiedOnLocalMultipleRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-on-multiple-repos/1.0/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoReleaseMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoReleaseMetadataContents
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * A request for a maven-metadata.xml file that exists in the managed repository, and on one      * remote repository.      *<p/>      * Expected result: the maven-metadata.xml file on the remote proxied repository is downloaded      * and merged into the contents of the existing managed repository copy of      * the maven-metadata.xml file.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReleaseMetadataProxiedOnLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-on-local-on-remote/1.0.22/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertReleaseMetadataContents
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertRepoReleaseMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataNotProxiedNotLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId "get-default-metadata-nonexistant" does not exist (intentionally).
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-metadata-nonexistant/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoMetadata
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched, no local file, failure expected.
name|assertFetchVersionedFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No local artifactId, and no fetch, should equal no metadata file downloaded / created / updated.
name|assertNoMetadata
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataNotProxiedOnLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId exists locally (but not on a remote repo)
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-snapshot-on-local-not-remote/2.0-alpha-2-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertResourceExists
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched from remote, local file exists, fetch should succeed.
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Local metadata exists, should be updated to reflect the latest release.
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20070821"
argument_list|,
literal|"220304"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataProxiedNotLocalMultipleRemotes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-timestamped-snapshot-in-both/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Proxying 2 repos, both have content, local file updated.
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20070101"
argument_list|,
literal|"000103"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRepoSnapshotMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
literal|"20061227"
argument_list|,
literal|"112101"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRepoSnapshotMetadataContents
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
literal|"20070101"
argument_list|,
literal|"000103"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataProxiedNotLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId "get-default-metadata-nonexistant" does not exist (intentionally).
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-default-metadata-nonexistant/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoMetadata
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// One proxy setup, nothing fetched, no local file, failure expected.
name|assertFetchVersionedFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No local artifactId, and no fetch, should equal no metadata file downloaded / created / updated.
name|assertNoMetadata
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataProxiedNotLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Artifact exists only in the proxied1 location.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-metadata-snapshot/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// One proxy setup, one metadata fetched, local file created/updated.
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Local artifact Id should contain latest (which in this case is from proxied download)
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20050831"
argument_list|,
literal|"101112"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRepoSnapshotMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
literal|"20050831"
argument_list|,
literal|"101112"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataProxiedOnLocalMultipleRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-snapshot-popular/2.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20070822"
argument_list|,
literal|"021008"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Proxying 2 repos, both have content, local file updated.
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20070823"
argument_list|,
literal|"212711"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertRepoSnapshotMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
literal|"20070822"
argument_list|,
literal|"145534"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertRepoSnapshotMetadataContents
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
literal|"20070823"
argument_list|,
literal|"212711"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataProxiedOnLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId exists locally (but not on a remote repo)
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-snapshot-on-local-not-remote/2.0-alpha-2-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceExists
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// two proxies setup, nothing fetched from either remote, local file exists, fetch should succeed.
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Local metadata exists, repo metadatas should not exist, local file updated.
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20070821"
argument_list|,
literal|"220304"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSnapshotMetadataProxiedOnLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId exists locally (but not on a remote repo)
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/get-present-metadata-snapshot/1.0-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20050831"
argument_list|,
literal|"101112"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// two proxies setup, nothing fetched from either remote, local file exists, fetch should succeed.
name|assertFetchVersioned
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Local metadata exists, repo metadata exists, local file updated.
name|assertSnapshotMetadataContents
argument_list|(
name|requestedResource
argument_list|,
literal|"20050831"
argument_list|,
literal|"101112"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRepoSnapshotMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
literal|"20050831"
argument_list|,
literal|"101112"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataNotProxiedNotLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The artifactId "get-default-metadata-nonexistant" does not exist (intentionally).
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-default-metadata-nonexistant/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched, failure expected.
name|assertFetchProjectOrGroupFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No local artifactId, and no fetch, should equal no metadata file downloaded / created / updated.
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataNotProxiedOnLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exists and has multiple versions
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-project-metadata/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertResourceExists
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// No proxy setup, nothing fetched from remote, but local exists.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Nothing fetched.  Should only contain contents of what is in the repository.
comment|// A metadata update is not performed in this use case.  Local metadata content is only
comment|// updated via the metadata updater consumer.
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataProxiedNotLocalMultipleRemotes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that does not exist locally, but has multiple versions in remote repos
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-default-layout/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, metadata fetched from both remotes.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Nothing fetched.  Should only contain contents of what is in the repository.
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin2"
block|,
literal|"plugin1"
block|}
argument_list|)
expr_stmt|;
name|assertRepoGroupMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin1"
block|}
argument_list|)
expr_stmt|;
name|assertRepoGroupMetadataContents
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupsMetadataProxiedNotLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Non-existant project metadata that does not exist locally and doesn't exist on remotes.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-bogus-artifact/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, nothing fetched from remotes, local does not exist.
name|assertFetchProjectOrGroupFailed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Nothing fetched.  Nothing should exist.
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataProxiedNotLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// New project metadata that does not exist locally but exists on remote.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-found-in-proxy/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertResourceNotFound
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// One proxy setup, metadata fetched from remote, local does not exist.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Remote fetched.  Local created/updated.
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin3"
block|}
argument_list|)
expr_stmt|;
name|assertRepoGroupMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin3"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataProxiedOnLocalMultipleRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exist locally, and has multiple versions in remote repos
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-on-multiple-repos/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin1"
block|}
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, metadata fetched from both remotes.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// metadata fetched from both repos, and merged with local version.
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin1"
block|,
literal|"plugin2"
block|,
literal|"plugin4"
block|}
argument_list|)
expr_stmt|;
name|assertRepoGroupMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin1"
block|,
literal|"plugin4"
block|}
argument_list|)
expr_stmt|;
name|assertRepoGroupMetadataContents
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin1"
block|,
literal|"plugin2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataProxiedOnLocalNotRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exist locally, and does not exist in remote repos.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-not-on-remotes/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED2
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin5"
block|}
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Two proxies setup, metadata fetch from remotes fail (because they dont exist).
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// metadata not fetched from both repos, and local version exists.
comment|// Since there was no updated metadata content from a remote/proxy, a metadata update on
comment|// the local file never ran.  Local only updates are performed via the metadata updater consumer.
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin5"
block|}
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED2
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMetadataProxiedOnLocalOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Project metadata that exist locally and exists on remote.
name|String
name|requestedResource
init|=
literal|"org/apache/maven/test/groups/get-on-local-on-remote/maven-metadata.xml"
decl_stmt|;
name|setupTestableManagedRepository
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Configure Connector (usually done within archiva.xml configuration)
name|saveConnector
argument_list|(
name|ID_DEFAULT_MANAGED
argument_list|,
name|ID_PROXIED1
argument_list|,
name|ChecksumPolicy
operator|.
name|FIX
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin6"
block|,
literal|"plugin7"
block|}
argument_list|)
expr_stmt|;
name|assertNoRepoMetadata
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|)
expr_stmt|;
comment|// One proxy setup, metadata fetched from remote, local exists.
name|assertFetchProjectOrGroup
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
comment|// Remote fetched.  Local updated.
name|assertGroupMetadataContents
argument_list|(
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin6"
block|,
literal|"plugin7"
block|,
literal|"plugin4"
block|}
argument_list|)
expr_stmt|;
name|assertRepoGroupMetadataContents
argument_list|(
name|ID_PROXIED1
argument_list|,
name|requestedResource
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plugin7"
block|,
literal|"plugin4"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Transfer the metadata file.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertFetchProjectOrGroup
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|ProjectReference
name|metadata
init|=
name|createProjectReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchMetadataFromProxies
argument_list|(
name|managedDefaultRepository
argument_list|,
name|managedDefaultRepository
operator|.
name|toMetadataPath
argument_list|(
name|metadata
argument_list|)
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have downloaded a file."
argument_list|,
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ProjectReference
name|createProjectReference
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
return|return
name|metadataTools
operator|.
name|toProjectReference
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Transfer the metadata file, not expected to succeed.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertFetchProjectOrGroupFailed
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|ProjectReference
name|metadata
init|=
name|createProjectReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchMetadataFromProxies
argument_list|(
name|managedDefaultRepository
argument_list|,
name|managedDefaultRepository
operator|.
name|toMetadataPath
argument_list|(
name|metadata
argument_list|)
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Transfer the metadata file.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertFetchVersioned
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|VersionedReference
name|metadata
init|=
name|createVersionedReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchMetadataFromProxies
argument_list|(
name|managedDefaultRepository
argument_list|,
name|managedDefaultRepository
operator|.
name|toMetadataPath
argument_list|(
name|metadata
argument_list|)
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have downloaded a file."
argument_list|,
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VersionedReference
name|createVersionedReference
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
return|return
name|metadataTools
operator|.
name|toVersionedReference
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Transfer the metadata file, not expected to succeed.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertFetchVersionedFailed
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|VersionedReference
name|metadata
init|=
name|createVersionedReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|downloadedFile
init|=
name|proxyHandler
operator|.
name|fetchMetadataFromProxies
argument_list|(
name|managedDefaultRepository
argument_list|,
name|managedDefaultRepository
operator|.
name|toMetadataPath
argument_list|(
name|metadata
argument_list|)
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|assertNoTempFiles
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the existance of the requestedResource in the default managed repository.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertResourceExists
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Resource should exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMetadataEquals
parameter_list|(
name|String
name|expectedMetadataXml
parameter_list|,
name|Path
name|actualFile
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"Actual File should not be null."
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Actual file exists."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|actualContents
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|metadata
init|=
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|actualFile
argument_list|)
decl_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|metadata
argument_list|,
name|actualContents
argument_list|)
expr_stmt|;
name|DetailedDiff
name|detailedDiff
init|=
operator|new
name|DetailedDiff
argument_list|(
operator|new
name|Diff
argument_list|(
name|expectedMetadataXml
argument_list|,
name|actualContents
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|detailedDiff
operator|.
name|similar
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedMetadataXml
argument_list|,
name|actualContents
argument_list|)
expr_stmt|;
block|}
comment|// assertEquals( "Check file contents.", expectedMetadataXml, actualContents );
block|}
comment|/**      * Ensures that the requested resource is not present in the managed repository.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertNoMetadata
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|expectedFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"metadata should not exist: "
operator|+
name|expectedFile
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|expectedFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures that the proxied repository specific maven metadata file does NOT exist in the      * managed repository.      *      * @param proxiedRepoId     the proxied repository id to validate with.      * @param requestedResource the resource requested.      */
specifier|private
name|void
name|assertNoRepoMetadata
parameter_list|(
name|String
name|proxiedRepoId
parameter_list|,
name|String
name|requestedResource
parameter_list|)
block|{
name|String
name|proxiedFile
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|proxiedRepoId
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|proxiedFile
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Repo specific metadata should not exist: "
operator|+
name|actualFile
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertGroupMetadataContents
parameter_list|(
name|String
name|requestedResource
parameter_list|,
name|String
name|expectedPlugins
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Snapshot Metadata should exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectReference
name|actualMetadata
init|=
name|createGroupReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertGroupMetadata
argument_list|(
name|actualFile
argument_list|,
name|actualMetadata
argument_list|,
name|expectedPlugins
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ProjectReference
name|createGroupReference
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|ProjectReference
name|projectReference
init|=
name|createProjectReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|projectReference
operator|.
name|setGroupId
argument_list|(
name|projectReference
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"."
operator|+
name|projectReference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|projectReference
operator|.
name|setArtifactId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|projectReference
return|;
block|}
specifier|private
name|void
name|assertRepoGroupMetadataContents
parameter_list|(
name|String
name|proxiedRepoId
parameter_list|,
name|String
name|requestedResource
parameter_list|,
name|String
name|expectedPlugins
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proxiedFile
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|proxiedRepoId
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|proxiedFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Repo Specific Group Metadata should exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectReference
name|actualMetadata
init|=
name|createGroupReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertGroupMetadata
argument_list|(
name|actualFile
argument_list|,
name|actualMetadata
argument_list|,
name|expectedPlugins
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertGroupMetadata
parameter_list|(
name|Path
name|actualFile
parameter_list|,
name|ProjectReference
name|actualMetadata
parameter_list|,
name|String
name|expectedPlugins
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Build expected metadata XML
name|StringWriter
name|expectedMetadataXml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|m
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
name|actualMetadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pluginId
range|:
name|expectedPlugins
control|)
block|{
name|Plugin
name|p
init|=
operator|new
name|Plugin
argument_list|()
decl_stmt|;
name|p
operator|.
name|setPrefix
argument_list|(
name|pluginId
argument_list|)
expr_stmt|;
name|p
operator|.
name|setArtifactId
argument_list|(
name|pluginId
operator|+
literal|"-maven-plugin"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setName
argument_list|(
literal|"The "
operator|+
name|pluginId
operator|+
literal|" Plugin"
argument_list|)
expr_stmt|;
name|m
operator|.
name|getPlugins
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|m
argument_list|,
name|expectedMetadataXml
argument_list|)
expr_stmt|;
comment|// Compare the file to the actual contents.
name|assertMetadataEquals
argument_list|(
name|expectedMetadataXml
operator|.
name|toString
argument_list|()
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the existance of the requestedResource in the default managed repository, and if it exists,      * does it contain the specified list of expected versions?      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertProjectMetadataContents
parameter_list|(
name|String
name|requestedResource
parameter_list|,
name|String
name|expectedVersions
index|[]
parameter_list|,
name|String
name|latestVersion
parameter_list|,
name|String
name|releaseVersion
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectReference
name|metadata
init|=
name|createProjectReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
comment|// Build expected metadata XML
name|StringWriter
name|expectedMetadataXml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|m
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setArtifactId
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLatestVersion
argument_list|(
name|latestVersion
argument_list|)
expr_stmt|;
name|m
operator|.
name|setReleasedVersion
argument_list|(
name|releaseVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedVersions
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|getAvailableVersions
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedVersions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|m
argument_list|,
name|expectedMetadataXml
argument_list|)
expr_stmt|;
comment|// Compare the file to the actual contents.
name|assertMetadataEquals
argument_list|(
name|expectedMetadataXml
operator|.
name|toString
argument_list|()
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the existance of the requestedResource in the default managed repository, and if it exists,      * does it contain the expected release maven-metadata.xml contents?      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertReleaseMetadataContents
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Release Metadata should exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|VersionedReference
name|metadata
init|=
name|createVersionedReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
comment|// Build expected metadata XML
name|StringWriter
name|expectedMetadataXml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|m
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setArtifactId
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setVersion
argument_list|(
name|metadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|m
argument_list|,
name|expectedMetadataXml
argument_list|)
expr_stmt|;
comment|// Compare the file to the actual contents.
name|assertMetadataEquals
argument_list|(
name|expectedMetadataXml
operator|.
name|toString
argument_list|()
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the existance of the snapshot metadata in the default managed repository, and if it exists,      * does it contain the expected release maven-metadata.xml contents?      *      * @param requestedResource   the requested resource      * @param expectedDate        the date in "yyyyMMdd" format      * @param expectedTime        the time in "hhmmss" format      * @param expectedBuildnumber the build number      * @throws Exception      */
specifier|private
name|void
name|assertSnapshotMetadataContents
parameter_list|(
name|String
name|requestedResource
parameter_list|,
name|String
name|expectedDate
parameter_list|,
name|String
name|expectedTime
parameter_list|,
name|int
name|expectedBuildnumber
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Snapshot Metadata should exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|VersionedReference
name|actualMetadata
init|=
name|createVersionedReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertSnapshotMetadata
argument_list|(
name|actualFile
argument_list|,
name|actualMetadata
argument_list|,
name|expectedDate
argument_list|,
name|expectedTime
argument_list|,
name|expectedBuildnumber
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the existance of the proxied repository specific snapshot metadata in the default managed      * repository, and if it exists, does it contain the expected release maven-metadata.xml contents?      *      * @param proxiedRepoId       the repository id of the proxied repository.      * @param requestedResource   the requested resource      * @param expectedDate        the date in "yyyyMMdd" format      * @param expectedTime        the time in "hhmmss" format      * @param expectedBuildnumber the build number      * @throws Exception      */
specifier|private
name|void
name|assertRepoSnapshotMetadataContents
parameter_list|(
name|String
name|proxiedRepoId
parameter_list|,
name|String
name|requestedResource
parameter_list|,
name|String
name|expectedDate
parameter_list|,
name|String
name|expectedTime
parameter_list|,
name|int
name|expectedBuildnumber
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proxiedFile
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|proxiedRepoId
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|proxiedFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Repo Specific Snapshot Metadata should exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|VersionedReference
name|actualMetadata
init|=
name|createVersionedReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertSnapshotMetadata
argument_list|(
name|actualFile
argument_list|,
name|actualMetadata
argument_list|,
name|expectedDate
argument_list|,
name|expectedTime
argument_list|,
name|expectedBuildnumber
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSnapshotMetadata
parameter_list|(
name|Path
name|actualFile
parameter_list|,
name|VersionedReference
name|actualMetadata
parameter_list|,
name|String
name|expectedDate
parameter_list|,
name|String
name|expectedTime
parameter_list|,
name|int
name|expectedBuildnumber
parameter_list|)
throws|throws
name|RepositoryMetadataException
throws|,
name|Exception
block|{
comment|// Build expected metadata XML
name|StringWriter
name|expectedMetadataXml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|m
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
name|actualMetadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setArtifactId
argument_list|(
name|actualMetadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setVersion
argument_list|(
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|actualMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setSnapshotVersion
argument_list|(
operator|new
name|SnapshotVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|expectedDate
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|expectedTime
argument_list|)
condition|)
block|{
name|m
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|setTimestamp
argument_list|(
name|expectedDate
operator|+
literal|"."
operator|+
name|expectedTime
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|setBuildNumber
argument_list|(
name|expectedBuildnumber
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLastUpdated
argument_list|(
name|expectedDate
operator|+
name|expectedTime
argument_list|)
expr_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|m
argument_list|,
name|expectedMetadataXml
argument_list|)
expr_stmt|;
comment|// Compare the file to the actual contents.
name|assertMetadataEquals
argument_list|(
name|expectedMetadataXml
operator|.
name|toString
argument_list|()
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures that the repository specific maven metadata file exists, and contains the appropriate      * list of expected versions within.      *      * @param proxiedRepoId      * @param requestedResource      * @param expectedProxyVersions      */
specifier|private
name|void
name|assertRepoProjectMetadata
parameter_list|(
name|String
name|proxiedRepoId
parameter_list|,
name|String
name|requestedResource
parameter_list|,
name|String
index|[]
name|expectedProxyVersions
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proxiedFile
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|proxiedRepoId
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|proxiedFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectReference
name|metadata
init|=
name|createProjectReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
comment|// Build expected metadata XML
name|StringWriter
name|expectedMetadataXml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|m
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setArtifactId
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedProxyVersions
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|getAvailableVersions
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedProxyVersions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|m
argument_list|,
name|expectedMetadataXml
argument_list|)
expr_stmt|;
comment|// Compare the file to the actual contents.
name|assertMetadataEquals
argument_list|(
name|expectedMetadataXml
operator|.
name|toString
argument_list|()
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures that the repository specific maven metadata file exists, and contains the appropriate      * list of expected versions within.      *      * @param proxiedRepoId      * @param requestedResource      */
specifier|private
name|void
name|assertRepoReleaseMetadataContents
parameter_list|(
name|String
name|proxiedRepoId
parameter_list|,
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proxiedFile
init|=
name|metadataTools
operator|.
name|getRepositorySpecificName
argument_list|(
name|proxiedRepoId
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|proxiedFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Release metadata for repo should exist: "
operator|+
name|actualFile
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
name|VersionedReference
name|metadata
init|=
name|createVersionedReference
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
comment|// Build expected metadata XML
name|StringWriter
name|expectedMetadataXml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|m
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|setGroupId
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setArtifactId
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setVersion
argument_list|(
name|metadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|m
argument_list|,
name|expectedMetadataXml
argument_list|)
expr_stmt|;
comment|// Compare the file to the actual contents.
name|assertMetadataEquals
argument_list|(
name|expectedMetadataXml
operator|.
name|toString
argument_list|()
argument_list|,
name|actualFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the non-existance of the requestedResource in the default managed repository.      *      * @param requestedResource the requested resource      * @throws Exception      */
specifier|private
name|void
name|assertResourceNotFound
parameter_list|(
name|String
name|requestedResource
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|actualFile
init|=
name|managedDefaultDir
operator|.
name|resolve
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Resource should not exist: "
operator|+
name|requestedResource
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|actualFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

