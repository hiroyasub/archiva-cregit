begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|filecontent
operator|.
name|FileContentRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_comment
comment|/**  * FileContentIndexPopulator   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|FileContentIndexPopulator
implements|implements
name|IndexPopulator
block|{
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ArchivaArtifact
argument_list|>
name|getObjectMap
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|FileContentRecord
argument_list|>
name|populate
parameter_list|(
name|File
name|basedir
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FileContentRecord
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileContentRecord
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"src/test/managed-repository"
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
literal|"org/apache/maven/archiva/record/"
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"parent-pom-1"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"parent-pom/1/parent-pom-1.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"child-pom-1.0-SNAPSHOT"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"test-child-pom/1.0-SNAPSHOT/test-child-pom-1.0-20060728.121314-1.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test-archetype-1.0"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"test-archetype/1.0/test-archetype-1.0.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test-jar-and-pom-1.0-alpha-1"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"test-jar-and-pom/1.0-alpha-1/test-jar-and-pom-1.0-alpha-1.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test-plugin-1.0"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"test-plugin/1.0/test-plugin-1.0.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test-pom-1.0"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"test-pom/1.0/test-pom-1.0.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test-skin-1.0"
argument_list|,
name|createFileContentRecord
argument_list|(
name|repoDir
argument_list|,
name|prefix
operator|+
literal|"test-skin/1.0/test-skin-1.0.pom"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|private
name|FileContentRecord
name|createFileContentRecord
parameter_list|(
name|File
name|repoDir
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|File
name|pathToFile
init|=
operator|new
name|File
argument_list|(
name|repoDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathToFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Can't find test file: "
operator|+
name|pathToFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|FileContentRecord
name|record
init|=
operator|new
name|FileContentRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|setRepositoryId
argument_list|(
literal|"test-repo"
argument_list|)
expr_stmt|;
name|record
operator|.
name|setFilename
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|record
operator|.
name|setContents
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|pathToFile
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Can't load test file contents: "
operator|+
name|pathToFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|record
return|;
block|}
block|}
end_class

end_unit

