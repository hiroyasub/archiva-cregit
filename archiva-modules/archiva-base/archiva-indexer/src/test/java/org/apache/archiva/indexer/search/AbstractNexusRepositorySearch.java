begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
package|;
end_package

begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *  http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|managed
operator|.
name|DefaultManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|proxyconnector
operator|.
name|DefaultProxyConnectorAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|MavenIndexerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactScanningListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ScanningResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|test
operator|.
name|utils
operator|.
name|ArchivaSpringJUnit4ClassRunner
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ArchivaSpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath:/spring-context.xml"
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractNexusRepositorySearch
extends|extends
name|TestCase
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|TEST_REPO_1
init|=
literal|"nexus-search-test-repo"
decl_stmt|;
specifier|public
specifier|static
name|String
name|TEST_REPO_2
init|=
literal|"nexus-search-test-repo-2"
decl_stmt|;
specifier|public
specifier|static
name|String
name|REPO_RELEASE
init|=
literal|"repo-release"
decl_stmt|;
name|MavenRepositorySearch
name|search
decl_stmt|;
name|ArchivaConfiguration
name|archivaConfig
decl_stmt|;
name|ArtifactContextProducer
name|artifactContextProducer
decl_stmt|;
name|MockControl
name|archivaConfigControl
decl_stmt|;
name|Configuration
name|config
decl_stmt|;
annotation|@
name|Inject
name|PlexusSisuBridge
name|plexusSisuBridge
decl_stmt|;
annotation|@
name|Inject
name|MavenIndexerUtils
name|mavenIndexerUtils
decl_stmt|;
name|NexusIndexer
name|nexusIndexer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_1
operator|+
literal|"/.indexer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_1
operator|+
literal|"/.indexer"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_2
operator|+
literal|"/.indexer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_2
operator|+
literal|"/.indexer"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|archivaConfigControl
operator|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|archivaConfig
operator|=
operator|(
name|ArchivaConfiguration
operator|)
name|archivaConfigControl
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|DefaultManagedRepositoryAdmin
name|defaultManagedRepositoryAdmin
init|=
operator|new
name|DefaultManagedRepositoryAdmin
argument_list|()
decl_stmt|;
name|defaultManagedRepositoryAdmin
operator|.
name|setArchivaConfiguration
argument_list|(
name|archivaConfig
argument_list|)
expr_stmt|;
name|DefaultProxyConnectorAdmin
name|defaultProxyConnectorAdmin
init|=
operator|new
name|DefaultProxyConnectorAdmin
argument_list|()
decl_stmt|;
name|defaultProxyConnectorAdmin
operator|.
name|setArchivaConfiguration
argument_list|(
name|archivaConfig
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|MavenRepositorySearch
argument_list|(
name|plexusSisuBridge
argument_list|,
name|defaultManagedRepositoryAdmin
argument_list|,
name|mavenIndexerUtils
argument_list|,
name|defaultProxyConnectorAdmin
argument_list|)
expr_stmt|;
name|nexusIndexer
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|NexusIndexer
operator|.
name|class
argument_list|)
expr_stmt|;
name|artifactContextProducer
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|ArtifactContextProducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createRepositoryConfig
argument_list|(
name|TEST_REPO_1
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createRepositoryConfig
argument_list|(
name|TEST_REPO_2
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createRepositoryConfig
argument_list|(
name|REPO_RELEASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|IndexingContext
name|indexingContext
range|:
name|nexusIndexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|nexusIndexer
operator|.
name|removeIndexingContext
argument_list|(
name|indexingContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_1
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|TEST_REPO_2
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ManagedRepositoryConfiguration
name|createRepositoryConfig
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repositoryConfig
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repositoryConfig
operator|.
name|setId
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|repositoryConfig
operator|.
name|setLocation
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
operator|+
literal|"/target/repos/"
operator|+
name|repository
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|repositoryConfig
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|repositoryConfig
operator|.
name|setLayout
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|repositoryConfig
operator|.
name|setName
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|repositoryConfig
operator|.
name|setScanned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|repositoryConfig
operator|.
name|setSnapshots
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|repositoryConfig
operator|.
name|setReleases
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|repositoryConfig
return|;
block|}
specifier|protected
name|void
name|createIndex
parameter_list|(
name|String
name|repository
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|filesToBeIndexed
parameter_list|,
name|boolean
name|scan
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexingContext
name|context
init|=
name|nexusIndexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|nexusIndexer
operator|.
name|removeIndexingContext
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|File
name|indexerDirectory
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|repository
operator|+
literal|"/.indexer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexerDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexerDirectory
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|indexerDirectory
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|lockFile
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"/target/repos/"
operator|+
name|repository
operator|+
literal|"/.indexer/write.lock"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|lockFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|lockFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|repo
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"src/test/"
operator|+
name|repository
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|indexDirectory
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/index/test-"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexDirectory
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
name|context
operator|=
name|nexusIndexer
operator|.
name|addIndexingContext
argument_list|(
name|repository
argument_list|,
name|repository
argument_list|,
name|repo
argument_list|,
name|indexDirectory
argument_list|,
name|repo
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|indexDirectory
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|search
operator|.
name|getAllIndexCreators
argument_list|()
argument_list|)
expr_stmt|;
comment|// minimize datas in memory
name|context
operator|.
name|getIndexWriter
argument_list|()
operator|.
name|setMaxBufferedDocs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|getIndexWriter
argument_list|()
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|artifactFile
range|:
name|filesToBeIndexed
control|)
block|{
name|assertTrue
argument_list|(
literal|"file not exists "
operator|+
name|artifactFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactContext
name|ac
init|=
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|context
argument_list|,
name|artifactFile
argument_list|)
decl_stmt|;
name|nexusIndexer
operator|.
name|addArtifactToIndex
argument_list|(
name|ac
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|updateTimestamp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
condition|)
block|{
name|nexusIndexer
operator|.
name|scan
argument_list|(
name|context
argument_list|,
operator|new
name|ArtifactScanListener
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// force flushing
name|context
operator|.
name|getIndexWriter
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSearchable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|ArtifactScanListener
implements|implements
name|ArtifactScanningListener
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|void
name|scanningStarted
parameter_list|(
name|IndexingContext
name|ctx
parameter_list|)
block|{
block|}
specifier|public
name|void
name|scanningFinished
parameter_list|(
name|IndexingContext
name|ctx
parameter_list|,
name|ScanningResult
name|result
parameter_list|)
block|{
block|}
specifier|public
name|void
name|artifactError
parameter_list|(
name|ArtifactContext
name|ac
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"artifactError {}"
argument_list|,
name|ac
operator|.
name|getArtifact
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|artifactDiscovered
parameter_list|(
name|ArtifactContext
name|ac
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"artifactDiscovered {}:{}"
argument_list|,
name|ac
operator|.
name|getArtifact
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|ac
operator|.
name|getArtifactInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|niceDisplay
parameter_list|(
name|SearchResults
name|searchResults
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchResultHit
name|hit
range|:
name|searchResults
operator|.
name|getHits
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|hit
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|SystemUtils
operator|.
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

