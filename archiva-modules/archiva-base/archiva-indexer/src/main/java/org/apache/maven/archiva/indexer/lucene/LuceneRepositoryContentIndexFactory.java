begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|bytecode
operator|.
name|BytecodeHandlers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|filecontent
operator|.
name|FileContentHandlers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|hashcodes
operator|.
name|HashcodesHandlers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Factory for Lucene repository content index instances.  *  * @plexus.component role="org.apache.maven.archiva.indexer.RepositoryContentIndexFactory" role-hint="lucene"  */
end_comment

begin_class
specifier|public
class|class
name|LuceneRepositoryContentIndexFactory
implements|implements
name|RepositoryContentIndexFactory
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|public
name|RepositoryContentIndex
name|createBytecodeIndex
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
block|{
name|File
name|indexDir
init|=
name|toIndexDir
argument_list|(
name|repository
argument_list|,
literal|"bytecode"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LuceneRepositoryContentIndex
argument_list|(
name|repository
argument_list|,
name|indexDir
argument_list|,
operator|new
name|BytecodeHandlers
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RepositoryContentIndex
name|createFileContentIndex
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
block|{
name|File
name|indexDir
init|=
name|toIndexDir
argument_list|(
name|repository
argument_list|,
literal|"filecontent"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LuceneRepositoryContentIndex
argument_list|(
name|repository
argument_list|,
name|indexDir
argument_list|,
operator|new
name|FileContentHandlers
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RepositoryContentIndex
name|createHashcodeIndex
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
block|{
name|File
name|indexDir
init|=
name|toIndexDir
argument_list|(
name|repository
argument_list|,
literal|"hashcodes"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LuceneRepositoryContentIndex
argument_list|(
name|repository
argument_list|,
name|indexDir
argument_list|,
operator|new
name|HashcodesHandlers
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Obtain the index directory for the provided repository.      *      * @param repository the repository to obtain the index directory from.      * @param indexId    the id of the index      * @return the directory to put the index into.      */
specifier|private
name|File
name|toIndexDir
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|String
name|indexId
parameter_list|)
block|{
comment|// Attempt to get the specified indexDir in the configuration first.
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findManagedRepositoryById
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|indexDir
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|==
literal|null
condition|)
block|{
comment|// No configured index dir, use the repository path instead.
name|String
name|repoPath
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|indexDir
operator|=
operator|new
name|File
argument_list|(
name|repoPath
argument_list|,
literal|".index/"
operator|+
name|indexId
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use configured index dir.
name|String
name|repoPath
init|=
name|repoConfig
operator|.
name|getIndexDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repoPath
argument_list|)
condition|)
block|{
name|repoPath
operator|=
name|repository
operator|.
name|getLocation
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|repoPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|repoPath
operator|+=
literal|"/"
expr_stmt|;
block|}
name|repoPath
operator|+=
literal|".index"
expr_stmt|;
block|}
name|indexDir
operator|=
operator|new
name|File
argument_list|(
name|repoPath
argument_list|,
literal|"/"
operator|+
name|indexId
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
return|return
name|indexDir
return|;
block|}
block|}
end_class

end_unit

