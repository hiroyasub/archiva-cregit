begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * SearchUtil - utility class for search.  *   * @version  */
end_comment

begin_class
specifier|public
class|class
name|SearchUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BYTECODE_KEYWORD
init|=
literal|"bytecode:"
decl_stmt|;
comment|/**      * Determines whether the queryString has the bytecode keyword.      *       * @param queryString      * @return      */
specifier|public
specifier|static
name|boolean
name|isBytecodeSearch
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
if|if
condition|(
name|queryString
operator|.
name|startsWith
argument_list|(
name|BYTECODE_KEYWORD
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Removes the bytecode keyword from the query string.      *       * @param queryString      * @return      */
specifier|public
specifier|static
name|String
name|removeBytecodeKeyword
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
name|String
name|qString
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|qString
operator|=
name|StringUtils
operator|.
name|remove
argument_list|(
name|queryString
argument_list|,
name|BYTECODE_KEYWORD
argument_list|)
expr_stmt|;
return|return
name|qString
return|;
block|}
specifier|public
specifier|static
name|String
name|getHitId
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
return|return
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
return|;
block|}
block|}
end_class

end_unit

