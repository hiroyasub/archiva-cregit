begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|proxyconnector
operator|.
name|ProxyConnectorAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|MavenIndexerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|util
operator|.
name|SearchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|FlatSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|FlatSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|MAVEN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|OSGI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|expr
operator|.
name|SourcedSearchExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|expr
operator|.
name|UserInputSearchExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * RepositorySearch implementation which uses the Maven Indexer for searching.  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositorySearch#maven"
argument_list|)
specifier|public
class|class
name|MavenRepositorySearch
implements|implements
name|RepositorySearch
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|NexusIndexer
name|indexer
decl_stmt|;
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
specifier|private
name|ProxyConnectorAdmin
name|proxyConnectorAdmin
decl_stmt|;
specifier|private
name|MavenIndexerUtils
name|mavenIndexerUtils
decl_stmt|;
specifier|protected
name|MavenRepositorySearch
parameter_list|()
block|{
comment|// for test purpose
block|}
annotation|@
name|Inject
specifier|public
name|MavenRepositorySearch
parameter_list|(
name|PlexusSisuBridge
name|plexusSisuBridge
parameter_list|,
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
parameter_list|,
name|MavenIndexerUtils
name|mavenIndexerUtils
parameter_list|,
name|ProxyConnectorAdmin
name|proxyConnectorAdmin
parameter_list|)
throws|throws
name|PlexusSisuBridgeException
block|{
name|this
operator|.
name|indexer
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|NexusIndexer
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedRepositoryAdmin
operator|=
name|managedRepositoryAdmin
expr_stmt|;
name|this
operator|.
name|mavenIndexerUtils
operator|=
name|mavenIndexerUtils
expr_stmt|;
name|this
operator|.
name|proxyConnectorAdmin
operator|=
name|proxyConnectorAdmin
expr_stmt|;
block|}
comment|/**      * @see RepositorySearch#search(String, List, String, SearchResultLimits, List)      */
specifier|public
name|SearchResults
name|search
parameter_list|(
name|String
name|principal
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|,
name|String
name|term
parameter_list|,
name|SearchResultLimits
name|limits
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|previousSearchTerms
parameter_list|)
throws|throws
name|RepositorySearchException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexingContextIds
init|=
name|addIndexingContexts
argument_list|(
name|selectedRepos
argument_list|)
decl_stmt|;
comment|// since upgrade to nexus 2.0.0, query has changed from g:[QUERIED TERM]* to g:*[QUERIED TERM]*
comment|//      resulting to more wildcard searches so we need to increase max clause count
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousSearchTerms
operator|==
literal|null
operator|||
name|previousSearchTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|constructQuery
argument_list|(
name|term
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|previousTerm
range|:
name|previousSearchTerms
control|)
block|{
name|BooleanQuery
name|iQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|constructQuery
argument_list|(
name|previousTerm
argument_list|,
name|iQuery
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|iQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|BooleanQuery
name|iQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|constructQuery
argument_list|(
name|term
argument_list|,
name|iQuery
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|iQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
comment|// we retun only artifacts without classifier in quick search, olamy cannot find a way to say with this field empty
comment|// FIXME  cannot find a way currently to setup this in constructQuery !!!
return|return
name|search
argument_list|(
name|limits
argument_list|,
name|q
argument_list|,
name|indexingContextIds
argument_list|,
name|NoClassifierArtifactInfoFilter
operator|.
name|LIST
argument_list|,
name|selectedRepos
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see RepositorySearch#search(String, SearchFields, SearchResultLimits)      */
specifier|public
name|SearchResults
name|search
parameter_list|(
name|String
name|principal
parameter_list|,
name|SearchFields
name|searchFields
parameter_list|,
name|SearchResultLimits
name|limits
parameter_list|)
throws|throws
name|RepositorySearchException
block|{
if|if
condition|(
name|searchFields
operator|.
name|getRepositories
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositorySearchException
argument_list|(
literal|"Repositories cannot be null."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|indexingContextIds
init|=
name|addIndexingContexts
argument_list|(
name|searchFields
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
comment|// if no index found in the specified ones return an empty search result instead of doing a search on all index
comment|// olamy: IMHO doesn't make sense
if|if
condition|(
operator|!
name|searchFields
operator|.
name|getRepositories
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|indexingContextIds
operator|==
literal|null
operator|||
name|indexingContextIds
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
operator|new
name|SearchResults
argument_list|()
return|;
block|}
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|GROUP_ID
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|ARTIFACT_ID
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|VERSION
argument_list|,
operator|new
name|SourcedSearchExpression
argument_list|(
name|searchFields
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getPackaging
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|PACKAGING
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getPackaging
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|CLASSNAMES
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleSymbolicName
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|SYMBOLIC_NAME
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleSymbolicName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleVersion
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|VERSION
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleVersion
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleExportPackage
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|EXPORT_PACKAGE
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleExportPackage
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleExportService
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|EXPORT_SERVICE
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleExportService
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleImportPackage
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|IMPORT_PACKAGE
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleImportPackage
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleName
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|NAME
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleImportPackage
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|IMPORT_PACKAGE
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleImportPackage
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getBundleRequireBundle
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|OSGI
operator|.
name|REQUIRE_BUNDLE
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getBundleRequireBundle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|searchFields
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|CLASSIFIER
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|searchFields
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|.
name|getClauses
argument_list|()
operator|==
literal|null
operator|||
name|q
operator|.
name|getClauses
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RepositorySearchException
argument_list|(
literal|"No search fields set."
argument_list|)
throw|;
block|}
return|return
name|search
argument_list|(
name|limits
argument_list|,
name|q
argument_list|,
name|indexingContextIds
argument_list|,
name|Collections
operator|.
expr|<
name|ArtifactInfoFilter
operator|>
name|emptyList
argument_list|()
argument_list|,
name|searchFields
operator|.
name|getRepositories
argument_list|()
argument_list|,
name|searchFields
operator|.
name|isIncludePomArtifacts
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|SearchResults
name|search
parameter_list|(
name|SearchResultLimits
name|limits
parameter_list|,
name|BooleanQuery
name|q
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexingContextIds
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ArtifactInfoFilter
argument_list|>
name|filters
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|,
name|boolean
name|includePoms
parameter_list|)
throws|throws
name|RepositorySearchException
block|{
try|try
block|{
name|FlatSearchRequest
name|request
init|=
operator|new
name|FlatSearchRequest
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContexts
argument_list|(
name|getIndexingContexts
argument_list|(
name|indexingContextIds
argument_list|)
argument_list|)
expr_stmt|;
name|FlatSearchResponse
name|response
init|=
name|indexer
operator|.
name|searchFlat
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
operator|||
name|response
operator|.
name|getTotalHits
argument_list|()
operator|==
literal|0
condition|)
block|{
name|SearchResults
name|results
init|=
operator|new
name|SearchResults
argument_list|()
decl_stmt|;
name|results
operator|.
name|setLimits
argument_list|(
name|limits
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
return|return
name|convertToSearchResults
argument_list|(
name|response
argument_list|,
name|limits
argument_list|,
name|filters
argument_list|,
name|selectedRepos
argument_list|,
name|includePoms
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositorySearchException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositorySearchException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|IndexingContext
argument_list|>
name|getIndexingContexts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|List
argument_list|<
name|IndexingContext
argument_list|>
name|contexts
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexingContext
argument_list|>
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|IndexingContext
name|context
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|contexts
operator|.
name|add
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"context with id {} not exists"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|contexts
return|;
block|}
specifier|private
name|void
name|constructQuery
parameter_list|(
name|String
name|term
parameter_list|,
name|BooleanQuery
name|q
parameter_list|)
block|{
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|GROUP_ID
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|ARTIFACT_ID
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|VERSION
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|PACKAGING
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|CLASSNAMES
argument_list|,
operator|new
name|UserInputSearchExpression
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|//Query query =
comment|//    new WildcardQuery( new Term( MAVEN.CLASSNAMES.getFieldName(), "*" ) );
comment|//q.add( query, Occur.MUST_NOT );
comment|// olamy IMHO we could set this option as at least one must match
comment|//q.setMinimumNumberShouldMatch( 1 );
block|}
comment|/**      * @param selectedRepos      * @return indexing contextId used      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addIndexingContexts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|indexingContextIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|selectedRepos
control|)
block|{
try|try
block|{
name|ManagedRepository
name|repoConfig
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repo
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|!=
literal|null
condition|)
block|{
name|IndexingContext
name|context
init|=
name|managedRepositoryAdmin
operator|.
name|createIndexContext
argument_list|(
name|repoConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isSearchable
argument_list|()
condition|)
block|{
name|indexingContextIds
operator|.
name|addAll
argument_list|(
name|getRemoteIndexingContextIds
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|indexingContextIds
operator|.
name|add
argument_list|(
name|context
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"indexingContext with id {} not searchable"
argument_list|,
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Repository '{}' not found in configuration."
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"RepositoryAdminException occured while accessing index of repository '{}' : {}"
argument_list|,
name|repo
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|indexingContextIds
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRemoteIndexingContextIds
parameter_list|(
name|String
name|managedRepoId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|proxyConnectors
init|=
name|proxyConnectorAdmin
operator|.
name|getProxyConnectorAsMap
argument_list|()
operator|.
name|get
argument_list|(
name|managedRepoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyConnectors
operator|==
literal|null
operator|||
name|proxyConnectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ids
return|;
block|}
for|for
control|(
name|ProxyConnector
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
name|String
name|remoteId
init|=
literal|"remote-"
operator|+
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
decl_stmt|;
name|IndexingContext
name|context
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|remoteId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isSearchable
argument_list|()
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|remoteId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllGroupIds
parameter_list|(
name|String
name|principal
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|)
throws|throws
name|RepositorySearchException
block|{
name|List
argument_list|<
name|IndexingContext
argument_list|>
name|indexContexts
init|=
name|getIndexingContexts
argument_list|(
name|selectedRepos
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexContexts
operator|==
literal|null
operator|||
name|indexContexts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allGroupIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexingContext
name|indexingContext
range|:
name|indexContexts
control|)
block|{
name|allGroupIds
operator|.
name|addAll
argument_list|(
name|indexingContext
operator|.
name|getAllGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allGroupIds
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositorySearchException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|IndexCreator
argument_list|>
name|getAllIndexCreators
parameter_list|()
block|{
return|return
name|mavenIndexerUtils
operator|.
name|getAllIndexCreators
argument_list|()
return|;
block|}
specifier|private
name|SearchResults
name|convertToSearchResults
parameter_list|(
name|FlatSearchResponse
name|response
parameter_list|,
name|SearchResultLimits
name|limits
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ArtifactInfoFilter
argument_list|>
name|artifactInfoFilters
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|,
name|boolean
name|includePoms
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|SearchResults
name|results
init|=
operator|new
name|SearchResults
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ArtifactInfo
argument_list|>
name|artifactInfos
init|=
name|response
operator|.
name|getResults
argument_list|()
decl_stmt|;
for|for
control|(
name|ArtifactInfo
name|artifactInfo
range|:
name|artifactInfos
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"pom"
argument_list|,
name|artifactInfo
operator|.
name|fextension
argument_list|)
operator|&&
operator|!
name|includePoms
condition|)
block|{
continue|continue;
block|}
name|String
name|id
init|=
name|SearchUtil
operator|.
name|getHitId
argument_list|(
name|artifactInfo
operator|.
name|groupId
argument_list|,
name|artifactInfo
operator|.
name|artifactId
argument_list|,
name|artifactInfo
operator|.
name|classifier
argument_list|,
name|artifactInfo
operator|.
name|packaging
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchResultHit
argument_list|>
name|hitsMap
init|=
name|results
operator|.
name|getHitsMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|applyArtifactInfoFilters
argument_list|(
name|artifactInfo
argument_list|,
name|artifactInfoFilters
argument_list|,
name|hitsMap
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SearchResultHit
name|hit
init|=
name|hitsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|hit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|hit
operator|.
name|getVersions
argument_list|()
operator|.
name|contains
argument_list|(
name|artifactInfo
operator|.
name|version
argument_list|)
condition|)
block|{
name|hit
operator|.
name|addVersion
argument_list|(
name|artifactInfo
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|hit
operator|=
operator|new
name|SearchResultHit
argument_list|()
expr_stmt|;
name|hit
operator|.
name|setArtifactId
argument_list|(
name|artifactInfo
operator|.
name|artifactId
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setGroupId
argument_list|(
name|artifactInfo
operator|.
name|groupId
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setRepositoryId
argument_list|(
name|artifactInfo
operator|.
name|repository
argument_list|)
expr_stmt|;
name|hit
operator|.
name|addVersion
argument_list|(
name|artifactInfo
operator|.
name|version
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleExportPackage
argument_list|(
name|artifactInfo
operator|.
name|bundleExportPackage
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleExportService
argument_list|(
name|artifactInfo
operator|.
name|bundleExportService
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleSymbolicName
argument_list|(
name|artifactInfo
operator|.
name|bundleSymbolicName
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleVersion
argument_list|(
name|artifactInfo
operator|.
name|bundleVersion
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleDescription
argument_list|(
name|artifactInfo
operator|.
name|bundleDescription
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleDocUrl
argument_list|(
name|artifactInfo
operator|.
name|bundleDocUrl
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleRequireBundle
argument_list|(
name|artifactInfo
operator|.
name|bundleRequireBundle
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleImportPackage
argument_list|(
name|artifactInfo
operator|.
name|bundleImportPackage
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleLicense
argument_list|(
name|artifactInfo
operator|.
name|bundleLicense
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setBundleName
argument_list|(
name|artifactInfo
operator|.
name|bundleName
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setContext
argument_list|(
name|artifactInfo
operator|.
name|context
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setGoals
argument_list|(
name|artifactInfo
operator|.
name|goals
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setPrefix
argument_list|(
name|artifactInfo
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setPackaging
argument_list|(
name|artifactInfo
operator|.
name|packaging
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setClassifier
argument_list|(
name|artifactInfo
operator|.
name|classifier
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setFileExtension
argument_list|(
name|artifactInfo
operator|.
name|fextension
argument_list|)
expr_stmt|;
name|hit
operator|.
name|setUrl
argument_list|(
name|getBaseUrl
argument_list|(
name|artifactInfo
argument_list|,
name|selectedRepos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|addHit
argument_list|(
name|id
argument_list|,
name|hit
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|setTotalHits
argument_list|(
name|response
operator|.
name|getTotalHitsCount
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|setTotalHitsMapSize
argument_list|(
name|results
operator|.
name|getHitsMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|setReturnedHitsCount
argument_list|(
name|response
operator|.
name|getReturnedHitsCount
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|setLimits
argument_list|(
name|limits
argument_list|)
expr_stmt|;
if|if
condition|(
name|limits
operator|==
literal|null
operator|||
name|limits
operator|.
name|getSelectedPage
argument_list|()
operator|==
name|SearchResultLimits
operator|.
name|ALL_PAGES
condition|)
block|{
return|return
name|results
return|;
block|}
else|else
block|{
return|return
name|paginate
argument_list|(
name|results
argument_list|)
return|;
block|}
block|}
comment|/**      * calculate baseUrl without the context and base Archiva Url      *      * @param artifactInfo      * @return      */
specifier|protected
name|String
name|getBaseUrl
parameter_list|(
name|ArtifactInfo
name|artifactInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|artifactInfo
operator|.
name|context
argument_list|,
literal|"remote-"
argument_list|)
condition|)
block|{
comment|// it's a remote index result we search a managed which proxying this remote and on which
comment|// current user has read karma
name|String
name|managedRepoId
init|=
name|getManagedRepoId
argument_list|(
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|artifactInfo
operator|.
name|context
argument_list|,
literal|"remote-"
argument_list|)
argument_list|,
name|selectedRepos
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedRepoId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|managedRepoId
argument_list|)
expr_stmt|;
name|artifactInfo
operator|.
name|context
operator|=
name|managedRepoId
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|artifactInfo
operator|.
name|groupId
argument_list|,
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|artifactId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|version
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|artifactId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|artifactInfo
operator|.
name|classifier
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|classifier
argument_list|)
expr_stmt|;
block|}
comment|// maven-plugin packaging is a jar
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"maven-plugin"
argument_list|,
name|artifactInfo
operator|.
name|packaging
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactInfo
operator|.
name|packaging
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * return a managed repo for a remote result      *      * @param remoteRepo      * @param selectedRepos      * @return      * @throws RepositoryAdminException      */
specifier|private
name|String
name|getManagedRepoId
parameter_list|(
name|String
name|remoteRepo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|proxyConnectorMap
init|=
name|proxyConnectorAdmin
operator|.
name|getProxyConnectorAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxyConnectorMap
operator|==
literal|null
operator|||
name|proxyConnectorMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|selectedRepos
operator|!=
literal|null
operator|&&
operator|!
name|selectedRepos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|entry
range|:
name|proxyConnectorMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|selectedRepos
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ProxyConnector
name|proxyConnector
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|remoteRepo
argument_list|,
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
comment|// we don't find in search selected repos so return the first one
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|entry
range|:
name|proxyConnectorMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProxyConnector
name|proxyConnector
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|remoteRepo
argument_list|,
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|applyArtifactInfoFilters
parameter_list|(
name|ArtifactInfo
name|artifactInfo
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ArtifactInfoFilter
argument_list|>
name|artifactInfoFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SearchResultHit
argument_list|>
name|currentResult
parameter_list|)
block|{
if|if
condition|(
name|artifactInfoFilters
operator|==
literal|null
operator|||
name|artifactInfoFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|ArtifactInfoFilter
name|filter
range|:
name|artifactInfoFilters
control|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|addArtifactInResult
argument_list|(
name|artifactInfo
argument_list|,
name|currentResult
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|SearchResults
name|paginate
parameter_list|(
name|SearchResults
name|results
parameter_list|)
block|{
name|SearchResultLimits
name|limits
init|=
name|results
operator|.
name|getLimits
argument_list|()
decl_stmt|;
name|SearchResults
name|paginated
init|=
operator|new
name|SearchResults
argument_list|()
decl_stmt|;
name|int
name|fetchCount
init|=
name|limits
operator|.
name|getPageSize
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|limits
operator|.
name|getSelectedPage
argument_list|()
operator|*
name|limits
operator|.
name|getPageSize
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|fetchCount
operator|>
name|results
operator|.
name|getTotalHits
argument_list|()
condition|)
block|{
name|fetchCount
operator|=
name|results
operator|.
name|getTotalHits
argument_list|()
expr_stmt|;
block|}
comment|// Goto offset.
if|if
condition|(
name|offset
operator|<
name|results
operator|.
name|getTotalHits
argument_list|()
condition|)
block|{
comment|// only process if the offset is within the hit count.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fetchCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Stop fetching if we are past the total # of available hits.
if|if
condition|(
name|offset
operator|+
name|i
operator|>=
name|results
operator|.
name|getHits
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|SearchResultHit
name|hit
init|=
name|results
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|offset
operator|+
name|i
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hit
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|SearchUtil
operator|.
name|getHitId
argument_list|(
name|hit
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|hit
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|hit
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|hit
operator|.
name|getPackaging
argument_list|()
argument_list|)
decl_stmt|;
name|paginated
operator|.
name|addHit
argument_list|(
name|id
argument_list|,
name|hit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|paginated
operator|.
name|setTotalHits
argument_list|(
name|results
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|paginated
operator|.
name|setReturnedHitsCount
argument_list|(
name|paginated
operator|.
name|getHits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|paginated
operator|.
name|setTotalHitsMapSize
argument_list|(
name|results
operator|.
name|getTotalHitsMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|paginated
operator|.
name|setLimits
argument_list|(
name|limits
argument_list|)
expr_stmt|;
return|return
name|paginated
return|;
block|}
block|}
end_class

end_unit

