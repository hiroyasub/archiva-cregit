begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|MavenIndexerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|UnsupportedExistingLuceneIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPackingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|scheduling
operator|.
name|annotation
operator|.
name|Scheduled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M2  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"indexMerger#default"
argument_list|)
specifier|public
class|class
name|DefaultIndexMerger
implements|implements
name|IndexMerger
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
specifier|private
name|MavenIndexerUtils
name|mavenIndexerUtils
decl_stmt|;
specifier|private
name|NexusIndexer
name|indexer
decl_stmt|;
specifier|private
name|IndexPacker
name|indexPacker
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TemporaryIndex
argument_list|>
name|temporaryIndexes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|TemporaryIndex
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|DefaultIndexMerger
parameter_list|(
name|PlexusSisuBridge
name|plexusSisuBridge
parameter_list|,
name|MavenIndexerUtils
name|mavenIndexerUtils
parameter_list|)
throws|throws
name|PlexusSisuBridgeException
block|{
name|this
operator|.
name|indexer
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|NexusIndexer
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|mavenIndexerUtils
operator|=
name|mavenIndexerUtils
expr_stmt|;
name|indexPacker
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|IndexPacker
operator|.
name|class
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|buildMergedIndex
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|repositoriesIds
parameter_list|,
name|boolean
name|packIndex
parameter_list|)
throws|throws
name|IndexMergerException
block|{
name|File
name|tempRepoFile
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|tempRepoFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|tempRepoId
init|=
name|tempRepoFile
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|indexLocation
init|=
operator|new
name|File
argument_list|(
name|tempRepoFile
argument_list|,
literal|".indexer"
argument_list|)
decl_stmt|;
name|IndexingContext
name|indexingContext
init|=
name|indexer
operator|.
name|addIndexingContext
argument_list|(
name|tempRepoId
argument_list|,
name|tempRepoId
argument_list|,
name|tempRepoFile
argument_list|,
name|indexLocation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mavenIndexerUtils
operator|.
name|getAllIndexCreators
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|repositoriesIds
control|)
block|{
name|IndexingContext
name|idxToMerge
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxToMerge
operator|!=
literal|null
condition|)
block|{
name|indexingContext
operator|.
name|merge
argument_list|(
name|idxToMerge
operator|.
name|getIndexDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|indexingContext
operator|.
name|optimize
argument_list|()
expr_stmt|;
if|if
condition|(
name|packIndex
condition|)
block|{
name|IndexPackingRequest
name|request
init|=
operator|new
name|IndexPackingRequest
argument_list|(
name|indexingContext
argument_list|,
name|indexLocation
argument_list|)
decl_stmt|;
name|indexPacker
operator|.
name|packIndex
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|temporaryIndexes
operator|.
name|add
argument_list|(
operator|new
name|TemporaryIndex
argument_list|(
name|tempRepoFile
argument_list|,
name|tempRepoId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexMergerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedExistingLuceneIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexMergerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Scheduled
argument_list|(
name|fixedDelay
operator|=
literal|900000
argument_list|)
specifier|public
name|void
name|cleanTemporaryIndex
parameter_list|()
block|{
for|for
control|(
name|TemporaryIndex
name|temporaryIndex
range|:
name|temporaryIndexes
control|)
block|{
comment|// cleanup files older than 30 minutes
if|if
condition|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|temporaryIndex
operator|.
name|creationTime
operator|>
literal|1800000
condition|)
block|{
try|try
block|{
name|IndexingContext
name|context
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|temporaryIndex
operator|.
name|indexId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|indexer
operator|.
name|removeIndexingContext
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|temporaryIndex
operator|.
name|directory
argument_list|)
expr_stmt|;
block|}
name|temporaryIndexes
operator|.
name|remove
argument_list|(
name|temporaryIndex
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"remove directory {}"
argument_list|,
name|temporaryIndex
operator|.
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"failed to remove directory:"
operator|+
name|temporaryIndex
operator|.
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|temporaryIndexes
operator|.
name|remove
argument_list|(
name|temporaryIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TemporaryIndex
block|{
specifier|private
name|long
name|creationTime
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|String
name|indexId
decl_stmt|;
name|TemporaryIndex
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
name|indexId
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|indexId
operator|=
name|indexId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|creationTime
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|TemporaryIndex
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|creationTime
operator|==
operator|(
operator|(
name|TemporaryIndex
operator|)
name|o
operator|)
operator|.
name|creationTime
return|;
block|}
block|}
block|}
end_class

end_unit

