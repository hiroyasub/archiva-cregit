begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|query
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class to hold multiple SinglePhraseQueries and/or other CompoundQueries.  *  */
end_comment

begin_class
specifier|public
class|class
name|CompoundQuery
implements|implements
name|Query
block|{
comment|/**      * The query terms.      */
specifier|private
specifier|final
name|List
name|compoundQueryTerms
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * Appends a required term to this query.      *      * @param term the term to be appended to this query      */
specifier|public
name|void
name|and
parameter_list|(
name|QueryTerm
name|term
parameter_list|)
block|{
name|compoundQueryTerms
operator|.
name|add
argument_list|(
name|CompoundQueryTerm
operator|.
name|and
argument_list|(
operator|new
name|SingleTermQuery
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Appends an optional term to this query.      *      * @param term the term to be appended to this query      */
specifier|public
name|void
name|or
parameter_list|(
name|QueryTerm
name|term
parameter_list|)
block|{
name|compoundQueryTerms
operator|.
name|add
argument_list|(
name|CompoundQueryTerm
operator|.
name|or
argument_list|(
operator|new
name|SingleTermQuery
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Appends a prohibited term to this query.      *      * @param term the term to be appended to this query      */
specifier|public
name|void
name|not
parameter_list|(
name|QueryTerm
name|term
parameter_list|)
block|{
name|compoundQueryTerms
operator|.
name|add
argument_list|(
name|CompoundQueryTerm
operator|.
name|not
argument_list|(
operator|new
name|SingleTermQuery
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Appends a required subquery to this query.      *      * @param query the subquery to be appended to this query      */
specifier|public
name|void
name|and
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|compoundQueryTerms
operator|.
name|add
argument_list|(
name|CompoundQueryTerm
operator|.
name|and
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Appends an optional subquery to this query.      *      * @param query the subquery to be appended to this query      */
specifier|public
name|void
name|or
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|compoundQueryTerms
operator|.
name|add
argument_list|(
name|CompoundQueryTerm
operator|.
name|or
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Appends a prohibited subquery to this query.      *      * @param query the subquery to be appended to this query      */
specifier|public
name|void
name|not
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|compoundQueryTerms
operator|.
name|add
argument_list|(
name|CompoundQueryTerm
operator|.
name|not
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method to get the List of Queries appended into this      *      * @return List of all Queries added to this Query      */
specifier|public
name|List
name|getCompoundQueryTerms
parameter_list|()
block|{
return|return
name|compoundQueryTerms
return|;
block|}
block|}
end_class

end_unit

