begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * LuceneDocumentMaker - a utility class for making lucene documents.   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|LuceneDocumentMaker
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PRIMARY_KEY
init|=
literal|"pk"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_ID
init|=
literal|"repoId"
decl_stmt|;
specifier|private
name|Document
name|document
decl_stmt|;
comment|/**      * Construct a LuceneDocumentMaker based on the record provider.      *       * @param record the record.      * @throws IllegalArgumentException if the primary key is invalid.      */
specifier|public
name|LuceneDocumentMaker
parameter_list|(
name|LuceneRepositoryContentRecord
name|record
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not allowed to have a null record provider."
argument_list|)
throw|;
block|}
name|String
name|primaryKey
init|=
name|record
operator|.
name|getPrimaryKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|primaryKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not allowed to have a blank primary key."
argument_list|)
throw|;
block|}
name|String
name|repositoryId
init|=
name|record
operator|.
name|getRepositoryId
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not allowed to have a blank repository id."
argument_list|)
throw|;
block|}
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|PRIMARY_KEY
argument_list|,
name|primaryKey
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|REPOSITORY_ID
argument_list|,
name|repositoryId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneDocumentMaker
name|addFieldTokenized
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|LuceneDocumentMaker
name|addFieldTokenized
parameter_list|(
name|String
name|key
parameter_list|,
name|List
name|list
parameter_list|)
block|{
if|if
condition|(
operator|(
name|list
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|addFieldTokenized
argument_list|(
name|key
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|LuceneDocumentMaker
name|addFieldUntokenized
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|LuceneDocumentMaker
name|addFieldExact
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Document
name|getDocument
parameter_list|()
block|{
return|return
name|this
operator|.
name|document
return|;
block|}
block|}
end_class

end_unit

