begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|bytecode
operator|.
name|BytecodeRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|filecontent
operator|.
name|FileContentRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|hashcodes
operator|.
name|HashcodesRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|events
operator|.
name|RepositoryListener
import|;
end_import

begin_comment
comment|/**  * Process repository management events and respond appropriately.  *   * @todo creating index instances every time is inefficient, the plugin needs to have a repository context to operate in  * @plexus.component role="org.apache.maven.archiva.repository.events.RepositoryListener" role-hint="indexer"  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryContentIndexEventListener
implements|implements
name|RepositoryListener
block|{
comment|/**      * @plexus.requirement role-hint="lucene"      */
specifier|private
name|RepositoryContentIndexFactory
name|indexFactory
decl_stmt|;
specifier|public
name|void
name|deleteArtifact
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|ArchivaArtifact
name|artifact
parameter_list|)
block|{
try|try
block|{
name|RepositoryContentIndex
name|index
init|=
name|indexFactory
operator|.
name|createFileContentIndex
argument_list|(
name|repository
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|FileContentRecord
name|fileContentRecord
init|=
operator|new
name|FileContentRecord
argument_list|()
decl_stmt|;
name|fileContentRecord
operator|.
name|setRepositoryId
argument_list|(
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|fileContentRecord
operator|.
name|setFilename
argument_list|(
name|repository
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|deleteRecord
argument_list|(
name|fileContentRecord
argument_list|)
expr_stmt|;
name|index
operator|=
name|indexFactory
operator|.
name|createHashcodeIndex
argument_list|(
name|repository
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|HashcodesRecord
name|hashcodesRecord
init|=
operator|new
name|HashcodesRecord
argument_list|()
decl_stmt|;
name|fileContentRecord
operator|.
name|setRepositoryId
argument_list|(
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|hashcodesRecord
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|index
operator|.
name|deleteRecord
argument_list|(
name|hashcodesRecord
argument_list|)
expr_stmt|;
name|index
operator|=
name|indexFactory
operator|.
name|createBytecodeIndex
argument_list|(
name|repository
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|BytecodeRecord
name|bytecodeRecord
init|=
operator|new
name|BytecodeRecord
argument_list|()
decl_stmt|;
name|fileContentRecord
operator|.
name|setRepositoryId
argument_list|(
name|repository
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|bytecodeRecord
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|index
operator|.
name|deleteRecord
argument_list|(
name|bytecodeRecord
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
end_class

end_unit

