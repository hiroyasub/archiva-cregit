begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|CopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|StorageUtil
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
comment|/**      * Copies the source asset to the target. The assets may be from different RepositoryStorage instances.      *      * @param source The source asset      * @param target The target asset      * @param locked If true, a readlock is set on the source and a write lock is set on the target.      * @param copyOptions Copy options      * @throws IOException      */
specifier|public
specifier|static
specifier|final
name|void
name|copyAsset
parameter_list|(
specifier|final
name|StorageAsset
name|source
parameter_list|,
specifier|final
name|StorageAsset
name|target
parameter_list|,
name|boolean
name|locked
parameter_list|,
specifier|final
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|isFileBased
argument_list|()
operator|&&
name|target
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
comment|// Short cut for FS operations
specifier|final
name|Path
name|sourcePath
init|=
name|source
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|targetPath
init|=
name|target
operator|.
name|getFilePath
argument_list|( )
decl_stmt|;
if|if
condition|(
name|locked
condition|)
block|{
specifier|final
name|FileLockManager
name|lmSource
init|=
operator|(
operator|(
name|FilesystemStorage
operator|)
name|source
operator|.
name|getStorage
argument_list|()
operator|)
operator|.
name|getFileLockManager
argument_list|()
decl_stmt|;
specifier|final
name|FileLockManager
name|lmTarget
init|=
operator|(
operator|(
name|FilesystemStorage
operator|)
name|target
operator|.
name|getStorage
argument_list|()
operator|)
operator|.
name|getFileLockManager
argument_list|()
decl_stmt|;
try|try
init|(
name|Lock
name|lockRead
init|=
name|lmSource
operator|.
name|readFileLock
argument_list|(
name|sourcePath
argument_list|)
init|;
name|Lock
name|lockWrite
init|=
name|lmTarget
operator|.
name|writeFileLock
argument_list|(
name|targetPath
argument_list|)
init|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileLockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|FileLockTimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Files
operator|.
name|copy
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
specifier|final
name|RepositoryStorage
name|sourceStorage
init|=
name|source
operator|.
name|getStorage
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryStorage
name|targetStorage
init|=
name|target
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|sourceStorage
operator|.
name|consumeDataFromChannel
argument_list|(
name|source
argument_list|,
name|is
lambda|->
name|wrapWriteFunction
argument_list|(
name|is
argument_list|,
name|targetStorage
argument_list|,
name|target
argument_list|,
name|locked
argument_list|)
argument_list|,
name|locked
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      *      * @param source      * @param target      * @param locked      * @param copyOptions      * @throws IOException      */
specifier|public
specifier|static
name|void
name|moveAsset
parameter_list|(
name|StorageAsset
name|source
parameter_list|,
name|StorageAsset
name|target
parameter_list|,
name|boolean
name|locked
parameter_list|,
name|CopyOption
modifier|...
name|copyOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|isFileBased
argument_list|()
operator|&&
name|target
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
comment|// Short cut for FS operations
comment|// Move is atomic operation
name|Files
operator|.
name|move
argument_list|(
name|source
operator|.
name|getFilePath
argument_list|()
argument_list|,
name|target
operator|.
name|getFilePath
argument_list|()
argument_list|,
name|copyOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
specifier|final
name|RepositoryStorage
name|sourceStorage
init|=
name|source
operator|.
name|getStorage
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryStorage
name|targetStorage
init|=
name|target
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|sourceStorage
operator|.
name|consumeDataFromChannel
argument_list|(
name|source
argument_list|,
name|is
lambda|->
name|wrapWriteFunction
argument_list|(
name|is
argument_list|,
name|targetStorage
argument_list|,
name|target
argument_list|,
name|locked
argument_list|)
argument_list|,
name|locked
argument_list|)
expr_stmt|;
name|sourceStorage
operator|.
name|removeAsset
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|wrapWriteFunction
parameter_list|(
name|ReadableByteChannel
name|is
parameter_list|,
name|RepositoryStorage
name|targetStorage
parameter_list|,
name|StorageAsset
name|target
parameter_list|,
name|boolean
name|locked
parameter_list|)
block|{
try|try
block|{
name|targetStorage
operator|.
name|writeDataToChannel
argument_list|(
name|target
argument_list|,
name|os
lambda|->
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
argument_list|,
name|locked
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|ReadableByteChannel
name|is
parameter_list|,
specifier|final
name|WritableByteChannel
name|os
parameter_list|)
block|{
if|if
condition|(
name|is
operator|instanceof
name|FileChannel
condition|)
block|{
name|copy
argument_list|(
operator|(
name|FileChannel
operator|)
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|os
operator|instanceof
name|FileChannel
condition|)
block|{
name|copy
argument_list|(
name|is
argument_list|,
operator|(
name|FileChannel
operator|)
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|flip
argument_list|( )
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|( )
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|clear
argument_list|( )
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|FileChannel
name|is
parameter_list|,
specifier|final
name|WritableByteChannel
name|os
parameter_list|)
block|{
try|try
block|{
name|is
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|is
operator|.
name|size
argument_list|( )
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|ReadableByteChannel
name|is
parameter_list|,
specifier|final
name|FileChannel
name|os
parameter_list|)
block|{
try|try
block|{
name|os
operator|.
name|transferFrom
argument_list|(
name|is
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

