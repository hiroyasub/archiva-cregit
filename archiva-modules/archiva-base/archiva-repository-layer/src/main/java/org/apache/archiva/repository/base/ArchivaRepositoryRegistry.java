begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|AbstractRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|provider
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|provider
operator|.
name|ConfigurationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|provider
operator|.
name|ConfigurationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|provider
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexCreationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexUpdateFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|UnsupportedRepositoryTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|event
operator|.
name|RepositoryIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|event
operator|.
name|RepositoryRegistryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|CheckedResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|RepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|ListUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Registry for repositories. This is the central entry point for repositories. It provides methods for  * retrieving, adding and removing repositories.  *<p>  * The modification methods addXX and removeXX persist the changes immediately to the configuration. If the  * configuration save fails the changes are rolled back.  *<p>  * TODO: Audit events  *  * @since 3.0  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryRegistry"
argument_list|)
specifier|public
class|class
name|ArchivaRepositoryRegistry
implements|implements
name|ConfigurationListener
implements|,
name|EventHandler
argument_list|<
name|Event
argument_list|>
implements|,
name|RepositoryRegistry
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * We inject all repository providers      */
annotation|@
name|Inject
name|List
argument_list|<
name|RepositoryProvider
argument_list|>
name|repositoryProviders
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SpringJavaInjectionPointsAutowiringInspection"
argument_list|)
annotation|@
name|Inject
name|IndexManagerFactory
name|indexManagerFactory
decl_stmt|;
annotation|@
name|Inject
name|List
argument_list|<
name|MetadataReader
argument_list|>
name|metadataReaderList
decl_stmt|;
annotation|@
name|Inject
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|repositoryValidatorList
decl_stmt|;
specifier|private
name|boolean
name|ignoreIndexing
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|EventManager
name|eventManager
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|rwLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|( )
decl_stmt|;
specifier|private
name|RepositoryHandler
argument_list|<
name|RepositoryGroup
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|groupHandler
decl_stmt|;
specifier|private
name|RepositoryHandler
argument_list|<
name|ManagedRepository
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepositoryHandler
decl_stmt|;
specifier|private
name|RepositoryHandler
argument_list|<
name|RemoteRepository
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepositoryHandler
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|validators
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationHandler
name|configurationHandler
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|groups_initalized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|managed_initialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|remote_initialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|ArchivaRepositoryRegistry
parameter_list|(
name|ConfigurationHandler
name|configurationHandler
parameter_list|,
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|validatorList
parameter_list|)
block|{
name|this
operator|.
name|eventManager
operator|=
operator|new
name|EventManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurationHandler
operator|=
name|configurationHandler
expr_stmt|;
name|this
operator|.
name|validators
operator|=
name|initValidatorList
argument_list|(
name|validatorList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|initValidatorList
parameter_list|(
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|validators
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|val
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
name|validator
range|:
name|validators
control|)
block|{
name|val
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setRepositoryRegistry
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|configurationHandler
operator|.
name|setArchivaConfiguration
argument_list|(
name|archivaConfiguration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|private
name|void
name|initialize
parameter_list|( )
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing repository registry"
argument_list|)
expr_stmt|;
name|initializeManagedRepositories
argument_list|()
expr_stmt|;
name|initializeRemoteRepositories
argument_list|()
expr_stmt|;
name|initializeRepositoryGroups
argument_list|( )
expr_stmt|;
for|for
control|(
name|RepositoryProvider
name|provider
range|:
name|repositoryProviders
control|)
block|{
name|provider
operator|.
name|addRepositoryEventHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|configurationHandler
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|RELOADED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|managed_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|remote_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|groups_initalized
operator|.
name|get
argument_list|( )
condition|)
block|{
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeRepositoryGroups
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|groupHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|groupHandler
operator|.
name|initializeFromConfig
argument_list|( )
expr_stmt|;
name|this
operator|.
name|groups_initalized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|GROUPS_INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeManagedRepositories
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|managedRepositoryHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|managedRepositoryHandler
operator|.
name|initializeFromConfig
argument_list|( )
expr_stmt|;
name|this
operator|.
name|managed_initialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|MANAGED_REPOS_INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeRemoteRepositories
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|remoteRepositoryHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|remoteRepositoryHandler
operator|.
name|initializeFromConfig
argument_list|( )
expr_stmt|;
name|this
operator|.
name|remote_initialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|REMOTE_REPOS_INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerGroupHandler
parameter_list|(
name|RepositoryHandler
argument_list|<
name|RepositoryGroup
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
name|groupHandler
parameter_list|)
block|{
name|this
operator|.
name|groupHandler
operator|=
name|groupHandler
expr_stmt|;
name|doRegister
argument_list|(
name|groupHandler
argument_list|)
expr_stmt|;
name|initializeRepositoryGroups
argument_list|( )
expr_stmt|;
if|if
condition|(
name|managed_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|remote_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|groups_initalized
operator|.
name|get
argument_list|( )
condition|)
block|{
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerManagedRepositoryHandler
parameter_list|(
name|RepositoryHandler
argument_list|<
name|ManagedRepository
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepositoryHandler
parameter_list|)
block|{
name|this
operator|.
name|managedRepositoryHandler
operator|=
name|managedRepositoryHandler
expr_stmt|;
name|doRegister
argument_list|(
name|managedRepositoryHandler
argument_list|)
expr_stmt|;
name|initializeManagedRepositories
argument_list|()
expr_stmt|;
if|if
condition|(
name|managed_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|remote_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|groups_initalized
operator|.
name|get
argument_list|( )
condition|)
block|{
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerRemoteRepositoryHandler
parameter_list|(
name|RepositoryHandler
argument_list|<
name|RemoteRepository
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepositoryHandler
parameter_list|)
block|{
name|this
operator|.
name|remoteRepositoryHandler
operator|=
name|remoteRepositoryHandler
expr_stmt|;
name|doRegister
argument_list|(
name|remoteRepositoryHandler
argument_list|)
expr_stmt|;
name|initializeRemoteRepositories
argument_list|()
expr_stmt|;
if|if
condition|(
name|managed_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|remote_initialized
operator|.
name|get
argument_list|( )
operator|&&
name|groups_initalized
operator|.
name|get
argument_list|( )
condition|)
block|{
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|INITIALIZED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|destroy
parameter_list|( )
block|{
name|managedRepositoryHandler
operator|.
name|close
argument_list|( )
expr_stmt|;
name|remoteRepositoryHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|groupHandler
operator|.
name|close
argument_list|( )
expr_stmt|;
name|pushEvent
argument_list|(
operator|new
name|RepositoryRegistryEvent
argument_list|(
name|RepositoryRegistryEvent
operator|.
name|DESTROYED
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|getRepositoryProviderMap
parameter_list|( )
block|{
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
if|if
condition|(
name|repositoryProviders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RepositoryProvider
name|provider
range|:
name|repositoryProviders
control|)
block|{
for|for
control|(
name|RepositoryType
name|type
range|:
name|provider
operator|.
name|provides
argument_list|( )
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|RepositoryProvider
name|getProvider
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|repositoryProviders
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|repositoryProvider
lambda|->
name|repositoryProvider
operator|.
name|provides
argument_list|( )
operator|.
name|contains
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|( )
operator|.
name|orElseThrow
argument_list|(
parameter_list|( )
lambda|->
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type cannot be handled: "
operator|+
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaIndexManager
name|getIndexManager
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
return|return
name|indexManagerFactory
operator|.
name|getIndexManager
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataReader
name|getMetadataReader
parameter_list|(
specifier|final
name|RepositoryType
name|type
parameter_list|)
throws|throws
name|UnsupportedRepositoryTypeException
block|{
if|if
condition|(
name|metadataReaderList
operator|!=
literal|null
condition|)
block|{
return|return
name|metadataReaderList
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|mr
lambda|->
name|mr
operator|.
name|isValidForType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|( )
operator|.
name|orElseThrow
argument_list|(
parameter_list|( )
lambda|->
operator|new
name|UnsupportedRepositoryTypeException
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedRepositoryTypeException
argument_list|(
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns all repositories that are registered. There is no defined order of the returned repositories.      *      * @return a list of managed and remote repositories      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Repository
argument_list|>
name|getRepositories
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|managedRepositoryHandler
operator|.
name|getAll
argument_list|()
operator|.
name|stream
argument_list|( )
argument_list|,
name|remoteRepositoryHandler
operator|.
name|getAll
argument_list|()
operator|.
name|stream
argument_list|( )
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Returns only the managed repositories. There is no defined order of the returned repositories.      *      * @return a list of managed repositories      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|managed_initialized
operator|.
name|get
argument_list|()
condition|?
name|managedRepositoryHandler
operator|.
name|getAll
argument_list|( )
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Returns only the remote repositories. There is no defined order of the returned repositories.      *      * @return a list of remote repositories      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|RemoteRepository
argument_list|>
name|getRemoteRepositories
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|remote_initialized
operator|.
name|get
argument_list|()
condition|?
name|remoteRepositoryHandler
operator|.
name|getAll
argument_list|( )
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|RepositoryGroup
argument_list|>
name|getRepositoryGroups
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|groupHandler
operator|.
name|getAll
argument_list|( )
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Returns the repository with the given id. The returned repository may be a managed or remote repository.      * It returns null, if no repository is registered with the given id.      *      * @param repoId the repository id      * @return the repository if found, otherwise null      */
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getRepository {}"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
if|if
condition|(
name|managedRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Managed repo"
argument_list|)
expr_stmt|;
return|return
name|managedRepositoryHandler
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
if|else if
condition|(
name|remoteRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Remote repo"
argument_list|)
expr_stmt|;
return|return
name|remoteRepositoryHandler
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
if|else if
condition|(
name|groupHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
return|return
name|groupHandler
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Convenience method, that returns the managed repository with the given id.      * It returns null, if no managed repository is registered with this id.      *      * @param repoId the repository id      * @return the managed repository if found, otherwise null      */
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|managed_initialized
operator|.
name|get
argument_list|()
condition|?
name|managedRepositoryHandler
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Convenience method, that returns the remote repository with the given id.      * It returns null, if no remote repository is registered with this id.      *      * @param repoId the repository id      * @return the remote repository if found, otherwise null      */
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|getRemoteRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|remote_initialized
operator|.
name|get
argument_list|()
condition|?
name|remoteRepositoryHandler
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RepositoryGroup
name|getRepositoryGroup
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|groupHandler
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
operator|(
name|managedRepositoryHandler
operator|!=
literal|null
operator|&&
name|managedRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
operator|)
operator|||
operator|(
name|remoteRepositoryHandler
operator|!=
literal|null
operator|&&
name|remoteRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
operator|)
operator|||
operator|(
name|this
operator|.
name|groupHandler
operator|!=
literal|null
operator|&&
name|groupHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
name|managedRepositoryHandler
operator|!=
literal|null
operator|&&
name|managedRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRemoteRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
name|remoteRepositoryHandler
operator|!=
literal|null
operator|&&
name|remoteRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|repoId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRepositoryGroup
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
return|return
name|this
operator|.
name|groupHandler
operator|!=
literal|null
operator|&&
name|groupHandler
operator|.
name|hasRepository
argument_list|(
name|groupId
argument_list|)
return|;
block|}
specifier|protected
name|void
name|saveConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IndeterminateConfigurationException
throws|,
name|RegistryException
block|{
name|configurationHandler
operator|.
name|save
argument_list|(
name|configuration
argument_list|,
name|ConfigurationHandler
operator|.
name|REGISTRY_EVENT_TAG
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new repository to the current list, or replaces the repository definition with      * the same id, if it exists already.      * The change is saved to the configuration immediately.      *      * @param managedRepository the new repository.      * @throws RepositoryException if the new repository could not be saved to the configuration.      */
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|managed_initialized
operator|.
name|get
argument_list|()
condition|?
name|managedRepositoryHandler
operator|.
name|put
argument_list|(
name|managedRepository
argument_list|)
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id, if it exists already.      * The configuration is saved immediately.      *      * @param managedRepositoryConfiguration the repository configuration      * @return the updated or created repository      * @throws RepositoryException if an error occurs, or the configuration is not valid.      */
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|managedRepositoryHandler
operator|.
name|put
argument_list|(
name|managedRepositoryConfiguration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id. The given configuration object is updated, but      * the configuration is not saved.      *      * @param managedRepositoryConfiguration the new or changed managed repository configuration      * @param configuration                  the configuration object (may be<code>null</code>)      * @return the new or updated repository      * @throws RepositoryException if the configuration cannot be saved or updated      */
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|managedRepositoryHandler
operator|.
name|put
argument_list|(
name|managedRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CheckedResult
argument_list|<
name|ManagedRepository
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
argument_list|>
name|putRepositoryAndValidate
parameter_list|(
name|ManagedRepositoryConfiguration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|managedRepositoryHandler
operator|.
name|putWithCheck
argument_list|(
name|configuration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository group to the current list, or replaces the repository group definition with      * the same id, if it exists already.      * The change is saved to the configuration immediately.      *      * @param repositoryGroup the new repository group.      * @throws RepositoryException if the new repository group could not be saved to the configuration.      */
annotation|@
name|Override
specifier|public
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|groupHandler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Fatal error. RepositoryGroupHandler not registered!"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|groupHandler
operator|.
name|put
argument_list|(
name|repositoryGroup
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository group or updates the repository with the same id, if it exists already.      * The configuration is saved immediately.      *      * @param repositoryGroupConfiguration the repository configuration      * @return the updated or created repository      * @throws RepositoryException if an error occurs, or the configuration is not valid.      */
annotation|@
name|Override
specifier|public
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|groupHandler
operator|.
name|put
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CheckedResult
argument_list|<
name|RepositoryGroup
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
argument_list|>
name|putRepositoryGroupAndValidate
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|groupHandler
operator|.
name|putWithCheck
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository group or updates the repository group with the same id. The given configuration object is updated, but      * the configuration is not saved.      *      * @param repositoryGroupConfiguration The configuration of the new or changed repository group.      * @param configuration                The configuration object. If it is<code>null</code>, the configuration is not saved.      * @return The new or updated repository group      * @throws RepositoryException if the configuration cannot be saved or updated      */
annotation|@
name|Override
specifier|public
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|groupHandler
operator|.
name|put
argument_list|(
name|repositoryGroupConfiguration
argument_list|,
name|configuration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a remote repository, or overwrites the repository definition with the same id, if it exists already.      * The modification is saved to the configuration immediately.      *      * @param remoteRepository the remote repository to add      * @throws RepositoryException if an error occurs during configuration save      */
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|remoteRepositoryHandler
operator|.
name|put
argument_list|(
name|remoteRepository
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id, if it exists already.      * The configuration is saved immediately.      *      * @param remoteRepositoryConfiguration the repository configuration      * @return the updated or created repository      * @throws RepositoryException if an error occurs, or the configuration is not valid.      */
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|remoteRepositoryHandler
operator|.
name|put
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CheckedResult
argument_list|<
name|RemoteRepository
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
argument_list|>
name|putRepositoryAndValidate
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|remoteRepositoryHandler
operator|.
name|putWithCheck
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id. The given configuration object is updated, but      * the configuration is not saved.      *      * @param remoteRepositoryConfiguration the new or changed repository configuration      * @param configuration                 the configuration object      * @return the new or updated repository      * @throws RepositoryException if the configuration cannot be saved or updated      */
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|remoteRepositoryHandler
operator|.
name|put
argument_list|(
name|remoteRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Repository
name|repo
init|=
name|getRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|removeRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Trying to remove null repository"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|repo
operator|instanceof
name|RemoteRepository
condition|)
block|{
name|removeRepository
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|repo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repo
operator|instanceof
name|ManagedRepository
condition|)
block|{
name|removeRepository
argument_list|(
operator|(
name|ManagedRepository
operator|)
name|repo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repo
operator|instanceof
name|RepositoryGroup
condition|)
block|{
name|removeRepositoryGroup
argument_list|(
operator|(
name|RepositoryGroup
operator|)
name|repo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type not known: "
operator|+
name|repo
operator|.
name|getClass
argument_list|( )
argument_list|)
throw|;
block|}
block|}
comment|/**      * Removes a managed repository from the registry and configuration, if it exists.      * The change is saved to the configuration immediately.      *      * @param managedRepository the managed repository to remove      * @throws RepositoryException if a error occurs during configuration save      */
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
if|if
condition|(
name|managed_initialized
operator|.
name|get
argument_list|()
condition|)
name|managedRepositoryHandler
operator|.
name|remove
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
if|if
condition|(
name|managed_initialized
operator|.
name|get
argument_list|()
condition|)
name|managedRepositoryHandler
operator|.
name|remove
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Removes a repository group from the registry and configuration, if it exists.      * The change is saved to the configuration immediately.      *      * @param repositoryGroup the repository group to remove      * @throws RepositoryException if a error occurs during configuration save      */
annotation|@
name|Override
specifier|public
name|void
name|removeRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repositoryGroup
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|id
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|groupHandler
operator|.
name|hasRepository
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|groupHandler
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repositoryGroup
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|id
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|groupHandler
operator|.
name|hasRepository
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|groupHandler
operator|.
name|remove
argument_list|(
name|id
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes the remote repository from the registry and configuration.      * The change is saved to the configuration immediately.      *      * @param remoteRepository the remote repository to remove      * @throws RepositoryException if a error occurs during configuration save      */
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|remoteRepository
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|id
init|=
name|remoteRepository
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|remoteRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|remoteRepositoryHandler
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|remoteRepository
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|id
init|=
name|remoteRepository
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|remoteRepositoryHandler
operator|.
name|hasRepository
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|remoteRepositoryHandler
operator|.
name|remove
argument_list|(
name|id
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Reloads the registry from the configuration.      */
annotation|@
name|Override
specifier|public
name|void
name|reload
parameter_list|( )
block|{
name|initialize
argument_list|( )
expr_stmt|;
block|}
comment|/**      * Resets the indexing context of a given repository.      *      * @param repository The repository      * @throws IndexUpdateFailedException If the index could not be resetted.      */
annotation|@
name|Override
specifier|public
name|void
name|resetIndexingContext
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
if|if
condition|(
name|repository
operator|.
name|hasIndex
argument_list|( )
operator|&&
name|repository
operator|instanceof
name|EditableRepository
condition|)
block|{
name|EditableRepository
name|eRepo
init|=
operator|(
name|EditableRepository
operator|)
name|repository
decl_stmt|;
name|ArchivaIndexingContext
name|newCtx
init|=
name|getIndexManager
argument_list|(
name|repository
operator|.
name|getType
argument_list|( )
argument_list|)
operator|.
name|reset
argument_list|(
name|repository
operator|.
name|getIndexingContext
argument_list|( )
argument_list|)
decl_stmt|;
name|eRepo
operator|.
name|setIndexingContext
argument_list|(
name|newCtx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new repository instance with the same settings as this one. The cloned repository is not      * registered or saved to the configuration.      *      * @param repo The origin repository      * @return The cloned repository.      */
specifier|public
name|ManagedRepository
name|clone
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|isRegisteredId
argument_list|(
name|newId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The new id exists already: "
operator|+
name|newId
argument_list|)
throw|;
block|}
return|return
name|managedRepositoryHandler
operator|.
name|clone
argument_list|(
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
comment|/**      * Creates a new repository instance with the same settings as this one. The cloned repository is not      * registered or saved to the configuration.      *      * @param repo The origin repository      * @return The cloned repository.      */
specifier|public
name|RemoteRepository
name|clone
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|isRegisteredId
argument_list|(
name|newId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The new id exists already: "
operator|+
name|newId
argument_list|)
throw|;
block|}
return|return
name|remoteRepositoryHandler
operator|.
name|clone
argument_list|(
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Repository
parameter_list|>
name|T
name|clone
parameter_list|(
name|T
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|isRegisteredId
argument_list|(
name|newId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The new id exists already: "
operator|+
name|newId
argument_list|)
throw|;
block|}
if|if
condition|(
name|repo
operator|instanceof
name|RemoteRepository
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|remoteRepositoryHandler
operator|.
name|clone
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
if|else if
condition|(
name|repo
operator|instanceof
name|ManagedRepository
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|managedRepositoryHandler
operator|.
name|clone
argument_list|(
operator|(
name|ManagedRepository
operator|)
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
if|else if
condition|(
name|repo
operator|instanceof
name|RepositoryGroup
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|groupHandler
operator|.
name|clone
argument_list|(
operator|(
name|RepositoryGroup
operator|)
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"This repository class is not supported "
operator|+
name|repo
operator|.
name|getClass
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Repository
name|getRepositoryOfAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
if|if
condition|(
name|asset
operator|instanceof
name|Repository
condition|)
block|{
return|return
operator|(
name|Repository
operator|)
name|asset
return|;
block|}
else|else
block|{
return|return
name|getRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getRoot
argument_list|( )
operator|.
name|getStorage
argument_list|( )
operator|.
name|equals
argument_list|(
name|asset
operator|.
name|getStorage
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|( )
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|>
name|ValidationResponse
argument_list|<
name|R
argument_list|>
name|validateRepository
parameter_list|(
name|R
name|repository
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|errorMap
init|=
name|this
operator|.
name|validators
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
parameter_list|(
name|validator
parameter_list|)
lambda|->
name|validator
operator|.
name|getType
argument_list|( )
operator|.
name|equals
argument_list|(
name|RepositoryType
operator|.
name|ALL
argument_list|)
operator|||
name|repository
operator|.
name|getType
argument_list|( )
operator|.
name|equals
argument_list|(
name|validator
operator|.
name|getType
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|val
lambda|->
name|val
operator|.
name|isFlavour
argument_list|(
name|repository
operator|.
name|getClass
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|validator
lambda|->
operator|(
operator|(
name|RepositoryValidator
argument_list|<
name|R
argument_list|>
operator|)
name|validator
operator|)
operator|.
name|apply
argument_list|(
name|repository
argument_list|)
operator|.
name|getResult
argument_list|( )
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|,
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|,
name|ListUtils
operator|::
name|union
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ValidationResponse
argument_list|<>
argument_list|(
name|repository
argument_list|,
name|errorMap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|>
name|ValidationResponse
argument_list|<
name|R
argument_list|>
name|validateRepositoryForUpdate
parameter_list|(
name|R
name|repository
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|errorMap
init|=
name|this
operator|.
name|validators
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
parameter_list|(
name|validator
parameter_list|)
lambda|->
name|validator
operator|.
name|getType
argument_list|( )
operator|.
name|equals
argument_list|(
name|RepositoryType
operator|.
name|ALL
argument_list|)
operator|||
name|repository
operator|.
name|getType
argument_list|( )
operator|.
name|equals
argument_list|(
name|validator
operator|.
name|getType
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|val
lambda|->
name|val
operator|.
name|isFlavour
argument_list|(
name|repository
operator|.
name|getClass
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|validator
lambda|->
operator|(
operator|(
name|RepositoryValidator
argument_list|<
name|R
argument_list|>
operator|)
name|validator
operator|)
operator|.
name|applyForUpdate
argument_list|(
name|repository
argument_list|)
operator|.
name|getResult
argument_list|( )
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|,
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|,
name|ListUtils
operator|::
name|union
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ValidationResponse
argument_list|<>
argument_list|(
name|repository
argument_list|,
name|errorMap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configurationEvent
parameter_list|(
name|ConfigurationEvent
name|event
parameter_list|)
block|{
comment|// We ignore the event, if the save was triggered by ourself
if|if
condition|(
operator|!
name|ConfigurationHandler
operator|.
name|REGISTRY_EVENT_TAG
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getTag
argument_list|( )
argument_list|)
condition|)
block|{
name|reload
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Event
parameter_list|>
name|void
name|registerEventHandler
parameter_list|(
name|EventType
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|EventHandler
argument_list|<
name|?
super|super
name|T
argument_list|>
name|eventHandler
parameter_list|)
block|{
name|eventManager
operator|.
name|registerEventHandler
argument_list|(
name|type
argument_list|,
name|eventHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Event
parameter_list|>
name|void
name|unregisterEventHandler
parameter_list|(
name|EventType
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|EventHandler
argument_list|<
name|?
super|super
name|T
argument_list|>
name|eventHandler
parameter_list|)
block|{
name|eventManager
operator|.
name|unregisterEventHandler
argument_list|(
name|type
argument_list|,
name|eventHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// To avoid event cycles:
if|if
condition|(
name|sameOriginator
argument_list|(
name|event
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|event
operator|instanceof
name|RepositoryIndexEvent
condition|)
block|{
name|handleIndexCreationEvent
argument_list|(
operator|(
name|RepositoryIndexEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
comment|// We propagate all events to our listeners, but with context of repository registry
name|pushEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleIndexCreationEvent
parameter_list|(
name|RepositoryIndexEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreIndexing
operator|&&
operator|!
operator|(
name|event
operator|.
name|getRepository
argument_list|()
operator|instanceof
name|ManagedRepository
operator|)
condition|)
block|{
name|EditableRepository
name|repo
init|=
operator|(
name|EditableRepository
operator|)
name|event
operator|.
name|getRepository
argument_list|( )
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|ArchivaIndexManager
name|idxmgr
init|=
name|getIndexManager
argument_list|(
name|repo
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|getIndexingContext
argument_list|( )
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ArchivaIndexingContext
name|newCtx
init|=
name|idxmgr
operator|.
name|move
argument_list|(
name|repo
operator|.
name|getIndexingContext
argument_list|( )
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setIndexingContext
argument_list|(
name|newCtx
argument_list|)
expr_stmt|;
name|idxmgr
operator|.
name|updateLocalIndexPath
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexCreationFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not move index to new directory: '{}'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|ArchivaIndexingContext
name|context
init|=
name|idxmgr
operator|.
name|createContext
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setIndexingContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|idxmgr
operator|.
name|updateLocalIndexPath
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexCreationFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create index:  '{}'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|sameOriginator
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getSource
argument_list|( )
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|event
operator|.
name|hasPreviousEvent
argument_list|( )
condition|)
block|{
return|return
name|sameOriginator
argument_list|(
name|event
operator|.
name|getPreviousEvent
argument_list|( )
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|pushEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|eventManager
operator|.
name|fireEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|,
name|C
extends|extends
name|AbstractRepositoryConfiguration
parameter_list|>
name|void
name|doRegister
parameter_list|(
name|RepositoryHandler
argument_list|<
name|R
argument_list|,
name|C
argument_list|>
name|repositoryHandler
parameter_list|)
block|{
name|repositoryHandler
operator|.
name|setRepositoryProviders
argument_list|(
name|this
operator|.
name|repositoryProviders
argument_list|)
expr_stmt|;
name|repositoryHandler
operator|.
name|setRepositoryValidator
argument_list|(
name|this
operator|.
name|repositoryValidatorList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|registerHandler
parameter_list|(
name|RepositoryHandler
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|.
name|getVariant
argument_list|( )
operator|.
name|isAssignableFrom
argument_list|(
name|RepositoryGroup
operator|.
name|class
argument_list|)
condition|)
block|{
name|registerGroupHandler
argument_list|(
operator|(
name|RepositoryHandler
argument_list|<
name|RepositoryGroup
argument_list|,
name|RepositoryGroupConfiguration
argument_list|>
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|handler
operator|.
name|getVariant
argument_list|( )
operator|.
name|isAssignableFrom
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
condition|)
block|{
name|registerManagedRepositoryHandler
argument_list|(
operator|(
name|RepositoryHandler
argument_list|<
name|ManagedRepository
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|handler
operator|.
name|getVariant
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|RemoteRepository
operator|.
name|class
argument_list|)
condition|)
block|{
name|registerRemoteRepositoryHandler
argument_list|(
operator|(
name|RepositoryHandler
argument_list|<
name|RemoteRepository
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRegisteredId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|hasRepository
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|,
name|C
extends|extends
name|AbstractRepositoryConfiguration
parameter_list|>
name|RepositoryHandler
argument_list|<
name|R
argument_list|,
name|C
argument_list|>
name|getHandler
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|repositoryClazz
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|configurationClazz
parameter_list|)
block|{
if|if
condition|(
name|repositoryClazz
operator|.
name|isAssignableFrom
argument_list|(
name|RepositoryGroup
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|RepositoryHandler
argument_list|<
name|R
argument_list|,
name|C
argument_list|>
operator|)
name|this
operator|.
name|groupHandler
return|;
block|}
if|else if
condition|(
name|repositoryClazz
operator|.
name|isAssignableFrom
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|RepositoryHandler
argument_list|<
name|R
argument_list|,
name|C
argument_list|>
operator|)
name|this
operator|.
name|managedRepositoryHandler
return|;
block|}
if|else if
condition|(
name|repositoryClazz
operator|.
name|isAssignableFrom
argument_list|(
name|RemoteRepository
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|RepositoryHandler
argument_list|<
name|R
argument_list|,
name|C
argument_list|>
operator|)
name|this
operator|.
name|remoteRepositoryHandler
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isIgnoreIndexing
parameter_list|( )
block|{
return|return
name|ignoreIndexing
return|;
block|}
specifier|public
name|void
name|setIgnoreIndexing
parameter_list|(
name|boolean
name|ignoreIndexing
parameter_list|)
block|{
name|this
operator|.
name|ignoreIndexing
operator|=
name|ignoreIndexing
expr_stmt|;
block|}
block|}
end_class

end_unit

