begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|writers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ProjectModel400Writer for Maven 2 project model v4.0.0 pom files.    *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ProjectModel400Writer
implements|implements
name|ProjectModelWriter
block|{
specifier|private
specifier|static
specifier|final
name|Namespace
name|DEFAULT_NAMESPACE
init|=
name|Namespace
operator|.
name|get
argument_list|(
literal|""
argument_list|,
literal|"http://maven.apache.org/POM/4.0.0"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|write
parameter_list|(
name|ArchivaProjectModel
name|model
parameter_list|,
name|File
name|pomFile
parameter_list|)
throws|throws
name|ProjectModelException
throws|,
name|IOException
block|{
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|pomFile
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|model
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|ArchivaProjectModel
name|model
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|ProjectModelException
throws|,
name|IOException
block|{
name|Document
name|doc
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|DocumentHelper
operator|.
name|createElement
argument_list|(
literal|"project"
argument_list|)
decl_stmt|;
name|root
operator|.
name|add
argument_list|(
name|DEFAULT_NAMESPACE
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"xsi:schemaLocation"
argument_list|,
literal|"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setRootElement
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"modelVersion"
argument_list|)
operator|.
name|setText
argument_list|(
literal|"4.0.0"
argument_list|)
expr_stmt|;
name|addParent
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getParentProject
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|root
argument_list|,
literal|"groupId"
argument_list|,
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"artifactId"
argument_list|)
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|root
argument_list|,
literal|"version"
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|root
argument_list|,
literal|"packaging"
argument_list|,
name|model
operator|.
name|getPackaging
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|root
argument_list|,
literal|"name"
argument_list|,
name|model
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|root
argument_list|,
literal|"description"
argument_list|,
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|root
argument_list|,
literal|"url"
argument_list|,
name|model
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: add inceptionYear to ArchivaProjectModel
name|addOrganization
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|addIssueManagement
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
name|addCiManagement
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
name|addMailingLists
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|addDevelopersAndContributors
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getIndividuals
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: add distribution management to ArchivaProjectModel
name|addLicenses
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
name|addRepositories
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|addDependencyManagement
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
expr_stmt|;
name|addDependencies
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|addReporting
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getReports
argument_list|()
argument_list|)
expr_stmt|;
name|addScm
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getScm
argument_list|()
argument_list|)
expr_stmt|;
comment|//<build> element
name|addPlugins
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getPlugins
argument_list|()
argument_list|)
expr_stmt|;
name|addBuildExtensions
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getBuildExtensions
argument_list|()
argument_list|)
expr_stmt|;
comment|//<distributionManagement>
name|addRelocation
argument_list|(
name|root
argument_list|,
name|model
operator|.
name|getRelocation
argument_list|()
argument_list|)
expr_stmt|;
name|fixDefaultNamespace
argument_list|(
name|root
argument_list|)
expr_stmt|;
try|try
block|{
name|XMLWriter
operator|.
name|write
argument_list|(
name|doc
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Unable to write xml contents to writer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addArtifactReference
parameter_list|(
name|Element
name|elem
parameter_list|,
name|ArtifactReference
name|ref
parameter_list|,
name|String
name|defaultType
parameter_list|)
block|{
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"groupId"
argument_list|,
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"artifactId"
argument_list|,
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"version"
argument_list|,
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"classifier"
argument_list|,
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|defaultType
argument_list|,
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"type"
argument_list|,
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addBuildExtensions
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|buildExtensions
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|buildExtensions
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|build
init|=
name|root
operator|.
name|element
argument_list|(
literal|"build"
argument_list|)
decl_stmt|;
if|if
condition|(
name|build
operator|==
literal|null
condition|)
block|{
name|build
operator|=
name|root
operator|.
name|addElement
argument_list|(
literal|"build"
argument_list|)
expr_stmt|;
block|}
name|Element
name|elemExtensions
init|=
name|build
operator|.
name|addElement
argument_list|(
literal|"extensions"
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactReference
name|extension
range|:
name|buildExtensions
control|)
block|{
name|Element
name|elem
init|=
name|elemExtensions
operator|.
name|addElement
argument_list|(
literal|"extension"
argument_list|)
decl_stmt|;
name|addArtifactReference
argument_list|(
name|elem
argument_list|,
name|extension
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addCiManagement
parameter_list|(
name|Element
name|root
parameter_list|,
name|CiManagement
name|ciManagement
parameter_list|)
block|{
if|if
condition|(
name|ciManagement
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|elem
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"ciManagement"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"system"
argument_list|,
name|ciManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"url"
argument_list|,
name|ciManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Add notifiers into ArchivaProjectModel
block|}
specifier|private
name|void
name|addDependencies
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|dependencies
argument_list|)
condition|)
block|{
return|return;
block|}
name|addDependencyList
argument_list|(
name|root
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDependencyList
parameter_list|(
name|Element
name|elemParent
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|dependencies
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|elemDeps
init|=
name|elemParent
operator|.
name|addElement
argument_list|(
literal|"dependencies"
argument_list|)
decl_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|dependencies
control|)
block|{
name|Element
name|elem
init|=
name|elemDeps
operator|.
name|addElement
argument_list|(
literal|"dependency"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"groupId"
argument_list|,
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"artifactId"
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"version"
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"classifier"
argument_list|,
name|dep
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"type"
argument_list|,
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"scope"
argument_list|,
name|dep
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"systemPath"
argument_list|,
name|dep
operator|.
name|getSystemPath
argument_list|()
argument_list|)
expr_stmt|;
name|addExclusions
argument_list|(
name|elem
argument_list|,
name|dep
operator|.
name|getExclusions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addDependencyManagement
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencyManagement
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|dependencyManagement
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|elemDepMgmt
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"dependencyManagement"
argument_list|)
decl_stmt|;
name|addDependencyList
argument_list|(
name|elemDepMgmt
argument_list|,
name|dependencyManagement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDevelopersAndContributors
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|Individual
argument_list|>
name|individuals
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|individuals
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|developers
init|=
literal|null
decl_stmt|;
name|Element
name|contributors
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Individual
name|individual
range|:
name|individuals
control|)
block|{
if|if
condition|(
name|individual
operator|.
name|isCommitor
argument_list|()
condition|)
block|{
if|if
condition|(
name|developers
operator|==
literal|null
condition|)
block|{
name|developers
operator|=
name|root
operator|.
name|addElement
argument_list|(
literal|"developers"
argument_list|)
expr_stmt|;
block|}
name|Element
name|developer
init|=
name|developers
operator|.
name|addElement
argument_list|(
literal|"developer"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|developer
argument_list|,
literal|"id"
argument_list|,
name|individual
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|addIndividual
argument_list|(
name|developer
argument_list|,
name|individual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|contributors
operator|==
literal|null
condition|)
block|{
name|contributors
operator|=
name|root
operator|.
name|addElement
argument_list|(
literal|"contributors"
argument_list|)
expr_stmt|;
block|}
name|Element
name|contributor
init|=
name|contributors
operator|.
name|addElement
argument_list|(
literal|"contributor"
argument_list|)
decl_stmt|;
name|addIndividual
argument_list|(
name|contributor
argument_list|,
name|individual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addExclusions
parameter_list|(
name|Element
name|elemParent
parameter_list|,
name|List
argument_list|<
name|Exclusion
argument_list|>
name|exclusions
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|exclusions
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|elemExclusions
init|=
name|elemParent
operator|.
name|addElement
argument_list|(
literal|"exclusions"
argument_list|)
decl_stmt|;
for|for
control|(
name|Exclusion
name|exclusion
range|:
name|exclusions
control|)
block|{
name|Element
name|elem
init|=
name|elemExclusions
operator|.
name|addElement
argument_list|(
literal|"exclusion"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"groupId"
argument_list|,
name|exclusion
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"artifactId"
argument_list|,
name|exclusion
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addIndividual
parameter_list|(
name|Element
name|elem
parameter_list|,
name|Individual
name|individual
parameter_list|)
block|{
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"name"
argument_list|,
name|individual
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"email"
argument_list|,
name|individual
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"organization"
argument_list|,
name|individual
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"organizationUrl"
argument_list|,
name|individual
operator|.
name|getOrganizationUrl
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"timezone"
argument_list|,
name|individual
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|individual
operator|.
name|getRoles
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|roles
init|=
name|elem
operator|.
name|addElement
argument_list|(
literal|"roles"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleList
init|=
name|individual
operator|.
name|getRoles
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleList
control|)
block|{
name|addChildElement
argument_list|(
name|roles
argument_list|,
literal|"role"
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addIssueManagement
parameter_list|(
name|Element
name|root
parameter_list|,
name|IssueManagement
name|issueManagement
parameter_list|)
block|{
if|if
condition|(
name|issueManagement
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|elem
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"issueManagement"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"system"
argument_list|,
name|issueManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"url"
argument_list|,
name|issueManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addLicenses
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|License
argument_list|>
name|licenses
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|licenses
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|elemLicenses
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"licenses"
argument_list|)
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|licenses
control|)
block|{
name|Element
name|elem
init|=
name|elemLicenses
operator|.
name|addElement
argument_list|(
literal|"license"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"name"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"url"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: research if we need<distribution> subelement.
block|}
block|}
specifier|private
name|void
name|addMailingLists
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|mailingLists
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|mlists
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"mailingLists"
argument_list|)
decl_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|mailingLists
control|)
block|{
name|Element
name|mlist
init|=
name|mlists
operator|.
name|addElement
argument_list|(
literal|"mailingList"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|mlist
argument_list|,
literal|"name"
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|mlist
argument_list|,
literal|"post"
argument_list|,
name|mailingList
operator|.
name|getPostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|mlist
argument_list|,
literal|"subscribe"
argument_list|,
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|mlist
argument_list|,
literal|"unsubscribe"
argument_list|,
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|mlist
argument_list|,
literal|"archive"
argument_list|,
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|()
argument_list|)
expr_stmt|;
name|addOtherArchives
argument_list|(
name|mlist
argument_list|,
name|mailingList
operator|.
name|getOtherArchives
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addOtherArchives
parameter_list|(
name|Element
name|mlist
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|otherArchives
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|otherArchives
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|elemOtherArchives
init|=
name|mlist
operator|.
name|addElement
argument_list|(
literal|"otherArchives"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|archive
range|:
name|otherArchives
control|)
block|{
name|addChildElement
argument_list|(
name|elemOtherArchives
argument_list|,
literal|"otherArchive"
argument_list|,
name|archive
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addOrganization
parameter_list|(
name|Element
name|root
parameter_list|,
name|Organization
name|organization
parameter_list|)
block|{
if|if
condition|(
name|organization
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|elem
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"organization"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"name"
argument_list|,
name|organization
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"url"
argument_list|,
name|organization
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addParent
parameter_list|(
name|Element
name|root
parameter_list|,
name|VersionedReference
name|parentProject
parameter_list|)
block|{
if|if
condition|(
name|parentProject
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|parent
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addElement
argument_list|(
literal|"groupId"
argument_list|)
operator|.
name|setText
argument_list|(
name|parentProject
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addElement
argument_list|(
literal|"artifactId"
argument_list|)
operator|.
name|setText
argument_list|(
name|parentProject
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addElement
argument_list|(
literal|"version"
argument_list|)
operator|.
name|setText
argument_list|(
name|parentProject
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPlugins
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|plugins
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|plugins
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|build
init|=
name|root
operator|.
name|element
argument_list|(
literal|"build"
argument_list|)
decl_stmt|;
if|if
condition|(
name|build
operator|==
literal|null
condition|)
block|{
name|build
operator|=
name|root
operator|.
name|addElement
argument_list|(
literal|"build"
argument_list|)
expr_stmt|;
block|}
name|Element
name|elemPlugins
init|=
name|build
operator|.
name|addElement
argument_list|(
literal|"plugins"
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactReference
name|plugin
range|:
name|plugins
control|)
block|{
name|Element
name|elem
init|=
name|elemPlugins
operator|.
name|addElement
argument_list|(
literal|"plugin"
argument_list|)
decl_stmt|;
name|addArtifactReference
argument_list|(
name|elem
argument_list|,
name|plugin
argument_list|,
literal|"maven-plugin"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addRelocation
parameter_list|(
name|Element
name|root
parameter_list|,
name|VersionedReference
name|relocation
parameter_list|)
block|{
if|if
condition|(
name|relocation
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|distribManagement
init|=
name|root
operator|.
name|element
argument_list|(
literal|"distributionManagement"
argument_list|)
decl_stmt|;
if|if
condition|(
name|distribManagement
operator|==
literal|null
condition|)
block|{
name|distribManagement
operator|=
name|root
operator|.
name|addElement
argument_list|(
literal|"distributionManagement"
argument_list|)
expr_stmt|;
block|}
name|Element
name|elem
init|=
name|distribManagement
operator|.
name|addElement
argument_list|(
literal|"relocation"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"groupId"
argument_list|,
name|relocation
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"artifactId"
argument_list|,
name|relocation
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"version"
argument_list|,
name|relocation
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addReporting
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|reports
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|reports
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|reporting
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"reporting"
argument_list|)
decl_stmt|;
name|Element
name|plugins
init|=
name|reporting
operator|.
name|addElement
argument_list|(
literal|"plugins"
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactReference
name|reference
range|:
name|reports
control|)
block|{
name|Element
name|plugin
init|=
name|plugins
operator|.
name|addElement
argument_list|(
literal|"plugin"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|plugin
argument_list|,
literal|"groupId"
argument_list|,
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|plugin
argument_list|,
literal|"artifactId"
argument_list|,
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|plugin
argument_list|,
literal|"version"
argument_list|,
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addRepositories
parameter_list|(
name|Element
name|root
parameter_list|,
name|List
argument_list|<
name|ProjectRepository
argument_list|>
name|repositories
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|repositories
argument_list|)
condition|)
block|{
return|return;
block|}
name|Element
name|elemRepos
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"repositories"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProjectRepository
name|repository
range|:
name|repositories
control|)
block|{
name|Element
name|elem
init|=
name|elemRepos
operator|.
name|addElement
argument_list|(
literal|"repository"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"id"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"name"
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"url"
argument_list|,
name|repository
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|,
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
condition|)
block|{
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"layout"
argument_list|,
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addScm
parameter_list|(
name|Element
name|root
parameter_list|,
name|Scm
name|scm
parameter_list|)
block|{
if|if
condition|(
name|scm
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|elem
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"scm"
argument_list|)
decl_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"connection"
argument_list|,
name|scm
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"developerConnection"
argument_list|,
name|scm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
name|addChildElement
argument_list|(
name|elem
argument_list|,
literal|"url"
argument_list|,
name|scm
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fix the default namespace on all elements recursively.      */
specifier|private
name|void
name|fixDefaultNamespace
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
name|elem
operator|.
name|remove
argument_list|(
name|elem
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setQName
argument_list|(
name|QName
operator|.
name|get
argument_list|(
name|elem
operator|.
name|getName
argument_list|()
argument_list|,
name|DEFAULT_NAMESPACE
argument_list|,
name|elem
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
decl_stmt|;
name|Iterator
argument_list|<
name|Node
argument_list|>
name|it
init|=
name|elem
operator|.
name|elementIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|n
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|fixDefaultNamespace
argument_list|(
operator|(
name|Element
operator|)
name|n
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addChildElement
parameter_list|(
name|Element
name|elem
parameter_list|,
name|String
name|elemName
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return;
block|}
name|elem
operator|.
name|addElement
argument_list|(
name|elemName
argument_list|)
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

