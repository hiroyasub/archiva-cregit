begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Immutable class, that represents a project.  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaProject
extends|extends
name|ArchivaContentItem
implements|implements
name|Project
block|{
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|RepositoryContent
name|repositoryContent
decl_stmt|;
specifier|private
name|StorageAsset
name|asset
decl_stmt|;
comment|// Setting all setters to private. Builder is the way to go.
specifier|private
name|ArchivaProject
parameter_list|()
block|{
block|}
comment|/**      * Creates the builder that allows to create a new instance.      * @param id the project id, must not be<code>null</code>      * @return a builder instance      */
specifier|public
specifier|static
name|Builder
name|withId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|( )
operator|.
name|withId
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespace
parameter_list|( )
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|( )
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryContent
name|getRepository
parameter_list|( )
block|{
return|return
name|this
operator|.
name|repositoryContent
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|getAsset
parameter_list|( )
block|{
return|return
name|asset
return|;
block|}
comment|/*      * Builder interface chaining is used to restrict mandatory attributes      * This interface is for the optional arguments.      */
specifier|public
interface|interface
name|OptBuilder
block|{
name|OptBuilder
name|withAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
function_decl|;
name|OptBuilder
name|withNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
function_decl|;
name|OptBuilder
name|withAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
block|}
comment|/*      * Builder classes for instantiation      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
implements|implements
name|OptBuilder
block|{
specifier|final
specifier|private
name|ArchivaProject
name|project
init|=
operator|new
name|ArchivaProject
argument_list|()
decl_stmt|;
specifier|private
name|Builder
parameter_list|( )
block|{
block|}
specifier|private
name|Builder
name|withId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null or empty value not allowed for id"
argument_list|)
throw|;
block|}
name|project
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|OptBuilder
name|withRepository
parameter_list|(
name|RepositoryContent
name|repository
parameter_list|)
block|{
name|project
operator|.
name|repositoryContent
operator|=
name|repository
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|OptBuilder
name|withAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
name|project
operator|.
name|asset
operator|=
name|asset
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|OptBuilder
name|withNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null value not allowed for namespace"
argument_list|)
throw|;
block|}
name|project
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|OptBuilder
name|withAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|project
operator|.
name|putAttribute
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|ArchivaProject
name|build
parameter_list|()
block|{
if|if
condition|(
name|project
operator|.
name|namespace
operator|==
literal|null
condition|)
block|{
name|project
operator|.
name|namespace
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|asset
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|project
operator|.
name|getRepository
argument_list|()
operator|instanceof
name|ManagedRepositoryContent
condition|)
block|{
name|project
operator|.
name|asset
operator|=
operator|(
operator|(
name|ManagedRepositoryContent
operator|)
name|project
operator|.
name|getRepository
argument_list|( )
operator|)
operator|.
name|getRepository
argument_list|( )
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|project
return|;
block|}
block|}
block|}
end_class

end_unit

