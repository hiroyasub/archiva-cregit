begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|OpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|AclEntryPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|AclFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|FilesystemAsset
implements|implements
name|StorageAsset
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FilesystemAsset
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|basePath
decl_stmt|;
specifier|private
specifier|final
name|Path
name|assetPath
decl_stmt|;
specifier|private
specifier|final
name|Path
name|completeAssetPath
decl_stmt|;
specifier|public
name|String
name|DEFAULT_POSIX_FILE_PERMS
init|=
literal|"rw-rw----"
decl_stmt|;
specifier|public
name|String
name|DEFAULT_POSIX_DIR_PERMS
init|=
literal|"rwxrwx---"
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|defaultFileAcls
decl_stmt|;
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|defaultPosixFilePermissions
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|defaultDirectoryAcls
decl_stmt|;
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|defaultPosixDirectoryPermissions
decl_stmt|;
name|boolean
name|supportsAcl
init|=
literal|false
decl_stmt|;
name|boolean
name|supportsPosix
init|=
literal|false
decl_stmt|;
name|boolean
name|directory
init|=
literal|false
decl_stmt|;
specifier|public
name|FilesystemAsset
parameter_list|(
name|Path
name|basePath
parameter_list|,
name|String
name|assetPath
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
name|this
operator|.
name|assetPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|assetPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|completeAssetPath
operator|=
name|basePath
operator|.
name|resolve
argument_list|(
name|assetPath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|( )
expr_stmt|;
name|init
argument_list|( )
expr_stmt|;
block|}
specifier|public
name|FilesystemAsset
parameter_list|(
name|Path
name|basePath
parameter_list|,
name|String
name|assetPath
parameter_list|,
name|boolean
name|directory
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
name|this
operator|.
name|assetPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|assetPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|completeAssetPath
operator|=
name|basePath
operator|.
name|resolve
argument_list|(
name|assetPath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|( )
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|init
argument_list|( )
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|( )
block|{
name|defaultFileAcls
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
expr_stmt|;
name|AclEntry
operator|.
name|Builder
name|aclBuilder
init|=
name|AclEntry
operator|.
name|newBuilder
argument_list|( )
decl_stmt|;
name|aclBuilder
operator|.
name|setPermissions
argument_list|(
name|AclEntryPermission
operator|.
name|DELETE
argument_list|,
name|AclEntryPermission
operator|.
name|READ_ACL
argument_list|,
name|AclEntryPermission
operator|.
name|READ_ATTRIBUTES
argument_list|,
name|AclEntryPermission
operator|.
name|READ_DATA
argument_list|,
name|AclEntryPermission
operator|.
name|WRITE_ACL
argument_list|,
name|AclEntryPermission
operator|.
name|WRITE_ATTRIBUTES
argument_list|,
name|AclEntryPermission
operator|.
name|WRITE_DATA
argument_list|,
name|AclEntryPermission
operator|.
name|APPEND_DATA
argument_list|)
expr_stmt|;
name|aclBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|ALLOW
argument_list|)
expr_stmt|;
name|defaultFileAcls
operator|.
name|add
argument_list|(
name|aclBuilder
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|AclEntry
operator|.
name|Builder
name|aclDirBuilder
init|=
name|AclEntry
operator|.
name|newBuilder
argument_list|( )
decl_stmt|;
name|aclDirBuilder
operator|.
name|setPermissions
argument_list|(
name|AclEntryPermission
operator|.
name|ADD_FILE
argument_list|,
name|AclEntryPermission
operator|.
name|ADD_SUBDIRECTORY
argument_list|,
name|AclEntryPermission
operator|.
name|DELETE_CHILD
argument_list|,
name|AclEntryPermission
operator|.
name|DELETE
argument_list|,
name|AclEntryPermission
operator|.
name|READ_ACL
argument_list|,
name|AclEntryPermission
operator|.
name|READ_ATTRIBUTES
argument_list|,
name|AclEntryPermission
operator|.
name|READ_DATA
argument_list|,
name|AclEntryPermission
operator|.
name|WRITE_ACL
argument_list|,
name|AclEntryPermission
operator|.
name|WRITE_ATTRIBUTES
argument_list|,
name|AclEntryPermission
operator|.
name|WRITE_DATA
argument_list|,
name|AclEntryPermission
operator|.
name|APPEND_DATA
argument_list|)
expr_stmt|;
name|aclDirBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|ALLOW
argument_list|)
expr_stmt|;
name|defaultDirectoryAcls
operator|.
name|add
argument_list|(
name|aclDirBuilder
operator|.
name|build
argument_list|( )
argument_list|)
expr_stmt|;
name|defaultPosixFilePermissions
operator|=
name|PosixFilePermissions
operator|.
name|fromString
argument_list|(
name|DEFAULT_POSIX_FILE_PERMS
argument_list|)
expr_stmt|;
name|defaultPosixDirectoryPermissions
operator|=
name|PosixFilePermissions
operator|.
name|fromString
argument_list|(
name|DEFAULT_POSIX_DIR_PERMS
argument_list|)
expr_stmt|;
try|try
block|{
name|supportsAcl
operator|=
name|Files
operator|.
name|getFileStore
argument_list|(
name|completeAssetPath
argument_list|)
operator|.
name|supportsFileAttributeView
argument_list|(
name|AclFileAttributeView
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not check filesystem capabilities {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|supportsPosix
operator|=
name|Files
operator|.
name|getFileStore
argument_list|(
name|completeAssetPath
argument_list|)
operator|.
name|supportsFileAttributeView
argument_list|(
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not check filesystem capabilities {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|( )
block|{
return|return
name|assetPath
operator|.
name|toString
argument_list|( )
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|( )
block|{
return|return
name|assetPath
operator|.
name|getFileName
argument_list|( )
operator|.
name|toString
argument_list|( )
return|;
block|}
annotation|@
name|Override
specifier|public
name|Instant
name|getModificationTime
parameter_list|( )
block|{
try|try
block|{
return|return
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|completeAssetPath
argument_list|)
operator|.
name|toInstant
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not read modification time of {}"
argument_list|,
name|completeAssetPath
argument_list|)
expr_stmt|;
return|return
name|Instant
operator|.
name|now
argument_list|( )
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isContainer
parameter_list|( )
block|{
return|return
name|Files
operator|.
name|isDirectory
argument_list|(
name|completeAssetPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StorageAsset
argument_list|>
name|list
parameter_list|( )
block|{
try|try
block|{
return|return
name|Files
operator|.
name|list
argument_list|(
name|completeAssetPath
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|new
name|FilesystemAsset
argument_list|(
name|basePath
argument_list|,
name|basePath
operator|.
name|relativize
argument_list|(
name|p
argument_list|)
operator|.
name|toString
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|( )
block|{
try|try
block|{
return|return
name|Files
operator|.
name|size
argument_list|(
name|completeAssetPath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getData
parameter_list|( )
throws|throws
name|IOException
block|{
return|return
name|Files
operator|.
name|newInputStream
argument_list|(
name|completeAssetPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|writeData
parameter_list|(
name|boolean
name|replace
parameter_list|)
throws|throws
name|IOException
block|{
name|OpenOption
index|[]
name|options
decl_stmt|;
if|if
condition|(
name|replace
condition|)
block|{
name|options
operator|=
operator|new
name|OpenOption
index|[]
block|{
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
block|,
name|StandardOpenOption
operator|.
name|CREATE
block|}
expr_stmt|;
block|}
else|else
block|{
name|options
operator|=
operator|new
name|OpenOption
index|[]
block|{
name|StandardOpenOption
operator|.
name|APPEND
block|}
expr_stmt|;
block|}
return|return
name|Files
operator|.
name|newOutputStream
argument_list|(
name|completeAssetPath
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|storeDataFile
parameter_list|(
name|Path
name|newData
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|createNew
init|=
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|completeAssetPath
argument_list|)
decl_stmt|;
name|Path
name|backup
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|createNew
condition|)
block|{
name|backup
operator|=
name|findBackupFile
argument_list|(
name|completeAssetPath
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|createNew
condition|)
block|{
name|Files
operator|.
name|move
argument_list|(
name|completeAssetPath
argument_list|,
name|backup
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|move
argument_list|(
name|newData
argument_list|,
name|completeAssetPath
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|setDefaultPermissions
argument_list|(
name|completeAssetPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not overwrite file {}"
argument_list|,
name|completeAssetPath
argument_list|)
expr_stmt|;
comment|// Revert if possible
if|if
condition|(
name|backup
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|backup
argument_list|)
condition|)
block|{
name|Files
operator|.
name|move
argument_list|(
name|backup
argument_list|,
name|completeAssetPath
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|backup
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|backup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not delete backup file {}"
argument_list|,
name|backup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setDefaultPermissions
parameter_list|(
name|Path
name|filePath
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|supportsPosix
condition|)
block|{
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|perms
operator|=
name|defaultPosixFilePermissions
expr_stmt|;
block|}
else|else
block|{
name|perms
operator|=
name|defaultPosixDirectoryPermissions
expr_stmt|;
block|}
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|filePath
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|supportsAcl
condition|)
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|perms
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|perms
operator|=
name|defaultDirectoryAcls
expr_stmt|;
block|}
else|else
block|{
name|perms
operator|=
name|defaultFileAcls
expr_stmt|;
block|}
name|AclFileAttributeView
name|aclAttr
init|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|filePath
argument_list|,
name|AclFileAttributeView
operator|.
name|class
argument_list|)
decl_stmt|;
name|aclAttr
operator|.
name|setAcl
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set permissions for {}: {}"
argument_list|,
name|filePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Path
name|findBackupFile
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|String
name|ext
init|=
literal|".bak"
decl_stmt|;
name|Path
name|backupPath
init|=
name|file
operator|.
name|getParent
argument_list|( )
operator|.
name|resolve
argument_list|(
name|file
operator|.
name|getFileName
argument_list|( )
operator|.
name|toString
argument_list|( )
operator|+
name|ext
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|backupPath
argument_list|)
condition|)
block|{
name|backupPath
operator|=
name|file
operator|.
name|getParent
argument_list|( )
operator|.
name|resolve
argument_list|(
name|file
operator|.
name|getFileName
argument_list|( )
operator|.
name|toString
argument_list|( )
operator|+
name|ext
operator|+
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|backupPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|( )
block|{
return|return
name|Files
operator|.
name|exists
argument_list|(
name|completeAssetPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getFilePath
parameter_list|( )
throws|throws
name|UnsupportedOperationException
block|{
return|return
name|completeAssetPath
return|;
block|}
specifier|public
name|void
name|setDefaultFileAcls
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acl
parameter_list|)
block|{
name|defaultFileAcls
operator|=
name|acl
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getDefaultFileAcls
parameter_list|( )
block|{
return|return
name|defaultFileAcls
return|;
block|}
specifier|public
name|void
name|setDefaultPosixFilePermissions
parameter_list|(
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
parameter_list|)
block|{
name|defaultPosixFilePermissions
operator|=
name|perms
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|getDefaultPosixFilePermissions
parameter_list|( )
block|{
return|return
name|defaultPosixFilePermissions
return|;
block|}
specifier|public
name|void
name|setDefaultDirectoryAcls
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acl
parameter_list|)
block|{
name|defaultDirectoryAcls
operator|=
name|acl
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getDefaultDirectoryAcls
parameter_list|( )
block|{
return|return
name|defaultDirectoryAcls
return|;
block|}
specifier|public
name|void
name|setDefaultPosixDirectoryPermissions
parameter_list|(
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
parameter_list|)
block|{
name|defaultPosixDirectoryPermissions
operator|=
name|perms
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|getDefaultPosixDirectoryPermissions
parameter_list|( )
block|{
return|return
name|defaultPosixDirectoryPermissions
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|( )
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|completeAssetPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|directory
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|completeAssetPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|createFile
argument_list|(
name|completeAssetPath
argument_list|)
expr_stmt|;
block|}
name|setDefaultPermissions
argument_list|(
name|completeAssetPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
return|return
name|assetPath
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

