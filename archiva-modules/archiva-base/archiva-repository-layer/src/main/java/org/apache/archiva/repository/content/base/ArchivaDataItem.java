begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|BaseArtifactTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|BaseDataItemTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|DataItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|DataItemType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|DataItemOptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|DataItemWithIdBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Base implementation of artifact.  *<p>  * You have to use the builder method {@link #withAsset(StorageAsset)} to create a instance.  * The build() method can be called after the required attributes are set.  *<p>  * Artifacts are equal if the following coordinates match:  *<ul>  *<li>repository</li>  *<li>asset</li>  *<li>version</li>  *<li>artifactId</li>  *<li>artifactVersion</li>  *<li>type</li>  *<li>classifier</li>  *<li>artifactType</li>  *</ul>  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaDataItem
extends|extends
name|ArchivaContentItem
implements|implements
name|DataItem
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|ContentItem
name|parent
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|DataItemType
name|dataItemType
decl_stmt|;
specifier|private
name|ArchivaDataItem
parameter_list|( )
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|( )
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentItem
name|getParent
parameter_list|( )
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|( )
block|{
return|return
name|contentType
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataItemType
name|getDataType
parameter_list|( )
block|{
return|return
name|dataItemType
return|;
block|}
comment|/**      * Returns the builder for creating a new artifact instance. You have to fill the      * required attributes before the build() method is available.      *      * @param asset the storage asset representing the artifact      * @return a builder for creating new artifact instance      */
specifier|public
specifier|static
name|DataItemWithIdBuilder
name|withAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|( )
operator|.
name|withAsset
argument_list|(
name|asset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|ArchivaDataItem
name|that
init|=
operator|(
name|ArchivaDataItem
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|that
operator|.
name|id
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parent
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|dataItemType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dataItemType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|id
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|parent
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|dataItemType
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ArchivaArtifact{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", parent="
argument_list|)
operator|.
name|append
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", contentType='"
argument_list|)
operator|.
name|append
argument_list|(
name|contentType
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", artifactType="
argument_list|)
operator|.
name|append
argument_list|(
name|dataItemType
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
specifier|public
specifier|static
name|String
name|defaultString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|value
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Builder
extends|extends
name|ContentItemBuilder
argument_list|<
name|ArchivaDataItem
argument_list|,
name|DataItemOptBuilder
argument_list|,
name|DataItemWithIdBuilder
argument_list|>
implements|implements
name|DataItemOptBuilder
implements|,
name|DataItemWithIdBuilder
block|{
name|Builder
parameter_list|( )
block|{
name|super
argument_list|(
operator|new
name|ArchivaDataItem
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|DataItemOptBuilder
name|getOptBuilder
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DataItemWithIdBuilder
name|getNextBuilder
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataItemOptBuilder
name|withParent
parameter_list|(
name|ContentItem
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"version may not be null"
argument_list|)
throw|;
block|}
name|item
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|super
operator|.
name|setRepository
argument_list|(
name|parent
operator|.
name|getRepository
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataItemOptBuilder
name|withId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Artifact id may not be null or empty"
argument_list|)
throw|;
block|}
name|item
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataItemOptBuilder
name|withContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|item
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataItemOptBuilder
name|withDataType
parameter_list|(
name|DataItemType
name|type
parameter_list|)
block|{
name|item
operator|.
name|dataItemType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaDataItem
name|build
parameter_list|( )
block|{
name|super
operator|.
name|build
argument_list|( )
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|contentType
operator|==
literal|null
condition|)
block|{
name|item
operator|.
name|contentType
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|dataItemType
operator|==
literal|null
condition|)
block|{
name|item
operator|.
name|dataItemType
operator|=
name|BaseDataItemTypes
operator|.
name|UNKNOWN
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
block|}
block|}
end_class

end_unit

