begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|group
operator|.
name|RepositoryGroupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|CombinedValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|RepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Base abstract class for repository handlers.  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRepositoryHandler
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|,
name|C
parameter_list|>
implements|implements
name|RepositoryHandler
argument_list|<
name|R
argument_list|,
name|C
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractRepositoryHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|R
argument_list|>
argument_list|>
name|initValidators
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|repositoryGroupValidatorList
parameter_list|)
block|{
if|if
condition|(
name|repositoryGroupValidatorList
operator|!=
literal|null
operator|&&
name|repositoryGroupValidatorList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|repositoryGroupValidatorList
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|.
name|isFlavour
argument_list|(
name|clazz
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|narrowTo
argument_list|(
name|clazz
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|( )
return|;
block|}
block|}
specifier|protected
name|CombinedValidator
argument_list|<
name|R
argument_list|>
name|getCombinedValidatdor
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|repositoryGroupValidatorList
parameter_list|)
block|{
return|return
operator|new
name|CombinedValidator
argument_list|<>
argument_list|(
name|clazz
argument_list|,
name|initValidators
argument_list|(
name|clazz
argument_list|,
name|repositoryGroupValidatorList
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setLastState
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RepositoryState
name|state
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|instanceof
name|EditableRepository
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|getOrderNumber
argument_list|()
operator|>
name|repo
operator|.
name|getLastState
argument_list|()
operator|.
name|getOrderNumber
argument_list|()
condition|)
block|{
operator|(
operator|(
name|EditableRepository
operator|)
name|repo
operator|)
operator|.
name|setLastState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Found a not editable repository instance: {}, {}"
argument_list|,
name|repo
operator|.
name|getId
argument_list|( )
argument_list|,
name|repo
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

