begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|managed
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|ConfigurationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|AbstractRepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|RepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|scheduler
operator|.
name|CronExpressionValidator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ErrorKeys
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Validator for managed repository data.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryValidator#common#managed"
argument_list|)
specifier|public
class|class
name|BasicManagedRepositoryValidator
extends|extends
name|AbstractRepositoryValidator
argument_list|<
name|ManagedRepository
argument_list|>
implements|implements
name|RepositoryValidator
argument_list|<
name|ManagedRepository
argument_list|>
block|{
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CATEGORY
init|=
literal|"managed_repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|REPOSITORY_ID_VALID_EXPRESSION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|REPOSITORY_ID_VALID_EXPRESSION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|REPOSITORY_NAME_VALID_EXPRESSION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|REPOSITORY_NAME_VALID_EXPRESSION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|REPOSITORY_LOCATION_VALID_EXPRESSION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|REPOSITORY_LOCATION_VALID_EXPRESSION
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationHandler
name|configurationHandler
decl_stmt|;
specifier|public
name|BasicManagedRepositoryValidator
parameter_list|(
name|ConfigurationHandler
name|configurationHandler
parameter_list|)
block|{
name|super
argument_list|(
name|CATEGORY
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurationHandler
operator|=
name|configurationHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ValidationResponse
argument_list|<
name|ManagedRepository
argument_list|>
name|apply
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|boolean
name|update
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|errors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|managedRepository
operator|==
literal|null
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"object"
argument_list|,
name|ISNULL
argument_list|)
expr_stmt|;
return|return
operator|new
name|ValidationResponse
argument_list|<>
argument_list|(
name|managedRepository
argument_list|,
name|errors
argument_list|)
return|;
block|}
specifier|final
name|String
name|repoId
init|=
name|managedRepository
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"id"
argument_list|,
name|ISEMPTY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|update
condition|)
block|{
if|if
condition|(
name|repositoryRegistry
operator|.
name|hasManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|( )
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"id"
argument_list|,
name|MANAGED_REPOSITORY_EXISTS
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repositoryRegistry
operator|.
name|hasRemoteRepository
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"id"
argument_list|,
name|REMOTE_REPOSITORY_EXISTS
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repositoryRegistry
operator|.
name|hasRepositoryGroup
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"id"
argument_list|,
name|REPOSITORY_GROUP_EXISTS
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|REPOSITORY_ID_VALID_EXPRESSION_PATTERN
operator|.
name|matcher
argument_list|(
name|repoId
argument_list|)
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"id"
argument_list|,
name|INVALID_CHARS
argument_list|,
name|repoId
argument_list|,
name|REPOSITORY_ID_ALLOWED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|managedRepository
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"name"
argument_list|,
name|ISEMPTY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|REPOSITORY_NAME_VALID_EXPRESSION_PATTERN
operator|.
name|matcher
argument_list|(
name|managedRepository
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"name"
argument_list|,
name|INVALID_CHARS
argument_list|,
name|managedRepository
operator|.
name|getName
argument_list|( )
argument_list|,
name|REPOSITORY_NAME_ALLOWED
argument_list|)
expr_stmt|;
block|}
name|String
name|cronExpression
init|=
name|managedRepository
operator|.
name|getSchedulingDefinition
argument_list|( )
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|cronExpression
argument_list|)
condition|)
block|{
name|CronExpressionValidator
name|validator
init|=
operator|new
name|CronExpressionValidator
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|validator
operator|.
name|validate
argument_list|(
name|cronExpression
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"scheduling_definition"
argument_list|,
name|INVALID_SCHEDULING_EXPRESSION
argument_list|,
name|cronExpression
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cron expression may be empty
name|String
name|repoLocation
init|=
name|interpolateVars
argument_list|(
name|managedRepository
operator|.
name|getLocation
argument_list|( )
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|REPOSITORY_LOCATION_VALID_EXPRESSION_PATTERN
operator|.
name|matcher
argument_list|(
name|repoLocation
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"location"
argument_list|,
name|INVALID_LOCATION
argument_list|,
name|repoLocation
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"alphanumeric"
block|,
literal|"="
block|,
literal|"?"
block|,
literal|"!"
block|,
literal|"&"
block|,
literal|"/"
block|,
literal|"\\"
block|,
literal|"_"
block|,
literal|"."
block|,
literal|":"
block|,
literal|"~"
block|,
literal|"-"
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ValidationResponse
argument_list|<>
argument_list|(
name|managedRepository
argument_list|,
name|errors
argument_list|)
return|;
block|}
specifier|public
name|String
name|interpolateVars
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|Registry
name|registry
init|=
name|configurationHandler
operator|.
name|getArchivaConfiguration
argument_list|( )
operator|.
name|getRegistry
argument_list|( )
decl_stmt|;
name|String
name|value
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|directory
argument_list|,
literal|"${appserver.base}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|,
literal|"${appserver.base}"
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|value
argument_list|,
literal|"${appserver.home}"
argument_list|,
name|registry
operator|.
name|getString
argument_list|(
literal|"appserver.home"
argument_list|,
literal|"${appserver.home}"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRepositoryRegistry
parameter_list|(
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|)
block|{
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|ManagedRepository
argument_list|>
name|getFlavour
parameter_list|( )
block|{
return|return
name|ManagedRepository
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

