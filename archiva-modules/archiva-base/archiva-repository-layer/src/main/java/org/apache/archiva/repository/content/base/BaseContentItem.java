begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ItemConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseContentItem
implements|implements
name|ContentItem
block|{
specifier|protected
name|ManagedRepositoryContent
name|repository
decl_stmt|;
specifier|protected
name|StorageAsset
name|asset
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ContentItem
argument_list|>
name|characteristics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|ContentItem
parameter_list|>
name|T
name|adapt
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|ItemConversionException
block|{
if|if
condition|(
name|characteristics
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|characteristics
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
extends|extends
name|ContentItem
argument_list|>
name|cEntry
range|:
name|characteristics
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|cEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|cEntry
operator|.
name|getValue
argument_list|( )
return|;
block|}
block|}
try|try
block|{
return|return
name|repository
operator|.
name|applyCharacteristic
argument_list|(
name|clazz
argument_list|,
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ItemConversionException
argument_list|(
literal|"Could not convert item to "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|ContentItem
parameter_list|>
name|boolean
name|hasCharacteristic
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|characteristics
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
operator|||
name|characteristics
operator|.
name|keySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|anyMatch
argument_list|(
name|cClass
lambda|->
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|cClass
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
empty_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * Does lazy initialization of the attributes map.      * Returns a unmodifiable map.      *      * @return unmodifiable map of attributes      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttributes
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
return|;
block|}
block|}
comment|/**      * Adds a attribute value. The key must not be<code>null</code>.      *      * @param key   the attribute key      * @param value the attribute value      * @throws IllegalArgumentException if the key is<code>null</code> or empty      */
specifier|public
name|void
name|putAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key value must not be empty or null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepositoryContent
name|getRepository
parameter_list|( )
block|{
return|return
name|repository
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|getAsset
parameter_list|( )
block|{
return|return
name|asset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|( )
block|{
return|return
name|asset
operator|.
name|exists
argument_list|( )
return|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|ContentItem
parameter_list|>
name|void
name|setCharacteristic
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|item
parameter_list|)
block|{
name|this
operator|.
name|characteristics
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

