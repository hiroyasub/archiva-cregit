begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|managed
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|AbstractRepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|ArchivaRepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|ConfigurationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|StagingRepositoryFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|CheckedResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|RepositoryChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|RepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Handler implementation for managed repositories.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ManagedRepositoryHandler
extends|extends
name|AbstractRepositoryHandler
argument_list|<
name|ManagedRepository
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
implements|implements
name|RepositoryHandler
argument_list|<
name|ManagedRepository
argument_list|,
name|ManagedRepositoryConfiguration
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManagedRepositoryHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationHandler
name|configurationHandler
decl_stmt|;
specifier|private
specifier|final
name|ArchivaRepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|private
specifier|final
name|RepositoryValidator
argument_list|<
name|ManagedRepository
argument_list|>
name|validator
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|managedRepositories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|uManagedRepositories
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|managedRepositories
argument_list|)
decl_stmt|;
specifier|public
name|ManagedRepositoryHandler
parameter_list|(
name|ArchivaRepositoryRegistry
name|repositoryRegistry
parameter_list|,
name|ConfigurationHandler
name|configurationHandler
parameter_list|,
name|List
argument_list|<
name|RepositoryValidator
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
argument_list|>
name|repositoryValidatorList
parameter_list|)
block|{
name|this
operator|.
name|configurationHandler
operator|=
name|configurationHandler
expr_stmt|;
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
name|this
operator|.
name|validator
operator|=
name|getCombinedValidatdor
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|,
name|repositoryValidatorList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeFromConfig
parameter_list|( )
block|{
name|this
operator|.
name|managedRepositories
operator|.
name|clear
argument_list|( )
expr_stmt|;
name|this
operator|.
name|managedRepositories
operator|.
name|putAll
argument_list|(
name|newInstancesFromConfig
argument_list|( )
argument_list|)
expr_stmt|;
for|for
control|(
name|ManagedRepository
name|managedRepository
range|:
name|this
operator|.
name|managedRepositories
operator|.
name|values
argument_list|( )
control|)
block|{
name|activateRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|activateRepository
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|newInstancesFromConfig
parameter_list|( )
block|{
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|configRepoIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|( )
decl_stmt|;
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoConfigs
init|=
name|configurationHandler
operator|.
name|getBaseConfiguration
argument_list|( )
operator|.
name|getManagedRepositories
argument_list|( )
decl_stmt|;
if|if
condition|(
name|managedRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|managedRepositories
return|;
block|}
for|for
control|(
name|ManagedRepositoryConfiguration
name|repoConfig
range|:
name|managedRepoConfigs
control|)
block|{
name|ManagedRepository
name|repo
init|=
name|put
argument_list|(
name|repoConfig
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|configRepoIds
operator|.
name|add
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|StagingRepositoryFeature
name|stagF
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|( )
decl_stmt|;
if|if
condition|(
name|stagF
operator|.
name|getStagingRepository
argument_list|( )
operator|!=
literal|null
condition|)
block|{
name|configRepoIds
operator|.
name|add
argument_list|(
name|stagF
operator|.
name|getStagingRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
name|managedRepositories
operator|.
name|keySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|id
lambda|->
operator|!
name|configRepoIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|toRemove
control|)
block|{
name|ManagedRepository
name|removed
init|=
name|managedRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|removed
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize repositories from config: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|managedRepositories
return|;
block|}
return|return
name|managedRepositories
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|newInstance
parameter_list|(
name|RepositoryType
name|type
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|newInstance
parameter_list|(
name|ManagedRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|put
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|put
parameter_list|(
name|ManagedRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|put
parameter_list|(
name|ManagedRepositoryConfiguration
name|repositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|D
parameter_list|>
name|CheckedResult
argument_list|<
name|ManagedRepository
argument_list|,
name|D
argument_list|>
name|putWithCheck
parameter_list|(
name|ManagedRepositoryConfiguration
name|repositoryConfiguration
parameter_list|,
name|RepositoryChecker
argument_list|<
name|ManagedRepository
argument_list|,
name|D
argument_list|>
name|checker
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|get
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|clone
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateReferences
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|,
name|ManagedRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|getAll
parameter_list|( )
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryValidator
argument_list|<
name|ManagedRepository
argument_list|>
name|getValidator
parameter_list|( )
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValidationResponse
argument_list|<
name|ManagedRepository
argument_list|>
name|validateRepository
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValidationResponse
argument_list|<
name|ManagedRepository
argument_list|>
name|validateRepositoryForUpdate
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRepository
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|( )
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|( )
block|{
block|}
block|}
end_class

end_unit

