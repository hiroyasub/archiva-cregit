begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  *  * Base implementation of artifact. A builder is used to create instances.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaArtifact
extends|extends
name|ArchivaContentItem
implements|implements
name|Artifact
block|{
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|String
name|artifactVersion
decl_stmt|;
specifier|private
name|Version
name|version
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|String
name|classifier
decl_stmt|;
specifier|private
name|String
name|remainder
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|StorageAsset
name|asset
decl_stmt|;
specifier|private
name|ArchivaArtifact
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespace
parameter_list|( )
block|{
return|return
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|( )
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getArtifactVersion
parameter_list|( )
block|{
return|return
name|artifactVersion
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
name|getVersion
parameter_list|( )
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|( )
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassifier
parameter_list|( )
block|{
return|return
name|classifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemainder
parameter_list|( )
block|{
return|return
name|remainder
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|( )
block|{
return|return
name|contentType
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|getAsset
parameter_list|( )
block|{
return|return
name|asset
return|;
block|}
specifier|public
specifier|static
name|ArtifactVersionBuilder
name|withId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|( )
operator|.
name|withId
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
interface|interface
name|ArtifactVersionBuilder
block|{
name|VersionBuilder
name|withArtifactVersion
parameter_list|(
name|String
name|version
parameter_list|)
function_decl|;
block|}
specifier|public
interface|interface
name|VersionBuilder
block|{
name|AssetBuilder
name|withVersion
parameter_list|(
name|Version
name|version
parameter_list|)
function_decl|;
block|}
specifier|public
interface|interface
name|AssetBuilder
block|{
name|Builder
name|withAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Builder
implements|implements
name|ArtifactVersionBuilder
implements|,
name|VersionBuilder
implements|,
name|AssetBuilder
block|{
name|ArchivaArtifact
name|artifact
init|=
operator|new
name|ArchivaArtifact
argument_list|( )
decl_stmt|;
specifier|public
name|ArtifactVersionBuilder
name|withId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|artifact
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|VersionBuilder
name|withArtifactVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"version may not be null or empty"
argument_list|)
throw|;
block|}
name|artifact
operator|.
name|artifactVersion
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssetBuilder
name|withVersion
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"version may not be null"
argument_list|)
throw|;
block|}
name|artifact
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
if|if
condition|(
name|asset
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Asset may not be null"
argument_list|)
throw|;
block|}
name|artifact
operator|.
name|asset
operator|=
name|asset
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|artifact
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|artifact
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withClassifier
parameter_list|(
name|String
name|classifier
parameter_list|)
block|{
name|artifact
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withRemainder
parameter_list|(
name|String
name|remainder
parameter_list|)
block|{
name|artifact
operator|.
name|remainder
operator|=
name|remainder
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|artifact
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ArchivaArtifact
name|build
parameter_list|()
block|{
if|if
condition|(
name|artifact
operator|.
name|namespace
operator|==
literal|null
condition|)
block|{
name|artifact
operator|.
name|namespace
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|classifier
operator|==
literal|null
condition|)
block|{
name|artifact
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|type
operator|==
literal|null
condition|)
block|{
name|artifact
operator|.
name|type
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|contentType
operator|==
literal|null
condition|)
block|{
name|artifact
operator|.
name|contentType
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|artifact
return|;
block|}
block|}
block|}
end_class

end_unit

