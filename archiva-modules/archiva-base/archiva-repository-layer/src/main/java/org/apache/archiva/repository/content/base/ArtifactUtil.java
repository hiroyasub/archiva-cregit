begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  * Utility class that gives information about the physical location of artifacts.  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"ArtifactUtil#default"
argument_list|)
specifier|public
class|class
name|ArtifactUtil
block|{
annotation|@
name|Inject
name|RepositoryContentFactory
name|repositoryContentFactory
decl_stmt|;
comment|/**      * Returns the physical location of a given artifact in the repository. There is no check for the      * existence of the returned file.      *      * @param repository        The repository, where the artifact is stored.      * @param artifactReference The artifact reference.      * @return The absolute path to the artifact.      * @throws RepositoryException      */
specifier|public
name|Path
name|getArtifactPath
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|,
name|ArtifactReference
name|artifactReference
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|ManagedRepositoryContent
name|content
init|=
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repository
argument_list|)
decl_stmt|;
specifier|final
name|String
name|artifactPath
init|=
name|content
operator|.
name|toPath
argument_list|(
name|artifactReference
argument_list|)
decl_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|( )
argument_list|)
operator|.
name|resolve
argument_list|(
name|artifactPath
argument_list|)
return|;
block|}
comment|/**      * Returns the physical location of a given artifact in the repository. There is no check for the      * existence of the returned file.      *      * @param repository        The repository, where the artifact is stored.      * @param artifactReference The artifact reference.      * @return The asset representation of the artifact.      * @throws RepositoryException      */
specifier|public
name|StorageAsset
name|getArtifactAsset
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|,
name|ArtifactReference
name|artifactReference
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|ManagedRepositoryContent
name|content
init|=
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repository
argument_list|)
decl_stmt|;
specifier|final
name|String
name|artifactPath
init|=
name|content
operator|.
name|toPath
argument_list|(
name|artifactReference
argument_list|)
decl_stmt|;
return|return
name|repository
operator|.
name|getAsset
argument_list|(
name|artifactPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

