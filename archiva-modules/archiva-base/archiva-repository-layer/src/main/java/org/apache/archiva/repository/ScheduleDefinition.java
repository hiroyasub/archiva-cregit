begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A definition of schedule times.  */
end_comment

begin_class
specifier|public
class|class
name|ScheduleDefinition
block|{
specifier|final
name|SortedSet
argument_list|<
name|DayOfWeek
argument_list|>
name|daysOfWeek
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|MonthDay
argument_list|>
name|daysOfMonth
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|LocalTime
argument_list|>
name|scheduleTimes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|LocalTime
name|startTime
decl_stmt|;
specifier|final
name|Duration
name|timeInterval
decl_stmt|;
name|boolean
name|fixedTimes
init|=
literal|false
decl_stmt|;
specifier|public
name|ScheduleDefinition
parameter_list|(
name|Collection
argument_list|<
name|DayOfWeek
argument_list|>
name|daysOfWeek
parameter_list|,
name|Collection
argument_list|<
name|MonthDay
argument_list|>
name|daysOfMonth
parameter_list|,
name|Collection
argument_list|<
name|LocalTime
argument_list|>
name|scheduleTimes
parameter_list|,
name|LocalTime
name|startTime
parameter_list|,
name|Duration
name|timeInterval
parameter_list|)
block|{
if|if
condition|(
name|daysOfWeek
operator|!=
literal|null
condition|)
name|this
operator|.
name|daysOfWeek
operator|.
name|addAll
argument_list|(
name|daysOfWeek
argument_list|)
expr_stmt|;
if|if
condition|(
name|daysOfMonth
operator|!=
literal|null
condition|)
name|this
operator|.
name|daysOfMonth
operator|.
name|addAll
argument_list|(
name|daysOfMonth
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduleTimes
operator|!=
literal|null
condition|)
name|this
operator|.
name|scheduleTimes
operator|.
name|addAll
argument_list|(
name|scheduleTimes
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|timeInterval
operator|=
name|timeInterval
expr_stmt|;
block|}
comment|/**      * Returns the days of the week on which the action should be run.      * @return The set of week days.      */
specifier|public
name|SortedSet
argument_list|<
name|DayOfWeek
argument_list|>
name|getDaysOfWeek
parameter_list|()
block|{
return|return
name|daysOfWeek
return|;
block|}
comment|/**      * Returns the days in the month on which the action should be run.      * @return The set of days.      */
specifier|public
name|SortedSet
argument_list|<
name|MonthDay
argument_list|>
name|getDaysOfMonth
parameter_list|()
block|{
return|return
name|daysOfMonth
return|;
block|}
comment|/**      * Returns the time on each day on which the action should be run.      * @return a set of times on which the action should be run.      */
specifier|public
name|SortedSet
argument_list|<
name|LocalTime
argument_list|>
name|getScheduleTimes
parameter_list|()
block|{
return|return
name|scheduleTimes
return|;
block|}
comment|/**      * Returns the start time each day on which the action should be run.      * @return the start time.      */
specifier|public
name|LocalTime
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**      * The interval after that the next run should be scheduled.      * @return The interval between runs.      */
specifier|public
name|Duration
name|getTimeInterval
parameter_list|()
block|{
return|return
name|timeInterval
return|;
block|}
comment|/**      * Returns true, if the task should be run on fixed times. Otherwise      * the tasks are scheduled repeatedly with the time interval.      * @return true, if the schedule times are fixed.      */
specifier|public
name|boolean
name|isFixedTimes
parameter_list|()
block|{
return|return
name|fixedTimes
return|;
block|}
empty_stmt|;
block|}
end_class

end_unit

