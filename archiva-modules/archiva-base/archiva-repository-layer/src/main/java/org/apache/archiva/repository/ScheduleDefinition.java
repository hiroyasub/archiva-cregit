begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|Cron
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|definition
operator|.
name|CronDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|definition
operator|.
name|CronDefinitionBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|CronFieldName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|Always
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|And
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|Between
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|Every
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|FieldExpression
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|On
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|QuestionMark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|visitor
operator|.
name|FieldExpressionVisitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|value
operator|.
name|IntegerFieldValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|parser
operator|.
name|CronParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|CronType
operator|.
name|QUARTZ
import|;
end_import

begin_comment
comment|/**  * A definition of schedule times.  */
end_comment

begin_class
specifier|public
class|class
name|ScheduleDefinition
block|{
specifier|final
name|SortedSet
argument_list|<
name|DayOfWeek
argument_list|>
name|daysOfWeek
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|MonthDay
argument_list|>
name|daysOfMonth
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|Month
argument_list|>
name|months
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(  )
decl_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|LocalTime
argument_list|>
name|scheduleTimes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|LocalTime
name|startTime
decl_stmt|;
specifier|final
name|Duration
name|timeInterval
decl_stmt|;
name|boolean
name|fixedTimes
init|=
literal|false
decl_stmt|;
specifier|public
name|ScheduleDefinition
parameter_list|(
name|Collection
argument_list|<
name|DayOfWeek
argument_list|>
name|daysOfWeek
parameter_list|,
name|Collection
argument_list|<
name|MonthDay
argument_list|>
name|daysOfMonth
parameter_list|,
name|Collection
argument_list|<
name|Month
argument_list|>
name|months
parameter_list|,
name|Collection
argument_list|<
name|LocalTime
argument_list|>
name|scheduleTimes
parameter_list|,
name|LocalTime
name|startTime
parameter_list|,
name|Duration
name|timeInterval
parameter_list|)
block|{
if|if
condition|(
name|daysOfWeek
operator|!=
literal|null
condition|)
name|this
operator|.
name|daysOfWeek
operator|.
name|addAll
argument_list|(
name|daysOfWeek
argument_list|)
expr_stmt|;
if|if
condition|(
name|daysOfMonth
operator|!=
literal|null
condition|)
name|this
operator|.
name|daysOfMonth
operator|.
name|addAll
argument_list|(
name|daysOfMonth
argument_list|)
expr_stmt|;
if|if
condition|(
name|months
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|months
operator|.
name|addAll
argument_list|(
name|months
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scheduleTimes
operator|!=
literal|null
operator|&&
name|scheduleTimes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|fixedTimes
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|scheduleTimes
operator|.
name|addAll
argument_list|(
name|scheduleTimes
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|timeInterval
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fixedTimes
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|timeInterval
operator|=
name|timeInterval
expr_stmt|;
block|}
block|}
comment|/**      * Returns the days of the week on which the action should be run.      * @return The set of week days.      */
specifier|public
name|SortedSet
argument_list|<
name|DayOfWeek
argument_list|>
name|getDaysOfWeek
parameter_list|()
block|{
return|return
name|daysOfWeek
return|;
block|}
comment|/**      * Returns the days in the month on which the action should be run.      * @return The set of days.      */
specifier|public
name|SortedSet
argument_list|<
name|MonthDay
argument_list|>
name|getDaysOfMonth
parameter_list|()
block|{
return|return
name|daysOfMonth
return|;
block|}
comment|/**      * Returns the months on which the action should be run.      * @return      */
specifier|public
name|SortedSet
argument_list|<
name|Month
argument_list|>
name|getMonths
parameter_list|()
block|{
return|return
name|months
return|;
block|}
comment|/**      * Returns the time on each day on which the action should be run.      * @return a set of times on which the action should be run.      */
specifier|public
name|SortedSet
argument_list|<
name|LocalTime
argument_list|>
name|getScheduleTimes
parameter_list|()
block|{
return|return
name|scheduleTimes
return|;
block|}
comment|/**      * Returns the start time each day on which the action should be run.      * @return the start time.      */
specifier|public
name|LocalTime
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**      * The interval after that the next run should be scheduled.      * @return The interval between runs.      */
specifier|public
name|Duration
name|getTimeInterval
parameter_list|()
block|{
return|return
name|timeInterval
return|;
block|}
comment|/**      * Returns true, if the task should be run on fixed times. Otherwise      * the tasks are scheduled repeatedly with the time interval.      * @return true, if the schedule times are fixed.      */
specifier|public
name|boolean
name|isFixedTimes
parameter_list|()
block|{
return|return
name|fixedTimes
return|;
block|}
empty_stmt|;
specifier|public
specifier|static
name|ScheduleDefinition
name|fromCronExpression
parameter_list|(
name|String
name|cron
parameter_list|)
block|{
name|CronDefinition
name|cronDefinition
init|=
name|CronDefinitionBuilder
operator|.
name|instanceDefinitionFor
argument_list|(
name|QUARTZ
argument_list|)
decl_stmt|;
name|CronParser
name|parser
init|=
operator|new
name|CronParser
argument_list|(
name|cronDefinition
argument_list|)
decl_stmt|;
name|Cron
name|pCron
init|=
name|parser
operator|.
name|parse
argument_list|(
name|cron
argument_list|)
decl_stmt|;
if|if
condition|(
name|pCron
operator|.
name|validate
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cron expression not valid "
operator|+
name|cron
argument_list|)
throw|;
block|}
empty_stmt|;
name|CronVisitor
name|secondsVisit
init|=
operator|new
name|CronVisitor
argument_list|( )
decl_stmt|;
name|pCron
operator|.
name|retrieve
argument_list|(
name|CronFieldName
operator|.
name|SECOND
argument_list|)
operator|.
name|getExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|secondsVisit
argument_list|)
expr_stmt|;
name|CronVisitor
name|minutesVisit
init|=
operator|new
name|CronVisitor
argument_list|( )
decl_stmt|;
name|pCron
operator|.
name|retrieve
argument_list|(
name|CronFieldName
operator|.
name|MINUTE
argument_list|)
operator|.
name|getExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|minutesVisit
argument_list|)
expr_stmt|;
name|CronVisitor
name|hoursVisit
init|=
operator|new
name|CronVisitor
argument_list|(
literal|24
argument_list|)
decl_stmt|;
name|pCron
operator|.
name|retrieve
argument_list|(
name|CronFieldName
operator|.
name|HOUR
argument_list|)
operator|.
name|getExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|hoursVisit
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|LocalTime
argument_list|>
name|times
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(  )
decl_stmt|;
for|for
control|(
name|Integer
name|hour
range|:
name|hoursVisit
operator|.
name|getTimes
argument_list|()
control|)
block|{
for|for
control|(
name|Integer
name|minute
range|:
name|minutesVisit
operator|.
name|getTimes
argument_list|()
control|)
block|{
for|for
control|(
name|Integer
name|second
range|:
name|secondsVisit
operator|.
name|getTimes
argument_list|()
control|)
block|{
name|times
operator|.
name|add
argument_list|(
name|LocalTime
operator|.
name|of
argument_list|(
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
class|class
name|CronVisitor
implements|implements
name|FieldExpressionVisitor
block|{
specifier|private
name|int
name|range
init|=
literal|60
decl_stmt|;
specifier|private
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|times
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(  )
decl_stmt|;
name|CronVisitor
parameter_list|()
block|{
block|}
name|CronVisitor
parameter_list|(
name|int
name|range
parameter_list|)
block|{
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
block|}
specifier|private
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|getTimes
parameter_list|()
block|{
return|return
name|times
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|FieldExpression
name|expression
parameter_list|)
block|{
try|try
block|{
name|Integer
name|in
init|=
operator|new
name|Integer
argument_list|(
name|expression
operator|.
name|asString
argument_list|()
argument_list|)
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|//
block|}
return|return
name|expression
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|Always
name|always
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|range
condition|;
name|i
operator|++
control|)
block|{
name|times
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|always
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|And
name|and
parameter_list|)
block|{
name|FieldExpression
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FieldExpression
name|expr
range|:
name|and
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|result
operator|=
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|Between
name|between
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
operator|(
operator|(
name|IntegerFieldValue
operator|)
name|between
operator|.
name|getFrom
argument_list|( )
operator|.
name|getValue
argument_list|( )
operator|)
operator|.
name|getValue
argument_list|()
init|;
name|i
operator|<
operator|(
operator|(
name|IntegerFieldValue
operator|)
name|between
operator|.
name|getTo
argument_list|()
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|&&
name|i
operator|<
name|range
condition|;
name|i
operator|++
control|)
block|{
name|times
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|between
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|Every
name|every
parameter_list|)
block|{
name|String
name|exp
init|=
name|every
operator|.
name|getExpression
argument_list|()
operator|.
name|asString
argument_list|()
decl_stmt|;
name|int
name|start
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
name|int
name|period
init|=
name|every
operator|.
name|getPeriod
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|range
condition|;
name|i
operator|=
name|i
operator|+
name|period
control|)
block|{
name|times
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|every
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|On
name|on
parameter_list|)
block|{
comment|// Ignore
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldExpression
name|visit
parameter_list|(
name|QuestionMark
name|questionMark
parameter_list|)
block|{
comment|// Ignore
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

