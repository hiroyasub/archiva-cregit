begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|VersionOptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithAssetBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithNamespaceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithVersionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_comment
comment|/**  * Immutable version instance.  *<p>  * You have to use the builder method to create instances of this version object.  *<p>  * The project and the version string are required attributes of this instance additional to the base  * attributes repository and asset.  *<p>  * Two instances are equal, if the project and the version match in addition to the base attributes repository and asset.  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaVersion
extends|extends
name|BaseContentItem
implements|implements
name|Version
block|{
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|Project
name|project
decl_stmt|;
specifier|private
name|String
name|separatorExpression
init|=
literal|"\\."
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|versionSegments
decl_stmt|;
specifier|private
name|ArchivaVersion
parameter_list|( )
block|{
block|}
comment|/**      * Creates a new builder for creating new version instances. You have to provide the required      * attributes before the build() method can be called.      *      * @param storageAsset the storage asset      * @return the builder for creating new version instances      */
specifier|public
specifier|static
name|WithProjectBuilder
name|withAsset
parameter_list|(
name|StorageAsset
name|storageAsset
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|( )
operator|.
name|withAsset
argument_list|(
name|storageAsset
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|WithAssetBuilder
argument_list|<
name|WithProjectBuilder
argument_list|>
name|withRepository
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
return|return
operator|new
name|ArchivaVersion
operator|.
name|Builder
argument_list|( )
operator|.
name|withRepository
argument_list|(
name|repository
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getVersionSegments
parameter_list|( )
block|{
return|return
name|versionSegments
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|( )
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|Project
name|getProject
parameter_list|( )
block|{
return|return
name|project
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|ArchivaVersion
name|that
init|=
operator|(
name|ArchivaVersion
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|equals
argument_list|(
name|that
operator|.
name|repository
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|version
operator|.
name|equals
argument_list|(
name|that
operator|.
name|version
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|project
operator|.
name|equals
argument_list|(
name|that
operator|.
name|project
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|version
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|project
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
return|return
literal|"ArchivaVersion{ "
operator|+
name|version
operator|+
literal|", project="
operator|+
name|project
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|ContentItemBuilder
argument_list|<
name|ArchivaVersion
argument_list|,
name|VersionOptBuilder
argument_list|,
name|WithProjectBuilder
argument_list|>
implements|implements
name|WithProjectBuilder
implements|,
name|WithVersionBuilder
implements|,
name|VersionOptBuilder
block|{
name|Builder
parameter_list|( )
block|{
name|super
argument_list|(
operator|new
name|ArchivaVersion
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|WithProjectBuilder
name|getNextBuilder
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|VersionOptBuilder
name|getOptBuilder
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|VersionOptBuilder
name|withVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Version parameter must not be empty or null."
argument_list|)
throw|;
block|}
name|item
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|updateVersionSegments
argument_list|( )
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|updateVersionSegments
parameter_list|( )
block|{
name|item
operator|.
name|versionSegments
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|item
operator|.
name|version
operator|.
name|split
argument_list|(
name|item
operator|.
name|separatorExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WithVersionBuilder
name|withProject
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project may not be null"
argument_list|)
throw|;
block|}
name|item
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|super
operator|.
name|setRepository
argument_list|(
name|project
operator|.
name|getRepository
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaVersion
name|build
parameter_list|( )
block|{
name|super
operator|.
name|build
argument_list|( )
expr_stmt|;
return|return
name|item
return|;
block|}
annotation|@
name|Override
specifier|public
name|VersionOptBuilder
name|withSeparatorExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|expression
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Separator expression may not be null or empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|item
operator|.
name|separatorExpression
operator|=
name|expression
expr_stmt|;
try|try
block|{
name|updateVersionSegments
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad separator expression "
operator|+
name|expression
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

