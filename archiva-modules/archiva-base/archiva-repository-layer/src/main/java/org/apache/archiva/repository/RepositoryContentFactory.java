begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * RepositoryContentRequest  *  *  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryContentFactory#default"
argument_list|)
specifier|public
class|class
name|RepositoryContentFactory
implements|implements
name|RegistryListener
block|{
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryContent
argument_list|>
name|managedContentMap
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryContent
argument_list|>
name|remoteContentMap
decl_stmt|;
specifier|public
name|RepositoryContentFactory
parameter_list|()
block|{
name|managedContentMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ManagedRepositoryContent
argument_list|>
argument_list|()
expr_stmt|;
name|remoteContentMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RemoteRepositoryContent
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the ManagedRepositoryContent object for the repository Id specified.      *      * @param repoId the repository id to fetch.      * @return the ManagedRepositoryContent object associated with the repository id.      * @throws RepositoryNotFoundException if the repository id does not exist within the configuration.      * @throws RepositoryException         the repository content object cannot be loaded due to configuration issue.      */
specifier|public
name|ManagedRepositoryContent
name|getManagedRepositoryContent
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|RepositoryException
block|{
try|try
block|{
name|ManagedRepositoryContent
name|repo
init|=
name|managedContentMap
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
return|return
name|repo
return|;
block|}
name|ManagedRepository
name|repoConfig
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryNotFoundException
argument_list|(
literal|"Unable to find managed repository configuration for id:"
operator|+
name|repoId
argument_list|)
throw|;
block|}
name|repo
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"managedRepositoryContent#"
operator|+
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|ManagedRepositoryContent
operator|.
name|class
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setRepository
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
name|managedContentMap
operator|.
name|put
argument_list|(
name|repoId
argument_list|,
name|repo
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RemoteRepositoryContent
name|getRemoteRepositoryContent
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|RepositoryException
block|{
try|try
block|{
name|RemoteRepositoryContent
name|repo
init|=
name|remoteContentMap
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
return|return
name|repo
return|;
block|}
name|RemoteRepository
name|repoConfig
init|=
name|remoteRepositoryAdmin
operator|.
name|getRemoteRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryNotFoundException
argument_list|(
literal|"Unable to find remote repository configuration for id:"
operator|+
name|repoId
argument_list|)
throw|;
block|}
name|repo
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"remoteRepositoryContent#"
operator|+
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|RemoteRepositoryContent
operator|.
name|class
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setRepository
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
name|remoteContentMap
operator|.
name|put
argument_list|(
name|repoId
argument_list|,
name|repo
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ConfigurationNames
operator|.
name|isManagedRepositories
argument_list|(
name|propertyName
argument_list|)
operator|||
name|ConfigurationNames
operator|.
name|isRemoteRepositories
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|initMaps
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* do nothing */
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|archivaConfiguration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initMaps
parameter_list|()
block|{
comment|// olamy we use concurent so no need of synchronize
comment|//synchronized ( managedContentMap )
comment|//{
name|managedContentMap
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//}
comment|//synchronized ( remoteContentMap )
comment|//{
name|remoteContentMap
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//}
block|}
specifier|public
name|ArchivaConfiguration
name|getArchivaConfiguration
parameter_list|()
block|{
return|return
name|archivaConfiguration
return|;
block|}
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
block|}
block|}
end_class

end_unit

