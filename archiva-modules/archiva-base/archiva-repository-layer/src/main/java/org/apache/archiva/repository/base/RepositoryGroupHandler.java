begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|merger
operator|.
name|MergedRemoteIndexesScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|event
operator|.
name|RepositoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
operator|.
name|DEFAULT_INDEX_PATH
import|;
end_import

begin_comment
comment|/**  * This class manages repository groups for the RepositoryRegistry.  * It is tightly coupled with the {@link ArchivaRepositoryRegistry}.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryGroupHandler#default"
argument_list|)
specifier|public
class|class
name|RepositoryGroupHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryGroupHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ArchivaRepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationHandler
name|configurationHandler
decl_stmt|;
specifier|private
specifier|final
name|MergedRemoteIndexesScheduler
name|mergedRemoteIndexesScheduler
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroup
argument_list|>
name|repositoryGroups
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Creates a new instance. All dependencies are injected on the constructor.      * @param repositoryRegistry the registry. To avoid circular dependencies via DI, this class registers itself on the registry.      * @param configurationHandler the configuration handler is used to retrieve and save configuration.      * @param mergedRemoteIndexesScheduler the index scheduler is used for merging the indexes from all group members      */
specifier|public
name|RepositoryGroupHandler
parameter_list|(
name|ArchivaRepositoryRegistry
name|repositoryRegistry
parameter_list|,
name|ConfigurationHandler
name|configurationHandler
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"mergedRemoteIndexesScheduler#default"
argument_list|)
name|MergedRemoteIndexesScheduler
name|mergedRemoteIndexesScheduler
parameter_list|)
block|{
name|this
operator|.
name|configurationHandler
operator|=
name|configurationHandler
expr_stmt|;
name|this
operator|.
name|mergedRemoteIndexesScheduler
operator|=
name|mergedRemoteIndexesScheduler
expr_stmt|;
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|private
name|void
name|init
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing repository group handler "
operator|+
name|repositoryRegistry
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
comment|// We are registering this class on the registry. This is necessary to avoid circular dependencies via injection.
name|this
operator|.
name|repositoryRegistry
operator|.
name|registerGroupHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initializeFromConfig
parameter_list|()
block|{
name|this
operator|.
name|repositoryGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|repositoryGroups
operator|.
name|putAll
argument_list|(
name|getRepositorGroupsFromConfig
argument_list|( )
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroup
argument_list|>
name|getRepositorGroupsFromConfig
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|RepositoryGroupConfiguration
argument_list|>
name|repositoryGroupConfigurations
init|=
name|this
operator|.
name|configurationHandler
operator|.
name|getBaseConfiguration
argument_list|()
operator|.
name|getRepositoryGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryGroupConfigurations
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryGroup
argument_list|>
name|repositoryGroupMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|repositoryGroupConfigurations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|providerMap
init|=
name|repositoryRegistry
operator|.
name|getRepositoryProviderMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RepositoryGroupConfiguration
name|repoConfig
range|:
name|repositoryGroupConfigurations
control|)
block|{
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repoConfig
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerMap
operator|.
name|containsKey
argument_list|(
name|repositoryType
argument_list|)
condition|)
block|{
try|try
block|{
name|RepositoryGroup
name|repo
init|=
name|createNewRepositoryGroup
argument_list|(
name|providerMap
operator|.
name|get
argument_list|(
name|repositoryType
argument_list|)
argument_list|,
name|repoConfig
argument_list|)
decl_stmt|;
name|repositoryGroupMap
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create repository group {}: {}"
argument_list|,
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|repositoryGroupMap
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize repositories from config: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
specifier|public
name|RepositoryGroup
name|createNewRepositoryGroup
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|RepositoryGroupConfiguration
name|config
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryGroup
name|repositoryGroup
init|=
name|provider
operator|.
name|createRepositoryGroup
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|repositoryGroup
operator|.
name|registerEventHandler
argument_list|(
name|RepositoryEvent
operator|.
name|ANY
argument_list|,
name|repositoryRegistry
argument_list|)
expr_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|repositoryGroup
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|repositoryGroup
return|;
block|}
specifier|public
name|void
name|updateRepositoryReferences
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|RepositoryGroup
name|group
parameter_list|,
name|RepositoryGroupConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|group
operator|instanceof
name|EditableRepositoryGroup
condition|)
block|{
name|EditableRepositoryGroup
name|eGroup
init|=
operator|(
name|EditableRepositoryGroup
operator|)
name|group
decl_stmt|;
name|eGroup
operator|.
name|setRepositories
argument_list|(
name|configuration
operator|.
name|getRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository group to the current list, or replaces the repository group definition with      * the same id, if it exists already.      * The change is saved to the configuration immediately.      *      * @param repositoryGroup the new repository group.      * @throws RepositoryException if the new repository group could not be saved to the configuration.      */
specifier|public
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|()
decl_stmt|;
name|RepositoryGroup
name|originRepoGroup
init|=
name|repositoryGroups
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|repositoryGroup
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|originRepoGroup
operator|!=
literal|null
operator|&&
name|originRepoGroup
operator|!=
name|repositoryGroup
condition|)
block|{
name|originRepoGroup
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|RepositoryProvider
name|provider
init|=
name|repositoryRegistry
operator|.
name|getProvider
argument_list|(
name|repositoryGroup
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryGroupConfiguration
name|newCfg
init|=
name|provider
operator|.
name|getRepositoryGroupConfiguration
argument_list|(
name|repositoryGroup
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|this
operator|.
name|configurationHandler
operator|.
name|getBaseConfiguration
argument_list|()
decl_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|repositoryGroup
argument_list|,
name|newCfg
argument_list|)
expr_stmt|;
name|RepositoryGroupConfiguration
name|oldCfg
init|=
name|configuration
operator|.
name|findRepositoryGroupById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRepositoryGroup
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addRepositoryGroup
argument_list|(
name|newCfg
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|repositoryGroup
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Rollback
if|if
condition|(
name|originRepoGroup
operator|!=
literal|null
condition|)
block|{
name|repositoryGroups
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|originRepoGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repositoryGroups
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Exception during configuration update {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Adds a new repository group or updates the repository with the same id, if it exists already.      * The configuration is saved immediately.      *      * @param repositoryGroupConfiguration the repository configuration      * @return the updated or created repository      * @throws RepositoryException if an error occurs, or the configuration is not valid.      */
specifier|public
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|repositoryGroupConfiguration
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|this
operator|.
name|configurationHandler
operator|.
name|getBaseConfiguration
argument_list|()
decl_stmt|;
name|RepositoryGroup
name|repo
init|=
name|repositoryGroups
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|RepositoryGroupConfiguration
name|oldCfg
init|=
name|repo
operator|!=
literal|null
condition|?
name|repositoryRegistry
operator|.
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|getRepositoryGroupConfiguration
argument_list|(
name|repo
argument_list|)
else|:
literal|null
decl_stmt|;
name|repo
operator|=
name|putRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
decl||
name|RegistryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|repositoryRegistry
operator|.
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|updateRepositoryGroupInstance
argument_list|(
operator|(
name|EditableRepositoryGroup
operator|)
name|repo
argument_list|,
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Could not save the configuration for repository group {}: {}"
argument_list|,
name|id
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration for repository group "
operator|+
name|id
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|repo
return|;
block|}
specifier|public
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|repositoryGroupConfiguration
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryType
name|repoType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryGroup
name|repo
decl_stmt|;
name|setRepositoryGroupDefaults
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryGroups
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|repo
operator|=
name|repositoryGroups
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|instanceof
name|EditableRepositoryGroup
condition|)
block|{
name|repositoryRegistry
operator|.
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|updateRepositoryGroupInstance
argument_list|(
operator|(
name|EditableRepositoryGroup
operator|)
name|repo
argument_list|,
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The repository is not editable "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|repo
operator|=
name|repositoryRegistry
operator|.
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|createRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
name|repositoryGroups
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
name|updateRepositoryReferences
argument_list|(
name|repositoryRegistry
operator|.
name|getProvider
argument_list|(
name|repoType
argument_list|)
argument_list|,
name|repo
argument_list|,
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
name|replaceOrAddRepositoryConfig
argument_list|(
name|repositoryGroupConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
name|void
name|setRepositoryGroupDefaults
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getMergedIndexPath
argument_list|()
argument_list|)
condition|)
block|{
name|repositoryGroupConfiguration
operator|.
name|setMergedIndexPath
argument_list|(
name|DEFAULT_INDEX_PATH
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repositoryGroupConfiguration
operator|.
name|getMergedIndexTtl
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|repositoryGroupConfiguration
operator|.
name|setMergedIndexTtl
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getCronExpression
argument_list|()
argument_list|)
condition|)
block|{
name|repositoryGroupConfiguration
operator|.
name|setCronExpression
argument_list|(
literal|"0 0 03 ? * MON"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|replaceOrAddRepositoryConfig
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|RepositoryGroupConfiguration
name|oldCfg
init|=
name|configuration
operator|.
name|findRepositoryGroupById
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRepositoryGroup
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRepositoryFromGroups
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repositoryGroups
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|repoGroup
lambda|->
name|repoGroup
operator|instanceof
name|EditableRepository
argument_list|)
operator|.
name|map
argument_list|(
name|repoGroup
lambda|->
operator|(
name|EditableRepositoryGroup
operator|)
name|repoGroup
argument_list|)
operator|.
name|forEach
argument_list|(
name|repoGroup
lambda|->
name|repoGroup
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a repository group from the registry and configuration, if it exists.      * The change is saved to the configuration immediately.      *      * @param id the id of the repository group to remove      * @throws RepositoryException if a error occurs during configuration save      */
specifier|public
name|void
name|removeRepositoryGroup
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryGroup
name|repo
init|=
name|getRepositoryGroup
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|repo
operator|=
name|repositoryGroups
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|configuration
init|=
name|this
operator|.
name|configurationHandler
operator|.
name|getBaseConfiguration
argument_list|()
decl_stmt|;
name|RepositoryGroupConfiguration
name|cfg
init|=
name|configuration
operator|.
name|findRepositoryGroupById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRepositoryGroup
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|configurationHandler
operator|.
name|save
argument_list|(
name|configuration
argument_list|,
name|ConfigurationHandler
operator|.
name|REGISTRY_EVENT_TAG
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RegistryException
decl||
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
comment|// Rollback
name|log
operator|.
name|error
argument_list|(
literal|"Could not save config after repository removal: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|repositoryGroups
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save configuration after repository removal: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|removeRepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryGroup
name|repo
init|=
name|repositoryGroups
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|=
name|repositoryGroups
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|RepositoryGroupConfiguration
name|cfg
init|=
name|configuration
operator|.
name|findRepositoryGroupById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRepositoryGroup
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|RepositoryGroup
name|getRepositoryGroup
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
return|return
name|repositoryGroups
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|RepositoryGroup
argument_list|>
name|getRepositoryGroups
parameter_list|()
block|{
return|return
name|repositoryGroups
operator|.
name|values
argument_list|( )
return|;
block|}
specifier|public
name|boolean
name|hasRepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|repositoryGroups
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|PreDestroy
specifier|private
name|void
name|destroy
parameter_list|()
block|{
name|this
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|RepositoryGroup
name|group
range|:
name|repositoryGroups
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|group
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not close repository group {}: {}"
argument_list|,
name|group
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|repositoryGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

