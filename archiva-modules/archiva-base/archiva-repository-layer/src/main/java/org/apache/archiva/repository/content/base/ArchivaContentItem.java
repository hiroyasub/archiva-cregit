begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|ArchivaContentItemOptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithAssetBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of ContentItem interface.  *<p>  * The attribute map is created, when the first values are put to the map.  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaContentItem
extends|extends
name|BaseContentItem
implements|implements
name|ContentItem
block|{
comment|/**      * Creates the builder for creating new archiva project instances.      * You have to set all required attributes before you can call the build() method.      *      * @param storageAsset the asset      * @return a builder instance      */
specifier|public
specifier|static
name|ArchivaContentItemOptBuilder
name|withAsset
parameter_list|(
name|StorageAsset
name|storageAsset
parameter_list|)
block|{
return|return
operator|new
name|ArchivaContentItemBuilder
argument_list|()
operator|.
name|withAsset
argument_list|(
name|storageAsset
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|WithAssetBuilder
argument_list|<
name|ArchivaContentItemOptBuilder
argument_list|>
name|withRepository
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
return|return
operator|new
name|ArchivaContentItemBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repository
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|ArchivaContentItem
name|that
init|=
operator|(
name|ArchivaContentItem
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|equals
argument_list|(
name|that
operator|.
name|repository
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|asset
operator|.
name|equals
argument_list|(
name|that
operator|.
name|asset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|repository
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|asset
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/// Builder section
comment|/*      * Builder implementation for each content item.      * Should be extended by the subclasses.      */
specifier|public
specifier|static
specifier|final
class|class
name|ArchivaContentItemBuilder
extends|extends
name|ContentItemBuilder
argument_list|<
name|ArchivaContentItem
argument_list|,
name|ArchivaContentItemOptBuilder
argument_list|,
name|ArchivaContentItemOptBuilder
argument_list|>
implements|implements
name|ArchivaContentItemOptBuilder
block|{
specifier|private
name|ArchivaContentItemBuilder
parameter_list|(  )
block|{
name|super
argument_list|(
operator|new
name|ArchivaContentItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaContentItemOptBuilder
name|getOptBuilder
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaContentItemOptBuilder
name|getNextBuilder
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaContentItemOptBuilder
name|withNamespace
parameter_list|(
name|Namespace
name|namespace
parameter_list|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Namespace
operator|.
name|class
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaContentItemOptBuilder
name|withProject
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|project
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaContentItemOptBuilder
name|withVersion
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Version
operator|.
name|class
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaContentItem
name|build
parameter_list|( )
block|{
name|super
operator|.
name|build
argument_list|( )
expr_stmt|;
return|return
name|item
return|;
block|}
block|}
block|}
end_class

end_unit

