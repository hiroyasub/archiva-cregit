begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|OptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithAssetBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|WithRepositoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of ContentItem interface.  *<p>  * The attribute map is created, when the first values are put to the map.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ArchivaContentItem
implements|implements
name|ContentItem
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
specifier|private
name|ManagedRepositoryContent
name|repository
decl_stmt|;
specifier|private
name|StorageAsset
name|asset
decl_stmt|;
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Project
parameter_list|>
name|T
name|adapt
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Project
parameter_list|>
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|( )
argument_list|)
return|;
block|}
comment|/**      * Does lazy initialization of the attributes map.      * Returns a unmodifiable map.      *      * @return unmodifiable map of attributes      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttributes
parameter_list|( )
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
return|;
block|}
block|}
comment|/**      * Adds a attribute value. The key must not be<code>null</code>.      *      * @param key   the attribute key      * @param value the attribute value      * @throws IllegalArgumentException if the key is<code>null</code> or empty      */
specifier|public
name|void
name|putAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key value must not be empty or null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepositoryContent
name|getRepository
parameter_list|( )
block|{
return|return
name|repository
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageAsset
name|getAsset
parameter_list|( )
block|{
return|return
name|asset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|ArchivaContentItem
name|that
init|=
operator|(
name|ArchivaContentItem
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|equals
argument_list|(
name|that
operator|.
name|repository
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|asset
operator|.
name|equals
argument_list|(
name|that
operator|.
name|asset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|repository
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|asset
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/// Builder section
comment|/*      * Builder implementation for each content item.      * Should be extended by the subclasses.      */
comment|/**      * Builder for content item. Must be extended by subclasses.      * The builder uses chained interfaces for building the required attributes. That means you have to set      * some certain attributes, before you can build the content item instance via the {@link #build()} method.      *<p>      * Subclasses should extend from this class and provide the interface/class for the destination item,      * a interface for the optional attributes and a interface that is returned after the last required attribute is      * set.      *<p>      * The interface for optional attributes should inherit from {@link OptBuilder}      *      * @param<I> the item class that should be built      * @param<O> the class/interface for the optional attributes      * @param<N> the class/interface for the next (required) attribute after the base attributes are set      */
specifier|protected
specifier|abstract
specifier|static
class|class
name|ContentItemBuilder
parameter_list|<
name|I
extends|extends
name|ArchivaContentItem
parameter_list|,
name|O
extends|extends
name|OptBuilder
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
parameter_list|,
name|N
parameter_list|>
implements|implements
name|WithRepositoryBuilder
implements|,
name|WithAssetBuilder
argument_list|<
name|N
argument_list|>
implements|,
name|OptBuilder
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
block|{
specifier|protected
name|I
name|item
decl_stmt|;
specifier|protected
name|ContentItemBuilder
parameter_list|(
name|I
name|item
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|O
name|getOptBuilder
parameter_list|( )
function_decl|;
specifier|protected
specifier|abstract
name|N
name|getNextBuilder
parameter_list|( )
function_decl|;
specifier|public
name|WithAssetBuilder
argument_list|<
name|N
argument_list|>
name|withRepository
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Repository may not be null"
argument_list|)
throw|;
block|}
operator|(
operator|(
name|ArchivaContentItem
operator|)
name|item
operator|)
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|N
name|withAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
block|{
if|if
condition|(
name|asset
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Asset may not be null"
argument_list|)
throw|;
block|}
operator|(
operator|(
name|ArchivaContentItem
operator|)
name|item
operator|)
operator|.
name|asset
operator|=
name|asset
expr_stmt|;
return|return
name|getNextBuilder
argument_list|( )
return|;
block|}
specifier|public
name|O
name|withAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute key may not be null"
argument_list|)
throw|;
block|}
name|item
operator|.
name|putAttribute
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getOptBuilder
argument_list|( )
return|;
block|}
specifier|protected
name|void
name|setRepository
parameter_list|(
name|ManagedRepositoryContent
name|repository
parameter_list|)
block|{
operator|(
operator|(
name|ArchivaContentItem
operator|)
name|item
operator|)
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|I
name|build
parameter_list|( )
block|{
return|return
name|item
return|;
block|}
block|}
block|}
end_class

end_unit

