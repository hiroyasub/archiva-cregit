begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|group
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ReleaseScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryCapabilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|StandardCapabilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|managed
operator|.
name|BasicManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|fs
operator|.
name|FilesystemStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|BasicRepositoryGroup
extends|extends
name|AbstractRepository
implements|implements
name|EditableRepositoryGroup
block|{
specifier|private
specifier|static
specifier|final
name|RepositoryCapabilities
name|CAPABILITIES
init|=
operator|new
name|StandardCapabilities
argument_list|(
operator|new
name|ReleaseScheme
index|[]
block|{
name|ReleaseScheme
operator|.
name|RELEASE
block|,
name|ReleaseScheme
operator|.
name|SNAPSHOT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
name|IndexCreationFeature
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|int
name|mergedIndexTtl
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|hasIndex
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicRepositoryGroup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repositories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(  )
decl_stmt|;
specifier|public
name|BasicRepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|RepositoryStorage
name|repositoryStorage
parameter_list|)
block|{
name|super
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|,
name|id
argument_list|,
name|name
argument_list|,
name|repositoryStorage
argument_list|)
expr_stmt|;
name|IndexCreationFeature
name|feature
init|=
operator|new
name|IndexCreationFeature
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|feature
operator|.
name|setLocalIndexPath
argument_list|(
name|repositoryStorage
operator|.
name|getRoot
argument_list|( )
operator|.
name|resolve
argument_list|(
literal|".indexer"
argument_list|)
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setLocalPackedIndexPath
argument_list|(
name|repositoryStorage
operator|.
name|getRoot
argument_list|( )
operator|.
name|resolve
argument_list|(
literal|".index"
argument_list|)
argument_list|)
expr_stmt|;
name|addFeature
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getRepositories
parameter_list|( )
block|{
return|return
name|repositories
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
block|{
return|return
name|repositories
operator|.
name|contains
argument_list|(
name|repository
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|repositories
operator|.
name|stream
argument_list|( )
operator|.
name|anyMatch
argument_list|(
name|v
lambda|->
name|id
operator|.
name|equals
argument_list|(
name|v
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMergedIndexTTL
parameter_list|( )
block|{
return|return
name|mergedIndexTtl
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasIndex
parameter_list|( )
block|{
return|return
name|hasIndex
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryCapabilities
name|getCapabilities
parameter_list|( )
block|{
return|return
name|CAPABILITIES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRepositories
parameter_list|( )
block|{
name|this
operator|.
name|repositories
operator|.
name|clear
argument_list|( )
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|repositories
operator|.
name|addAll
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRepository
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|repositories
operator|.
name|contains
argument_list|(
name|repository
argument_list|)
condition|)
block|{
name|this
operator|.
name|repositories
operator|.
name|add
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRepository
parameter_list|(
name|int
name|index
parameter_list|,
name|ManagedRepository
name|repository
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|repositories
operator|.
name|contains
argument_list|(
name|repository
argument_list|)
condition|)
block|{
name|this
operator|.
name|repositories
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRepository
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
block|{
return|return
name|this
operator|.
name|repositories
operator|.
name|remove
argument_list|(
name|repository
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|removeRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
for|for
control|(
name|ManagedRepository
name|repo
range|:
name|this
operator|.
name|repositories
control|)
block|{
if|if
condition|(
name|repoId
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|repositories
operator|.
name|remove
argument_list|(
name|repo
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMergedIndexTTL
parameter_list|(
name|int
name|timeInSeconds
parameter_list|)
block|{
name|this
operator|.
name|mergedIndexTtl
operator|=
name|timeInSeconds
expr_stmt|;
block|}
comment|/**      * Creates a filesystem based repository instance. The path is built by basePath/repository-id      *      * @param id The repository id      * @param name The name of the repository      * @param repositoryPath The path to the repository      * @return The repository instance      * @throws IOException      */
specifier|public
specifier|static
name|BasicRepositoryGroup
name|newFilesystemInstance
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|repositoryPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileLockManager
name|lockManager
init|=
operator|new
name|DefaultFileLockManager
argument_list|()
decl_stmt|;
name|FilesystemStorage
name|storage
init|=
operator|new
name|FilesystemStorage
argument_list|(
name|repositoryPath
argument_list|,
name|lockManager
argument_list|)
decl_stmt|;
return|return
operator|new
name|BasicRepositoryGroup
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storage
argument_list|)
return|;
block|}
block|}
end_class

end_unit

