begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|validation
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|ConfigurationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|AbstractRepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|RepositoryValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
operator|.
name|ValidationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  *  * A validator for repository groups. All validation errors are prefixed with category 'repository_group'.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryValidator#common#group"
argument_list|)
specifier|public
class|class
name|CommonGroupValidator
extends|extends
name|AbstractRepositoryValidator
argument_list|<
name|RepositoryGroup
argument_list|>
implements|implements
name|RepositoryValidator
argument_list|<
name|RepositoryGroup
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|REPO_GROUP_ID_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[A-Za-z0-9\\._\\-]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationHandler
name|configurationHandler
decl_stmt|;
specifier|private
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|public
name|CommonGroupValidator
parameter_list|(
name|ConfigurationHandler
name|configurationHandler
parameter_list|)
block|{
name|this
operator|.
name|configurationHandler
operator|=
name|configurationHandler
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|appendError
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|errorMap
parameter_list|,
name|String
name|errorKey
parameter_list|,
name|Object
modifier|...
name|parameter
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|result
decl_stmt|;
name|result
operator|=
name|errorMap
operator|==
literal|null
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|( )
else|:
name|errorMap
expr_stmt|;
name|ValidationError
name|error
init|=
name|ValidationError
operator|.
name|ofKey
argument_list|(
name|errorKey
argument_list|,
name|parameter
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errList
init|=
name|result
operator|.
name|computeIfAbsent
argument_list|(
name|error
operator|.
name|getAttribute
argument_list|( )
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|( )
argument_list|)
decl_stmt|;
name|errList
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|ValidationResponse
name|apply
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|,
name|boolean
name|updateMode
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|String
name|repoGroupId
init|=
name|repositoryGroup
operator|.
name|getId
argument_list|( )
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|errors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.id.empty"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repoGroupId
operator|.
name|length
argument_list|( )
operator|>
literal|100
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.id.max_length"
argument_list|,
name|repoGroupId
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|matcher
init|=
name|REPO_GROUP_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|repoGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.id.invalid_chars"
argument_list|,
literal|"alphanumeric, '.', '-','_'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repositoryGroup
operator|.
name|getMergedIndexTTL
argument_list|( )
operator|<=
literal|0
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.merged_index_ttl.min"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repositoryRegistry
operator|!=
literal|null
operator|&&
operator|!
name|updateMode
condition|)
block|{
if|if
condition|(
name|repositoryRegistry
operator|.
name|hasRepositoryGroup
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.id.group_exists"
argument_list|,
name|repoGroupId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repositoryRegistry
operator|.
name|hasManagedRepository
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.id.managed_exists"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repositoryRegistry
operator|.
name|hasRemoteRepository
argument_list|(
name|repoGroupId
argument_list|)
condition|)
block|{
name|errors
operator|=
name|appendError
argument_list|(
name|errors
argument_list|,
literal|"repository_group.id.remote_exists"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ValidationResponse
argument_list|(
name|repositoryGroup
argument_list|,
name|errors
argument_list|)
return|;
block|}
specifier|public
name|ConfigurationHandler
name|getConfigurationHandler
parameter_list|( )
block|{
return|return
name|configurationHandler
return|;
block|}
specifier|public
name|RepositoryRegistry
name|getRepositoryRegistry
parameter_list|( )
block|{
return|return
name|repositoryRegistry
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRepositoryRegistry
parameter_list|(
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|)
block|{
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|RepositoryGroup
argument_list|>
name|getFlavour
parameter_list|( )
block|{
return|return
name|RepositoryGroup
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFlavour
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|RepositoryGroup
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

