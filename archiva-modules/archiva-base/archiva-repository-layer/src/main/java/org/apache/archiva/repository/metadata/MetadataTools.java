begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksummedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|FileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven2
operator|.
name|metadata
operator|.
name|MavenMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|SnapshotVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|math
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * MetadataTools  *  *  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"metadataTools#default"
argument_list|)
specifier|public
class|class
name|MetadataTools
implements|implements
name|RegistryListener
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAVEN_METADATA
init|=
literal|"maven-metadata.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAVEN_ARCHETYPE_CATALOG
init|=
literal|"archetype-catalog.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|PATH_SEPARATOR
init|=
literal|'/'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|GROUP_SEPARATOR
init|=
literal|'.'
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaConfiguration#default"
argument_list|)
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"fileTypes"
argument_list|)
specifier|private
name|FileTypes
name|filetypes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|algorithms
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ChecksumAlgorithm
operator|.
name|SHA256
argument_list|,
name|ChecksumAlgorithm
operator|.
name|SHA1
argument_list|,
name|ChecksumAlgorithm
operator|.
name|MD5
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|artifactPatterns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|proxies
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|NUMS
index|[]
init|=
operator|new
name|char
index|[]
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|}
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|lastUpdatedFormat
decl_stmt|;
specifier|public
name|MetadataTools
parameter_list|()
block|{
name|lastUpdatedFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
expr_stmt|;
name|lastUpdatedFormat
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ConfigurationNames
operator|.
name|isProxyConnector
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|initConfigVariables
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* nothing to do */
block|}
comment|/**      * Gather the set of snapshot versions found in a particular versioned reference.      *      * @return the Set of snapshot artifact versions found.      * @throws LayoutException      * @throws ContentNotFoundException      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|gatherSnapshotVersions
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|VersionedReference
name|reference
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|IOException
throws|,
name|ContentNotFoundException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|foundVersions
init|=
name|managedRepository
operator|.
name|getVersions
argument_list|(
name|reference
argument_list|)
decl_stmt|;
comment|// Next gather up the referenced 'latest' versions found in any proxied repositories
comment|// maven-metadata-${proxyId}.xml files that may be present.
comment|// Does this repository have a set of remote proxied repositories?
name|Set
argument_list|<
name|String
argument_list|>
name|proxiedRepoIds
init|=
name|this
operator|.
name|proxies
operator|.
name|get
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxiedRepoIds
argument_list|)
condition|)
block|{
name|String
name|baseVersion
init|=
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|baseVersion
operator|=
name|baseVersion
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|baseVersion
operator|.
name|indexOf
argument_list|(
name|VersionUtil
operator|.
name|SNAPSHOT
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Add in the proxied repo version ids too.
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|proxiedRepoIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|proxyId
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|proxyMetadata
init|=
name|readProxyMetadata
argument_list|(
name|managedRepository
argument_list|,
name|reference
argument_list|,
name|proxyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyMetadata
operator|==
literal|null
condition|)
block|{
comment|// There is no proxy metadata, skip it.
continue|continue;
block|}
comment|// Is there some snapshot info?
name|SnapshotVersion
name|snapshot
init|=
name|proxyMetadata
operator|.
name|getSnapshotVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|String
name|timestamp
init|=
name|snapshot
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|int
name|buildNumber
init|=
name|snapshot
operator|.
name|getBuildNumber
argument_list|()
decl_stmt|;
comment|// Only interested in the timestamp + buildnumber.
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|timestamp
argument_list|)
operator|&&
operator|(
name|buildNumber
operator|>
literal|0
operator|)
condition|)
block|{
name|foundVersions
operator|.
name|add
argument_list|(
name|baseVersion
operator|+
literal|"-"
operator|+
name|timestamp
operator|+
literal|"-"
operator|+
name|buildNumber
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|foundVersions
return|;
block|}
comment|/**      * Take a path to a maven-metadata.xml, and attempt to translate it to a VersionedReference.      *      * @param path      * @return      */
specifier|public
name|VersionedReference
name|toVersionedReference
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|MAVEN_METADATA
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
literal|"Cannot convert to versioned reference, not a metadata file. "
argument_list|)
throw|;
block|}
name|VersionedReference
name|reference
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|String
name|normalizedPath
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|path
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|pathParts
index|[]
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|normalizedPath
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|versionOffset
init|=
name|pathParts
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|int
name|artifactIdOffset
init|=
name|versionOffset
operator|-
literal|1
decl_stmt|;
name|int
name|groupIdEnd
init|=
name|artifactIdOffset
operator|-
literal|1
decl_stmt|;
name|reference
operator|.
name|setVersion
argument_list|(
name|pathParts
index|[
name|versionOffset
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasNumberAnywhere
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// Scary check, but without it, all paths are version references;
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
literal|"Not a versioned reference, as version id on path has no number in it."
argument_list|)
throw|;
block|}
name|reference
operator|.
name|setArtifactId
argument_list|(
name|pathParts
index|[
name|artifactIdOffset
index|]
argument_list|)
expr_stmt|;
name|StringBuilder
name|gid
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|groupIdEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|gid
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|gid
operator|.
name|append
argument_list|(
name|pathParts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|reference
operator|.
name|setGroupId
argument_list|(
name|gid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
specifier|private
name|boolean
name|hasNumberAnywhere
parameter_list|(
name|String
name|version
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|indexOfAny
argument_list|(
name|version
argument_list|,
name|NUMS
argument_list|)
operator|!=
operator|(
operator|-
literal|1
operator|)
return|;
block|}
specifier|public
name|ProjectReference
name|toProjectReference
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|MAVEN_METADATA
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
literal|"Cannot convert to versioned reference, not a metadata file. "
argument_list|)
throw|;
block|}
name|ProjectReference
name|reference
init|=
operator|new
name|ProjectReference
argument_list|()
decl_stmt|;
name|String
name|normalizedPath
init|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|path
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|pathParts
index|[]
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|normalizedPath
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
comment|// Assume last part of the path is the version.
name|int
name|artifactIdOffset
init|=
name|pathParts
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|int
name|groupIdEnd
init|=
name|artifactIdOffset
operator|-
literal|1
decl_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
name|pathParts
index|[
name|artifactIdOffset
index|]
argument_list|)
expr_stmt|;
name|StringBuilder
name|gid
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|groupIdEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|gid
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|gid
operator|.
name|append
argument_list|(
name|pathParts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|reference
operator|.
name|setGroupId
argument_list|(
name|gid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
specifier|public
name|String
name|toPath
parameter_list|(
name|ProjectReference
name|reference
parameter_list|)
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
name|formatAsDirectory
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|MAVEN_METADATA
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toPath
parameter_list|(
name|VersionedReference
name|reference
parameter_list|)
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
name|formatAsDirectory
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// add the version only if it is present
name|path
operator|.
name|append
argument_list|(
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|append
argument_list|(
name|MAVEN_METADATA
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|formatAsDirectory
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
return|return
name|directory
operator|.
name|replace
argument_list|(
name|GROUP_SEPARATOR
argument_list|,
name|PATH_SEPARATOR
argument_list|)
return|;
block|}
comment|/**      * Adjusts a path for a metadata.xml file to its repository specific path.      *      * @param repository the repository to base new path off of.      * @param path       the path to the metadata.xml file to adjust the name of.      * @return the newly adjusted path reference to the repository specific metadata path.      */
specifier|public
name|String
name|getRepositorySpecificName
parameter_list|(
name|RemoteRepositoryContent
name|repository
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|getRepositorySpecificName
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**      * Adjusts a path for a metadata.xml file to its repository specific path.      *      * @param proxyId the repository id to base new path off of.      * @param path    the path to the metadata.xml file to adjust the name of.      * @return the newly adjusted path reference to the repository specific metadata path.      */
specifier|public
name|String
name|getRepositorySpecificName
parameter_list|(
name|String
name|proxyId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: need to filter out 'bad' characters from the proxy id.
name|ret
operator|.
name|append
argument_list|(
literal|"maven-metadata-"
argument_list|)
operator|.
name|append
argument_list|(
name|proxyId
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
assert|assert
operator|(
name|configuration
operator|!=
literal|null
operator|)
assert|;
name|this
operator|.
name|artifactPatterns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|initConfigVariables
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArchivaRepositoryMetadata
name|readProxyMetadata
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|ProjectReference
name|reference
parameter_list|,
name|String
name|proxyId
parameter_list|)
block|{
name|String
name|metadataPath
init|=
name|getRepositorySpecificName
argument_list|(
name|proxyId
argument_list|,
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|StorageAsset
name|metadataFile
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|metadataPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadataFile
operator|.
name|exists
argument_list|()
operator|||
name|metadataFile
operator|.
name|isContainer
argument_list|()
condition|)
block|{
comment|// Nothing to do. return null.
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: [monitor] consider a monitor for this event.
comment|// TODO: consider a read-redo on monitor return code?
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read metadata: {}"
argument_list|,
name|metadataFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ArchivaRepositoryMetadata
name|readProxyMetadata
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|String
name|logicalResource
parameter_list|,
name|String
name|proxyId
parameter_list|)
block|{
name|String
name|metadataPath
init|=
name|getRepositorySpecificName
argument_list|(
name|proxyId
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
name|StorageAsset
name|metadataFile
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|metadataPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadataFile
operator|.
name|exists
argument_list|()
operator|||
name|metadataFile
operator|.
name|isContainer
argument_list|()
condition|)
block|{
comment|// Nothing to do. return null.
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: [monitor] consider a monitor for this event.
comment|// TODO: consider a read-redo on monitor return code?
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read metadata: {}"
argument_list|,
name|metadataFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ArchivaRepositoryMetadata
name|readProxyMetadata
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|VersionedReference
name|reference
parameter_list|,
name|String
name|proxyId
parameter_list|)
block|{
name|String
name|metadataPath
init|=
name|getRepositorySpecificName
argument_list|(
name|proxyId
argument_list|,
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|StorageAsset
name|metadataFile
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|metadataPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadataFile
operator|.
name|exists
argument_list|()
operator|||
name|metadataFile
operator|.
name|isContainer
argument_list|()
condition|)
block|{
comment|// Nothing to do. return null.
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: [monitor] consider a monitor for this event.
comment|// TODO: consider a read-redo on monitor return code?
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read metadata: {}"
argument_list|,
name|metadataFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|updateMetadata
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|String
name|logicalResource
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
specifier|final
name|StorageAsset
name|metadataFile
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|logicalResource
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|metadata
init|=
literal|null
decl_stmt|;
comment|//Gather and merge all metadata available
name|List
argument_list|<
name|ArchivaRepositoryMetadata
argument_list|>
name|metadatas
init|=
name|getMetadatasForManagedRepository
argument_list|(
name|managedRepository
argument_list|,
name|logicalResource
argument_list|)
decl_stmt|;
for|for
control|(
name|ArchivaRepositoryMetadata
name|proxiedMetadata
range|:
name|metadatas
control|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
name|proxiedMetadata
expr_stmt|;
continue|continue;
block|}
name|metadata
operator|=
name|RepositoryMetadataMerge
operator|.
name|merge
argument_list|(
name|metadata
argument_list|,
name|proxiedMetadata
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No metadata to update for {}"
argument_list|,
name|logicalResource
argument_list|)
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|availableVersions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|metadataAvailableVersions
init|=
name|metadata
operator|.
name|getAvailableVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadataAvailableVersions
operator|!=
literal|null
condition|)
block|{
name|availableVersions
operator|.
name|addAll
argument_list|(
name|metadataAvailableVersions
argument_list|)
expr_stmt|;
block|}
name|availableVersions
operator|=
name|findPossibleVersions
argument_list|(
name|availableVersions
argument_list|,
name|metadataFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|availableVersions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|updateMetadataVersions
argument_list|(
name|availableVersions
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|metadata
argument_list|,
name|metadataFile
argument_list|)
expr_stmt|;
name|ChecksummedFile
name|checksum
init|=
operator|new
name|ChecksummedFile
argument_list|(
name|metadataFile
operator|.
name|getFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|fixChecksums
argument_list|(
name|algorithms
argument_list|)
expr_stmt|;
block|}
comment|/**      * Skims the parent directory of a metadata in vain hope of finding      * subdirectories that contain poms.      *      * @param metadataParentDirectory      * @return origional set plus newly found versions      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|findPossibleVersions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|versions
parameter_list|,
name|StorageAsset
name|metadataParentDirectory
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|versions
argument_list|)
decl_stmt|;
name|metadataParentDirectory
operator|.
name|list
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|asset
lambda|->
name|asset
operator|.
name|isContainer
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|asset
lambda|->
block|{
lambda|return asset.list(
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|f
lambda|->
operator|!
name|f
operator|.
name|isContainer
argument_list|()
operator|&&
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|result
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_class

begin_return
return|return
name|result
return|;
end_return

begin_function
unit|}      private
name|List
argument_list|<
name|ArchivaRepositoryMetadata
argument_list|>
name|getMetadatasForManagedRepository
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|String
name|logicalResource
parameter_list|)
block|{
name|List
argument_list|<
name|ArchivaRepositoryMetadata
argument_list|>
name|metadatas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StorageAsset
name|file
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|logicalResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|ArchivaRepositoryMetadata
name|existingMetadata
init|=
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMetadata
operator|!=
literal|null
condition|)
block|{
name|metadatas
operator|.
name|add
argument_list|(
name|existingMetadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Could not read metadata at {}. Metadata will be removed."
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|file
operator|.
name|getStorage
argument_list|()
operator|.
name|removeAsset
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not remove asset {}"
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|proxyIds
init|=
name|proxies
operator|.
name|get
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|proxyId
range|:
name|proxyIds
control|)
block|{
name|ArchivaRepositoryMetadata
name|proxyMetadata
init|=
name|readProxyMetadata
argument_list|(
name|managedRepository
argument_list|,
name|logicalResource
argument_list|,
name|proxyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyMetadata
operator|!=
literal|null
condition|)
block|{
name|metadatas
operator|.
name|add
argument_list|(
name|proxyMetadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|metadatas
return|;
block|}
end_function

begin_comment
comment|/**      * Update the metadata to represent the all versions/plugins of      * the provided groupId:artifactId project or group reference,      * based off of information present in the repository,      * the maven-metadata.xml files, and the proxy/repository specific      * metadata file contents.      *<p>      * We must treat this as a group or a project metadata file as there is no way to know in advance      *      * @param managedRepository the managed repository where the metadata is kept.      * @param reference         the reference to update.      * @throws LayoutException      * @throws RepositoryMetadataException      * @throws IOException      * @throws ContentNotFoundException      * @deprecated      */
end_comment

begin_function
specifier|public
name|void
name|updateMetadata
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|ProjectReference
name|reference
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|RepositoryMetadataException
throws|,
name|IOException
throws|,
name|ContentNotFoundException
block|{
name|StorageAsset
name|metadataFile
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastUpdated
init|=
name|getExistingLastUpdated
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|metadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setGroupId
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setArtifactId
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Gather up all versions found in the managed repository.
name|Set
argument_list|<
name|String
argument_list|>
name|allVersions
init|=
name|managedRepository
operator|.
name|getVersions
argument_list|(
name|reference
argument_list|)
decl_stmt|;
comment|// Gather up all plugins found in the managed repository.
comment|// TODO: do we know this information instead?
comment|//        Set<Plugin> allPlugins = managedRepository.getPlugins( reference );
name|Set
argument_list|<
name|Plugin
argument_list|>
name|allPlugins
decl_stmt|;
if|if
condition|(
name|metadataFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|allPlugins
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Plugin
argument_list|>
argument_list|(
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
operator|.
name|getPlugins
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|allPlugins
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Plugin
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Does this repository have a set of remote proxied repositories?
name|Set
argument_list|<
name|String
argument_list|>
name|proxiedRepoIds
init|=
name|this
operator|.
name|proxies
operator|.
name|get
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxiedRepoIds
argument_list|)
condition|)
block|{
comment|// Add in the proxied repo version ids too.
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|proxiedRepoIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|proxyId
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArchivaRepositoryMetadata
name|proxyMetadata
init|=
name|readProxyMetadata
argument_list|(
name|managedRepository
argument_list|,
name|reference
argument_list|,
name|proxyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyMetadata
operator|!=
literal|null
condition|)
block|{
name|allVersions
operator|.
name|addAll
argument_list|(
name|proxyMetadata
operator|.
name|getAvailableVersions
argument_list|()
argument_list|)
expr_stmt|;
name|allPlugins
operator|.
name|addAll
argument_list|(
name|proxyMetadata
operator|.
name|getPlugins
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|proxyLastUpdated
init|=
name|getLastUpdated
argument_list|(
name|proxyMetadata
argument_list|)
decl_stmt|;
name|lastUpdated
operator|=
name|Math
operator|.
name|max
argument_list|(
name|lastUpdated
argument_list|,
name|proxyLastUpdated
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|allVersions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateMetadataVersions
argument_list|(
name|allVersions
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add the plugins to the metadata model.
name|metadata
operator|.
name|setPlugins
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allPlugins
argument_list|)
argument_list|)
expr_stmt|;
comment|// artifact ID was actually the last part of the group
name|metadata
operator|.
name|setGroupId
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
operator|+
literal|"."
operator|+
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setArtifactId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastUpdated
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|setLastUpdatedTimestamp
argument_list|(
name|toLastUpdatedDate
argument_list|(
name|lastUpdated
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Save the metadata model to disk.
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|metadata
argument_list|,
name|metadataFile
argument_list|)
expr_stmt|;
name|ChecksummedFile
name|checksum
init|=
operator|new
name|ChecksummedFile
argument_list|(
name|metadataFile
operator|.
name|getFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|fixChecksums
argument_list|(
name|algorithms
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|updateMetadataVersions
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|allVersions
parameter_list|,
name|ArchivaRepositoryMetadata
name|metadata
parameter_list|)
block|{
comment|// Sort the versions
name|List
argument_list|<
name|String
argument_list|>
name|sortedVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allVersions
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Split the versions into released and snapshots.
name|List
argument_list|<
name|String
argument_list|>
name|releasedVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|snapshotVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|version
range|:
name|sortedVersions
control|)
block|{
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|snapshotVersions
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|releasedVersions
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|releasedVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|snapshotVersions
argument_list|,
name|VersionComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|latestVersion
init|=
name|sortedVersions
operator|.
name|get
argument_list|(
name|sortedVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|releaseVersion
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|releasedVersions
argument_list|)
condition|)
block|{
name|releaseVersion
operator|=
name|releasedVersions
operator|.
name|get
argument_list|(
name|releasedVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Add the versions to the metadata model.
name|metadata
operator|.
name|setAvailableVersions
argument_list|(
name|sortedVersions
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLatestVersion
argument_list|(
name|latestVersion
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setReleasedVersion
argument_list|(
name|releaseVersion
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|Date
name|toLastUpdatedDate
parameter_list|(
name|long
name|lastUpdated
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|lastUpdated
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|long
name|toLastUpdatedLong
parameter_list|(
name|String
name|timestampString
parameter_list|)
block|{
try|try
block|{
name|Date
name|date
init|=
name|lastUpdatedFormat
operator|.
name|parse
argument_list|(
name|timestampString
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|long
name|getLastUpdated
parameter_list|(
name|ArchivaRepositoryMetadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
comment|// Doesn't exist.
return|return
literal|0
return|;
block|}
try|try
block|{
name|String
name|lastUpdated
init|=
name|metadata
operator|.
name|getLastUpdated
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|lastUpdated
argument_list|)
condition|)
block|{
comment|// Not set.
return|return
literal|0
return|;
block|}
name|Date
name|lastUpdatedDate
init|=
name|lastUpdatedFormat
operator|.
name|parse
argument_list|(
name|lastUpdated
argument_list|)
decl_stmt|;
return|return
name|lastUpdatedDate
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// Bad format on the last updated string.
return|return
literal|0
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|long
name|getExistingLastUpdated
parameter_list|(
name|StorageAsset
name|metadataFile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|metadataFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Doesn't exist.
return|return
literal|0
return|;
block|}
try|try
block|{
name|ArchivaRepositoryMetadata
name|metadata
init|=
name|MavenMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
return|return
name|getLastUpdated
argument_list|(
name|metadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// Error.
return|return
literal|0
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Update the metadata based on the following rules.      *<p>      * 1) If this is a SNAPSHOT reference, then utilize the proxy/repository specific      * metadata files to represent the current / latest SNAPSHOT available.      * 2) If this is a RELEASE reference, and the metadata file does not exist, then      * create the metadata file with contents required of the VersionedReference      *      * @param managedRepository the managed repository where the metadata is kept.      * @param reference         the versioned reference to update      * @throws LayoutException      * @throws RepositoryMetadataException      * @throws IOException      * @throws ContentNotFoundException      * @deprecated      */
end_comment

begin_function
specifier|public
name|void
name|updateMetadata
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|VersionedReference
name|reference
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|RepositoryMetadataException
throws|,
name|IOException
throws|,
name|ContentNotFoundException
block|{
name|StorageAsset
name|metadataFile
init|=
name|managedRepository
operator|.
name|getRepository
argument_list|()
operator|.
name|getAsset
argument_list|(
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastUpdated
init|=
name|getExistingLastUpdated
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|ArchivaRepositoryMetadata
name|metadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setGroupId
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setArtifactId
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// Do SNAPSHOT handling.
name|metadata
operator|.
name|setVersion
argument_list|(
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Gather up all of the versions found in the reference dir, and any
comment|// proxied maven-metadata.xml files.
name|Set
argument_list|<
name|String
argument_list|>
name|snapshotVersions
init|=
name|gatherSnapshotVersions
argument_list|(
name|managedRepository
argument_list|,
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotVersions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ContentNotFoundException
argument_list|(
literal|"No snapshot versions found on reference ["
operator|+
name|VersionedReference
operator|.
name|toKey
argument_list|(
name|reference
argument_list|)
operator|+
literal|"]."
argument_list|)
throw|;
block|}
comment|// sort the list to determine to aide in determining the Latest version.
name|List
argument_list|<
name|String
argument_list|>
name|sortedVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sortedVersions
operator|.
name|addAll
argument_list|(
name|snapshotVersions
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedVersions
argument_list|,
operator|new
name|VersionComparator
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|latestVersion
init|=
name|sortedVersions
operator|.
name|get
argument_list|(
name|sortedVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isUniqueSnapshot
argument_list|(
name|latestVersion
argument_list|)
condition|)
block|{
comment|// The latestVersion will contain the full version string "1.0-alpha-5-20070821.213044-8"
comment|// This needs to be broken down into ${base}-${timestamp}-${build_number}
name|Matcher
name|m
init|=
name|VersionUtil
operator|.
name|UNIQUE_SNAPSHOT_PATTERN
operator|.
name|matcher
argument_list|(
name|latestVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|setSnapshotVersion
argument_list|(
operator|new
name|SnapshotVersion
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|buildNumber
init|=
name|NumberUtils
operator|.
name|toInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|setBuildNumber
argument_list|(
name|buildNumber
argument_list|)
expr_stmt|;
name|Matcher
name|mtimestamp
init|=
name|VersionUtil
operator|.
name|TIMESTAMP_PATTERN
operator|.
name|matcher
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtimestamp
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|tsDate
init|=
name|mtimestamp
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|tsTime
init|=
name|mtimestamp
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|snapshotLastUpdated
init|=
name|toLastUpdatedLong
argument_list|(
name|tsDate
operator|+
name|tsTime
argument_list|)
decl_stmt|;
name|lastUpdated
operator|=
name|Math
operator|.
name|max
argument_list|(
name|lastUpdated
argument_list|,
name|snapshotLastUpdated
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|getSnapshotVersion
argument_list|()
operator|.
name|setTimestamp
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|VersionUtil
operator|.
name|isGenericSnapshot
argument_list|(
name|latestVersion
argument_list|)
condition|)
block|{
comment|// The latestVersion ends with the generic version string.
comment|// Example: 1.0-alpha-5-SNAPSHOT
name|metadata
operator|.
name|setSnapshotVersion
argument_list|(
operator|new
name|SnapshotVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Disabled due to decision in [MRM-535].                  * Do not set metadata.lastUpdated to file.lastModified.                  *                   * Should this be the last updated timestamp of the file, or in the case of an                   * archive, the most recent timestamp in the archive?                  *                  ArtifactReference artifact = getFirstArtifact( managedRepository, reference );                  if ( artifact == null )                 {                     throw new IOException( "Not snapshot artifact found to reference in " + reference );                 }                  File artifactFile = managedRepository.toFile( artifact );                  if ( artifactFile.exists() )                 {                     Date lastModified = new Date( artifactFile.lastModified() );                     metadata.setLastUpdatedTimestamp( lastModified );                 }                 */
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
literal|"Unable to process snapshot version<"
operator|+
name|latestVersion
operator|+
literal|"> reference<"
operator|+
name|reference
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Do RELEASE handling.
name|metadata
operator|.
name|setVersion
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set last updated
if|if
condition|(
name|lastUpdated
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|setLastUpdatedTimestamp
argument_list|(
name|toLastUpdatedDate
argument_list|(
name|lastUpdated
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Save the metadata model to disk.
name|RepositoryMetadataWriter
operator|.
name|write
argument_list|(
name|metadata
argument_list|,
name|metadataFile
argument_list|)
expr_stmt|;
name|ChecksummedFile
name|checksum
init|=
operator|new
name|ChecksummedFile
argument_list|(
name|metadataFile
operator|.
name|getFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|fixChecksums
argument_list|(
name|algorithms
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|initConfigVariables
parameter_list|()
block|{
assert|assert
operator|(
name|this
operator|.
name|artifactPatterns
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|proxies
operator|!=
literal|null
operator|)
assert|;
synchronized|synchronized
init|(
name|this
operator|.
name|artifactPatterns
init|)
block|{
name|this
operator|.
name|artifactPatterns
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|artifactPatterns
operator|.
name|addAll
argument_list|(
name|filetypes
operator|.
name|getFileTypePatterns
argument_list|(
name|FileTypes
operator|.
name|ARTIFACTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|proxies
init|)
block|{
name|this
operator|.
name|proxies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConfigs
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProxyConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConfig
range|:
name|proxyConfigs
control|)
block|{
name|String
name|key
init|=
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remoteRepoIds
init|=
name|this
operator|.
name|proxies
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRepoIds
operator|==
literal|null
condition|)
block|{
name|remoteRepoIds
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|remoteRepoIds
operator|.
name|add
argument_list|(
name|proxyConfig
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|remoteRepoIds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Get the first Artifact found in the provided VersionedReference location.      *      * @param managedRepository the repository to search within.      * @param reference         the reference to the versioned reference to search within      * @return the ArtifactReference to the first artifact located within the versioned reference. or null if      *         no artifact was found within the versioned reference.      * @throws IOException     if the versioned reference is invalid (example: doesn't exist, or isn't a directory)      * @throws LayoutException      */
end_comment

begin_function
specifier|public
name|ArtifactReference
name|getFirstArtifact
parameter_list|(
name|ManagedRepositoryContent
name|managedRepository
parameter_list|,
name|VersionedReference
name|reference
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|IOException
block|{
name|String
name|path
init|=
name|toPath
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|Path
name|repoDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to gather the list of snapshot versions on a non-existant directory: "
operator|+
name|repoDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|repoDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to gather the list of snapshot versions on a non-directory: "
operator|+
name|repoDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
try|try
init|(
name|Stream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|list
argument_list|(
name|repoDir
argument_list|)
init|)
block|{
name|String
name|result
init|=
name|stream
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|isRegularFile
argument_list|)
operator|.
name|map
argument_list|(
name|path1
lambda|->
name|PathUtil
operator|.
name|getRelative
argument_list|(
name|managedRepository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|path1
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|filetypes
operator|::
name|matchesArtifactPattern
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|managedRepository
operator|.
name|toArtifactReference
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
comment|// No artifact was found.
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
name|ArchivaConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|ArchivaConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|FileTypes
name|getFiletypes
parameter_list|()
block|{
return|return
name|filetypes
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setFiletypes
parameter_list|(
name|FileTypes
name|filetypes
parameter_list|)
block|{
name|this
operator|.
name|filetypes
operator|=
name|filetypes
expr_stmt|;
block|}
end_function

unit|}
end_unit

