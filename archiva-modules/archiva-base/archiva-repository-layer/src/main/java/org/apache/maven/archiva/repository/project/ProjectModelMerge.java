begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaModelCloner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * ProjectModelMerge  *  * TODO: Should call this ProjectModelAncestry as it deals with the current project and its parent.  *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ProjectModelMerge
block|{
comment|/**      * Merge the contents of a project with it's parent project.      *       * @param mainProject the main project.      * @param parentProject the parent project to merge.      * @throws ProjectModelException if there was a problem merging the model.      */
specifier|public
specifier|static
name|ArchivaProjectModel
name|merge
parameter_list|(
name|ArchivaProjectModel
name|mainProject
parameter_list|,
name|ArchivaProjectModel
name|parentProject
parameter_list|)
throws|throws
name|ProjectModelException
block|{
if|if
condition|(
name|mainProject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Cannot merge with a null main project."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentProject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Cannot merge with a null parent project."
argument_list|)
throw|;
block|}
name|ArchivaProjectModel
name|merged
init|=
operator|new
name|ArchivaProjectModel
argument_list|()
decl_stmt|;
comment|// Unmerged.
name|merged
operator|.
name|setArtifactId
argument_list|(
name|mainProject
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setPackaging
argument_list|(
name|StringUtils
operator|.
name|defaultIfEmpty
argument_list|(
name|mainProject
operator|.
name|getPackaging
argument_list|()
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setRelocation
argument_list|(
name|mainProject
operator|.
name|getRelocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Merged
name|merged
operator|.
name|setGroupId
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setVersion
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getVersion
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setName
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getName
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setUrl
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setDescription
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getDescription
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setOrigin
argument_list|(
literal|"merged"
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setCiManagement
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getCiManagement
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getCiManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setIndividuals
argument_list|(
name|mergeIndividuals
argument_list|(
name|mainProject
operator|.
name|getIndividuals
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getIndividuals
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setIssueManagement
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getIssueManagement
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setLicenses
argument_list|(
name|mergeLicenses
argument_list|(
name|mainProject
operator|.
name|getLicenses
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getLicenses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setOrganization
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getOrganization
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getOrganization
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setScm
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getScm
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getScm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setRepositories
argument_list|(
name|mergeRepositories
argument_list|(
name|mainProject
operator|.
name|getRepositories
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getRepositories
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setDependencies
argument_list|(
name|mergeDependencies
argument_list|(
name|mainProject
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setDependencyManagement
argument_list|(
name|mergeDependencyManagement
argument_list|(
name|mainProject
operator|.
name|getDependencyManagement
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setPlugins
argument_list|(
name|mergePlugins
argument_list|(
name|mainProject
operator|.
name|getPlugins
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getPlugins
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setReports
argument_list|(
name|mergeReports
argument_list|(
name|mainProject
operator|.
name|getReports
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getReports
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setProperties
argument_list|(
name|merge
argument_list|(
name|mainProject
operator|.
name|getProperties
argument_list|()
argument_list|,
name|parentProject
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|Map
name|createArtifactReferenceMap
parameter_list|(
name|List
name|artifactReferences
parameter_list|)
block|{
name|Map
name|ret
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|artifactReferences
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArtifactReference
name|artifactReference
init|=
operator|(
name|ArtifactReference
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|toVersionlessArtifactKey
argument_list|(
name|artifactReference
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|artifactReference
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|Map
name|createDependencyMap
parameter_list|(
name|List
name|dependencies
parameter_list|)
block|{
name|Map
name|ret
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|toVersionlessDependencyKey
argument_list|(
name|dep
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|Map
name|createExclusionMap
parameter_list|(
name|List
name|exclusions
parameter_list|)
block|{
name|Map
name|ret
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|exclusions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Exclusion
name|exclusion
init|=
operator|(
name|Exclusion
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|exclusion
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|exclusion
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|exclusion
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|Map
name|createLicensesMap
parameter_list|(
name|List
name|licenses
parameter_list|)
block|{
name|Map
name|ret
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|licenses
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|License
name|license
init|=
operator|(
name|License
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// TODO: Change to 'id' when LicenseTypeMapper is created.
name|String
name|key
init|=
name|license
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|license
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|Map
name|createRepositoriesMap
parameter_list|(
name|List
name|repositories
parameter_list|)
block|{
name|Map
name|ret
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|repositories
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProjectRepository
name|repo
init|=
operator|(
name|ProjectRepository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Should this really be using repo.id ?
name|String
name|key
init|=
name|repo
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|boolean
name|empty
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
name|val
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
operator|)
return|;
block|}
specifier|private
specifier|static
name|ArtifactReference
name|merge
parameter_list|(
name|ArtifactReference
name|mainArtifactReference
parameter_list|,
name|ArtifactReference
name|parentArtifactReference
parameter_list|)
block|{
if|if
condition|(
name|parentArtifactReference
operator|==
literal|null
condition|)
block|{
return|return
name|mainArtifactReference
return|;
block|}
if|if
condition|(
name|mainArtifactReference
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentArtifactReference
argument_list|)
return|;
block|}
name|ArtifactReference
name|merged
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
comment|// Unmerged.
name|merged
operator|.
name|setGroupId
argument_list|(
name|mainArtifactReference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setArtifactId
argument_list|(
name|mainArtifactReference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Merged.
name|merged
operator|.
name|setVersion
argument_list|(
name|merge
argument_list|(
name|mainArtifactReference
operator|.
name|getVersion
argument_list|()
argument_list|,
name|parentArtifactReference
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setClassifier
argument_list|(
name|merge
argument_list|(
name|mainArtifactReference
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|parentArtifactReference
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setType
argument_list|(
name|merge
argument_list|(
name|mainArtifactReference
operator|.
name|getType
argument_list|()
argument_list|,
name|parentArtifactReference
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|CiManagement
name|merge
parameter_list|(
name|CiManagement
name|mainCim
parameter_list|,
name|CiManagement
name|parentCim
parameter_list|)
block|{
if|if
condition|(
name|parentCim
operator|==
literal|null
condition|)
block|{
return|return
name|mainCim
return|;
block|}
if|if
condition|(
name|mainCim
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentCim
argument_list|)
return|;
block|}
name|CiManagement
name|merged
init|=
operator|new
name|CiManagement
argument_list|()
decl_stmt|;
name|merged
operator|.
name|setSystem
argument_list|(
name|merge
argument_list|(
name|mainCim
operator|.
name|getSystem
argument_list|()
argument_list|,
name|parentCim
operator|.
name|getSystem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setUrl
argument_list|(
name|merge
argument_list|(
name|mainCim
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parentCim
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|Dependency
name|merge
parameter_list|(
name|Dependency
name|mainDep
parameter_list|,
name|Dependency
name|parentDep
parameter_list|)
block|{
if|if
condition|(
name|parentDep
operator|==
literal|null
condition|)
block|{
return|return
name|mainDep
return|;
block|}
if|if
condition|(
name|mainDep
operator|==
literal|null
condition|)
block|{
name|Dependency
name|dep
init|=
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentDep
argument_list|)
decl_stmt|;
name|dep
operator|.
name|setFromParent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
name|Dependency
name|merged
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|merged
operator|.
name|setFromParent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Unmerged.
name|merged
operator|.
name|setGroupId
argument_list|(
name|mainDep
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setArtifactId
argument_list|(
name|mainDep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Merged.
name|merged
operator|.
name|setVersion
argument_list|(
name|merge
argument_list|(
name|mainDep
operator|.
name|getVersion
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setClassifier
argument_list|(
name|merge
argument_list|(
name|mainDep
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setType
argument_list|(
name|merge
argument_list|(
name|mainDep
operator|.
name|getType
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setScope
argument_list|(
name|merge
argument_list|(
name|mainDep
operator|.
name|getScope
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentDep
operator|.
name|isOptional
argument_list|()
condition|)
block|{
name|merged
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|merged
operator|.
name|setSystemPath
argument_list|(
name|merge
argument_list|(
name|mainDep
operator|.
name|getSystemPath
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getSystemPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setUrl
argument_list|(
name|merge
argument_list|(
name|mainDep
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setExclusions
argument_list|(
name|mergeExclusions
argument_list|(
name|mainDep
operator|.
name|getExclusions
argument_list|()
argument_list|,
name|parentDep
operator|.
name|getExclusions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|IssueManagement
name|merge
parameter_list|(
name|IssueManagement
name|mainIssueManagement
parameter_list|,
name|IssueManagement
name|parentIssueManagement
parameter_list|)
block|{
if|if
condition|(
name|parentIssueManagement
operator|==
literal|null
condition|)
block|{
return|return
name|mainIssueManagement
return|;
block|}
if|if
condition|(
name|mainIssueManagement
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentIssueManagement
argument_list|)
return|;
block|}
name|IssueManagement
name|merged
init|=
operator|new
name|IssueManagement
argument_list|()
decl_stmt|;
name|merged
operator|.
name|setSystem
argument_list|(
name|merge
argument_list|(
name|mainIssueManagement
operator|.
name|getSystem
argument_list|()
argument_list|,
name|parentIssueManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setUrl
argument_list|(
name|merge
argument_list|(
name|mainIssueManagement
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parentIssueManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|Organization
name|merge
parameter_list|(
name|Organization
name|mainOrganization
parameter_list|,
name|Organization
name|parentOrganization
parameter_list|)
block|{
if|if
condition|(
name|parentOrganization
operator|==
literal|null
condition|)
block|{
return|return
name|mainOrganization
return|;
block|}
if|if
condition|(
name|mainOrganization
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentOrganization
argument_list|)
return|;
block|}
name|Organization
name|merged
init|=
operator|new
name|Organization
argument_list|()
decl_stmt|;
name|merged
operator|.
name|setFavicon
argument_list|(
name|merge
argument_list|(
name|mainOrganization
operator|.
name|getFavicon
argument_list|()
argument_list|,
name|parentOrganization
operator|.
name|getFavicon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setName
argument_list|(
name|merge
argument_list|(
name|mainOrganization
operator|.
name|getName
argument_list|()
argument_list|,
name|parentOrganization
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setUrl
argument_list|(
name|merge
argument_list|(
name|mainOrganization
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parentOrganization
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|Properties
name|merge
parameter_list|(
name|Properties
name|mainProperties
parameter_list|,
name|Properties
name|parentProperties
parameter_list|)
block|{
if|if
condition|(
name|parentProperties
operator|==
literal|null
condition|)
block|{
return|return
name|mainProperties
return|;
block|}
if|if
condition|(
name|mainProperties
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentProperties
argument_list|)
return|;
block|}
name|Properties
name|merged
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Enumeration
name|keys
init|=
name|parentProperties
operator|.
name|propertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|merged
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|merge
argument_list|(
name|mainProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
name|parentProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|Scm
name|merge
parameter_list|(
name|Scm
name|mainScm
parameter_list|,
name|Scm
name|parentScm
parameter_list|)
block|{
if|if
condition|(
name|parentScm
operator|==
literal|null
condition|)
block|{
return|return
name|mainScm
return|;
block|}
if|if
condition|(
name|mainScm
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|parentScm
argument_list|)
return|;
block|}
name|Scm
name|merged
init|=
operator|new
name|Scm
argument_list|()
decl_stmt|;
name|merged
operator|.
name|setConnection
argument_list|(
name|merge
argument_list|(
name|mainScm
operator|.
name|getConnection
argument_list|()
argument_list|,
name|parentScm
operator|.
name|getConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setDeveloperConnection
argument_list|(
name|merge
argument_list|(
name|mainScm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|,
name|parentScm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|setUrl
argument_list|(
name|merge
argument_list|(
name|mainScm
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parentScm
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|String
name|merge
parameter_list|(
name|String
name|main
parameter_list|,
name|String
name|parent
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|(
name|main
argument_list|)
operator|&&
operator|!
name|empty
argument_list|(
name|parent
argument_list|)
condition|)
block|{
return|return
name|parent
return|;
block|}
return|return
name|main
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeArtifactReferences
parameter_list|(
name|List
name|mainArtifactReferences
parameter_list|,
name|List
name|parentArtifactReferences
parameter_list|)
block|{
if|if
condition|(
name|parentArtifactReferences
operator|==
literal|null
condition|)
block|{
return|return
name|mainArtifactReferences
return|;
block|}
if|if
condition|(
name|mainArtifactReferences
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|cloneLicenses
argument_list|(
name|parentArtifactReferences
argument_list|)
return|;
block|}
name|List
name|merged
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|mainArtifactReferenceMap
init|=
name|createArtifactReferenceMap
argument_list|(
name|mainArtifactReferences
argument_list|)
decl_stmt|;
name|Map
name|parentArtifactReferenceMap
init|=
name|createArtifactReferenceMap
argument_list|(
name|parentArtifactReferences
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|mainArtifactReferenceMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArtifactReference
name|mainArtifactReference
init|=
operator|(
name|ArtifactReference
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ArtifactReference
name|parentArtifactReference
init|=
operator|(
name|ArtifactReference
operator|)
name|parentArtifactReferenceMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentArtifactReference
operator|==
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|mainArtifactReference
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not merging. Local wins.
name|merged
operator|.
name|add
argument_list|(
name|merge
argument_list|(
name|mainArtifactReference
argument_list|,
name|parentArtifactReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeDependencies
parameter_list|(
name|List
name|mainDependencies
parameter_list|,
name|List
name|parentDependencies
parameter_list|)
block|{
if|if
condition|(
name|parentDependencies
operator|==
literal|null
condition|)
block|{
return|return
name|mainDependencies
return|;
block|}
if|if
condition|(
name|mainDependencies
operator|==
literal|null
condition|)
block|{
name|List
name|merged
init|=
name|ArchivaModelCloner
operator|.
name|cloneDependencies
argument_list|(
name|parentDependencies
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|merged
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setFromParent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
name|List
name|merged
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|mainDepMap
init|=
name|createDependencyMap
argument_list|(
name|mainDependencies
argument_list|)
decl_stmt|;
name|Map
name|parentDepMap
init|=
name|createDependencyMap
argument_list|(
name|parentDependencies
argument_list|)
decl_stmt|;
name|Set
name|uniqueKeys
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|uniqueKeys
operator|.
name|addAll
argument_list|(
name|mainDepMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|uniqueKeys
operator|.
name|addAll
argument_list|(
name|parentDepMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|uniqueKeys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Dependency
name|parentDep
init|=
operator|(
name|Dependency
operator|)
name|parentDepMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Dependency
name|mainDep
init|=
operator|(
name|Dependency
operator|)
name|mainDepMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDep
operator|==
literal|null
condition|)
block|{
comment|// Means there is no parent dep to override main dep.
name|merged
operator|.
name|add
argument_list|(
name|mainDep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Parent dep exists (main doesn't have to).
comment|// Merge the parent over the main dep.
name|merged
operator|.
name|add
argument_list|(
name|merge
argument_list|(
name|mainDep
argument_list|,
name|parentDep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeDependencyManagement
parameter_list|(
name|List
name|mainDepMgmt
parameter_list|,
name|List
name|parentDepMgmt
parameter_list|)
block|{
if|if
condition|(
name|parentDepMgmt
operator|==
literal|null
condition|)
block|{
return|return
name|mainDepMgmt
return|;
block|}
if|if
condition|(
name|mainDepMgmt
operator|==
literal|null
condition|)
block|{
name|List
name|merged
init|=
name|ArchivaModelCloner
operator|.
name|cloneDependencies
argument_list|(
name|parentDepMgmt
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|merged
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setFromParent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
name|List
name|merged
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|mainDepMap
init|=
name|createDependencyMap
argument_list|(
name|mainDepMgmt
argument_list|)
decl_stmt|;
name|Map
name|parentDepMap
init|=
name|createDependencyMap
argument_list|(
name|parentDepMgmt
argument_list|)
decl_stmt|;
name|Set
name|uniqueKeys
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|uniqueKeys
operator|.
name|addAll
argument_list|(
name|mainDepMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|uniqueKeys
operator|.
name|addAll
argument_list|(
name|parentDepMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|uniqueKeys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Dependency
name|parentDep
init|=
operator|(
name|Dependency
operator|)
name|parentDepMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Dependency
name|mainDep
init|=
operator|(
name|Dependency
operator|)
name|mainDepMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDep
operator|==
literal|null
condition|)
block|{
comment|// Means there is no parent depMan entry to override main depMan.
name|merged
operator|.
name|add
argument_list|(
name|mainDep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Parent depMan entry exists (main doesn't have to).
comment|// Merge the parent over the main depMan entry.
name|merged
operator|.
name|add
argument_list|(
name|merge
argument_list|(
name|mainDep
argument_list|,
name|parentDep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|public
specifier|static
name|List
name|mergeExclusions
parameter_list|(
name|List
name|mainExclusions
parameter_list|,
name|List
name|parentExclusions
parameter_list|)
block|{
if|if
condition|(
name|parentExclusions
operator|==
literal|null
condition|)
block|{
return|return
name|mainExclusions
return|;
block|}
if|if
condition|(
name|mainExclusions
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|cloneExclusions
argument_list|(
name|parentExclusions
argument_list|)
return|;
block|}
name|List
name|merged
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|mainExclusionMap
init|=
name|createExclusionMap
argument_list|(
name|mainExclusions
argument_list|)
decl_stmt|;
name|Map
name|parentExclusionMap
init|=
name|createExclusionMap
argument_list|(
name|parentExclusions
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|mainExclusionMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Exclusion
name|mainExclusion
init|=
operator|(
name|Exclusion
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Exclusion
name|parentExclusion
init|=
operator|(
name|Exclusion
operator|)
name|parentExclusionMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentExclusion
operator|==
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|mainExclusion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|merged
operator|.
name|add
argument_list|(
name|parentExclusion
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeIndividuals
parameter_list|(
name|List
name|mainIndividuals
parameter_list|,
name|List
name|parentIndividuals
parameter_list|)
block|{
if|if
condition|(
name|parentIndividuals
operator|==
literal|null
condition|)
block|{
return|return
name|mainIndividuals
return|;
block|}
if|if
condition|(
name|mainIndividuals
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|cloneIndividuals
argument_list|(
name|parentIndividuals
argument_list|)
return|;
block|}
name|List
name|merged
init|=
name|ArchivaModelCloner
operator|.
name|cloneIndividuals
argument_list|(
name|mainIndividuals
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|parentIndividuals
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Individual
name|parentIndividual
init|=
operator|(
name|Individual
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mainIndividuals
operator|.
name|contains
argument_list|(
name|parentIndividual
argument_list|)
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|parentIndividual
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeLicenses
parameter_list|(
name|List
name|mainLicenses
parameter_list|,
name|List
name|parentLicenses
parameter_list|)
block|{
if|if
condition|(
name|parentLicenses
operator|==
literal|null
condition|)
block|{
return|return
name|mainLicenses
return|;
block|}
if|if
condition|(
name|mainLicenses
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|cloneLicenses
argument_list|(
name|parentLicenses
argument_list|)
return|;
block|}
name|List
name|merged
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|mainLicensesMap
init|=
name|createLicensesMap
argument_list|(
name|mainLicenses
argument_list|)
decl_stmt|;
name|Map
name|parentLicensesMap
init|=
name|createLicensesMap
argument_list|(
name|parentLicenses
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|mainLicensesMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|License
name|mainLicense
init|=
operator|(
name|License
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|License
name|parentLicense
init|=
operator|(
name|License
operator|)
name|parentLicensesMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentLicense
operator|==
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|mainLicense
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not merging. Local wins.
name|merged
operator|.
name|add
argument_list|(
name|parentLicense
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|List
name|mergePlugins
parameter_list|(
name|List
name|mainPlugins
parameter_list|,
name|List
name|parentPlugins
parameter_list|)
block|{
return|return
name|mergeArtifactReferences
argument_list|(
name|mainPlugins
argument_list|,
name|parentPlugins
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeReports
parameter_list|(
name|List
name|mainReports
parameter_list|,
name|List
name|parentReports
parameter_list|)
block|{
return|return
name|mergeArtifactReferences
argument_list|(
name|mainReports
argument_list|,
name|parentReports
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
name|mergeRepositories
parameter_list|(
name|List
name|mainRepositories
parameter_list|,
name|List
name|parentRepositories
parameter_list|)
block|{
if|if
condition|(
name|parentRepositories
operator|==
literal|null
condition|)
block|{
return|return
name|mainRepositories
return|;
block|}
if|if
condition|(
name|mainRepositories
operator|==
literal|null
condition|)
block|{
return|return
name|ArchivaModelCloner
operator|.
name|cloneLicenses
argument_list|(
name|parentRepositories
argument_list|)
return|;
block|}
name|List
name|merged
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|mainRepositoriesMap
init|=
name|createRepositoriesMap
argument_list|(
name|mainRepositories
argument_list|)
decl_stmt|;
name|Map
name|parentRepositoriesMap
init|=
name|createRepositoriesMap
argument_list|(
name|parentRepositories
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|mainRepositoriesMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ProjectRepository
name|mainProjectRepository
init|=
operator|(
name|ProjectRepository
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ProjectRepository
name|parentProjectRepository
init|=
operator|(
name|ProjectRepository
operator|)
name|parentRepositoriesMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentProjectRepository
operator|==
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|mainProjectRepository
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not merging. Local wins.
name|merged
operator|.
name|add
argument_list|(
name|parentProjectRepository
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
specifier|private
specifier|static
name|String
name|toVersionlessArtifactKey
parameter_list|(
name|ArtifactReference
name|artifactReference
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|artifactReference
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|artifactReference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|artifactReference
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|artifactReference
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|toVersionlessDependencyKey
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
name|StringBuffer
name|key
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|key
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|dep
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

