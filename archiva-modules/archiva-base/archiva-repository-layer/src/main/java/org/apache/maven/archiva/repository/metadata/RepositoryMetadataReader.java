begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|SnapshotVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * RepositoryMetadataReader - read maven-metadata.xml files.  *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryMetadataReader
block|{
comment|/**      * Read and return the {@link ArchivaRepositoryMetadata} object from the provided xml file.      *       * @param metadataFile the maven-metadata.xml file to read.      * @return the archiva repository metadata object that represents the provided file contents.      * @throws RepositoryMetadataException      */
specifier|public
specifier|static
name|ArchivaRepositoryMetadata
name|read
parameter_list|(
name|File
name|metadataFile
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
try|try
block|{
name|XMLReader
name|xml
init|=
operator|new
name|XMLReader
argument_list|(
literal|"metadata"
argument_list|,
name|metadataFile
argument_list|)
decl_stmt|;
comment|// invoke this to remove namespaces, see MRM-1136
name|xml
operator|.
name|removeNamespaces
argument_list|()
expr_stmt|;
name|ArchivaRepositoryMetadata
name|metadata
init|=
operator|new
name|ArchivaRepositoryMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setGroupId
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//metadata/groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setArtifactId
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//metadata/artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setVersion
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//metadata/version"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setFileLastModified
argument_list|(
operator|new
name|Date
argument_list|(
name|metadataFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setFileSize
argument_list|(
name|metadataFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLastUpdated
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//metadata/versioning/lastUpdated"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLatestVersion
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//metadata/versioning/latest"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setReleasedVersion
argument_list|(
name|xml
operator|.
name|getElementText
argument_list|(
literal|"//metadata/versioning/release"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setAvailableVersions
argument_list|(
name|xml
operator|.
name|getElementListText
argument_list|(
literal|"//metadata/versioning/versions/version"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|snapshotElem
init|=
name|xml
operator|.
name|getElement
argument_list|(
literal|"//metadata/versioning/snapshot"
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotElem
operator|!=
literal|null
condition|)
block|{
name|SnapshotVersion
name|snapshot
init|=
operator|new
name|SnapshotVersion
argument_list|()
decl_stmt|;
name|snapshot
operator|.
name|setTimestamp
argument_list|(
name|snapshotElem
operator|.
name|elementTextTrim
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|snapshotElem
operator|.
name|elementTextTrim
argument_list|(
literal|"buildNumber"
argument_list|)
decl_stmt|;
if|if
condition|(
name|NumberUtils
operator|.
name|isNumber
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|snapshot
operator|.
name|setBuildNumber
argument_list|(
name|NumberUtils
operator|.
name|toInt
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|setSnapshotVersion
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Element
name|plugin
range|:
name|xml
operator|.
name|getElementList
argument_list|(
literal|"//metadata/plugins/plugin"
argument_list|)
control|)
block|{
name|Plugin
name|p
init|=
operator|new
name|Plugin
argument_list|()
decl_stmt|;
name|p
operator|.
name|setPrefix
argument_list|(
name|plugin
operator|.
name|elementTextTrim
argument_list|(
literal|"prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setArtifactId
argument_list|(
name|plugin
operator|.
name|elementTextTrim
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setName
argument_list|(
name|plugin
operator|.
name|elementTextTrim
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addPlugin
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryMetadataException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

