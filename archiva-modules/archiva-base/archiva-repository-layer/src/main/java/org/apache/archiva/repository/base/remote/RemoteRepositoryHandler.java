begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|remote
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexCreationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryHandlerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|AbstractRepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|ConfigurationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|event
operator|.
name|LifecycleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|event
operator|.
name|RepositoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"remoteRepositoryHandler#default"
argument_list|)
specifier|public
class|class
name|RemoteRepositoryHandler
extends|extends
name|AbstractRepositoryHandler
argument_list|<
name|RemoteRepository
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
implements|implements
name|RepositoryHandler
argument_list|<
name|RemoteRepository
argument_list|,
name|RemoteRepositoryConfiguration
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteRepositoryHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RepositoryHandlerManager
name|repositoryHandlerManager
decl_stmt|;
specifier|private
specifier|final
name|RepositoryContentFactory
name|repositoryContentFactory
decl_stmt|;
specifier|private
specifier|final
name|IndexManagerFactory
name|indexManagerFactory
decl_stmt|;
specifier|public
name|RemoteRepositoryHandler
parameter_list|(
name|RepositoryHandlerManager
name|repositoryHandlerManager
parameter_list|,
name|ConfigurationHandler
name|configurationHandler
parameter_list|,
name|IndexManagerFactory
name|indexManagerFactory
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"repositoryContentFactory#default"
argument_list|)
name|RepositoryContentFactory
name|repositoryContentFactory
parameter_list|)
block|{
name|super
argument_list|(
name|RemoteRepository
operator|.
name|class
argument_list|,
name|RemoteRepositoryConfiguration
operator|.
name|class
argument_list|,
name|configurationHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|repositoryHandlerManager
operator|=
name|repositoryHandlerManager
expr_stmt|;
name|this
operator|.
name|repositoryContentFactory
operator|=
name|repositoryContentFactory
expr_stmt|;
name|this
operator|.
name|indexManagerFactory
operator|=
name|indexManagerFactory
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PostConstruct
specifier|public
name|void
name|init
parameter_list|( )
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing repository handler "
operator|+
name|RemoteRepositoryHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|initializeStorage
argument_list|( )
expr_stmt|;
comment|// We are registering this class on the registry. This is necessary to avoid circular dependencies via injection.
name|this
operator|.
name|repositoryHandlerManager
operator|.
name|registerHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeStorage
parameter_list|( )
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeFromConfig
parameter_list|( )
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|currentInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|getRepositories
argument_list|( )
argument_list|)
decl_stmt|;
name|getRepositories
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|newAndUpdated
init|=
name|newOrUpdateInstancesFromConfig
argument_list|(
name|currentInstances
argument_list|)
decl_stmt|;
name|getRepositories
argument_list|( )
operator|.
name|putAll
argument_list|(
name|newAndUpdated
argument_list|)
expr_stmt|;
name|currentInstances
operator|.
name|entrySet
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|entry
lambda|->
operator|!
name|newAndUpdated
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|deactivateRepository
argument_list|(
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RemoteRepository
name|remoteRepository
range|:
name|getRepositories
argument_list|( )
operator|.
name|values
argument_list|( )
control|)
block|{
name|activateRepository
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|newOrUpdateInstancesFromConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|currentInstances
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoConfigs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getConfigurationHandler
argument_list|( )
operator|.
name|getBaseConfiguration
argument_list|( )
operator|.
name|getRemoteRepositories
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repoConfig
range|:
name|remoteRepoConfigs
control|)
block|{
name|String
name|id
init|=
name|repoConfig
operator|.
name|getId
argument_list|( )
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There are repositories with the same id in the configuration: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RemoteRepository
name|repo
decl_stmt|;
if|if
condition|(
name|currentInstances
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|repo
operator|=
name|currentInstances
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|getProvider
argument_list|(
name|repo
operator|.
name|getType
argument_list|( )
argument_list|)
operator|.
name|updateRemoteInstance
argument_list|(
operator|(
name|EditableRemoteRepository
operator|)
name|repo
argument_list|,
name|repoConfig
argument_list|)
expr_stmt|;
name|updateReferences
argument_list|(
name|repo
argument_list|,
name|repoConfig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repo
operator|=
name|newInstance
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize repositories from config: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|( )
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|newInstancesFromConfig
parameter_list|( )
block|{
try|try
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoConfigs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getConfigurationHandler
argument_list|( )
operator|.
name|getBaseConfiguration
argument_list|( )
operator|.
name|getRemoteRepositories
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|( )
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repoConfig
range|:
name|remoteRepoConfigs
control|)
block|{
name|RemoteRepository
name|repo
init|=
name|newInstance
argument_list|(
name|repoConfig
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|( )
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize repositories from config: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|( )
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|newInstance
parameter_list|(
name|RepositoryType
name|type
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating repo {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|EditableRemoteRepository
name|repo
decl_stmt|;
name|repo
operator|=
name|provider
operator|.
name|createRemoteInstance
argument_list|(
name|id
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|registerEventHandler
argument_list|(
name|RepositoryEvent
operator|.
name|ANY
argument_list|,
name|repositoryHandlerManager
argument_list|)
expr_stmt|;
name|updateReferences
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLastState
argument_list|(
name|RepositoryState
operator|.
name|REFERENCES_SET
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|newInstance
parameter_list|(
name|RemoteRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryType
name|type
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repositoryConfiguration
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Provider not found for repository type: "
operator|+
name|repositoryConfiguration
operator|.
name|getType
argument_list|( )
argument_list|)
throw|;
block|}
specifier|final
name|RemoteRepository
name|repo
init|=
name|provider
operator|.
name|createRemoteInstance
argument_list|(
name|repositoryConfiguration
argument_list|)
decl_stmt|;
name|repo
operator|.
name|registerEventHandler
argument_list|(
name|RepositoryEvent
operator|.
name|ANY
argument_list|,
name|repositoryHandlerManager
argument_list|)
expr_stmt|;
name|updateReferences
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|instanceof
name|EditableRepository
condition|)
block|{
operator|(
operator|(
name|EditableRepository
operator|)
name|repo
operator|)
operator|.
name|setLastState
argument_list|(
name|RepositoryState
operator|.
name|REFERENCES_SET
argument_list|)
expr_stmt|;
block|}
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RemoteRepositoryConfiguration
name|findRepositoryConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|removeRepositoryConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|RemoteRepositoryConfiguration
name|repoConfiguration
parameter_list|)
block|{
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|repoConfiguration
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|( )
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|( )
argument_list|,
name|repoConfiguration
operator|.
name|getId
argument_list|( )
argument_list|)
condition|)
block|{
name|configuration
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addRepositoryConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|RemoteRepositoryConfiguration
name|repoConfiguration
parameter_list|)
block|{
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|repoConfiguration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|put
parameter_list|(
name|RemoteRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|repository
operator|.
name|getId
argument_list|( )
decl_stmt|;
name|RemoteRepository
name|originRepo
init|=
name|getRepositories
argument_list|( )
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|originRepo
operator|==
literal|null
operator|&&
name|repositoryHandlerManager
operator|.
name|isRegisteredId
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"There exists a repository with id "
operator|+
name|id
operator|+
literal|". Could not update with managed repository."
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|originRepo
operator|!=
literal|null
operator|&&
name|repository
operator|!=
name|originRepo
condition|)
block|{
name|deactivateRepository
argument_list|(
name|originRepo
argument_list|)
expr_stmt|;
name|pushEvent
argument_list|(
name|LifecycleEvent
operator|.
name|UNREGISTERED
argument_list|,
name|originRepo
argument_list|)
expr_stmt|;
block|}
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|repository
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
name|RemoteRepositoryConfiguration
name|newCfg
init|=
name|provider
operator|.
name|getRemoteConfiguration
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|getConfigurationHandler
argument_list|( )
operator|.
name|getLock
argument_list|( )
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|Configuration
name|configuration
init|=
name|getConfigurationHandler
argument_list|( )
operator|.
name|getBaseConfiguration
argument_list|( )
decl_stmt|;
name|updateReferences
argument_list|(
name|repository
argument_list|,
name|newCfg
argument_list|)
expr_stmt|;
name|RemoteRepositoryConfiguration
name|oldCfg
init|=
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|newCfg
argument_list|)
expr_stmt|;
name|getConfigurationHandler
argument_list|( )
operator|.
name|save
argument_list|(
name|configuration
argument_list|,
name|ConfigurationHandler
operator|.
name|REGISTRY_EVENT_TAG
argument_list|)
expr_stmt|;
name|setLastState
argument_list|(
name|repository
argument_list|,
name|RepositoryState
operator|.
name|SAVED
argument_list|)
expr_stmt|;
name|activateRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|getConfigurationHandler
argument_list|( )
operator|.
name|getLock
argument_list|( )
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
name|getRepositories
argument_list|( )
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|setLastState
argument_list|(
name|repository
argument_list|,
name|RepositoryState
operator|.
name|REGISTERED
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Rollback only partly, because repository is closed already
if|if
condition|(
name|originRepo
operator|!=
literal|null
condition|)
block|{
name|getRepositories
argument_list|( )
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|originRepo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRepositories
argument_list|( )
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Exception during configuration update {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|( )
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
operator|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|put
parameter_list|(
name|RemoteRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|repositoryConfiguration
operator|.
name|getId
argument_list|( )
decl_stmt|;
specifier|final
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repositoryConfiguration
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
decl_stmt|;
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|configLock
init|=
name|this
operator|.
name|getConfigurationHandler
argument_list|( )
operator|.
name|getLock
argument_list|( )
operator|.
name|writeLock
argument_list|( )
decl_stmt|;
name|configLock
operator|.
name|lock
argument_list|( )
expr_stmt|;
name|RemoteRepository
name|repo
init|=
literal|null
decl_stmt|;
name|RemoteRepository
name|oldRepository
init|=
literal|null
decl_stmt|;
name|Configuration
name|configuration
init|=
literal|null
decl_stmt|;
try|try
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
name|configuration
operator|=
name|getConfigurationHandler
argument_list|( )
operator|.
name|getBaseConfiguration
argument_list|( )
expr_stmt|;
name|repo
operator|=
name|getRepositories
argument_list|( )
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|oldRepository
operator|=
name|repo
operator|==
literal|null
condition|?
literal|null
else|:
name|clone
argument_list|(
name|repo
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|repo
operator|=
name|put
argument_list|(
name|repositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setRepositoryDefaults
argument_list|(
name|repositoryConfiguration
argument_list|)
expr_stmt|;
name|provider
operator|.
name|updateRemoteInstance
argument_list|(
operator|(
name|EditableRemoteRepository
operator|)
name|repo
argument_list|,
name|repositoryConfiguration
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
name|pushEvent
argument_list|(
name|LifecycleEvent
operator|.
name|UPDATED
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
name|registerNewRepository
argument_list|(
name|repositoryConfiguration
argument_list|,
name|repo
argument_list|,
name|configuration
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
decl||
name|RegistryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|oldRepository
operator|!=
literal|null
condition|)
block|{
name|RemoteRepositoryConfiguration
name|oldCfg
init|=
name|provider
operator|.
name|getRemoteConfiguration
argument_list|(
name|oldRepository
argument_list|)
decl_stmt|;
name|provider
operator|.
name|updateRemoteInstance
argument_list|(
operator|(
name|EditableRemoteRepository
operator|)
name|repo
argument_list|,
name|oldCfg
argument_list|)
expr_stmt|;
name|rollback
argument_list|(
name|configuration
argument_list|,
name|oldRepository
argument_list|,
name|e
argument_list|,
name|oldCfg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRepositories
argument_list|( )
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Could not save the configuration for repository {}: {}"
argument_list|,
name|id
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration for repository "
operator|+
name|id
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
finally|finally
block|{
name|configLock
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
return|return
name|repo
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|setRepositoryDefaults
parameter_list|(
name|RemoteRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
block|{
comment|// We do nothing here
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|put
parameter_list|(
name|RemoteRepositoryConfiguration
name|repositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|repositoryConfiguration
operator|.
name|getId
argument_list|( )
decl_stmt|;
specifier|final
name|RepositoryType
name|repoType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repositoryConfiguration
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
name|RemoteRepository
name|repo
decl_stmt|;
name|setRepositoryDefaults
argument_list|(
name|repositoryConfiguration
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRepositories
argument_list|( )
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|repo
operator|=
name|clone
argument_list|(
name|getRepositories
argument_list|( )
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|instanceof
name|EditableRemoteRepository
condition|)
block|{
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|updateRemoteInstance
argument_list|(
operator|(
name|EditableRemoteRepository
operator|)
name|repo
argument_list|,
name|repositoryConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The repository is not editable "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|repo
operator|=
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|createRemoteInstance
argument_list|(
name|repositoryConfiguration
argument_list|)
expr_stmt|;
name|setLastState
argument_list|(
name|repo
argument_list|,
name|RepositoryState
operator|.
name|CREATED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|replaceOrAddRepositoryConfig
argument_list|(
name|repositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
name|updateReferences
argument_list|(
name|repo
argument_list|,
name|repositoryConfiguration
argument_list|)
expr_stmt|;
name|setLastState
argument_list|(
name|repo
argument_list|,
name|RepositoryState
operator|.
name|REFERENCES_SET
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|clone
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|repo
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
name|RemoteRepositoryConfiguration
name|cfg
init|=
name|provider
operator|.
name|getRemoteConfiguration
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|RemoteRepository
name|cloned
init|=
name|provider
operator|.
name|createRemoteInstance
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|cloned
operator|.
name|registerEventHandler
argument_list|(
name|RepositoryEvent
operator|.
name|ANY
argument_list|,
name|repositoryHandlerManager
argument_list|)
expr_stmt|;
name|setLastState
argument_list|(
name|cloned
argument_list|,
name|RepositoryState
operator|.
name|CREATED
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateReferences
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|,
name|RemoteRepositoryConfiguration
name|repositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repo
operator|instanceof
name|EditableRemoteRepository
operator|&&
name|repo
operator|.
name|getContent
argument_list|( )
operator|==
literal|null
condition|)
block|{
name|EditableRemoteRepository
name|editableRepo
init|=
operator|(
name|EditableRemoteRepository
operator|)
name|repo
decl_stmt|;
name|editableRepo
operator|.
name|setContent
argument_list|(
name|repositoryContentFactory
operator|.
name|getRemoteRepositoryContent
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|&&
name|repo
operator|.
name|getIndexingContext
argument_list|( )
operator|==
literal|null
condition|)
block|{
name|createIndexingContext
argument_list|(
name|editableRepo
argument_list|)
expr_stmt|;
block|}
block|}
name|repo
operator|.
name|registerEventHandler
argument_list|(
name|RepositoryEvent
operator|.
name|ANY
argument_list|,
name|repositoryHandlerManager
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createIndexingContext
parameter_list|(
name|EditableRepository
name|editableRepo
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|editableRepo
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|ArchivaIndexManager
name|idxManager
init|=
name|getIndexManager
argument_list|(
name|editableRepo
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
try|try
block|{
name|editableRepo
operator|.
name|setIndexingContext
argument_list|(
name|idxManager
operator|.
name|createContext
argument_list|(
name|editableRepo
argument_list|)
argument_list|)
expr_stmt|;
name|idxManager
operator|.
name|updateLocalIndexPath
argument_list|(
name|editableRepo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexCreationFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not create index for repository "
operator|+
name|editableRepo
operator|.
name|getId
argument_list|( )
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|ArchivaIndexManager
name|getIndexManager
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
return|return
name|indexManagerFactory
operator|.
name|getIndexManager
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

