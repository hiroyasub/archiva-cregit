begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|filters
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaModelCloner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|DefaultExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|EvaluatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|ExpressionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|ExpressionSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|sources
operator|.
name|PropertiesExpressionSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|evaluator
operator|.
name|sources
operator|.
name|SystemPropertyExpressionSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * ProjectModelExpressionFilter   *  * @version $Id$  * @plexus.component role="org.apache.maven.archiva.repository.project.ProjectModelFilter"  *                   role-hint="expression"   *                   instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|ProjectModelExpressionFilter
implements|implements
name|ProjectModelFilter
block|{
specifier|private
name|ExpressionEvaluator
name|evaluator
init|=
operator|new
name|DefaultExpressionEvaluator
argument_list|()
decl_stmt|;
comment|/**      * Find and Evaluate the Expressions present in the model.      *       * @param model the model to correct.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ArchivaProjectModel
name|filter
parameter_list|(
specifier|final
name|ArchivaProjectModel
name|model
parameter_list|)
throws|throws
name|ProjectModelException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|putAll
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArchivaProjectModel
name|ret
init|=
name|ArchivaModelCloner
operator|.
name|clone
argument_list|(
name|model
argument_list|)
decl_stmt|;
comment|// TODO: should probably clone evaluator to prevent threading issues.
synchronized|synchronized
init|(
name|evaluator
init|)
block|{
comment|// TODO: create .resetSources() method in ExpressionEvaluator project on plexus side.
comment|// Remove previous expression sources.
name|List
argument_list|<
name|ExpressionSource
argument_list|>
name|oldSources
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionSource
argument_list|>
argument_list|()
decl_stmt|;
name|oldSources
operator|.
name|addAll
argument_list|(
name|evaluator
operator|.
name|getExpressionSourceList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionSource
name|exprSrc
range|:
name|oldSources
control|)
block|{
name|evaluator
operator|.
name|removeExpressionSource
argument_list|(
name|exprSrc
argument_list|)
expr_stmt|;
block|}
comment|// Setup new sources (based on current model)
name|PropertiesExpressionSource
name|propsSource
init|=
operator|new
name|PropertiesExpressionSource
argument_list|()
decl_stmt|;
name|propsSource
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|evaluator
operator|.
name|addExpressionSource
argument_list|(
name|propsSource
argument_list|)
expr_stmt|;
comment|// Add system properties to the mix.
name|evaluator
operator|.
name|addExpressionSource
argument_list|(
operator|new
name|SystemPropertyExpressionSource
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Setup some common properties.
name|VersionedReference
name|parent
init|=
name|model
operator|.
name|getParentProject
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|String
name|parentGroupId
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|parent
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|parentArtifactId
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|parent
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|parentVersion
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|parent
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"parent.groupId"
argument_list|,
name|parentGroupId
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"parent.artifactId"
argument_list|,
name|parentArtifactId
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"parent.version"
argument_list|,
name|parentVersion
argument_list|)
expr_stmt|;
block|}
name|String
name|groupId
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Archiva doesn't need to handle a full expression language with object tree walking                  * as the requirements within Archiva are much smaller, a quick replacement of the                  * important fields (groupId, artifactId, version, name) are handled specifically.                   */
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.groupId"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.artifactId"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"pom.name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"project.groupId"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"project.artifactId"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"project.version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"project.name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// Evaluate everything.
name|ret
operator|.
name|setVersion
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setGroupId
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDescription
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setPackaging
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getPackaging
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUrl
argument_list|(
name|evaluator
operator|.
name|expand
argument_list|(
name|ret
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|evaluateParentProject
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getParentProject
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateBuildExtensions
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getBuildExtensions
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateCiManagement
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateDependencyList
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateDependencyList
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateIndividuals
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getIndividuals
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateIssueManagement
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateLicenses
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateMailingLists
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateOrganization
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|evaluatePlugins
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getPlugins
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateRelocation
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getRelocation
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateReports
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getReports
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateRepositories
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateScm
argument_list|(
name|evaluator
argument_list|,
name|ret
operator|.
name|getScm
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EvaluatorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectModelException
argument_list|(
literal|"Unable to evaluate expression in model: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|evaluateArtifactReferenceList
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|refs
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|refs
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ArtifactReference
name|ref
range|:
name|refs
control|)
block|{
name|ref
operator|.
name|setGroupId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setClassifier
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setType
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateBuildExtensions
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|buildExtensions
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|buildExtensions
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ArtifactReference
name|ref
range|:
name|buildExtensions
control|)
block|{
name|ref
operator|.
name|setGroupId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setClassifier
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setType
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateCiManagement
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|CiManagement
name|ciManagement
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|ciManagement
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ciManagement
operator|.
name|setSystem
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ciManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ciManagement
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|ciManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateDependencyList
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|dependencies
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Dependency
name|dependency
range|:
name|dependencies
control|)
block|{
name|dependency
operator|.
name|setGroupId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setArtifactId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|dependency
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|evaluateExclusions
argument_list|(
name|eval
argument_list|,
name|dependency
operator|.
name|getExclusions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateExclusions
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|Exclusion
argument_list|>
name|exclusions
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|exclusions
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Exclusion
name|exclusion
range|:
name|exclusions
control|)
block|{
name|exclusion
operator|.
name|setGroupId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|exclusion
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exclusion
operator|.
name|setArtifactId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|exclusion
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateIndividuals
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|Individual
argument_list|>
name|individuals
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|individuals
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Individual
name|individual
range|:
name|individuals
control|)
block|{
name|individual
operator|.
name|setPrincipal
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setName
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setEmail
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setTimezone
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getTimezone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setOrganization
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getOrganization
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setOrganizationUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getOrganizationUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individual
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|individual
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|evaluateProperties
argument_list|(
name|eval
argument_list|,
name|individual
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|evaluateStringList
argument_list|(
name|eval
argument_list|,
name|individual
operator|.
name|getRoles
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateIssueManagement
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|IssueManagement
name|issueManagement
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|issueManagement
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|issueManagement
operator|.
name|setSystem
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|issueManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|issueManagement
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|issueManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateLicenses
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|License
argument_list|>
name|licenses
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|licenses
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|License
name|license
range|:
name|licenses
control|)
block|{
name|license
operator|.
name|setName
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|license
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|license
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|license
operator|.
name|setComments
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|license
operator|.
name|getComments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateMailingLists
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|mailingLists
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|MailingList
name|mlist
range|:
name|mailingLists
control|)
block|{
name|mlist
operator|.
name|setName
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|mlist
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mlist
operator|.
name|setSubscribeAddress
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|mlist
operator|.
name|getSubscribeAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mlist
operator|.
name|setUnsubscribeAddress
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|mlist
operator|.
name|getUnsubscribeAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mlist
operator|.
name|setPostAddress
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|mlist
operator|.
name|getPostAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mlist
operator|.
name|setMainArchiveUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|mlist
operator|.
name|getMainArchiveUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|evaluateStringList
argument_list|(
name|eval
argument_list|,
name|mlist
operator|.
name|getOtherArchives
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateOrganization
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|Organization
name|organization
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|organization
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|organization
operator|.
name|setName
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|organization
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|organization
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|organization
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|organization
operator|.
name|setFavicon
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|organization
operator|.
name|getFavicon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateParentProject
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|VersionedReference
name|parentProject
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|parentProject
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|parentProject
operator|.
name|setGroupId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|parentProject
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parentProject
operator|.
name|setArtifactId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|parentProject
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parentProject
operator|.
name|setVersion
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|parentProject
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluatePlugins
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|plugins
parameter_list|)
throws|throws
name|EvaluatorException
block|{
name|evaluateArtifactReferenceList
argument_list|(
name|eval
argument_list|,
name|plugins
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateProperties
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Only evaluate the values, not the keys.
comment|// Collect the key names. (Done ahead of time to prevent iteration / concurrent modification exceptions)
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
comment|// Evaluate all of the values.
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|value
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|eval
operator|.
name|expand
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateRelocation
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|VersionedReference
name|relocation
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|relocation
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|relocation
operator|.
name|setGroupId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|relocation
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|relocation
operator|.
name|setArtifactId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|relocation
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|relocation
operator|.
name|setVersion
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|relocation
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateReports
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|ArtifactReference
argument_list|>
name|reports
parameter_list|)
throws|throws
name|EvaluatorException
block|{
name|evaluateArtifactReferenceList
argument_list|(
name|eval
argument_list|,
name|reports
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateRepositories
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|ProjectRepository
argument_list|>
name|repositories
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|repositories
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ProjectRepository
name|repository
range|:
name|repositories
control|)
block|{
name|repository
operator|.
name|setId
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLayout
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setName
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|repository
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|evaluateScm
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|Scm
name|scm
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|scm
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|scm
operator|.
name|setConnection
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|scm
operator|.
name|getConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setDeveloperConnection
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|scm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setUrl
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|scm
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateStringList
parameter_list|(
name|ExpressionEvaluator
name|eval
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
throws|throws
name|EvaluatorException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|strings
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Create new list to hold post-evaluated strings.
name|List
argument_list|<
name|String
argument_list|>
name|evaluated
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Evaluate them all
for|for
control|(
name|String
name|str
range|:
name|strings
control|)
block|{
name|evaluated
operator|.
name|add
argument_list|(
name|eval
operator|.
name|expand
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Populate the original list with the post-evaluated list.
name|strings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|strings
operator|.
name|addAll
argument_list|(
name|evaluated
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

