begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexCreationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexUpdateFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|StagingRepositoryFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Registry for repositories. This is the central entry point for repositories. It provides methods for  * retrieving, adding and removing repositories.  *  * The modification methods addXX and removeXX persist the changes immediately to the configuration. If the  * configuration save fails the changes are rolled back.  *  * TODO: Audit events should be sent, but we don't want dependency to the repsitory-metadata-api  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryRegistry"
argument_list|)
specifier|public
class|class
name|RepositoryRegistry
implements|implements
name|ConfigurationListener
implements|,
name|RepositoryEventHandler
implements|,
name|RepositoryEventListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * We inject all repository providers      */
annotation|@
name|Inject
name|List
argument_list|<
name|RepositoryProvider
argument_list|>
name|repositoryProviders
decl_stmt|;
annotation|@
name|Inject
name|IndexManagerFactory
name|indexManagerFactory
decl_stmt|;
annotation|@
name|Inject
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"repositoryContentFactory#default"
argument_list|)
name|RepositoryContentFactory
name|repositoryContentFactory
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RepositoryEventListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|managedRepositories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|uManagedRepository
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|managedRepositories
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|remoteRepositories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|uRemoteRepositories
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|remoteRepositories
argument_list|)
decl_stmt|;
specifier|private
name|ReentrantReadWriteLock
name|rwLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|( )
decl_stmt|;
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|private
name|void
name|initialize
parameter_list|( )
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing repository registry"
argument_list|)
expr_stmt|;
for|for
control|(
name|ManagedRepository
name|rep
range|:
name|managedRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|rep
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|managedRepositories
operator|.
name|clear
argument_list|( )
expr_stmt|;
name|managedRepositories
operator|.
name|putAll
argument_list|(
name|getManagedRepositoriesFromConfig
argument_list|( )
argument_list|)
expr_stmt|;
for|for
control|(
name|RemoteRepository
name|repo
range|:
name|remoteRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|remoteRepositories
operator|.
name|clear
argument_list|( )
expr_stmt|;
name|remoteRepositories
operator|.
name|putAll
argument_list|(
name|getRemoteRepositoriesFromConfig
argument_list|( )
argument_list|)
expr_stmt|;
comment|// archivaConfiguration.addChangeListener(this);
name|archivaConfiguration
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
for|for
control|(
name|ManagedRepository
name|rep
range|:
name|managedRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|rep
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RemoteRepository
name|repo
range|:
name|remoteRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|createProviderMap
parameter_list|( )
block|{
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
if|if
condition|(
name|repositoryProviders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RepositoryProvider
name|provider
range|:
name|repositoryProviders
control|)
block|{
for|for
control|(
name|RepositoryType
name|type
range|:
name|provider
operator|.
name|provides
argument_list|( )
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
name|RepositoryProvider
name|getProvider
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|repositoryProviders
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|repositoryProvider
lambda|->
name|repositoryProvider
operator|.
name|provides
argument_list|( )
operator|.
name|contains
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|( )
operator|.
name|orElseThrow
argument_list|(
parameter_list|( )
lambda|->
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type cannot be handled: "
operator|+
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|getManagedRepositoriesFromConfig
parameter_list|( )
block|{
try|try
block|{
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoConfigs
init|=
name|getArchivaConfiguration
argument_list|( )
operator|.
name|getConfiguration
argument_list|( )
operator|.
name|getManagedRepositories
argument_list|( )
decl_stmt|;
if|if
condition|(
name|managedRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|managedRepos
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|managedRepoConfigs
operator|.
name|size
argument_list|( )
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|providerMap
init|=
name|createProviderMap
argument_list|( )
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|repoConfig
range|:
name|managedRepoConfigs
control|)
block|{
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repoConfig
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerMap
operator|.
name|containsKey
argument_list|(
name|repositoryType
argument_list|)
condition|)
block|{
try|try
block|{
name|ManagedRepository
name|repo
init|=
name|createNewManagedRepository
argument_list|(
name|providerMap
operator|.
name|get
argument_list|(
name|repositoryType
argument_list|)
argument_list|,
name|repoConfig
argument_list|)
decl_stmt|;
name|managedRepos
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|( )
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create managed repository {}: {}"
argument_list|,
name|repoConfig
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|managedRepos
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize repositories from config: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
block|}
specifier|private
name|ManagedRepository
name|createNewManagedRepository
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|ManagedRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating repo {}"
argument_list|,
name|cfg
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repo
init|=
name|provider
operator|.
name|createManagedInstance
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|repo
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|repo
argument_list|,
name|cfg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
name|void
name|updateRepositoryReferences
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|ManagedRepository
name|repo
parameter_list|,
name|ManagedRepositoryConfiguration
name|cfg
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Updating references of repo {}"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|StagingRepositoryFeature
name|feature
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|( )
decl_stmt|;
if|if
condition|(
name|feature
operator|.
name|isStageRepoNeeded
argument_list|( )
operator|&&
name|feature
operator|.
name|getStagingRepository
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ManagedRepository
name|stageRepo
init|=
name|getStagingRepository
argument_list|(
name|provider
argument_list|,
name|cfg
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|managedRepositories
operator|.
name|put
argument_list|(
name|stageRepo
operator|.
name|getId
argument_list|()
argument_list|,
name|stageRepo
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStagingRepository
argument_list|(
name|stageRepo
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|replaceOrAddRepositoryConfig
argument_list|(
name|provider
operator|.
name|getManagedConfiguration
argument_list|(
name|stageRepo
argument_list|)
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|repo
operator|instanceof
name|EditableManagedRepository
condition|)
block|{
name|EditableManagedRepository
name|editableRepo
init|=
operator|(
name|EditableManagedRepository
operator|)
name|repo
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|editableRepo
operator|.
name|setContent
argument_list|(
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Index repo: "
operator|+
name|repo
operator|.
name|hasIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|hasIndex
argument_list|()
operator|&&
name|repo
operator|.
name|getIndexingContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating indexing context for {}"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|createIndexingContext
argument_list|(
name|editableRepo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ArchivaIndexManager
name|getIndexManager
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
return|return
name|indexManagerFactory
operator|.
name|getIndexManager
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|void
name|createIndexingContext
parameter_list|(
name|EditableRepository
name|editableRepo
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|editableRepo
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|ArchivaIndexManager
name|idxManager
init|=
name|getIndexManager
argument_list|(
name|editableRepo
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|editableRepo
operator|.
name|setIndexingContext
argument_list|(
name|idxManager
operator|.
name|createContext
argument_list|(
name|editableRepo
argument_list|)
argument_list|)
expr_stmt|;
name|idxManager
operator|.
name|updateLocalIndexPath
argument_list|(
name|editableRepo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexCreationFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not create index for repository "
operator|+
name|editableRepo
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|ManagedRepository
name|getStagingRepository
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|ManagedRepositoryConfiguration
name|baseRepoCfg
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ManagedRepository
name|stageRepo
init|=
name|getManagedRepository
argument_list|(
name|baseRepoCfg
operator|.
name|getId
argument_list|( )
operator|+
name|StagingRepositoryFeature
operator|.
name|STAGING_REPO_POSTFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|stageRepo
operator|==
literal|null
condition|)
block|{
name|stageRepo
operator|=
name|provider
operator|.
name|createStagingInstance
argument_list|(
name|baseRepoCfg
argument_list|)
expr_stmt|;
if|if
condition|(
name|stageRepo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|stageRepo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|setStageRepoNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|ManagedRepositoryConfiguration
name|stageCfg
init|=
name|provider
operator|.
name|getManagedConfiguration
argument_list|(
name|stageRepo
argument_list|)
decl_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|stageRepo
argument_list|,
name|stageCfg
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
return|return
name|stageRepo
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|getRemoteRepositoriesFromConfig
parameter_list|( )
block|{
try|try
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoConfigs
init|=
name|getArchivaConfiguration
argument_list|( )
operator|.
name|getConfiguration
argument_list|( )
operator|.
name|getRemoteRepositories
argument_list|( )
decl_stmt|;
if|if
condition|(
name|remoteRepoConfigs
operator|==
literal|null
condition|)
block|{
comment|//noinspection unchecked
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|remoteRepos
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|remoteRepoConfigs
operator|.
name|size
argument_list|( )
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|providerMap
init|=
name|createProviderMap
argument_list|( )
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repoConfig
range|:
name|remoteRepoConfigs
control|)
block|{
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repoConfig
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerMap
operator|.
name|containsKey
argument_list|(
name|repositoryType
argument_list|)
condition|)
block|{
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
decl_stmt|;
try|try
block|{
name|RemoteRepository
name|remoteRepository
init|=
name|createNewRemoteRepository
argument_list|(
name|provider
argument_list|,
name|repoConfig
argument_list|)
decl_stmt|;
name|remoteRepos
operator|.
name|put
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|( )
argument_list|,
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create repository {} from config: {}"
argument_list|,
name|repoConfig
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|remoteRepos
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize remote repositories from config: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
block|}
specifier|private
name|RemoteRepository
name|createNewRemoteRepository
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|RemoteRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating remote repo {}"
argument_list|,
name|cfg
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteRepository
name|repo
init|=
name|provider
operator|.
name|createRemoteInstance
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|repo
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|repo
argument_list|,
name|cfg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
name|void
name|updateRepositoryReferences
parameter_list|(
name|RepositoryProvider
name|provider
parameter_list|,
name|RemoteRepository
name|repo
parameter_list|,
name|RemoteRepositoryConfiguration
name|cfg
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repo
operator|instanceof
name|EditableRemoteRepository
operator|&&
name|repo
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|EditableRemoteRepository
name|editableRepo
init|=
operator|(
name|EditableRemoteRepository
operator|)
name|repo
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|editableRepo
operator|.
name|setContent
argument_list|(
name|repositoryContentFactory
operator|.
name|getRemoteRepositoryContent
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|&&
name|repo
operator|.
name|getIndexingContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createIndexingContext
argument_list|(
name|editableRepo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ArchivaConfiguration
name|getArchivaConfiguration
parameter_list|( )
block|{
return|return
name|this
operator|.
name|archivaConfiguration
return|;
block|}
comment|/**      * Returns all repositories that are registered. There is no defined order of the returned repositories.      *      * @return a list of managed and remote repositories      */
specifier|public
name|Collection
argument_list|<
name|Repository
argument_list|>
name|getRepositories
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|managedRepositories
operator|.
name|values
argument_list|( )
operator|.
name|stream
argument_list|( )
argument_list|,
name|remoteRepositories
operator|.
name|values
argument_list|( )
operator|.
name|stream
argument_list|( )
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Returns only the managed repositories. There is no defined order of the returned repositories.      *      * @return a list of managed repositories      */
specifier|public
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|uManagedRepository
operator|.
name|values
argument_list|( )
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns only the remote repositories. There is no defined order of the returned repositories.      *      * @return a list of remote repositories      */
specifier|public
name|Collection
argument_list|<
name|RemoteRepository
argument_list|>
name|getRemoteRepositories
parameter_list|( )
block|{
name|rwLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|uRemoteRepositories
operator|.
name|values
argument_list|( )
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the repository with the given id. The returned repository may be a managed or remote repository.      * It returns null, if no repository is registered with the given id.      *      * @param repoId the repository id      * @return the repository if found, otherwise null      */
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getRepository {}"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
if|if
condition|(
name|managedRepositories
operator|.
name|containsKey
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Managed repo"
argument_list|)
expr_stmt|;
return|return
name|managedRepositories
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Remote repo"
argument_list|)
expr_stmt|;
return|return
name|remoteRepositories
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Convenience method, that returns the managed repository with the given id.      * It returns null, if no managed repository is registered with this id.      *      * @param repoId the repository id      * @return the managed repository if found, otherwise null      */
specifier|public
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|managedRepositories
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Convenience method, that returns the remote repository with the given id.      * It returns null, if no remote repository is registered with this id.      *      * @param repoId the repository id      * @return the remote repository if found, otherwise null      */
specifier|public
name|RemoteRepository
name|getRemoteRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
return|return
name|remoteRepositories
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository to the current list, or replaces the repository definition with      * the same id, if it exists already.      * The change is saved to the configuration immediately.      *      * @param managedRepository the new repository.      * @throws RepositoryException if the new repository could not be saved to the configuration.      */
specifier|public
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|id
init|=
name|managedRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteRepositories
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"There exists a remote repository with id "
operator|+
name|id
operator|+
literal|". Could not update with managed repository."
argument_list|)
throw|;
block|}
name|ManagedRepository
name|originRepo
init|=
name|managedRepositories
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|managedRepository
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|originRepo
operator|!=
literal|null
condition|)
block|{
name|originRepo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|managedRepository
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ManagedRepositoryConfiguration
name|newCfg
init|=
name|provider
operator|.
name|getManagedConfiguration
argument_list|(
name|managedRepository
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|( )
operator|.
name|getConfiguration
argument_list|( )
decl_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|managedRepository
argument_list|,
name|newCfg
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|oldCfg
init|=
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|newCfg
argument_list|)
expr_stmt|;
name|getArchivaConfiguration
argument_list|( )
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|managedRepository
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Rollback
if|if
condition|(
name|originRepo
operator|!=
literal|null
condition|)
block|{
name|managedRepositories
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|originRepo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|managedRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Exception during configuration update {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|( )
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id, if it exists already.      * The configuration is saved immediately.      *      * @param managedRepositoryConfiguration the repository configuration      * @return the updated or created repository      * @throws RepositoryException if an error occurs, or the configuration is not valid.      */
specifier|public
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|id
init|=
name|managedRepositoryConfiguration
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|managedRepositoryConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|managedRepositories
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ManagedRepositoryConfiguration
name|oldCfg
init|=
name|repo
operator|!=
literal|null
condition|?
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|getManagedConfiguration
argument_list|(
name|repo
argument_list|)
else|:
literal|null
decl_stmt|;
name|repo
operator|=
name|putRepository
argument_list|(
name|managedRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
name|getArchivaConfiguration
argument_list|()
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
decl||
name|RegistryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|updateManagedInstance
argument_list|(
operator|(
name|EditableManagedRepository
operator|)
name|repo
argument_list|,
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Could not save the configuration for repository {}: {}"
argument_list|,
name|id
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration for repository "
operator|+
name|id
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|repo
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id. The given configuration object is updated, but      * the configuration is not saved.      *      * @param managedRepositoryConfiguration the new or changed repository configuration      * @param configuration the configuration object      * @return the new or updated repository      * @throws RepositoryException if the configuration cannot be saved or updated      */
specifier|public
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|id
init|=
name|managedRepositoryConfiguration
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryType
name|repoType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|managedRepositoryConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ManagedRepository
name|repo
decl_stmt|;
if|if
condition|(
name|managedRepositories
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|repo
operator|=
name|managedRepositories
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|instanceof
name|EditableManagedRepository
condition|)
block|{
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|updateManagedInstance
argument_list|(
operator|(
name|EditableManagedRepository
operator|)
name|repo
argument_list|,
name|managedRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The repository is not editable "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|repo
operator|=
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|createManagedInstance
argument_list|(
name|managedRepositoryConfiguration
argument_list|)
expr_stmt|;
name|repo
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|managedRepositories
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
name|updateRepositoryReferences
argument_list|(
name|getProvider
argument_list|(
name|repoType
argument_list|)
argument_list|,
name|repo
argument_list|,
name|managedRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|replaceOrAddRepositoryConfig
argument_list|(
name|managedRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|replaceOrAddRepositoryConfig
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|oldCfg
init|=
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
name|managedRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|managedRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceOrAddRepositoryConfig
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|oldCfg
init|=
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
name|remoteRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|id
init|=
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedRepositories
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"There exists a managed repository with id "
operator|+
name|id
operator|+
literal|". Could not update with remote repository."
argument_list|)
throw|;
block|}
name|RemoteRepository
name|originRepo
init|=
name|remoteRepositories
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|remoteRepository
argument_list|)
decl_stmt|;
name|RemoteRepositoryConfiguration
name|oldCfg
init|=
literal|null
decl_stmt|;
name|RemoteRepositoryConfiguration
name|newCfg
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|originRepo
operator|!=
literal|null
condition|)
block|{
name|originRepo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|remoteRepository
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|newCfg
operator|=
name|provider
operator|.
name|getRemoteConfiguration
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
name|updateRepositoryReferences
argument_list|(
name|provider
argument_list|,
name|remoteRepository
argument_list|,
name|newCfg
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|oldCfg
operator|=
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|newCfg
argument_list|)
expr_stmt|;
return|return
name|remoteRepository
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Rollback
if|if
condition|(
name|originRepo
operator|!=
literal|null
condition|)
block|{
name|remoteRepositories
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|originRepo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remoteRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|RemoteRepositoryConfiguration
name|cfg
init|=
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|oldCfg
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Error while adding remote repository {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|( )
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a remote repository, or overwrites the repository definition with the same id, if it exists already.      * The modification is saved to the configuration immediately.      *      * @param remoteRepository the remote repository to add      * @throws RepositoryException if an error occurs during configuration save      */
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|RemoteRepository
name|repo
init|=
name|putRepository
argument_list|(
name|remoteRepository
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|getArchivaConfiguration
argument_list|()
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
catch|catch
parameter_list|(
name|RegistryException
decl||
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while saving remote repository {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|( )
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id, if it exists already.      * The configuration is saved immediately.      *      * @param remoteRepositoryConfiguration the repository configuration      * @return the updated or created repository      * @throws RepositoryException if an error occurs, or the configuration is not valid.      */
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|id
init|=
name|remoteRepositoryConfiguration
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|remoteRepositoryConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepository
name|repo
init|=
name|remoteRepositories
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|RemoteRepositoryConfiguration
name|oldCfg
init|=
name|repo
operator|!=
literal|null
condition|?
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|getRemoteConfiguration
argument_list|(
name|repo
argument_list|)
else|:
literal|null
decl_stmt|;
name|repo
operator|=
name|putRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
name|getArchivaConfiguration
argument_list|()
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
decl||
name|RegistryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|oldCfg
operator|!=
literal|null
condition|)
block|{
name|getProvider
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|updateRemoteInstance
argument_list|(
operator|(
name|EditableRemoteRepository
operator|)
name|repo
argument_list|,
name|oldCfg
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Could not save the configuration for repository {}: {}"
argument_list|,
name|id
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save the configuration for repository "
operator|+
name|id
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|repo
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new repository or updates the repository with the same id. The given configuration object is updated, but      * the configuration is not saved.      *      * @param remoteRepositoryConfiguration the new or changed repository configuration      * @param configuration the configuration object      * @return the new or updated repository      * @throws RepositoryException if the configuration cannot be saved or updated      */
specifier|public
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|lock
argument_list|( )
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|id
init|=
name|remoteRepositoryConfiguration
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|RepositoryType
name|repoType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|remoteRepositoryConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteRepository
name|repo
decl_stmt|;
if|if
condition|(
name|remoteRepositories
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|repo
operator|=
name|remoteRepositories
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|instanceof
name|EditableRemoteRepository
condition|)
block|{
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|updateRemoteInstance
argument_list|(
operator|(
name|EditableRemoteRepository
operator|)
name|repo
argument_list|,
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The repository is not editable "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|repo
operator|=
name|getProvider
argument_list|(
name|repoType
argument_list|)
operator|.
name|createRemoteInstance
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
name|repo
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|remoteRepositories
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
name|updateRepositoryReferences
argument_list|(
name|getProvider
argument_list|(
name|repoType
argument_list|)
argument_list|,
name|repo
argument_list|,
name|remoteRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|replaceOrAddRepositoryConfig
argument_list|(
name|remoteRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|( )
operator|.
name|unlock
argument_list|( )
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Repository
name|repo
init|=
name|getRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|removeRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repo
operator|instanceof
name|RemoteRepository
condition|)
block|{
name|removeRepository
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|repo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repo
operator|instanceof
name|ManagedRepository
condition|)
block|{
name|removeRepository
argument_list|(
operator|(
name|ManagedRepository
operator|)
name|repo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type not known: "
operator|+
name|repo
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Removes a managed repository from the registry and configuration, if it exists.      * The change is saved to the configuration immediately.      *      * @param managedRepository the managed repository to remove      * @throws RepositoryException if a error occurs during configuration save      */
specifier|public
name|void
name|removeRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|managedRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|getManagedRepository
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|repo
operator|=
name|managedRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|cfg
init|=
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
name|getArchivaConfiguration
argument_list|()
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RegistryException
decl||
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
comment|// Rollback
name|log
operator|.
name|error
argument_list|(
literal|"Could not save config after repository removal: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|managedRepositories
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save configuration after repository removal: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|managedRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ManagedRepository
name|repo
init|=
name|getManagedRepository
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|repo
operator|=
name|managedRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|ManagedRepositoryConfiguration
name|cfg
init|=
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doRemoveRepo
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|RemoteRepositoryConfiguration
name|cfg
init|=
name|configuration
operator|.
name|findRemoteRepositoryById
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|configuration
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes the remote repository from the registry and configuration.      * The change is saved to the configuration immediately.      *      * @param remoteRepository the remote repository to remove      * @throws RepositoryException if a error occurs during configuration save      */
specifier|public
name|void
name|removeRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|RemoteRepository
name|repo
init|=
name|getRemoteRepository
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|repo
operator|=
name|remoteRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|doRemoveRepo
argument_list|(
name|repo
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|getArchivaConfiguration
argument_list|()
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RegistryException
decl||
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
comment|// Rollback
name|log
operator|.
name|error
argument_list|(
literal|"Could not save config after repository removal: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|remoteRepositories
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not save configuration after repository removal: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|id
init|=
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|RemoteRepository
name|repo
init|=
name|getRemoteRepository
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|repo
operator|=
name|remoteRepositories
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|doRemoveRepo
argument_list|(
name|repo
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Reloads the registry from the configuration.      */
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**      * Resets the indexing context of a given repository.      *      * @param repo      * @throws IndexUpdateFailedException      */
specifier|public
name|void
name|resetIndexingContext
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
if|if
condition|(
name|repo
operator|.
name|hasIndex
argument_list|()
operator|&&
name|repo
operator|instanceof
name|EditableRepository
condition|)
block|{
name|EditableRepository
name|eRepo
init|=
operator|(
name|EditableRepository
operator|)
name|repo
decl_stmt|;
name|ArchivaIndexingContext
name|newCtx
init|=
name|getIndexManager
argument_list|(
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|reset
argument_list|(
name|repo
operator|.
name|getIndexingContext
argument_list|()
argument_list|)
decl_stmt|;
name|eRepo
operator|.
name|setIndexingContext
argument_list|(
name|newCtx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new repository instance with the same settings as this one. The cloned repository is not      * registered or saved to the configuration.      *      * @param repo The origin repository      * @return The cloned repository.      */
specifier|public
name|ManagedRepository
name|clone
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|managedRepositories
operator|.
name|containsKey
argument_list|(
name|newId
argument_list|)
operator|||
name|remoteRepositories
operator|.
name|containsKey
argument_list|(
name|newId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The given id exists already "
operator|+
name|newId
argument_list|)
throw|;
block|}
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ManagedRepositoryConfiguration
name|cfg
init|=
name|provider
operator|.
name|getManagedConfiguration
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|ManagedRepository
name|cloned
init|=
name|provider
operator|.
name|createManagedInstance
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|cloned
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Repository
parameter_list|>
name|Repository
name|clone
parameter_list|(
name|T
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repo
operator|instanceof
name|RemoteRepository
condition|)
block|{
return|return
name|this
operator|.
name|clone
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
if|else if
condition|(
name|repo
operator|instanceof
name|ManagedRepository
condition|)
block|{
return|return
name|this
operator|.
name|clone
argument_list|(
operator|(
name|ManagedRepository
operator|)
name|repo
argument_list|,
name|newId
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"This repository class is not supported "
operator|+
name|repo
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new repository instance with the same settings as this one. The cloned repository is not      * registered or saved to the configuration.      *      * @param repo The origin repository      * @return The cloned repository.      */
specifier|public
name|RemoteRepository
name|clone
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|managedRepositories
operator|.
name|containsKey
argument_list|(
name|newId
argument_list|)
operator|||
name|remoteRepositories
operator|.
name|containsKey
argument_list|(
name|newId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The given id exists already "
operator|+
name|newId
argument_list|)
throw|;
block|}
name|RepositoryProvider
name|provider
init|=
name|getProvider
argument_list|(
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteRepositoryConfiguration
name|cfg
init|=
name|provider
operator|.
name|getRemoteConfiguration
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|RemoteRepository
name|cloned
init|=
name|provider
operator|.
name|createRemoteInstance
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|cloned
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configurationEvent
parameter_list|(
name|ConfigurationEvent
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|RepositoryEventListener
name|listener
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|RepositoryEventListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearListeners
parameter_list|()
block|{
name|this
operator|.
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|raise
parameter_list|(
name|RepositoryEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|IndexCreationEvent
condition|)
block|{
if|if
condition|(
name|managedRepositories
operator|.
name|containsKey
argument_list|(
name|event
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|||
name|remoteRepositories
operator|.
name|containsKey
argument_list|(
name|event
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|EditableRepository
name|repo
init|=
operator|(
name|EditableRepository
operator|)
name|event
operator|.
name|getRepository
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
operator|&&
name|repo
operator|.
name|getIndexingContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ArchivaIndexManager
name|idxmgr
init|=
name|getIndexManager
argument_list|(
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxmgr
operator|!=
literal|null
condition|)
block|{
name|ArchivaIndexingContext
name|newCtx
init|=
name|idxmgr
operator|.
name|move
argument_list|(
name|repo
operator|.
name|getIndexingContext
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setIndexingContext
argument_list|(
name|newCtx
argument_list|)
expr_stmt|;
name|idxmgr
operator|.
name|updateLocalIndexPath
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IndexCreationFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not move index to new directory {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|RepositoryEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|raise
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

