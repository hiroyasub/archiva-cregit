begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Registry for repositories  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryRegistry"
argument_list|)
specifier|public
class|class
name|RepositoryRegistry
block|{
comment|/**      * We inject all repository providers      */
annotation|@
name|Inject
name|List
argument_list|<
name|RepositoryProvider
argument_list|>
name|repositoryProviders
decl_stmt|;
annotation|@
name|Inject
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|managedRepositories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|remoteRepositories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
annotation|@
name|PostConstruct
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|managedRepositories
operator|=
name|getManagedRepositoriesFromConfig
argument_list|()
expr_stmt|;
name|remoteRepositories
operator|=
name|getRemoteRepositoriesFromConfig
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|getProviderMap
parameter_list|()
block|{
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
if|if
condition|(
name|repositoryProviders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RepositoryProvider
name|provider
range|:
name|repositoryProviders
control|)
block|{
for|for
control|(
name|RepositoryType
name|type
range|:
name|provider
operator|.
name|provides
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|getManagedRepositoriesFromConfig
parameter_list|()
block|{
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoConfigs
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getManagedRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|managedRepos
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|managedRepoConfigs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|providerMap
init|=
name|getProviderMap
argument_list|( )
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|repoConfig
range|:
name|managedRepoConfigs
control|)
block|{
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repoConfig
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerMap
operator|.
name|containsKey
argument_list|(
name|repositoryType
argument_list|)
condition|)
block|{
name|managedRepos
operator|.
name|put
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|providerMap
operator|.
name|get
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|createManagedInstance
argument_list|(
name|repoConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|managedRepos
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|getRemoteRepositoriesFromConfig
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteRepositoryConfiguration
argument_list|>
name|remoteRepoConfigs
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|remoteRepos
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|remoteRepoConfigs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|RepositoryProvider
argument_list|>
name|providerMap
init|=
name|getProviderMap
argument_list|( )
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repoConfig
range|:
name|remoteRepoConfigs
control|)
block|{
name|RepositoryType
name|repositoryType
init|=
name|RepositoryType
operator|.
name|valueOf
argument_list|(
name|repoConfig
operator|.
name|getType
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerMap
operator|.
name|containsKey
argument_list|(
name|repositoryType
argument_list|)
condition|)
block|{
name|remoteRepos
operator|.
name|put
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|providerMap
operator|.
name|get
argument_list|(
name|repositoryType
argument_list|)
operator|.
name|createRemoteInstance
argument_list|(
name|repoConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|remoteRepos
return|;
block|}
specifier|private
name|ArchivaConfiguration
name|getArchivaConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|archivaConfiguration
return|;
block|}
specifier|public
name|List
argument_list|<
name|Repository
argument_list|>
name|getRepositories
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Repository
argument_list|>
name|li
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(  )
decl_stmt|;
name|li
operator|.
name|addAll
argument_list|(
name|managedRepositories
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|li
operator|.
name|addAll
argument_list|(
name|remoteRepositories
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|li
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|(
name|managedRepositories
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|getRemoteRepositories
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|(
name|remoteRepositories
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|RemoteRepository
name|getRemoteRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

