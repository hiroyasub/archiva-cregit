begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ProjectReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|CachedFailuresPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ChecksumPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|ReleasesPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|SnapshotsPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|AbstractRepositoryLayerTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|MockConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|DetailedDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * MetadataToolsTest  *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|MetadataToolsTest
extends|extends
name|AbstractRepositoryLayerTestCase
block|{
specifier|private
name|MetadataTools
name|tools
decl_stmt|;
specifier|protected
name|MockConfiguration
name|config
decl_stmt|;
specifier|public
name|void
name|testGatherSnapshotVersionsA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSnapshotVersions
argument_list|(
literal|"snap_shots_a"
argument_list|,
literal|"1.0-alpha-11-SNAPSHOT"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-alpha-11-SNAPSHOT"
block|,
literal|"1.0-alpha-11-20070221.194724-2"
block|,
literal|"1.0-alpha-11-20070302.212723-3"
block|,
literal|"1.0-alpha-11-20070303.152828-4"
block|,
literal|"1.0-alpha-11-20070305.215149-5"
block|,
literal|"1.0-alpha-11-20070307.170909-6"
block|,
literal|"1.0-alpha-11-20070314.211405-9"
block|,
literal|"1.0-alpha-11-20070316.175232-11"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGatherSnapshotVersionsAWithProxies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These proxied repositories do not need to exist for the purposes of this unit test,
comment|// just the repository ids are important.
name|createProxyConnector
argument_list|(
literal|"test-repo"
argument_list|,
literal|"apache-snapshots"
argument_list|)
expr_stmt|;
name|createProxyConnector
argument_list|(
literal|"test-repo"
argument_list|,
literal|"internal-snapshots"
argument_list|)
expr_stmt|;
name|createProxyConnector
argument_list|(
literal|"test-repo"
argument_list|,
literal|"snapshots.codehaus.org"
argument_list|)
expr_stmt|;
name|assertSnapshotVersions
argument_list|(
literal|"snap_shots_a"
argument_list|,
literal|"1.0-alpha-11-SNAPSHOT"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-alpha-11-SNAPSHOT"
block|,
literal|"1.0-alpha-11-20070221.194724-2"
block|,
literal|"1.0-alpha-11-20070302.212723-3"
block|,
literal|"1.0-alpha-11-20070303.152828-4"
block|,
literal|"1.0-alpha-11-20070305.215149-5"
block|,
literal|"1.0-alpha-11-20070307.170909-6"
block|,
literal|"1.0-alpha-11-20070314.211405-9"
block|,
literal|"1.0-alpha-11-20070315.033030-10"
comment|/* Arrives in via snapshots.codehaus.org proxy */
block|,
literal|"1.0-alpha-11-20070316.175232-11"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRepositorySpecificName
parameter_list|()
throws|throws
name|Exception
block|{
name|RemoteRepositoryContent
name|repoJavaNet
init|=
name|createRemoteRepositoryContent
argument_list|(
literal|"maven2-repository.dev.java.net"
argument_list|,
literal|"Java.net Repository for Maven 2"
argument_list|,
literal|"http://download.java.net/maven/2/"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|RemoteRepositoryContent
name|repoCentral
init|=
name|createRemoteRepositoryContent
argument_list|(
literal|"central"
argument_list|,
literal|"Central Global Repository"
argument_list|,
literal|"http://repo1.maven.org/maven2/"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|String
name|convertedName
init|=
name|tools
operator|.
name|getRepositorySpecificName
argument_list|(
name|repoJavaNet
argument_list|,
literal|"commons-lang/commons-lang/maven-metadata.xml"
argument_list|)
decl_stmt|;
name|assertMetadataPath
argument_list|(
literal|"commons-lang/commons-lang/maven-metadata-maven2-repository.dev.java.net.xml"
argument_list|,
name|convertedName
argument_list|)
expr_stmt|;
name|convertedName
operator|=
name|tools
operator|.
name|getRepositorySpecificName
argument_list|(
name|repoCentral
argument_list|,
literal|"commons-lang/commons-lang/maven-metadata.xml"
argument_list|)
expr_stmt|;
name|assertMetadataPath
argument_list|(
literal|"commons-lang/commons-lang/maven-metadata-central.xml"
argument_list|,
name|convertedName
argument_list|)
expr_stmt|;
block|}
comment|// TODO: replace with group tests
comment|//    public void testUpdateProjectBadArtifact()
comment|//        throws Exception
comment|//    {
comment|//        try
comment|//        {
comment|//            assertUpdatedProjectMetadata( "bad_artifact", null );
comment|//            fail( "Should have thrown an IOException on a bad artifact." );
comment|//        }
comment|//        catch ( IOException e )
comment|//        {
comment|//            // Expected path
comment|//        }
comment|//    }
specifier|public
name|void
name|testUpdateProjectNonExistingVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRepositoryContent
name|testRepo
init|=
name|createTestRepoContent
argument_list|()
decl_stmt|;
name|ProjectReference
name|reference
init|=
operator|new
name|ProjectReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva.metadata.tests"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
literal|"missing_artifact"
argument_list|)
expr_stmt|;
name|prepTestRepo
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
comment|// check metadata prior to update -- should contain the non-existing artifact version
name|assertProjectMetadata
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|,
literal|"missing_artifact"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-SNAPSHOT"
block|,
literal|"1.1-SNAPSHOT"
block|,
literal|"1.2-SNAPSHOT"
block|}
argument_list|,
literal|"1.2-SNAPSHOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tools
operator|.
name|updateMetadata
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
comment|// metadata should not contain the non-existing artifact version -- 1.1-SNAPSHOT
name|assertProjectMetadata
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|,
literal|"missing_artifact"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-SNAPSHOT"
block|,
literal|"1.2-SNAPSHOT"
block|}
argument_list|,
literal|"1.2-SNAPSHOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectMissingMultipleVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedProjectMetadata
argument_list|(
literal|"missing_metadata_b"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1.0.1"
block|,
literal|"2.0"
block|,
literal|"2.0.1"
block|,
literal|"2.0-20070821-dev"
block|}
argument_list|,
literal|"2.0-20070821-dev"
argument_list|,
literal|"2.0-20070821-dev"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectMissingMultipleVersionsWithProxies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Attach the (bogus) proxies to the managed repo.
comment|// These proxied repositories do not need to exist for the purposes of this unit test,
comment|// just the repository ids are important.
name|createProxyConnector
argument_list|(
literal|"test-repo"
argument_list|,
literal|"central"
argument_list|)
expr_stmt|;
name|createProxyConnector
argument_list|(
literal|"test-repo"
argument_list|,
literal|"java.net"
argument_list|)
expr_stmt|;
name|assertUpdatedProjectMetadata
argument_list|(
literal|"proxied_multi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0-spec"
comment|/* in java.net */
block|,
literal|"1.0"
comment|/* in managed, and central */
block|,
literal|"1.0.1"
comment|/* in central */
block|,
literal|"1.1"
comment|/* in managed */
block|,
literal|"2.0-proposal-beta"
comment|/* in java.net */
block|,
literal|"2.0-spec"
comment|/* in java.net */
block|,
literal|"2.0"
comment|/* in central, and java.net */
block|,
literal|"2.0.1"
comment|/* in java.net */
block|,
literal|"2.1"
comment|/* in managed */
block|,
literal|"3.0"
comment|/* in central */
block|,
literal|"3.1"
comment|/* in central */
block|}
argument_list|,
literal|"3.1"
argument_list|,
literal|"3.1"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectSimpleYetIncomplete
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedProjectMetadata
argument_list|(
literal|"incomplete_metadata_a"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|}
argument_list|,
literal|"1.0"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectSimpleYetMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedProjectMetadata
argument_list|(
literal|"missing_metadata_a"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|}
argument_list|,
literal|"1.0"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateVersionSimple10
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedReleaseVersionMetadata
argument_list|(
literal|"missing_metadata_a"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateVersionSimple20
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedReleaseVersionMetadata
argument_list|(
literal|"missing_metadata_b"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateVersionSimple20NotSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedReleaseVersionMetadata
argument_list|(
literal|"missing_metadata_b"
argument_list|,
literal|"2.0-20070821-dev"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateVersionSnapshotA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertUpdatedSnapshotVersionMetadata
argument_list|(
literal|"snap_shots_a"
argument_list|,
literal|"1.0-alpha-11-SNAPSHOT"
argument_list|,
literal|"20070316"
argument_list|,
literal|"175232"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToPathFromVersionReference
parameter_list|()
block|{
name|VersionedReference
name|reference
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"com.foo"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
literal|"foo-tool"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"com/foo/foo-tool/1.0/maven-metadata.xml"
argument_list|,
name|tools
operator|.
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToPathFromProjectReference
parameter_list|()
block|{
name|ProjectReference
name|reference
init|=
operator|new
name|ProjectReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"com.foo"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
literal|"foo-tool"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"com/foo/foo-tool/maven-metadata.xml"
argument_list|,
name|tools
operator|.
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToProjectReferenceFooTools
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|assertProjectReference
argument_list|(
literal|"com.foo"
argument_list|,
literal|"foo-tools"
argument_list|,
literal|"com/foo/foo-tools/maven-metadata.xml"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToProjectReferenceAReallyLongPath
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|String
name|groupId
init|=
literal|"net.i.have.a.really.long.path.just.for.the.hell.of.it"
decl_stmt|;
name|String
name|artifactId
init|=
literal|"a"
decl_stmt|;
name|String
name|path
init|=
literal|"net/i/have/a/really/long/path/just/for/the/hell/of/it/a/maven-metadata.xml"
decl_stmt|;
name|assertProjectReference
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToProjectReferenceCommonsLang
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|String
name|groupId
init|=
literal|"commons-lang"
decl_stmt|;
name|String
name|artifactId
init|=
literal|"commons-lang"
decl_stmt|;
name|String
name|path
init|=
literal|"commons-lang/commons-lang/maven-metadata.xml"
decl_stmt|;
name|assertProjectReference
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertProjectReference
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|ProjectReference
name|reference
init|=
name|tools
operator|.
name|toProjectReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Reference should not be null."
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ProjectReference.groupId"
argument_list|,
name|groupId
argument_list|,
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ProjectReference.artifactId"
argument_list|,
name|artifactId
argument_list|,
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToVersionedReferenceFooTool
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|String
name|groupId
init|=
literal|"com.foo"
decl_stmt|;
name|String
name|artifactId
init|=
literal|"foo-tool"
decl_stmt|;
name|String
name|version
init|=
literal|"1.0"
decl_stmt|;
name|String
name|path
init|=
literal|"com/foo/foo-tool/1.0/maven-metadata.xml"
decl_stmt|;
name|assertVersionedReference
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToVersionedReferenceAReallyLongPath
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|String
name|groupId
init|=
literal|"net.i.have.a.really.long.path.just.for.the.hell.of.it"
decl_stmt|;
name|String
name|artifactId
init|=
literal|"a"
decl_stmt|;
name|String
name|version
init|=
literal|"1.1-alpha-1"
decl_stmt|;
name|String
name|path
init|=
literal|"net/i/have/a/really/long/path/just/for/the/hell/of/it/a/1.1-alpha-1/maven-metadata.xml"
decl_stmt|;
name|assertVersionedReference
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToVersionedReferenceCommonsLang
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|String
name|groupId
init|=
literal|"commons-lang"
decl_stmt|;
name|String
name|artifactId
init|=
literal|"commons-lang"
decl_stmt|;
name|String
name|version
init|=
literal|"2.1"
decl_stmt|;
name|String
name|path
init|=
literal|"commons-lang/commons-lang/2.1/maven-metadata.xml"
decl_stmt|;
name|assertVersionedReference
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToVersionedReferenceSnapshot
parameter_list|()
throws|throws
name|RepositoryMetadataException
block|{
name|String
name|groupId
init|=
literal|"com.foo"
decl_stmt|;
name|String
name|artifactId
init|=
literal|"foo-connector"
decl_stmt|;
name|String
name|version
init|=
literal|"2.1-SNAPSHOT"
decl_stmt|;
name|String
name|path
init|=
literal|"com/foo/foo-connector/2.1-SNAPSHOT/maven-metadata.xml"
decl_stmt|;
name|assertVersionedReference
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertVersionedReference
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryMetadataException
block|{
name|VersionedReference
name|reference
init|=
name|tools
operator|.
name|toVersionedReference
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Reference should not be null."
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VersionedReference.groupId"
argument_list|,
name|groupId
argument_list|,
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VersionedReference.artifactId"
argument_list|,
name|artifactId
argument_list|,
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VersionedReference.version"
argument_list|,
name|version
argument_list|,
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSnapshotVersions
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
index|[]
name|expectedVersions
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|repoRootDir
init|=
operator|new
name|File
argument_list|(
literal|"src/test/repositories/metadata-repository"
argument_list|)
decl_stmt|;
name|VersionedReference
name|reference
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva.metadata.tests"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repo
init|=
name|createRepository
argument_list|(
literal|"test-repo"
argument_list|,
literal|"Test Repository: "
operator|+
name|getName
argument_list|()
argument_list|,
name|repoRootDir
argument_list|)
decl_stmt|;
name|ManagedRepositoryContent
name|repoContent
init|=
operator|(
name|ManagedRepositoryContent
operator|)
name|lookup
argument_list|(
name|ManagedRepositoryContent
operator|.
name|class
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|repoContent
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|testedVersionSet
init|=
name|tools
operator|.
name|gatherSnapshotVersions
argument_list|(
name|repoContent
argument_list|,
name|reference
argument_list|)
decl_stmt|;
comment|// Sort the list (for asserts)
name|List
argument_list|<
name|String
argument_list|>
name|testedVersions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testedVersions
operator|.
name|addAll
argument_list|(
name|testedVersionSet
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|testedVersions
argument_list|,
operator|new
name|VersionComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test the expected array of versions, to the actual tested versions
name|assertEquals
argument_list|(
literal|"Assert Snapshot Versions: length/size"
argument_list|,
name|expectedVersions
operator|.
name|length
argument_list|,
name|testedVersions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedVersions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|actualVersion
init|=
name|testedVersions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Snapshot Versions["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|expectedVersions
index|[
name|i
index|]
argument_list|,
name|actualVersion
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertMetadata
parameter_list|(
name|String
name|expectedMetadata
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|ProjectReference
name|reference
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|tools
operator|.
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|actualMetadata
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|metadataFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DetailedDiff
name|detailedDiff
init|=
operator|new
name|DetailedDiff
argument_list|(
operator|new
name|Diff
argument_list|(
name|expectedMetadata
argument_list|,
name|actualMetadata
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|detailedDiff
operator|.
name|similar
argument_list|()
condition|)
block|{
comment|// If it isn't similar, dump the difference.
name|assertEquals
argument_list|(
name|expectedMetadata
argument_list|,
name|actualMetadata
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertMetadata
parameter_list|(
name|String
name|expectedMetadata
parameter_list|,
name|ManagedRepositoryContent
name|repository
parameter_list|,
name|VersionedReference
name|reference
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|tools
operator|.
name|toPath
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|actualMetadata
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|metadataFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DetailedDiff
name|detailedDiff
init|=
operator|new
name|DetailedDiff
argument_list|(
operator|new
name|Diff
argument_list|(
name|expectedMetadata
argument_list|,
name|actualMetadata
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|detailedDiff
operator|.
name|similar
argument_list|()
condition|)
block|{
comment|// If it isn't similar, dump the difference.
name|assertEquals
argument_list|(
name|expectedMetadata
argument_list|,
name|actualMetadata
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertMetadataPath
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Repository Specific Metadata Path"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertUpdatedProjectMetadata
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
index|[]
name|expectedVersions
parameter_list|,
name|String
name|latestVersion
parameter_list|,
name|String
name|releaseVersion
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagedRepositoryContent
name|testRepo
init|=
name|createTestRepoContent
argument_list|()
decl_stmt|;
name|ProjectReference
name|reference
init|=
operator|new
name|ProjectReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva.metadata.tests"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|prepTestRepo
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|tools
operator|.
name|updateMetadata
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<metadata>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
comment|// buf.append( "<version>1.0</version>\n" );
if|if
condition|(
name|expectedVersions
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<versioning>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestVersion
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<latest>"
argument_list|)
operator|.
name|append
argument_list|(
name|latestVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|"</latest>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|releaseVersion
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<release>"
argument_list|)
operator|.
name|append
argument_list|(
name|releaseVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|"</release>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<versions>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedVersions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<version>"
argument_list|)
operator|.
name|append
argument_list|(
name|expectedVersions
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</versions>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</versioning>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</metadata>"
argument_list|)
expr_stmt|;
name|assertMetadata
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertProjectMetadata
parameter_list|(
name|ManagedRepositoryContent
name|testRepo
parameter_list|,
name|ProjectReference
name|reference
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
index|[]
name|expectedVersions
parameter_list|,
name|String
name|latestVersion
parameter_list|,
name|String
name|releaseVersion
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<metadata>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedVersions
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<versioning>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestVersion
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<latest>"
argument_list|)
operator|.
name|append
argument_list|(
name|latestVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|"</latest>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|releaseVersion
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<release>"
argument_list|)
operator|.
name|append
argument_list|(
name|releaseVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|"</release>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<versions>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedVersions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<version>"
argument_list|)
operator|.
name|append
argument_list|(
name|expectedVersions
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</versions>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</versioning>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</metadata>"
argument_list|)
expr_stmt|;
name|assertMetadata
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertUpdatedReleaseVersionMetadata
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagedRepositoryContent
name|testRepo
init|=
name|createTestRepoContent
argument_list|()
decl_stmt|;
name|VersionedReference
name|reference
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva.metadata.tests"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|prepTestRepo
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|tools
operator|.
name|updateMetadata
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<metadata>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<version>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</metadata>"
argument_list|)
expr_stmt|;
name|assertMetadata
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertUpdatedSnapshotVersionMetadata
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|expectedDate
parameter_list|,
name|String
name|expectedTime
parameter_list|,
name|String
name|expectedBuildNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagedRepositoryContent
name|testRepo
init|=
name|createTestRepoContent
argument_list|()
decl_stmt|;
name|VersionedReference
name|reference
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva.metadata.tests"
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|prepTestRepo
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|tools
operator|.
name|updateMetadata
argument_list|(
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<metadata>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<version>"
argument_list|)
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<versioning>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<snapshot>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<buildNumber>"
argument_list|)
operator|.
name|append
argument_list|(
name|expectedBuildNumber
argument_list|)
operator|.
name|append
argument_list|(
literal|"</buildNumber>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<timestamp>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|expectedDate
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|expectedTime
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</timestamp>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</snapshot>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<lastUpdated>"
argument_list|)
operator|.
name|append
argument_list|(
name|expectedDate
argument_list|)
operator|.
name|append
argument_list|(
name|expectedTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"</lastUpdated>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</versioning>\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</metadata>"
argument_list|)
expr_stmt|;
name|assertMetadata
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createProxyConnector
parameter_list|(
name|String
name|sourceRepoId
parameter_list|,
name|String
name|targetRepoId
parameter_list|)
block|{
name|ProxyConnectorConfiguration
name|connectorConfig
init|=
operator|new
name|ProxyConnectorConfiguration
argument_list|()
decl_stmt|;
name|connectorConfig
operator|.
name|setSourceRepoId
argument_list|(
name|sourceRepoId
argument_list|)
expr_stmt|;
name|connectorConfig
operator|.
name|setTargetRepoId
argument_list|(
name|targetRepoId
argument_list|)
expr_stmt|;
name|connectorConfig
operator|.
name|addPolicy
argument_list|(
name|ProxyConnectorConfiguration
operator|.
name|POLICY_CHECKSUM
argument_list|,
name|ChecksumPolicy
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|connectorConfig
operator|.
name|addPolicy
argument_list|(
name|ProxyConnectorConfiguration
operator|.
name|POLICY_RELEASES
argument_list|,
name|ReleasesPolicy
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|connectorConfig
operator|.
name|addPolicy
argument_list|(
name|ProxyConnectorConfiguration
operator|.
name|POLICY_SNAPSHOTS
argument_list|,
name|SnapshotsPolicy
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|connectorConfig
operator|.
name|addPolicy
argument_list|(
name|ProxyConnectorConfiguration
operator|.
name|POLICY_CACHE_FAILURES
argument_list|,
name|CachedFailuresPolicy
operator|.
name|NO
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProxyConnectors
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|addProxyConnector
argument_list|(
name|connectorConfig
argument_list|)
expr_stmt|;
comment|// Proper Triggering ...
name|String
name|prefix
init|=
literal|"proxyConnectors.proxyConnector("
operator|+
name|count
operator|+
literal|")"
decl_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".sourceRepoId"
argument_list|,
name|connectorConfig
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".targetRepoId"
argument_list|,
name|connectorConfig
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".proxyId"
argument_list|,
name|connectorConfig
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".policies.releases"
argument_list|,
name|connectorConfig
operator|.
name|getPolicy
argument_list|(
literal|"releases"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".policies.checksum"
argument_list|,
name|connectorConfig
operator|.
name|getPolicy
argument_list|(
literal|"checksum"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".policies.snapshots"
argument_list|,
name|connectorConfig
operator|.
name|getPolicy
argument_list|(
literal|"snapshots"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|triggerChange
argument_list|(
name|prefix
operator|+
literal|".policies.cache-failures"
argument_list|,
name|connectorConfig
operator|.
name|getPolicy
argument_list|(
literal|"cache-failures"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ManagedRepositoryContent
name|createTestRepoContent
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|repoRoot
init|=
operator|new
name|File
argument_list|(
literal|"target/metadata-tests/"
operator|+
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repoRoot
argument_list|)
expr_stmt|;
block|}
name|repoRoot
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|createRepository
argument_list|(
literal|"test-repo"
argument_list|,
literal|"Test Repository: "
operator|+
name|getName
argument_list|()
argument_list|,
name|repoRoot
argument_list|)
decl_stmt|;
name|ManagedRepositoryContent
name|repoContent
init|=
operator|(
name|ManagedRepositoryContent
operator|)
name|lookup
argument_list|(
name|ManagedRepositoryContent
operator|.
name|class
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|repoContent
operator|.
name|setRepository
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
return|return
name|repoContent
return|;
block|}
specifier|private
name|void
name|prepTestRepo
parameter_list|(
name|ManagedRepositoryContent
name|repo
parameter_list|,
name|ProjectReference
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|groupDir
init|=
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|,
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|groupDir
operator|+
literal|"/"
operator|+
name|reference
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|File
name|srcRepoDir
init|=
operator|new
name|File
argument_list|(
literal|"src/test/repositories/metadata-repository"
argument_list|)
decl_stmt|;
name|File
name|srcDir
init|=
operator|new
name|File
argument_list|(
name|srcRepoDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
name|repo
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Source Dir exists: "
operator|+
name|srcDir
argument_list|,
name|srcDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|destDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|srcDir
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepTestRepo
parameter_list|(
name|ManagedRepositoryContent
name|repo
parameter_list|,
name|VersionedReference
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|ProjectReference
name|projectRef
init|=
operator|new
name|ProjectReference
argument_list|()
decl_stmt|;
name|projectRef
operator|.
name|setGroupId
argument_list|(
name|reference
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|projectRef
operator|.
name|setArtifactId
argument_list|(
name|reference
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|prepTestRepo
argument_list|(
name|repo
argument_list|,
name|projectRef
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|config
operator|=
operator|(
name|MockConfiguration
operator|)
name|lookup
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"mock"
argument_list|)
expr_stmt|;
name|tools
operator|=
operator|(
name|MetadataTools
operator|)
name|lookup
argument_list|(
name|MetadataTools
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

