begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FilesystemStorageTest
block|{
specifier|private
name|FilesystemStorage
name|fsStorage
decl_stmt|;
specifier|private
name|FilesystemAsset
name|file1Asset
decl_stmt|;
specifier|private
name|FilesystemAsset
name|dir1Asset
decl_stmt|;
specifier|private
name|Path
name|baseDir
decl_stmt|;
specifier|private
name|Path
name|file1
decl_stmt|;
specifier|private
name|Path
name|dir1
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|baseDir
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"FsStorageTest"
argument_list|)
expr_stmt|;
name|DefaultFileLockManager
name|fl
init|=
operator|new
name|DefaultFileLockManager
argument_list|()
decl_stmt|;
name|fsStorage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|baseDir
argument_list|,
name|fl
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir1"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir2"
argument_list|)
argument_list|)
expr_stmt|;
name|file1
operator|=
name|Files
operator|.
name|createFile
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir1/testfile1.dat"
argument_list|)
argument_list|)
expr_stmt|;
name|dir1
operator|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir1/testdir"
argument_list|)
argument_list|)
expr_stmt|;
name|file1Asset
operator|=
operator|new
name|FilesystemAsset
argument_list|(
literal|"/dir1/testfile1.dat"
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|dir1Asset
operator|=
operator|new
name|FilesystemAsset
argument_list|(
literal|"/dir1/testdir"
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|StringResult
block|{
specifier|public
name|String
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
name|String
name|data
decl_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|consumeData
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file1
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"abcdefghijkl"
argument_list|,
name|os
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
name|StringResult
name|result
init|=
operator|new
name|StringResult
argument_list|()
decl_stmt|;
name|fsStorage
operator|.
name|consumeData
argument_list|(
name|file1Asset
argument_list|,
name|is
lambda|->
name|consume
argument_list|(
name|is
argument_list|,
name|result
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcdefghijkl"
argument_list|,
name|result
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|consume
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|StringResult
name|result
parameter_list|)
block|{
try|try
block|{
name|result
operator|.
name|setData
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAsset
parameter_list|()
block|{
name|StorageAsset
name|asset
init|=
name|fsStorage
operator|.
name|getAsset
argument_list|(
literal|"/dir1/testfile1.dat"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1
argument_list|,
name|asset
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addAsset
parameter_list|()
block|{
name|StorageAsset
name|newAsset
init|=
name|fsStorage
operator|.
name|addAsset
argument_list|(
literal|"dir2/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newAsset
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newAsset
operator|.
name|isContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newAsset
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|StorageAsset
name|newDirAsset
init|=
name|fsStorage
operator|.
name|addAsset
argument_list|(
literal|"/dir2/testdir2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newDirAsset
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newDirAsset
operator|.
name|isContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newDirAsset
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeAsset
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|fsStorage
operator|.
name|removeAsset
argument_list|(
name|file1Asset
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|fsStorage
operator|.
name|removeAsset
argument_list|(
name|dir1Asset
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveAsset
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|newFile
init|=
literal|null
decl_stmt|;
name|Path
name|newDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file1
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"testakdkkdkdkdk"
argument_list|,
name|os
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
name|long
name|fileSize
init|=
name|Files
operator|.
name|size
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|fsStorage
operator|.
name|moveAsset
argument_list|(
name|file1Asset
argument_list|,
literal|"/dir2/testfile2.dat"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|newFile
operator|=
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir2/testfile2.dat"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|Files
operator|.
name|size
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|newDir
operator|=
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir2/testdir2"
argument_list|)
expr_stmt|;
name|fsStorage
operator|.
name|moveAsset
argument_list|(
name|dir1Asset
argument_list|,
literal|"dir2/testdir2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|newDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newFile
operator|!=
literal|null
condition|)
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|newDir
operator|!=
literal|null
condition|)
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyAsset
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|newFile
init|=
literal|null
decl_stmt|;
name|Path
name|newDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file1
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"testakdkkdkdkdk"
argument_list|,
name|os
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
name|long
name|fileSize
init|=
name|Files
operator|.
name|size
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|fsStorage
operator|.
name|copyAsset
argument_list|(
name|file1Asset
argument_list|,
literal|"/dir2/testfile2.dat"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|Files
operator|.
name|size
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|newFile
operator|=
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir2/testfile2.dat"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|Files
operator|.
name|size
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|newDir
operator|=
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"dir2/testdir2"
argument_list|)
expr_stmt|;
name|fsStorage
operator|.
name|copyAsset
argument_list|(
name|dir1Asset
argument_list|,
literal|"dir2/testdir2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|newDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newFile
operator|!=
literal|null
condition|)
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|newDir
operator|!=
literal|null
condition|)
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

