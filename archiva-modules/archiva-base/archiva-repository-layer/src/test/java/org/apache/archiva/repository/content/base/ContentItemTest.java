begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|OptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|mock
operator|.
name|ManagedRepositoryContentMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|FilesystemStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ContentItemTest
block|{
specifier|protected
name|ManagedRepositoryContentMock
name|repository
decl_stmt|;
specifier|protected
name|FilesystemStorage
name|storage
decl_stmt|;
specifier|protected
name|StorageAsset
name|asset
decl_stmt|;
annotation|@
name|BeforeEach
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|repository
operator|=
operator|new
name|ManagedRepositoryContentMock
argument_list|( )
expr_stmt|;
name|this
operator|.
name|storage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target"
argument_list|)
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|( )
argument_list|)
expr_stmt|;
name|this
operator|.
name|asset
operator|=
name|storage
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|OptBuilder
name|getBuilder
parameter_list|()
function_decl|;
annotation|@
name|Test
name|void
name|testWithAttribute
parameter_list|()
block|{
name|ContentItem
name|test
init|=
name|getBuilder
argument_list|( )
operator|.
name|withAttribute
argument_list|(
literal|"testkey1"
argument_list|,
literal|"testvalue1"
argument_list|)
operator|.
name|withAttribute
argument_list|(
literal|"testkey2"
argument_list|,
literal|"testvalue2"
argument_list|)
operator|.
name|build
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
operator|.
name|getAttributes
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|test
operator|.
name|getAttributes
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testvalue1"
argument_list|,
name|test
operator|.
name|getAttribute
argument_list|(
literal|"testkey1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testvalue2"
argument_list|,
name|test
operator|.
name|getAttribute
argument_list|(
literal|"testkey2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getAttribute
argument_list|(
literal|"key123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

