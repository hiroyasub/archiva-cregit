begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|scanner
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|InvalidRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|KnownRepositoryContentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|AbstractRepositoryLayerTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * RepositoryContentConsumersTest  *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryContentConsumersTest
extends|extends
name|AbstractRepositoryLayerTestCase
block|{
specifier|private
name|RepositoryContentConsumers
name|lookupRepositoryConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerUtil
init|=
operator|(
name|RepositoryContentConsumers
operator|)
name|lookup
argument_list|(
name|RepositoryContentConsumers
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"RepositoryContentConsumers should not be null."
argument_list|,
name|consumerUtil
argument_list|)
expr_stmt|;
return|return
name|consumerUtil
return|;
block|}
specifier|public
name|void
name|testGetSelectedKnownIds
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|String
name|expectedKnownIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-artifact"
block|,
literal|"create-missing-checksums"
block|,
literal|"update-db-repository-metadata"
block|,
literal|"validate-checksum"
block|,
literal|"validate-signature"
block|,
literal|"index-content"
block|,
literal|"auto-remove"
block|,
literal|"auto-rename"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|knownConsumers
init|=
name|consumerutil
operator|.
name|getSelectedKnownConsumerIds
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known Consumer IDs should not be null"
argument_list|,
name|knownConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known Consumer IDs.size"
argument_list|,
name|expectedKnownIds
operator|.
name|length
argument_list|,
name|knownConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedKnownIds
control|)
block|{
name|assertTrue
argument_list|(
literal|"Known id ["
operator|+
name|expectedId
operator|+
literal|"] exists."
argument_list|,
name|knownConsumers
operator|.
name|contains
argument_list|(
name|expectedId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetSelectedInvalidIds
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|String
name|expectedInvalidIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-bad-content"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|invalidConsumers
init|=
name|consumerutil
operator|.
name|getSelectedInvalidConsumerIds
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Invalid Consumer IDs should not be null"
argument_list|,
name|invalidConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Consumer IDs.size"
argument_list|,
name|expectedInvalidIds
operator|.
name|length
argument_list|,
name|invalidConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedInvalidIds
control|)
block|{
name|assertTrue
argument_list|(
literal|"Invalid id ["
operator|+
name|expectedId
operator|+
literal|"] exists."
argument_list|,
name|invalidConsumers
operator|.
name|contains
argument_list|(
name|expectedId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetSelectedKnownConsumerMap
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|String
name|expectedSelectedKnownIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-artifact"
block|,
literal|"create-missing-checksums"
block|,
literal|"update-db-repository-metadata"
block|,
literal|"validate-checksum"
block|,
literal|"index-content"
block|,
literal|"auto-remove"
block|,
literal|"auto-rename"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumerMap
init|=
name|consumerutil
operator|.
name|getSelectedKnownConsumersMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known Consumer Map should not be null"
argument_list|,
name|knownConsumerMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known Consumer Map.size"
argument_list|,
name|expectedSelectedKnownIds
operator|.
name|length
argument_list|,
name|knownConsumerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedSelectedKnownIds
control|)
block|{
name|KnownRepositoryContentConsumer
name|consumer
init|=
name|knownConsumerMap
operator|.
name|get
argument_list|(
name|expectedId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"] should not be null."
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"].id"
argument_list|,
name|expectedId
argument_list|,
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetSelectedInvalidConsumerMap
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|String
name|expectedSelectedInvalidIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-bad-content"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumerMap
init|=
name|consumerutil
operator|.
name|getSelectedInvalidConsumersMap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Invalid Consumer Map should not be null"
argument_list|,
name|invalidConsumerMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Consumer Map.size"
argument_list|,
name|expectedSelectedInvalidIds
operator|.
name|length
argument_list|,
name|invalidConsumerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedId
range|:
name|expectedSelectedInvalidIds
control|)
block|{
name|InvalidRepositoryContentConsumer
name|consumer
init|=
name|invalidConsumerMap
operator|.
name|get
argument_list|(
name|expectedId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"] should not be null."
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Known["
operator|+
name|expectedId
operator|+
literal|"].id"
argument_list|,
name|expectedId
argument_list|,
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetAvailableKnownList
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|String
name|expectedKnownIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-artifact"
block|,
literal|"create-missing-checksums"
block|,
literal|"update-db-repository-metadata"
block|,
literal|"validate-checksum"
block|,
literal|"index-content"
block|,
literal|"auto-remove"
block|,
literal|"auto-rename"
block|,
literal|"available-but-unselected"
block|}
decl_stmt|;
name|List
argument_list|<
name|KnownRepositoryContentConsumer
argument_list|>
name|knownConsumers
init|=
name|consumerutil
operator|.
name|getAvailableKnownConsumers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known consumers should not be null."
argument_list|,
name|knownConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"known consumers"
argument_list|,
name|expectedKnownIds
operator|.
name|length
argument_list|,
name|knownConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedKnownIds
argument_list|)
decl_stmt|;
for|for
control|(
name|KnownRepositoryContentConsumer
name|consumer
range|:
name|knownConsumers
control|)
block|{
name|assertTrue
argument_list|(
literal|"Consumer ["
operator|+
name|consumer
operator|.
name|getId
argument_list|()
operator|+
literal|"] returned by .getAvailableKnownConsumers() is unexpected."
argument_list|,
name|expectedIds
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetAvailableInvalidList
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryContentConsumers
name|consumerutil
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|String
name|expectedInvalidIds
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"update-db-bad-content"
block|,
literal|"move-to-trash-then-notify"
block|}
decl_stmt|;
name|List
argument_list|<
name|InvalidRepositoryContentConsumer
argument_list|>
name|invalidConsumers
init|=
name|consumerutil
operator|.
name|getAvailableInvalidConsumers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"invalid consumers should not be null."
argument_list|,
name|invalidConsumers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"invalid consumers"
argument_list|,
name|expectedInvalidIds
operator|.
name|length
argument_list|,
name|invalidConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedInvalidIds
argument_list|)
decl_stmt|;
for|for
control|(
name|InvalidRepositoryContentConsumer
name|consumer
range|:
name|invalidConsumers
control|)
block|{
name|assertTrue
argument_list|(
literal|"Consumer ["
operator|+
name|consumer
operator|.
name|getId
argument_list|()
operator|+
literal|"] returned by .getAvailableInvalidConsumers() is unexpected."
argument_list|,
name|expectedIds
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|MockControl
name|knownControl
init|=
name|MockControl
operator|.
name|createNiceControl
argument_list|(
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|RepositoryContentConsumers
name|consumers
init|=
name|lookupRepositoryConsumers
argument_list|()
decl_stmt|;
name|KnownRepositoryContentConsumer
name|selectedKnownConsumer
init|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|knownControl
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|KnownRepositoryContentConsumer
name|unselectedKnownConsumer
init|=
operator|(
name|KnownRepositoryContentConsumer
operator|)
name|MockControl
operator|.
name|createNiceControl
argument_list|(
name|KnownRepositoryContentConsumer
operator|.
name|class
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|setAvailableKnownConsumers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|selectedKnownConsumer
argument_list|,
name|unselectedKnownConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|setSelectedKnownConsumers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|selectedKnownConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|MockControl
name|invalidControl
init|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|InvalidRepositoryContentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|InvalidRepositoryContentConsumer
name|selectedInvalidConsumer
init|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|invalidControl
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|InvalidRepositoryContentConsumer
name|unselectedInvalidConsumer
init|=
operator|(
name|InvalidRepositoryContentConsumer
operator|)
name|MockControl
operator|.
name|createControl
argument_list|(
name|InvalidRepositoryContentConsumer
operator|.
name|class
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|setAvailableInvalidConsumers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|selectedInvalidConsumer
argument_list|,
name|unselectedInvalidConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|setSelectedInvalidConsumers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|selectedInvalidConsumer
argument_list|)
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repo
init|=
name|createRepository
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
name|getTestFile
argument_list|(
literal|"target/test-repo"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-repo/path/to/test-file.txt"
argument_list|)
decl_stmt|;
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|selectedKnownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getIncludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|processFile
argument_list|(
name|_OS
argument_list|(
literal|"path/to/test-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|File
name|notIncludedTestFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-repo/path/to/test-file.xml"
argument_list|)
decl_stmt|;
name|selectedKnownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getIncludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|processFile
argument_list|(
name|_OS
argument_list|(
literal|"path/to/test-file.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|getId
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|setReturnValue
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|notIncludedTestFile
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|reset
argument_list|()
expr_stmt|;
name|File
name|excludedTestFile
init|=
name|getTestFile
argument_list|(
literal|"target/test-repo/path/to/test-file.txt"
argument_list|)
decl_stmt|;
name|selectedKnownConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|selectedKnownConsumer
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
name|knownControl
operator|.
name|setReturnValue
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/test-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        knownConsumer.completeScan();
name|knownControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|beginScan
argument_list|(
name|repo
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|processFile
argument_list|(
name|_OS
argument_list|(
literal|"path/to/test-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|selectedInvalidConsumer
operator|.
name|getId
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|setReturnValue
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
comment|//        invalidConsumer.completeScan();
name|invalidControl
operator|.
name|replay
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|executeConsumers
argument_list|(
name|repo
argument_list|,
name|excludedTestFile
argument_list|)
expr_stmt|;
name|knownControl
operator|.
name|verify
argument_list|()
expr_stmt|;
name|invalidControl
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create an OS specific version of the filepath.      * Provide path in unix "/" format.      */
specifier|private
name|String
name|_OS
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
condition|)
block|{
return|return
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'\\'
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

