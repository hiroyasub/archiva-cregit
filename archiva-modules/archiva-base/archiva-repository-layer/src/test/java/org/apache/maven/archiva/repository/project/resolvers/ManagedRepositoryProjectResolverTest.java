begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|resolvers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|FileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ManagedDefaultRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|ProjectModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|project
operator|.
name|readers
operator|.
name|ProjectModel400Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusInSpringTestCase
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedRepositoryProjectResolverTest
extends|extends
name|PlexusInSpringTestCase
block|{
specifier|private
name|ManagedRepositoryProjectResolver
name|resolver
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|FileTypes
name|fileTypes
init|=
operator|new
name|MockFileTypes
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repoConfig
operator|.
name|setId
argument_list|(
literal|"test-repo"
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setLocation
argument_list|(
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
literal|"target/test-classes/test-repo"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setName
argument_list|(
literal|"Test Repository"
argument_list|)
expr_stmt|;
name|ManagedDefaultRepositoryContent
name|repository
init|=
operator|new
name|ManagedDefaultRepositoryContent
argument_list|()
decl_stmt|;
name|repository
operator|.
name|setRepository
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setFiletypes
argument_list|(
name|fileTypes
argument_list|)
expr_stmt|;
name|resolver
operator|=
operator|new
name|ManagedRepositoryProjectResolver
argument_list|(
name|repository
argument_list|,
operator|new
name|ProjectModel400Reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResolveSnapshotUniqueVersionPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
literal|"unique-version"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
literal|"1.0-SNAPSHOT"
argument_list|)
expr_stmt|;
try|try
block|{
name|ArchivaProjectModel
name|model
init|=
name|resolver
operator|.
name|resolveProjectModel
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.archiva"
argument_list|,
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unique-version"
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0-SNAPSHOT"
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unique Version Snapshot - Build 3"
argument_list|,
name|model
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProjectModelException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"A ProjectModelException should not have occurred. Instead, the latest timestamp should have been found!"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testResolveSnapshotGenericVersionPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
literal|"generic-version"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
literal|"1.0-SNAPSHOT"
argument_list|)
expr_stmt|;
name|ArchivaProjectModel
name|model
init|=
name|resolver
operator|.
name|resolveProjectModel
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.archiva"
argument_list|,
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"generic-version"
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0-SNAPSHOT"
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResolveSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
literal|"released-version"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|ArchivaProjectModel
name|model
init|=
name|resolver
operator|.
name|resolveProjectModel
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.archiva"
argument_list|,
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"released-version"
argument_list|,
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResolveNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
literal|"org.apache.archiva"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
literal|"non-existant"
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
literal|"2.0"
argument_list|)
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|resolveProjectModel
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A ProjectModelException should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProjectModelException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|MockFileTypes
extends|extends
name|FileTypes
block|{
specifier|public
name|boolean
name|matchesArtifactPattern
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

