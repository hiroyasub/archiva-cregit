begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|provider
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|model
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ReleaseScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|group
operator|.
name|RepositoryGroupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|managed
operator|.
name|BasicManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|managed
operator|.
name|ManagedRepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|remote
operator|.
name|BasicRemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|remote
operator|.
name|RemoteRepositoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ExtendWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|SpringExtension
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test for RepositoryRegistry  */
end_comment

begin_class
annotation|@
name|ExtendWith
argument_list|(
name|SpringExtension
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath*:/META-INF/spring-context.xml"
block|,
literal|"classpath:/spring-context.xml"
block|}
argument_list|)
specifier|public
class|class
name|ArchivaRepositoryRegistryTest
block|{
annotation|@
name|Inject
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
annotation|@
name|Inject
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Inject
name|RepositoryGroupHandler
name|repositoryGroupHandler
decl_stmt|;
annotation|@
name|Inject
name|ManagedRepositoryHandler
name|managedRepositoryHandler
decl_stmt|;
annotation|@
name|Inject
name|RemoteRepositoryHandler
name|remoteRepositoryHandler
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|userCfg
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".m2/archiva.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Path
name|cfgCopy
decl_stmt|;
specifier|private
specifier|static
name|Path
name|archivaCfg
decl_stmt|;
annotation|@
name|BeforeAll
specifier|public
specifier|static
name|void
name|classSetup
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|URL
name|archivaCfgUri
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"archiva.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|archivaCfgUri
operator|!=
literal|null
condition|)
block|{
name|archivaCfg
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|archivaCfgUri
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|cfgCopy
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"archiva-backup"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|archivaCfg
argument_list|,
name|cfgCopy
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterAll
specifier|public
specifier|static
name|void
name|classTearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cfgCopy
operator|!=
literal|null
condition|)
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|cfgCopy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeEach
specifier|public
name|void
name|setUp
parameter_list|( )
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|repositoryRegistry
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|userCfg
argument_list|)
expr_stmt|;
name|URL
name|archivaCfgUri
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"archiva.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|archivaCfgUri
operator|!=
literal|null
condition|)
block|{
name|archivaCfg
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|archivaCfgUri
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|cfgCopy
argument_list|)
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|cfgCopy
argument_list|,
name|archivaCfg
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterEach
specifier|public
name|void
name|tearDown
parameter_list|( )
throws|throws
name|Exception
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|userCfg
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfgCopy
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|cfgCopy
argument_list|)
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|cfgCopy
argument_list|,
name|archivaCfg
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRepositories
parameter_list|( )
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Repository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|repos
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repos
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repos
operator|.
name|stream
argument_list|( )
operator|.
name|anyMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"snapshots"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repos
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"central"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getManagedRepositories
parameter_list|( )
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repos
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repos
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repos
operator|.
name|stream
argument_list|( )
operator|.
name|anyMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"snapshots"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRemoteRepositories
parameter_list|( )
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|RemoteRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repos
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repos
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"central"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|Repository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"internal"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Archiva Managed Internal Repository"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is internal repository."
argument_list|,
name|repo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|repo
operator|.
name|getLayout
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 0 * * * ?"
argument_list|,
name|repo
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|instanceof
name|ManagedRepository
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|hasIndex
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|,
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getManagedRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"internal"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Archiva Managed Internal Repository"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is internal repository."
argument_list|,
name|repo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|repo
operator|.
name|getLayout
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 0 * * * ?"
argument_list|,
name|repo
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|hasIndex
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|,
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|repo
operator|.
name|getActiveReleaseSchemes
argument_list|( )
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"xyu"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRemoteRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|RemoteRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"central"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Central Repository"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|repo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|repo
operator|.
name|getLayout
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 0 08 ? * SUN"
argument_list|,
name|repo
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|hasIndex
argument_list|( )
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|,
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|repo
operator|.
name|getTimeout
argument_list|()
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putManagedRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|BasicManagedRepository
name|managedRepository
init|=
name|BasicManagedRepository
operator|.
name|newFilesystemInstance
argument_list|(
literal|"test001"
argument_list|,
literal|"Test repo"
argument_list|,
name|archivaConfiguration
operator|.
name|getRepositoryBaseDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"test001"
argument_list|)
argument_list|)
decl_stmt|;
name|managedRepository
operator|.
name|setDescription
argument_list|(
name|managedRepository
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
literal|"This is just a test"
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|managedRepository
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepository
operator|=
name|BasicManagedRepository
operator|.
name|newFilesystemInstance
argument_list|(
literal|"central"
argument_list|,
literal|"Test repo"
argument_list|,
name|archivaConfiguration
operator|.
name|getRepositoryBaseDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"central"
argument_list|)
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setDescription
argument_list|(
name|managedRepository
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
literal|"This is just a test"
argument_list|)
expr_stmt|;
name|ManagedRepository
name|updatedRepo
decl_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Repository exception should be thrown, if there exists a remote repository already with that id"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|managedRepository
operator|=
name|BasicManagedRepository
operator|.
name|newFilesystemInstance
argument_list|(
literal|"internal"
argument_list|,
literal|"Test repo"
argument_list|,
name|archivaConfiguration
operator|.
name|getRepositoryBaseDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setDescription
argument_list|(
name|managedRepository
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
literal|"This is just a test"
argument_list|)
expr_stmt|;
name|updatedRepo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|updatedRepo
argument_list|,
name|managedRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|managedRepository
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRepository
name|managedRepository1
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test repo"
argument_list|,
name|managedRepository1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|managedRepository1
argument_list|,
name|managedRepository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putManagedRepositoryFromConfig
parameter_list|( )
throws|throws
name|Exception
block|{
name|ManagedRepositoryConfiguration
name|cfg
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"test002"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is test 002"
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test002"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRepository
name|internalRepo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|cfg
operator|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is internal test 002"
argument_list|)
expr_stmt|;
name|repo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|internalRepo
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is internal test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putManagedRepositoryFromConfigWithoutSave
parameter_list|( )
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
name|actualSize
init|=
name|configuration
operator|.
name|getManagedRepositories
argument_list|( )
operator|.
name|size
argument_list|( )
decl_stmt|;
name|Configuration
name|newConfiguration
init|=
operator|new
name|Configuration
argument_list|( )
decl_stmt|;
name|ManagedRepositoryConfiguration
name|cfg
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"test002"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is test 002"
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|,
name|newConfiguration
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test002"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|actualSize
argument_list|,
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|repos
init|=
name|newConfiguration
operator|.
name|getManagedRepositories
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRepository
name|internalRepo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|cfg
operator|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is internal test 002"
argument_list|)
expr_stmt|;
name|repo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|,
name|newConfiguration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is internal test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newConfiguration
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|actualSize
argument_list|,
name|configuration
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putRemoteRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|BasicRemoteRepository
name|remoteRepository
init|=
name|BasicRemoteRepository
operator|.
name|newFilesystemInstance
argument_list|(
literal|"test001"
argument_list|,
literal|"Test repo"
argument_list|,
name|archivaConfiguration
operator|.
name|getRemoteRepositoryBaseDir
argument_list|()
argument_list|)
decl_stmt|;
name|remoteRepository
operator|.
name|setDescription
argument_list|(
name|remoteRepository
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
literal|"This is just a test"
argument_list|)
expr_stmt|;
name|RemoteRepository
name|newRepo
init|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|remoteRepository
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|remoteRepository
argument_list|,
name|newRepo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|remoteRepository
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|=
name|BasicRemoteRepository
operator|.
name|newFilesystemInstance
argument_list|(
literal|"internal"
argument_list|,
literal|"Test repo"
argument_list|,
name|archivaConfiguration
operator|.
name|getRemoteRepositoryBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|.
name|setDescription
argument_list|(
name|remoteRepository
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
literal|"This is just a test"
argument_list|)
expr_stmt|;
name|RemoteRepository
name|updatedRepo
decl_stmt|;
try|try
block|{
name|updatedRepo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|remoteRepository
argument_list|,
name|updatedRepo
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should throw repository exception, if repository exists already and is not the same type."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|remoteRepository
operator|=
name|BasicRemoteRepository
operator|.
name|newFilesystemInstance
argument_list|(
literal|"central"
argument_list|,
literal|"Test repo"
argument_list|,
name|archivaConfiguration
operator|.
name|getRemoteRepositoryBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|.
name|setDescription
argument_list|(
name|remoteRepository
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
literal|"This is just a test"
argument_list|)
expr_stmt|;
name|updatedRepo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|updatedRepo
argument_list|,
name|remoteRepository
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|remoteRepository
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteRepository
name|remoteRepository1
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test repo"
argument_list|,
name|remoteRepository1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|remoteRepository1
argument_list|,
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putRemoteRepositoryFromConfig
parameter_list|( )
throws|throws
name|Exception
block|{
name|RemoteRepositoryConfiguration
name|cfg
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"test002"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is test 002"
argument_list|)
expr_stmt|;
name|RemoteRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test002"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|RemoteRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteRepository
name|internalRepo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
name|cfg
operator|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"central"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is central test 002"
argument_list|)
expr_stmt|;
name|repo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is central test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putRemoteRepositoryFromConfigWithoutSave
parameter_list|( )
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepositoryConfiguration
name|cfg
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|newConfiguration
init|=
operator|new
name|Configuration
argument_list|( )
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"test002"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is test 002"
argument_list|)
expr_stmt|;
name|RemoteRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|,
name|newConfiguration
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test002"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RemoteRepository
argument_list|>
name|repos
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newConfiguration
operator|.
name|getRemoteRepositories
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|RemoteRepository
name|internalRepo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
name|cfg
operator|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
literal|"central"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
literal|"This is central test 002"
argument_list|)
expr_stmt|;
name|repo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|cfg
argument_list|,
name|newConfiguration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is central test 002"
argument_list|,
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newConfiguration
operator|.
name|getRemoteRepositories
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Repository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRepository
argument_list|(
literal|"snapshots"
argument_list|)
decl_stmt|;
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|noneMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"snapshots"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repositoryRegistry
operator|.
name|getRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeManagedRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"snapshots"
argument_list|)
decl_stmt|;
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|noneMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"snapshots"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeManagedRepositoryWithoutSave
parameter_list|( )
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"snapshots"
argument_list|)
decl_stmt|;
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|noneMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"snapshots"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemoteRepository
parameter_list|( )
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|noneMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"central"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemoteRepositoryWithoutSave
parameter_list|( )
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|noneMatch
argument_list|(
name|rep
lambda|->
name|rep
operator|.
name|getId
argument_list|( )
operator|.
name|equals
argument_list|(
literal|"central"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|archivaConfiguration
operator|.
name|reload
argument_list|()
expr_stmt|;
name|repositoryRegistry
operator|.
name|reload
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cloneManagedRepo
parameter_list|( )
throws|throws
name|Exception
block|{
name|ManagedRepository
name|managedRepository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|clone
argument_list|(
name|managedRepository
argument_list|,
literal|"snapshots"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"RepositoryRegistry exception should be thrown if id exists already."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
try|try
block|{
name|repositoryRegistry
operator|.
name|clone
argument_list|(
name|managedRepository
argument_list|,
literal|"central"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"RepositoryRegistry exception should be thrown if id exists already."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|ManagedRepository
name|clone
init|=
name|repositoryRegistry
operator|.
name|clone
argument_list|(
name|managedRepository
argument_list|,
literal|"newinternal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|clone
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Archiva Managed Internal Repository"
argument_list|,
name|clone
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|managedRepository
argument_list|,
name|clone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cloneRemoteRepo
parameter_list|( )
throws|throws
name|Exception
block|{
name|RemoteRepository
name|remoteRepository
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
literal|"central"
argument_list|)
decl_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|clone
argument_list|(
name|remoteRepository
argument_list|,
literal|"snapshots"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"RepositoryRegistry exception should be thrown if id exists already."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
try|try
block|{
name|repositoryRegistry
operator|.
name|clone
argument_list|(
name|remoteRepository
argument_list|,
literal|"central"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"RepositoryRegistry exception should be thrown if id exists already."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|RemoteRepository
name|clone
init|=
name|repositoryRegistry
operator|.
name|clone
argument_list|(
name|remoteRepository
argument_list|,
literal|"newCentral"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|clone
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Central Repository"
argument_list|,
name|clone
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|remoteRepository
argument_list|,
name|clone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|validateRepository
parameter_list|()
block|{
name|Repository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRepository
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repositoryRegistry
operator|.
name|validateRepository
argument_list|(
name|repo
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

