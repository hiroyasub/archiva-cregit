begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A validation response gives information about the validation status for certain attributes.  *  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ValidationResponse
parameter_list|<
name|R
extends|extends
name|Repository
parameter_list|>
implements|implements
name|CheckedResult
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
argument_list|>
block|{
specifier|final
name|boolean
name|valid
decl_stmt|;
specifier|final
name|R
name|repository
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|validationErrors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|public
name|ValidationResponse
parameter_list|(
name|R
name|repo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|errors
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|==
literal|null
operator|||
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
name|validationErrors
operator|.
name|putAll
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|repository
operator|=
name|repo
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|S
extends|extends
name|Repository
parameter_list|>
name|ValidationResponse
argument_list|<
name|S
argument_list|>
name|getValid
parameter_list|(
name|S
name|repository
parameter_list|)
block|{
return|return
operator|new
name|ValidationResponse
argument_list|<>
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|getRepository
parameter_list|( )
block|{
return|return
name|repository
return|;
block|}
comment|/**      * Returns true, if the validation was successful and there are not validation errors.      * @return<code>true</code>, if the validation was successful, otherwise<code>false</code>      */
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|( )
block|{
return|return
name|valid
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
argument_list|>
name|getResult
parameter_list|( )
block|{
return|return
name|validationErrors
return|;
block|}
comment|/**      * Add the given validation error to the list for the given attribute.      *      * @param attribute the name of the attribute      * @param error the error that is added to the list      */
specifier|public
name|void
name|addValidationError
parameter_list|(
name|String
name|attribute
parameter_list|,
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validationErrors
operator|.
name|containsKey
argument_list|(
name|attribute
argument_list|)
condition|)
block|{
name|validationErrors
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|validationErrors
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a list of validation errors that are stored for the given attribute. If there are no      * errors stored for this attribute, a empty list is returned.      *      * @param attribute the name of the attribute      * @return the list of validation errors      */
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getValidationErrors
parameter_list|(
name|String
name|attribute
parameter_list|)
block|{
if|if
condition|(
name|validationErrors
operator|.
name|containsKey
argument_list|(
name|attribute
argument_list|)
condition|)
block|{
return|return
name|validationErrors
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|( )
return|;
block|}
block|}
block|}
end_class

end_unit

