begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|UnsupportedRepositoryTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This factory is used to get a index manager for a certain repository type.  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"indexerManagerFactory"
argument_list|)
specifier|public
class|class
name|IndexManagerFactory
block|{
name|Map
argument_list|<
name|RepositoryType
argument_list|,
name|ArchivaIndexManager
argument_list|>
name|managers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
name|ApplicationContext
name|applicationContext
decl_stmt|;
name|ArchivaIndexManager
name|getIndexManager
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
if|if
condition|(
name|managers
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|managers
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
name|ArchivaIndexManager
name|manager
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|ArchivaIndexManager
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|supportsRepository
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|UnsupportedRepositoryTypeException
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|managers
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|manager
argument_list|)
expr_stmt|;
return|return
name|manager
return|;
block|}
block|}
block|}
end_class

end_unit

