begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_comment
comment|/**  * Feature for remote index download.  */
end_comment

begin_class
specifier|public
class|class
name|RemoteIndexFeature
implements|implements
name|RepositoryFeature
argument_list|<
name|RemoteIndexFeature
argument_list|>
block|{
specifier|private
name|boolean
name|downloadRemoteIndex
init|=
literal|false
decl_stmt|;
specifier|private
name|URI
name|indexUri
decl_stmt|;
block|{
try|try
block|{
name|indexUri
operator|=
operator|new
name|URI
argument_list|(
literal|".index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
specifier|private
name|boolean
name|downloadRemoteIndexOnStartup
init|=
literal|false
decl_stmt|;
specifier|private
name|Duration
name|downloadTimeout
init|=
name|Duration
operator|.
name|ofSeconds
argument_list|(
literal|600
argument_list|)
decl_stmt|;
specifier|private
name|String
name|proxyId
init|=
literal|""
decl_stmt|;
comment|/**      * True, if the remote index should be downloaded.      * @return True if download, otherwise false.      */
specifier|public
name|boolean
name|isDownloadRemoteIndex
parameter_list|()
block|{
return|return
name|downloadRemoteIndex
return|;
block|}
specifier|public
name|void
name|setDownloadRemoteIndex
parameter_list|(
name|boolean
name|downloadRemoteIndex
parameter_list|)
block|{
name|this
operator|.
name|downloadRemoteIndex
operator|=
name|downloadRemoteIndex
expr_stmt|;
block|}
comment|/**      * The URI to access the remote index. May be a relative URI that is relative to the      * repository URI.      *      * @return      */
specifier|public
name|URI
name|getIndexUri
parameter_list|()
block|{
return|return
name|indexUri
return|;
block|}
comment|/**      * Sets the URI to access the remote index. May be a relative URI that is relative to the      * repository URI. The allowed URI schemes are dependent on the repository type.      *      * @param indexUri The URI of the index      */
specifier|public
name|void
name|setIndexUri
parameter_list|(
name|URI
name|indexUri
parameter_list|)
block|{
name|this
operator|.
name|indexUri
operator|=
name|indexUri
expr_stmt|;
block|}
comment|/**      * Returns true, if the remote index should be downloaded on startup of the repository.      * @return true, if the index should be downloaded during startup, otherwise false.      */
specifier|public
name|boolean
name|isDownloadRemoteIndexOnStartup
parameter_list|()
block|{
return|return
name|downloadRemoteIndexOnStartup
return|;
block|}
comment|/**      * Sets the flag for download of the remote repository index.      *      * @param downloadRemoteIndexOnStartup      */
specifier|public
name|void
name|setDownloadRemoteIndexOnStartup
parameter_list|(
name|boolean
name|downloadRemoteIndexOnStartup
parameter_list|)
block|{
name|this
operator|.
name|downloadRemoteIndexOnStartup
operator|=
name|downloadRemoteIndexOnStartup
expr_stmt|;
block|}
comment|/**      * Returns the timeout after that the remote index download is aborted.      * @return the time duration after that, the download is aborted.      */
specifier|public
name|Duration
name|getDownloadTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|downloadTimeout
return|;
block|}
comment|/**      * Sets the timeout after that a remote index download will be aborted.      * @param timeout The duration      */
specifier|public
name|void
name|setDownloadTimeout
parameter_list|(
name|Duration
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|downloadTimeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**      * Returns the id of the proxy, that should be used to download the remote index.      * @return The proxy id      */
specifier|public
name|String
name|getProxyId
parameter_list|( )
block|{
return|return
name|proxyId
return|;
block|}
comment|/**      * Sets the id of the proxy that should be used to download the remote index.      * @param proxyId      */
specifier|public
name|void
name|setProxyId
parameter_list|(
name|String
name|proxyId
parameter_list|)
block|{
name|this
operator|.
name|proxyId
operator|=
name|proxyId
expr_stmt|;
block|}
comment|/**      * Returns true, if there is a index available.      *      * @return      */
specifier|public
name|boolean
name|hasIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexUri
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|this
operator|.
name|indexUri
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
return|return
name|str
operator|.
name|append
argument_list|(
literal|"RemoteIndexFeature:{downloadRemoteIndex="
argument_list|)
operator|.
name|append
argument_list|(
name|downloadRemoteIndex
argument_list|)
operator|.
name|append
argument_list|(
literal|",indexURI="
argument_list|)
operator|.
name|append
argument_list|(
name|indexUri
argument_list|)
operator|.
name|append
argument_list|(
literal|",downloadOnStartup="
argument_list|)
operator|.
name|append
argument_list|(
name|downloadRemoteIndexOnStartup
argument_list|)
operator|.
name|append
argument_list|(
literal|",timeout="
argument_list|)
operator|.
name|append
argument_list|(
name|downloadTimeout
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

