begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|EventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexUpdateFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|metadata
operator|.
name|MetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  *  Registry for repositories. This is the central entry point for repositories. It provides methods for  *  retrieving, adding and removing repositories.  *<p>  *  The modification methods addXX and removeXX persist the changes immediately to the configuration. If the  *  configuration save fails the changes are rolled back.  *<p>  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_interface
specifier|public
interface|interface
name|RepositoryRegistry
extends|extends
name|EventSource
block|{
comment|/**      * Set the configuration for the registry      * @param archivaConfiguration      */
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
function_decl|;
comment|/**      * Return the index manager for the given repository type      * @param type the repository type      * @return the index manager, if it exists      */
name|ArchivaIndexManager
name|getIndexManager
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
function_decl|;
comment|/**      * Returns the metadatareader for the given repository type      * @param type the repository type      * @return the metadata reader instance      */
name|MetadataReader
name|getMetadataReader
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
throws|throws
name|UnsupportedRepositoryTypeException
function_decl|;
comment|/**      * Returns all registered repositories      * @return the list of repositories      */
name|Collection
argument_list|<
name|Repository
argument_list|>
name|getRepositories
parameter_list|( )
function_decl|;
comment|/**      * Returns all managed repositories      * @return the list of managed repositories      */
name|Collection
argument_list|<
name|ManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|( )
function_decl|;
name|Collection
argument_list|<
name|RemoteRepository
argument_list|>
name|getRemoteRepositories
parameter_list|( )
function_decl|;
name|Collection
argument_list|<
name|RepositoryGroup
argument_list|>
name|getRepositoryGroups
parameter_list|( )
function_decl|;
name|Repository
name|getRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
function_decl|;
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
function_decl|;
name|RemoteRepository
name|getRemoteRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
function_decl|;
name|RepositoryGroup
name|getRepositoryGroup
parameter_list|(
name|String
name|groupId
parameter_list|)
function_decl|;
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|ManagedRepository
name|putRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RepositoryGroup
name|putRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RemoteRepository
name|putRepository
parameter_list|(
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepository
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepositoryGroup
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|removeRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|reload
parameter_list|( )
function_decl|;
name|void
name|resetIndexingContext
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|IndexUpdateFailedException
function_decl|;
name|ManagedRepository
name|clone
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
parameter_list|<
name|T
extends|extends
name|Repository
parameter_list|>
name|Repository
name|clone
parameter_list|(
name|T
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|RemoteRepository
name|clone
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|,
name|String
name|newId
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
comment|/**      * Return the repository that stores the given asset.      * @param asset the asset      * @return the repository or<code>null</code> if no matching repository is found      */
name|Repository
name|getRepositoryOfAsset
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

