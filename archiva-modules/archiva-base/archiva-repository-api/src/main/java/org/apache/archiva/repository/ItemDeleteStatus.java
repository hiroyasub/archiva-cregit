begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Version
import|;
end_import

begin_comment
comment|/**  *  * Deletion status of a given item.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ItemDeleteStatus
block|{
specifier|public
specifier|static
specifier|final
name|int
name|OK
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DELETION_FAILED
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ITEM_NOT_FOUND
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|UNKNOWN
init|=
literal|128
decl_stmt|;
specifier|private
name|ContentItem
name|item
decl_stmt|;
specifier|private
name|int
name|status
decl_stmt|;
specifier|private
name|Throwable
name|exception
decl_stmt|;
specifier|public
name|ItemDeleteStatus
parameter_list|(
name|ContentItem
name|item
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|OK
expr_stmt|;
block|}
specifier|public
name|ItemDeleteStatus
parameter_list|(
name|ContentItem
name|item
parameter_list|,
name|int
name|status
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|ItemDeleteStatus
parameter_list|(
name|ContentItem
name|item
parameter_list|,
name|int
name|status
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|ContentItem
name|getItem
parameter_list|( )
block|{
return|return
name|item
return|;
block|}
specifier|public
name|int
name|getStatus
parameter_list|( )
block|{
return|return
name|status
return|;
block|}
specifier|public
name|Throwable
name|getException
parameter_list|( )
block|{
return|return
name|exception
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|ContentItem
argument_list|>
name|getItemType
parameter_list|()
block|{
if|if
condition|(
name|item
operator|instanceof
name|Namespace
condition|)
block|{
return|return
name|Namespace
operator|.
name|class
return|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|Project
condition|)
block|{
return|return
name|Project
operator|.
name|class
return|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|Version
condition|)
block|{
return|return
name|Version
operator|.
name|class
return|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|Artifact
condition|)
block|{
return|return
name|Artifact
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|ContentItem
operator|.
name|class
return|;
block|}
block|}
specifier|public
parameter_list|<
name|U
extends|extends
name|ContentItem
parameter_list|>
name|U
name|adapt
parameter_list|(
name|Class
argument_list|<
name|U
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|item
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|U
operator|)
name|item
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert instance of "
operator|+
name|item
operator|.
name|getClass
argument_list|( )
operator|+
literal|" to "
operator|+
name|clazz
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

