begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|events
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|EventType
parameter_list|<
name|T
extends|extends
name|Event
parameter_list|>
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|EventType
argument_list|<
name|?
super|super
name|T
argument_list|>
name|superType
decl_stmt|;
specifier|public
name|EventType
parameter_list|(
name|EventType
argument_list|<
name|?
super|super
name|T
argument_list|>
name|superType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|superType
operator|=
name|superType
expr_stmt|;
block|}
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|EventType
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getSuperType
parameter_list|()
block|{
return|return
name|superType
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|EventType
argument_list|<
name|?
argument_list|>
argument_list|>
name|fetchSuperTypes
parameter_list|(
name|EventType
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|EventType
argument_list|<
name|?
argument_list|>
argument_list|>
name|typeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|EventType
argument_list|<
name|?
argument_list|>
name|cType
init|=
name|type
decl_stmt|;
while|while
condition|(
name|cType
operator|!=
literal|null
condition|)
block|{
name|typeList
operator|.
name|add
argument_list|(
name|cType
argument_list|)
expr_stmt|;
name|cType
operator|=
name|cType
operator|.
name|getSuperType
argument_list|()
expr_stmt|;
block|}
return|return
name|typeList
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isInstanceOf
parameter_list|(
name|EventType
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|EventType
argument_list|<
name|?
argument_list|>
name|baseType
parameter_list|)
block|{
name|EventType
argument_list|<
name|?
argument_list|>
name|cType
init|=
name|type
decl_stmt|;
while|while
condition|(
name|cType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cType
operator|==
name|baseType
condition|)
block|{
return|return
literal|true
return|;
block|}
name|cType
operator|=
name|cType
operator|.
name|getSuperType
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

