begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|validation
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a single validation error. A error is defined by a global unique key and has a optional number  * of arguments.  *<p>  * The unique key should represent a category, the attribute and a generic type, separated by '.'  * E.g. repository_group.id.empty  *</p>  *<p>  * Categories normally separate errors for different domain types, like managed repository, repository group, maven repository.  *<p>  * Types define a certain type of error that can be handled similar independent of the attribute or category  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|ValidationError
block|{
specifier|public
specifier|static
specifier|final
name|String
name|UNSPECIFIED
init|=
literal|"unspecified"
decl_stmt|;
specifier|final
name|String
name|errorKey
decl_stmt|;
specifier|final
name|String
name|attribute
decl_stmt|;
specifier|final
name|String
name|category
decl_stmt|;
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|ValidationError
name|ofKey
parameter_list|(
specifier|final
name|String
name|errorKey
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|ValidationError
argument_list|(
name|errorKey
argument_list|,
name|getCategoryFromKey
argument_list|(
name|errorKey
argument_list|)
argument_list|,
name|getTypeFromKey
argument_list|(
name|errorKey
argument_list|)
argument_list|,
name|getAttributeFromKey
argument_list|(
name|errorKey
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ValidationError
name|ofKey
parameter_list|(
name|String
name|errorKey
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|ValidationError
argument_list|(
name|errorKey
argument_list|,
name|getCategoryFromKey
argument_list|(
name|errorKey
argument_list|)
argument_list|,
name|getTypeFromKey
argument_list|(
name|errorKey
argument_list|)
argument_list|,
name|getAttributeFromKey
argument_list|(
name|errorKey
argument_list|)
argument_list|,
name|arguments
argument_list|)
return|;
block|}
specifier|public
name|ValidationError
parameter_list|(
name|String
name|errorKey
parameter_list|,
name|String
name|category
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|attribute
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|errorKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The key of a validation error cannot be empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|errorKey
operator|=
name|errorKey
expr_stmt|;
if|if
condition|(
name|arguments
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|arguments
operator|.
name|addAll
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|this
operator|.
name|attribute
operator|=
name|attribute
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getTypeFromKey
parameter_list|(
specifier|final
name|String
name|errorKey
parameter_list|)
block|{
return|return
name|errorKey
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|?
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|errorKey
argument_list|,
literal|"."
argument_list|)
else|:
name|UNSPECIFIED
return|;
block|}
specifier|private
specifier|static
name|String
name|getCategoryFromKey
parameter_list|(
specifier|final
name|String
name|errorKey
parameter_list|)
block|{
return|return
name|errorKey
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|?
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|errorKey
argument_list|,
literal|"."
argument_list|)
else|:
name|UNSPECIFIED
return|;
block|}
specifier|private
specifier|static
name|String
name|getAttributeFromKey
parameter_list|(
specifier|final
name|String
name|errorKey
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|errorKey
argument_list|,
literal|"."
argument_list|)
operator|>=
literal|2
condition|?
name|StringUtils
operator|.
name|substringBetween
argument_list|(
name|errorKey
argument_list|,
literal|"."
argument_list|)
else|:
name|UNSPECIFIED
return|;
block|}
comment|/**      * Returns the unique key of this validation error. It is best practice for keys to contain the      * validation source, the attribute and a unique error definition.      * E.g. repository_group.id.empty      *      * @return      */
specifier|public
name|String
name|getErrorKey
parameter_list|( )
block|{
return|return
name|errorKey
return|;
block|}
comment|/**      * Returns the list of arguments stored for this error      * @return the list of arguments      */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getArguments
parameter_list|( )
block|{
return|return
name|arguments
return|;
block|}
comment|/**      * Adds the given argument to the list      * @param argument the argument to add      */
specifier|public
name|void
name|addArgument
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|.
name|add
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the generic error type, this error represents.      *      * @return the error type or {@link #UNSPECIFIED} if not explicitly set.      */
specifier|public
name|String
name|getType
parameter_list|( )
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns the category of the error.      *      * @return the category or {@link #UNSPECIFIED} if not explicitly set      */
specifier|public
name|String
name|getCategory
parameter_list|( )
block|{
return|return
name|category
return|;
block|}
comment|/**      * Returns the attribute name      * @return the attribute name or {@link #UNSPECIFIED} if not explicitly set      */
specifier|public
name|String
name|getAttribute
parameter_list|( )
block|{
return|return
name|attribute
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|( )
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ValidationError{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"errorKey='"
argument_list|)
operator|.
name|append
argument_list|(
name|errorKey
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|( )
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|( )
operator|!=
name|o
operator|.
name|getClass
argument_list|( )
condition|)
return|return
literal|false
return|;
name|ValidationError
name|that
init|=
operator|(
name|ValidationError
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|errorKey
operator|.
name|equals
argument_list|(
name|that
operator|.
name|errorKey
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|arguments
operator|.
name|equals
argument_list|(
name|that
operator|.
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|( )
block|{
name|int
name|result
init|=
name|errorKey
operator|.
name|hashCode
argument_list|( )
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|arguments
operator|.
name|hashCode
argument_list|( )
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

