begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|proxyconnector
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|functors
operator|.
name|ProxyConnectorSelectionPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"proxyConnectorAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultProxyConnectorAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|ProxyConnectorAdmin
block|{
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
decl_stmt|;
specifier|public
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|getProxyConnectors
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectorConfigurations
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProxyConnectors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|(
name|proxyConnectorConfigurations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|configuration
range|:
name|proxyConnectorConfigurations
control|)
block|{
name|ProxyConnector
name|proxyConnector
init|=
operator|new
name|ProxyConnector
argument_list|()
decl_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setOrder
argument_list|(
name|configuration
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setBlackListPatterns
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|configuration
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setWhiteListPatterns
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|configuration
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setDisabled
argument_list|(
name|configuration
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setPolicies
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|configuration
operator|.
name|getPolicies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|configuration
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setProxyId
argument_list|(
name|configuration
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setSourceRepoId
argument_list|(
name|configuration
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setTargetRepoId
argument_list|(
name|configuration
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|proxyConnectors
return|;
block|}
specifier|public
name|ProxyConnector
name|getProxyConnector
parameter_list|(
name|String
name|sourceRepoId
parameter_list|,
name|String
name|targetRepoId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
for|for
control|(
name|ProxyConnector
name|proxyConnector
range|:
name|getProxyConnectors
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|sourceRepoId
argument_list|,
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|targetRepoId
argument_list|,
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|proxyConnector
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Boolean
name|addProxyConnector
parameter_list|(
name|ProxyConnector
name|proxyConnector
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|getProxyConnector
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|,
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Unable to add proxy connector, as one already exists with source repository id ["
operator|+
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
operator|+
literal|"] and target repository id ["
operator|+
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|validateProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setBlackListPatterns
argument_list|(
name|unescapePatterns
argument_list|(
name|proxyConnector
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnector
operator|.
name|setWhiteListPatterns
argument_list|(
name|unescapePatterns
argument_list|(
name|proxyConnector
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ProxyConnectorConfiguration
name|proxyConnectorConfiguration
init|=
name|getProxyConnectorConfiguration
argument_list|(
name|proxyConnector
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addProxyConnector
argument_list|(
name|proxyConnectorConfiguration
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
operator|+
literal|"-"
operator|+
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_PROXY_CONNECTOR
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|deleteProxyConnector
parameter_list|(
name|ProxyConnector
name|proxyConnector
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ProxyConnectorConfiguration
name|proxyConnectorConfiguration
init|=
name|findProxyConnector
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|,
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyConnectorConfiguration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"unable to find ProxyConnector with source "
operator|+
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
operator|+
literal|" and target "
operator|+
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnectorConfiguration
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
operator|+
literal|"-"
operator|+
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_PROXY_CONNECTOR
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|unescapePatterns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rawPatterns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|rawPatterns
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|replace
argument_list|(
name|pattern
argument_list|,
literal|"\\\\"
argument_list|,
literal|"\\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rawPatterns
return|;
block|}
specifier|protected
name|ProxyConnectorConfiguration
name|findProxyConnector
parameter_list|(
name|String
name|sourceId
parameter_list|,
name|String
name|targetId
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|targetId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProxyConnectorSelectionPredicate
name|selectedProxy
init|=
operator|new
name|ProxyConnectorSelectionPredicate
argument_list|(
name|sourceId
argument_list|,
name|targetId
argument_list|)
decl_stmt|;
return|return
operator|(
name|ProxyConnectorConfiguration
operator|)
name|CollectionUtils
operator|.
name|find
argument_list|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
argument_list|,
name|selectedProxy
argument_list|)
return|;
block|}
specifier|protected
name|ProxyConnectorConfiguration
name|getProxyConnectorConfiguration
parameter_list|(
name|ProxyConnector
name|proxyConnector
parameter_list|)
block|{
name|ProxyConnectorConfiguration
name|proxyConnectorConfiguration
init|=
operator|new
name|ProxyConnectorConfiguration
argument_list|()
decl_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setOrder
argument_list|(
name|proxyConnector
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setBlackListPatterns
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|proxyConnector
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setWhiteListPatterns
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|proxyConnector
operator|.
name|getWhiteListPatterns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setDisabled
argument_list|(
name|proxyConnector
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setPolicies
argument_list|(
operator|new
name|HashMap
argument_list|(
name|proxyConnector
operator|.
name|getPolicies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|(
name|proxyConnector
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setProxyId
argument_list|(
name|proxyConnector
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setSourceRepoId
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnectorConfiguration
operator|.
name|setTargetRepoId
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|proxyConnectorConfiguration
return|;
block|}
specifier|protected
name|void
name|validateProxyConnector
parameter_list|(
name|ProxyConnector
name|proxyConnector
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
comment|// validate source a Managed target a Remote
if|if
condition|(
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"non valid ProxyConnector sourceRepo with id "
operator|+
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
operator|+
literal|" is not a ManagedRepository"
argument_list|)
throw|;
block|}
if|if
condition|(
name|remoteRepositoryAdmin
operator|.
name|getRemoteRepository
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"non valid ProxyConnector sourceRepo with id "
operator|+
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
operator|+
literal|" is not a RemoteRepository"
argument_list|)
throw|;
block|}
comment|// FIXME validate NetworkProxyConfiguration too
block|}
block|}
end_class

end_unit

