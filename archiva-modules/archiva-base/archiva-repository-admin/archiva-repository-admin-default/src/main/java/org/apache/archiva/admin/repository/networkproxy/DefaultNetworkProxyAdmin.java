begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|networkproxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|networkproxy
operator|.
name|NetworkProxyAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|NetworkProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M1  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"networkProxyAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultNetworkProxyAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|NetworkProxyAdmin
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|NetworkProxy
argument_list|>
name|getNetworkProxies
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|List
argument_list|<
name|NetworkProxy
argument_list|>
name|networkProxies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getNetworkProxies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NetworkProxyConfiguration
name|networkProxyConfiguration
range|:
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getNetworkProxies
argument_list|()
control|)
block|{
name|networkProxies
operator|.
name|add
argument_list|(
name|getNetworkProxy
argument_list|(
name|networkProxyConfiguration
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|networkProxies
return|;
block|}
annotation|@
name|Override
specifier|public
name|NetworkProxy
name|getNetworkProxy
parameter_list|(
name|String
name|networkProxyId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
for|for
control|(
name|NetworkProxy
name|networkProxy
range|:
name|getNetworkProxies
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|networkProxyId
argument_list|,
name|networkProxy
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|networkProxy
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNetworkProxy
parameter_list|(
name|NetworkProxy
name|networkProxy
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|networkProxy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|getNetworkProxy
argument_list|(
name|networkProxy
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"cannot add NetworkProxy with id "
operator|+
name|networkProxy
operator|.
name|getId
argument_list|()
operator|+
literal|" already exist"
argument_list|)
throw|;
block|}
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|addNetworkProxy
argument_list|(
name|getNetworkProxyConfiguration
argument_list|(
name|networkProxy
argument_list|)
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|networkProxy
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_NETWORK_PROXY
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNetworkProxy
parameter_list|(
name|NetworkProxy
name|networkProxy
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|networkProxy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|getNetworkProxy
argument_list|(
name|networkProxy
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"cannot update NetworkProxy with id "
operator|+
name|networkProxy
operator|.
name|getId
argument_list|()
operator|+
literal|" as not exist"
argument_list|)
throw|;
block|}
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|NetworkProxyConfiguration
name|networkProxyConfiguration
init|=
name|getNetworkProxyConfiguration
argument_list|(
name|networkProxy
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|removeNetworkProxy
argument_list|(
name|networkProxyConfiguration
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addNetworkProxy
argument_list|(
name|networkProxyConfiguration
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|networkProxy
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|MODIFY_NETWORK_PROXY
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteNetworkProxy
parameter_list|(
name|String
name|networkProxyId
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|NetworkProxy
name|networkProxy
init|=
name|getNetworkProxy
argument_list|(
name|networkProxyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkProxy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"cannot delete NetworkProxy with id "
operator|+
name|networkProxyId
operator|+
literal|" as not exist"
argument_list|)
throw|;
block|}
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|NetworkProxyConfiguration
name|networkProxyConfiguration
init|=
name|getNetworkProxyConfiguration
argument_list|(
name|networkProxy
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|removeNetworkProxy
argument_list|(
name|networkProxyConfiguration
argument_list|)
expr_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|rrc
range|:
name|configuration
operator|.
name|getRemoteRepositories
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|rrc
operator|.
name|getRemoteDownloadNetworkProxyId
argument_list|()
argument_list|,
name|networkProxyId
argument_list|)
condition|)
block|{
name|rrc
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|triggerAuditEvent
argument_list|(
name|networkProxy
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_NETWORK_PROXY
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NetworkProxy
name|getNetworkProxy
parameter_list|(
name|NetworkProxyConfiguration
name|networkProxyConfiguration
parameter_list|)
block|{
return|return
name|networkProxyConfiguration
operator|==
literal|null
condition|?
literal|null
else|:
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|networkProxyConfiguration
argument_list|,
name|NetworkProxy
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|NetworkProxyConfiguration
name|getNetworkProxyConfiguration
parameter_list|(
name|NetworkProxy
name|networkProxy
parameter_list|)
block|{
return|return
name|networkProxy
operator|==
literal|null
condition|?
literal|null
else|:
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|networkProxy
argument_list|,
name|NetworkProxyConfiguration
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

