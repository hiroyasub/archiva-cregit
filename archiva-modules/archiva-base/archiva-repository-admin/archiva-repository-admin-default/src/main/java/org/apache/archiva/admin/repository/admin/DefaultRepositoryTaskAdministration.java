begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|admin
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|admin
operator|.
name|RepositoryTaskAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|IndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|MetadataScanTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RepositoryTaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ScanStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskQueueExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|model
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|ArtifactIndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|IndexingArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryTaskAdministration#default"
argument_list|)
specifier|public
class|class
name|DefaultRepositoryTaskAdministration
implements|implements
name|RepositoryTaskAdministration
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRepositoryTaskAdministration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
specifier|final
name|TaskQueueExecutor
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexingTaskExecutor
decl_stmt|;
specifier|final
name|TaskQueueExecutor
argument_list|<
name|RepositoryTask
argument_list|>
name|scanningTaskExecutor
decl_stmt|;
specifier|private
specifier|final
name|RepositoryArchivaTaskScheduler
name|repositoryArchivaTaskScheduler
decl_stmt|;
specifier|private
specifier|final
name|IndexingArchivaTaskScheduler
name|indexingArchivaTaskScheduler
decl_stmt|;
specifier|public
name|DefaultRepositoryTaskAdministration
parameter_list|(
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|,
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"taskQueueExecutor#indexing"
argument_list|)
name|TaskQueueExecutor
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexingTaskExecutor
parameter_list|,
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"taskQueueExecutor#repository-scanning"
argument_list|)
name|TaskQueueExecutor
argument_list|<
name|RepositoryTask
argument_list|>
name|scanningTaskExecutor
parameter_list|,
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
name|RepositoryArchivaTaskScheduler
name|repositoryArchivaTaskScheduler
parameter_list|,
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#indexing"
argument_list|)
name|IndexingArchivaTaskScheduler
name|indexingArchivaTaskScheduler
parameter_list|)
block|{
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
name|this
operator|.
name|indexingTaskExecutor
operator|=
name|indexingTaskExecutor
expr_stmt|;
name|this
operator|.
name|scanningTaskExecutor
operator|=
name|scanningTaskExecutor
expr_stmt|;
name|this
operator|.
name|repositoryArchivaTaskScheduler
operator|=
name|repositoryArchivaTaskScheduler
expr_stmt|;
name|this
operator|.
name|indexingArchivaTaskScheduler
operator|=
name|indexingArchivaTaskScheduler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scheduleFullScan
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.id.invalid"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.not_found"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
name|ArtifactIndexingTask
name|task
init|=
operator|new
name|ArtifactIndexingTask
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|,
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|FINISH
argument_list|,
name|repository
operator|.
name|getIndexingContext
argument_list|( )
argument_list|)
decl_stmt|;
name|task
operator|.
name|setExecuteOnEntireRepo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOnlyUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|indexingArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|repositoryArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
operator|new
name|RepositoryTask
argument_list|(
name|repositoryId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not queue the task: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_queue_error"
argument_list|,
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scheduleIndexFullScan
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.id.invalid"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.not_found"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
name|ArtifactIndexingTask
name|task
init|=
operator|new
name|ArtifactIndexingTask
argument_list|(
name|repository
argument_list|,
literal|null
argument_list|,
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|FINISH
argument_list|,
name|repository
operator|.
name|getIndexingContext
argument_list|( )
argument_list|)
decl_stmt|;
name|task
operator|.
name|setExecuteOnEntireRepo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOnlyUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|indexingArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not queue the task: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_queue_error"
argument_list|,
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scheduleIndexScan
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|relativePath
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.id.invalid"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.not_found"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
name|StorageAsset
name|asset
init|=
name|repository
operator|.
name|getAsset
argument_list|(
name|relativePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|asset
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.file.not_found"
argument_list|,
name|repositoryId
argument_list|,
name|relativePath
argument_list|)
throw|;
block|}
name|ArtifactIndexingTask
name|task
init|=
operator|new
name|ArtifactIndexingTask
argument_list|(
name|repository
argument_list|,
name|asset
operator|.
name|getFilePath
argument_list|( )
argument_list|,
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|FINISH
argument_list|,
name|repository
operator|.
name|getIndexingContext
argument_list|( )
argument_list|)
decl_stmt|;
name|task
operator|.
name|setExecuteOnEntireRepo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOnlyUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|indexingArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not queue the task: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_queue_error"
argument_list|,
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scheduleMetadataFullScan
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.id.invalid"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.not_found"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
name|repositoryArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
operator|new
name|RepositoryTask
argument_list|(
name|repositoryId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not queue the task: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_queue_error"
argument_list|,
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scheduleMetadataUpdateScan
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.id.invalid"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.not_found"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
name|repositoryArchivaTaskScheduler
operator|.
name|queueTask
argument_list|(
operator|new
name|RepositoryTask
argument_list|(
name|repositoryId
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not queue the task: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_queue_error"
argument_list|,
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|MetadataScanTask
name|getMetadataScanTaskInfo
parameter_list|(
name|RepositoryTask
name|repositoryTask
parameter_list|)
block|{
name|MetadataScanTask
name|scanTask
init|=
operator|new
name|MetadataScanTask
argument_list|( )
decl_stmt|;
name|scanTask
operator|.
name|setFullScan
argument_list|(
name|repositoryTask
operator|.
name|isScanAll
argument_list|()
argument_list|)
expr_stmt|;
name|scanTask
operator|.
name|setUpdateRelatedArtifacts
argument_list|(
name|repositoryTask
operator|.
name|isUpdateRelatedArtifacts
argument_list|()
argument_list|)
expr_stmt|;
name|StorageAsset
name|file
init|=
name|repositoryTask
operator|.
name|getResourceFile
argument_list|( )
decl_stmt|;
name|scanTask
operator|.
name|setResource
argument_list|(
name|repositoryTask
operator|.
name|getResourceFile
argument_list|( )
operator|==
literal|null
condition|?
literal|""
else|:
name|repositoryTask
operator|.
name|getResourceFile
argument_list|()
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|scanTask
operator|.
name|setMaxExecutionTimeMs
argument_list|(
name|repositoryTask
operator|.
name|getMaxExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
name|scanTask
operator|.
name|setRepositoryId
argument_list|(
name|repositoryTask
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|scanTask
return|;
block|}
specifier|public
specifier|static
name|IndexingTask
name|getIndexingTaskInfo
parameter_list|(
name|ArtifactIndexingTask
name|repositoryTask
parameter_list|)
block|{
name|IndexingTask
name|indexingTask
init|=
operator|new
name|IndexingTask
argument_list|( )
decl_stmt|;
name|indexingTask
operator|.
name|setFullScan
argument_list|(
name|repositoryTask
operator|.
name|isExecuteOnEntireRepo
argument_list|()
argument_list|)
expr_stmt|;
name|indexingTask
operator|.
name|setUpdateOnly
argument_list|(
name|repositoryTask
operator|.
name|isOnlyUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|indexingTask
operator|.
name|setResource
argument_list|(
name|repositoryTask
operator|.
name|getResourceFile
argument_list|( )
operator|==
literal|null
condition|?
literal|""
else|:
name|repositoryTask
operator|.
name|getResourceFile
argument_list|()
operator|.
name|toString
argument_list|( )
argument_list|)
expr_stmt|;
name|indexingTask
operator|.
name|setMaxExecutionTimeMs
argument_list|(
name|repositoryTask
operator|.
name|getMaxExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
name|indexingTask
operator|.
name|setRepositoryId
argument_list|(
name|repositoryTask
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|indexingTask
return|;
block|}
specifier|public
name|void
name|updateScanInfo
parameter_list|(
name|ScanStatus
name|scanStatus
parameter_list|,
name|RepositoryTask
name|runningRepositoryTask
parameter_list|,
name|List
argument_list|<
name|RepositoryTask
argument_list|>
name|taskQueue
parameter_list|)
block|{
name|List
argument_list|<
name|MetadataScanTask
argument_list|>
name|newScanQueue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
if|if
condition|(
name|runningRepositoryTask
operator|!=
literal|null
condition|)
block|{
name|MetadataScanTask
name|taskInfo
init|=
name|getMetadataScanTaskInfo
argument_list|(
name|runningRepositoryTask
argument_list|)
decl_stmt|;
name|taskInfo
operator|.
name|setRunning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newScanQueue
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|taskInfo
argument_list|)
expr_stmt|;
block|}
name|newScanQueue
operator|.
name|addAll
argument_list|(
name|taskQueue
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|task
lambda|->
name|getMetadataScanTaskInfo
argument_list|(
name|task
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|scanStatus
operator|.
name|setScanQueue
argument_list|(
name|newScanQueue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateIndexInfo
parameter_list|(
name|ScanStatus
name|scanStatus
parameter_list|,
name|ArtifactIndexingTask
name|runningIndexingTask
parameter_list|,
name|List
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|taskQueue
parameter_list|)
block|{
name|List
argument_list|<
name|IndexingTask
argument_list|>
name|newIndexQueue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(  )
decl_stmt|;
if|if
condition|(
name|runningIndexingTask
operator|!=
literal|null
condition|)
block|{
name|IndexingTask
name|taskInfo
init|=
name|getIndexingTaskInfo
argument_list|(
name|runningIndexingTask
argument_list|)
decl_stmt|;
name|taskInfo
operator|.
name|setRunning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newIndexQueue
operator|.
name|add
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
block|}
name|newIndexQueue
operator|.
name|addAll
argument_list|(
name|taskQueue
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|task
lambda|->
name|getIndexingTaskInfo
argument_list|(
name|task
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|scanStatus
operator|.
name|setIndexingQueue
argument_list|(
name|newIndexQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ScanStatus
name|getCurrentScanStatus
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.id.invalid"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repository
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.not_found"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
name|ScanStatus
name|status
init|=
operator|new
name|ScanStatus
argument_list|( )
decl_stmt|;
try|try
block|{
name|RepositoryTask
name|scanTask
init|=
name|scanningTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
if|if
condition|(
name|scanTask
operator|!=
literal|null
operator|&&
operator|!
name|repositoryId
operator|.
name|equals
argument_list|(
name|scanTask
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
condition|)
block|{
name|scanTask
operator|=
literal|null
expr_stmt|;
block|}
name|ArtifactIndexingTask
name|indexTask
init|=
name|indexingTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
if|if
condition|(
name|indexTask
operator|!=
literal|null
operator|&&
operator|!
name|repositoryId
operator|.
name|equals
argument_list|(
name|indexTask
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
condition|)
block|{
name|indexTask
operator|=
literal|null
expr_stmt|;
block|}
name|updateScanInfo
argument_list|(
name|status
argument_list|,
name|scanTask
argument_list|,
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|repositoryId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getRepositoryId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|updateIndexInfo
argument_list|(
name|status
argument_list|,
name|indexTask
argument_list|,
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|repositoryId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get task information: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_retrieval_failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ScanStatus
name|getCurrentScanStatus
parameter_list|( )
throws|throws
name|RepositoryAdminException
block|{
name|ScanStatus
name|status
init|=
operator|new
name|ScanStatus
argument_list|( )
decl_stmt|;
try|try
block|{
name|RepositoryTask
name|scanTask
init|=
name|scanningTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
name|ArtifactIndexingTask
name|indexTask
init|=
name|indexingTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
name|updateScanInfo
argument_list|(
name|status
argument_list|,
name|scanTask
argument_list|,
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexInfo
argument_list|(
name|status
argument_list|,
name|indexTask
argument_list|,
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get task information: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.scan.task_retrieval_failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RepositoryTaskInfo
argument_list|>
name|cancelTasks
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|ArrayList
argument_list|<
name|RepositoryTaskInfo
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|resultList
operator|.
name|addAll
argument_list|(
name|cancelScanTasks
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
expr_stmt|;
name|resultList
operator|.
name|addAll
argument_list|(
name|cancelIndexTasks
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resultList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RepositoryTaskInfo
argument_list|>
name|cancelScanTasks
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|RepositoryTaskInfo
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|List
argument_list|<
name|RepositoryTask
argument_list|>
name|removeTasks
init|=
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|repositoryId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|removeAll
argument_list|(
name|removeTasks
argument_list|)
expr_stmt|;
name|RepositoryTask
name|currentTask
init|=
name|scanningTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
if|if
condition|(
name|currentTask
operator|!=
literal|null
operator|&&
name|repositoryId
operator|.
name|equals
argument_list|(
name|currentTask
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
condition|)
block|{
name|scanningTaskExecutor
operator|.
name|cancelTask
argument_list|(
name|currentTask
argument_list|)
expr_stmt|;
name|resultList
operator|.
name|add
argument_list|(
name|getMetadataScanTaskInfo
argument_list|(
name|currentTask
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultList
operator|.
name|addAll
argument_list|(
name|removeTasks
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|task
lambda|->
name|getMetadataScanTaskInfo
argument_list|(
name|task
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resultList
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.task.dequeue_failed"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RepositoryTaskInfo
argument_list|>
name|cancelIndexTasks
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|RepositoryTaskInfo
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|List
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|removeTasks
init|=
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|getQueueSnapshot
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|repositoryId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
decl_stmt|;
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
operator|.
name|removeAll
argument_list|(
name|removeTasks
argument_list|)
expr_stmt|;
name|ArtifactIndexingTask
name|currentTask
init|=
name|indexingTaskExecutor
operator|.
name|getCurrentTask
argument_list|( )
decl_stmt|;
if|if
condition|(
name|currentTask
operator|!=
literal|null
operator|&&
name|repositoryId
operator|.
name|equals
argument_list|(
name|currentTask
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
condition|)
block|{
name|indexingTaskExecutor
operator|.
name|cancelTask
argument_list|(
name|currentTask
argument_list|)
expr_stmt|;
name|resultList
operator|.
name|add
argument_list|(
name|getIndexingTaskInfo
argument_list|(
name|currentTask
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultList
operator|.
name|addAll
argument_list|(
name|removeTasks
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|task
lambda|->
name|getIndexingTaskInfo
argument_list|(
name|task
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resultList
return|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
throw|throw
name|RepositoryAdminException
operator|.
name|ofKey
argument_list|(
literal|"repository.task.dequeue_failed"
argument_list|,
name|repositoryId
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

