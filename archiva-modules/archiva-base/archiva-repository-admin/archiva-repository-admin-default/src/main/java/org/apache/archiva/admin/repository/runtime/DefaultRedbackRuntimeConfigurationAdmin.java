begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|runtime
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|LdapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|LdapGroupMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RedbackRuntimeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|runtime
operator|.
name|RedbackRuntimeConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|util
operator|.
name|ConfigMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|configuration
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|configuration
operator|.
name|UserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|configuration
operator|.
name|UserConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|configuration
operator|.
name|UserConfigurationKeys
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M4  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"redbackRuntimeConfigurationAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultRedbackRuntimeConfigurationAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|RedbackRuntimeConfigurationAdmin
implements|,
name|UserConfiguration
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|private
name|UserConfiguration
name|userConfiguration
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|LDAP_PROPERTIES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConfigMapper
argument_list|<
name|LdapConfiguration
argument_list|,
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
argument_list|>
name|LDAP_MAPPER
init|=
operator|new
name|ConfigMapper
argument_list|( )
decl_stmt|;
static|static
block|{
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_HOSTNAME
argument_list|,
name|LdapConfiguration
operator|::
name|getHostName
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_CONTEX_FACTORY
argument_list|,
name|LdapConfiguration
operator|::
name|getContextFactory
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_PASSWORD
argument_list|,
name|LdapConfiguration
operator|::
name|getPassword
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_AUTHENTICATION_METHOD
argument_list|,
name|LdapConfiguration
operator|::
name|getAuthenticationMethod
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_BASEDN
argument_list|,
name|LdapConfiguration
operator|::
name|getBaseDn
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_GROUPS_BASEDN
argument_list|,
name|LdapConfiguration
operator|::
name|getBaseGroupsDn
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addStringMapping
argument_list|(
name|LDAP_BINDDN
argument_list|,
name|LdapConfiguration
operator|::
name|getBindDn
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addPrefixStringMapping
argument_list|(
name|LDAP_GROUPS_ROLE_START_KEY
argument_list|,
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
name|mapping
parameter_list|)
lambda|->
block|{
name|int
name|index
init|=
name|mapping
operator|.
name|indexOf
argument_list|(
operator|new
name|LdapGroupMapping
argument_list|(
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|attributeName
argument_list|,
name|LDAP_GROUPS_ROLE_START_KEY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRoleNames
argument_list|()
argument_list|,
literal|','
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addIntMapping
argument_list|(
name|LDAP_PORT
argument_list|,
name|LdapConfiguration
operator|::
name|getPort
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addBooleanMapping
argument_list|(
name|LDAP_SSL
argument_list|,
name|LdapConfiguration
operator|::
name|isSsl
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addBooleanMapping
argument_list|(
name|LDAP_WRITABLE
argument_list|,
name|LdapConfiguration
operator|::
name|isWritable
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addBooleanMapping
argument_list|(
name|LDAP_GROUPS_USE_ROLENAME
argument_list|,
name|LdapConfiguration
operator|::
name|isUseRoleNameAsGroup
argument_list|)
expr_stmt|;
name|LDAP_MAPPER
operator|.
name|addBooleanMapping
argument_list|(
name|LDAP_BIND_AUTHENTICATOR_ENABLED
argument_list|,
name|LdapConfiguration
operator|::
name|isBindAuthenticatorEnabled
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Cache
name|usersCache
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|DefaultRedbackRuntimeConfigurationAdmin
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|,
comment|//
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"userConfiguration#redback"
argument_list|)
comment|//
name|UserConfiguration
name|userConfiguration
parameter_list|,
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"cache#users"
argument_list|)
name|Cache
name|usersCache
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
name|this
operator|.
name|userConfiguration
operator|=
name|userConfiguration
expr_stmt|;
name|this
operator|.
name|usersCache
operator|=
name|usersCache
expr_stmt|;
block|}
annotation|@
name|PostConstruct
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|UserConfigurationException
block|{
try|try
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|RedbackRuntimeConfiguration
argument_list|,
name|LdapConfiguration
argument_list|>
name|kk
init|=
name|RedbackRuntimeConfiguration
operator|::
name|getLdapConfiguration
decl_stmt|;
comment|// migrate or not data from redback
if|if
condition|(
operator|!
name|redbackRuntimeConfiguration
operator|.
name|isMigratedFromRedbackConfiguration
argument_list|()
condition|)
block|{
comment|// not migrated so build a new fresh one
name|redbackRuntimeConfiguration
operator|=
operator|new
name|RedbackRuntimeConfiguration
argument_list|()
expr_stmt|;
comment|// so migrate if available
name|String
name|userManagerImpl
init|=
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|USER_MANAGER_IMPL
argument_list|,
comment|//
name|DEFAULT_USER_MANAGER_IMPL
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|userManagerImpl
argument_list|)
condition|)
block|{
name|String
index|[]
name|impls
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|userManagerImpl
argument_list|,
literal|','
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|impl
range|:
name|impls
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdo"
argument_list|,
name|impl
argument_list|)
condition|)
block|{
name|impl
operator|=
name|DEFAULT_USER_MANAGER_IMPL
expr_stmt|;
block|}
name|redbackRuntimeConfiguration
operator|.
name|getUserManagerImpls
argument_list|()
operator|.
name|add
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|redbackRuntimeConfiguration
operator|.
name|getUserManagerImpls
argument_list|()
operator|.
name|add
argument_list|(
name|DEFAULT_USER_MANAGER_IMPL
argument_list|)
expr_stmt|;
block|}
name|String
name|rbacManagerImpls
init|=
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|RBAC_MANAGER_IMPL
argument_list|,
comment|//
name|DEFAULT_RBAC_MANAGER_IMPL
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|rbacManagerImpls
argument_list|)
condition|)
block|{
name|String
index|[]
name|impls
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|rbacManagerImpls
argument_list|,
literal|','
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|impl
range|:
name|impls
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdo"
argument_list|,
name|impl
argument_list|)
condition|)
block|{
name|impl
operator|=
name|DEFAULT_RBAC_MANAGER_IMPL
expr_stmt|;
block|}
name|redbackRuntimeConfiguration
operator|.
name|getRbacManagerImpls
argument_list|()
operator|.
name|add
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|redbackRuntimeConfiguration
operator|.
name|getRbacManagerImpls
argument_list|()
operator|.
name|add
argument_list|(
name|DEFAULT_RBAC_MANAGER_IMPL
argument_list|)
expr_stmt|;
block|}
comment|// now ldap
name|LdapConfiguration
name|ldapConfiguration
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldapConfiguration
operator|==
literal|null
condition|)
block|{
name|ldapConfiguration
operator|=
operator|new
name|LdapConfiguration
argument_list|()
expr_stmt|;
name|redbackRuntimeConfiguration
operator|.
name|setLdapConfiguration
argument_list|(
name|ldapConfiguration
argument_list|)
expr_stmt|;
block|}
name|ldapConfiguration
operator|.
name|setHostName
argument_list|(
name|userConfiguration
operator|.
name|getString
argument_list|(
name|LDAP_HOSTNAME
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setPort
argument_list|(
name|userConfiguration
operator|.
name|getInt
argument_list|(
name|LDAP_PORT
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setSsl
argument_list|(
name|userConfiguration
operator|.
name|getBoolean
argument_list|(
name|LDAP_SSL
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setBaseDn
argument_list|(
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|LDAP_BASEDN
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setBaseGroupsDn
argument_list|(
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|LDAP_GROUPS_BASEDN
argument_list|,
name|ldapConfiguration
operator|.
name|getBaseDn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setContextFactory
argument_list|(
name|userConfiguration
operator|.
name|getString
argument_list|(
name|LDAP_CONTEX_FACTORY
argument_list|,
name|isSunContextFactoryAvailable
argument_list|()
condition|?
literal|"com.sun.jndi.ldap.LdapCtxFactory"
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setBindDn
argument_list|(
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|LDAP_BINDDN
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setPassword
argument_list|(
name|userConfiguration
operator|.
name|getString
argument_list|(
name|LDAP_PASSWORD
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setAuthenticationMethod
argument_list|(
name|userConfiguration
operator|.
name|getString
argument_list|(
name|LDAP_AUTHENTICATION_METHOD
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setWritable
argument_list|(
name|userConfiguration
operator|.
name|getBoolean
argument_list|(
name|LDAP_WRITABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ldapConfiguration
operator|.
name|setUseRoleNameAsGroup
argument_list|(
name|userConfiguration
operator|.
name|getBoolean
argument_list|(
name|LDAP_GROUPS_USE_ROLENAME
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ldapBindAuthenticatorEnabled
init|=
name|userConfiguration
operator|.
name|getBoolean
argument_list|(
name|LDAP_BIND_AUTHENTICATOR_ENABLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ldapConfiguration
operator|.
name|setBindAuthenticatorEnabled
argument_list|(
name|ldapBindAuthenticatorEnabled
argument_list|)
expr_stmt|;
comment|// LDAP groups mapping reading !!
comment|// UserConfigurationKeys.LDAP_GROUPS_ROLE_START_KEY
comment|// userConfiguration.getKeys()
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|userConfiguration
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
name|ldapGroupMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LDAP_GROUPS_ROLE_START_KEY
argument_list|)
condition|)
block|{
name|String
name|group
init|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|key
argument_list|,
name|LDAP_GROUPS_ROLE_START_KEY
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
index|[]
name|roles
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|val
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|ldapGroupMappings
operator|.
name|add
argument_list|(
operator|new
name|LdapGroupMapping
argument_list|(
name|group
argument_list|,
name|roles
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|redbackRuntimeConfiguration
operator|.
name|setLdapGroupMappings
argument_list|(
name|ldapGroupMappings
argument_list|)
expr_stmt|;
name|redbackRuntimeConfiguration
operator|.
name|setMigratedFromRedbackConfiguration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
comment|// we must ensure userManagerImpls list is not empty if so put at least jdo one !
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUserManagerImpls
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"redbackRuntimeConfiguration with empty userManagerImpls so force at least jdo implementation !"
argument_list|)
expr_stmt|;
name|redbackRuntimeConfiguration
operator|.
name|getUserManagerImpls
argument_list|()
operator|.
name|add
argument_list|(
literal|"jdo"
argument_list|)
expr_stmt|;
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"using userManagerImpls: {}"
argument_list|,
name|redbackRuntimeConfiguration
operator|.
name|getUserManagerImpls
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we ensure rbacManagerImpls is not empty if so put at least cached
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getRbacManagerImpls
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"redbackRuntimeConfiguration with empty rbacManagerImpls so force at least cached implementation !"
argument_list|)
expr_stmt|;
name|redbackRuntimeConfiguration
operator|.
name|getRbacManagerImpls
argument_list|()
operator|.
name|add
argument_list|(
literal|"cached"
argument_list|)
expr_stmt|;
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"using rbacManagerImpls: {}"
argument_list|,
name|redbackRuntimeConfiguration
operator|.
name|getRbacManagerImpls
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|save
init|=
literal|false
decl_stmt|;
comment|// NPE free
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|setUsersCacheConfiguration
argument_list|(
operator|new
name|CacheConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if -1 it means non initialized to take values from the spring bean
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getTimeToIdleSeconds
argument_list|()
operator|<
literal|0
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|setTimeToIdleSeconds
argument_list|(
name|usersCache
operator|.
name|getTimeToIdleSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|=
literal|true
expr_stmt|;
block|}
name|usersCache
operator|.
name|setTimeToIdleSeconds
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getTimeToIdleSeconds
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getTimeToLiveSeconds
argument_list|()
operator|<
literal|0
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|setTimeToLiveSeconds
argument_list|(
name|usersCache
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|=
literal|true
expr_stmt|;
block|}
name|usersCache
operator|.
name|setTimeToLiveSeconds
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getMaxElementsInMemory
argument_list|()
operator|<
literal|0
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|setMaxElementsInMemory
argument_list|(
name|usersCache
operator|.
name|getMaxElementsInMemory
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|=
literal|true
expr_stmt|;
block|}
name|usersCache
operator|.
name|setMaxElementsInMemory
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getMaxElementsInMemory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getMaxElementsOnDisk
argument_list|()
operator|<
literal|0
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|setMaxElementsOnDisk
argument_list|(
name|usersCache
operator|.
name|getMaxElementsOnDisk
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|=
literal|true
expr_stmt|;
block|}
name|usersCache
operator|.
name|setMaxElementsOnDisk
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|.
name|getMaxElementsOnDisk
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UserConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isSunContextFactoryAvailable
parameter_list|()
block|{
try|try
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RedbackRuntimeConfiguration
name|getRedbackRuntimeConfiguration
parameter_list|()
block|{
return|return
name|build
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRedbackRuntimeConfiguration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateRedbackRuntimeConfiguration
parameter_list|(
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RedbackRuntimeConfiguration
name|runtimeConfiguration
init|=
name|build
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setRedbackRuntimeConfiguration
argument_list|(
name|runtimeConfiguration
argument_list|)
expr_stmt|;
try|try
block|{
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RedbackRuntimeConfiguration
name|build
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RedbackRuntimeConfiguration
name|runtimeConfiguration
parameter_list|)
block|{
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
init|=
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|runtimeConfiguration
argument_list|,
name|RedbackRuntimeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|runtimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|setLdapConfiguration
argument_list|(
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|runtimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|()
argument_list|,
name|LdapConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runtimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|setUsersCacheConfiguration
argument_list|(
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|runtimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
argument_list|,
name|CacheConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// prevent NPE
name|redbackRuntimeConfiguration
operator|.
name|setLdapConfiguration
argument_list|(
operator|new
name|LdapConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|setUsersCacheConfiguration
argument_list|(
operator|new
name|CacheConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|LdapGroupMapping
argument_list|>
name|mappings
init|=
name|runtimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappings
operator|!=
literal|null
operator|&&
name|mappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
name|ldapGroupMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|LdapGroupMapping
name|mapping
range|:
name|mappings
control|)
block|{
name|ldapGroupMappings
operator|.
name|add
argument_list|(
operator|new
name|LdapGroupMapping
argument_list|(
name|mapping
operator|.
name|getGroup
argument_list|()
argument_list|,
name|mapping
operator|.
name|getRoleNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|redbackRuntimeConfiguration
operator|.
name|setLdapGroupMappings
argument_list|(
name|ldapGroupMappings
argument_list|)
expr_stmt|;
block|}
name|cleanupProperties
argument_list|(
name|redbackRuntimeConfiguration
argument_list|)
expr_stmt|;
return|return
name|redbackRuntimeConfiguration
return|;
block|}
comment|/**      * cleaning from map properties used directly in archiva configuration fields      *      * @param redbackRuntimeConfiguration      */
specifier|private
name|void
name|cleanupProperties
parameter_list|(
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|redbackRuntimeConfiguration
operator|.
name|getConfigurationProperties
argument_list|()
decl_stmt|;
name|LdapConfiguration
name|ldapConf
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|( )
decl_stmt|;
name|LDAP_MAPPER
operator|.
name|getAllAttributes
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|forEach
argument_list|(
name|att
lambda|->
name|properties
operator|.
name|remove
argument_list|(
name|att
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prefixRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|prefixMapping
init|=
name|LDAP_MAPPER
operator|.
name|isPrefixMapping
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixMapping
condition|)
block|{
name|prefixRemove
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"ldap"
argument_list|)
operator|&&
operator|!
name|LDAP_MAPPER
operator|.
name|isMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|ldapConf
operator|.
name|getExtraProperties
argument_list|( )
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|prefixRemove
operator|.
name|stream
argument_list|( )
operator|.
name|forEach
argument_list|(
name|att
lambda|->
name|properties
operator|.
name|remove
argument_list|(
name|att
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RedbackRuntimeConfiguration
name|build
parameter_list|(
name|RedbackRuntimeConfiguration
name|redbackRuntimeConfiguration
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RedbackRuntimeConfiguration
name|res
init|=
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|redbackRuntimeConfiguration
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RedbackRuntimeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|setLdapConfiguration
argument_list|(
operator|new
name|LdapConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setLdapConfiguration
argument_list|(
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getLdapConfiguration
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|LdapConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|redbackRuntimeConfiguration
operator|.
name|setUsersCacheConfiguration
argument_list|(
operator|new
name|CacheConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setUsersCacheConfiguration
argument_list|(
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|redbackRuntimeConfiguration
operator|.
name|getUsersCacheConfiguration
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|CacheConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LdapGroupMapping
argument_list|>
name|ldapGroupMappings
init|=
name|redbackRuntimeConfiguration
operator|.
name|getLdapGroupMappings
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldapGroupMappings
operator|!=
literal|null
operator|&&
name|ldapGroupMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|LdapGroupMapping
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ldapGroupMappings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LdapGroupMapping
name|ldapGroupMapping
range|:
name|ldapGroupMappings
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|LdapGroupMapping
name|mapping
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|LdapGroupMapping
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setGroup
argument_list|(
name|ldapGroupMapping
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setRoleNames
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ldapGroupMapping
operator|.
name|getRoleNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setLdapGroupMappings
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|// wrapper for UserConfiguration to intercept values (and store it not yet migrated)
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isStringMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
specifier|final
name|LdapConfiguration
name|ldapConf
init|=
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
decl_stmt|;
return|return
name|LDAP_MAPPER
operator|.
name|getString
argument_list|(
name|key
argument_list|,
name|ldapConf
argument_list|)
return|;
block|}
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isPrefixMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getPrefixString
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|getLdapGroupMappings
argument_list|( )
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getLdapConfiguration
argument_list|()
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
operator|.
name|getExtraProperties
argument_list|( )
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
if|if
condition|(
name|USER_MANAGER_IMPL
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// possible false for others than archiva user manager
return|return
name|conf
operator|.
name|getUserManagerImpls
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
name|String
name|value
init|=
name|userConfiguration
operator|.
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
specifier|final
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isStringMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
specifier|final
name|LdapConfiguration
name|ldapConf
init|=
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
decl_stmt|;
return|return
name|LDAP_MAPPER
operator|.
name|getString
argument_list|(
name|key
argument_list|,
name|ldapConf
argument_list|)
return|;
block|}
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isPrefixMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getPrefixString
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|getLdapGroupMappings
argument_list|( )
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getLdapConfiguration
argument_list|()
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
operator|.
name|getExtraProperties
argument_list|( )
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
name|String
name|value
init|=
name|userConfiguration
operator|.
name|getString
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isIntMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
name|int
name|value
init|=
name|userConfiguration
operator|.
name|getInt
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
specifier|final
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isIntMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
name|int
name|value
init|=
name|userConfiguration
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isBooleanMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|value
init|=
name|userConfiguration
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isBooleanMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|getLdapConfiguration
argument_list|( )
argument_list|)
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|value
init|=
name|userConfiguration
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getList
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|RedbackRuntimeConfiguration
name|conf
init|=
name|getRedbackRuntimeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|value
init|=
name|userConfiguration
operator|.
name|getList
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|conf
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
expr_stmt|;
try|try
block|{
name|updateRedbackRuntimeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"fail to save RedbackRuntimeConfiguration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConcatenatedList
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|LDAP_MAPPER
operator|.
name|isStringMapping
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|LDAP_MAPPER
operator|.
name|getString
argument_list|(
name|key
argument_list|,
name|getRedbackRuntimeConfiguration
argument_list|()
operator|.
name|getLdapConfiguration
argument_list|()
argument_list|)
return|;
block|}
return|return
name|userConfiguration
operator|.
name|getConcatenatedList
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|userConfiguration
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keysSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|keysSet
operator|.
name|addAll
argument_list|(
name|getRedbackRuntimeConfiguration
argument_list|()
operator|.
name|getConfigurationProperties
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keysSet
return|;
block|}
block|}
end_class

end_unit

