begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|managed
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|MavenIndexerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|UnsupportedExistingLuceneIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * FIXME review the staging mechanism to have a per user session one  *  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"managedRepositoryAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultManagedRepositoryAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|ManagedRepositoryAdmin
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAGE_REPO_ID_END
init|=
literal|"-stage"
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositorySessionFactory
name|repositorySessionFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|PlexusSisuBridge
name|plexusSisuBridge
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|MavenIndexerUtils
name|mavenIndexerUtils
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|RoleManager
name|roleManager
decl_stmt|;
comment|// fields
name|List
argument_list|<
name|?
extends|extends
name|IndexCreator
argument_list|>
name|indexCreators
decl_stmt|;
name|NexusIndexer
name|indexer
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
name|indexCreators
operator|=
name|mavenIndexerUtils
operator|.
name|getAllIndexCreators
argument_list|()
expr_stmt|;
name|indexer
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|NexusIndexer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlexusSisuBridgeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// initialize index context on start
for|for
control|(
name|ManagedRepository
name|managedRepository
range|:
name|getManagedRepositories
argument_list|()
control|)
block|{
name|createIndexContext
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
comment|// close index on shutdown
for|for
control|(
name|ManagedRepository
name|managedRepository
range|:
name|getManagedRepositories
argument_list|()
control|)
block|{
name|IndexingContext
name|context
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|indexer
operator|.
name|removeIndexingContext
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|List
argument_list|<
name|ManagedRepositoryConfiguration
argument_list|>
name|managedRepoConfigs
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getManagedRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedRepoConfigs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|managedRepos
init|=
operator|new
name|ArrayList
argument_list|<
name|ManagedRepository
argument_list|>
argument_list|(
name|managedRepoConfigs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|repoConfig
range|:
name|managedRepoConfigs
control|)
block|{
name|ManagedRepository
name|repo
init|=
operator|new
name|ManagedRepository
argument_list|(
name|repoConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getLocation
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getLayout
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isReleases
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getIndexDir
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isScanned
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getDaysOlder
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|getRetentionCount
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|,
name|repoConfig
operator|.
name|isStageRepoNeeded
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|setDescription
argument_list|(
name|repoConfig
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|repoConfig
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
name|managedRepos
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|managedRepos
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|getManagedRepositoriesAsMap
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|managedRepositories
init|=
name|getManagedRepositories
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|repositoriesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
argument_list|(
name|managedRepositories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ManagedRepository
name|managedRepository
range|:
name|managedRepositories
control|)
block|{
name|repositoriesMap
operator|.
name|put
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
argument_list|)
expr_stmt|;
block|}
return|return
name|repositoriesMap
return|;
block|}
specifier|public
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|repos
init|=
name|getManagedRepositories
argument_list|()
decl_stmt|;
for|for
control|(
name|ManagedRepository
name|repo
range|:
name|repos
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Boolean
name|addManagedRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|boolean
name|needStageRepo
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|basicValidation
argument_list|(
name|managedRepository
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|validateManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|Boolean
name|res
init|=
name|addManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getLayout
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getName
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isReleases
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|needStageRepo
argument_list|,
name|managedRepository
operator|.
name|getCronExpression
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getIndexDirectory
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getDaysOlder
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getRetentionCount
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getDescription
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isScanned
argument_list|()
argument_list|,
name|auditInformation
argument_list|,
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|createIndexContext
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|addManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|layout
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|boolean
name|blockRedeployments
parameter_list|,
name|boolean
name|releasesIncluded
parameter_list|,
name|boolean
name|snapshotsIncluded
parameter_list|,
name|boolean
name|stageRepoNeeded
parameter_list|,
name|String
name|cronExpression
parameter_list|,
name|String
name|indexDir
parameter_list|,
name|int
name|daysOlder
parameter_list|,
name|int
name|retentionCount
parameter_list|,
name|boolean
name|deteleReleasedSnapshots
parameter_list|,
name|String
name|description
parameter_list|,
name|boolean
name|skipPackedIndexCreation
parameter_list|,
name|boolean
name|scanned
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|ManagedRepositoryConfiguration
name|repository
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repository
operator|.
name|setId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setBlockRedeployments
argument_list|(
name|blockRedeployments
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setReleases
argument_list|(
name|releasesIncluded
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setSnapshots
argument_list|(
name|snapshotsIncluded
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setScanned
argument_list|(
name|scanned
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|removeExpressions
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setRefreshCronExpression
argument_list|(
name|cronExpression
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setIndexDir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setDaysOlder
argument_list|(
name|daysOlder
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setRetentionCount
argument_list|(
name|retentionCount
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|deteleReleasedSnapshots
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setIndexDir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|skipPackedIndexCreation
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setStageRepoNeeded
argument_list|(
name|stageRepoNeeded
argument_list|)
expr_stmt|;
try|try
block|{
name|addRepository
argument_list|(
name|repository
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|addRepositoryRoles
argument_list|(
name|repository
argument_list|)
expr_stmt|;
if|if
condition|(
name|stageRepoNeeded
condition|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
name|getStageRepoConfig
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|addRepository
argument_list|(
name|stagingRepository
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|addRepositoryRoles
argument_list|(
name|stagingRepository
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"failed to add repository roles "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"failed to add repository "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//MRM-1342 Repository statistics report doesn't appear to be working correctly
comment|//scan repository when adding of repository is successful
try|try
block|{
if|if
condition|(
name|scanned
condition|)
block|{
name|scanRepository
argument_list|(
name|repoId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// TODO need a better to define scanning or not for staged repo
if|if
condition|(
name|stageRepoNeeded
operator|&&
name|scanned
condition|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
name|getStageRepoConfig
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|scanRepository
argument_list|(
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Unable to scan repository ["
argument_list|)
operator|.
name|append
argument_list|(
name|repoId
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|repository
return|;
block|}
specifier|public
name|Boolean
name|deleteManagedRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|,
name|boolean
name|deleteContent
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|Configuration
name|config
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repository
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"A repository with that id does not exist"
argument_list|)
throw|;
block|}
name|triggerAuditEvent
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|deleteManagedRepository
argument_list|(
name|repository
argument_list|,
name|deleteContent
argument_list|,
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// stage repo exists ?
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findManagedRepositoryById
argument_list|(
name|repositoryId
operator|+
name|STAGE_REPO_ID_END
argument_list|)
decl_stmt|;
if|if
condition|(
name|stagingRepository
operator|!=
literal|null
condition|)
block|{
comment|// do not trigger event when deleting the staged one
name|deleteManagedRepository
argument_list|(
name|stagingRepository
argument_list|,
name|deleteContent
argument_list|,
name|config
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Error saving configuration for delete action"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|private
name|Boolean
name|deleteManagedRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|boolean
name|deleteContent
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|boolean
name|stagedOne
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
name|NexusIndexer
name|nexusIndexer
init|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|NexusIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexingContext
name|context
init|=
name|nexusIndexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
comment|// delete content only if directory exists
name|nexusIndexer
operator|.
name|removeIndexingContext
argument_list|(
name|context
argument_list|,
name|deleteContent
operator|&&
name|context
operator|.
name|getIndexDirectoryFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PlexusSisuBridgeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|stagedOne
condition|)
block|{
name|RepositorySession
name|repositorySession
init|=
name|getRepositorySessionFactory
argument_list|()
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|metadataRepository
operator|.
name|removeRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"call repositoryStatisticsManager.deleteStatistics"
argument_list|)
expr_stmt|;
name|getRepositoryStatisticsManager
argument_list|()
operator|.
name|deleteStatistics
argument_list|(
name|metadataRepository
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
comment|//throw new RepositoryAdminException( e.getMessage(), e );
name|log
operator|.
name|warn
argument_list|(
literal|"skip error during removing repository from MetadatRepository:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|config
operator|.
name|removeManagedRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteContent
condition|)
block|{
comment|// TODO could be async ? as directory can be huge
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Cannot delete repository "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
comment|// olamy: copy list for reading as a unit test in webapp fail with ConcurrentModificationException
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|(
name|config
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|config
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|repoToGroupMap
init|=
name|config
operator|.
name|getRepositoryToGroupMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|repoToGroupMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|repoToGroupMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|repoGroups
init|=
name|repoToGroupMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repoGroup
range|:
name|repoGroups
control|)
block|{
comment|// copy to prevent UnsupportedOperationException
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
init|=
name|config
operator|.
name|findRepositoryGroupById
argument_list|(
name|repoGroup
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|removeRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
name|repos
operator|.
name|remove
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryGroupConfiguration
operator|.
name|setRepositories
argument_list|(
name|repos
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|removeRepositoryRoles
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"fail to remove repository roles for repository "
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|updateManagedRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|boolean
name|needStageRepo
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|,
name|boolean
name|resetStats
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"updateManagedConfiguration repo {} needStage {} resetStats {} "
argument_list|,
name|managedRepository
argument_list|,
name|needStageRepo
argument_list|,
name|resetStats
argument_list|)
expr_stmt|;
comment|// Ensure that the fields are valid.
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|basicValidation
argument_list|(
name|managedRepository
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|validateManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|toremove
init|=
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toremove
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|toremove
argument_list|)
expr_stmt|;
block|}
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
name|getStageRepoConfig
argument_list|(
name|toremove
argument_list|)
decl_stmt|;
comment|// TODO remove content from old if path has changed !!!!!
if|if
condition|(
name|stagingRepository
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|stagingRepository
argument_list|)
expr_stmt|;
block|}
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
init|=
name|addManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getLayout
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getName
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isReleases
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isSnapshots
argument_list|()
argument_list|,
name|needStageRepo
argument_list|,
name|managedRepository
operator|.
name|getCronExpression
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getIndexDirectory
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getDaysOlder
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getRetentionCount
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getDescription
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|isScanned
argument_list|()
argument_list|,
name|auditInformation
argument_list|,
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the repository configuration.
name|RepositorySession
name|repositorySession
init|=
name|getRepositorySessionFactory
argument_list|()
operator|.
name|createSession
argument_list|()
decl_stmt|;
try|try
block|{
name|triggerAuditEvent
argument_list|(
name|managedRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|MODIFY_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|this
operator|.
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resetStats
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"call repositoryStatisticsManager.deleteStatistics"
argument_list|)
expr_stmt|;
name|getRepositoryStatisticsManager
argument_list|()
operator|.
name|deleteStatistics
argument_list|(
name|repositorySession
operator|.
name|getRepository
argument_list|()
argument_list|,
name|managedRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|createIndexContext
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//--------------------------
comment|// utils methods
comment|//--------------------------
specifier|protected
name|void
name|addRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryAdminException
throws|,
name|IOException
block|{
comment|// Normalize the path
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// add appserver.base/repositories
name|file
operator|=
operator|new
name|File
argument_list|(
name|getRegistry
argument_list|()
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|)
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"repositories"
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|repository
operator|.
name|setLocation
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Unable to add repository - no write access, can not create the root directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexingContext
name|createIndexContext
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
comment|// take care first about repository location as can be relative
name|File
name|repositoryDirectory
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryDirectory
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|repositoryDirectory
operator|=
operator|new
name|File
argument_list|(
name|getRegistry
argument_list|()
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|)
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"repositories"
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|repositoryDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|repositoryDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|IndexingContext
name|context
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"skip adding repository indexingContent with id {} as already exists"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
name|String
name|indexDir
init|=
name|repository
operator|.
name|getIndexDirectory
argument_list|()
decl_stmt|;
name|File
name|managedRepository
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|indexDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexDir
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getIndexDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indexDirectory
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
name|repository
operator|.
name|getIndexDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setIndexDirectory
argument_list|(
name|indexDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|managedRepository
argument_list|,
literal|".indexer"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|managedRepository
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|indexDirectory
operator|=
operator|new
name|File
argument_list|(
name|repositoryDirectory
argument_list|,
literal|".indexer"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setIndexDirectory
argument_list|(
name|indexDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|indexDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|indexDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|context
operator|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|indexer
operator|.
name|addIndexingContext
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|managedRepository
argument_list|,
name|indexDirectory
argument_list|,
name|managedRepository
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|indexDirectory
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|indexCreators
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSearchable
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedExistingLuceneIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|getStageRepoConfig
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|stagingRepository
operator|.
name|setId
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
operator|+
name|STAGE_REPO_ID_END
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setName
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
operator|+
name|STAGE_REPO_ID_END
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setBlockRedeployments
argument_list|(
name|repository
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setDaysOlder
argument_list|(
name|repository
operator|.
name|getDaysOlder
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|repository
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
name|path
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|stagingRepository
operator|.
name|setLocation
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
argument_list|)
operator|+
literal|"/"
operator|+
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
decl_stmt|;
comment|// in case of absolute dir do not use the same
if|if
condition|(
name|indexDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|stagingRepository
operator|.
name|setIndexDir
argument_list|(
name|stagingRepository
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/.index"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stagingRepository
operator|.
name|setIndexDir
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|stagingRepository
operator|.
name|setRefreshCronExpression
argument_list|(
name|repository
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setReleases
argument_list|(
name|repository
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setRetentionCount
argument_list|(
name|repository
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setScanned
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setSnapshots
argument_list|(
name|repository
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|repository
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not duplicate description
comment|//stagingRepository.getDescription("")
return|return
name|stagingRepository
return|;
block|}
specifier|public
name|Boolean
name|scanRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|fullScan
parameter_list|)
block|{
if|if
condition|(
name|getRepositoryTaskScheduler
argument_list|()
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"scanning of repository with id {} already scheduled"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
block|}
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
name|fullScan
argument_list|)
expr_stmt|;
try|try
block|{
name|getRepositoryTaskScheduler
argument_list|()
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to schedule scanning of repo with id {}"
argument_list|,
name|repositoryId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|addRepositoryRoles
parameter_list|(
name|ManagedRepositoryConfiguration
name|newRepository
parameter_list|)
throws|throws
name|RoleManagerException
block|{
name|String
name|repoId
init|=
name|newRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// TODO: double check these are configured on start up
comment|// TODO: belongs in the business logic
if|if
condition|(
operator|!
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|createTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|createTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeRepositoryRoles
parameter_list|(
name|ManagedRepositoryConfiguration
name|existingRepository
parameter_list|)
throws|throws
name|RoleManagerException
block|{
name|String
name|repoId
init|=
name|existingRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|removeTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|removeTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"removed user roles associated with repository {}"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------
comment|// setters/getters
comment|//--------------------------
specifier|public
name|RoleManager
name|getRoleManager
parameter_list|()
block|{
return|return
name|roleManager
return|;
block|}
specifier|public
name|void
name|setRoleManager
parameter_list|(
name|RoleManager
name|roleManager
parameter_list|)
block|{
name|this
operator|.
name|roleManager
operator|=
name|roleManager
expr_stmt|;
block|}
specifier|public
name|RepositoryStatisticsManager
name|getRepositoryStatisticsManager
parameter_list|()
block|{
return|return
name|repositoryStatisticsManager
return|;
block|}
specifier|public
name|void
name|setRepositoryStatisticsManager
parameter_list|(
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
parameter_list|)
block|{
name|this
operator|.
name|repositoryStatisticsManager
operator|=
name|repositoryStatisticsManager
expr_stmt|;
block|}
specifier|public
name|RepositorySessionFactory
name|getRepositorySessionFactory
parameter_list|()
block|{
return|return
name|repositorySessionFactory
return|;
block|}
specifier|public
name|void
name|setRepositorySessionFactory
parameter_list|(
name|RepositorySessionFactory
name|repositorySessionFactory
parameter_list|)
block|{
name|this
operator|.
name|repositorySessionFactory
operator|=
name|repositorySessionFactory
expr_stmt|;
block|}
specifier|public
name|RepositoryArchivaTaskScheduler
name|getRepositoryTaskScheduler
parameter_list|()
block|{
return|return
name|repositoryTaskScheduler
return|;
block|}
specifier|public
name|void
name|setRepositoryTaskScheduler
parameter_list|(
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
parameter_list|)
block|{
name|this
operator|.
name|repositoryTaskScheduler
operator|=
name|repositoryTaskScheduler
expr_stmt|;
block|}
specifier|public
name|PlexusSisuBridge
name|getPlexusSisuBridge
parameter_list|()
block|{
return|return
name|plexusSisuBridge
return|;
block|}
specifier|public
name|void
name|setPlexusSisuBridge
parameter_list|(
name|PlexusSisuBridge
name|plexusSisuBridge
parameter_list|)
block|{
name|this
operator|.
name|plexusSisuBridge
operator|=
name|plexusSisuBridge
expr_stmt|;
block|}
specifier|public
name|MavenIndexerUtils
name|getMavenIndexerUtils
parameter_list|()
block|{
return|return
name|mavenIndexerUtils
return|;
block|}
specifier|public
name|void
name|setMavenIndexerUtils
parameter_list|(
name|MavenIndexerUtils
name|mavenIndexerUtils
parameter_list|)
block|{
name|this
operator|.
name|mavenIndexerUtils
operator|=
name|mavenIndexerUtils
expr_stmt|;
block|}
block|}
end_class

end_unit

