begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|managed
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|IndeterminateConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryGroupConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexUpdateFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|facets
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|model
operator|.
name|RepositoryStatisticsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ReleaseScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|ArtifactCleanupFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|StagingRepositoryFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|security
operator|.
name|common
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * FIXME review the staging mechanism to have a per user session one  *  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"managedRepositoryAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultManagedRepositoryAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|ManagedRepositoryAdmin
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAGE_REPO_ID_END
init|=
literal|"-stage"
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"archivaTaskScheduler#repository"
argument_list|)
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
decl_stmt|;
comment|/**      * FIXME: this could be multiple implementations and needs to be configured.      */
annotation|@
name|Inject
specifier|private
name|RepositorySessionFactory
name|repositorySessionFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|RoleManager
name|roleManager
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"cache#namespaces"
argument_list|)
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|namespacesCache
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|IndexManagerFactory
name|indexManagerFactory
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|RoleManagerException
block|{
comment|// initialize index context on start and check roles here
for|for
control|(
name|ManagedRepository
name|managedRepository
range|:
name|getManagedRepositories
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializating {}"
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addRepositoryRoles
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
block|}
comment|/*      * Conversion between the repository from the registry and the serialized DTO for the admin API      */
specifier|private
name|ManagedRepository
name|convertRepo
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repo
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ManagedRepository
name|adminRepo
init|=
operator|new
name|ManagedRepository
argument_list|(
name|getArchivaConfiguration
argument_list|()
operator|.
name|getDefaultLocale
argument_list|()
argument_list|)
decl_stmt|;
name|setBaseRepoAttributes
argument_list|(
name|adminRepo
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setLocation
argument_list|(
name|convertUriToString
argument_list|(
name|repo
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setReleases
argument_list|(
name|repo
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setSnapshots
argument_list|(
name|repo
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
argument_list|)
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setBlockRedeployments
argument_list|(
name|repo
operator|.
name|blocksRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setCronExpression
argument_list|(
name|repo
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|IndexCreationFeature
name|icf
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|adminRepo
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|icf
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adminRepo
operator|.
name|setScanned
argument_list|(
name|repo
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|ArtifactCleanupFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|ArtifactCleanupFeature
name|acf
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|ArtifactCleanupFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|adminRepo
operator|.
name|setRetentionPeriod
argument_list|(
name|acf
operator|.
name|getRetentionPeriod
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setRetentionCount
argument_list|(
name|acf
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|acf
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|StagingRepositoryFeature
name|stf
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|adminRepo
operator|.
name|setStageRepoNeeded
argument_list|(
name|stf
operator|.
name|isStageRepoNeeded
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stf
operator|.
name|getStagingRepository
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|adminRepo
operator|.
name|setStagingRepository
argument_list|(
name|convertRepo
argument_list|(
name|stf
operator|.
name|getStagingRepository
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|adminRepo
return|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|getRepositoryConfiguration
parameter_list|(
name|ManagedRepository
name|repo
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|setBaseRepoAttributes
argument_list|(
name|repoConfig
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setBlockRedeployments
argument_list|(
name|repo
operator|.
name|isBlockRedeployments
argument_list|( )
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setReleases
argument_list|(
name|repo
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setSnapshots
argument_list|(
name|repo
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setScanned
argument_list|(
name|repo
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setLocation
argument_list|(
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|removeExpressions
argument_list|(
name|repo
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRefreshCronExpression
argument_list|(
name|repo
operator|.
name|getCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRetentionPeriod
argument_list|(
name|repo
operator|.
name|getRetentionPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRetentionCount
argument_list|(
name|repo
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|repo
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|repo
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setStageRepoNeeded
argument_list|(
name|repo
operator|.
name|isStageRepoNeeded
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|repoConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ManagedRepository
argument_list|>
name|getManagedRepositories
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
return|return
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|rep
lambda|->
name|this
operator|.
name|convertRepo
argument_list|(
name|rep
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedRepository
argument_list|>
name|getManagedRepositoriesAsMap
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
return|return
name|repositoryRegistry
operator|.
name|getManagedRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|e
lambda|->
name|convertRepo
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|getManagedRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
return|return
name|convertRepo
argument_list|(
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|addManagedRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|boolean
name|needStageRepo
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"addManagedRepository {}, {}, {}"
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|needStageRepo
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|basicValidation
argument_list|(
name|managedRepository
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|validateManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|getRepositoryConfiguration
argument_list|(
name|managedRepository
argument_list|)
decl_stmt|;
if|if
condition|(
name|needStageRepo
condition|)
block|{
name|repoConfig
operator|.
name|setStageRepoNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|newRepo
init|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|repoConfig
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added new repository {}"
argument_list|,
name|newRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|stagingRepo
init|=
literal|null
decl_stmt|;
name|addRepositoryRoles
argument_list|(
name|newRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRepo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|StagingRepositoryFeature
name|stf
init|=
name|newRepo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|stagingRepo
operator|=
name|stf
operator|.
name|getStagingRepository
argument_list|()
expr_stmt|;
if|if
condition|(
name|stf
operator|.
name|isStageRepoNeeded
argument_list|()
operator|&&
name|stagingRepo
operator|!=
literal|null
condition|)
block|{
name|addRepositoryRoles
argument_list|(
name|stagingRepo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|triggerAuditEvent
argument_list|(
name|stagingRepo
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
block|}
block|}
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|//MRM-1342 Repository statistics report doesn't appear to be working correctly
comment|//scan repository when adding of repository is successful
try|try
block|{
if|if
condition|(
name|newRepo
operator|.
name|isScanned
argument_list|()
condition|)
block|{
name|scanRepository
argument_list|(
name|newRepo
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stagingRepo
operator|!=
literal|null
operator|&&
name|stagingRepo
operator|.
name|isScanned
argument_list|()
condition|)
block|{
name|scanRepository
argument_list|(
name|stagingRepo
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to scan repository [{}]: {}"
argument_list|,
name|newRepo
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not add managed repository {}"
operator|+
name|managedRepository
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not add repository "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not add repository roles for repository [{}]: {}"
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not add roles to repository "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|deleteManagedRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|,
name|boolean
name|deleteContent
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|Configuration
name|config
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfig
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Repo location "
operator|+
name|repoConfig
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|stagingRepository
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|stagingRepository
operator|=
name|repo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getStagingRepository
argument_list|()
expr_stmt|;
block|}
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Removal of repository {} failed: {}"
argument_list|,
name|repositoryId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Removal of repository "
operator|+
name|repositoryId
operator|+
literal|" failed."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"A repository with that id does not exist"
argument_list|)
throw|;
block|}
name|triggerAuditEvent
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
if|if
condition|(
name|repoConfig
operator|!=
literal|null
condition|)
block|{
name|deleteManagedRepository
argument_list|(
name|repoConfig
argument_list|,
name|deleteContent
argument_list|,
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// stage repo exists ?
if|if
condition|(
name|stagingRepository
operator|!=
literal|null
condition|)
block|{
comment|// do not trigger event when deleting the staged one
name|ManagedRepositoryConfiguration
name|stagingRepositoryConfig
init|=
name|config
operator|.
name|findManagedRepositoryById
argument_list|(
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|stagingRepository
argument_list|)
expr_stmt|;
if|if
condition|(
name|stagingRepositoryConfig
operator|!=
literal|null
condition|)
block|{
name|deleteManagedRepository
argument_list|(
name|stagingRepositoryConfig
argument_list|,
name|deleteContent
argument_list|,
name|config
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Removal of staging repository {} failed: {}"
argument_list|,
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Error saving configuration for delete action"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
specifier|private
name|Boolean
name|deleteManagedRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|boolean
name|deleteContent
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|boolean
name|stagedOne
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
if|if
condition|(
operator|!
name|stagedOne
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|RepositorySession
name|repositorySession
init|=
name|getRepositorySessionFactory
argument_list|()
operator|.
name|createSession
argument_list|()
init|)
block|{
name|MetadataRepository
name|metadataRepository
init|=
name|repositorySession
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|metadataRepository
operator|.
name|removeRepository
argument_list|(
name|repositorySession
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//invalidate cache
name|namespacesCache
operator|.
name|remove
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
comment|//throw new RepositoryAdminException( e.getMessage(), e );
name|log
operator|.
name|warn
argument_list|(
literal|"skip error during removing repository from MetadataRepository:{}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataSessionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"skip error during removing repository from MetadataRepository:{}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"call repositoryStatisticsManager.deleteStatistics"
argument_list|)
expr_stmt|;
try|try
block|{
name|getRepositoryStatisticsManager
argument_list|( )
operator|.
name|deleteStatistics
argument_list|(
name|repository
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|deleteContent
condition|)
block|{
comment|// TODO could be async ? as directory can be huge
name|Path
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// olamy: copy list for reading as a unit test in webapp fail with ConcurrentModificationException
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|config
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getSourceRepoId
argument_list|()
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|config
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|repoToGroupMap
init|=
name|config
operator|.
name|getRepositoryToGroupMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|repoToGroupMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|repoToGroupMap
operator|.
name|containsKey
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|repoGroups
init|=
name|repoToGroupMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repoGroup
range|:
name|repoGroups
control|)
block|{
comment|// copy to prevent UnsupportedOperationException
name|RepositoryGroupConfiguration
name|repositoryGroupConfiguration
init|=
name|config
operator|.
name|findRepositoryGroupById
argument_list|(
name|repoGroup
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|repositoryGroupConfiguration
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|removeRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
name|repos
operator|.
name|remove
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryGroupConfiguration
operator|.
name|setRepositories
argument_list|(
name|repos
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRepositoryGroup
argument_list|(
name|repositoryGroupConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|removeRepositoryRoles
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"fail to remove repository roles for repository "
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|RepositoryRegistry
name|reg
init|=
name|getRepositoryRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|getManagedRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|reg
operator|.
name|removeRepository
argument_list|(
name|reg
operator|.
name|getManagedRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Removal of repository "
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|" failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|saveConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
name|ArchivaIndexManager
name|getIndexManager
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|repo
init|=
name|getRepositoryRegistry
argument_list|()
operator|.
name|getManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|indexManagerFactory
operator|.
name|getIndexManager
argument_list|(
name|repo
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|updateManagedRepository
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|,
name|boolean
name|needStageRepo
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|,
name|boolean
name|resetStats
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"updateManagedConfiguration repo {} needStage {} resetStats {} "
argument_list|,
name|managedRepository
argument_list|,
name|needStageRepo
argument_list|,
name|resetStats
argument_list|)
expr_stmt|;
comment|// Ensure that the fields are valid.
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|basicValidation
argument_list|(
name|managedRepository
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|validateManagedRepository
argument_list|(
name|managedRepository
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|updatedRepoConfig
init|=
name|getRepositoryConfiguration
argument_list|(
name|managedRepository
argument_list|)
decl_stmt|;
name|updatedRepoConfig
operator|.
name|setStageRepoNeeded
argument_list|(
name|needStageRepo
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|oldRepo
init|=
name|repositoryRegistry
operator|.
name|getManagedRepository
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|( )
argument_list|)
decl_stmt|;
name|boolean
name|stagingExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|oldRepo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|stagingExists
operator|=
name|oldRepo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getStagingRepository
argument_list|()
operator|!=
literal|null
expr_stmt|;
block|}
name|boolean
name|updateIndexContext
init|=
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|updatedRepoConfig
operator|.
name|getIndexDir
argument_list|()
argument_list|,
name|managedRepository
operator|.
name|getIndexDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|newRepo
decl_stmt|;
comment|// TODO remove content from old if path has changed !!!!!
try|try
block|{
name|newRepo
operator|=
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|updatedRepoConfig
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRepo
operator|.
name|supportsFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
name|stagingRepo
init|=
name|newRepo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|( )
operator|.
name|getStagingRepository
argument_list|( )
decl_stmt|;
if|if
condition|(
name|stagingRepo
operator|!=
literal|null
operator|&&
operator|!
name|stagingExists
condition|)
block|{
name|triggerAuditEvent
argument_list|(
name|stagingRepo
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|addRepositoryRoles
argument_list|(
name|stagingRepo
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not update repository {}: {}"
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not update repository "
operator|+
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during role update of stage repo {}"
argument_list|,
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not update repository "
operator|+
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|triggerAuditEvent
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|MODIFY_MANAGED_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
try|try
block|{
name|getArchivaConfiguration
argument_list|()
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
decl||
name|IndeterminateConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not save repository configuration: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not save repository configuration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// Save the repository configuration.
name|RepositorySession
name|repositorySession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repositorySession
operator|=
name|getRepositorySessionFactory
argument_list|()
operator|.
name|createSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|resetStats
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"call repositoryStatisticsManager.deleteStatistics"
argument_list|)
expr_stmt|;
name|getRepositoryStatisticsManager
argument_list|()
operator|.
name|deleteStatistics
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|repositorySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
decl||
name|MetadataSessionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repositorySession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|updateIndexContext
condition|)
block|{
try|try
block|{
name|repositoryRegistry
operator|.
name|resetIndexingContext
argument_list|(
name|newRepo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexUpdateFailedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|//--------------------------
comment|// utils methods
comment|//--------------------------
specifier|protected
name|void
name|addRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|RepositoryAdminException
throws|,
name|IOException
block|{
try|try
block|{
name|getRepositoryRegistry
argument_list|()
operator|.
name|putRepository
argument_list|(
name|repository
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not add the repository to the registry. Cause: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|scanRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|boolean
name|fullScan
parameter_list|)
block|{
if|if
condition|(
name|getRepositoryTaskScheduler
argument_list|()
operator|.
name|isProcessingRepositoryTask
argument_list|(
name|repositoryId
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"scanning of repository with id {} already scheduled"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
block|}
name|RepositoryTask
name|task
init|=
operator|new
name|RepositoryTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|task
operator|.
name|setScanAll
argument_list|(
name|fullScan
argument_list|)
expr_stmt|;
try|try
block|{
name|getRepositoryTaskScheduler
argument_list|()
operator|.
name|queueTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskQueueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to schedule scanning of repo with id {}"
argument_list|,
name|repositoryId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|addRepositoryRoles
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RoleManagerException
block|{
comment|// TODO: double check these are configured on start up
comment|// TODO: belongs in the business logic
if|if
condition|(
operator|!
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|createTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|createTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeRepositoryRoles
parameter_list|(
name|ManagedRepositoryConfiguration
name|existingRepository
parameter_list|)
throws|throws
name|RoleManagerException
block|{
name|String
name|repoId
init|=
name|existingRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|removeTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_MANAGER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRoleManager
argument_list|()
operator|.
name|templatedRoleExists
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
condition|)
block|{
name|getRoleManager
argument_list|()
operator|.
name|removeTemplatedRole
argument_list|(
name|ArchivaRoleConstants
operator|.
name|TEMPLATE_REPOSITORY_OBSERVER
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"removed user roles associated with repository {}"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------
comment|// setters/getters
comment|//--------------------------
specifier|public
name|RoleManager
name|getRoleManager
parameter_list|()
block|{
return|return
name|roleManager
return|;
block|}
specifier|public
name|void
name|setRoleManager
parameter_list|(
name|RoleManager
name|roleManager
parameter_list|)
block|{
name|this
operator|.
name|roleManager
operator|=
name|roleManager
expr_stmt|;
block|}
specifier|public
name|RepositoryStatisticsManager
name|getRepositoryStatisticsManager
parameter_list|()
block|{
return|return
name|repositoryStatisticsManager
return|;
block|}
specifier|public
name|void
name|setRepositoryStatisticsManager
parameter_list|(
name|RepositoryStatisticsManager
name|repositoryStatisticsManager
parameter_list|)
block|{
name|this
operator|.
name|repositoryStatisticsManager
operator|=
name|repositoryStatisticsManager
expr_stmt|;
block|}
specifier|public
name|RepositorySessionFactory
name|getRepositorySessionFactory
parameter_list|()
block|{
return|return
name|repositorySessionFactory
return|;
block|}
specifier|public
name|void
name|setRepositorySessionFactory
parameter_list|(
name|RepositorySessionFactory
name|repositorySessionFactory
parameter_list|)
block|{
name|this
operator|.
name|repositorySessionFactory
operator|=
name|repositorySessionFactory
expr_stmt|;
block|}
specifier|public
name|RepositoryArchivaTaskScheduler
name|getRepositoryTaskScheduler
parameter_list|()
block|{
return|return
name|repositoryTaskScheduler
return|;
block|}
specifier|public
name|void
name|setRepositoryTaskScheduler
parameter_list|(
name|RepositoryArchivaTaskScheduler
name|repositoryTaskScheduler
parameter_list|)
block|{
name|this
operator|.
name|repositoryTaskScheduler
operator|=
name|repositoryTaskScheduler
expr_stmt|;
block|}
specifier|public
name|RepositoryRegistry
name|getRepositoryRegistry
parameter_list|( )
block|{
return|return
name|repositoryRegistry
return|;
block|}
specifier|public
name|void
name|setRepositoryRegistry
parameter_list|(
name|RepositoryRegistry
name|repositoryRegistry
parameter_list|)
block|{
name|this
operator|.
name|repositoryRegistry
operator|=
name|repositoryRegistry
expr_stmt|;
block|}
block|}
end_class

end_unit

