begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|remote
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryCheckPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|facets
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|PasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|RemoteIndexFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|NexusIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|UnsupportedExistingLuceneIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index_shaded
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M1  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"remoteRepositoryAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultRemoteRepositoryAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|RemoteRepositoryAdmin
block|{
annotation|@
name|Inject
name|RepositoryRegistry
name|repositoryRegistry
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|IndexCreator
argument_list|>
name|indexCreators
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|NexusIndexer
name|indexer
decl_stmt|;
annotation|@
name|PostConstruct
specifier|private
name|void
name|initialize
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|remoteRepository
range|:
name|getRemoteRepositories
argument_list|()
control|)
block|{
name|createIndexContext
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PreDestroy
specifier|private
name|void
name|shutdown
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
argument_list|>
name|remoteRepositories
init|=
name|getRemoteRepositories
argument_list|()
decl_stmt|;
comment|// close index on shutdown
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|remoteRepository
range|:
name|remoteRepositories
control|)
block|{
name|IndexingContext
name|context
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|indexer
operator|.
name|removeIndexingContext
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*  * Conversion between the repository from the registry and the serialized DTO for the admin API  */
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|convertRepo
parameter_list|(
name|RemoteRepository
name|repo
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|adminRepo
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
argument_list|(
name|getArchivaConfiguration
argument_list|()
operator|.
name|getDefaultLocale
argument_list|()
argument_list|)
decl_stmt|;
name|setBaseRepoAttributes
argument_list|(
name|adminRepo
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setUrl
argument_list|(
name|convertUriToString
argument_list|(
name|repo
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setCronExpression
argument_list|(
name|repo
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setCheckPath
argument_list|(
name|repo
operator|.
name|getCheckPath
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setExtraHeaders
argument_list|(
name|repo
operator|.
name|getExtraHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setExtraParameters
argument_list|(
name|repo
operator|.
name|getExtraParameters
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setTimeout
argument_list|(
operator|(
name|int
operator|)
name|repo
operator|.
name|getTimeout
argument_list|()
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryCredentials
name|creds
init|=
name|repo
operator|.
name|getLoginCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|creds
operator|!=
literal|null
operator|&&
name|creds
operator|instanceof
name|PasswordCredentials
condition|)
block|{
name|PasswordCredentials
name|pCreds
init|=
operator|(
name|PasswordCredentials
operator|)
name|creds
decl_stmt|;
name|adminRepo
operator|.
name|setUserName
argument_list|(
name|pCreds
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setPassword
argument_list|(
operator|new
name|String
argument_list|(
name|pCreds
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
condition|?
name|pCreds
operator|.
name|getPassword
argument_list|()
else|:
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|RemoteIndexFeature
name|rif
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|adminRepo
operator|.
name|setRemoteIndexUrl
argument_list|(
name|convertUriToString
argument_list|(
name|rif
operator|.
name|getIndexUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setDownloadRemoteIndex
argument_list|(
name|rif
operator|.
name|isDownloadRemoteIndex
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
name|rif
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setDownloadRemoteIndexOnStartup
argument_list|(
name|rif
operator|.
name|isDownloadRemoteIndexOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|adminRepo
operator|.
name|setRemoteDownloadTimeout
argument_list|(
operator|(
name|int
operator|)
name|rif
operator|.
name|getDownloadTimeout
argument_list|()
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|adminRepo
return|;
block|}
specifier|private
name|RemoteRepositoryConfiguration
name|getRepositoryConfiguration
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|repo
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|repoConfig
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|setBaseRepoAttributes
argument_list|(
name|repoConfig
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setUrl
argument_list|(
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|removeExpressions
argument_list|(
name|repo
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRefreshCronExpression
argument_list|(
name|repo
operator|.
name|getCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setCheckPath
argument_list|(
name|repo
operator|.
name|getCheckPath
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setExtraHeaders
argument_list|(
name|repo
operator|.
name|getExtraHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setExtraParameters
argument_list|(
name|repo
operator|.
name|getExtraParameters
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setUsername
argument_list|(
name|repo
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setPassword
argument_list|(
name|repo
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setTimeout
argument_list|(
name|repo
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRemoteIndexUrl
argument_list|(
name|repo
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setDownloadRemoteIndex
argument_list|(
name|repo
operator|.
name|isDownloadRemoteIndex
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
name|repo
operator|.
name|getRemoteDownloadNetworkProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setDownloadRemoteIndexOnStartup
argument_list|(
name|repo
operator|.
name|isDownloadRemoteIndexOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|setRemoteDownloadTimeout
argument_list|(
name|repo
operator|.
name|getRemoteDownloadTimeout
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|repoConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
argument_list|>
name|getRemoteRepositories
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
return|return
name|repositoryRegistry
operator|.
name|getRemoteRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|repo
lambda|->
name|convertRepo
argument_list|(
name|repo
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|getRemoteRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
return|return
name|convertRepo
argument_list|(
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|addRemoteRepository
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|triggerAuditEvent
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_REMOTE_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|basicValidation
argument_list|(
name|remoteRepository
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//TODO we can validate it's a good uri/url
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"url cannot be null"
argument_list|)
throw|;
block|}
comment|//MRM-752 - url needs trimming
comment|//MRM-1940 - URL should not end with a slash
name|remoteRepository
operator|.
name|setUrl
argument_list|(
name|StringUtils
operator|.
name|stripEnd
argument_list|(
name|StringUtils
operator|.
name|trim
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|remoteRepository
operator|.
name|getCheckPath
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|checkUrl
init|=
name|remoteRepository
operator|.
name|getUrl
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|RepositoryCheckPath
name|path
range|:
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getArchivaDefaultConfiguration
argument_list|()
operator|.
name|getDefaultCheckPaths
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Checking path for urls: {}<-> {}"
argument_list|,
name|checkUrl
argument_list|,
name|path
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkUrl
operator|.
name|startsWith
argument_list|(
name|path
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|remoteRepository
operator|.
name|setCheckPath
argument_list|(
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
init|=
name|getRepositoryConfiguration
argument_list|(
name|remoteRepository
argument_list|)
decl_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not add remote repository {}: {}"
argument_list|,
name|remoteRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Adding of remote repository failed"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|deleteRemoteRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|triggerAuditEvent
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_REMOTE_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepository
name|repo
init|=
name|repositoryRegistry
operator|.
name|getRemoteRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not delete repository "
operator|+
name|repositoryId
operator|+
literal|". The repository does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|repositoryRegistry
operator|.
name|removeRepository
argument_list|(
name|repo
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Deletion of remote repository failed {}: {}"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Could not delete remote repository"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
comment|// TODO use ProxyConnectorAdmin interface ?
comment|// [MRM-520] Proxy Connectors are not deleted with the deletion of a Repository.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|configuration
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|updateRemoteRepository
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|String
name|repositoryId
init|=
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|triggerAuditEvent
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|MODIFY_REMOTE_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
comment|// update means : remove and add
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
init|=
name|getRepositoryConfiguration
argument_list|(
name|remoteRepository
argument_list|)
decl_stmt|;
try|try
block|{
name|repositoryRegistry
operator|.
name|putRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not update remote repository {}: {}"
argument_list|,
name|remoteRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"Update of remote repository failed"
operator|+
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
throw|;
block|}
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
argument_list|>
name|getRemoteRepositoriesAsMap
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|repo
range|:
name|getRemoteRepositories
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexingContext
name|createIndexContext
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
try|try
block|{
name|String
name|appServerBase
init|=
name|getRegistry
argument_list|()
operator|.
name|getString
argument_list|(
literal|"appserver.base"
argument_list|)
decl_stmt|;
name|String
name|contextKey
init|=
literal|"remote-"
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|IndexingContext
name|indexingContext
init|=
name|indexer
operator|.
name|getIndexingContexts
argument_list|()
operator|.
name|get
argument_list|(
name|contextKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexingContext
operator|!=
literal|null
condition|)
block|{
return|return
name|indexingContext
return|;
block|}
comment|// create remote repository path
name|Path
name|repoDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|appServerBase
argument_list|,
literal|"data/remotes/"
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
block|}
name|Path
name|indexDirectory
init|=
literal|null
decl_stmt|;
comment|// is there configured indexDirectory ?
name|String
name|indexDirectoryPath
init|=
name|remoteRepository
operator|.
name|getIndexDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|indexDirectoryPath
argument_list|)
condition|)
block|{
name|repoDir
operator|.
name|resolve
argument_list|(
name|indexDirectoryPath
argument_list|)
expr_stmt|;
block|}
comment|// if not configured use a default value
if|if
condition|(
name|indexDirectory
operator|==
literal|null
condition|)
block|{
name|indexDirectory
operator|=
name|repoDir
operator|.
name|resolve
argument_list|(
literal|".index"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|indexer
operator|.
name|addIndexingContext
argument_list|(
name|contextKey
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|repoDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|indexDirectory
operator|.
name|toFile
argument_list|()
argument_list|,
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|,
name|calculateIndexRemoteUrl
argument_list|(
name|remoteRepository
argument_list|)
argument_list|,
name|indexCreators
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// existing index with an old lucene format so we need to delete it!!!
comment|// delete it first then recreate it.
name|log
operator|.
name|warn
argument_list|(
literal|"the index of repository {} is too old we have to delete and recreate it"
argument_list|,
comment|//
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
return|return
name|indexer
operator|.
name|addIndexingContext
argument_list|(
name|contextKey
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
name|repoDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|indexDirectory
operator|.
name|toFile
argument_list|()
argument_list|,
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|,
name|calculateIndexRemoteUrl
argument_list|(
name|remoteRepository
argument_list|)
argument_list|,
name|indexCreators
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|UnsupportedExistingLuceneIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|calculateIndexRemoteUrl
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
name|remoteRepository
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|remoteRepository
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|,
literal|"http"
argument_list|)
condition|)
block|{
name|String
name|baseUrl
init|=
name|remoteRepository
operator|.
name|getRemoteIndexUrl
argument_list|()
decl_stmt|;
return|return
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|baseUrl
argument_list|,
literal|"/"
argument_list|)
else|:
name|baseUrl
return|;
block|}
name|String
name|baseUrl
init|=
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|,
literal|"/"
argument_list|)
condition|?
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|,
literal|"/"
argument_list|)
else|:
name|remoteRepository
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|baseUrl
operator|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|remoteRepository
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|)
condition|?
name|baseUrl
operator|+
literal|"/.index"
else|:
name|baseUrl
operator|+
literal|"/"
operator|+
name|remoteRepository
operator|.
name|getRemoteIndexUrl
argument_list|()
expr_stmt|;
return|return
name|baseUrl
return|;
block|}
block|}
end_class

end_unit

