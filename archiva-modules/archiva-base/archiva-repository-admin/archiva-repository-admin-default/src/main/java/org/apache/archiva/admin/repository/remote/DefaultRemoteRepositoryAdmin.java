begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|remote
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|AuditInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"remoteRepositoryAdmin#default"
argument_list|)
specifier|public
class|class
name|DefaultRemoteRepositoryAdmin
extends|extends
name|AbstractRepositoryAdmin
implements|implements
name|RemoteRepositoryAdmin
block|{
specifier|public
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|getRemoteRepositories
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|remoteRepositories
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRepository
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteRepositoryConfiguration
name|repositoryConfiguration
range|:
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRemoteRepositories
argument_list|()
control|)
block|{
name|RemoteRepository
name|remoteRepository
init|=
operator|new
name|RemoteRepository
argument_list|(
name|repositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
name|repositoryConfiguration
operator|.
name|getName
argument_list|()
argument_list|,
name|repositoryConfiguration
operator|.
name|getUrl
argument_list|()
argument_list|,
name|repositoryConfiguration
operator|.
name|getLayout
argument_list|()
argument_list|,
name|repositoryConfiguration
operator|.
name|getUsername
argument_list|()
argument_list|,
name|repositoryConfiguration
operator|.
name|getPassword
argument_list|()
argument_list|,
name|repositoryConfiguration
operator|.
name|getTimeout
argument_list|()
argument_list|)
decl_stmt|;
name|remoteRepository
operator|.
name|setDownloadRemoteIndex
argument_list|(
name|repositoryConfiguration
operator|.
name|isDownloadRemoteIndex
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|.
name|setRemoteIndexUrl
argument_list|(
name|repositoryConfiguration
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|.
name|setCronExpression
argument_list|(
name|repositoryConfiguration
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|.
name|setIndexDirectory
argument_list|(
name|repositoryConfiguration
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepository
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
name|repositoryConfiguration
operator|.
name|getRemoteDownloadNetworkProxyId
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositories
operator|.
name|add
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
return|return
name|remoteRepositories
return|;
block|}
specifier|public
name|RemoteRepository
name|getRemoteRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
for|for
control|(
name|RemoteRepository
name|remoteRepository
range|:
name|getRemoteRepositories
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositoryId
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|remoteRepository
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Boolean
name|addRemoteRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|triggerAuditEvent
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|ADD_REMOTE_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|getRepositoryCommonValidator
argument_list|()
operator|.
name|basicValidation
argument_list|(
name|remoteRepository
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//TODO we can validate it's a good uri/url
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"url cannot be null"
argument_list|)
throw|;
block|}
comment|//MRM-752 - url needs trimming
name|remoteRepository
operator|.
name|setUrl
argument_list|(
name|StringUtils
operator|.
name|trim
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
init|=
name|getRemoteRepositoryConfiguration
argument_list|(
name|remoteRepository
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|deleteRemoteRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|triggerAuditEvent
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|DELETE_REMOTE_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
init|=
name|configuration
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
operator|.
name|get
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRepositoryConfiguration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"remoteRepository with id "
operator|+
name|repositoryId
operator|+
literal|" not exist cannot remove it"
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
comment|// TODO use ProxyConnectorAdmin interface ?
comment|// [MRM-520] Proxy Connectors are not deleted with the deletion of a Repository.
name|List
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
name|proxyConnectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ProxyConnectorConfiguration
argument_list|>
argument_list|(
name|configuration
operator|.
name|getProxyConnectors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyConnectorConfiguration
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|configuration
operator|.
name|removeProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
block|}
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Boolean
name|updateRemoteRepository
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|AuditInformation
name|auditInformation
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
name|String
name|repositoryId
init|=
name|remoteRepository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|triggerAuditEvent
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|AuditEvent
operator|.
name|MODIFY_REMOTE_REPO
argument_list|,
name|auditInformation
argument_list|)
expr_stmt|;
comment|// update means : remove and add
name|Configuration
name|configuration
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
init|=
name|configuration
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
operator|.
name|get
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRepositoryConfiguration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAdminException
argument_list|(
literal|"remoteRepository with id "
operator|+
name|repositoryId
operator|+
literal|" not exist cannot remove it"
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|removeRemoteRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|=
name|getRemoteRepositoryConfiguration
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addRemoteRepository
argument_list|(
name|remoteRepositoryConfiguration
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|getRemoteRepositoriesAsMap
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RemoteRepository
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteRepository
name|repo
range|:
name|getRemoteRepositories
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
name|RemoteRepositoryConfiguration
name|getRemoteRepositoryConfiguration
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|remoteRepositoryConfiguration
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setId
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setPassword
argument_list|(
name|remoteRepository
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setTimeout
argument_list|(
name|remoteRepository
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setUrl
argument_list|(
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setUsername
argument_list|(
name|remoteRepository
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setLayout
argument_list|(
name|remoteRepository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setName
argument_list|(
name|remoteRepository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setDownloadRemoteIndex
argument_list|(
name|remoteRepository
operator|.
name|isDownloadRemoteIndex
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setRemoteIndexUrl
argument_list|(
name|remoteRepository
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setRefreshCronExpression
argument_list|(
name|remoteRepository
operator|.
name|getCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setIndexDir
argument_list|(
name|remoteRepository
operator|.
name|getIndexDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRepositoryConfiguration
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
name|remoteRepository
operator|.
name|getRemoteDownloadNetworkProxyId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|remoteRepositoryConfiguration
return|;
block|}
block|}
end_class

end_unit

