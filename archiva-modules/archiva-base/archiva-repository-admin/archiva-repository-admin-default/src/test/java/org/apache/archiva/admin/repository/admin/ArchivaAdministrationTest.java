begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|admin
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|admin
operator|.
name|ArchivaAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|LegacyArtifactPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|NetworkConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|OrganisationInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|UiConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|AbstractRepositoryAdminTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|audit
operator|.
name|AuditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaAdministrationTest
extends|extends
name|AbstractRepositoryAdminTest
block|{
annotation|@
name|Inject
name|ArchivaAdministration
name|archivaAdministration
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|getAllLegacyPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"all legacy paths {}"
argument_list|,
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAndDeleteLegacyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|initialSize
init|=
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LegacyArtifactPath
name|legacyArtifactPath
init|=
operator|new
name|LegacyArtifactPath
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|archivaAdministration
operator|.
name|addLegacyArtifactPath
argument_list|(
name|legacyArtifactPath
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|LegacyArtifactPath
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|deleteLegacyArtifactPath
argument_list|(
name|legacyArtifactPath
operator|.
name|getPath
argument_list|()
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|LegacyArtifactPath
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|archivaAdministration
operator|.
name|getLegacyArtifactPaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mockAuditListener
operator|.
name|clearEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addAndUpdateAndDeleteFileType
parameter_list|()
throws|throws
name|RepositoryAdminException
block|{
name|int
name|initialSize
init|=
name|archivaAdministration
operator|.
name|getFileTypes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|FileType
name|fileType
init|=
operator|new
name|FileType
argument_list|()
decl_stmt|;
name|fileType
operator|.
name|setId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fileType
operator|.
name|setPatterns
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bar"
argument_list|,
literal|"toto"
argument_list|)
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|addFileType
argument_list|(
name|fileType
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getFileTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|addFileTypePattern
argument_list|(
literal|"foo"
argument_list|,
literal|"zorro"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getFileTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|"toto"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|"zorro"
argument_list|)
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|removeFileTypePattern
argument_list|(
literal|"foo"
argument_list|,
literal|"zorro"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getFileTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|"toto"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|"zorro"
argument_list|)
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|removeFileType
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|archivaAdministration
operator|.
name|getFileTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|archivaAdministration
operator|.
name|getFileType
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAuditListener
operator|.
name|clearEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|knownContentConsumersTest
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|initialSize
init|=
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|archivaAdministration
operator|.
name|addKnownContentConsumer
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure we don't add it twice as it's an ArrayList as storage
name|archivaAdministration
operator|.
name|addKnownContentConsumer
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|removeKnownContentConsumer
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|archivaAdministration
operator|.
name|getKnownContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mockAuditListener
operator|.
name|getAuditEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuditEvent
operator|.
name|ENABLE_REPO_CONSUMER
argument_list|,
name|mockAuditListener
operator|.
name|getAuditEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuditEvent
operator|.
name|DISABLE_REPO_CONSUMER
argument_list|,
name|mockAuditListener
operator|.
name|getAuditEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|mockAuditListener
operator|.
name|clearEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidContentConsumersTest
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|initialSize
init|=
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|archivaAdministration
operator|.
name|addInvalidContentConsumer
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure we don't add it twice as it's an ArrayList as storage
name|archivaAdministration
operator|.
name|addInvalidContentConsumer
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|removeInvalidContentConsumer
argument_list|(
literal|"foo"
argument_list|,
name|getFakeAuditInformation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|archivaAdministration
operator|.
name|getInvalidContentConsumers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mockAuditListener
operator|.
name|getAuditEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuditEvent
operator|.
name|ENABLE_REPO_CONSUMER
argument_list|,
name|mockAuditListener
operator|.
name|getAuditEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuditEvent
operator|.
name|DISABLE_REPO_CONSUMER
argument_list|,
name|mockAuditListener
operator|.
name|getAuditEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|mockAuditListener
operator|.
name|clearEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|organisationInfoUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|OrganisationInformation
name|organisationInformation
init|=
name|archivaAdministration
operator|.
name|getOrganisationInformation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|organisationInformation
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|organisationInformation
operator|.
name|getLogoLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|organisationInformation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|organisationInformation
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|organisationInformation
operator|=
operator|new
name|OrganisationInformation
argument_list|()
expr_stmt|;
name|organisationInformation
operator|.
name|setLogoLocation
argument_list|(
literal|"http://foo.com/bar.png"
argument_list|)
expr_stmt|;
name|organisationInformation
operator|.
name|setName
argument_list|(
literal|"foo org"
argument_list|)
expr_stmt|;
name|organisationInformation
operator|.
name|setUrl
argument_list|(
literal|"http://foo.com"
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|setOrganisationInformation
argument_list|(
name|organisationInformation
argument_list|)
expr_stmt|;
name|organisationInformation
operator|=
name|archivaAdministration
operator|.
name|getOrganisationInformation
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|organisationInformation
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://foo.com/bar.png"
argument_list|,
name|organisationInformation
operator|.
name|getLogoLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo org"
argument_list|,
name|organisationInformation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://foo.com"
argument_list|,
name|organisationInformation
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uiConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|UiConfiguration
name|ui
init|=
name|archivaAdministration
operator|.
name|getUiConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ui
argument_list|)
expr_stmt|;
comment|// assert default values
name|assertFalse
argument_list|(
name|ui
operator|.
name|isDisableEasterEggs
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ui
operator|.
name|isAppletFindEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ui
operator|.
name|isShowFindArtifacts
argument_list|()
argument_list|)
expr_stmt|;
name|ui
operator|.
name|setAppletFindEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ui
operator|.
name|setShowFindArtifacts
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ui
operator|.
name|setDisableEasterEggs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|archivaAdministration
operator|.
name|updateUiConfiguration
argument_list|(
name|ui
argument_list|)
expr_stmt|;
name|ui
operator|=
name|archivaAdministration
operator|.
name|getUiConfiguration
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ui
operator|.
name|isDisableEasterEggs
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ui
operator|.
name|isAppletFindEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ui
operator|.
name|isShowFindArtifacts
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|networkConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkConfiguration
name|networkConfiguration
init|=
name|archivaAdministration
operator|.
name|getNetworkConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|networkConfiguration
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkConfiguration
operator|.
name|isUsePooling
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|networkConfiguration
operator|.
name|getMaxTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|networkConfiguration
operator|.
name|getMaxTotalPerHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

