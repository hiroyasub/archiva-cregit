begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|repository
operator|.
name|admin
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|admin
operator|.
name|RepositoryTaskAdministration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ScanStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|TaskQueueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskQueueExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|ArtifactIndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|IndexingArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryArchivaTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|repository
operator|.
name|model
operator|.
name|RepositoryTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|DisplayName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Tag
argument_list|(
literal|"archiva-admin"
argument_list|)
annotation|@
name|DisplayName
argument_list|(
literal|"Unit Tests for RepositoryTaskAdministration"
argument_list|)
specifier|public
class|class
name|RepositoryTaskAdministrationTest
block|{
specifier|private
name|RepositoryTaskAdministration
name|taskAdministration
decl_stmt|;
specifier|private
name|TaskQueueExecutor
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexingTaskExecutor
decl_stmt|;
specifier|private
name|TaskQueueExecutor
argument_list|<
name|RepositoryTask
argument_list|>
name|scanningTaskExecutor
decl_stmt|;
specifier|private
name|RepositoryArchivaTaskScheduler
name|repositoryArchivaTaskScheduler
decl_stmt|;
specifier|private
name|IndexingArchivaTaskScheduler
name|indexingArchivaTaskScheduler
decl_stmt|;
specifier|private
name|RepositoryRegistry
name|registry
decl_stmt|;
annotation|@
name|BeforeEach
specifier|public
name|void
name|init
parameter_list|()
block|{
name|registry
operator|=
name|mock
argument_list|(
name|RepositoryRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|indexingTaskExecutor
operator|=
name|mock
argument_list|(
name|TaskQueueExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|scanningTaskExecutor
operator|=
name|mock
argument_list|(
name|TaskQueueExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|repositoryArchivaTaskScheduler
operator|=
name|mock
argument_list|(
name|RepositoryArchivaTaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|indexingArchivaTaskScheduler
operator|=
name|mock
argument_list|(
name|IndexingArchivaTaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskAdministration
operator|=
operator|new
name|DefaultRepositoryTaskAdministration
argument_list|(
name|registry
argument_list|,
name|indexingTaskExecutor
argument_list|,
name|scanningTaskExecutor
argument_list|,
name|repositoryArchivaTaskScheduler
argument_list|,
name|indexingArchivaTaskScheduler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanStatus
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|TaskQueue
name|queue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskQueue
name|indexQueue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RepositoryTask
argument_list|>
name|scanList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|RepositoryTask
name|scanTask1
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|scanTask1
operator|.
name|setRepositoryId
argument_list|(
literal|"abcde"
argument_list|)
expr_stmt|;
name|scanTask1
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanTask1
operator|.
name|setResourceFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|scanList
operator|.
name|add
argument_list|(
name|scanTask1
argument_list|)
expr_stmt|;
name|RepositoryTask
name|scanTask2
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|scanTask2
operator|.
name|setRepositoryId
argument_list|(
literal|"testrepo2"
argument_list|)
expr_stmt|;
name|scanTask2
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanTask2
operator|.
name|setResourceFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|scanList
operator|.
name|add
argument_list|(
name|scanTask1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|ArtifactIndexingTask
name|indexTask1
init|=
name|mock
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"indexrepo1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|getResourceFile
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|indexTask1
argument_list|)
expr_stmt|;
name|ArtifactIndexingTask
name|indexTask2
init|=
name|mock
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"indexrepo2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|getResourceFile
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|indexTask2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexQueue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanList
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexQueue
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexList
argument_list|)
expr_stmt|;
name|ScanStatus
name|currentScanStatus
init|=
name|taskAdministration
operator|.
name|getCurrentScanStatus
argument_list|( )
decl_stmt|;
name|assertNotNull
argument_list|(
name|currentScanStatus
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentScanStatus
operator|.
name|getIndexingQueue
argument_list|( )
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentScanStatus
operator|.
name|getScanQueue
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currentScanStatus
operator|.
name|getScanQueue
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currentScanStatus
operator|.
name|getIndexingQueue
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanStatusWithId
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|TaskQueue
name|queue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskQueue
name|indexQueue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RepositoryTask
argument_list|>
name|scanList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|RepositoryTask
name|scanTask1
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|scanTask1
operator|.
name|setRepositoryId
argument_list|(
literal|"abcde"
argument_list|)
expr_stmt|;
name|scanTask1
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanTask1
operator|.
name|setResourceFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|scanList
operator|.
name|add
argument_list|(
name|scanTask1
argument_list|)
expr_stmt|;
name|RepositoryTask
name|scanTask2
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|scanTask2
operator|.
name|setRepositoryId
argument_list|(
literal|"testrepo2"
argument_list|)
expr_stmt|;
name|scanTask2
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanTask2
operator|.
name|setResourceFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|scanList
operator|.
name|add
argument_list|(
name|scanTask1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|ArtifactIndexingTask
name|indexTask1
init|=
name|mock
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"indexrepo1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|getResourceFile
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|indexTask1
argument_list|)
expr_stmt|;
name|ArtifactIndexingTask
name|indexTask2
init|=
name|mock
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"indexrepo2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|getResourceFile
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|indexTask2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexQueue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanList
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexQueue
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexList
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"indexrepo2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScanStatus
name|currentScanStatus
init|=
name|taskAdministration
operator|.
name|getCurrentScanStatus
argument_list|(
literal|"indexrepo2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|currentScanStatus
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentScanStatus
operator|.
name|getIndexingQueue
argument_list|( )
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentScanStatus
operator|.
name|getScanQueue
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|currentScanStatus
operator|.
name|getScanQueue
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currentScanStatus
operator|.
name|getIndexingQueue
argument_list|( )
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleFullScan
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskAdministration
operator|.
name|scheduleFullScan
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|repositoryArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexingArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleIndexScan
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskAdministration
operator|.
name|scheduleIndexFullScan
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|repositoryArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexingArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|isExecuteOnEntireRepo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleIndexScanWithFile
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|ManagedRepository
name|managedRepo
init|=
name|mock
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|managedRepo
argument_list|)
expr_stmt|;
name|StorageAsset
name|asset
init|=
name|mock
argument_list|(
name|StorageAsset
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|asset
operator|.
name|getFilePath
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"abc/def/ghij.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asset
operator|.
name|exists
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
operator|.
name|getAsset
argument_list|(
literal|"abc/def/ghij.pom"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|asset
argument_list|)
expr_stmt|;
name|taskAdministration
operator|.
name|scheduleIndexScan
argument_list|(
literal|"internal"
argument_list|,
literal|"abc/def/ghij.pom"
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|repositoryArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexingArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactIndexingTask
name|caption
init|=
name|captor
operator|.
name|getValue
argument_list|( )
decl_stmt|;
name|assertFalse
argument_list|(
name|caption
operator|.
name|isExecuteOnEntireRepo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc/def/ghij.pom"
argument_list|,
name|caption
operator|.
name|getResourceFile
argument_list|( )
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleMetadataScan
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskAdministration
operator|.
name|scheduleMetadataFullScan
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|RepositoryTask
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|RepositoryTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|repositoryArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|captor
operator|.
name|capture
argument_list|( )
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexingArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|isScanAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleMetadataUpdateScan
parameter_list|()
throws|throws
name|RepositoryAdminException
throws|,
name|TaskQueueException
block|{
name|when
argument_list|(
name|registry
operator|.
name|getManagedRepository
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ManagedRepository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskAdministration
operator|.
name|scheduleMetadataUpdateScan
argument_list|(
literal|"internal"
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|RepositoryTask
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|RepositoryTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|repositoryArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|captor
operator|.
name|capture
argument_list|( )
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexingArchivaTaskScheduler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|queueTask
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|isScanAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|cancelAllTasks
parameter_list|()
throws|throws
name|TaskQueueException
throws|,
name|RepositoryAdminException
block|{
name|TaskQueue
name|queue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskQueue
name|indexQueue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RepositoryTask
argument_list|>
name|scanList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|RepositoryTask
name|scanTask1
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|scanTask1
operator|.
name|setRepositoryId
argument_list|(
literal|"abcde"
argument_list|)
expr_stmt|;
name|scanTask1
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanTask1
operator|.
name|setResourceFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|scanList
operator|.
name|add
argument_list|(
name|scanTask1
argument_list|)
expr_stmt|;
name|RepositoryTask
name|scanTask2
init|=
operator|new
name|RepositoryTask
argument_list|( )
decl_stmt|;
name|scanTask2
operator|.
name|setRepositoryId
argument_list|(
literal|"testrepo2"
argument_list|)
expr_stmt|;
name|scanTask2
operator|.
name|setScanAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanTask2
operator|.
name|setResourceFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|scanList
operator|.
name|add
argument_list|(
name|scanTask1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactIndexingTask
argument_list|>
name|indexList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|( )
decl_stmt|;
name|ArtifactIndexingTask
name|indexTask1
init|=
name|mock
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"indexrepo1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask1
operator|.
name|getResourceFile
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|indexTask1
argument_list|)
expr_stmt|;
name|ArtifactIndexingTask
name|indexTask2
init|=
name|mock
argument_list|(
name|ArtifactIndexingTask
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"indexrepo2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexTask2
operator|.
name|getResourceFile
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|indexTask2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanningTaskExecutor
operator|.
name|getQueue
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexingTaskExecutor
operator|.
name|getQueue
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexQueue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanList
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexQueue
operator|.
name|getQueueSnapshot
argument_list|( )
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexList
argument_list|)
expr_stmt|;
name|taskAdministration
operator|.
name|cancelTasks
argument_list|(
literal|"indexrepo1"
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|>
name|scanCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|>
name|indexCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|queue
argument_list|)
operator|.
name|removeAll
argument_list|(
name|scanCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexQueue
argument_list|)
operator|.
name|removeAll
argument_list|(
name|indexCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|scanCancelList
init|=
name|scanCaptor
operator|.
name|getValue
argument_list|( )
decl_stmt|;
name|List
name|indexCancelList
init|=
name|indexCaptor
operator|.
name|getValue
argument_list|( )
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scanCancelList
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexCancelList
operator|.
name|size
argument_list|( )
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"indexrepo1"
argument_list|,
operator|(
operator|(
name|ArtifactIndexingTask
operator|)
name|indexCancelList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

