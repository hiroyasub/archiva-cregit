begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M4  */
end_comment

begin_class
specifier|public
class|class
name|LdapGroupMapping
block|{
specifier|private
name|String
name|group
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|roleNames
decl_stmt|;
specifier|public
name|LdapGroupMapping
parameter_list|()
block|{
comment|// no op
block|}
specifier|public
name|LdapGroupMapping
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
specifier|public
name|LdapGroupMapping
parameter_list|(
name|String
name|group
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|roleNames
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|roleNames
operator|=
name|roleNames
expr_stmt|;
block|}
specifier|public
name|LdapGroupMapping
parameter_list|(
name|String
name|group
parameter_list|,
name|String
index|[]
name|roleNames
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
if|if
condition|(
name|roleNames
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|roleNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|roleNames
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRoleNames
parameter_list|()
block|{
return|return
name|roleNames
return|;
block|}
specifier|public
name|void
name|setRoleNames
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|roleNames
parameter_list|)
block|{
name|this
operator|.
name|roleNames
operator|=
name|roleNames
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LdapGroupMapping
name|that
init|=
operator|(
name|LdapGroupMapping
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|?
operator|!
name|group
operator|.
name|equals
argument_list|(
name|that
operator|.
name|group
argument_list|)
else|:
name|that
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|group
operator|!=
literal|null
condition|?
name|group
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LdapGroupMapping{"
operator|+
literal|"group='"
operator|+
name|group
operator|+
literal|'\''
operator|+
literal|", roleNames="
operator|+
name|roleNames
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

