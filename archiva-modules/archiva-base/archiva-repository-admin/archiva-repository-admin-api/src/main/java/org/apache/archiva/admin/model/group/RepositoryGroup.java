begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|group
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryGroup
implements|implements
name|Serializable
block|{
comment|/**      * repository group Id      */
specifier|private
name|String
name|id
decl_stmt|;
comment|/**      * repositories ids      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repositories
decl_stmt|;
specifier|public
name|RepositoryGroup
parameter_list|()
block|{
comment|// no op
block|}
specifier|public
name|RepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
comment|/**      * Method addRepository.      *      * @param string      */
specifier|public
name|void
name|addRepository
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|getRepositories
argument_list|()
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the id of the repository group.      *      * @return String      */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * Method getRepositories.      *      * @return List      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|repositories
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|repositories
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|repositories
return|;
block|}
comment|/**      * Method removeRepository.      *      * @param string      */
specifier|public
name|void
name|removeRepository
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|getRepositories
argument_list|()
operator|.
name|remove
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the id of the repository group.      *      * @param id      */
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Set the list of repository ids under the group.      *      * @param repositories      */
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|RepositoryGroup
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RepositoryGroup
name|that
init|=
operator|(
name|RepositoryGroup
operator|)
name|other
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
operator|(
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|that
operator|.
name|getId
argument_list|()
operator|==
literal|null
else|:
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|17
decl_stmt|;
name|result
operator|=
literal|37
operator|*
name|result
operator|+
operator|(
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"RepositoryGroup"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", repositories="
argument_list|)
operator|.
name|append
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

