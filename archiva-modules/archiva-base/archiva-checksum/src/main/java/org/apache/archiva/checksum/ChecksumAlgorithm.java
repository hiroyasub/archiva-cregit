begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Enumeration of available ChecksumAlgorithm techniques.  *  * Each algorithm represents a message digest algorithm and has a unique type.  * The type string may be used in the hash files (FreeBSD and OpenSSL add the type to the hash file)  *  * There are multiple file extensions. The first one is considered the default extension.  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|ChecksumAlgorithm
block|{
name|MD5
argument_list|(
literal|"MD5"
argument_list|,
literal|"MD5"
argument_list|,
literal|"md5"
argument_list|)
block|,
name|SHA1
argument_list|(
literal|"SHA-1"
argument_list|,
literal|"SHA1"
argument_list|,
literal|"sha1"
argument_list|,
literal|"sha128"
argument_list|,
literal|"sha-128"
argument_list|)
block|,
name|SHA256
argument_list|(
literal|"SHA-256"
argument_list|,
literal|"SHA256"
argument_list|,
literal|"sha256"
argument_list|,
literal|"sha2"
argument_list|,
literal|"sha-256"
argument_list|)
block|,
name|SHA384
argument_list|(
literal|"SHA-384"
argument_list|,
literal|"SHA384"
argument_list|,
literal|"sha384"
argument_list|,
literal|"sha3"
argument_list|,
literal|"sha-384"
argument_list|)
block|,
name|SHA512
argument_list|(
literal|"SHA-512"
argument_list|,
literal|"SHA512"
argument_list|,
literal|"sha512"
argument_list|,
literal|"sha5"
argument_list|,
literal|"sha-512"
argument_list|)
block|,
name|ASC
argument_list|(
literal|"ASC"
argument_list|,
literal|"ASC"
argument_list|,
literal|"asc"
argument_list|)
block|;
specifier|public
specifier|static
name|ChecksumAlgorithm
name|getByExtension
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|String
name|ext
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|extensionMap
operator|.
name|containsKey
argument_list|(
name|ext
argument_list|)
condition|)
block|{
return|return
name|extensionMap
operator|.
name|get
argument_list|(
name|ext
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Filename "
operator|+
name|file
operator|.
name|getFileName
argument_list|()
operator|+
literal|" has no valid extension."
argument_list|)
throw|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ChecksumAlgorithm
argument_list|>
name|extensionMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(  )
decl_stmt|;
static|static
block|{
for|for
control|(
name|ChecksumAlgorithm
name|alg
range|:
name|ChecksumAlgorithm
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|extString
range|:
name|alg
operator|.
name|getExt
argument_list|()
control|)
block|{
name|extensionMap
operator|.
name|put
argument_list|(
name|extString
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|alg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllExtensions
parameter_list|()
block|{
return|return
name|extensionMap
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * The MessageDigest algorithm for this hash.      */
specifier|private
specifier|final
name|String
name|algorithm
decl_stmt|;
comment|/**      * The file extensions for this ChecksumAlgorithm.      */
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ext
decl_stmt|;
comment|/**      * The checksum type, the key that you see in checksum files.      */
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
comment|/**      * Construct a ChecksumAlgorithm      *       * @param algorithm the MessageDigest algorithm      * @param type a unique identifier for the type      * @param ext the list of file extensions      */
specifier|private
name|ChecksumAlgorithm
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|String
name|type
parameter_list|,
name|String
modifier|...
name|ext
parameter_list|)
block|{
name|this
operator|.
name|algorithm
operator|=
name|algorithm
expr_stmt|;
name|this
operator|.
name|ext
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Returns the message digest algorithm identifier      * @return      */
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|algorithm
return|;
block|}
comment|/**      * Returns the list of extensions      * @return      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExt
parameter_list|()
block|{
return|return
name|ext
return|;
block|}
comment|/**      * Returns the checksum identifier      * @return      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns the default extension of the current algorithm      * @return      */
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
name|ext
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

