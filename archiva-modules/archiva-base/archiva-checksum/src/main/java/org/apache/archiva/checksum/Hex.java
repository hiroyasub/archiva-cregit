begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Hex - simple hex conversions.   *  *  */
end_comment

begin_class
specifier|public
class|class
name|Hex
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DIGITS
init|=
literal|"0123456789abcdef"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|int
name|l
init|=
name|data
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|raw
init|=
operator|new
name|byte
index|[
name|l
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|raw
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
literal|0xF0
operator|&
name|data
index|[
name|i
index|]
operator|)
operator|>>>
literal|4
index|]
expr_stmt|;
name|raw
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
literal|0x0F
operator|&
name|data
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|raw
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|raw
parameter_list|)
block|{
return|return
name|encode
argument_list|(
name|raw
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

