begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Utility class that handles multiple checksums for a single file.  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumUtil
block|{
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|32768
decl_stmt|;
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|List
argument_list|<
name|Checksum
argument_list|>
name|checksumList
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|fileSize
decl_stmt|;
try|try
init|(
name|FileChannel
name|channel
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
init|)
block|{
name|fileSize
operator|=
name|channel
operator|.
name|size
argument_list|()
expr_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|fileSize
condition|)
block|{
name|long
name|bufferSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|BUFFER_SIZE
argument_list|,
name|fileSize
operator|-
name|pos
argument_list|)
decl_stmt|;
name|MappedByteBuffer
name|buffer
init|=
name|channel
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_ONLY
argument_list|,
name|pos
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
for|for
control|(
name|Checksum
name|checksum
range|:
name|checksumList
control|)
block|{
name|checksum
operator|.
name|update
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
name|fileSize
operator|=
name|channel
operator|.
name|size
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|BUFFER_SIZE
expr_stmt|;
block|}
for|for
control|(
name|Checksum
name|checksum
range|:
name|checksumList
control|)
block|{
name|checksum
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|Checksum
name|checksum
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|fileSize
decl_stmt|;
try|try
init|(
name|FileChannel
name|channel
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
init|)
block|{
name|fileSize
operator|=
name|channel
operator|.
name|size
argument_list|()
expr_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|fileSize
condition|)
block|{
name|long
name|bufferSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|BUFFER_SIZE
argument_list|,
name|fileSize
operator|-
name|pos
argument_list|)
decl_stmt|;
name|MappedByteBuffer
name|buffer
init|=
name|channel
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_ONLY
argument_list|,
name|pos
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|fileSize
operator|=
name|channel
operator|.
name|size
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|BUFFER_SIZE
expr_stmt|;
block|}
name|checksum
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Checksum
argument_list|>
name|initializeChecksums
parameter_list|(
name|Path
name|file
parameter_list|,
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|checksumAlgorithms
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Checksum
argument_list|>
name|checksums
init|=
name|newChecksums
argument_list|(
name|checksumAlgorithms
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|checksums
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|checksums
return|;
block|}
comment|/**      * Returns the list of configured checksum types.      *      * @param checksumTypes The list of checksum strings      * @return The list of checksum objects      */
specifier|public
specifier|static
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|getAlgorithms
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|checksumTypes
parameter_list|)
block|{
return|return
name|checksumTypes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ca
lambda|->
name|ChecksumAlgorithm
operator|.
name|valueOf
argument_list|(
name|ca
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Checksum
argument_list|>
name|newChecksums
parameter_list|(
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|checksumAlgorithms
parameter_list|)
block|{
return|return
name|checksumAlgorithms
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
operator|new
name|Checksum
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

