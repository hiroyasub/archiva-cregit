begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  *  * Class that handles checksums with streams.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|StreamingChecksum
block|{
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
specifier|public
specifier|static
name|void
name|updateChecksums
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|algorithms
parameter_list|,
name|List
argument_list|<
name|OutputStream
argument_list|>
name|checksumOutput
parameter_list|)
block|{
name|List
argument_list|<
name|Checksum
argument_list|>
name|checksums
init|=
name|algorithms
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
operator|new
name|Checksum
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|read
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|Checksum
name|cs
range|:
name|checksums
control|)
block|{
name|cs
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|minIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|algorithms
operator|.
name|size
argument_list|()
argument_list|,
name|checksums
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|csIndex
init|=
literal|0
init|;
name|csIndex
operator|<
name|minIndex
condition|;
name|csIndex
operator|++
control|)
block|{
name|Checksum
name|cs
init|=
name|checksums
operator|.
name|get
argument_list|(
name|csIndex
argument_list|)
decl_stmt|;
name|cs
operator|.
name|finish
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
name|checksumOutput
operator|.
name|get
argument_list|(
name|csIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|cs
operator|.
name|getChecksum
argument_list|( )
operator|.
name|getBytes
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

