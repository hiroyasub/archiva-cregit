begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Container for a list of update status objects.  *  * If there is a overall error that is not specific to a algorithm, the total status  * flag is set to error.  */
end_comment

begin_class
specifier|public
class|class
name|UpdateStatusList
block|{
specifier|private
name|int
name|totalStatus
init|=
name|UpdateStatus
operator|.
name|NONE
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ChecksumAlgorithm
argument_list|,
name|UpdateStatus
argument_list|>
name|statusList
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|UpdateStatusList
parameter_list|()
block|{
block|}
specifier|public
name|void
name|addStatus
parameter_list|(
name|UpdateStatus
name|status
parameter_list|)
block|{
name|statusList
operator|.
name|put
argument_list|(
name|status
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|UpdateStatusList
name|INITIALIZE
parameter_list|(
name|List
argument_list|<
name|ChecksumAlgorithm
argument_list|>
name|algorithms
parameter_list|)
block|{
specifier|final
name|UpdateStatusList
name|list
init|=
operator|new
name|UpdateStatusList
argument_list|()
decl_stmt|;
for|for
control|(
name|ChecksumAlgorithm
name|algorithm
range|:
name|algorithms
control|)
block|{
name|list
operator|.
name|addStatus
argument_list|(
operator|new
name|UpdateStatus
argument_list|(
name|algorithm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|int
name|getTotalStatus
parameter_list|()
block|{
return|return
name|totalStatus
return|;
block|}
specifier|public
name|void
name|setTotalError
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|e
expr_stmt|;
name|this
operator|.
name|totalStatus
operator|=
name|UpdateStatus
operator|.
name|ERROR
expr_stmt|;
block|}
specifier|public
name|Throwable
name|getTotalError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
specifier|public
name|List
argument_list|<
name|UpdateStatus
argument_list|>
name|getStatusList
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|statusList
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|ChecksumAlgorithm
name|algorithm
parameter_list|,
name|UpdateStatus
name|status
parameter_list|)
block|{
name|statusList
operator|.
name|put
argument_list|(
name|algorithm
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|ChecksumAlgorithm
name|algorithm
parameter_list|,
name|int
name|status
parameter_list|)
block|{
name|statusList
operator|.
name|put
argument_list|(
name|algorithm
argument_list|,
operator|new
name|UpdateStatus
argument_list|(
name|algorithm
argument_list|,
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorStatus
parameter_list|(
name|ChecksumAlgorithm
name|algorithm
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|statusList
operator|.
name|put
argument_list|(
name|algorithm
argument_list|,
operator|new
name|UpdateStatus
argument_list|(
name|algorithm
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UpdateStatus
name|getStatus
parameter_list|(
name|ChecksumAlgorithm
name|algorithm
parameter_list|)
block|{
return|return
name|statusList
operator|.
name|get
argument_list|(
name|algorithm
argument_list|)
return|;
block|}
block|}
end_class

end_unit

