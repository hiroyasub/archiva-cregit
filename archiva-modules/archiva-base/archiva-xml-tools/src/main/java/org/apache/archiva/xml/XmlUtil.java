begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|XmlUtil
block|{
specifier|public
specifier|static
name|Document
name|createDocument
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|newDocument
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Element
name|addChild
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Element
name|el
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
return|return
name|el
return|;
block|}
specifier|public
specifier|static
name|Element
name|addChild
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Document
name|doc
init|=
name|parent
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|Element
name|el
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
return|return
name|el
return|;
block|}
specifier|public
specifier|static
name|String
name|getText
parameter_list|(
name|Node
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|element
operator|.
name|normalize
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|txt
init|=
name|element
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|!=
literal|null
condition|)
block|{
return|return
name|txt
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|DOMException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
specifier|public
specifier|static
name|Node
name|getChild
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeList
name|elList
init|=
name|parent
operator|.
name|getElementsByTagName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|elList
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|elList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getChildText
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|getText
argument_list|(
name|getChild
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

