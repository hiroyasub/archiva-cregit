begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * XMLReader - a set of common xml utility methods for reading content out of an xml file.  */
end_comment

begin_class
specifier|public
class|class
name|XMLReader
block|{
specifier|private
name|URL
name|xmlUrl
decl_stmt|;
specifier|private
name|String
name|documentType
decl_stmt|;
specifier|private
name|Document
name|document
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reverseNamespaceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
class|class
name|NamespaceCtx
implements|implements
name|NamespaceContext
block|{
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|namespaceMap
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
name|reverseNamespaceMap
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getPrefixes
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
name|namespaceMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
specifier|public
name|XMLReader
parameter_list|(
name|String
name|type
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|XMLException
block|{
name|initWithFile
argument_list|(
name|type
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initWithFile
parameter_list|(
name|String
name|type
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|XMLException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"file does not exist: "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"path is not a file: "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Cannot read xml file due to permissions: "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|initWithUrl
argument_list|(
name|type
argument_list|,
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Unable to translate file "
operator|+
name|file
operator|+
literal|" to URL: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|XMLReader
parameter_list|(
name|String
name|type
parameter_list|,
name|StorageAsset
name|asset
parameter_list|)
throws|throws
name|XMLException
block|{
if|if
condition|(
name|asset
operator|.
name|isFileBased
argument_list|()
condition|)
block|{
name|initWithFile
argument_list|(
name|type
argument_list|,
name|asset
operator|.
name|getFilePath
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URI
name|uri
init|=
name|asset
operator|.
name|getStorage
argument_list|( )
operator|.
name|getLocation
argument_list|( )
operator|.
name|resolve
argument_list|(
name|asset
operator|.
name|getPath
argument_list|( )
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|asset
operator|.
name|getReadStream
argument_list|()
init|)
block|{
name|initWithStream
argument_list|(
name|type
argument_list|,
name|uri
operator|.
name|toURL
argument_list|( )
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Could not open asset stream of "
operator|+
name|uri
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|XMLReader
parameter_list|(
name|String
name|type
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|XMLException
block|{
name|initWithUrl
argument_list|(
name|type
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initWithUrl
parameter_list|(
name|String
name|type
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|XMLException
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
init|)
block|{
name|initWithStream
argument_list|(
name|type
argument_list|,
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Could not open url "
operator|+
name|url
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initWithStream
parameter_list|(
name|String
name|type
parameter_list|,
name|URL
name|url
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|XMLException
block|{
name|this
operator|.
name|documentType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|xmlUrl
operator|=
name|url
expr_stmt|;
comment|// SAXReader reader = new SAXReader();
try|try
init|(
name|Reader
name|reader
init|=
operator|new
name|LatinEntityResolutionReader
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setExpandEntityReferences
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD,"false");
name|dbf
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
comment|// To suppress error output at System.err
name|db
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|ErrorHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|exception
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|db
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Unable to open stream to "
operator|+
name|url
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Unable to start parser "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Unable to parse file "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Element
name|root
init|=
name|this
operator|.
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Invalid "
operator|+
name|documentType
operator|+
literal|" xml: root element is null."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|documentType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Invalid "
operator|+
name|documentType
operator|+
literal|" xml: Unexpected root element<"
operator|+
name|root
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">, expected<"
operator|+
name|documentType
operator|+
literal|">"
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getDefaultNamespaceURI
parameter_list|()
block|{
name|String
name|namespace
init|=
name|this
operator|.
name|document
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
return|return
name|namespace
return|;
block|}
specifier|public
name|void
name|addNamespaceMapping
parameter_list|(
name|String
name|elementName
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|namespaceMap
operator|.
name|put
argument_list|(
name|elementName
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Element
name|getElement
parameter_list|(
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|XPathExpression
name|xpath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xpath
operator|=
name|createXPath
argument_list|(
name|xpathExpr
argument_list|)
expr_stmt|;
name|Object
name|evaluated
init|=
name|xpath
operator|.
name|evaluate
argument_list|(
name|document
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|evaluated
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|evaluated
operator|instanceof
name|Element
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|evaluated
return|;
block|}
else|else
block|{
comment|// Unknown evaluated type.
throw|throw
operator|new
name|XMLException
argument_list|(
literal|".getElement( Expr: "
operator|+
name|xpathExpr
operator|+
literal|" ) resulted in non-Element type -> ("
operator|+
name|evaluated
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") "
operator|+
name|evaluated
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Could not parse xpath expression"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|XPathExpression
name|createXPath
parameter_list|(
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|namespaceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|NamespaceCtx
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|xpath
operator|.
name|compile
argument_list|(
name|xpathExpr
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasElement
parameter_list|(
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|XPathExpression
name|xpath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xpath
operator|=
name|createXPath
argument_list|(
name|xpathExpr
argument_list|)
expr_stmt|;
name|Object
name|evaluated
init|=
name|xpath
operator|.
name|evaluate
argument_list|(
name|document
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|evaluated
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Could not create xpath expression"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Remove namespaces from entire document.      */
specifier|public
name|void
name|removeNamespaces
parameter_list|()
block|{
name|removeNamespaces
argument_list|(
name|this
operator|.
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove namespaces from element recursively.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|removeNamespaces
parameter_list|(
name|Node
name|elem
parameter_list|)
block|{
if|if
condition|(
name|elem
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|||
name|elem
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|document
operator|.
name|renameNode
argument_list|(
name|elem
argument_list|,
literal|null
argument_list|,
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|n
decl_stmt|;
name|NodeList
name|nodeList
init|=
name|elem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removeNamespaces
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getElementText
parameter_list|(
name|Node
name|context
parameter_list|,
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|XPathExpression
name|xpath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xpath
operator|=
name|createXPath
argument_list|(
name|xpathExpr
argument_list|)
expr_stmt|;
name|Object
name|evaluated
init|=
name|xpath
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|evaluated
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|evaluated
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|evalElem
init|=
operator|(
name|Element
operator|)
name|evaluated
decl_stmt|;
return|return
name|XmlUtil
operator|.
name|getText
argument_list|(
name|evalElem
argument_list|)
return|;
block|}
else|else
block|{
comment|// Unknown evaluated type.
throw|throw
operator|new
name|XMLException
argument_list|(
literal|".getElementText( Node, Expr: "
operator|+
name|xpathExpr
operator|+
literal|" ) resulted in non-Element type -> ("
operator|+
name|evaluated
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") "
operator|+
name|evaluated
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Could not parse xpath expression"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getElementText
parameter_list|(
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
return|return
name|getElementText
argument_list|(
name|document
argument_list|,
name|xpathExpr
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|Node
argument_list|>
name|getElementList
parameter_list|(
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|XPathExpression
name|xpath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xpath
operator|=
name|createXPath
argument_list|(
name|xpathExpr
argument_list|)
expr_stmt|;
name|Object
name|evaluated
init|=
name|xpath
operator|.
name|evaluate
argument_list|(
name|document
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|evaluated
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|NodeList
name|nl
init|=
operator|(
name|NodeList
operator|)
name|evaluated
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nodeList
operator|.
name|add
argument_list|(
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeList
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLException
argument_list|(
literal|"Could not parse xpath expression"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getElementListText
parameter_list|(
name|String
name|xpathExpr
parameter_list|)
throws|throws
name|XMLException
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|elemList
init|=
name|getElementList
argument_list|(
name|xpathExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemList
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|elemList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|instanceof
name|Element
argument_list|)
operator|.
name|map
argument_list|(
name|n
lambda|->
name|XmlUtil
operator|.
name|getText
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

