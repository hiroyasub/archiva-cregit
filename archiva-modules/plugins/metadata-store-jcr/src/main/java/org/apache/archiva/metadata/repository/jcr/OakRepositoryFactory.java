begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|SimpleNodeAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexAugmentorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|BufferedOakDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|LuceneIndexImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|DocumentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|ExternalObserverBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|LocalIndexObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|NRTIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|PropertyIndexCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|DefaultIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|score
operator|.
name|ScorerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|score
operator|.
name|impl
operator|.
name|ScorerProviderFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|namespace
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|Clusterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
operator|.
name|OakRepositoryFactory
operator|.
name|StoreType
operator|.
name|IN_MEMORY_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
operator|.
name|OakRepositoryFactory
operator|.
name|StoreType
operator|.
name|SEGMENT_FILE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|ONE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
operator|.
name|JcrConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
import|;
end_import

begin_comment
comment|/**  * Created by martin on 14.06.17.  *  * @author Martin Stockhammer  * @since 3.0.0  */
end_comment

begin_class
specifier|public
class|class
name|OakRepositoryFactory
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OakRepositoryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FileStore
name|fileStore
decl_stmt|;
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|IndexTracker
name|tracker
decl_stmt|;
specifier|private
name|DocumentQueue
name|documentQueue
decl_stmt|;
specifier|private
name|NRTIndexFactory
name|nrtIndexFactory
decl_stmt|;
specifier|private
name|IndexCopier
name|indexCopier
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|ExtractedTextCache
name|extractedTextCache
decl_stmt|;
specifier|private
name|boolean
name|hybridIndex
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|prefetchEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enableAsyncIndexOpen
init|=
literal|true
decl_stmt|;
name|int
name|queueSize
init|=
literal|10000
decl_stmt|;
name|int
name|cleanerInterval
init|=
literal|10
operator|*
literal|60
decl_stmt|;
name|boolean
name|enableCopyOnWrite
init|=
literal|true
decl_stmt|;
name|boolean
name|enableCopyOnRead
init|=
literal|true
decl_stmt|;
name|int
name|cacheSizeInMB
init|=
literal|20
decl_stmt|;
name|int
name|cacheExpiryInSecs
init|=
literal|300
decl_stmt|;
name|int
name|threadPoolSize
init|=
literal|5
decl_stmt|;
specifier|private
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
name|MountInfoProvider
name|mountInfoProvider
init|=
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
decl_stmt|;
specifier|private
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
literal|null
decl_stmt|;
specifier|private
name|LuceneIndexProvider
name|indexProvider
decl_stmt|;
specifier|private
name|ScorerProviderFactory
name|scorerFactory
init|=
operator|new
name|ScorerProviderFactoryImpl
argument_list|( )
decl_stmt|;
specifier|private
name|IndexAugmentorFactory
name|augmentorFactory
init|=
operator|new
name|IndexAugmentorFactory
argument_list|( )
decl_stmt|;
specifier|private
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
init|=
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|QueryIndex
operator|.
name|NodeAggregator
name|nodeAggregator
init|=
operator|new
name|SimpleNodeAggregator
argument_list|( )
decl_stmt|;
specifier|private
name|BackgroundObserver
name|backgroundObserver
decl_stmt|;
specifier|private
name|BackgroundObserver
name|externalIndexObserver
decl_stmt|;
specifier|private
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
specifier|private
name|PropertyIndexCleaner
name|cleaner
decl_stmt|;
specifier|private
name|IndexPathService
name|indexPathService
decl_stmt|;
specifier|private
name|LuceneIndexEditorProvider
name|editorProvider
decl_stmt|;
specifier|private
name|Path
name|indexDir
decl_stmt|;
specifier|public
enum|enum
name|StoreType
block|{
name|SEGMENT_FILE_TYPE
block|,
name|IN_MEMORY_TYPE
block|;     }
specifier|private
name|StoreType
name|storeType
init|=
name|SEGMENT_FILE_TYPE
decl_stmt|;
specifier|private
name|Path
name|repositoryPath
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"repository"
argument_list|)
decl_stmt|;
specifier|public
name|OakRepositoryFactory
parameter_list|()
block|{
specifier|final
name|OakRepositoryFactory
name|repositoryFactory
init|=
name|this
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|( )
lambda|->
block|{
if|if
condition|(
name|repositoryFactory
operator|!=
literal|null
condition|)
block|{
name|repositoryFactory
operator|.
name|close
argument_list|( )
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeExtractedTextCache
parameter_list|(
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|boolean
name|alwaysUsePreExtractedCache
init|=
literal|false
decl_stmt|;
name|extractedTextCache
operator|=
operator|new
name|ExtractedTextCache
argument_list|(
name|cacheSizeInMB
operator|*
name|ONE_MB
argument_list|,
name|cacheExpiryInSecs
argument_list|,
name|alwaysUsePreExtractedCache
argument_list|,
name|indexDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IndexTracker
name|createTracker
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexTracker
name|tracker
decl_stmt|;
if|if
condition|(
name|enableCopyOnRead
condition|)
block|{
name|initializeIndexCopier
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Enabling CopyOnRead support. Index files would be copied under {}"
argument_list|,
name|indexDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hybridIndex
condition|)
block|{
name|nrtIndexFactory
operator|=
operator|new
name|NRTIndexFactory
argument_list|(
name|indexCopier
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|(
operator|new
name|DefaultIndexReaderFactory
argument_list|(
name|mountInfoProvider
argument_list|,
name|indexCopier
argument_list|)
argument_list|,
name|nrtIndexFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|(
operator|new
name|DefaultIndexReaderFactory
argument_list|(
name|mountInfoProvider
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tracker
operator|.
name|setAsyncIndexInfoService
argument_list|(
name|asyncIndexInfoService
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|refresh
argument_list|()
expr_stmt|;
return|return
name|tracker
return|;
block|}
specifier|private
name|void
name|initializeIndexCopier
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexCopier
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|prefetchEnabled
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Prefetching of index files enabled. Index would be opened after copying all new files locally"
argument_list|)
expr_stmt|;
block|}
name|indexCopier
operator|=
operator|new
name|IndexCopier
argument_list|(
name|getExecutorService
argument_list|()
argument_list|,
name|indexDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|prefetchEnabled
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|executorService
operator|=
name|createExecutor
argument_list|()
expr_stmt|;
block|}
return|return
name|executorService
return|;
block|}
specifier|private
name|ExecutorService
name|createExecutor
parameter_list|()
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threadPoolSize
argument_list|,
name|threadPoolSize
argument_list|,
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Thread
operator|.
name|UncaughtExceptionHandler
name|handler
init|=
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred in asynchronous processing "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
annotation|@
name|NotNull
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|createName
argument_list|()
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
specifier|private
name|String
name|createName
parameter_list|()
block|{
return|return
literal|"oak-lucene-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setKeepAliveTime
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
specifier|private
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|indexProvider
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nodeAggregator
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using NodeAggregator {}"
argument_list|,
name|nodeAggregator
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexProvider
operator|.
name|setAggregator
argument_list|(
name|nodeAggregator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerObserver
parameter_list|()
block|{
name|Observer
name|observer
init|=
name|indexProvider
decl_stmt|;
if|if
condition|(
name|enableAsyncIndexOpen
condition|)
block|{
name|backgroundObserver
operator|=
operator|new
name|BackgroundObserver
argument_list|(
name|indexProvider
argument_list|,
name|getExecutorService
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registering the LuceneIndexProvider as a BackgroundObserver"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerLocalIndexObserver
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hybridIndex
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Hybrid indexing feature disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
name|documentQueue
operator|=
operator|new
name|DocumentQueue
argument_list|(
name|queueSize
argument_list|,
name|tracker
argument_list|,
name|getExecutorService
argument_list|()
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
name|LocalIndexObserver
name|localIndexObserver
init|=
operator|new
name|LocalIndexObserver
argument_list|(
name|documentQueue
argument_list|,
name|statisticsProvider
argument_list|)
decl_stmt|;
name|int
name|observerQueueSize
init|=
literal|1000
decl_stmt|;
name|int
name|builderMaxSize
init|=
literal|5000
decl_stmt|;
comment|// regs.add(bundleContext.registerService(JournalPropertyService.class.getName(),
comment|//    new LuceneJournalPropertyService(builderMaxSize), null));
name|ExternalObserverBuilder
name|builder
init|=
operator|new
name|ExternalObserverBuilder
argument_list|(
name|documentQueue
argument_list|,
name|tracker
argument_list|,
name|statisticsProvider
argument_list|,
name|getExecutorService
argument_list|()
argument_list|,
name|observerQueueSize
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Configured JournalPropertyBuilder with max size {} and backed by BackgroundObserver "
operator|+
literal|"with queue size {}"
argument_list|,
name|builderMaxSize
argument_list|,
name|observerQueueSize
argument_list|)
expr_stmt|;
name|Observer
name|observer
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|externalIndexObserver
operator|=
name|builder
operator|.
name|getBackgroundObserver
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Hybrid indexing enabled for configured indexes with queue size of {}"
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IndexInfoProvider
name|registerIndexInfoProvider
parameter_list|()
block|{
return|return
operator|new
name|LuceneIndexInfoProvider
argument_list|(
name|nodeStore
argument_list|,
name|asyncIndexInfoService
argument_list|,
name|getIndexCheckDir
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getIndexCheckDir
parameter_list|()
block|{
return|return
name|checkNotNull
argument_list|(
name|indexDir
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"indexCheckDir"
argument_list|)
return|;
block|}
specifier|private
name|LuceneIndexImporter
name|registerIndexImporterProvider
parameter_list|()
block|{
return|return
operator|new
name|LuceneIndexImporter
argument_list|(
name|blobStore
argument_list|)
return|;
block|}
specifier|private
name|void
name|registerPropertyIndexCleaner
parameter_list|( )
block|{
if|if
condition|(
name|cleanerInterval
operator|<=
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Property index cleaner would not be registered"
argument_list|)
expr_stmt|;
return|return;
block|}
name|cleaner
operator|=
operator|new
name|PropertyIndexCleaner
argument_list|(
name|nodeStore
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
comment|//Proxy check for DocumentNodeStore
if|if
condition|(
name|nodeStore
operator|instanceof
name|Clusterable
condition|)
block|{
name|cleaner
operator|.
name|setRecursiveDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"PropertyIndexCleaner configured to perform recursive delete"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Property index cleaner configured to run every [{}] seconds"
argument_list|,
name|cleanerInterval
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerIndexEditor
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|enableCopyOnWrite
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|enableCopyOnWrite
condition|)
block|{
name|initializeIndexCopier
argument_list|()
expr_stmt|;
name|editorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|indexCopier
argument_list|,
name|tracker
argument_list|,
name|extractedTextCache
argument_list|,
name|augmentorFactory
argument_list|,
name|mountInfoProvider
argument_list|,
name|activeDeletedBlobCollector
argument_list|,
literal|null
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Enabling CopyOnWrite support. Index files would be copied under {}"
argument_list|,
name|indexDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
literal|null
argument_list|,
name|tracker
argument_list|,
name|extractedTextCache
argument_list|,
name|augmentorFactory
argument_list|,
name|mountInfoProvider
argument_list|,
name|activeDeletedBlobCollector
argument_list|,
literal|null
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
name|editorProvider
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
if|if
condition|(
name|hybridIndex
condition|)
block|{
name|editorProvider
operator|.
name|setIndexingQueue
argument_list|(
name|checkNotNull
argument_list|(
name|documentQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Repository
name|createRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|indexDir
operator|=
name|repositoryPath
operator|.
name|resolve
argument_list|(
literal|".index-lucene"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
name|blobStore
operator|=
operator|new
name|FileBlobStore
argument_list|(
name|indexDir
operator|.
name|resolve
argument_list|(
literal|"blobs"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statisticsProvider
operator|=
name|StatisticsProvider
operator|.
name|NOOP
expr_stmt|;
if|if
condition|(
name|SEGMENT_FILE_TYPE
operator|==
name|storeType
condition|)
block|{
name|fileStore
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|repositoryPath
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
comment|//
operator|.
name|withStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
comment|//
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|IN_MEMORY_TYPE
operator|==
name|storeType
condition|)
block|{
name|nodeStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|( )
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Store type "
operator|+
name|storeType
operator|+
literal|" not recognized"
argument_list|)
throw|;
block|}
name|asyncIndexInfoService
operator|=
operator|new
name|AsyncIndexInfoServiceImpl
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|indexPathService
operator|=
operator|new
name|IndexPathServiceImpl
argument_list|(
name|nodeStore
argument_list|,
name|mountInfoProvider
argument_list|)
expr_stmt|;
name|BufferedOakDirectory
operator|.
name|setEnableWritingSingleBlobIndexFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initializeExtractedTextCache
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
name|tracker
operator|=
name|createTracker
argument_list|()
expr_stmt|;
name|indexProvider
operator|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|tracker
argument_list|,
name|scorerFactory
argument_list|,
name|augmentorFactory
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
name|registerObserver
argument_list|()
expr_stmt|;
name|registerLocalIndexObserver
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|registerIndexInfoProvider
argument_list|()
expr_stmt|;
name|registerIndexImporterProvider
argument_list|()
expr_stmt|;
name|registerPropertyIndexCleaner
argument_list|()
expr_stmt|;
name|registerIndexEditor
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|RepositoryInitializer
name|repoInitializer
init|=
operator|new
name|RepositoryInitializer
argument_list|( )
block|{
specifier|private
name|IndexDefinitionBuilder
operator|.
name|PropertyRule
name|initRegexAll
parameter_list|(
name|IndexDefinitionBuilder
operator|.
name|IndexRule
name|rule
parameter_list|)
block|{
return|return
name|rule
operator|.
name|indexNodeName
argument_list|( )
operator|.
name|property
argument_list|(
name|JCR_LASTMODIFIED
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|type
argument_list|(
literal|"Date"
argument_list|)
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_PATH
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
name|FulltextIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|,
literal|true
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|( )
operator|.
name|nodeScopeIndex
argument_list|()
return|;
block|}
specifier|private
name|IndexDefinitionBuilder
operator|.
name|PropertyRule
name|initBaseRule
parameter_list|(
name|IndexDefinitionBuilder
operator|.
name|IndexRule
name|rule
parameter_list|)
block|{
return|return
name|rule
operator|.
name|indexNodeName
argument_list|( )
operator|.
name|property
argument_list|(
name|JCR_CREATED
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|type
argument_list|(
literal|"Date"
argument_list|)
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_LASTMODIFIED
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|type
argument_list|(
literal|"Date"
argument_list|)
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
name|JCR_PATH
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"id"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|( )
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|root
parameter_list|)
block|{
name|NodeBuilder
name|namespaces
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|hasChildNode
argument_list|(
name|NamespaceConstants
operator|.
name|REP_NAMESPACES
argument_list|)
condition|)
block|{
name|namespaces
operator|=
name|Namespaces
operator|.
name|createStandardMappings
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Namespaces
operator|.
name|buildIndexNode
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
comment|// index node for faster lookup
block|}
else|else
block|{
name|namespaces
operator|=
name|root
operator|.
name|getChildNode
argument_list|(
name|NamespaceConstants
operator|.
name|REP_NAMESPACES
argument_list|)
expr_stmt|;
block|}
name|Namespaces
operator|.
name|addCustomMapping
argument_list|(
name|namespaces
argument_list|,
literal|"http://archiva.apache.org/jcr/"
argument_list|,
literal|"archiva"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating index "
argument_list|)
expr_stmt|;
name|NodeBuilder
name|oakIdx
init|=
name|IndexUtils
operator|.
name|getOrCreateOakIndex
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oakIdx
operator|.
name|hasChildNode
argument_list|(
literal|"repo-lucene"
argument_list|)
condition|)
block|{
name|NodeBuilder
name|lucene
init|=
name|oakIdx
operator|.
name|child
argument_list|(
literal|"repo-lucene"
argument_list|)
decl_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:QueryIndexDefinition"
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
literal|"compatVersion"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"lucene"
argument_list|)
expr_stmt|;
comment|// lucene.setProperty("async", "async");
comment|// lucene.setProperty( INCLUDE_PROPERTY_TYPES, ImmutableSet.of(  ), Type.STRINGS );
comment|// lucene.setProperty("refresh",true);
name|NodeBuilder
name|rules
init|=
name|lucene
operator|.
name|child
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
name|rules
operator|.
name|setProperty
argument_list|(
literal|":childOrder"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|REPOSITORY_NODE_TYPE
argument_list|,
name|NAMESPACE_NODE_TYPE
argument_list|,
comment|//
name|PROJECT_NODE_TYPE
argument_list|,
name|PROJECT_VERSION_NODE_TYPE
argument_list|,
comment|//
name|ARTIFACT_NODE_TYPE
argument_list|,
comment|//
name|FACET_NODE_TYPE
comment|//
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|lucene
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|async
argument_list|(
literal|"async"
argument_list|,
literal|"nrt"
argument_list|,
literal|"sync"
argument_list|)
operator|.
name|includedPaths
argument_list|(
literal|"/repositories"
argument_list|)
operator|.
name|evaluatePathRestrictions
argument_list|()
expr_stmt|;
name|initBaseRule
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|REPOSITORY_NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|initBaseRule
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|NAMESPACE_NODE_TYPE
argument_list|)
argument_list|)
operator|.
name|property
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|initBaseRule
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|PROJECT_NODE_TYPE
argument_list|)
argument_list|)
operator|.
name|property
argument_list|(
literal|"name"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|notNullCheckEnabled
argument_list|()
operator|.
name|nullCheckEnabled
argument_list|()
expr_stmt|;
name|initBaseRule
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
argument_list|)
operator|.
name|property
argument_list|(
literal|"name"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|notNullCheckEnabled
argument_list|()
operator|.
name|nullCheckEnabled
argument_list|()
operator|.
name|property
argument_list|(
literal|"description"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|notNullCheckEnabled
argument_list|()
operator|.
name|nullCheckEnabled
argument_list|()
operator|.
name|property
argument_list|(
literal|"url"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|( )
operator|.
name|notNullCheckEnabled
argument_list|()
operator|.
name|nullCheckEnabled
argument_list|()
operator|.
name|property
argument_list|(
literal|"incomplete"
argument_list|)
operator|.
name|type
argument_list|(
literal|"Boolean"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"mailinglist/name"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|property
argument_list|(
literal|"license/license.name"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|initBaseRule
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
argument_list|)
operator|.
name|property
argument_list|(
literal|"whenGathered"
argument_list|)
operator|.
name|type
argument_list|(
literal|"Date"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"size"
argument_list|)
operator|.
name|type
argument_list|(
literal|"Long"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"version"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
expr_stmt|;
name|initRegexAll
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
argument_list|)
operator|.
name|property
argument_list|(
literal|"archiva:facetId"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"archiva:name"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|MIXIN_META_SCM
argument_list|)
operator|.
name|property
argument_list|(
literal|"scm.connection"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"scm.developerConnection"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"scm.url"
argument_list|)
operator|.
name|type
argument_list|(
literal|"URI"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|MIXIN_META_CI
argument_list|)
operator|.
name|property
argument_list|(
literal|"ci.system"
argument_list|)
operator|.
name|propertyIndex
argument_list|( )
operator|.
name|property
argument_list|(
literal|"ci.ur"
argument_list|)
operator|.
name|propertyIndex
argument_list|( )
operator|.
name|analyzed
argument_list|( )
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|MIXIN_META_ISSUE
argument_list|)
operator|.
name|property
argument_list|(
literal|"issue.system"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"issue.url"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|MIXIN_META_ORGANIZATION
argument_list|)
operator|.
name|property
argument_list|(
literal|"org.name"
argument_list|)
operator|.
name|propertyIndex
argument_list|( )
operator|.
name|analyzed
argument_list|( )
operator|.
name|property
argument_list|(
literal|"org.url"
argument_list|)
operator|.
name|propertyIndex
argument_list|( )
operator|.
name|analyzed
argument_list|( )
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|MIXIN_META_LICENSE
argument_list|)
operator|.
name|property
argument_list|(
literal|"license.name"
argument_list|)
operator|.
name|propertyIndex
argument_list|( )
operator|.
name|analyzed
argument_list|( )
operator|.
name|property
argument_list|(
literal|"license.url"
argument_list|)
operator|.
name|propertyIndex
argument_list|( )
operator|.
name|analyzed
argument_list|( )
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|MIXIN_META_MAILINGLIST
argument_list|)
operator|.
name|property
argument_list|(
literal|"name"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|initBaseRule
argument_list|(
name|idxBuilder
operator|.
name|indexRule
argument_list|(
name|DEPENDENCY_NODE_TYPE
argument_list|)
argument_list|)
operator|.
name|property
argument_list|(
literal|"groupId"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"artifactId"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"version"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"type"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"classifier"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|ordered
argument_list|()
operator|.
name|property
argument_list|(
literal|"scope"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"systemPath"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|property
argument_list|(
literal|"optional"
argument_list|)
operator|.
name|type
argument_list|(
literal|"Boolean"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|aggregateRule
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
operator|.
name|include
argument_list|(
literal|"dependencies"
argument_list|)
operator|.
name|path
argument_list|(
literal|"dependencies/*"
argument_list|)
operator|.
name|relativeNode
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|( )
expr_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
name|oakIdx
argument_list|,
literal|"baseIndexes"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"jcr:uuid"
argument_list|,
literal|"rep:principalName"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Index: {} repo-lucene: {}"
argument_list|,
name|lucene
argument_list|,
name|lucene
operator|.
name|getChildNode
argument_list|(
literal|"repo-lucene"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"repo-lucene Properties: {}"
argument_list|,
name|lucene
operator|.
name|getChildNode
argument_list|(
literal|"repo-lucene"
argument_list|)
operator|.
name|getProperties
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No Index update"
argument_list|)
expr_stmt|;
block|}
comment|// IndexUtils.createIndexDefinition(  )
block|}
block|}
decl_stmt|;
comment|//        ExternalObserverBuilder builder = new ExternalObserverBuilder(queue, tracker, statsProvider,
comment|//            executorService, queueSize);
comment|//        Observer observer = builder.build();
comment|//        builder.getBackgroundObserver();
name|log
operator|.
name|info
argument_list|(
literal|"Starting Jcr repo with nodeStore {}"
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
comment|//
operator|.
name|with
argument_list|(
name|backgroundObserver
argument_list|)
comment|//
operator|.
name|with
argument_list|(
name|externalIndexObserver
argument_list|)
comment|// .with(observer)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|indexProvider
argument_list|)
operator|.
name|with
argument_list|(
name|repoInitializer
argument_list|)
operator|.
name|withAsyncIndexing
argument_list|(
literal|"async"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|//
comment|//.withAsyncIndexing( "async", 5 );
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|Repository
name|r
init|=
name|jcr
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"time to create jcr repository: {} ms"
argument_list|,
name|stopWatch
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|private
name|void
name|closeSilently
parameter_list|(
name|Closeable
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|service
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Closing JCR RepositoryFactory"
argument_list|)
expr_stmt|;
name|closeSilently
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
name|closeSilently
argument_list|(
name|backgroundObserver
argument_list|)
expr_stmt|;
name|closeSilently
argument_list|(
name|externalIndexObserver
argument_list|)
expr_stmt|;
name|closeSilently
argument_list|(
name|indexProvider
argument_list|)
expr_stmt|;
name|indexProvider
operator|=
literal|null
expr_stmt|;
name|closeSilently
argument_list|(
name|documentQueue
argument_list|)
expr_stmt|;
name|closeSilently
argument_list|(
name|nrtIndexFactory
argument_list|)
expr_stmt|;
name|closeSilently
argument_list|(
name|indexCopier
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|( )
expr_stmt|;
block|}
block|}
if|if
condition|(
name|extractedTextCache
operator|!=
literal|null
condition|)
block|{
name|extractedTextCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|StoreType
name|getStoreType
parameter_list|()
block|{
return|return
name|storeType
return|;
block|}
specifier|public
name|void
name|setStoreType
parameter_list|(
name|StoreType
name|storeType
parameter_list|)
block|{
name|this
operator|.
name|storeType
operator|=
name|storeType
expr_stmt|;
block|}
specifier|public
name|Path
name|getRepositoryPath
parameter_list|()
block|{
return|return
name|repositoryPath
return|;
block|}
specifier|public
name|void
name|setRepositoryPath
parameter_list|(
name|Path
name|repositoryPath
parameter_list|)
block|{
name|this
operator|.
name|repositoryPath
operator|=
name|repositoryPath
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryPath
parameter_list|(
name|String
name|repositoryPath
parameter_list|)
block|{
name|this
operator|.
name|repositoryPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|repositoryPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|this
operator|.
name|repositoryPath
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|this
operator|.
name|repositoryPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot create directory:"
operator|+
name|repositoryPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

