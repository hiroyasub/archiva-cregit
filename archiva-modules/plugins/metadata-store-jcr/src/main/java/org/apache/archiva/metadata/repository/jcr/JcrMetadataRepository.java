begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Workspace
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * TODO below: revise storage format for project version metadata  * TODO revise reference storage  */
end_comment

begin_class
specifier|public
class|class
name|JcrMetadataRepository
implements|implements
name|MetadataRepository
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JCR_LAST_MODIFIED
init|=
literal|"jcr:lastModified"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NAMESPACE_NODE_TYPE
init|=
literal|"archiva:namespace"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROJECT_NODE_TYPE
init|=
literal|"archiva:project"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROJECT_VERSION_NODE_TYPE
init|=
literal|"archiva:projectVersion"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ARTIFACT_NODE_TYPE
init|=
literal|"archiva:artifact"
decl_stmt|;
specifier|static
specifier|final
name|String
name|FACET_NODE_TYPE
init|=
literal|"archiva:facet"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY_NODE_TYPE
init|=
literal|"archiva:dependency"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcrMetadataRepository
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Repository
name|repository
decl_stmt|;
specifier|private
name|Session
name|jcrSession
decl_stmt|;
specifier|public
name|JcrMetadataRepository
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
parameter_list|,
name|Repository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|metadataFacetFactories
operator|=
name|metadataFacetFactories
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|static
name|void
name|initialize
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: consider using namespaces for facets instead of the current approach:
comment|// (if used, check if actually called by normal injection)
comment|//        for ( String facetId : metadataFacetFactories.keySet() )
comment|//        {
comment|//            session.getWorkspace().getNamespaceRegistry().registerNamespace( facetId, facetId );
comment|//        }
name|Workspace
name|workspace
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
name|NamespaceRegistry
name|registry
init|=
name|workspace
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|registry
operator|.
name|getPrefixes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"archiva"
argument_list|)
condition|)
block|{
name|registry
operator|.
name|registerNamespace
argument_list|(
literal|"archiva"
argument_list|,
literal|"http://archiva.apache.org/jcr/"
argument_list|)
expr_stmt|;
block|}
name|NodeTypeManager
name|nodeTypeManager
init|=
name|workspace
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|registerMixinNodeType
argument_list|(
name|nodeTypeManager
argument_list|,
name|JcrMetadataRepository
operator|.
name|NAMESPACE_NODE_TYPE
argument_list|)
expr_stmt|;
name|registerMixinNodeType
argument_list|(
name|nodeTypeManager
argument_list|,
name|JcrMetadataRepository
operator|.
name|PROJECT_NODE_TYPE
argument_list|)
expr_stmt|;
name|registerMixinNodeType
argument_list|(
name|nodeTypeManager
argument_list|,
name|JcrMetadataRepository
operator|.
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
expr_stmt|;
name|registerMixinNodeType
argument_list|(
name|nodeTypeManager
argument_list|,
name|JcrMetadataRepository
operator|.
name|ARTIFACT_NODE_TYPE
argument_list|)
expr_stmt|;
name|registerMixinNodeType
argument_list|(
name|nodeTypeManager
argument_list|,
name|JcrMetadataRepository
operator|.
name|FACET_NODE_TYPE
argument_list|)
expr_stmt|;
name|registerMixinNodeType
argument_list|(
name|nodeTypeManager
argument_list|,
name|JcrMetadataRepository
operator|.
name|DEPENDENCY_NODE_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|registerMixinNodeType
parameter_list|(
name|NodeTypeManager
name|nodeTypeManager
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeTemplate
name|nodeType
init|=
name|nodeTypeManager
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|nodeType
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeType
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// for now just don't re-create - but in future if we change the definition, make sure to remove first as an
comment|// upgrade path
if|if
condition|(
operator|!
name|nodeTypeManager
operator|.
name|hasNodeType
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|nodeTypeManager
operator|.
name|registerNodeType
argument_list|(
name|nodeType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|ProjectMetadata
name|project
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateProject
argument_list|(
name|repositoryId
argument_list|,
name|project
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|project
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|getOrAddProjectNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifactMeta
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|node
init|=
name|getOrAddArtifactNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_LAST_MODIFIED
argument_list|,
name|cal
argument_list|)
expr_stmt|;
name|cal
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"whenGathered"
argument_list|,
name|cal
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"size"
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"md5"
argument_list|,
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"sha1"
argument_list|,
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// iterate over available facets to update/add/remove from the artifactMetadata
for|for
control|(
name|String
name|facetId
range|:
name|metadataFacetFactories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|artifactMeta
operator|.
name|getFacet
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
name|facetId
argument_list|)
condition|)
block|{
name|node
operator|.
name|getNode
argument_list|(
name|facetId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|metadataFacet
operator|!=
literal|null
condition|)
block|{
comment|// recreate, to ensure properties are removed
name|Node
name|n
init|=
name|node
operator|.
name|addNode
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateProject
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|versionNode
init|=
name|getOrAddProjectVersionNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"description"
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"incomplete"
argument_list|,
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME: decide how to treat these in the content repo
if|if
condition|(
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"scm.connection"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"scm.developerConnection"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"scm.url"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"ci.system"
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"ci.url"
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"issue.system"
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"issue.url"
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"org.name"
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"org.url"
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
control|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"license."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"license."
operator|+
name|i
operator|+
literal|".url"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
control|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".archive"
argument_list|,
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".post"
argument_list|,
name|mailingList
operator|.
name|getPostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".unsubscribe"
argument_list|,
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".subscribe"
argument_list|,
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".otherArchives"
argument_list|,
name|join
argument_list|(
name|mailingList
operator|.
name|getOtherArchives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Node
name|dependenciesNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|versionNode
argument_list|,
literal|"dependencies"
argument_list|)
decl_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
control|)
block|{
comment|// Note that we deliberately don't alter the namespace path - not enough dependencies for
comment|// number of nodes at a given depth to be an issue. Similarly, we don't add subnodes for each
comment|// component of the ID as that creates extra depth and causes a great cost in space and memory
comment|// FIXME: change group ID to namespace
comment|// FIXME: change to artifact's ID - this is constructed by the Maven 2 format for now.
comment|//        This won't support types where the extension doesn't match the type.
comment|//        (see also Maven2RepositoryStorage#readProjectVersionMetadata construction of POM)
name|String
name|id
init|=
name|dependency
operator|.
name|getGroupId
argument_list|()
operator|+
literal|";"
operator|+
name|dependency
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|dependency
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependency
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|id
operator|+=
literal|"-"
operator|+
name|dependency
operator|.
name|getClassifier
argument_list|()
expr_stmt|;
block|}
name|id
operator|+=
literal|"."
operator|+
name|dependency
operator|.
name|getType
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|dependenciesNode
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|DEPENDENCY_NODE_TYPE
argument_list|)
expr_stmt|;
comment|// FIXME: remove temp code just to make it keep working
name|n
operator|.
name|setProperty
argument_list|(
literal|"groupId"
argument_list|,
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"artifactId"
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"classifier"
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"scope"
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"systemPath"
argument_list|,
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"optional"
argument_list|,
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
expr_stmt|;
comment|// node has no native content at this time, just facets
comment|// no need to list a type as it's implied by the path. Parents are Maven specific.
comment|// FIXME: add scope, systemPath, type, version, classifier& maven2 specific IDs as a facet
comment|//        (should also have been added to the Dependency)
comment|// TODO: add a property that is a weak reference to the originating artifact, creating it if
comment|//       necessary (without adding the archiva:artifact mixin so that it doesn't get listed as an
comment|//       artifact, which gives a different meaning to "incomplete" which is a known local project
comment|//       that doesn't have metadata yet but has artifacts). (Though we may want to give it the
comment|//       artifact mixin and another property to identify all non-local artifacts for the closure
comment|//       reports)
block|}
block|}
for|for
control|(
name|MetadataFacet
name|facet
range|:
name|versionMetadata
operator|.
name|getFacetList
argument_list|()
control|)
block|{
comment|// recreate, to ensure properties are removed
if|if
condition|(
name|versionNode
operator|.
name|hasNode
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|)
condition|)
block|{
name|versionNode
operator|.
name|getNode
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Node
name|n
init|=
name|versionNode
operator|.
name|addNode
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|facet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|node
init|=
name|getOrAddNamespaceNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"namespace"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|namespacePath
init|=
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|namespacePath
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Node
argument_list|>
name|nodeIterator
init|=
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|root
operator|.
name|getNode
argument_list|(
name|namespacePath
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|node
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|PROJECT_NODE_TYPE
argument_list|)
operator|&&
name|projectId
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|node
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|node
operator|.
name|getNodes
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignored - the facet doesn't exist, so return false
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// no need to construct node-by-node here, as we'll find in the next instance, the facet names have / and
comment|// are paths themselves
name|Node
name|node
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: this is a bit awkward. Might be better to review the purpose of this function - why is the list of
comment|//   paths helpful?
name|recurse
argument_list|(
name|facets
argument_list|,
literal|""
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignored - the facet doesn't exist, so return the empty list
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|facets
return|;
block|}
specifier|private
name|void
name|recurse
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|facets
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|prefix
operator|+
literal|"/"
operator|+
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|hasNodes
argument_list|()
condition|)
block|{
name|recurse
argument_list|(
name|facets
argument_list|,
name|name
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// strip leading / first
name|facets
operator|.
name|add
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|getMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|MetadataFacet
name|metadataFacet
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactories
operator|==
literal|null
condition|)
block|{
return|return
name|metadataFacet
return|;
block|}
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|metadataFacet
operator|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|property
range|:
name|JcrUtils
operator|.
name|getProperties
argument_list|(
name|node
argument_list|)
control|)
block|{
name|String
name|p
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|startsWith
argument_list|(
literal|"jcr:"
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|property
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignored - the facet doesn't exist, so return null
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|metadataFacet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|repo
init|=
name|getOrAddRepositoryNode
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|Node
name|facets
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|repo
argument_list|,
literal|"facets"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
decl_stmt|;
name|Node
name|facetNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|facets
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|getOrAddNodeByPath
argument_list|(
name|facetNode
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|NAMESPACE_NODE_TYPE
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
do|do
block|{
comment|// also remove empty container nodes
name|Node
name|parent
init|=
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|parent
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|node
operator|.
name|hasNodes
argument_list|()
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
name|String
name|repoId
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
name|String
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|" AND [whenGathered]>= $start"
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|" AND [whenGathered]<= $end"
expr_stmt|;
block|}
try|try
block|{
name|Query
name|query
init|=
name|getJcrSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|getJcrSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|bindValue
argument_list|(
literal|"start"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|createCalendar
argument_list|(
name|startTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|bindValue
argument_list|(
literal|"end"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|createCalendar
argument_list|(
name|endTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repoId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|repositories
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
literal|"repositories"
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"repositories"
argument_list|)
decl_stmt|;
name|repositories
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|NodeIterator
name|i
init|=
name|node
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|n
init|=
name|i
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|repositories
operator|.
name|add
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|repositories
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|repositories
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|checksum
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
name|String
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|" AND ([sha1] = $checksum OR [md5] = $checksum)"
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|getJcrSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|getJcrSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|query
operator|.
name|bindValue
argument_list|(
literal|"checksum"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
name|String
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|getJcrSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|private
specifier|static
name|String
name|getArtifactQuery
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
literal|"SELECT * FROM ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact WHERE ISDESCENDANTNODE(artifact,'/"
operator|+
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"')"
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|ProjectMetadata
name|metadata
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
comment|// basically just checking it exists
name|String
name|path
init|=
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|metadata
operator|=
operator|new
name|ProjectMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|ProjectVersionMetadata
name|versionMetadata
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|versionMetadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|()
expr_stmt|;
name|versionMetadata
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setName
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setDescription
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setUrl
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setIncomplete
argument_list|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"incomplete"
argument_list|)
operator|&&
name|node
operator|.
name|getProperty
argument_list|(
literal|"incomplete"
argument_list|)
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME: decide how to treat these in the content repo
name|String
name|scmConnection
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"scm.connection"
argument_list|)
decl_stmt|;
name|String
name|scmDeveloperConnection
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"scm.developerConnection"
argument_list|)
decl_stmt|;
name|String
name|scmUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"scm.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scmConnection
operator|!=
literal|null
operator|||
name|scmDeveloperConnection
operator|!=
literal|null
operator|||
name|scmUrl
operator|!=
literal|null
condition|)
block|{
name|Scm
name|scm
init|=
operator|new
name|Scm
argument_list|()
decl_stmt|;
name|scm
operator|.
name|setConnection
argument_list|(
name|scmConnection
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setDeveloperConnection
argument_list|(
name|scmDeveloperConnection
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setUrl
argument_list|(
name|scmUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setScm
argument_list|(
name|scm
argument_list|)
expr_stmt|;
block|}
name|String
name|ciSystem
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"ci.system"
argument_list|)
decl_stmt|;
name|String
name|ciUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"ci.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ciSystem
operator|!=
literal|null
operator|||
name|ciUrl
operator|!=
literal|null
condition|)
block|{
name|CiManagement
name|ci
init|=
operator|new
name|CiManagement
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setSystem
argument_list|(
name|ciSystem
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUrl
argument_list|(
name|ciUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setCiManagement
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|String
name|issueSystem
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"issue.system"
argument_list|)
decl_stmt|;
name|String
name|issueUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"issue.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|issueSystem
operator|!=
literal|null
operator|||
name|issueUrl
operator|!=
literal|null
condition|)
block|{
name|IssueManagement
name|issueManagement
init|=
operator|new
name|IssueManagement
argument_list|()
decl_stmt|;
name|issueManagement
operator|.
name|setSystem
argument_list|(
name|issueSystem
argument_list|)
expr_stmt|;
name|issueManagement
operator|.
name|setUrl
argument_list|(
name|issueUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setIssueManagement
argument_list|(
name|issueManagement
argument_list|)
expr_stmt|;
block|}
name|String
name|orgName
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"org.name"
argument_list|)
decl_stmt|;
name|String
name|orgUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"org.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orgName
operator|!=
literal|null
operator|||
name|orgUrl
operator|!=
literal|null
condition|)
block|{
name|Organization
name|org
init|=
operator|new
name|Organization
argument_list|()
decl_stmt|;
name|org
operator|.
name|setName
argument_list|(
name|orgName
argument_list|)
expr_stmt|;
name|org
operator|.
name|setUrl
argument_list|(
name|orgUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setOrganization
argument_list|(
name|org
argument_list|)
expr_stmt|;
block|}
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|String
name|licenseName
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"license."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
decl_stmt|;
name|String
name|licenseUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"license."
operator|+
name|i
operator|+
literal|".url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|licenseName
operator|!=
literal|null
operator|||
name|licenseUrl
operator|!=
literal|null
condition|)
block|{
name|License
name|license
init|=
operator|new
name|License
argument_list|()
decl_stmt|;
name|license
operator|.
name|setName
argument_list|(
name|licenseName
argument_list|)
expr_stmt|;
name|license
operator|.
name|setUrl
argument_list|(
name|licenseUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addLicense
argument_list|(
name|license
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|done
operator|=
literal|false
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|String
name|mailingListName
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mailingListName
operator|!=
literal|null
condition|)
block|{
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|()
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
name|mailingListName
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setMainArchiveUrl
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".archive"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|n
init|=
literal|"mailingList."
operator|+
name|i
operator|+
literal|".otherArchives"
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
name|n
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mailingList
operator|.
name|setPostAddress
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".post"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setSubscribeAddress
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".subscribe"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setUnsubscribeAddress
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".unsubscribe"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addMailingList
argument_list|(
name|mailingList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"dependencies"
argument_list|)
condition|)
block|{
name|Node
name|dependenciesNode
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"dependencies"
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|dependenciesNode
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|DEPENDENCY_NODE_TYPE
argument_list|)
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
comment|// FIXME: correct these properties
name|dependency
operator|.
name|setArtifactId
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setGroupId
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setClassifier
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"classifier"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"optional"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"scope"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setSystemPath
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"systemPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MetadataFacetFactory
name|factory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Attempted to load unknown project version metadata facet: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetadataFacet
name|facet
init|=
name|factory
operator|.
name|createMetadataFacet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|property
range|:
name|JcrUtils
operator|.
name|getProperties
argument_list|(
name|n
argument_list|)
control|)
block|{
name|String
name|p
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|startsWith
argument_list|(
literal|"jcr:"
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|property
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|facet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|versionMetadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore repo not found for now
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|versions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: bind variables instead
name|String
name|q
init|=
literal|"SELECT * FROM [archiva:dependency] WHERE ISDESCENDANTNODE([/repositories/"
operator|+
name|repositoryId
operator|+
literal|"/content]) AND [groupId]='"
operator|+
name|namespace
operator|+
literal|"' AND [artifactId]='"
operator|+
name|projectId
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
name|projectVersion
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|" AND [version]='"
operator|+
name|projectVersion
operator|+
literal|"'"
expr_stmt|;
block|}
try|try
block|{
name|Query
name|query
init|=
name|getJcrSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// dependencies grouping element
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// project version
name|String
name|usedByProjectVersion
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// project
name|String
name|usedByProject
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// namespace
name|String
name|usedByNamespace
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|ProjectVersionReference
name|ref
init|=
operator|new
name|ProjectVersionReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setNamespace
argument_list|(
name|usedByNamespace
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setProjectId
argument_list|(
name|usedByProject
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setProjectVersion
argument_list|(
name|usedByProjectVersion
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setReferenceType
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|)
expr_stmt|;
name|references
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
return|return
name|getNamespaces
argument_list|(
name|repositoryId
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|baseNamespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|String
name|path
init|=
name|baseNamespace
operator|!=
literal|null
condition|?
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|baseNamespace
argument_list|)
else|:
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|getNodeNames
argument_list|(
name|path
argument_list|,
name|NAMESPACE_NODE_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
return|return
name|getNodeNames
argument_list|(
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
argument_list|,
name|PROJECT_NODE_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
return|return
name|getNodeNames
argument_list|(
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
argument_list|,
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|repositoryId
init|=
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|,
name|baseVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|String
name|version
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|artifactMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|String
name|path
init|=
name|getProjectPath
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|nodeAtPath
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|nodeAtPath
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getArtifactPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// remove version
name|path
operator|=
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
name|Node
name|nodeAtPath
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|nodeAtPath
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
comment|//
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|projectVersion
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|project
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"artifactMetadata: {}"
argument_list|,
name|artifactMetadata
argument_list|)
expr_stmt|;
name|MetadataFacet
name|metadataFacetToRemove
init|=
name|artifactMetadata
operator|.
name|getFacet
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetToRemove
operator|!=
literal|null
operator|&&
name|metadataFacet
operator|.
name|equals
argument_list|(
name|metadataFacetToRemove
argument_list|)
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
block|{
try|try
block|{
name|getJcrSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|revert
parameter_list|()
block|{
try|try
block|{
name|getJcrSession
argument_list|()
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canObtainAccess
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|aClass
operator|==
name|Session
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|obtainAccess
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|aClass
operator|==
name|Session
operator|.
name|class
condition|)
block|{
try|try
block|{
return|return
operator|(
name|T
operator|)
name|getJcrSession
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Access using "
operator|+
name|aClass
operator|+
literal|" is not supported on the JCR metadata storage"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|jcrSession
operator|!=
literal|null
operator|&&
name|jcrSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|jcrSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ArtifactMetadata
name|getArtifactFromNode
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|Node
name|artifactNode
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|id
init|=
name|artifactNode
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|Node
name|projectVersionNode
init|=
name|artifactNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Node
name|projectNode
init|=
name|projectVersionNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Node
name|namespaceNode
init|=
name|projectNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|namespaceNode
operator|.
name|getProperty
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProject
argument_list|(
name|projectNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProjectVersion
argument_list|(
name|projectVersionNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"version"
argument_list|)
condition|?
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
else|:
name|projectVersionNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
name|JCR_LAST_MODIFIED
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setFileLastModified
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
name|JCR_LAST_MODIFIED
argument_list|)
operator|.
name|getDate
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"whenGathered"
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setWhenGathered
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"whenGathered"
argument_list|)
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"size"
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setSize
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"size"
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"md5"
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setMd5
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"md5"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"sha1"
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setSha1
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"sha1"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|artifactNode
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MetadataFacetFactory
name|factory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Attempted to load unknown project version metadata facet: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetadataFacet
name|facet
init|=
name|factory
operator|.
name|createMetadataFacet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|p
range|:
name|JcrUtils
operator|.
name|getProperties
argument_list|(
name|n
argument_list|)
control|)
block|{
name|String
name|property
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|property
operator|.
name|startsWith
argument_list|(
literal|"jcr:"
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|p
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|facet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|artifact
return|;
block|}
specifier|private
specifier|static
name|String
name|getPropertyString
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|node
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|?
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|.
name|getString
argument_list|()
else|:
literal|null
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodeNames
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|nodeType
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|nodeAtPath
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|nodeAtPath
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|nodeType
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore repo not found for now
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|names
return|;
block|}
specifier|private
specifier|static
name|String
name|getRepositoryPath
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
literal|"repositories/"
operator|+
name|repositoryId
return|;
block|}
specifier|private
specifier|static
name|String
name|getRepositoryContentPath
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"/content/"
return|;
block|}
specifier|private
specifier|static
name|String
name|getFacetPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
block|{
return|return
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"/facets/"
operator|+
name|facetId
return|;
block|}
specifier|private
specifier|static
name|String
name|getNamespacePath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
return|return
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
name|namespace
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getProjectPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
block|{
return|return
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
operator|+
literal|"/"
operator|+
name|projectId
return|;
block|}
specifier|private
specifier|static
name|String
name|getProjectVersionPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
return|return
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
operator|+
literal|"/"
operator|+
name|projectVersion
return|;
block|}
specifier|private
specifier|static
name|String
name|getArtifactPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
operator|+
literal|"/"
operator|+
name|id
return|;
block|}
specifier|private
name|Node
name|getOrAddNodeByPath
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getOrAddNodeByPath
argument_list|(
name|baseNode
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddNodeByPath
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|nodeType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|baseNode
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
name|node
operator|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeType
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
specifier|static
name|String
name|getFacetPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|+
literal|"/"
operator|+
name|name
return|;
block|}
specifier|private
name|Node
name|getOrAddRepositoryNode
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|root
init|=
name|getJcrSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|root
argument_list|,
literal|"repositories"
argument_list|)
decl_stmt|;
name|node
operator|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|getOrAddRepositoryContentNode
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getOrAddRepositoryNode
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
literal|"content"
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddNamespaceNode
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|repo
init|=
name|getOrAddRepositoryContentNode
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|getOrAddNodeByPath
argument_list|(
name|repo
argument_list|,
name|namespace
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
name|NAMESPACE_NODE_TYPE
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddProjectNode
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|namespaceNode
init|=
name|getOrAddNamespaceNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|namespaceNode
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|PROJECT_NODE_TYPE
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|getOrAddProjectVersionNode
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|projectNode
init|=
name|getOrAddProjectNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|projectNode
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|getOrAddArtifactNode
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|versionNode
init|=
name|getOrAddProjectVersionNode
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|versionNode
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
specifier|static
name|Calendar
name|createCalendar
parameter_list|(
name|Date
name|time
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
return|return
name|cal
return|;
block|}
specifier|private
name|String
name|join
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Session
name|getJcrSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|this
operator|.
name|jcrSession
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|jcrSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|jcrSession
operator|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|jcrSession
return|;
block|}
block|}
end_class

end_unit

