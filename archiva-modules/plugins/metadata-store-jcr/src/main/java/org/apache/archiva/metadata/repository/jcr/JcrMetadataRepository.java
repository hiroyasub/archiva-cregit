begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|QueryParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|maven2
operator|.
name|MavenArtifactFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|model
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
operator|.
name|model
operator|.
name|RepositoryStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|CndImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|Property
operator|.
name|JCR_LAST_MODIFIED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
operator|.
name|JcrConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * TODO below: revise storage format for project version metadata  * TODO revise reference storage  */
end_comment

begin_class
specifier|public
class|class
name|JcrMetadataRepository
extends|extends
name|AbstractMetadataRepository
implements|implements
name|MetadataRepository
implements|,
name|RepositoryStatisticsProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACT_1
init|=
literal|"SELECT * FROM ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact WHERE ISDESCENDANTNODE(artifact,'/"
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACTS_BY_PROJECT_VERSION_1
init|=
literal|"SELECT * FROM ["
operator|+
name|PROJECT_VERSION_NODE_TYPE
operator|+
literal|"] AS projectVersion INNER JOIN ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact ON ISCHILDNODE(artifact, projectVersion) INNER JOIN ["
operator|+
name|FACET_NODE_TYPE
operator|+
literal|"] AS facet ON ISCHILDNODE(facet, projectVersion) WHERE ([facet].["
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACTS_BY_PROJECT_VERSION_2
init|=
literal|"] = $value)"
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACTS_BY_METADATA_1
init|=
literal|"SELECT * FROM ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact INNER JOIN ["
operator|+
name|FACET_NODE_TYPE
operator|+
literal|"] AS facet ON ISCHILDNODE(facet, artifact) WHERE ([facet].["
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACTS_BY_METADATA_2
init|=
literal|"] = $value)"
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACTS_BY_PROPERTY_1
init|=
literal|"SELECT * FROM ["
operator|+
name|PROJECT_VERSION_NODE_TYPE
operator|+
literal|"] AS projectVersion INNER JOIN ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact ON ISCHILDNODE(artifact, projectVersion) WHERE ([projectVersion].["
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACTS_BY_PROPERTY_2
init|=
literal|"] = $value)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_ARTIFACT_2
init|=
literal|"')"
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcrMetadataRepository
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Repository
name|repository
decl_stmt|;
specifier|public
name|JcrMetadataRepository
parameter_list|(
name|MetadataService
name|metadataService
parameter_list|,
name|Repository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|super
argument_list|(
name|metadataService
argument_list|)
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|initializeNodeTypes
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: consider using namespaces for facets instead of the current approach:
comment|// (if used, check if actually called by normal injection)
comment|//        for ( String facetId : metadataFacetFactories.keySet() )
comment|//        {
comment|//            session.getWorkspace().getNamespaceRegistry().registerNamespace( facetId, facetId );
comment|//        }
name|Workspace
name|workspace
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
name|NamespaceRegistry
name|registry
init|=
name|workspace
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|registry
operator|.
name|getPrefixes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"archiva"
argument_list|)
condition|)
block|{
name|registry
operator|.
name|registerNamespace
argument_list|(
literal|"archiva"
argument_list|,
literal|"http://archiva.apache.org/jcr/"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Reader
name|cndReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/archiva/metadata/repository/jcr/jcr-schema.cnd"
argument_list|)
argument_list|)
init|)
block|{
name|CndImporter
operator|.
name|registerNodeTypes
argument_list|(
name|cndReader
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Session
name|getSession
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|repositorySession
operator|instanceof
name|JcrRepositorySession
condition|)
block|{
return|return
operator|(
operator|(
name|JcrRepositorySession
operator|)
name|repositorySession
operator|)
operator|.
name|getJcrSession
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
literal|"The given session object is not a JcrSession instance: "
operator|+
name|repositorySession
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProject
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|ProjectMetadata
name|project
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|updateProject
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|project
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|project
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateProject
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateNamespace
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|getOrAddProjectNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifactMeta
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|updateNamespace
argument_list|(
name|session
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|node
init|=
name|getOrAddArtifactNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|from
argument_list|(
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_LAST_MODIFIED
argument_list|,
name|cal
argument_list|)
expr_stmt|;
name|cal
operator|=
name|GregorianCalendar
operator|.
name|from
argument_list|(
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"whenGathered"
argument_list|,
name|cal
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"size"
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|Node
name|cslistNode
init|=
name|getOrAddNodeByPath
argument_list|(
name|node
argument_list|,
literal|"checksums"
argument_list|,
name|CHECKSUMS_FOLDER_TYPE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeIterator
name|nit
init|=
name|cslistNode
operator|.
name|getNodes
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
while|while
condition|(
name|nit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|csNode
init|=
name|nit
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|csNode
operator|.
name|isNodeType
argument_list|(
name|CHECKSUM_NODE_TYPE
argument_list|)
condition|)
block|{
name|csNode
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ChecksumAlgorithm
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|artifactMeta
operator|.
name|getChecksums
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|Node
name|csNode
init|=
name|cslistNode
operator|.
name|addNode
argument_list|(
name|type
argument_list|,
name|CHECKSUM_NODE_TYPE
argument_list|)
decl_stmt|;
name|csNode
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|csNode
operator|.
name|setProperty
argument_list|(
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// iterate over available facets to update/add/remove from the artifactMetadata
for|for
control|(
name|String
name|facetId
range|:
name|metadataService
operator|.
name|getSupportedFacets
argument_list|()
control|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|artifactMeta
operator|.
name|getFacet
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
name|facetId
argument_list|)
condition|)
block|{
name|node
operator|.
name|getNode
argument_list|(
name|facetId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|metadataFacet
operator|!=
literal|null
condition|)
block|{
comment|// recreate, to ensure properties are removed
name|Node
name|n
init|=
name|node
operator|.
name|addNode
argument_list|(
name|facetId
argument_list|,
name|FACET_NODE_TYPE
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|updateProject
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|versionNode
init|=
name|getOrAddProjectVersionNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
literal|""
else|:
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"description"
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|?
literal|""
else|:
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"incomplete"
argument_list|,
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME: decide how to treat these in the content repo
if|if
condition|(
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"scm.connection"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"scm.developerConnection"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"scm.url"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"ci.system"
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"ci.url"
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"issue.system"
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"issue.url"
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"org.name"
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|versionNode
operator|.
name|setProperty
argument_list|(
literal|"org.url"
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Node
name|licensesNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|versionNode
argument_list|,
literal|"licenses"
argument_list|,
name|LICENSES_FOLDER_TYPE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|licNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
control|)
block|{
name|Node
name|licNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|licensesNode
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|,
name|LICENSE_NODE_TYPE
argument_list|)
decl_stmt|;
name|licNode
operator|.
name|setProperty
argument_list|(
literal|"index"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|licNode
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|licNode
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|licNames
operator|.
name|add
argument_list|(
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|NodeIterator
name|nodeIterator
init|=
name|licensesNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|n
init|=
name|nodeIterator
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|licNames
operator|.
name|contains
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|i
operator|=
literal|0
expr_stmt|;
name|Node
name|mailinglistsListNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|versionNode
argument_list|,
literal|"mailinglists"
argument_list|,
name|MAILINGLISTS_FOLDER_TYPE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|listNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|mailingList
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Node
name|mailNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|mailinglistsListNode
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|,
name|MAILINGLIST_NODE_TYPE
argument_list|)
decl_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"index"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"archive"
argument_list|,
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|()
argument_list|)
expr_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"post"
argument_list|,
name|mailingList
operator|.
name|getPostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"unsubscribe"
argument_list|,
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"subscribe"
argument_list|,
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mailNode
operator|.
name|setProperty
argument_list|(
literal|"otherArchives"
argument_list|,
name|join
argument_list|(
name|mailingList
operator|.
name|getOtherArchives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|listNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|nodeIterator
operator|=
name|mailinglistsListNode
operator|.
name|getNodes
argument_list|()
expr_stmt|;
while|while
condition|(
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|n
init|=
name|nodeIterator
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|listNames
operator|.
name|contains
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Node
name|dependenciesNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|versionNode
argument_list|,
literal|"dependencies"
argument_list|,
name|DEPENDENCIES_FOLDER_TYPE
argument_list|)
decl_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
control|)
block|{
comment|// Note that we deliberately don't alter the namespace path - not enough dependencies for
comment|// number of nodes at a given depth to be an issue. Similarly, we don't add subnodes for each
comment|// component of the ID as that creates extra depth and causes a great cost in space and memory
comment|// FIXME: change to artifact's ID - this is constructed by the Maven 2 format for now.
comment|//        This won't support types where the extension doesn't match the type.
comment|//        (see also Maven2RepositoryStorage#readProjectVersionMetadata construction of POM)
name|String
name|id
init|=
name|dependency
operator|.
name|getNamespace
argument_list|()
operator|+
literal|";"
operator|+
name|dependency
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|dependency
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependency
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|id
operator|+=
literal|"-"
operator|+
name|dependency
operator|.
name|getClassifier
argument_list|()
expr_stmt|;
block|}
name|id
operator|+=
literal|"."
operator|+
name|dependency
operator|.
name|getType
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|dependenciesNode
argument_list|,
name|id
argument_list|,
name|DEPENDENCY_NODE_TYPE
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"namespace"
argument_list|,
name|dependency
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"artifactId"
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"classifier"
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"scope"
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"systemPath"
argument_list|,
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"optional"
argument_list|,
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"projectId"
argument_list|,
name|dependency
operator|.
name|getProjectId
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Fixig
name|Node
name|refNode
init|=
name|findArtifactNode
argument_list|(
name|jcrSession
argument_list|,
name|dependency
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|dependency
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|refNode
operator|!=
literal|null
condition|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
literal|"link"
argument_list|,
name|refNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// node has no native content at this time, just facets
comment|// no need to list a type as it's implied by the path. Parents are Maven specific.
comment|// FIXME: add scope, systemPath, type, version, classifier& maven2 specific IDs as a facet
comment|//        (should also have been added to the Dependency)
comment|// TODO: add a property that is a weak reference to the originating artifact, creating it if
comment|//       necessary (without adding the archiva:artifact mixin so that it doesn't get listed as an
comment|//       artifact, which gives a different meaning to "incomplete" which is a known local project
comment|//       that doesn't have metadata yet but has artifacts). (Though we may want to give it the
comment|//       artifact mixin and another property to identify all non-local artifacts for the closure
comment|//       reports)
block|}
block|}
for|for
control|(
name|MetadataFacet
name|facet
range|:
name|versionMetadata
operator|.
name|getFacetList
argument_list|()
control|)
block|{
comment|// recreate, to ensure properties are removed
if|if
condition|(
name|versionNode
operator|.
name|hasNode
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|)
condition|)
block|{
name|versionNode
operator|.
name|getNode
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Node
name|n
init|=
name|versionNode
operator|.
name|addNode
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|FACET_NODE_TYPE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|facet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateNamespace
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Node
name|node
init|=
name|getOrAddNamespaceNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"namespace"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateNamespace
argument_list|(
name|getSession
argument_list|(
name|session
argument_list|)
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProject
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|namespacePath
init|=
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|namespacePath
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Node
argument_list|>
name|nodeIterator
init|=
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|root
operator|.
name|getNode
argument_list|(
name|namespacePath
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|node
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
operator|.
name|JcrConstants
operator|.
name|PROJECT_MIXIN_TYPE
argument_list|)
operator|&&
name|projectId
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|node
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|node
operator|.
name|getNodes
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignored - the facet doesn't exist, so return false
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// no need to construct node-by-node here, as we'll find in the next instance, the facet names have / and
comment|// are paths themselves
name|Node
name|node
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: this is a bit awkward. Might be better to review the purpose of this function - why is the list of
comment|//   paths helpful?
name|recurse
argument_list|(
name|facets
argument_list|,
literal|""
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignored - the facet doesn't exist, so return the empty list
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|facets
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Spliterator
argument_list|<
name|T
argument_list|>
name|createResultSpliterator
parameter_list|(
name|QueryResult
name|result
parameter_list|,
name|Function
argument_list|<
name|Row
argument_list|,
name|T
argument_list|>
name|converter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|RowIterator
name|rowIterator
decl_stmt|;
try|try
block|{
name|rowIterator
operator|=
name|result
operator|.
name|getRows
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Spliterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|tryAdvance
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|T
argument_list|>
name|action
parameter_list|)
block|{
while|while
condition|(
name|rowIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|item
init|=
name|converter
operator|.
name|apply
argument_list|(
name|rowIterator
operator|.
name|nextRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Spliterator
argument_list|<
name|T
argument_list|>
name|trySplit
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|characteristics
parameter_list|()
block|{
return|return
name|ORDERED
operator|+
name|NONNULL
return|;
block|}
block|}
return|;
block|}
specifier|private
name|StringBuilder
name|appendQueryParams
parameter_list|(
name|StringBuilder
name|query
parameter_list|,
name|String
name|selector
parameter_list|,
name|String
name|defaultProperty
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
block|{
if|if
condition|(
name|queryParameter
operator|.
name|getSortFields
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ORDER BY ["
argument_list|)
operator|.
name|append
argument_list|(
name|selector
argument_list|)
operator|.
name|append
argument_list|(
literal|"].["
argument_list|)
operator|.
name|append
argument_list|(
name|defaultProperty
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryParameter
operator|.
name|isAscending
argument_list|()
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ASC"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" DESC"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ORDER BY"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|property
range|:
name|queryParameter
operator|.
name|getSortFields
argument_list|()
control|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|selector
argument_list|)
operator|.
name|append
argument_list|(
literal|"].["
argument_list|)
operator|.
name|append
argument_list|(
name|property
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryParameter
operator|.
name|isAscending
argument_list|()
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ASC"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" DESC"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|Function
argument_list|<
name|Row
argument_list|,
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
name|getFacetFromRowFunc
parameter_list|(
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|,
name|String
name|repositoryId
parameter_list|)
block|{
return|return
parameter_list|(
name|Row
name|row
parameter_list|)
lambda|->
block|{
try|try
block|{
name|Node
name|node
init|=
name|row
operator|.
name|getNode
argument_list|(
literal|"facet"
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"archiva:name"
argument_list|)
condition|)
block|{
name|String
name|facetName
init|=
name|node
operator|.
name|getProperty
argument_list|(
literal|"archiva:name"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|createFacetFromNode
argument_list|(
name|factory
argument_list|,
name|node
argument_list|,
name|repositoryId
argument_list|,
name|facetName
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception encountered {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|Stream
argument_list|<
name|T
argument_list|>
name|getMetadataFacetStream
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|facetClazz
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|factory
init|=
name|metadataService
operator|.
name|getFactory
argument_list|(
name|facetClazz
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetId
init|=
name|factory
operator|.
name|getFacetId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|facetPath
init|=
literal|'/'
operator|+
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
decl_stmt|;
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SELECT * FROM ["
argument_list|)
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
operator|.
name|append
argument_list|(
literal|"] AS facet WHERE ISDESCENDANTNODE(facet, ["
argument_list|)
operator|.
name|append
argument_list|(
name|facetPath
argument_list|)
operator|.
name|append
argument_list|(
literal|"]) AND [facet].[archiva:name] IS NOT NULL"
argument_list|)
expr_stmt|;
name|appendQueryParams
argument_list|(
name|query
argument_list|,
literal|"facet"
argument_list|,
literal|"archiva:name"
argument_list|,
name|queryParameter
argument_list|)
expr_stmt|;
name|String
name|q
init|=
name|query
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|QueryResult
name|result
init|=
name|runNativeJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|q
argument_list|,
name|params
argument_list|,
name|queryParameter
operator|.
name|getOffset
argument_list|()
argument_list|,
name|queryParameter
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|Row
argument_list|,
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
name|rowFunc
init|=
name|getFacetFromRowFunc
argument_list|(
name|factory
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|createResultSpliterator
argument_list|(
name|result
argument_list|,
name|rowFunc
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
specifier|private
name|void
name|recurse
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|facets
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|prefix
operator|+
literal|"/"
operator|+
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|hasNodes
argument_list|()
condition|)
block|{
name|recurse
argument_list|(
name|facets
argument_list|,
name|name
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// strip leading / first
name|facets
operator|.
name|add
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|T
name|getMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
operator|!
name|metadataService
operator|.
name|supportsFacet
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The required metadata class is not supported: "
operator|+
name|clazz
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|factory
init|=
name|getFacetFactory
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetId
init|=
name|factory
operator|.
name|getFacetId
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSupportedFacets
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|createFacetFromNode
argument_list|(
name|factory
argument_list|,
name|node
argument_list|,
name|repositoryId
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignored - the facet doesn't exist, so return null
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|T
name|createFacetFromNode
parameter_list|(
specifier|final
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|,
specifier|final
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createFacetFromNode
argument_list|(
name|factory
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|MetadataFacet
parameter_list|>
name|T
name|createFacetFromNode
parameter_list|(
specifier|final
name|MetadataFacetFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|,
specifier|final
name|Node
name|node
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|T
name|metadataFacet
decl_stmt|;
if|if
condition|(
name|repositoryId
operator|!=
literal|null
condition|)
block|{
name|metadataFacet
operator|=
name|factory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataFacet
operator|=
name|factory
operator|.
name|createMetadataFacet
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|property
range|:
name|JcrUtils
operator|.
name|getProperties
argument_list|(
name|node
argument_list|)
control|)
block|{
name|String
name|p
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|startsWith
argument_list|(
literal|"jcr:"
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|property
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|metadataFacet
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|repo
init|=
name|getOrAddRepositoryNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
name|Node
name|facets
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|repo
argument_list|,
literal|"facets"
argument_list|,
name|FACETS_FOLDER_TYPE
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
decl_stmt|;
name|Node
name|facetNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|facets
argument_list|,
name|id
argument_list|,
name|FACET_ID_CONTAINER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|facetNode
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|facetNode
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|Node
name|facetInstance
init|=
name|getOrAddNodeByPath
argument_list|(
name|facetNode
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|,
name|FACET_NODE_TYPE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|facetInstance
operator|.
name|hasProperty
argument_list|(
literal|"archiva:facetId"
argument_list|)
condition|)
block|{
name|facetInstance
operator|.
name|setProperty
argument_list|(
literal|"archiva:facetId"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|facetInstance
operator|.
name|setProperty
argument_list|(
literal|"archiva:name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|facetInstance
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
decl||
name|MetadataSessionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|NAMESPACE_MIXIN_TYPE
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
do|do
block|{
comment|// also remove empty container nodes
name|Node
name|parent
init|=
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|parent
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|node
operator|.
name|hasNodes
argument_list|()
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|StringBuilder
name|buildArtifactByDateRangeQuery
parameter_list|(
name|String
name|repoId
parameter_list|,
name|ZonedDateTime
name|startTime
parameter_list|,
name|ZonedDateTime
name|endTime
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
block|{
name|StringBuilder
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|append
argument_list|(
literal|" AND [artifact].[whenGathered]>= $start"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|append
argument_list|(
literal|" AND [artifact].[whenGathered]<= $end"
argument_list|)
expr_stmt|;
block|}
name|appendQueryParams
argument_list|(
name|q
argument_list|,
literal|"artifact"
argument_list|,
literal|"whenGathered"
argument_list|,
name|queryParameter
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|private
name|QueryResult
name|queryArtifactByDateRange
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|ZonedDateTime
name|startTime
parameter_list|,
name|ZonedDateTime
name|endTime
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|q
init|=
name|buildArtifactByDateRangeQuery
argument_list|(
name|repositoryId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|queryParameter
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|jcrSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|query
operator|.
name|setOffset
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLimit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|jcrSession
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|bindValue
argument_list|(
literal|"start"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|createCalendar
argument_list|(
name|startTime
operator|.
name|withZoneSameInstant
argument_list|(
name|ModelInfo
operator|.
name|STORAGE_TZ
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|bindValue
argument_list|(
literal|"end"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|createCalendar
argument_list|(
name|endTime
operator|.
name|withZoneSameInstant
argument_list|(
name|ModelInfo
operator|.
name|STORAGE_TZ
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
operator|.
name|execute
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repoId
parameter_list|,
name|ZonedDateTime
name|startTime
parameter_list|,
name|ZonedDateTime
name|endTime
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
try|try
block|{
name|QueryResult
name|result
init|=
name|queryArtifactByDateRange
argument_list|(
name|jcrSession
argument_list|,
name|repoId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|queryParameter
argument_list|)
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repoId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|private
name|Function
argument_list|<
name|Row
argument_list|,
name|Optional
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|>
name|getArtifactFromRowFunc
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
block|{
return|return
parameter_list|(
name|Row
name|row
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|row
operator|.
name|getNode
argument_list|(
literal|"artifact"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactByDateRangeStream
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|ZonedDateTime
name|startTime
parameter_list|,
name|ZonedDateTime
name|endTime
parameter_list|,
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|QueryResult
name|result
init|=
name|queryArtifactByDateRange
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|queryParameter
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|Row
argument_list|,
name|Optional
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|>
name|rowFunc
init|=
name|getArtifactFromRowFunc
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|createResultSpliterator
argument_list|(
name|result
argument_list|,
name|rowFunc
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|checksum
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
name|String
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|append
argument_list|(
literal|" AND ([artifact].[checksums/*/value] = $checksum)"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|jcrSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|jcrSession
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|query
operator|.
name|bindValue
argument_list|(
literal|"checksum"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|runJcrQuery
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|q
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bindingParam
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
name|runJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|q
argument_list|,
name|bindingParam
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|runJcrQuery
parameter_list|(
specifier|final
name|Session
name|jcrSession
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|qParam
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bindingParam
parameter_list|,
specifier|final
name|boolean
name|checkPath
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|q
init|=
name|qParam
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
if|if
condition|(
name|repositoryId
operator|!=
literal|null
operator|&&
name|checkPath
condition|)
block|{
name|q
operator|+=
literal|" AND ISDESCENDANTNODE(artifact,'/"
operator|+
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"')"
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Running JCR Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryResult
name|result
init|=
name|runNativeJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|q
argument_list|,
name|bindingParam
argument_list|)
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|RowIterator
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|row
init|=
name|rows
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|row
operator|.
name|getNode
argument_list|(
literal|"artifact"
argument_list|)
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Artifacts found {}"
argument_list|,
name|artifacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ArtifactMetadata
name|meta
range|:
name|artifacts
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Artifact: "
operator|+
name|meta
operator|.
name|getVersion
argument_list|()
operator|+
literal|" "
operator|+
name|meta
operator|.
name|getFacetList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|public
name|QueryResult
name|runNativeJcrQuery
parameter_list|(
specifier|final
name|Session
name|jcrSession
parameter_list|,
specifier|final
name|String
name|q
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bindingParam
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
name|runNativeJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|q
argument_list|,
name|bindingParam
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
specifier|public
name|QueryResult
name|runNativeJcrQuery
parameter_list|(
specifier|final
name|Session
name|jcrSession
parameter_list|,
specifier|final
name|String
name|q
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bindingParam
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|maxEntries
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bindings
decl_stmt|;
if|if
condition|(
name|bindingParam
operator|==
literal|null
condition|)
block|{
name|bindings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bindings
operator|=
name|bindingParam
expr_stmt|;
block|}
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Query: offset={}, limit={}, query={}"
argument_list|,
name|offset
argument_list|,
name|maxEntries
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|jcrSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|query
operator|.
name|setLimit
argument_list|(
name|maxEntries
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|jcrSession
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|bindings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Binding: {}={}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Binding value {}={}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|query
operator|.
name|bindValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Execute query {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"JCR Query ran in {} milliseconds: {}"
argument_list|,
name|end
operator|-
name|start
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByProjectVersionFacet
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|String
name|q
init|=
operator|new
name|StringBuilder
argument_list|(
name|QUERY_ARTIFACTS_BY_PROJECT_VERSION_1
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|QUERY_ARTIFACTS_BY_PROJECT_VERSION_2
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|runJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|q
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByAttribute
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|String
name|q
init|=
operator|new
name|StringBuilder
argument_list|(
name|QUERY_ARTIFACTS_BY_METADATA_1
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|QUERY_ARTIFACTS_BY_METADATA_2
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|runJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|q
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByProjectVersionAttribute
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|String
name|q
init|=
operator|new
name|StringBuilder
argument_list|(
name|QUERY_ARTIFACTS_BY_PROPERTY_1
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|QUERY_ARTIFACTS_BY_PROPERTY_2
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|runJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|q
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
name|String
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|jcrSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|private
specifier|static
name|StringBuilder
name|getArtifactQuery
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|QUERY_ARTIFACT_1
argument_list|)
operator|.
name|append
argument_list|(
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QUERY_ARTIFACT_2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|ProjectMetadata
name|metadata
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
comment|// basically just checking it exists
name|String
name|path
init|=
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|metadata
operator|=
operator|new
name|ProjectMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|metadata
return|;
block|}
specifier|private
specifier|static
name|Optional
argument_list|<
name|License
argument_list|>
name|getLicense
parameter_list|(
name|Node
name|licenseNode
parameter_list|)
block|{
try|try
block|{
name|String
name|licenseName
init|=
name|licenseNode
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|licenseUrl
init|=
name|getPropertyString
argument_list|(
name|licenseNode
argument_list|,
literal|"url"
argument_list|)
decl_stmt|;
name|License
name|license
init|=
operator|new
name|License
argument_list|()
decl_stmt|;
name|license
operator|.
name|setName
argument_list|(
name|licenseName
argument_list|)
expr_stmt|;
name|license
operator|.
name|setUrl
argument_list|(
name|licenseUrl
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|license
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|Optional
argument_list|<
name|MailingList
argument_list|>
name|getMailinglist
parameter_list|(
name|Node
name|mailinglistNode
parameter_list|)
block|{
try|try
block|{
name|String
name|mailingListName
init|=
name|mailinglistNode
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MailingList
name|mailinglist
init|=
operator|new
name|MailingList
argument_list|()
decl_stmt|;
name|mailinglist
operator|.
name|setName
argument_list|(
name|mailingListName
argument_list|)
expr_stmt|;
name|mailinglist
operator|.
name|setMainArchiveUrl
argument_list|(
name|getPropertyString
argument_list|(
name|mailinglistNode
argument_list|,
literal|"archive"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|n
init|=
literal|"otherArchives"
decl_stmt|;
if|if
condition|(
name|mailinglistNode
operator|.
name|hasProperty
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|mailinglist
operator|.
name|setOtherArchives
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getPropertyString
argument_list|(
name|mailinglistNode
argument_list|,
name|n
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mailinglist
operator|.
name|setOtherArchives
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mailinglist
operator|.
name|setPostAddress
argument_list|(
name|getPropertyString
argument_list|(
name|mailinglistNode
argument_list|,
literal|"post"
argument_list|)
argument_list|)
expr_stmt|;
name|mailinglist
operator|.
name|setSubscribeAddress
argument_list|(
name|getPropertyString
argument_list|(
name|mailinglistNode
argument_list|,
literal|"subscribe"
argument_list|)
argument_list|)
expr_stmt|;
name|mailinglist
operator|.
name|setUnsubscribeAddress
argument_list|(
name|getPropertyString
argument_list|(
name|mailinglistNode
argument_list|,
literal|"unsubscribe"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|mailinglist
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|ProjectVersionMetadata
name|versionMetadata
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|versionMetadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|()
expr_stmt|;
name|versionMetadata
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setName
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setDescription
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setUrl
argument_list|(
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setIncomplete
argument_list|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"incomplete"
argument_list|)
operator|&&
name|node
operator|.
name|getProperty
argument_list|(
literal|"incomplete"
argument_list|)
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME: decide how to treat these in the content repo
name|String
name|scmConnection
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"scm.connection"
argument_list|)
decl_stmt|;
name|String
name|scmDeveloperConnection
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"scm.developerConnection"
argument_list|)
decl_stmt|;
name|String
name|scmUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"scm.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scmConnection
operator|!=
literal|null
operator|||
name|scmDeveloperConnection
operator|!=
literal|null
operator|||
name|scmUrl
operator|!=
literal|null
condition|)
block|{
name|Scm
name|scm
init|=
operator|new
name|Scm
argument_list|()
decl_stmt|;
name|scm
operator|.
name|setConnection
argument_list|(
name|scmConnection
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setDeveloperConnection
argument_list|(
name|scmDeveloperConnection
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setUrl
argument_list|(
name|scmUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setScm
argument_list|(
name|scm
argument_list|)
expr_stmt|;
block|}
name|String
name|ciSystem
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"ci.system"
argument_list|)
decl_stmt|;
name|String
name|ciUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"ci.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ciSystem
operator|!=
literal|null
operator|||
name|ciUrl
operator|!=
literal|null
condition|)
block|{
name|CiManagement
name|ci
init|=
operator|new
name|CiManagement
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setSystem
argument_list|(
name|ciSystem
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUrl
argument_list|(
name|ciUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setCiManagement
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|String
name|issueSystem
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"issue.system"
argument_list|)
decl_stmt|;
name|String
name|issueUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"issue.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|issueSystem
operator|!=
literal|null
operator|||
name|issueUrl
operator|!=
literal|null
condition|)
block|{
name|IssueManagement
name|issueManagement
init|=
operator|new
name|IssueManagement
argument_list|()
decl_stmt|;
name|issueManagement
operator|.
name|setSystem
argument_list|(
name|issueSystem
argument_list|)
expr_stmt|;
name|issueManagement
operator|.
name|setUrl
argument_list|(
name|issueUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setIssueManagement
argument_list|(
name|issueManagement
argument_list|)
expr_stmt|;
block|}
name|String
name|orgName
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"org.name"
argument_list|)
decl_stmt|;
name|String
name|orgUrl
init|=
name|getPropertyString
argument_list|(
name|node
argument_list|,
literal|"org.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orgName
operator|!=
literal|null
operator|||
name|orgUrl
operator|!=
literal|null
condition|)
block|{
name|Organization
name|org
init|=
operator|new
name|Organization
argument_list|()
decl_stmt|;
name|org
operator|.
name|setName
argument_list|(
name|orgName
argument_list|)
expr_stmt|;
name|org
operator|.
name|setUrl
argument_list|(
name|orgUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setOrganization
argument_list|(
name|org
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"licenses"
argument_list|)
condition|)
block|{
name|Node
name|licensesListNode
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"licenses"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|License
argument_list|>
name|licenseList
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|licensesListNode
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|JcrMetadataRepository
operator|::
name|getLicense
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|versionMetadata
operator|.
name|setLicenses
argument_list|(
name|licenseList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"mailinglists"
argument_list|)
condition|)
block|{
name|Node
name|mailinglistsListNode
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"mailinglists"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailinglistList
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|mailinglistsListNode
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|JcrMetadataRepository
operator|::
name|getMailinglist
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|versionMetadata
operator|.
name|setMailingLists
argument_list|(
name|mailinglistList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"dependencies"
argument_list|)
condition|)
block|{
name|Node
name|dependenciesNode
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"dependencies"
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|dependenciesNode
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|DEPENDENCY_NODE_TYPE
argument_list|)
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
comment|// FIXME: correct these properties
name|dependency
operator|.
name|setNamespace
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"namespace"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setProjectId
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"projectId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setArtifactId
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setClassifier
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"classifier"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"optional"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"scope"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setSystemPath
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"systemPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|getPropertyString
argument_list|(
name|n
argument_list|,
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|retrieveFacetProperties
argument_list|(
name|versionMetadata
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|versionMetadata
return|;
block|}
specifier|private
name|void
name|retrieveFacetProperties
parameter_list|(
name|FacetedMetadata
name|metadata
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|FACET_NODE_TYPE
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MetadataFacetFactory
name|factory
init|=
name|metadataService
operator|.
name|getFactory
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Attempted to load unknown project version metadata facet: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetadataFacet
name|facet
init|=
name|createFacetFromNode
argument_list|(
name|factory
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore repo not found for now
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|versions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: bind variables instead
name|String
name|q
init|=
literal|"SELECT * FROM [archiva:dependency] WHERE ISDESCENDANTNODE([/repositories/"
operator|+
name|repositoryId
operator|+
literal|"/content]) AND [namespace]='"
operator|+
name|namespace
operator|+
literal|"' AND [artifactId]='"
operator|+
name|projectId
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
name|projectVersion
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|" AND [version]='"
operator|+
name|projectVersion
operator|+
literal|"'"
expr_stmt|;
block|}
try|try
block|{
name|Query
name|query
init|=
name|jcrSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getNodes
argument_list|(
name|result
argument_list|)
control|)
block|{
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// dependencies grouping element
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// project version
name|String
name|usedByProjectVersion
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// project
name|String
name|usedByProject
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|n
operator|=
name|n
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// namespace
name|String
name|usedByNamespace
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|ProjectVersionReference
name|ref
init|=
operator|new
name|ProjectVersionReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setNamespace
argument_list|(
name|usedByNamespace
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setProjectId
argument_list|(
name|usedByProject
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setProjectVersion
argument_list|(
name|usedByProjectVersion
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setReferenceType
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|)
expr_stmt|;
name|references
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
return|return
name|this
operator|.
name|getChildNamespaces
argument_list|(
name|session
argument_list|,
name|repositoryId
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChildNamespaces
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|baseNamespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|String
name|path
init|=
name|baseNamespace
operator|!=
literal|null
condition|?
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|baseNamespace
argument_list|)
else|:
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getNodeNames
argument_list|(
name|getSession
argument_list|(
name|session
argument_list|)
argument_list|,
name|path
argument_list|,
name|NAMESPACE_MIXIN_TYPE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
try|try
block|{
return|return
name|getNodeNames
argument_list|(
name|getSession
argument_list|(
name|session
argument_list|)
argument_list|,
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
operator|.
name|JcrConstants
operator|.
name|PROJECT_MIXIN_TYPE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
try|try
block|{
return|return
name|getNodeNames
argument_list|(
name|getSession
argument_list|(
name|session
argument_list|)
argument_list|,
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
argument_list|,
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeTimestampedArtifact
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|repositoryId
init|=
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|,
name|baseVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|String
name|version
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|artifactMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|getProjectPath
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|nodeAtPath
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|nodeAtPath
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getArtifactPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// remove version
name|path
operator|=
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
name|Node
name|nodeAtPath
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|nodeAtPath
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
comment|//
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|projectVersion
argument_list|)
condition|)
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeFacetFromArtifact
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|project
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"artifactMetadata: {}"
argument_list|,
name|artifactMetadata
argument_list|)
expr_stmt|;
name|MetadataFacet
name|metadataFacetToRemove
init|=
name|artifactMetadata
operator|.
name|getFacet
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetToRemove
operator|!=
literal|null
operator|&&
name|metadataFacet
operator|.
name|equals
argument_list|(
name|metadataFacetToRemove
argument_list|)
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifacts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
block|}
comment|/**      * Exact is ignored as we can't do exact search in any property, we need a key      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|searchArtifacts
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|exact
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
name|searchArtifacts
argument_list|(
name|session
argument_list|,
name|repositoryId
argument_list|,
literal|null
argument_list|,
name|text
argument_list|,
name|exact
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|searchArtifacts
parameter_list|(
name|RepositorySession
name|session
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|exact
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|Session
name|jcrSession
init|=
name|getSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|String
name|theKey
init|=
name|key
operator|==
literal|null
condition|?
literal|"*"
else|:
literal|"["
operator|+
name|key
operator|+
literal|"]"
decl_stmt|;
name|String
name|projectVersionCondition
init|=
name|exact
condition|?
literal|"(projectVersion."
operator|+
name|theKey
operator|+
literal|" = $value)"
else|:
literal|"contains([projectVersion]."
operator|+
name|theKey
operator|+
literal|", $value)"
decl_stmt|;
name|String
name|facetCondition
init|=
name|exact
condition|?
literal|"(facet."
operator|+
name|theKey
operator|+
literal|" = $value)"
else|:
literal|"contains([facet]."
operator|+
name|theKey
operator|+
literal|", $value)"
decl_stmt|;
name|String
name|descendantCondition
init|=
name|repositoryId
operator|==
literal|null
condition|?
literal|" AND [projectVersion].[jcr:path] LIKE '/repositories/%/content/%'"
else|:
literal|" AND ISDESCENDANTNODE(projectVersion,'/"
operator|+
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"')"
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
operator|(
name|key
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|PROJECT_VERSION_VERSION_PROPERTIES
argument_list|,
name|key
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
comment|// We search only for project version properties if the key is a valid property name
name|String
name|q1
init|=
literal|"SELECT * FROM ["
operator|+
name|PROJECT_VERSION_NODE_TYPE
operator|+
literal|"] AS projectVersion LEFT OUTER JOIN ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact ON ISCHILDNODE(artifact, projectVersion) WHERE "
operator|+
name|projectVersionCondition
operator|+
name|descendantCondition
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|runJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|q1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"value"
argument_list|,
name|text
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|q2
init|=
literal|"SELECT * FROM ["
operator|+
name|PROJECT_VERSION_NODE_TYPE
operator|+
literal|"] AS projectVersion LEFT OUTER JOIN ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] AS artifact ON ISCHILDNODE(artifact, projectVersion) LEFT OUTER JOIN ["
operator|+
name|FACET_NODE_TYPE
operator|+
literal|"] AS facet ON ISCHILDNODE(facet, projectVersion) WHERE "
operator|+
name|facetCondition
operator|+
name|descendantCondition
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|runJcrQuery
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|q2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"value"
argument_list|,
name|text
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|ArtifactMetadata
name|getArtifactFromNode
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|Node
name|artifactNode
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|id
init|=
name|artifactNode
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
operator|==
literal|null
condition|?
name|artifactNode
operator|.
name|getAncestor
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
else|:
name|repositoryId
argument_list|)
expr_stmt|;
name|Node
name|projectVersionNode
init|=
name|artifactNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Node
name|projectNode
init|=
name|projectVersionNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Node
name|namespaceNode
init|=
name|projectNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|namespaceNode
operator|.
name|getProperty
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProject
argument_list|(
name|projectNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProjectVersion
argument_list|(
name|projectVersionNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"version"
argument_list|)
condition|?
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
else|:
name|projectVersionNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
name|JCR_LAST_MODIFIED
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setFileLastModified
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
name|JCR_LAST_MODIFIED
argument_list|)
operator|.
name|getDate
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"whenGathered"
argument_list|)
condition|)
block|{
name|Calendar
name|cal
init|=
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"whenGathered"
argument_list|)
operator|.
name|getDate
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setWhenGathered
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|cal
operator|.
name|toInstant
argument_list|()
argument_list|,
name|cal
operator|.
name|getTimeZone
argument_list|()
operator|.
name|toZoneId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactNode
operator|.
name|hasProperty
argument_list|(
literal|"size"
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setSize
argument_list|(
name|artifactNode
operator|.
name|getProperty
argument_list|(
literal|"size"
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Node
name|cslistNode
init|=
name|getOrAddNodeByPath
argument_list|(
name|artifactNode
argument_list|,
literal|"checksums"
argument_list|)
decl_stmt|;
name|NodeIterator
name|csNodeIt
init|=
name|cslistNode
operator|.
name|getNodes
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
while|while
condition|(
name|csNodeIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|csNode
init|=
name|csNodeIt
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|csNode
operator|.
name|isNodeType
argument_list|(
name|CHECKSUM_NODE_TYPE
argument_list|)
condition|)
block|{
name|addChecksum
argument_list|(
name|artifact
argument_list|,
name|csNode
argument_list|)
expr_stmt|;
block|}
block|}
name|retrieveFacetProperties
argument_list|(
name|artifact
argument_list|,
name|artifactNode
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|private
name|void
name|addChecksum
parameter_list|(
name|ArtifactMetadata
name|artifact
parameter_list|,
name|Node
name|n
parameter_list|)
block|{
try|try
block|{
name|ChecksumAlgorithm
name|alg
init|=
name|ChecksumAlgorithm
operator|.
name|valueOf
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"value"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setChecksum
argument_list|(
name|alg
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set checksum from node {}"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getPropertyString
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|node
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|?
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|.
name|getString
argument_list|()
else|:
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getNodeNames
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|nodeType
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|nodeAtPath
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|nodeAtPath
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|nodeType
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore repo not found for now
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|names
return|;
block|}
specifier|private
specifier|static
name|String
name|getRepositoryPath
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
literal|"repositories/"
operator|+
name|repositoryId
return|;
block|}
specifier|private
specifier|static
name|String
name|getRepositoryContentPath
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
return|return
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"/content"
return|;
block|}
specifier|private
specifier|static
name|String
name|getFacetPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|facetId
argument_list|)
condition|?
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"/facets"
else|:
name|getRepositoryPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"/facets/"
operator|+
name|facetId
return|;
block|}
specifier|private
specifier|static
name|String
name|getNamespacePath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
return|return
name|getRepositoryContentPath
argument_list|(
name|repositoryId
argument_list|)
operator|+
literal|"/"
operator|+
name|namespace
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getProjectPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
block|{
return|return
name|getNamespacePath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|)
operator|+
literal|"/"
operator|+
name|projectId
return|;
block|}
specifier|private
specifier|static
name|String
name|getProjectVersionPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
return|return
name|getProjectPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
operator|+
literal|"/"
operator|+
name|projectVersion
return|;
block|}
specifier|private
specifier|static
name|String
name|getArtifactPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
operator|+
literal|"/"
operator|+
name|id
return|;
block|}
specifier|private
name|Node
name|getOrAddNodeByPath
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getOrAddNodeByPath
argument_list|(
name|baseNode
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddNodeByPath
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|nodeType
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getOrAddNodeByPath
argument_list|(
name|baseNode
argument_list|,
name|name
argument_list|,
name|nodeType
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddNodeByPath
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|nodeType
parameter_list|,
name|boolean
name|primaryType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getOrAddNodeByPath "
operator|+
name|baseNode
operator|+
literal|" "
operator|+
name|name
operator|+
literal|" "
operator|+
name|nodeType
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|baseNode
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
if|if
condition|(
name|nodeType
operator|!=
literal|null
operator|&&
name|primaryType
condition|)
block|{
name|node
operator|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|n
argument_list|,
name|nodeType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeType
operator|!=
literal|null
operator|&&
operator|!
name|node
operator|.
name|isNodeType
argument_list|(
name|nodeType
argument_list|)
condition|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|getOrAddNodeByPath
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|primaryType
parameter_list|,
name|String
modifier|...
name|mixinTypes
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getOrAddNodeByPath baseNode={}, name={}, primary={}, mixin={}"
argument_list|,
name|baseNode
argument_list|,
name|name
argument_list|,
name|primaryType
argument_list|,
name|mixinTypes
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|baseNode
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
name|node
operator|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|n
argument_list|,
name|primaryType
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mixin
range|:
name|mixinTypes
control|)
block|{
if|if
condition|(
name|mixin
operator|!=
literal|null
operator|&&
operator|!
name|node
operator|.
name|isNodeType
argument_list|(
name|mixin
argument_list|)
condition|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|mixin
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
specifier|static
name|String
name|getFacetPath
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|getFacetPath
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|+
literal|"/"
operator|+
name|name
return|;
block|}
specifier|private
name|Node
name|getOrAddRepositoryNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getOrAddRepositoryNode "
operator|+
name|repositoryId
argument_list|)
expr_stmt|;
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|root
argument_list|,
literal|"repositories"
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Repositories "
operator|+
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|repositoryId
argument_list|,
name|REPOSITORY_NODE_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|getOrAddRepositoryContentNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getOrAddRepositoryNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
literal|"content"
argument_list|,
name|CONTENT_NODE_TYPE
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddNamespaceNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|repo
init|=
name|getOrAddRepositoryContentNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
return|return
name|getOrAddNodeByPath
argument_list|(
name|repo
argument_list|,
name|namespace
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
name|FOLDER_TYPE
argument_list|,
name|NAMESPACE_MIXIN_TYPE
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getOrAddProjectNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|namespaceNode
init|=
name|getOrAddNamespaceNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|namespaceNode
argument_list|,
name|projectId
argument_list|,
name|FOLDER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isNodeType
argument_list|(
name|PROJECT_MIXIN_TYPE
argument_list|)
condition|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|PROJECT_MIXIN_TYPE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|getOrAddProjectVersionNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|projectNode
init|=
name|getOrAddProjectNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Project node {}"
argument_list|,
name|projectNode
argument_list|)
expr_stmt|;
name|Node
name|projectVersionNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|projectNode
argument_list|,
name|projectVersion
argument_list|,
name|PROJECT_VERSION_NODE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|projectVersionNode
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|projectVersionNode
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|projectVersion
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Project version node {}"
argument_list|,
name|projectVersionNode
argument_list|)
expr_stmt|;
return|return
name|projectVersionNode
return|;
block|}
specifier|private
name|Node
name|getOrAddArtifactNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|versionNode
init|=
name|getOrAddProjectVersionNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|versionNode
argument_list|,
name|id
argument_list|,
name|ARTIFACT_NODE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|findArtifactNode
parameter_list|(
name|Session
name|jcrSession
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
operator|||
name|projectId
operator|==
literal|null
operator|||
name|projectVersion
operator|==
literal|null
operator|||
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|root
argument_list|,
literal|"repositories"
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|String
name|repositoryId
init|=
name|n
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Node
name|repo
init|=
name|getOrAddRepositoryContentNode
argument_list|(
name|jcrSession
argument_list|,
name|repositoryId
argument_list|)
decl_stmt|;
name|Node
name|nsNode
init|=
name|JcrUtils
operator|.
name|getNodeIfExists
argument_list|(
name|repo
argument_list|,
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|namespace
argument_list|,
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsNode
operator|!=
literal|null
condition|)
block|{
name|Node
name|projNode
init|=
name|JcrUtils
operator|.
name|getNodeIfExists
argument_list|(
name|nsNode
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|projNode
operator|!=
literal|null
condition|)
block|{
name|Node
name|projVersionNode
init|=
name|JcrUtils
operator|.
name|getNodeIfExists
argument_list|(
name|projNode
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|projVersionNode
operator|!=
literal|null
condition|)
block|{
return|return
name|JcrUtils
operator|.
name|getNodeIfExists
argument_list|(
name|projVersionNode
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Calendar
name|createCalendar
parameter_list|(
name|ZonedDateTime
name|time
parameter_list|)
block|{
return|return
name|GregorianCalendar
operator|.
name|from
argument_list|(
name|time
argument_list|)
return|;
block|}
specifier|private
name|String
name|join
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|populateStatistics
parameter_list|(
name|RepositorySession
name|repositorySession
parameter_list|,
name|MetadataRepository
name|repository
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|RepositoryStatistics
name|repositoryStatistics
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
operator|!
operator|(
name|repository
operator|instanceof
name|JcrMetadataRepository
operator|)
condition|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
literal|"The statistics population is only possible for JcrMetdataRepository implementations"
argument_list|)
throw|;
block|}
name|Session
name|session
init|=
name|getSession
argument_list|(
name|repositorySession
argument_list|)
decl_stmt|;
comment|// TODO: these may be best as running totals, maintained by observations on the properties in JCR
try|try
block|{
name|QueryManager
name|queryManager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
comment|// TODO: Check, if this is still the case - Switched to Jackrabbit OAK with archiva 3.0
comment|// Former statement: JCR-SQL2 query will not complete on a large repo in Jackrabbit 2.2.0 - see JCR-2835
comment|//    Using the JCR-SQL2 variants gives
comment|//      "org.apache.lucene.search.BooleanQuery$TooManyClauses: maxClauseCount is set to 1024"
comment|//            String whereClause = "WHERE ISDESCENDANTNODE([/repositories/" + repositoryId + "/content])";
comment|//            Query query = queryManager.createQuery( "SELECT size FROM [archiva:artifact] " + whereClause,
comment|//                                                    Query.JCR_SQL2 );
name|String
name|whereClause
init|=
literal|"WHERE ISDESCENDANTNODE([/repositories/"
operator|+
name|repositoryId
operator|+
literal|"/content])"
decl_stmt|;
name|Query
name|query
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"SELECT type,size FROM ["
operator|+
name|ARTIFACT_NODE_TYPE
operator|+
literal|"] "
operator|+
name|whereClause
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|queryResult
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|totalByType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|,
name|totalArtifacts
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|JcrUtils
operator|.
name|getRows
argument_list|(
name|queryResult
argument_list|)
control|)
block|{
name|Node
name|n
init|=
name|row
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Result node {}"
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|row
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
operator|.
name|getLong
argument_list|()
expr_stmt|;
name|String
name|type
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|hasNode
argument_list|(
name|MavenArtifactFacet
operator|.
name|FACET_ID
argument_list|)
condition|)
block|{
name|Node
name|facetNode
init|=
name|n
operator|.
name|getNode
argument_list|(
name|MavenArtifactFacet
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
name|type
operator|=
name|facetNode
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|"Other"
expr_stmt|;
block|}
name|Integer
name|prev
init|=
name|totalByType
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|totalByType
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|prev
operator|!=
literal|null
condition|?
name|prev
operator|+
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
name|totalArtifacts
operator|++
expr_stmt|;
block|}
name|repositoryStatistics
operator|.
name|setTotalArtifactCount
argument_list|(
name|totalArtifacts
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setTotalArtifactFileSize
argument_list|(
name|totalSize
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|totalByType
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Setting count for type: {} = {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setTotalCountForType
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The query ordering is a trick to ensure that the size is correct, otherwise due to lazy init it will be -1
comment|//            query = queryManager.createQuery( "SELECT * FROM [archiva:project] " + whereClause, Query.JCR_SQL2 );
name|query
operator|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [archiva:project] "
operator|+
name|whereClause
operator|+
literal|" ORDER BY [jcr:score]"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setTotalProjectCount
argument_list|(
name|query
operator|.
name|execute
argument_list|()
operator|.
name|getRows
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//            query = queryManager.createQuery(
comment|//                "SELECT * FROM [archiva:namespace] " + whereClause + " AND namespace IS NOT NULL", Query.JCR_SQL2 );
name|query
operator|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [archiva:namespace] "
operator|+
name|whereClause
operator|+
literal|" AND namespace IS NOT NULL ORDER BY [jcr:score]"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setTotalGroupCount
argument_list|(
name|query
operator|.
name|execute
argument_list|()
operator|.
name|getRows
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Session
name|login
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isArtifactNodeType
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
try|try
block|{
return|return
name|n
operator|!=
literal|null
operator|&&
name|n
operator|.
name|isNodeType
argument_list|(
name|ARTIFACT_NODE_TYPE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|Optional
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactOptional
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|Node
name|n
parameter_list|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
specifier|private
name|Optional
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactOptional
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|Row
name|row
parameter_list|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getArtifactFromNode
argument_list|(
name|repositoryId
argument_list|,
name|row
operator|.
name|getNode
argument_list|(
literal|"artifact"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactStream
parameter_list|(
specifier|final
name|RepositorySession
name|session
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|,
specifier|final
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|Node
name|root
init|=
name|jcrSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getProjectVersionPath
argument_list|(
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|JcrMetadataRepository
operator|::
name|isArtifactNodeType
argument_list|)
operator|.
name|map
argument_list|(
name|n
lambda|->
name|getArtifactOptional
argument_list|(
name|repositoryId
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|skip
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactStream
parameter_list|(
specifier|final
name|RepositorySession
name|session
parameter_list|,
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|QueryParameter
name|queryParameter
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Session
name|jcrSession
decl_stmt|;
try|try
block|{
name|jcrSession
operator|=
name|getSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
decl_stmt|;
name|String
name|q
init|=
name|getArtifactQuery
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|jcrSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|createResultSpliterator
argument_list|(
name|result
argument_list|,
name|getArtifactFromRowFunc
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|skip
argument_list|(
name|queryParameter
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|queryParameter
operator|.
name|getLimit
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
decl||
name|MetadataRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

