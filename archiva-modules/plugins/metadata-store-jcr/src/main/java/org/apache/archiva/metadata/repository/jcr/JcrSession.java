begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|jcr
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataSessionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|RepositorySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  *  * Session implementation for a JCR repository.  *  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
specifier|public
class|class
name|JcrSession
extends|extends
name|RepositorySession
implements|implements
name|AutoCloseable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcrSession
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Session
name|jcrSession
decl_stmt|;
specifier|private
name|JcrMetadataRepository
name|repository
decl_stmt|;
specifier|public
name|JcrSession
parameter_list|(
name|JcrMetadataRepository
name|metadataRepository
parameter_list|,
name|MetadataResolver
name|resolver
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|super
argument_list|(
name|metadataRepository
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|metadataRepository
expr_stmt|;
name|this
operator|.
name|jcrSession
operator|=
name|metadataRepository
operator|.
name|login
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Session
name|getJcrSession
parameter_list|()
block|{
return|return
name|jcrSession
return|;
block|}
specifier|public
name|JcrMetadataRepository
name|getJcrRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|( )
block|{
name|super
operator|.
name|close
argument_list|( )
expr_stmt|;
name|jcrSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isDirty
parameter_list|( )
block|{
if|if
condition|(
name|super
operator|.
name|isDirty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
return|return
name|jcrSession
operator|.
name|hasPendingChanges
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not check pending changes {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|( )
throws|throws
name|MetadataSessionException
block|{
name|super
operator|.
name|save
argument_list|( )
expr_stmt|;
try|try
block|{
name|jcrSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataSessionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|revert
parameter_list|( )
throws|throws
name|MetadataSessionException
block|{
name|super
operator|.
name|revert
argument_list|( )
expr_stmt|;
try|try
block|{
name|jcrSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataSessionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|MetadataSessionException
block|{
try|try
block|{
name|jcrSession
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataSessionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshAndDiscard
parameter_list|()
throws|throws
name|MetadataSessionException
block|{
try|try
block|{
name|jcrSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataSessionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

