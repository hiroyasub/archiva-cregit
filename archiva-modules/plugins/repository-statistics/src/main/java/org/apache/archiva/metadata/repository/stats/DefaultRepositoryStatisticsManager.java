begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|layout
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="org.apache.archiva.metadata.repository.stats.RepositoryStatisticsManager" role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryStatisticsManager
implements|implements
name|RepositoryStatisticsManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRepositoryStatisticsManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataRepository
name|metadataRepository
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryContentFactory
name|repositoryContentFactory
decl_stmt|;
specifier|public
name|RepositoryStatistics
name|getLastStatistics
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
comment|// TODO: consider a more efficient implementation that directly gets the last one from the content repository
name|List
argument_list|<
name|String
argument_list|>
name|scans
init|=
name|metadataRepository
operator|.
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|scans
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|scans
operator|.
name|get
argument_list|(
name|scans
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|RepositoryStatistics
operator|)
name|metadataRepository
operator|.
name|getMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|walkRepository
parameter_list|(
name|RepositoryStatistics
name|stats
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|ns
parameter_list|,
name|ManagedRepositoryContent
name|repositoryContent
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|metadataRepository
operator|.
name|getNamespaces
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|)
control|)
block|{
name|walkRepository
argument_list|(
name|stats
argument_list|,
name|repositoryId
argument_list|,
name|ns
operator|+
literal|"."
operator|+
name|namespace
argument_list|,
name|repositoryContent
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|projects
init|=
name|metadataRepository
operator|.
name|getProjects
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stats
operator|.
name|setTotalGroupCount
argument_list|(
name|stats
operator|.
name|getTotalGroupCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalProjectCount
argument_list|(
name|stats
operator|.
name|getTotalProjectCount
argument_list|()
operator|+
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|project
range|:
name|projects
control|)
block|{
for|for
control|(
name|String
name|version
range|:
name|metadataRepository
operator|.
name|getProjectVersions
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|)
control|)
block|{
for|for
control|(
name|ArtifactMetadata
name|artifact
range|:
name|metadataRepository
operator|.
name|getArtifacts
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|,
name|version
argument_list|)
control|)
block|{
name|stats
operator|.
name|setTotalArtifactCount
argument_list|(
name|stats
operator|.
name|getTotalArtifactCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalArtifactFileSize
argument_list|(
name|stats
operator|.
name|getTotalArtifactFileSize
argument_list|()
operator|+
name|artifact
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: need a maven2 metadata repository API equivalent
try|try
block|{
name|String
name|type
init|=
name|repositoryContent
operator|.
name|toArtifactReference
argument_list|(
name|ns
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/"
operator|+
name|project
operator|+
literal|"/"
operator|+
name|version
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setTotalCountForType
argument_list|(
name|type
argument_list|,
name|stats
operator|.
name|getTotalCountForType
argument_list|(
name|type
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|addStatisticsAfterScan
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|long
name|totalFiles
parameter_list|,
name|long
name|newFiles
parameter_list|)
block|{
name|RepositoryStatistics
name|repositoryStatistics
init|=
operator|new
name|RepositoryStatistics
argument_list|()
decl_stmt|;
name|repositoryStatistics
operator|.
name|setScanStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setScanEndTime
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setTotalFileCount
argument_list|(
name|totalFiles
argument_list|)
expr_stmt|;
name|repositoryStatistics
operator|.
name|setNewFileCount
argument_list|(
name|newFiles
argument_list|)
expr_stmt|;
comment|// In the future, instead of being tied to a scan we might want to record information in the fly based on
comment|// events that are occurring. Even without these totals we could query much of the information on demand based
comment|// on information from the metadata content repository. In the mean time, we lock information in at scan time.
comment|// Note that if new types are later discoverable due to a code change or new plugin, historical stats will not
comment|// be updated and the repository will need to be rescanned.
name|long
name|startWalk
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// TODO: we can probably get a more efficient implementation directly from the metadata repository, but for now
comment|//       we just walk it. Alternatively, we could build an index, or store the aggregate information and update
comment|//       it on the fly
for|for
control|(
name|String
name|ns
range|:
name|metadataRepository
operator|.
name|getRootNamespaces
argument_list|(
name|repositoryId
argument_list|)
control|)
block|{
name|ManagedRepositoryContent
name|content
decl_stmt|;
try|try
block|{
name|content
operator|=
name|repositoryContentFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|walkRepository
argument_list|(
name|repositoryStatistics
argument_list|,
name|repositoryId
argument_list|,
name|ns
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Repository walk for statistics executed in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWalk
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|metadataRepository
operator|.
name|addMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|repositoryStatistics
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteStatistics
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|metadataRepository
operator|.
name|removeMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|getStatisticsInRange
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
name|List
argument_list|<
name|RepositoryStatistics
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryStatistics
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|metadataRepository
operator|.
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|list
control|)
block|{
try|try
block|{
name|Date
name|date
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|RepositoryStatistics
operator|.
name|SCAN_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|parse
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|startTime
operator|==
literal|null
operator|||
operator|!
name|date
operator|.
name|before
argument_list|(
name|startTime
argument_list|)
operator|)
operator|&&
operator|(
name|endTime
operator|==
literal|null
operator|||
operator|!
name|date
operator|.
name|after
argument_list|(
name|endTime
argument_list|)
operator|)
condition|)
block|{
name|RepositoryStatistics
name|stats
init|=
operator|(
name|RepositoryStatistics
operator|)
name|metadataRepository
operator|.
name|getMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid scan result found in the metadata repository: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// continue and ignore this one
block|}
block|}
return|return
name|results
return|;
block|}
specifier|public
name|void
name|setMetadataRepository
parameter_list|(
name|MetadataRepository
name|metadataRepository
parameter_list|)
block|{
name|this
operator|.
name|metadataRepository
operator|=
name|metadataRepository
expr_stmt|;
block|}
specifier|public
name|void
name|setRepositoryContentFactory
parameter_list|(
name|RepositoryContentFactory
name|repositoryContentFactory
parameter_list|)
block|{
name|this
operator|.
name|repositoryContentFactory
operator|=
name|repositoryContentFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

