begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|stats
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="org.apache.archiva.metadata.repository.stats.RepositoryStatisticsManager" role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryStatisticsManager
implements|implements
name|RepositoryStatisticsManager
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataRepository
name|metadataRepository
decl_stmt|;
specifier|static
specifier|final
name|DateFormat
name|SCAN_TIMESTAMP
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd.HHmmss.SSS"
argument_list|)
decl_stmt|;
specifier|public
name|RepositoryStatistics
name|getLastStatistics
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
comment|// TODO: consider a more efficient implementation that directly gets the last one from the content repository
name|List
argument_list|<
name|String
argument_list|>
name|scans
init|=
name|metadataRepository
operator|.
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|scans
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|scans
operator|.
name|get
argument_list|(
name|scans
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|RepositoryStatistics
operator|)
name|metadataRepository
operator|.
name|getMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|addStatisticsAfterScan
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|RepositoryStatistics
name|repositoryStatistics
parameter_list|)
block|{
comment|// TODO
comment|// populate total artifact count from content repository
comment|//        repositoryStatistics.setTotalArtifactCount(  );
comment|// populate total size from content repository
comment|//        repositoryStatistics.setTotalArtifactFileSize(  );
comment|// populate total group count from content repository
comment|//        repositoryStatistics.setTotalGroupCount(  );
comment|// populate total project count from content repository
comment|//        repositoryStatistics.setTotalProjectCount(  );
name|metadataRepository
operator|.
name|addMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|RepositoryStatistics
operator|.
name|FACET_ID
argument_list|,
name|SCAN_TIMESTAMP
operator|.
name|format
argument_list|(
name|repositoryStatistics
operator|.
name|getScanStartTime
argument_list|()
argument_list|)
argument_list|,
name|repositoryStatistics
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMetadataRepository
parameter_list|(
name|MetadataRepository
name|metadataRepository
parameter_list|)
block|{
name|this
operator|.
name|metadataRepository
operator|=
name|metadataRepository
expr_stmt|;
block|}
block|}
end_class

end_unit

