begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|file
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusInSpringTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockControl
import|;
end_import

begin_comment
comment|/**  * @todo should this be a generic MetadataRepository implementation test?  */
end_comment

begin_class
specifier|public
class|class
name|FileMetadataRepositoryTest
extends|extends
name|PlexusInSpringTestCase
block|{
specifier|private
name|FileMetadataRepository
name|repository
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_REPO_ID
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PROJECT
init|=
literal|"projectId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAMESPACE
init|=
literal|"namespace"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PROJECT_VERSION
init|=
literal|"1.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FACET_ID
init|=
literal|"test-facet-id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAME
init|=
literal|"test/name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_VALUE
init|=
literal|"test-value"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN
init|=
literal|"unknown"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_REPO
init|=
literal|"other-repo"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MD5
init|=
literal|"bd4a9b642562547754086de2dab26b7d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SHA1
init|=
literal|"2e5daf0201ddeb068a62d5e08da18657ab2c6be9"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_METADATA_VALUE
init|=
literal|"test-metadata"
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|repository
operator|=
operator|new
name|FileMetadataRepository
argument_list|()
expr_stmt|;
name|File
name|directory
init|=
name|getTestFile
argument_list|(
literal|"target/test-repositories"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|MockControl
name|control
init|=
name|MockControl
operator|.
name|createControl
argument_list|(
name|ArchivaConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArchivaConfiguration
name|config
init|=
operator|(
name|ArchivaConfiguration
operator|)
name|control
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Configuration
name|configData
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configData
operator|.
name|addManagedRepository
argument_list|(
name|createManagedRepository
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|configData
operator|.
name|addManagedRepository
argument_list|(
name|createManagedRepository
argument_list|(
name|OTHER_REPO
argument_list|,
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|expectAndDefaultReturn
argument_list|(
name|config
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|configData
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|repository
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
argument_list|()
decl_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|TEST_FACET_ID
argument_list|,
operator|new
name|MetadataFacetFactory
argument_list|()
block|{
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|()
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
return|;
block|}
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// add to ensure we don't accidentally create an empty facet ID.
name|factories
operator|.
name|put
argument_list|(
literal|""
argument_list|,
operator|new
name|MetadataFacetFactory
argument_list|()
block|{
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|()
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
literal|""
argument_list|,
name|TEST_VALUE
argument_list|)
return|;
block|}
specifier|public
name|MetadataFacet
name|createMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestMetadataFacet
argument_list|(
literal|""
argument_list|,
name|TEST_VALUE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setMetadataFacetFactories
argument_list|(
name|factories
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|repoId
parameter_list|,
name|File
name|directory
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|managedRepository
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|managedRepository
operator|.
name|setId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|managedRepository
operator|.
name|setLocation
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|repoId
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|managedRepository
return|;
block|}
specifier|public
name|void
name|testRootNamespaceWithNoMetadataRepository
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|repository
operator|.
name|getRootNamespaces
argument_list|(
name|TEST_REPO_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithNoOtherArchives
parameter_list|()
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|()
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
literal|"Foo List"
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setMailingLists
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mailingList
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectVersionMetadataIncomplete
parameter_list|()
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setIncomplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|repository
operator|.
name|getProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithExistingFacets
parameter_list|()
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|MetadataFacet
name|facet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|repository
operator|.
name|getProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_FACET_ID
argument_list|)
argument_list|,
name|metadata
operator|.
name|getFacetIds
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|repository
operator|.
name|getProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_FACET_ID
argument_list|)
argument_list|,
name|metadata
operator|.
name|getFacetIds
argument_list|()
argument_list|)
expr_stmt|;
name|TestMetadataFacet
name|testFacet
init|=
operator|(
name|TestMetadataFacet
operator|)
name|metadata
operator|.
name|getFacet
argument_list|(
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|testFacet
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdateProjectVersionMetadataWithNoExistingFacets
parameter_list|()
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|repository
operator|.
name|getProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|metadata
operator|.
name|getFacetIds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|repository
operator|.
name|getProjectVersion
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|metadata
operator|.
name|getFacetIds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacet
parameter_list|()
block|{
name|repository
operator|.
name|addMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|,
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacetWhenEmpty
parameter_list|()
block|{
name|assertNull
argument_list|(
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacetWhenUnknownName
parameter_list|()
block|{
name|repository
operator|.
name|addMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacetWhenDefaultValue
parameter_list|()
block|{
name|repository
operator|.
name|addMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_METADATA_VALUE
argument_list|)
argument_list|,
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacetWhenUnknownFacetId
parameter_list|()
block|{
name|assertNull
argument_list|(
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|UNKNOWN
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacets
parameter_list|()
block|{
name|repository
operator|.
name|addMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TEST_NAME
argument_list|)
argument_list|,
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMetadataFacetsWhenEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFacets
parameter_list|()
block|{
name|repository
operator|.
name|addMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|removeMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|facets
operator|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFacetsWhenEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|removeMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|facets
operator|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFacetsWhenUnknown
parameter_list|()
block|{
name|repository
operator|.
name|removeMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFacet
parameter_list|()
block|{
name|TestMetadataFacet
name|metadataFacet
init|=
operator|new
name|TestMetadataFacet
argument_list|(
name|TEST_VALUE
argument_list|)
decl_stmt|;
name|repository
operator|.
name|addMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|metadataFacet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metadataFacet
argument_list|,
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|removeMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|facets
operator|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFacetWhenEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|removeMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
expr_stmt|;
name|facets
operator|=
name|repository
operator|.
name|getMetadataFacets
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facets
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repository
operator|.
name|getMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_FACET_ID
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFacetWhenUnknown
parameter_list|()
block|{
name|repository
operator|.
name|removeMetadataFacet
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|UNKNOWN
argument_list|,
name|TEST_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifacts
parameter_list|()
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|(
literal|"pom"
argument_list|)
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact2
argument_list|,
name|artifact1
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|repository
operator|.
name|getArtifacts
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactVersions
parameter_list|()
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|String
name|version1
init|=
literal|"1.0-20091212.012345-1"
decl_stmt|;
name|artifact1
operator|.
name|setId
argument_list|(
name|artifact1
operator|.
name|getProject
argument_list|()
operator|+
literal|"-"
operator|+
name|version1
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|artifact1
operator|.
name|setVersion
argument_list|(
name|version1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|String
name|version2
init|=
literal|"1.0-20091212.123456-2"
decl_stmt|;
name|artifact2
operator|.
name|setId
argument_list|(
name|artifact2
operator|.
name|getProject
argument_list|()
operator|+
literal|"-"
operator|+
name|version2
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|artifact2
operator|.
name|setVersion
argument_list|(
name|version2
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|version2
argument_list|,
name|version1
argument_list|)
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactVersions
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactVersionsMultipleArtifactsSingleVersion
parameter_list|()
block|{
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|artifact1
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|artifact2
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|"-sources.jar"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactVersions
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeOpen
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeSparseNamespace
parameter_list|()
block|{
name|String
name|namespace
init|=
literal|"org.apache.archiva"
decl_stmt|;
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|namespace
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeLowerBound
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|date
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeLowerBoundOutOfRange
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|10000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|date
argument_list|,
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeLowerAndUpperBound
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|lower
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|Date
name|upper
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|10000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeUpperBound
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|upper
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|10000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
name|upper
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByDateRangeUpperBoundOutOfRange
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|upper
init|=
operator|new
name|Date
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
name|upper
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNamespacesWithSparseDepth
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven.shared"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"org"
argument_list|)
argument_list|,
name|repository
operator|.
name|getRootNamespaces
argument_list|(
name|TEST_REPO_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"apache"
argument_list|)
argument_list|,
name|repository
operator|.
name|getNamespaces
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|"org"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"maven"
argument_list|)
argument_list|,
name|repository
operator|.
name|getNamespaces
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|"org.apache"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"shared"
argument_list|)
argument_list|,
name|repository
operator|.
name|getNamespaces
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|"org.apache.maven"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByChecksumSingleResultMd5
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByChecksum
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_MD5
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByChecksumSingleResultSha1
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByChecksum
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByChecksumMultipleResult
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|projectMetadata
init|=
name|createProject
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|projectMetadata
operator|=
name|createProject
argument_list|()
expr_stmt|;
name|String
name|newProjectId
init|=
literal|"another-project"
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|newProjectId
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|artifact2
operator|.
name|setProject
argument_list|(
name|newProjectId
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|newProjectId
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact2
argument_list|,
name|artifact1
argument_list|)
argument_list|,
name|repository
operator|.
name|getArtifactsByChecksum
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_SHA1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetArtifactsByChecksumNoResult
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|createProject
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|ArtifactMetadata
operator|>
name|emptyList
argument_list|()
argument_list|,
name|repository
operator|.
name|getArtifactsByChecksum
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|"not a checksum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteArtifact
parameter_list|()
block|{
name|ArtifactMetadata
name|artifact
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|repository
operator|.
name|getArtifacts
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|deleteArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repository
operator|.
name|getArtifacts
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|TEST_PROJECT
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteRepository
parameter_list|()
block|{
name|repository
operator|.
name|updateNamespace
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|project1
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|project1
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|project1
operator|.
name|setId
argument_list|(
literal|"project1"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|project1
argument_list|)
expr_stmt|;
name|ProjectMetadata
name|project2
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|project2
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|project2
operator|.
name|setId
argument_list|(
literal|"project2"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateProject
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|project2
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact1
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|artifact1
operator|.
name|setProject
argument_list|(
literal|"project1"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
literal|"project1"
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact1
argument_list|)
expr_stmt|;
name|ArtifactMetadata
name|artifact2
init|=
name|createArtifact
argument_list|()
decl_stmt|;
name|artifact2
operator|.
name|setProject
argument_list|(
literal|"project2"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|updateArtifact
argument_list|(
name|TEST_REPO_ID
argument_list|,
name|TEST_NAMESPACE
argument_list|,
literal|"project2"
argument_list|,
name|TEST_PROJECT_VERSION
argument_list|,
name|artifact2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|artifact1
argument_list|,
name|artifact2
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|,
operator|new
name|ArtifactMetadataComparator
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|,
operator|new
name|ArtifactMetadataComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|repository
operator|.
name|deleteRepository
argument_list|(
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repository
operator|.
name|getArtifactsByDateRange
argument_list|(
name|TEST_REPO_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ProjectMetadata
name|createProject
parameter_list|()
block|{
return|return
name|createProject
argument_list|(
name|TEST_NAMESPACE
argument_list|)
return|;
block|}
specifier|private
name|ProjectMetadata
name|createProject
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
name|ProjectMetadata
name|project
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|project
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|project
operator|.
name|setNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
return|return
name|project
return|;
block|}
specifier|private
name|ArtifactMetadata
name|createArtifact
parameter_list|()
block|{
return|return
name|createArtifact
argument_list|(
literal|"jar"
argument_list|)
return|;
block|}
specifier|private
name|ArtifactMetadata
name|createArtifact
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|ArtifactMetadata
name|artifact
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
name|TEST_PROJECT
operator|+
literal|"-"
operator|+
name|TEST_PROJECT_VERSION
operator|+
literal|"."
operator|+
name|type
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProject
argument_list|(
name|TEST_PROJECT
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setRepositoryId
argument_list|(
name|TEST_REPO_ID
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setFileLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|TEST_PROJECT_VERSION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setMd5
argument_list|(
name|TEST_MD5
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setSha1
argument_list|(
name|TEST_SHA1
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|private
class|class
name|ArtifactMetadataComparator
implements|implements
name|Comparator
argument_list|<
name|ArtifactMetadata
argument_list|>
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
name|ArtifactMetadata
name|a
parameter_list|,
name|ArtifactMetadata
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|a
operator|.
name|getProject
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|String
operator|)
name|b
operator|.
name|getProject
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestMetadataFacet
implements|implements
name|MetadataFacet
block|{
specifier|private
name|String
name|testFacetId
decl_stmt|;
specifier|private
name|TestMetadataFacet
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|testFacetId
operator|=
name|TEST_FACET_ID
expr_stmt|;
block|}
specifier|private
name|TestMetadataFacet
parameter_list|(
name|String
name|facetId
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|testFacetId
operator|=
name|facetId
expr_stmt|;
block|}
specifier|private
name|String
name|value
decl_stmt|;
specifier|public
name|String
name|getFacetId
parameter_list|()
block|{
return|return
name|testFacetId
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TEST_NAME
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toProperties
parameter_list|()
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|testFacetId
operator|+
literal|":foo"
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|fromProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|testFacetId
operator|+
literal|":foo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TestMetadataFacet{"
operator|+
literal|"value='"
operator|+
name|value
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TestMetadataFacet
name|that
init|=
operator|(
name|TestMetadataFacet
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|?
operator|!
name|value
operator|.
name|equals
argument_list|(
name|that
operator|.
name|value
argument_list|)
else|:
name|that
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

