begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|maven2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|FileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|maven2
operator|.
name|ArtifactMappingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Maven implementation of the repository content provider. Only default layout and  * maven repository types are supported.  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryContentProvider#maven"
argument_list|)
specifier|public
class|class
name|MavenContentProvider
implements|implements
name|RepositoryContentProvider
block|{
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"fileTypes"
argument_list|)
specifier|private
name|FileTypes
name|filetypes
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|ArtifactMappingProvider
argument_list|>
name|artifactMappingProviders
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|RepositoryType
argument_list|>
name|REPOSITORY_TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(  )
decl_stmt|;
static|static
block|{
name|REPOSITORY_TYPES
operator|.
name|add
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsLayout
parameter_list|(
name|String
name|layout
parameter_list|)
block|{
return|return
literal|"default"
operator|.
name|equals
argument_list|(
name|layout
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RepositoryType
argument_list|>
name|getSupportedRepositoryTypes
parameter_list|( )
block|{
return|return
name|REPOSITORY_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supports
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|equals
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepositoryContent
name|createRemoteContent
parameter_list|(
name|RemoteRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|supports
argument_list|(
name|repository
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type "
operator|+
name|repository
operator|.
name|getType
argument_list|()
operator|+
literal|" is not supported by this implementation."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|supportsLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository layout "
operator|+
name|repository
operator|.
name|getLayout
argument_list|()
operator|+
literal|" is not supported by this implementation."
argument_list|)
throw|;
block|}
name|RemoteDefaultRepositoryContent
name|content
init|=
operator|new
name|RemoteDefaultRepositoryContent
argument_list|(
name|artifactMappingProviders
argument_list|)
decl_stmt|;
name|content
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepositoryContent
name|createManagedContent
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|supports
argument_list|(
name|repository
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type "
operator|+
name|repository
operator|.
name|getType
argument_list|()
operator|+
literal|" is not supported by this implementation."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|supportsLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository layout "
operator|+
name|repository
operator|.
name|getLayout
argument_list|()
operator|+
literal|" is not supported by this implementation."
argument_list|)
throw|;
block|}
name|ManagedDefaultRepositoryContent
name|content
init|=
operator|new
name|ManagedDefaultRepositoryContent
argument_list|(
name|artifactMappingProviders
argument_list|,
name|filetypes
argument_list|)
decl_stmt|;
name|content
operator|.
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|RepositoryContent
parameter_list|,
name|V
extends|extends
name|Repository
parameter_list|>
name|T
name|createContent
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|V
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|supports
argument_list|(
name|repository
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository type "
operator|+
name|repository
operator|.
name|getType
argument_list|()
operator|+
literal|" is not supported by this implementation."
argument_list|)
throw|;
block|}
if|if
condition|(
name|repository
operator|instanceof
name|ManagedRepository
operator|&&
name|ManagedRepositoryContent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
operator|.
name|createManagedContent
argument_list|(
operator|(
name|ManagedRepository
operator|)
name|repository
argument_list|)
return|;
block|}
if|else if
condition|(
name|repository
operator|instanceof
name|RemoteRepository
operator|&&
name|RemoteRepository
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
operator|.
name|createRemoteContent
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|repository
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository flavour is not supported: "
operator|+
name|repository
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

