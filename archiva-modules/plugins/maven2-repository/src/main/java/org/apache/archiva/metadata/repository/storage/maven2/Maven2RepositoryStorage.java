begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|maven2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|networkproxy
operator|.
name|NetworkProxyAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|proxyconnector
operator|.
name|ProxyConnectorAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksumAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|checksum
operator|.
name|ChecksummedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryPathTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorageMetadataInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorageMetadataNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorageRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|common
operator|.
name|WagonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|reports
operator|.
name|RepositoryProblemFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|xml
operator|.
name|XMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|DefaultModelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|DefaultModelBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuildingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Maven 2 repository format storage implementation. This class currently takes parameters to indicate the repository to  * deal with rather than being instantiated per-repository.  * FIXME: instantiate one per repository and allocate permanently from a factory (which can be obtained within the session).  * TODO: finish Maven 1 implementation to prove this API  *<p/>  * The session is passed in as an argument to obtain any necessary resources, rather than the class being instantiated  * within the session in the context of a single managed repository's resolution needs.  *<p/>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"repositoryStorage#maven2"
argument_list|)
specifier|public
class|class
name|Maven2RepositoryStorage
implements|implements
name|RepositoryStorage
block|{
comment|/**      *      */
specifier|private
name|ModelBuilder
name|builder
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
specifier|private
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ProxyConnectorAdmin
name|proxyConnectorAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|NetworkProxyAdmin
name|networkProxyAdmin
decl_stmt|;
comment|/**      *      */
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"repositoryPathTranslator#maven2"
argument_list|)
specifier|private
name|RepositoryPathTranslator
name|pathTranslator
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|WagonFactory
name|wagonFactory
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Maven2RepositoryStorage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METADATA_FILENAME
init|=
literal|"maven-metadata.xml"
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|DefaultModelBuilderFactory
name|defaultModelBuilderFactory
init|=
operator|new
name|DefaultModelBuilderFactory
argument_list|()
decl_stmt|;
name|builder
operator|=
name|defaultModelBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ProjectMetadata
name|readProjectMetadata
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
block|{
comment|// TODO: could natively implement the "shared model" concept from the browse action to avoid needing it there?
return|return
literal|null
return|;
block|}
specifier|public
name|ProjectVersionMetadata
name|readProjectVersionMetadata
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|RepositoryStorageMetadataNotFoundException
throws|,
name|RepositoryStorageMetadataInvalidException
throws|,
name|RepositoryStorageRuntimeException
block|{
try|try
block|{
name|ManagedRepository
name|managedRepository
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|String
name|artifactVersion
init|=
name|projectVersion
decl_stmt|;
name|File
name|basedir
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|projectVersion
argument_list|)
condition|)
block|{
name|File
name|metadataFile
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|basedir
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|METADATA_FILENAME
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenRepositoryMetadata
name|metadata
init|=
name|MavenRepositoryMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
comment|// re-adjust to timestamp if present, otherwise retain the original -SNAPSHOT filename
name|MavenRepositoryMetadata
operator|.
name|Snapshot
name|snapshotVersion
init|=
name|metadata
operator|.
name|getSnapshotVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotVersion
operator|!=
literal|null
condition|)
block|{
name|artifactVersion
operator|=
name|artifactVersion
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|artifactVersion
operator|.
name|length
argument_list|()
operator|-
literal|8
argument_list|)
expr_stmt|;
comment|// remove SNAPSHOT from end
name|artifactVersion
operator|=
name|artifactVersion
operator|+
name|snapshotVersion
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"-"
operator|+
name|snapshotVersion
operator|.
name|getBuildNumber
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
comment|// unable to parse metadata - log it, and continue with the version as the original SNAPSHOT version
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid metadata: "
operator|+
name|metadataFile
operator|+
literal|" - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: won't work well with some other layouts, might need to convert artifact parts to ID by path translator
name|String
name|id
init|=
name|projectId
operator|+
literal|"-"
operator|+
name|artifactVersion
operator|+
literal|".pom"
decl_stmt|;
name|File
name|file
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|basedir
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// metadata could not be resolved
throw|throw
operator|new
name|RepositoryStorageMetadataNotFoundException
argument_list|(
literal|"The artifact's POM file '"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' was missing"
argument_list|)
throw|;
block|}
comment|// TODO: this is a workaround until we can properly resolve using proxies as well - this doesn't cache
comment|//       anything locally!
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|remoteRepositories
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRepository
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
name|networkProxies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|proxyConnectorsMap
init|=
name|proxyConnectorAdmin
operator|.
name|getProxyConnectorAsMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|proxyConnectors
init|=
name|proxyConnectorsMap
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyConnectors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProxyConnector
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
name|RemoteRepository
name|remoteRepoConfig
init|=
name|remoteRepositoryAdmin
operator|.
name|getRemoteRepository
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRepoConfig
operator|!=
literal|null
condition|)
block|{
name|remoteRepositories
operator|.
name|add
argument_list|(
name|remoteRepoConfig
argument_list|)
expr_stmt|;
name|NetworkProxy
name|networkProxyConfig
init|=
name|networkProxyAdmin
operator|.
name|getNetworkProxy
argument_list|(
name|proxyConnector
operator|.
name|getProxyId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkProxyConfig
operator|!=
literal|null
condition|)
block|{
comment|// key/value: remote repo ID/proxy info
name|networkProxies
operator|.
name|put
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
name|networkProxyConfig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ModelBuildingRequest
name|req
init|=
operator|new
name|DefaultModelBuildingRequest
argument_list|()
operator|.
name|setProcessPlugins
argument_list|(
literal|false
argument_list|)
operator|.
name|setPomFile
argument_list|(
name|file
argument_list|)
operator|.
name|setTwoPhaseBuilding
argument_list|(
literal|false
argument_list|)
operator|.
name|setValidationLevel
argument_list|(
name|ModelBuildingRequest
operator|.
name|VALIDATION_LEVEL_MINIMAL
argument_list|)
decl_stmt|;
comment|//MRM-1607. olamy this will resolve jdk profiles on the current running archiva jvm
name|req
operator|.
name|setSystemProperties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// MRM-1411
name|req
operator|.
name|setModelResolver
argument_list|(
operator|new
name|RepositoryModelResolver
argument_list|(
name|managedRepository
argument_list|,
name|pathTranslator
argument_list|,
name|wagonFactory
argument_list|,
name|remoteRepositories
argument_list|,
name|networkProxies
argument_list|,
name|managedRepository
argument_list|)
argument_list|)
expr_stmt|;
name|Model
name|model
decl_stmt|;
try|try
block|{
name|model
operator|=
name|builder
operator|.
name|build
argument_list|(
name|req
argument_list|)
operator|.
name|getEffectiveModel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ModelBuildingException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"The artifact's POM file '"
operator|+
name|file
operator|+
literal|"' was invalid: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ModelProblem
argument_list|>
name|modelProblems
init|=
name|e
operator|.
name|getProblems
argument_list|()
decl_stmt|;
for|for
control|(
name|ModelProblem
name|problem
range|:
name|modelProblems
control|)
block|{
comment|// MRM-1411, related to MRM-1335
comment|// this means that the problem was that the parent wasn't resolved!
comment|// olamy really hackhish but fail with java profile so use error message
comment|// || ( StringUtils.startsWith( problem.getMessage(), "Failed to determine Java version for profile" ) )
comment|// but setTwoPhaseBuilding(true) fix that
if|if
condition|(
operator|(
name|problem
operator|.
name|getException
argument_list|()
operator|instanceof
name|FileNotFoundException
operator|&&
name|e
operator|.
name|getModelId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|e
operator|.
name|getModelId
argument_list|()
operator|.
name|equals
argument_list|(
name|problem
operator|.
name|getModelId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The artifact's parent POM file '"
operator|+
name|file
operator|+
literal|"' cannot be resolved. "
operator|+
literal|"Using defaults for project version metadata.."
argument_list|)
expr_stmt|;
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|MavenProjectFacet
name|facet
init|=
operator|new
name|MavenProjectFacet
argument_list|()
decl_stmt|;
name|facet
operator|.
name|setGroupId
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|facet
operator|.
name|setArtifactId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|facet
operator|.
name|setPackaging
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|String
name|errMsg
init|=
literal|"Error in resolving artifact's parent POM file. "
operator|+
operator|(
name|problem
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|?
name|problem
operator|.
name|getMessage
argument_list|()
else|:
name|problem
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|)
decl_stmt|;
name|RepositoryProblemFacet
name|repoProblemFacet
init|=
operator|new
name|RepositoryProblemFacet
argument_list|()
decl_stmt|;
name|repoProblemFacet
operator|.
name|setRepositoryId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|repoProblemFacet
operator|.
name|setId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|repoProblemFacet
operator|.
name|setMessage
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|repoProblemFacet
operator|.
name|setProblem
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|repoProblemFacet
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|repoProblemFacet
operator|.
name|setVersion
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|repoProblemFacet
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addFacet
argument_list|(
name|repoProblemFacet
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
block|}
throw|throw
operator|new
name|RepositoryStorageMetadataInvalidException
argument_list|(
literal|"invalid-pom"
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Check if the POM is in the correct location
name|boolean
name|correctGroupId
init|=
name|namespace
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|correctArtifactId
init|=
name|projectId
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|correctVersion
init|=
name|projectVersion
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|correctGroupId
operator|||
operator|!
name|correctArtifactId
operator|||
operator|!
name|correctVersion
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Incorrect POM coordinates in '"
operator|+
name|file
operator|+
literal|"':"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|correctGroupId
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\nIncorrect group ID: "
argument_list|)
operator|.
name|append
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|correctArtifactId
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\nIncorrect artifact ID: "
argument_list|)
operator|.
name|append
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|correctVersion
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\nIncorrect version: "
argument_list|)
operator|.
name|append
argument_list|(
name|model
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RepositoryStorageMetadataInvalidException
argument_list|(
literal|"mislocated-pom"
argument_list|,
name|message
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setCiManagement
argument_list|(
name|convertCiManagement
argument_list|(
name|model
operator|.
name|getCiManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setDescription
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setIssueManagement
argument_list|(
name|convertIssueManagement
argument_list|(
name|model
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLicenses
argument_list|(
name|convertLicenses
argument_list|(
name|model
operator|.
name|getLicenses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setMailingLists
argument_list|(
name|convertMailingLists
argument_list|(
name|model
operator|.
name|getMailingLists
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setDependencies
argument_list|(
name|convertDependencies
argument_list|(
name|model
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setName
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setOrganization
argument_list|(
name|convertOrganization
argument_list|(
name|model
operator|.
name|getOrganization
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setScm
argument_list|(
name|convertScm
argument_list|(
name|model
operator|.
name|getScm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUrl
argument_list|(
name|model
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|MavenProjectFacet
name|facet
init|=
operator|new
name|MavenProjectFacet
argument_list|()
decl_stmt|;
name|facet
operator|.
name|setGroupId
argument_list|(
name|model
operator|.
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|?
name|model
operator|.
name|getGroupId
argument_list|()
else|:
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|facet
operator|.
name|setArtifactId
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|facet
operator|.
name|setPackaging
argument_list|(
name|model
operator|.
name|getPackaging
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MavenProjectParent
name|parent
init|=
operator|new
name|MavenProjectParent
argument_list|()
decl_stmt|;
name|parent
operator|.
name|setGroupId
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setArtifactId
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setVersion
argument_list|(
name|model
operator|.
name|getParent
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|facet
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryStorageRuntimeException
argument_list|(
literal|"repo-admin"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setWagonFactory
parameter_list|(
name|WagonFactory
name|wagonFactory
parameter_list|)
block|{
name|this
operator|.
name|wagonFactory
operator|=
name|wagonFactory
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
argument_list|>
name|convertDependencies
parameter_list|(
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|dependencies
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
name|newDependency
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
argument_list|()
decl_stmt|;
name|newDependency
operator|.
name|setArtifactId
argument_list|(
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setClassifier
argument_list|(
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setGroupId
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setOptional
argument_list|(
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setScope
argument_list|(
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setSystemPath
argument_list|(
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setType
argument_list|(
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|newDependency
operator|.
name|setVersion
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|newDependency
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
name|convertScm
parameter_list|(
name|Scm
name|scm
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
name|newScm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|newScm
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
argument_list|()
expr_stmt|;
name|newScm
operator|.
name|setConnection
argument_list|(
name|scm
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|newScm
operator|.
name|setDeveloperConnection
argument_list|(
name|scm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
name|newScm
operator|.
name|setUrl
argument_list|(
name|scm
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newScm
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
name|convertOrganization
parameter_list|(
name|Organization
name|organization
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
name|org
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|organization
operator|!=
literal|null
condition|)
block|{
name|org
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
argument_list|()
expr_stmt|;
name|org
operator|.
name|setName
argument_list|(
name|organization
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|setUrl
argument_list|(
name|organization
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|org
return|;
block|}
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
argument_list|>
name|convertLicenses
parameter_list|(
name|List
argument_list|<
name|License
argument_list|>
name|licenses
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|licenses
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
name|newLicense
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
argument_list|()
decl_stmt|;
name|newLicense
operator|.
name|setName
argument_list|(
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newLicense
operator|.
name|setUrl
argument_list|(
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|newLicense
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
argument_list|>
name|convertMailingLists
parameter_list|(
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|mailingLists
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
name|newMailingList
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
argument_list|()
decl_stmt|;
name|newMailingList
operator|.
name|setName
argument_list|(
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newMailingList
operator|.
name|setMainArchiveUrl
argument_list|(
name|mailingList
operator|.
name|getArchive
argument_list|()
argument_list|)
expr_stmt|;
name|newMailingList
operator|.
name|setPostAddress
argument_list|(
name|mailingList
operator|.
name|getPost
argument_list|()
argument_list|)
expr_stmt|;
name|newMailingList
operator|.
name|setSubscribeAddress
argument_list|(
name|mailingList
operator|.
name|getSubscribe
argument_list|()
argument_list|)
expr_stmt|;
name|newMailingList
operator|.
name|setUnsubscribeAddress
argument_list|(
name|mailingList
operator|.
name|getUnsubscribe
argument_list|()
argument_list|)
expr_stmt|;
name|newMailingList
operator|.
name|setOtherArchives
argument_list|(
name|mailingList
operator|.
name|getOtherArchives
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|newMailingList
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
name|convertIssueManagement
parameter_list|(
name|IssueManagement
name|issueManagement
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
name|im
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|issueManagement
operator|!=
literal|null
condition|)
block|{
name|im
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
argument_list|()
expr_stmt|;
name|im
operator|.
name|setSystem
argument_list|(
name|issueManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|setUrl
argument_list|(
name|issueManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|im
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
name|convertCiManagement
parameter_list|(
name|CiManagement
name|ciManagement
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
name|ci
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ciManagement
operator|!=
literal|null
condition|)
block|{
name|ci
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
argument_list|()
expr_stmt|;
name|ci
operator|.
name|setSystem
argument_list|(
name|ciManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUrl
argument_list|(
name|ciManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ci
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|listRootNamespaces
parameter_list|(
name|String
name|repoId
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
name|File
name|dir
init|=
name|getRepositoryBasedir
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
return|return
name|getSortedFiles
argument_list|(
name|dir
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getSortedFiles
parameter_list|(
name|File
name|dir
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fileNames
decl_stmt|;
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|list
argument_list|(
operator|new
name|DirectoryFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|fileNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fileNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileNames
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|fileNames
return|;
block|}
specifier|private
name|File
name|getRepositoryBasedir
parameter_list|(
name|String
name|repoId
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
try|try
block|{
name|ManagedRepository
name|repositoryConfiguration
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|repositoryConfiguration
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryStorageRuntimeException
argument_list|(
literal|"repo-admin"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|listNamespaces
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
name|File
name|dir
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|getRepositoryBasedir
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
comment|// scan all the directories which are potential namespaces. Any directories known to be projects are excluded
name|List
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|DirectoryFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|isProject
argument_list|(
name|file
argument_list|,
name|filter
argument_list|)
condition|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
return|return
name|namespaces
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|listProjects
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
name|File
name|dir
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|getRepositoryBasedir
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
comment|// scan all directories in the namespace, and only include those that are known to be projects
name|List
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|DirectoryFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|isProject
argument_list|(
name|file
argument_list|,
name|filter
argument_list|)
condition|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|projects
argument_list|)
expr_stmt|;
return|return
name|projects
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|listProjectVersions
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
name|File
name|dir
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|getRepositoryBasedir
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
comment|// all directories in a project directory can be considered a version
return|return
name|getSortedFiles
argument_list|(
name|dir
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|readArtifactsMetadata
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
name|File
name|dir
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|getRepositoryBasedir
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
decl_stmt|;
comment|// all files that are not metadata and not a checksum / signature are considered artifacts
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|ArtifactDirectoryFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|ArtifactMetadata
name|metadata
init|=
name|getArtifactFromFile
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|artifacts
return|;
block|}
specifier|public
name|ArtifactMetadata
name|readArtifactMetadataFromPath
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryStorageRuntimeException
block|{
name|ArtifactMetadata
name|metadata
init|=
name|pathTranslator
operator|.
name|getArtifactForPath
argument_list|(
name|repoId
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|populateArtifactMetadataFromFile
argument_list|(
name|metadata
argument_list|,
operator|new
name|File
argument_list|(
name|getRepositoryBasedir
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
specifier|private
name|ArtifactMetadata
name|getArtifactFromFile
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|ArtifactMetadata
name|metadata
init|=
name|pathTranslator
operator|.
name|getArtifactFromId
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|populateArtifactMetadataFromFile
argument_list|(
name|metadata
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
specifier|private
specifier|static
name|void
name|populateArtifactMetadataFromFile
parameter_list|(
name|ArtifactMetadata
name|metadata
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|metadata
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setFileLastModified
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|ChecksummedFile
name|checksummedFile
init|=
operator|new
name|ChecksummedFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|metadata
operator|.
name|setMd5
argument_list|(
name|checksummedFile
operator|.
name|calculateChecksum
argument_list|(
name|ChecksumAlgorithm
operator|.
name|MD5
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to checksum file "
operator|+
name|file
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|metadata
operator|.
name|setSha1
argument_list|(
name|checksummedFile
operator|.
name|calculateChecksum
argument_list|(
name|ChecksumAlgorithm
operator|.
name|SHA1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to checksum file "
operator|+
name|file
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|setSize
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isProject
parameter_list|(
name|File
name|dir
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
comment|// scan directories for a valid project version subdirectory, meaning this must be a project directory
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|DirectoryFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|isProjectVersion
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// if a metadata file is present, check if this is the "artifactId" directory, marking it as a project
name|MavenRepositoryMetadata
name|metadata
init|=
name|readMetadata
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isProjectVersion
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
specifier|final
name|String
name|artifactId
init|=
name|dir
operator|.
name|getParentFile
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|projectVersion
init|=
name|dir
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// check if there is a POM artifact file to ensure it is a version directory
name|File
index|[]
name|files
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|projectVersion
argument_list|)
condition|)
block|{
name|files
operator|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|artifactId
operator|+
literal|"-"
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
condition|)
block|{
name|String
name|v
init|=
name|name
operator|.
name|substring
argument_list|(
name|artifactId
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
decl_stmt|;
name|v
operator|=
name|VersionUtil
operator|.
name|getBaseVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|pomFile
init|=
name|artifactId
operator|+
literal|"-"
operator|+
name|projectVersion
operator|+
literal|".pom"
decl_stmt|;
name|files
operator|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|pomFile
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// if a metadata file is present, check if this is the "version" directory, marking it as a project version
name|MavenRepositoryMetadata
name|metadata
init|=
name|readMetadata
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
operator|&&
name|projectVersion
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|MavenRepositoryMetadata
name|readMetadata
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|MavenRepositoryMetadata
name|metadata
init|=
literal|null
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|METADATA_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|metadata
operator|=
name|MavenRepositoryMetadataReader
operator|.
name|read
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLException
name|e
parameter_list|)
block|{
comment|// ignore missing or invalid metadata
block|}
block|}
return|return
name|metadata
return|;
block|}
specifier|private
specifier|static
class|class
name|DirectoryFilter
implements|implements
name|FilenameFilter
block|{
specifier|private
specifier|final
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
decl_stmt|;
specifier|public
name|DirectoryFilter
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|accept
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
class|class
name|ArtifactDirectoryFilter
implements|implements
name|FilenameFilter
block|{
specifier|private
specifier|final
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
decl_stmt|;
specifier|public
name|ArtifactDirectoryFilter
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// TODO compare to logic in maven-repository-layer
if|if
condition|(
operator|!
name|filter
operator|.
name|accept
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".md5"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".sha1"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".asc"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|METADATA_FILENAME
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

