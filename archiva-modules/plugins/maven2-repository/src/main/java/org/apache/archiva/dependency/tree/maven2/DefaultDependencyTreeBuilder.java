begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|tree
operator|.
name|maven2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryPathTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|maven2
operator|.
name|RepositoryModelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataRetrievalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ResolutionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|AndArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ExcludesArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|ArtifactVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|DefaultArtifactVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|InvalidVersionSpecificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|ManagedVersionMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DependencyManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|DefaultModelBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuildingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|resolution
operator|.
name|UnresolvableModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeResolutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|filter
operator|.
name|AncestorOrSelfDependencyNodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|filter
operator|.
name|DependencyNodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|filter
operator|.
name|StateDependencyNodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|BuildingDependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|CollectingDependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|DependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|FilteringDependencyNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_comment
comment|/**  * Default implementation of<code>DependencyTreeBuilder</code>. Customized wrapper for maven-dependency-tree to use  * maven-model-builder instead of maven-project. Note that the role must differ to avoid conflicting with the  * maven-shared implementation.  *  * @plexus.component role="org.apache.archiva.dependency.tree.maven2.DependencyTreeBuilder" role-hint="maven2"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDependencyTreeBuilder
extends|extends
name|AbstractLogEnabled
implements|implements
name|DependencyTreeBuilder
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactCollector
name|collector
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ModelBuilder
name|builder
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MetadataResolver
name|metadataResolver
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="maven2"      */
specifier|private
name|RepositoryPathTranslator
name|pathTranslator
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|public
name|void
name|buildDependencyTree
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositoryIds
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|DependencyNodeVisitor
name|nodeVisitor
parameter_list|)
throws|throws
name|DependencyTreeBuilderException
block|{
name|DependencyTreeResolutionListener
name|listener
init|=
operator|new
name|DependencyTreeResolutionListener
argument_list|(
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|Artifact
name|projectArtifact
init|=
name|factory
operator|.
name|createProjectArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|File
name|basedir
init|=
name|findArtifactInRepositories
argument_list|(
name|repositoryIds
argument_list|,
name|projectArtifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
comment|// metadata could not be resolved
return|return;
block|}
try|try
block|{
name|Model
name|model
init|=
name|buildProject
argument_list|(
operator|new
name|RepositoryModelResolver
argument_list|(
name|basedir
argument_list|,
name|pathTranslator
argument_list|)
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|Map
name|managedVersions
init|=
name|createManagedVersionMap
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Artifact
argument_list|>
name|dependencyArtifacts
init|=
name|createArtifacts
argument_list|(
name|model
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ArtifactMetadataSource
name|metadataSource
init|=
operator|new
name|MetadataArtifactMetadataSource
argument_list|(
name|repositoryIds
argument_list|)
decl_stmt|;
comment|// Note that we don't permit going to external repositories. We don't need to pass in a local and remote
comment|// since our metadata source has control over them
name|collector
operator|.
name|collect
argument_list|(
name|dependencyArtifacts
argument_list|,
name|projectArtifact
argument_list|,
name|managedVersions
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metadataSource
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyNode
name|rootNode
init|=
name|listener
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
comment|// TODO: remove the need for this when the serializer can calculate last nodes from visitor calls only
name|DependencyNodeVisitor
name|visitor
init|=
operator|new
name|BuildingDependencyNodeVisitor
argument_list|(
name|nodeVisitor
argument_list|)
decl_stmt|;
name|CollectingDependencyNodeVisitor
name|collectingVisitor
init|=
operator|new
name|CollectingDependencyNodeVisitor
argument_list|()
decl_stmt|;
name|DependencyNodeVisitor
name|firstPassVisitor
init|=
operator|new
name|FilteringDependencyNodeVisitor
argument_list|(
name|collectingVisitor
argument_list|,
name|StateDependencyNodeFilter
operator|.
name|INCLUDED
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|accept
argument_list|(
name|firstPassVisitor
argument_list|)
expr_stmt|;
name|DependencyNodeFilter
name|secondPassFilter
init|=
operator|new
name|AncestorOrSelfDependencyNodeFilter
argument_list|(
name|collectingVisitor
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|visitor
operator|=
operator|new
name|FilteringDependencyNodeVisitor
argument_list|(
name|visitor
argument_list|,
name|secondPassFilter
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DependencyTreeBuilderException
argument_list|(
literal|"Cannot build project dependency tree "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidVersionSpecificationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DependencyTreeBuilderException
argument_list|(
literal|"Invalid dependency version for artifact "
operator|+
name|projectArtifact
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ModelBuildingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DependencyTreeBuilderException
argument_list|(
literal|"Cannot build project dependency tree "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnresolvableModelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DependencyTreeBuilderException
argument_list|(
literal|"Cannot build project dependency tree "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|File
name|findArtifactInRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositoryIds
parameter_list|,
name|Artifact
name|projectArtifact
parameter_list|)
block|{
for|for
control|(
name|String
name|repoId
range|:
name|repositoryIds
control|)
block|{
name|ManagedRepositoryConfiguration
name|repositoryConfiguration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
name|repositoryConfiguration
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|repoDir
argument_list|,
name|projectArtifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|projectArtifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|projectArtifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|projectArtifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|projectArtifact
operator|.
name|getVersion
argument_list|()
operator|+
literal|".pom"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|repoDir
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Model
name|buildProject
parameter_list|(
name|RepositoryModelResolver
name|modelResolver
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|ModelBuildingException
throws|,
name|UnresolvableModelException
block|{
name|ModelBuildingRequest
name|req
init|=
operator|new
name|DefaultModelBuildingRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setProcessPlugins
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|req
operator|.
name|setModelSource
argument_list|(
name|modelResolver
operator|.
name|resolveModel
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setModelResolver
argument_list|(
name|modelResolver
argument_list|)
expr_stmt|;
name|req
operator|.
name|setValidationLevel
argument_list|(
name|ModelBuildingRequest
operator|.
name|VALIDATION_LEVEL_MINIMAL
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|(
name|req
argument_list|)
operator|.
name|getEffectiveModel
argument_list|()
return|;
block|}
comment|// from maven-project to avoid the dependency on it
specifier|private
name|Set
argument_list|<
name|Artifact
argument_list|>
name|createArtifacts
parameter_list|(
name|Model
name|model
parameter_list|,
name|ArtifactFilter
name|dependencyFilter
parameter_list|)
throws|throws
name|InvalidVersionSpecificationException
block|{
name|Collection
argument_list|<
name|Dependency
argument_list|>
name|dependencies
init|=
name|model
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Artifact
argument_list|>
name|projectArtifacts
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|(
name|dependencies
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|dependencies
control|)
block|{
name|String
name|scope
init|=
name|dependency
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|scope
argument_list|)
condition|)
block|{
name|scope
operator|=
name|Artifact
operator|.
name|SCOPE_COMPILE
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
name|VersionRange
name|versionRange
init|=
name|VersionRange
operator|.
name|createFromVersionSpec
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|factory
operator|.
name|createDependencyArtifact
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|versionRange
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|scope
argument_list|,
literal|null
argument_list|,
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Artifact
operator|.
name|SCOPE_SYSTEM
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArtifactFilter
name|artifactFilter
init|=
name|dependencyFilter
decl_stmt|;
comment|// MNG-3769: It would be nice to be able to process relocations here,
comment|// so we could have this filtering step apply to post-relocated dependencies.
comment|// HOWEVER, this would require a much more invasive POM resolution process
comment|// in order to look for relocations, which would make the early steps in
comment|// a Maven build way too heavy.
if|if
condition|(
name|artifact
operator|!=
literal|null
operator|&&
operator|(
name|artifactFilter
operator|==
literal|null
operator|||
name|artifactFilter
operator|.
name|include
argument_list|(
name|artifact
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|dependency
operator|.
name|getExclusions
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dependency
operator|.
name|getExclusions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exclusions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|dependency
operator|.
name|getExclusions
argument_list|()
control|)
block|{
name|Exclusion
name|e
init|=
operator|(
name|Exclusion
operator|)
name|o
decl_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|e
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArtifactFilter
name|newFilter
init|=
operator|new
name|ExcludesArtifactFilter
argument_list|(
name|exclusions
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactFilter
operator|!=
literal|null
condition|)
block|{
name|AndArtifactFilter
name|filter
init|=
operator|new
name|AndArtifactFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|artifactFilter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
name|artifactFilter
operator|=
name|filter
expr_stmt|;
block|}
else|else
block|{
name|artifactFilter
operator|=
name|newFilter
expr_stmt|;
block|}
block|}
name|artifact
operator|.
name|setDependencyFilter
argument_list|(
name|artifactFilter
argument_list|)
expr_stmt|;
name|projectArtifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|projectArtifacts
return|;
block|}
comment|// from maven-project to avoid the dependency on it
specifier|private
name|Map
name|createManagedVersionMap
parameter_list|(
name|Model
name|model
parameter_list|)
throws|throws
name|InvalidVersionSpecificationException
block|{
name|DependencyManagement
name|dependencyManagement
init|=
name|model
operator|.
name|getDependencyManagement
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Artifact
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Dependency
argument_list|>
name|deps
decl_stmt|;
if|if
condition|(
operator|(
name|dependencyManagement
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|deps
operator|=
name|dependencyManagement
operator|.
name|getDependencies
argument_list|()
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|deps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|map
operator|=
operator|new
name|ManagedVersionMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|dependencyManagement
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|VersionRange
name|versionRange
init|=
name|VersionRange
operator|.
name|createFromVersionSpec
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|factory
operator|.
name|createDependencyArtifact
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|versionRange
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|,
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"  "
operator|+
name|artifact
argument_list|)
expr_stmt|;
block|}
comment|// If the dependencyManagement section listed exclusions,
comment|// add them to the managed artifacts here so that transitive
comment|// dependencies will be excluded if necessary.
if|if
condition|(
operator|(
literal|null
operator|!=
name|dependency
operator|.
name|getExclusions
argument_list|()
operator|)
operator|&&
operator|!
name|dependency
operator|.
name|getExclusions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exclusions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exclusion
name|exclusion
range|:
name|dependency
operator|.
name|getExclusions
argument_list|()
control|)
block|{
name|exclusions
operator|.
name|add
argument_list|(
name|exclusion
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|exclusion
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ExcludesArtifactFilter
name|eaf
init|=
operator|new
name|ExcludesArtifactFilter
argument_list|(
name|exclusions
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|setDependencyFilter
argument_list|(
name|eaf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|artifact
operator|.
name|setDependencyFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|dependency
operator|.
name|getManagementKey
argument_list|()
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|map
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
class|class
name|MetadataArtifactMetadataSource
implements|implements
name|ArtifactMetadataSource
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|repositoryIds
decl_stmt|;
specifier|public
name|MetadataArtifactMetadataSource
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositoryIds
parameter_list|)
block|{
name|this
operator|.
name|repositoryIds
operator|=
name|repositoryIds
expr_stmt|;
block|}
comment|// modified version from MavenMetadataSource to work with the simpler environment
specifier|public
name|ResolutionGroup
name|retrieve
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|,
name|List
name|remoteRepositories
parameter_list|)
throws|throws
name|ArtifactMetadataRetrievalException
block|{
comment|// TODO: we removed relocation support here. This is something that might need to be generically handled
comment|//       throughout this module
name|Artifact
name|pomArtifact
init|=
name|factory
operator|.
name|createProjectArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|basedir
init|=
name|findArtifactInRepositories
argument_list|(
name|repositoryIds
argument_list|,
name|pomArtifact
argument_list|)
decl_stmt|;
name|Model
name|project
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|Artifact
operator|.
name|SCOPE_SYSTEM
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|&&
name|basedir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|project
operator|=
name|buildProject
argument_list|(
operator|new
name|RepositoryModelResolver
argument_list|(
name|basedir
argument_list|,
name|pathTranslator
argument_list|)
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ModelBuildingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactMetadataRetrievalException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|artifact
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnresolvableModelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactMetadataRetrievalException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|artifact
argument_list|)
throw|;
block|}
block|}
name|ResolutionGroup
name|result
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
comment|// TODO: we could record this so that it is displayed in the dependency tree as (...) or similar
comment|// if the project is null, we encountered an invalid model (read: m1 POM)
comment|// we'll just return an empty resolution group.
comment|// or used the inherited scope (should that be passed to the buildFromRepository method above?)
name|result
operator|=
operator|new
name|ResolutionGroup
argument_list|(
name|pomArtifact
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
name|artifacts
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|artifact
operator|.
name|getArtifactHandler
argument_list|()
operator|.
name|isIncludesDependencies
argument_list|()
condition|)
block|{
try|try
block|{
name|artifacts
operator|=
name|createArtifacts
argument_list|(
name|project
argument_list|,
name|artifact
operator|.
name|getDependencyFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidVersionSpecificationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactMetadataRetrievalException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|artifact
argument_list|)
throw|;
block|}
block|}
name|result
operator|=
operator|new
name|ResolutionGroup
argument_list|(
name|pomArtifact
argument_list|,
name|artifacts
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|List
name|retrieveAvailableVersions
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|,
name|List
name|remoteRepositories
parameter_list|)
throws|throws
name|ArtifactMetadataRetrievalException
block|{
try|try
block|{
name|Set
argument_list|<
name|ArtifactVersion
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|ArtifactVersion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repoId
range|:
name|repositoryIds
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|projectVersions
init|=
name|metadataResolver
operator|.
name|getProjectVersions
argument_list|(
name|repoId
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|version
range|:
name|projectVersions
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
operator|new
name|DefaultArtifactVersion
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|ArtifactVersion
argument_list|>
argument_list|(
name|versions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetadataResolverException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArtifactMetadataRetrievalException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|artifact
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

