begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|tree
operator|.
name|maven2
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|managed
operator|.
name|ManagedRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|networkproxy
operator|.
name|NetworkProxyAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|proxyconnector
operator|.
name|ProxyConnectorAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|plexusbridge
operator|.
name|PlexusSisuBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryPathTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|maven2
operator|.
name|RepositoryModelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|common
operator|.
name|WagonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|RepositoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|DependencyManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|DefaultModelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|DefaultModelBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuildingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|building
operator|.
name|ModelBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|resolution
operator|.
name|UnresolvableModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|DefaultDependencyResolutionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|DefaultProjectBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|DependencyResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|DependencyResolutionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|internal
operator|.
name|DefaultArtifactDescriptorReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|internal
operator|.
name|DefaultVersionRangeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|internal
operator|.
name|DefaultVersionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|internal
operator|.
name|MavenRepositorySystemSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|RepositorySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|RepositorySystemSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|RequestTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|artifact
operator|.
name|ArtifactType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|artifact
operator|.
name|ArtifactTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|collection
operator|.
name|CollectRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|collection
operator|.
name|CollectResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|collection
operator|.
name|DependencyCollectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|connector
operator|.
name|file
operator|.
name|FileRepositoryConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|DependencyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|DependencyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|impl
operator|.
name|ArtifactDescriptorReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|impl
operator|.
name|VersionRangeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|impl
operator|.
name|VersionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|impl
operator|.
name|internal
operator|.
name|DefaultServiceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|impl
operator|.
name|internal
operator|.
name|SimpleLocalRepositoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|repository
operator|.
name|LocalRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|resolution
operator|.
name|DependencyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|spi
operator|.
name|connector
operator|.
name|ArtifactDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|spi
operator|.
name|connector
operator|.
name|ArtifactUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|spi
operator|.
name|connector
operator|.
name|MetadataDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|spi
operator|.
name|connector
operator|.
name|MetadataUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|spi
operator|.
name|connector
operator|.
name|RepositoryConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|spi
operator|.
name|connector
operator|.
name|RepositoryConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|transfer
operator|.
name|NoRepositoryConnectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|DefaultRepositorySystemSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|DefaultRequestTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|artifact
operator|.
name|ArtifacIdUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|artifact
operator|.
name|JavaScopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|version
operator|.
name|VersionConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"dependencyTreeBuilder#maven3"
argument_list|)
specifier|public
class|class
name|Maven3DependencyTreeBuilder
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|PlexusSisuBridge
name|plexusSisuBridge
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
name|value
operator|=
literal|"repositoryPathTranslator#maven2"
argument_list|)
specifier|private
name|RepositoryPathTranslator
name|pathTranslator
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|WagonFactory
name|wagonFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ManagedRepositoryAdmin
name|managedRepositoryAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ProxyConnectorAdmin
name|proxyConnectorAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|NetworkProxyAdmin
name|networkProxyAdmin
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
decl_stmt|;
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
specifier|private
name|ModelBuilder
name|builder
decl_stmt|;
specifier|private
name|RepositorySystem
name|repoSystem
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|PlexusSisuBridgeException
block|{
name|factory
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|ArtifactFactory
operator|.
name|class
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|repoSystem
operator|=
name|plexusSisuBridge
operator|.
name|lookup
argument_list|(
name|RepositorySystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|DefaultModelBuilderFactory
name|defaultModelBuilderFactory
init|=
operator|new
name|DefaultModelBuilderFactory
argument_list|()
decl_stmt|;
name|builder
operator|=
name|defaultModelBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DependencyResolutionResult
name|buildDependencyTree
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositoryIds
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|DependencyVisitor
name|dependencyVisitor
parameter_list|)
throws|throws
name|Exception
block|{
name|Artifact
name|projectArtifact
init|=
name|factory
operator|.
name|createProjectArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|ManagedRepository
name|repository
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repository
operator|=
name|findArtifactInRepositories
argument_list|(
name|repositoryIds
argument_list|,
name|projectArtifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
comment|// FIXME better exception
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot build project dependency tree "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
comment|// metadata could not be resolved
return|return
operator|new
name|DefaultDependencyResolutionResult
argument_list|()
return|;
block|}
comment|// MRM-1411
comment|// TODO: this is a workaround for a lack of proxy capability in the resolvers - replace when it can all be
comment|//       handled there. It doesn't cache anything locally!
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|remoteRepositories
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRepository
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
name|networkProxies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NetworkProxy
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|>
name|proxyConnectorsMap
init|=
name|proxyConnectorAdmin
operator|.
name|getProxyConnectorAsMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|proxyConnectors
init|=
name|proxyConnectorsMap
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyConnectors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProxyConnector
name|proxyConnector
range|:
name|proxyConnectors
control|)
block|{
name|remoteRepositories
operator|.
name|add
argument_list|(
name|remoteRepositoryAdmin
operator|.
name|getRemoteRepository
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NetworkProxy
name|networkProxyConfig
init|=
name|networkProxyAdmin
operator|.
name|getNetworkProxy
argument_list|(
name|proxyConnector
operator|.
name|getProxyId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkProxyConfig
operator|!=
literal|null
condition|)
block|{
comment|// key/value: remote repo ID/proxy info
name|networkProxies
operator|.
name|put
argument_list|(
name|proxyConnector
operator|.
name|getTargetRepoId
argument_list|()
argument_list|,
name|networkProxyConfig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Model
name|model
init|=
name|buildProject
argument_list|(
operator|new
name|RepositoryModelResolver
argument_list|(
name|repository
argument_list|,
name|pathTranslator
argument_list|,
name|wagonFactory
argument_list|,
name|remoteRepositories
argument_list|,
name|networkProxies
argument_list|,
name|repository
argument_list|)
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|DefaultRepositorySystemSession
name|repositorySystemSession
init|=
operator|new
name|DefaultRepositorySystemSession
argument_list|()
decl_stmt|;
comment|// FIXME take care of relative path for getLocation
name|repositorySystemSession
operator|.
name|setLocalRepositoryManager
argument_list|(
operator|new
name|SimpleLocalRepositoryManager
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultProjectBuildingRequest
name|projectBuildingRequest
init|=
operator|new
name|DefaultProjectBuildingRequest
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProjectBuildingRequest
argument_list|(
name|projectBuildingRequest
argument_list|)
expr_stmt|;
name|projectBuildingRequest
operator|.
name|setRepositorySession
argument_list|(
name|repositorySystemSession
argument_list|)
expr_stmt|;
name|DefaultDependencyResolutionRequest
name|request
init|=
operator|new
name|DefaultDependencyResolutionRequest
argument_list|(
name|project
argument_list|,
name|projectBuildingRequest
operator|.
name|getRepositorySession
argument_list|()
argument_list|)
decl_stmt|;
comment|//DependencyFilter dependencyFilter
comment|//request.setResolutionFilter(  )
comment|//DependencyResolutionResult result = projectDependenciesResolver.resolve( request );
comment|//DependencyNode dependencyNode = buildDependencyNode( null, result.getDependencyGraph(), projectArtifact, null );
comment|/*DependencyNode dependencyNode = dependencyGraphBuilder.buildDependencyGraph( project, new ArtifactFilter()         {             public boolean include( Artifact artifact )             {                 return true;             }         } );*/
name|DependencyResolutionResult
name|resolutionResult
init|=
name|resolve
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"dependency graph build"
argument_list|)
expr_stmt|;
comment|// FIXME take care of relative path
name|test
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|dependencyVisitor
argument_list|)
expr_stmt|;
return|return
name|resolutionResult
return|;
block|}
specifier|private
name|DependencyResolutionResult
name|resolve
parameter_list|(
name|DefaultDependencyResolutionRequest
name|request
parameter_list|)
throws|throws
name|DependencyResolutionException
block|{
name|RequestTrace
name|trace
init|=
name|DefaultRequestTrace
operator|.
name|newChild
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|DefaultDependencyResolutionResult
name|result
init|=
operator|new
name|DefaultDependencyResolutionResult
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
name|request
operator|.
name|getMavenProject
argument_list|()
decl_stmt|;
name|RepositorySystemSession
name|session
init|=
name|request
operator|.
name|getRepositorySession
argument_list|()
decl_stmt|;
name|DependencyFilter
name|filter
init|=
name|request
operator|.
name|getResolutionFilter
argument_list|()
decl_stmt|;
name|ArtifactTypeRegistry
name|stereotypes
init|=
name|session
operator|.
name|getArtifactTypeRegistry
argument_list|()
decl_stmt|;
name|CollectRequest
name|collect
init|=
operator|new
name|CollectRequest
argument_list|()
decl_stmt|;
name|collect
operator|.
name|setRequestContext
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|collect
operator|.
name|setRepositories
argument_list|(
name|project
operator|.
name|getRemoteProjectRepositories
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
name|dependency
range|:
name|project
operator|.
name|getDependencies
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// guard against case where best-effort resolution for invalid models is requested
continue|continue;
block|}
name|collect
operator|.
name|addDependency
argument_list|(
name|RepositoryUtils
operator|.
name|toDependency
argument_list|(
name|dependency
argument_list|,
name|stereotypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
argument_list|>
name|dependencies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
name|dependency
range|:
name|project
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|String
name|classifier
init|=
name|dependency
operator|.
name|getClassifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|classifier
operator|==
literal|null
condition|)
block|{
name|ArtifactType
name|type
init|=
name|stereotypes
operator|.
name|get
argument_list|(
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|classifier
operator|=
name|type
operator|.
name|getClassifier
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|key
init|=
name|ArtifacIdUtils
operator|.
name|toVersionlessId
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|,
name|classifier
argument_list|)
decl_stmt|;
name|dependencies
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dependency
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Artifact
name|artifact
range|:
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
name|dependency
init|=
name|dependencies
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Exclusion
argument_list|>
name|exclusions
init|=
name|dependency
operator|!=
literal|null
condition|?
name|dependency
operator|.
name|getExclusions
argument_list|()
else|:
literal|null
decl_stmt|;
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|Dependency
name|dep
init|=
name|RepositoryUtils
operator|.
name|toDependency
argument_list|(
name|artifact
argument_list|,
name|exclusions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|JavaScopes
operator|.
name|SYSTEM
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getScope
argument_list|()
argument_list|)
operator|&&
name|dep
operator|.
name|getArtifact
argument_list|()
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// enable re-resolution
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|artifact
operator|.
name|Artifact
name|art
init|=
name|dep
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|art
operator|=
name|art
operator|.
name|setFile
argument_list|(
literal|null
argument_list|)
operator|.
name|setVersion
argument_list|(
name|art
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|=
name|dep
operator|.
name|setArtifact
argument_list|(
name|art
argument_list|)
expr_stmt|;
block|}
name|collect
operator|.
name|addDependency
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|DependencyManagement
name|depMngt
init|=
name|project
operator|.
name|getDependencyManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|depMngt
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
name|dependency
range|:
name|depMngt
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|collect
operator|.
name|addManagedDependency
argument_list|(
name|RepositoryUtils
operator|.
name|toDependency
argument_list|(
name|dependency
argument_list|,
name|stereotypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|collect
operator|.
name|setRoot
argument_list|(
operator|new
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|Dependency
argument_list|(
operator|new
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|artifact
operator|.
name|DefaultArtifact
argument_list|(
name|project
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
literal|"compile"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyRequest
name|depRequest
init|=
operator|new
name|DependencyRequest
argument_list|(
name|collect
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|depRequest
operator|.
name|setTrace
argument_list|(
name|trace
argument_list|)
expr_stmt|;
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|DependencyNode
name|node
decl_stmt|;
try|try
block|{
name|collect
operator|.
name|setTrace
argument_list|(
name|DefaultRequestTrace
operator|.
name|newChild
argument_list|(
name|trace
argument_list|,
name|depRequest
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
name|repoSystem
operator|.
name|collectDependencies
argument_list|(
name|session
argument_list|,
name|collect
argument_list|)
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|result
operator|.
name|setDependencyGraph
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DependencyCollectionException
name|e
parameter_list|)
block|{
name|result
operator|.
name|setDependencyGraph
argument_list|(
name|e
operator|.
name|getResult
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setCollectionErrors
argument_list|(
name|e
operator|.
name|getResult
argument_list|()
operator|.
name|getExceptions
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DependencyResolutionException
argument_list|(
name|result
argument_list|,
literal|"Could not resolve dependencies for project "
operator|+
name|project
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|depRequest
operator|.
name|setRoot
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|test
parameter_list|(
name|String
name|localRepoDir
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|DependencyVisitor
name|dependencyVisitor
parameter_list|)
block|{
name|RepositorySystem
name|system
init|=
name|newRepositorySystem
argument_list|()
decl_stmt|;
name|RepositorySystemSession
name|session
init|=
name|newRepositorySystemSession
argument_list|(
name|system
argument_list|,
name|localRepoDir
argument_list|)
decl_stmt|;
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|artifact
operator|.
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
argument_list|)
decl_stmt|;
comment|//RemoteRepository repo = Booter.newCentralRepository();
name|CollectRequest
name|collectRequest
init|=
operator|new
name|CollectRequest
argument_list|()
decl_stmt|;
name|collectRequest
operator|.
name|setRoot
argument_list|(
operator|new
name|Dependency
argument_list|(
name|artifact
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|//collectRequest.addRepository( repo );
try|try
block|{
name|CollectResult
name|collectResult
init|=
name|system
operator|.
name|collectDependencies
argument_list|(
name|session
argument_list|,
name|collectRequest
argument_list|)
decl_stmt|;
name|collectResult
operator|.
name|getRoot
argument_list|()
operator|.
name|accept
argument_list|(
name|dependencyVisitor
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DependencyCollectionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyFileRepositoryConnectorFactory
extends|extends
name|FileRepositoryConnectorFactory
block|{
specifier|public
name|MyFileRepositoryConnectorFactory
parameter_list|()
block|{
block|}
specifier|public
name|RepositoryConnector
name|newInstance
parameter_list|(
name|RepositorySystemSession
name|session
parameter_list|,
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|repository
operator|.
name|RemoteRepository
name|repository
parameter_list|)
throws|throws
name|NoRepositoryConnectorException
block|{
try|try
block|{
return|return
name|super
operator|.
name|newInstance
argument_list|(
name|session
argument_list|,
name|repository
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoRepositoryConnectorException
name|e
parameter_list|)
block|{
block|}
return|return
operator|new
name|RepositoryConnector
argument_list|()
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|void
name|get
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ArtifactDownload
argument_list|>
name|artifactDownloads
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|MetadataDownload
argument_list|>
name|metadataDownloads
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ArtifactUpload
argument_list|>
name|artifactUploads
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|MetadataUpload
argument_list|>
name|metadataUploads
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"put"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
specifier|public
specifier|static
name|RepositorySystem
name|newRepositorySystem
parameter_list|()
block|{
name|DefaultServiceLocator
name|locator
init|=
operator|new
name|DefaultServiceLocator
argument_list|()
decl_stmt|;
name|locator
operator|.
name|addService
argument_list|(
name|RepositoryConnectorFactory
operator|.
name|class
argument_list|,
name|MyFileRepositoryConnectorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// FileRepositoryConnectorFactory.class );
name|locator
operator|.
name|addService
argument_list|(
name|VersionResolver
operator|.
name|class
argument_list|,
name|DefaultVersionResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|locator
operator|.
name|addService
argument_list|(
name|VersionRangeResolver
operator|.
name|class
argument_list|,
name|DefaultVersionRangeResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|locator
operator|.
name|addService
argument_list|(
name|ArtifactDescriptorReader
operator|.
name|class
argument_list|,
name|DefaultArtifactDescriptorReader
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//locator.addService( RepositoryConnectorFactory.class, WagonRepositoryConnectorFactory.class );
comment|//locator.setServices( WagonProvider.class,  );
return|return
name|locator
operator|.
name|getService
argument_list|(
name|RepositorySystem
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RepositorySystemSession
name|newRepositorySystemSession
parameter_list|(
name|RepositorySystem
name|system
parameter_list|,
name|String
name|localRepoDir
parameter_list|)
block|{
name|MavenRepositorySystemSession
name|session
init|=
operator|new
name|MavenRepositorySystemSession
argument_list|()
decl_stmt|;
name|LocalRepository
name|localRepo
init|=
operator|new
name|LocalRepository
argument_list|(
name|localRepoDir
argument_list|)
decl_stmt|;
name|session
operator|.
name|setLocalRepositoryManager
argument_list|(
name|system
operator|.
name|newLocalRepositoryManager
argument_list|(
name|localRepo
argument_list|)
argument_list|)
expr_stmt|;
comment|//session.setTransferListener( new ConsoleTransferListener() );
comment|//session.setRepositoryListener( new ConsoleRepositoryListener() );
return|return
name|session
return|;
block|}
specifier|private
name|String
name|getVersionSelectedFromRange
parameter_list|(
name|VersionConstraint
name|constraint
parameter_list|)
block|{
if|if
condition|(
operator|(
name|constraint
operator|==
literal|null
operator|)
operator|||
operator|(
name|constraint
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|version
operator|.
name|VersionRange
name|range
range|:
name|constraint
operator|.
name|getRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Artifact
name|getDependencyArtifact
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|artifact
operator|.
name|Artifact
name|artifact
init|=
name|dep
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|createDependencyArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|artifact
operator|.
name|getExtension
argument_list|()
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|dep
operator|.
name|getScope
argument_list|()
argument_list|,
name|dep
operator|.
name|isOptional
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Model
name|buildProject
parameter_list|(
name|RepositoryModelResolver
name|modelResolver
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|ModelBuildingException
throws|,
name|UnresolvableModelException
block|{
name|DefaultModelBuildingRequest
name|req
init|=
operator|new
name|DefaultModelBuildingRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setProcessPlugins
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|req
operator|.
name|setModelSource
argument_list|(
name|modelResolver
operator|.
name|resolveModel
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setModelResolver
argument_list|(
name|modelResolver
argument_list|)
expr_stmt|;
name|req
operator|.
name|setValidationLevel
argument_list|(
name|ModelBuildingRequest
operator|.
name|VALIDATION_LEVEL_MINIMAL
argument_list|)
expr_stmt|;
comment|//MRM-1607. olamy this will resolve jdk profiles on the current running archiva jvm
name|req
operator|.
name|setSystemProperties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|(
name|req
argument_list|)
operator|.
name|getEffectiveModel
argument_list|()
return|;
block|}
specifier|private
name|ManagedRepository
name|findArtifactInRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositoryIds
parameter_list|,
name|Artifact
name|projectArtifact
parameter_list|)
throws|throws
name|RepositoryAdminException
block|{
for|for
control|(
name|String
name|repoId
range|:
name|repositoryIds
control|)
block|{
name|ManagedRepository
name|managedRepository
init|=
name|managedRepositoryAdmin
operator|.
name|getManagedRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
name|managedRepository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|pathTranslator
operator|.
name|toFile
argument_list|(
name|repoDir
argument_list|,
name|projectArtifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|projectArtifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|projectArtifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|projectArtifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|projectArtifact
operator|.
name|getVersion
argument_list|()
operator|+
literal|".pom"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|managedRepository
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
class|class
name|DefaultDependencyResolutionResult
implements|implements
name|DependencyResolutionResult
block|{
specifier|private
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|DependencyNode
name|root
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<
name|Dependency
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Dependency
argument_list|>
name|resolvedDependencies
init|=
operator|new
name|ArrayList
argument_list|<
name|Dependency
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Dependency
argument_list|>
name|unresolvedDependencies
init|=
operator|new
name|ArrayList
argument_list|<
name|Dependency
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Exception
argument_list|>
name|collectionErrors
init|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Dependency
argument_list|,
name|List
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|resolutionErrors
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Dependency
argument_list|,
name|List
argument_list|<
name|Exception
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|DependencyNode
name|getDependencyGraph
parameter_list|()
block|{
return|return
name|root
return|;
block|}
specifier|public
name|void
name|setDependencyGraph
parameter_list|(
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|graph
operator|.
name|DependencyNode
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Dependency
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
return|;
block|}
specifier|public
name|List
argument_list|<
name|Dependency
argument_list|>
name|getResolvedDependencies
parameter_list|()
block|{
return|return
name|resolvedDependencies
return|;
block|}
specifier|public
name|void
name|addResolvedDependency
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|resolvedDependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Dependency
argument_list|>
name|getUnresolvedDependencies
parameter_list|()
block|{
return|return
name|unresolvedDependencies
return|;
block|}
specifier|public
name|List
argument_list|<
name|Exception
argument_list|>
name|getCollectionErrors
parameter_list|()
block|{
return|return
name|collectionErrors
return|;
block|}
specifier|public
name|void
name|setCollectionErrors
parameter_list|(
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
parameter_list|)
block|{
if|if
condition|(
name|exceptions
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|collectionErrors
operator|=
name|exceptions
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|collectionErrors
operator|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Exception
argument_list|>
name|getResolutionErrors
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
block|{
name|List
argument_list|<
name|Exception
argument_list|>
name|errors
init|=
name|resolutionErrors
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
return|return
operator|(
name|errors
operator|!=
literal|null
operator|)
condition|?
name|errors
else|:
name|Collections
operator|.
expr|<
name|Exception
operator|>
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|void
name|setResolutionErrors
parameter_list|(
name|Dependency
name|dependency
parameter_list|,
name|List
argument_list|<
name|Exception
argument_list|>
name|errors
parameter_list|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|unresolvedDependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|resolutionErrors
operator|.
name|put
argument_list|(
name|dependency
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

