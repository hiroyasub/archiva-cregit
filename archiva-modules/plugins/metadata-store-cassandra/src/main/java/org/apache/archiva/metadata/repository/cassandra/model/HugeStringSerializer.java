begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|astyanax
operator|.
name|serializers
operator|.
name|AbstractSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|astyanax
operator|.
name|serializers
operator|.
name|ComparatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cassandra
operator|.
name|db
operator|.
name|marshal
operator|.
name|UTF8Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_comment
comment|/**  * For Huge String we use a  compression  * @author Olivier Lamy  */
end_comment

begin_class
specifier|public
class|class
name|HugeStringSerializer
extends|extends
name|AbstractSerializer
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HugeStringSerializer
name|instance
init|=
operator|new
name|HugeStringSerializer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|HugeStringSerializer
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|toByteBuffer
parameter_list|(
name|String
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|compressWithDeflate
argument_list|(
name|StringUtils
operator|.
name|getBytesUtf8
argument_list|(
name|obj
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fail to compress column data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|fromByteBuffer
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
if|if
condition|(
name|byteBuffer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteBuffer
name|dup
init|=
name|byteBuffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|getFromDeflateBytes
argument_list|(
name|dup
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|str
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fail to decompress column data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getFromDeflateBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|byteArrayInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|InflaterInputStream
name|inflaterInputStream
init|=
operator|new
name|InflaterInputStream
argument_list|(
name|byteArrayInputStream
argument_list|)
decl_stmt|;
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|inflaterInputStream
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|compressWithDeflate
parameter_list|(
name|byte
index|[]
name|unCompress
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DeflaterOutputStream
name|out
init|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|buffer
argument_list|,
operator|new
name|Deflater
argument_list|(
name|Deflater
operator|.
name|BEST_COMPRESSION
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|unCompress
argument_list|)
expr_stmt|;
name|out
operator|.
name|finish
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|res
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|bais
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"IOException in compressStringWithDeflate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ComparatorType
name|getComparatorType
parameter_list|()
block|{
return|return
name|ComparatorType
operator|.
name|BYTESTYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|fromString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|instance
operator|.
name|fromString
argument_list|(
name|str
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
return|return
name|instance
operator|.
name|getString
argument_list|(
name|byteBuffer
argument_list|)
return|;
block|}
comment|/*     private static final String UTF_8 = "UTF-8";     private static final HugeStringSerializer instance = new HugeStringSerializer();     private static final Charset charset = Charset.forName(UTF_8);      public static HugeStringSerializer get() {         return instance;     }      @Override     public ByteBuffer toByteBuffer(String obj) {         if (obj == null) {             return null;         }         return ByteBuffer.wrap(obj.getBytes(charset));     }      @Override     public String fromByteBuffer(ByteBuffer byteBuffer) {         if (byteBuffer == null) {             return null;         }         final ByteBuffer dup = byteBuffer.duplicate();         return charset.decode(dup).toString();     }      @Override     public ComparatorType getComparatorType() {         return ComparatorType.UTF8TYPE;     }      @Override     public ByteBuffer fromString(String str) {         return UTF8Type.instance.fromString(str);     }      @Override     public String getString(ByteBuffer byteBuffer) {         return UTF8Type.instance.getString(byteBuffer);     }     */
block|}
end_class

end_unit

