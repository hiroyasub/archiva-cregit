begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|astyanax
operator|.
name|entitystore
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|beanlib
operator|.
name|provider
operator|.
name|replicator
operator|.
name|BeanReplicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|FacetedMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ArtifactMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|MetadataFacetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ProjectVersionMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 2.0.0  */
end_comment

begin_class
specifier|public
class|class
name|CassandraMetadataRepository
implements|implements
name|MetadataRepository
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
decl_stmt|;
specifier|private
name|CassandraEntityManagerFactory
name|cassandraEntityManagerFactory
decl_stmt|;
specifier|public
name|CassandraMetadataRepository
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
parameter_list|,
name|ArchivaConfiguration
name|configuration
parameter_list|,
name|CassandraEntityManagerFactory
name|cassandraEntityManagerFactory
parameter_list|)
block|{
name|this
operator|.
name|metadataFacetFactories
operator|=
name|metadataFacetFactories
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|cassandraEntityManagerFactory
operator|=
name|cassandraEntityManagerFactory
expr_stmt|;
block|}
specifier|public
name|EntityManager
argument_list|<
name|Repository
argument_list|,
name|String
argument_list|>
name|getRepositoryEntityManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|cassandraEntityManagerFactory
operator|.
name|getRepositoryEntityManager
argument_list|()
return|;
block|}
specifier|public
name|EntityManager
argument_list|<
name|Namespace
argument_list|,
name|String
argument_list|>
name|getNamespaceEntityManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|cassandraEntityManagerFactory
operator|.
name|getNamespaceEntityManager
argument_list|()
return|;
block|}
specifier|public
name|EntityManager
argument_list|<
name|Project
argument_list|,
name|String
argument_list|>
name|getProjectEntityManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|cassandraEntityManagerFactory
operator|.
name|getProjectEntityManager
argument_list|()
return|;
block|}
specifier|public
name|EntityManager
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|String
argument_list|>
name|getArtifactMetadataModelEntityManager
parameter_list|()
block|{
return|return
name|cassandraEntityManagerFactory
operator|.
name|getArtifactMetadataModelEntityManager
argument_list|()
return|;
block|}
specifier|public
name|EntityManager
argument_list|<
name|MetadataFacetModel
argument_list|,
name|String
argument_list|>
name|getMetadataFacetModelEntityManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|cassandraEntityManagerFactory
operator|.
name|getMetadataFacetModelEntityManager
argument_list|()
return|;
block|}
specifier|public
name|EntityManager
argument_list|<
name|ProjectVersionMetadataModel
argument_list|,
name|String
argument_list|>
name|getProjectVersionMetadataModelEntityManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|cassandraEntityManagerFactory
operator|.
name|getProjectVersionMetadataModelEntityManager
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Namespace
name|updateOrAddNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Repository
name|repository
init|=
name|this
operator|.
name|getRepositoryEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|Namespace
name|namespace
init|=
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|this
operator|.
name|getRepositoryEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|this
operator|.
name|getNamespaceEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
comment|// FIXME add a Namespace id builder
name|Namespace
name|namespace
init|=
name|getNamespaceEntityManager
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|getNamespaceEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
name|namespace
return|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Namespace
name|namespace
init|=
name|getNamespaceEntityManager
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|getNamespaceEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// remove data related to the repository
name|this
operator|.
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|artifactMetadataModels
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|Namespace
argument_list|>
argument_list|()
decl_stmt|;
name|getNamespaceEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|Namespace
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Namespace
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getNamespaceEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Project
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<
name|Project
argument_list|>
argument_list|()
decl_stmt|;
name|getProjectEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|Project
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getNamespace
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getProjectEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|projects
argument_list|)
expr_stmt|;
comment|// TODO  cleanup or not
comment|//final List<MetadataFacetModel> metadataFacetModels = new ArrayList<MetadataFacetModel>(  );
comment|//getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()
specifier|final
name|List
argument_list|<
name|ProjectVersionMetadataModel
argument_list|>
name|projectVersionMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectVersionMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ProjectVersionMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|projectVersionMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|projectVersionMetadataModels
operator|.
name|add
argument_list|(
name|projectVersionMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|projectVersionMetadataModels
argument_list|)
expr_stmt|;
name|Repository
name|repository
init|=
name|getRepositoryEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
name|getRepositoryEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"getRepositories"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Repository
argument_list|>
name|repositories
init|=
name|getRepositoryEntityManager
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositories
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|repoIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|repositories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Repository
name|repository
range|:
name|repositories
control|)
block|{
name|repoIds
operator|.
name|add
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"getRepositories found: {}"
argument_list|,
name|repoIds
argument_list|)
expr_stmt|;
return|return
name|repoIds
return|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
try|try
block|{
name|RootNamesSpaceVisitAll
name|rootNamesSpaceVisitAll
init|=
operator|new
name|RootNamesSpaceVisitAll
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|getNamespaceEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
name|rootNamesSpaceVisitAll
argument_list|)
expr_stmt|;
return|return
name|rootNamesSpaceVisitAll
operator|.
name|namespaces
return|;
comment|// using cql query with index
comment|/*             List<Namespace> namespacesList = getNamespaceEntityManager().find( "SELECT * from namespace where id<> null AND repositoryid = '" + repoId + "'" );              Set<String> namespaces = new HashSet<String>();              for (Namespace namespace : namespacesList)             {                 String name = namespace.getName();                 if ( StringUtils.isNotEmpty( name ) )                 {                     namespaces.add( StringUtils.substringBefore( name, "." ) );                 }             }              return namespaces;             */
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RootNamesSpaceVisitAll
implements|implements
name|Function
argument_list|<
name|Namespace
argument_list|,
name|Boolean
argument_list|>
block|{
specifier|private
name|String
name|repoId
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RootNamesSpaceVisitAll
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|repoId
expr_stmt|;
block|}
comment|// @Nullable add dependency ?
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Namespace
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|getRepository
argument_list|()
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|repoId
argument_list|,
name|namespace
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|namespace
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|name
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
try|try
block|{
specifier|final
name|FindNamesSpaceVisitAll
name|findNamesSpaceVisitAll
init|=
operator|new
name|FindNamesSpaceVisitAll
argument_list|(
name|repoId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
name|getNamespaceEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
name|findNamesSpaceVisitAll
argument_list|)
expr_stmt|;
return|return
name|findNamesSpaceVisitAll
operator|.
name|namespaces
return|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FindNamesSpaceVisitAll
implements|implements
name|Function
argument_list|<
name|Namespace
argument_list|,
name|Boolean
argument_list|>
block|{
specifier|private
name|String
name|repoId
decl_stmt|;
specifier|private
name|String
name|namespaceId
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|FindNamesSpaceVisitAll
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|repoId
expr_stmt|;
name|this
operator|.
name|namespaceId
operator|=
name|namespaceId
expr_stmt|;
block|}
comment|// @Nullable add dependency ?
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Namespace
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|getRepository
argument_list|()
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|repoId
argument_list|,
name|namespace
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|currentNamespace
init|=
name|namespace
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// we only return childs
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|currentNamespace
argument_list|,
name|namespaceId
argument_list|)
operator|&&
operator|(
name|StringUtils
operator|.
name|length
argument_list|(
name|currentNamespace
argument_list|)
operator|>
name|StringUtils
operator|.
name|length
argument_list|(
name|namespaceId
argument_list|)
operator|)
condition|)
block|{
comment|// store after namespaceId '.' but before next '.'
comment|// call org namespace org.apache.maven.shared -> stored apache
name|String
name|calledNamespace
init|=
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|namespaceId
argument_list|,
literal|"."
argument_list|)
condition|?
name|namespaceId
else|:
name|namespaceId
operator|+
literal|"."
decl_stmt|;
name|String
name|storedNamespace
init|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|currentNamespace
argument_list|,
name|calledNamespace
argument_list|)
decl_stmt|;
name|storedNamespace
operator|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|storedNamespace
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|storedNamespace
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"getNamespaces for repository '{}'"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
comment|//TypedQuery<Repository> typedQuery =
comment|//    entityManager.createQuery( "select n from Namespace n where n.repository_id=:id", Namespace.class );
comment|//List<Repository> namespaces = typedQuery.setParameter( "id", repoId ).getResultList();
name|Repository
name|repository
init|=
name|getRepositoryEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// FIXME find correct cql query
comment|//String query = "select * from namespace where repository.id = '" + repoId + "';";
comment|//List<Namespace> namespaces = getNamespaceEntityManager().find( query );
comment|//final Set<Namespace> namespaces = new HashSet<Namespace>();
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|getNamespaceEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|Namespace
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
comment|// @Nullable add dependency ?
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Namespace
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|getRepository
argument_list|()
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|repoId
argument_list|,
name|namespace
operator|.
name|getRepository
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*              repository.setNamespaces( new ArrayList<Namespace>( namespaces ) );             if ( repository == null || repository.getNamespaces().isEmpty() )             {                 return Collections.emptyList();             }              List<String> namespaceIds = new ArrayList<String>( repository.getNamespaces().size() );              for ( Namespace n : repository.getNamespaces() )             {                 namespaceIds.add( n.getName() );             }              logger.debug( "getNamespaces for repository '{}' found {}", repoId, namespaceIds.size() );              return namespaceIds;             */
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|namespaces
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataResolutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|ProjectMetadata
name|projectMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// project exists ? if yes return
name|String
name|projectKey
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withProjectId
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Project
name|project
init|=
name|getProjectEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|projectKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|namespaceKey
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Namespace
name|namespace
init|=
name|getNamespaceEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|namespaceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|project
operator|=
operator|new
name|Project
argument_list|(
name|projectKey
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|getProjectEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProject
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// cleanup ArtifactMetadataModel
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|namespaceId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|,
name|projectId
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|artifactMetadataModels
argument_list|)
expr_stmt|;
name|Namespace
name|namespace
init|=
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ProjectVersionMetadataModel
argument_list|>
name|projectVersionMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectVersionMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ProjectVersionMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|projectVersionMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositoryId
argument_list|,
name|projectVersionMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespaceId
argument_list|,
name|projectVersionMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|projectVersionMetadataModel
operator|.
name|getProjectId
argument_list|()
argument_list|)
condition|)
block|{
name|projectVersionMetadataModels
operator|.
name|add
argument_list|(
name|projectVersionMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|projectVersionMetadataModels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|projectVersionMetadataModels
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Project
name|project
init|=
name|getProjectEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeProject notfound"
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"removeProject {}"
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|getProjectEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ProjectVersionMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|projectVersionMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|projectVersionMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|namespace
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|projectVersionMetadataModel
operator|.
name|getProjectId
argument_list|()
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// FIXME use cql query
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|versions
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifactMeta
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|namespaceKey
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create the namespace if not exists
name|Namespace
name|namespace
init|=
name|getNamespaceEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|namespaceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
comment|// create the project if not exist
name|String
name|projectKey
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Project
name|project
init|=
name|getProjectEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|projectKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|project
operator|=
operator|new
name|Project
argument_list|(
name|projectKey
argument_list|,
name|projectId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|getProjectEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProject
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactMetadataModel
operator|==
literal|null
condition|)
block|{
name|artifactMetadataModel
operator|=
operator|new
name|ArtifactMetadataModel
argument_list|(
name|key
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|,
name|repositoryId
argument_list|,
name|namespaceId
argument_list|,
name|artifactMeta
operator|.
name|getProject
argument_list|()
argument_list|,
name|projectVersion
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|,
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|,
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|,
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|artifactMetadataModel
operator|.
name|setFileLastModified
argument_list|(
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setWhenGathered
argument_list|(
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setSize
argument_list|(
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setMd5
argument_list|(
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setSha1
argument_list|(
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectVersionMetadataModel
operator|==
literal|null
condition|)
block|{
name|projectVersionMetadataModel
operator|=
operator|new
name|ProjectVersionMetadataModel
argument_list|()
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setRowId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|projectVersionMetadataModel
argument_list|)
expr_stmt|;
block|}
comment|// now facets
name|updateFacets
argument_list|(
name|artifactMeta
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME use cql query
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|artifactMetadataModel
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|versions
return|;
block|}
comment|/**      * iterate over available facets to remove/add from the artifactMetadata      *      * @param facetedMetadata      * @param artifactMetadataModel only use for the key      */
specifier|private
name|void
name|updateFacets
parameter_list|(
specifier|final
name|FacetedMetadata
name|facetedMetadata
parameter_list|,
specifier|final
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|facetId
range|:
name|metadataFacetFactories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|facetedMetadata
operator|.
name|getFacet
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// clean first
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
name|ArtifactMetadataModel
name|tmp
init|=
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|facetId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|tmp
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|tmp
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|tmp
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|metadataFacetModels
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|metadataFacetModels
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|metadataFacet
operator|.
name|toProperties
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModelsToAdd
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|withArtifactMetadataModel
argument_list|(
name|artifactMetadataModel
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|facetId
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetadataFacetModel
name|metadataFacetModel
init|=
operator|new
name|MetadataFacetModel
argument_list|(
name|key
argument_list|,
name|artifactMetadataModel
argument_list|,
name|facetId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|metadataFacetModelsToAdd
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|metadataFacetModelsToAdd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|namespaceKey
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Namespace
name|namespace
init|=
name|getNamespaceEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|namespaceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Project
name|project
init|=
name|getProjectEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|project
operator|=
operator|new
name|Project
argument_list|(
name|key
argument_list|,
name|projectId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|getProjectEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
comment|// we don't test of repository and namespace really exist !
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectVersionMetadataModel
operator|==
literal|null
condition|)
block|{
name|projectVersionMetadataModel
operator|=
operator|new
name|BeanReplicator
argument_list|()
operator|.
name|replicateBean
argument_list|(
name|versionMetadata
argument_list|,
name|ProjectVersionMetadataModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setRowId
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setCiManagement
argument_list|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIssueManagement
argument_list|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setOrganization
argument_list|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setScm
argument_list|(
name|versionMetadata
operator|.
name|getScm
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setMailingLists
argument_list|(
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDependencies
argument_list|(
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setLicenses
argument_list|(
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|projectVersionMetadataModel
argument_list|)
expr_stmt|;
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setArtifactMetadataModelId
argument_list|(
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withId
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|withProject
argument_list|(
name|projectId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// facets etc...
name|updateFacets
argument_list|(
name|versionMetadata
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BooleanHolder
block|{
specifier|private
name|boolean
name|value
init|=
literal|false
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// FIXME use cql query !!
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|facetId
argument_list|)
condition|)
block|{
name|facets
operator|.
name|add
argument_list|(
name|metadataFacetModel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|facets
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
operator|!
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|getMetadataFacet
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// FIXME use cql query !!
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|facetId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|facets
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|facets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|facets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MetadataFacetModel
name|metadataFacetModel
range|:
name|facets
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getKey
argument_list|()
argument_list|,
name|metadataFacetModel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|metadataFacet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetadataFacetModel
name|metadataFacetModel
init|=
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetModel
operator|==
literal|null
condition|)
block|{
name|metadataFacetModel
operator|=
operator|new
name|MetadataFacetModel
argument_list|()
expr_stmt|;
block|}
comment|// we need to store the repositoryId
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setArtifactMetadataModel
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetadataFacetModel
name|metadataFacetModel
init|=
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetModel
operator|==
literal|null
condition|)
block|{
name|metadataFacetModel
operator|=
operator|new
name|MetadataFacetModel
argument_list|()
expr_stmt|;
comment|// we need to store the repositoryId
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setArtifactMetadataModel
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataFacetModel
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|put
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeMetadataFacets repositoryId: '{}', facetId: '{}'"
argument_list|,
name|repositoryId
argument_list|,
name|facetId
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME cql query
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|facetId
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"removeMetadataFacets repositoryId: '{}', facetId: '{}', toRemove: {}"
argument_list|,
name|repositoryId
argument_list|,
name|facetId
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeMetadataFacets repositoryId: '{}', facetId: '{}'"
argument_list|,
name|repositoryId
argument_list|,
name|facetId
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME cql query
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|facetId
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|metadataFacetModel
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"removeMetadataFacets repositoryId: '{}', facetId: '{}', toRemove: {}"
argument_list|,
name|repositoryId
argument_list|,
name|facetId
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|Date
name|startTime
parameter_list|,
specifier|final
name|Date
name|endTime
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME cql query
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
operator|&&
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
operator|!=
literal|null
operator|&&
name|artifactMetadataModel
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Date
name|when
init|=
name|artifactMetadataModel
operator|.
name|getWhenGathered
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|startTime
operator|!=
literal|null
condition|?
name|when
operator|.
name|getTime
argument_list|()
operator|>=
name|startTime
operator|.
name|getTime
argument_list|()
else|:
literal|true
operator|)
operator|&&
operator|(
name|endTime
operator|!=
literal|null
condition|?
name|when
operator|.
name|getTime
argument_list|()
operator|<=
name|endTime
operator|.
name|getTime
argument_list|()
else|:
literal|true
operator|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"getArtifactsByDateRange visitAll found: {}"
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|artifactMetadataModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactMetadataModel
name|model
range|:
name|artifactMetadataModels
control|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|BeanReplicator
argument_list|()
operator|.
name|replicateBean
argument_list|(
name|model
argument_list|,
name|ArtifactMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|populateFacets
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
block|}
comment|// FIXME facets ?
name|logger
operator|.
name|debug
argument_list|(
literal|"getArtifactsByDateRange repositoryId: {}, startTime: {}, endTime: {}, artifactMetadatas: {}"
argument_list|,
name|repositoryId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|artifactMetadatas
argument_list|)
expr_stmt|;
return|return
name|artifactMetadatas
return|;
block|}
specifier|protected
name|void
name|populateFacets
parameter_list|(
specifier|final
name|ArtifactMetadata
name|artifactMetadata
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactMetadataModel
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|metadataFacetModels
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|facetValuesPerFacet
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetadataFacetModel
name|model
range|:
name|metadataFacetModels
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
name|facetValuesPerFacet
operator|.
name|get
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|put
argument_list|(
name|model
operator|.
name|getKey
argument_list|()
argument_list|,
name|model
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|facetValuesPerFacet
operator|.
name|put
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|facetValuesPerFacet
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetadataFacetFactory
name|factory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|MetadataFacet
name|metadataFacet
init|=
name|factory
operator|.
name|createMetadataFacet
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|checksum
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"all ArtifactMetadataModel: {}"
argument_list|,
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// FIXME cql query
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
operator|&&
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
operator|&&
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
operator|!=
literal|null
operator|&&
name|artifactMetadataModel
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|checksum
argument_list|,
name|artifactMetadataModel
operator|.
name|getMd5
argument_list|()
argument_list|)
operator|||
name|StringUtils
operator|.
name|equals
argument_list|(
name|checksum
argument_list|,
name|artifactMetadataModel
operator|.
name|getSha1
argument_list|()
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|artifactMetadataModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactMetadataModel
name|model
range|:
name|artifactMetadataModels
control|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|BeanReplicator
argument_list|()
operator|.
name|replicateBean
argument_list|(
name|model
argument_list|,
name|ArtifactMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|populateFacets
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"getArtifactsByChecksum repositoryId: {}, checksum: {}, artifactMetadatas: {}"
argument_list|,
name|repositoryId
argument_list|,
name|checksum
argument_list|,
name|artifactMetadatas
argument_list|)
expr_stmt|;
return|return
name|artifactMetadatas
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|project
argument_list|,
name|version
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withId
argument_list|(
name|id
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|version
argument_list|)
operator|.
name|withProject
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setArtifactMetadataModelId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withId
argument_list|(
name|version
argument_list|)
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
operator|new
name|ProjectVersionMetadataModel
argument_list|()
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setRowId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|projectVersionMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|,
name|baseVersion
argument_list|,
name|artifactMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|baseVersion
argument_list|)
operator|.
name|withProject
argument_list|(
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setArtifactMetadataModelId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositoryId
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|project
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|project
argument_list|,
name|artifactMetadataModel
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|artifactMetadataModels
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME use cql query !
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositoryId
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|artifactMetadataModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactMetadataModel
name|model
range|:
name|artifactMetadataModels
control|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|BeanReplicator
argument_list|()
operator|.
name|replicateBean
argument_list|(
name|model
argument_list|,
name|ArtifactMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|populateFacets
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
block|}
return|return
name|artifactMetadatas
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
comment|//basically just checking it exists
comment|// FIXME use cql query
specifier|final
name|BooleanHolder
name|booleanHolder
init|=
operator|new
name|BooleanHolder
argument_list|()
decl_stmt|;
name|getProjectEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|Project
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|project
operator|.
name|getNamespace
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|project
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|project
operator|.
name|getProjectId
argument_list|()
argument_list|)
condition|)
block|{
name|booleanHolder
operator|.
name|value
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|booleanHolder
operator|.
name|value
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"getProject repoId: {}, namespace: {}, projectId: {} -> {}"
argument_list|,
name|repoId
argument_list|,
name|namespace
argument_list|,
name|id
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
return|return
name|projectMetadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|String
name|key
init|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repoId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectVersionMetadataModel
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"getProjectVersion repoId: '{}', namespace: '{}', projectId: '{}', projectVersion: {} -> not found"
argument_list|,
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
operator|new
name|BeanReplicator
argument_list|()
operator|.
name|replicateBean
argument_list|(
name|projectVersionMetadataModel
argument_list|,
name|ProjectVersionMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"getProjectVersion repoId: '{}', namespace: '{}', projectId: '{}', projectVersion: {} -> {}"
argument_list|,
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|projectVersion
argument_list|,
name|projectVersionMetadata
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setCiManagement
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setIssueManagement
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setOrganization
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setScm
argument_list|(
name|projectVersionMetadataModel
operator|.
name|getScm
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME complete collections !!
comment|// facets
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME use cql query
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
condition|)
block|{
name|metadataFacetModels
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metadataFacetsPerFacetIds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetadataFacetModel
name|metadataFacetModel
range|:
name|metadataFacetModels
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaValues
init|=
name|metadataFacetsPerFacetIds
operator|.
name|get
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaValues
operator|==
literal|null
condition|)
block|{
name|metaValues
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|metadataFacetsPerFacetIds
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|metaValues
argument_list|)
expr_stmt|;
block|}
name|metaValues
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getKey
argument_list|()
argument_list|,
name|metadataFacetModel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|metadataFacetsPerFacetIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|metadataFacetsPerFacetIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repoId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|projectVersionMetadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
comment|// FIXME implement this
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME use cql query
name|getProjectEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|Project
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|project
operator|.
name|getNamespace
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|project
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|project
operator|.
name|getProjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|projects
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME use cql query
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"removeProjectVersions:{}"
argument_list|,
name|artifactMetadataModels
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactMetadataModels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|artifactMetadataModels
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|withRepository
argument_list|(
name|repoId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
operator|new
name|ProjectVersionMetadataModel
argument_list|()
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setRowId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|getProjectVersionMetadataModelEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|projectVersionMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME use cql query !
name|getArtifactMetadataModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|ArtifactMetadataModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
if|if
condition|(
name|artifactMetadataModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
condition|)
block|{
name|artifactMetadataModels
operator|.
name|add
argument_list|(
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|artifactMetadataModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ArtifactMetadataModel
name|model
range|:
name|artifactMetadataModels
control|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|BeanReplicator
argument_list|()
operator|.
name|replicateBean
argument_list|(
name|model
argument_list|,
name|ArtifactMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|populateFacets
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
block|}
comment|// retrieve facets
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
decl_stmt|;
name|getMetadataFacetModelEntityManager
argument_list|()
operator|.
name|visitAll
argument_list|(
operator|new
name|Function
argument_list|<
name|MetadataFacetModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repoId
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectId
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|projectVersion
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
condition|)
block|{
name|metadataFacetModels
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// rebuild MetadataFacet for artifacts
for|for
control|(
specifier|final
name|ArtifactMetadata
name|artifactMetadata
range|:
name|artifactMetadatas
control|)
block|{
name|Iterable
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModelIterable
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|metadataFacetModels
argument_list|,
operator|new
name|Predicate
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
return|return
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getVersion
argument_list|()
argument_list|,
name|metadataFacetModel
operator|.
name|getArtifactMetadataModel
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|MetadataFacetModel
argument_list|>
name|iterator
init|=
name|metadataFacetModelIterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
name|metadataFacetValuesPerFacetId
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MetadataFacetModel
name|metadataFacetModel
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|values
init|=
name|metadataFacetValuesPerFacetId
operator|.
name|get
argument_list|(
name|metadataFacetModel
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
expr_stmt|;
name|metadataFacetValuesPerFacetId
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
name|entry
range|:
name|metadataFacetValuesPerFacetId
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|facetModels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|facetModels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repoId
argument_list|,
name|facetModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|facetModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MetadataFacetModel
name|metadataFacetModel
range|:
name|facetModels
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getKey
argument_list|()
argument_list|,
name|metadataFacetModel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|artifactMetadatas
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revert
parameter_list|()
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"CassandraMetadataRepository cannot revert"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canObtainAccess
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|obtainAccess
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Access using "
operator|+
name|aClass
operator|+
literal|" is not supported on the cassandra metadata storage"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

