begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|serializers
operator|.
name|LongSerializer
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|serializers
operator|.
name|StringSerializer
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ColumnFamilyResult
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ColumnFamilyTemplate
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ColumnFamilyUpdater
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ThriftColumnFamilyTemplate
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|Keyspace
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|beans
operator|.
name|ColumnSlice
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|beans
operator|.
name|OrderedRows
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|beans
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|exceptions
operator|.
name|HInvalidRequestException
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|factory
operator|.
name|HFactory
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|mutation
operator|.
name|MutationResult
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|mutation
operator|.
name|Mutator
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|query
operator|.
name|RangeSlicesQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|FacetedMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ArtifactMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|MetadataFacetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ProjectVersionMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|modelmapper
operator|.
name|ModelMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|CassandraUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 2.0.0  */
end_comment

begin_class
specifier|public
class|class
name|CassandraMetadataRepository
implements|implements
name|MetadataRepository
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
decl_stmt|;
specifier|private
specifier|final
name|CassandraArchivaManager
name|cassandraArchivaManager
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|projectVersionMetadataTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|projectTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|artifactMetadataTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadataFacetTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mailingListTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|licenseTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dependencyTemplate
decl_stmt|;
specifier|private
specifier|final
name|Keyspace
name|keyspace
decl_stmt|;
specifier|private
specifier|final
name|StringSerializer
name|ss
init|=
name|StringSerializer
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|public
name|CassandraMetadataRepository
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
parameter_list|,
name|ArchivaConfiguration
name|configuration
parameter_list|,
name|CassandraArchivaManager
name|cassandraArchivaManager
parameter_list|)
block|{
name|this
operator|.
name|metadataFacetFactories
operator|=
name|metadataFacetFactories
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|cassandraArchivaManager
operator|=
name|cassandraArchivaManager
expr_stmt|;
name|this
operator|.
name|keyspace
operator|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
expr_stmt|;
name|this
operator|.
name|projectVersionMetadataTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifactMetadataTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|mailingListTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|licenseTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dependencyTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * if the repository doesn't exist it will be created      *      * @param repositoryId      * @return      */
specifier|public
name|Repository
name|getOrCreateRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cf
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|<
literal|1
condition|)
block|{
comment|// we need to create the repository
name|Repository
name|repository
init|=
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
name|MutationResult
name|mutationResult
init|=
name|HFactory
operator|.
name|createMutator
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|repositoryId
argument_list|,
name|cf
argument_list|,
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
name|repository
return|;
block|}
catch|catch
parameter_list|(
name|HInvalidRequestException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Repository
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"repositoryName"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Repository
name|getRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
operator|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Namespace
name|updateOrAddNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Repository
name|repository
init|=
name|getOrCreateRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
decl_stmt|;
name|namespace
operator|=
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|HFactory
operator|.
name|createMutator
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//  values
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"name"
argument_list|,
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|namespace
return|;
block|}
catch|catch
parameter_list|(
name|HInvalidRequestException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Namespace
name|getNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|,
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"name"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
return|return
operator|new
name|Namespace
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"name"
argument_list|)
argument_list|,
comment|//
operator|new
name|Repository
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"repositoryName"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HFactory
operator|.
name|createMutator
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
operator|new
name|StringSerializer
argument_list|()
argument_list|)
comment|//
operator|.
name|addDeletion
argument_list|(
name|key
argument_list|,
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|projectTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|removeMailingList
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HInvalidRequestException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// TODO use cql queries to delete all
name|List
argument_list|<
name|String
argument_list|>
name|namespacesKey
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
control|)
block|{
name|namespacesKey
operator|.
name|add
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HFactory
operator|.
name|createMutator
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|addDeletion
argument_list|(
name|namespacesKey
argument_list|,
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|//delete repositoryId
name|HFactory
operator|.
name|createMutator
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|addDeletion
argument_list|(
name|repositoryId
argument_list|,
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|projectTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|removeMailingList
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"getRepositories"
argument_list|)
expr_stmt|;
specifier|final
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|cResult
init|=
comment|//
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|setRange
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repoIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cResult
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|cResult
operator|.
name|get
argument_list|()
control|)
block|{
name|repoIds
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"repositoryName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|repoIds
return|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// FIXME this one need peformance improvement maybe a cache?
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"name"
argument_list|)
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
comment|// FIXME this one need peformance improvement maybe a cache?
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|String
name|currentNamespace
init|=
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|currentNamespace
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|&&
operator|(
name|StringUtils
operator|.
name|length
argument_list|(
name|currentNamespace
argument_list|)
operator|>
name|StringUtils
operator|.
name|length
argument_list|(
name|namespaceId
argument_list|)
operator|)
condition|)
block|{
comment|// store after namespaceId '.' but before next '.'
comment|// call org namespace org.apache.maven.shared -> stored apache
name|String
name|calledNamespace
init|=
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|namespaceId
argument_list|,
literal|"."
argument_list|)
condition|?
name|namespaceId
else|:
name|namespaceId
operator|+
literal|"."
decl_stmt|;
name|String
name|storedNamespace
init|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|currentNamespace
argument_list|,
name|calledNamespace
argument_list|)
decl_stmt|;
name|storedNamespace
operator|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|storedNamespace
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|storedNamespace
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|namespaces
return|;
block|}
comment|// FIXME this one need peformance improvement maybe a cache?
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|ProjectMetadata
name|projectMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// project exists ? if yes return nothing to update here
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
else|else
block|{
name|Namespace
name|namespace
init|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withProjectId
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
decl_stmt|;
name|projectTemplate
operator|.
name|createMutator
argument_list|()
comment|//  values
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"projectId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|projects
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProject
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
comment|//
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|projectTemplate
operator|.
name|deleteRow
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"id"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|removeMailingList
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectVersion"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|orderedRows
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|orderedRows
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|versions
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|id
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"getProject repoId: {}, namespace: {}, projectId: {} -> {}"
argument_list|,
name|repoId
argument_list|,
name|namespace
argument_list|,
name|id
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
return|return
name|projectMetadata
return|;
block|}
specifier|protected
name|ProjectVersionMetadataModel
name|mapProjectVersionMetadataModel
parameter_list|(
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
parameter_list|)
block|{
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
operator|new
name|ProjectVersionMetadataModel
argument_list|()
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setId
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDescription
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setName
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|Namespace
name|namespace
init|=
operator|new
name|Namespace
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"namespaceId"
argument_list|)
argument_list|,
comment|//
operator|new
name|Repository
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"repositoryName"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIncomplete
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"incomplete"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"projectId"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setUrl
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|projectVersionMetadataModel
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getProject
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|,
name|projectId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|updateProject
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectVersion"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
literal|null
decl_stmt|;
name|boolean
name|creation
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|projectVersionMetadataModel
operator|=
name|mapProjectVersionMetadataModel
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnSlice
argument_list|()
argument_list|)
expr_stmt|;
name|creation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|projectVersionMetadataModel
operator|=
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|versionMetadata
argument_list|,
name|ProjectVersionMetadataModel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setCiManagement
argument_list|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIssueManagement
argument_list|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setOrganization
argument_list|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setScm
argument_list|(
name|versionMetadata
operator|.
name|getScm
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setMailingLists
argument_list|(
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDependencies
argument_list|(
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setLicenses
argument_list|(
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't test of repository and namespace really exist !
name|String
name|key
init|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
comment|//
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
comment|//
operator|.
name|withId
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
comment|//
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// FIXME nested objects to store!!!
if|if
condition|(
name|creation
condition|)
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
decl_stmt|;
name|Mutator
argument_list|<
name|String
argument_list|>
name|mutator
init|=
name|projectVersionMetadataTemplate
operator|.
name|createMutator
argument_list|()
comment|//  values
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectVersion"
argument_list|,
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"description"
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"name"
argument_list|,
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"incomplete"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|CiManagement
name|ci
init|=
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"ciManagement.system"
argument_list|,
name|ci
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"ciManagement.url"
argument_list|,
name|ci
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|IssueManagement
name|issueManagement
init|=
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|issueManagement
operator|!=
literal|null
condition|)
block|{
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"issueManagement.system"
argument_list|,
name|issueManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"issueManagement.url"
argument_list|,
name|issueManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|Organization
name|organization
init|=
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
decl_stmt|;
if|if
condition|(
name|organization
operator|!=
literal|null
condition|)
block|{
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"organization.name"
argument_list|,
name|organization
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"organization.url"
argument_list|,
name|organization
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|Scm
name|scm
init|=
name|versionMetadata
operator|.
name|getScm
argument_list|()
decl_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"scm.url"
argument_list|,
name|scm
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"scm.connection"
argument_list|,
name|scm
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mutator
argument_list|,
name|key
argument_list|,
name|cf
argument_list|,
literal|"scm.developerConnection"
argument_list|,
name|scm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|recordMailingList
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|recordLicenses
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
name|recordDependencies
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|MutationResult
name|mutationResult
init|=
name|mutator
operator|.
name|execute
argument_list|()
decl_stmt|;
block|}
else|else
block|{
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|projectVersionMetadataTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"projectVersion"
argument_list|,
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"description"
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"name"
argument_list|,
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"incomplete"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|CiManagement
name|ci
init|=
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"ciManagement.system"
argument_list|,
name|ci
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"ciManagement.url"
argument_list|,
name|ci
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|IssueManagement
name|issueManagement
init|=
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
decl_stmt|;
if|if
condition|(
name|issueManagement
operator|!=
literal|null
condition|)
block|{
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"issueManagement.system"
argument_list|,
name|issueManagement
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"issueManagement.url"
argument_list|,
name|issueManagement
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|Organization
name|organization
init|=
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
decl_stmt|;
if|if
condition|(
name|organization
operator|!=
literal|null
condition|)
block|{
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"organization.name"
argument_list|,
name|organization
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"organization.url"
argument_list|,
name|organization
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|Scm
name|scm
init|=
name|versionMetadata
operator|.
name|getScm
argument_list|()
decl_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"scm.url"
argument_list|,
name|scm
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"scm.connection"
argument_list|,
name|scm
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"scm.developerConnection"
argument_list|,
name|scm
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update is a delete record
name|removeMailingList
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|recordMailingList
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|removeLicenses
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|recordLicenses
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
name|removeDependencies
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|recordDependencies
argument_list|(
name|key
argument_list|,
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|projectVersionMetadataTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|updateFacets
argument_list|(
name|versionMetadata
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectVersion"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|key
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnFamilyResult
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnFamilyResult
init|=
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|queryColumns
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|columnFamilyResult
operator|.
name|hasResults
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|projectVersionMetadata
operator|.
name|setId
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setDescription
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setName
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setIncomplete
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"incomplete"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setUrl
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|String
name|ciUrl
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"ciManagement.url"
argument_list|)
decl_stmt|;
name|String
name|ciSystem
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"ciManagement.system"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ciSystem
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ciUrl
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setCiManagement
argument_list|(
operator|new
name|CiManagement
argument_list|(
name|ciSystem
argument_list|,
name|ciUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|issueUrl
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"issueManagement.url"
argument_list|)
decl_stmt|;
name|String
name|issueSystem
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"issueManagement.system"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|issueSystem
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|issueUrl
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setIssueManagement
argument_list|(
operator|new
name|IssueManagement
argument_list|(
name|issueSystem
argument_list|,
name|issueUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|organizationUrl
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"organization.url"
argument_list|)
decl_stmt|;
name|String
name|organizationName
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"organization.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|organizationUrl
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|organizationName
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setOrganization
argument_list|(
operator|new
name|Organization
argument_list|(
name|organizationName
argument_list|,
name|organizationUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|devConn
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"scm.developerConnection"
argument_list|)
decl_stmt|;
name|String
name|conn
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"scm.connection"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"scm.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|devConn
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|conn
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|projectVersionMetadata
operator|.
name|setScm
argument_list|(
operator|new
name|Scm
argument_list|(
name|conn
argument_list|,
name|devConn
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|projectVersionMetadata
operator|.
name|setMailingLists
argument_list|(
name|getMailingLists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setLicenses
argument_list|(
name|getLicenses
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setDependencies
argument_list|(
name|getDependencies
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// facets
name|result
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"facetId"
argument_list|,
literal|"key"
argument_list|,
literal|"value"
argument_list|,
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metadataFacetsPerFacetIds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|String
name|facetId
init|=
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"facetId"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaValues
init|=
name|metadataFacetsPerFacetIds
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaValues
operator|==
literal|null
condition|)
block|{
name|metaValues
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|metadataFacetsPerFacetIds
operator|.
name|put
argument_list|(
name|facetId
argument_list|,
name|metaValues
argument_list|)
expr_stmt|;
block|}
name|metaValues
operator|.
name|put
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"key"
argument_list|)
argument_list|,
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|metadataFacetsPerFacetIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|metadataFacetsPerFacetIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|( )
decl_stmt|;
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|projectVersionMetadata
return|;
block|}
specifier|protected
name|void
name|recordMailingList
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|,
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
parameter_list|)
block|{
if|if
condition|(
name|mailingLists
operator|==
literal|null
operator|||
name|mailingLists
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Mutator
argument_list|<
name|String
argument_list|>
name|mailingMutator
init|=
name|this
operator|.
name|mailingListTemplate
operator|.
name|createMutator
argument_list|()
decl_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|mailingLists
control|)
block|{
comment|// we don't care about the key as the real used one with the projectVersionMetadata
name|String
name|keyMailingList
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|cfMailingList
init|=
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|()
decl_stmt|;
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"name"
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"mainArchiveUrl"
argument_list|,
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"postAddress"
argument_list|,
name|mailingList
operator|.
name|getPostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"subscribeAddress"
argument_list|,
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"unsubscribeAddress"
argument_list|,
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|otherArchive
range|:
name|mailingList
operator|.
name|getOtherArchives
argument_list|()
control|)
block|{
name|addInsertion
argument_list|(
name|mailingMutator
argument_list|,
name|keyMailingList
argument_list|,
name|cfMailingList
argument_list|,
literal|"otherArchive."
operator|+
name|idx
argument_list|,
name|otherArchive
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|mailingMutator
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|removeMailingList
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|mailingListTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|MailingList
argument_list|>
name|getMailingLists
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|List
argument_list|<
name|MailingList
argument_list|>
name|mailingLists
init|=
operator|new
name|ArrayList
argument_list|<
name|MailingList
argument_list|>
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMailingListFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnFamilyResult
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnFamilyResult
init|=
name|this
operator|.
name|mailingListTemplate
operator|.
name|queryColumns
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|()
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setMainArchiveUrl
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"mainArchiveUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setPostAddress
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"postAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setSubscribeAddress
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"subscribeAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setUnsubscribeAddress
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"unsubscribeAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|otherArchives
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|columnName
range|:
name|columnFamilyResult
operator|.
name|getColumnNames
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|columnName
argument_list|,
literal|"otherArchive."
argument_list|)
condition|)
block|{
name|otherArchives
operator|.
name|add
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|otherArchives
argument_list|)
expr_stmt|;
name|mailingLists
operator|.
name|add
argument_list|(
name|mailingList
argument_list|)
expr_stmt|;
block|}
return|return
name|mailingLists
return|;
block|}
specifier|protected
name|void
name|recordLicenses
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|,
name|List
argument_list|<
name|License
argument_list|>
name|licenses
parameter_list|)
block|{
if|if
condition|(
name|licenses
operator|==
literal|null
operator|||
name|licenses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Mutator
argument_list|<
name|String
argument_list|>
name|licenseMutator
init|=
name|this
operator|.
name|licenseTemplate
operator|.
name|createMutator
argument_list|()
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|licenses
control|)
block|{
comment|// we don't care about the key as the real used one with the projectVersionMetadata
name|String
name|keyLicense
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|cfLicense
init|=
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|()
decl_stmt|;
name|addInsertion
argument_list|(
name|licenseMutator
argument_list|,
name|keyLicense
argument_list|,
name|cfLicense
argument_list|,
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|licenseMutator
argument_list|,
name|keyLicense
argument_list|,
name|cfLicense
argument_list|,
literal|"name"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|licenseMutator
argument_list|,
name|keyLicense
argument_list|,
name|cfLicense
argument_list|,
literal|"url"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|licenseMutator
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|removeLicenses
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|licenseTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|License
argument_list|>
name|getLicenses
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|List
argument_list|<
name|License
argument_list|>
name|licenses
init|=
operator|new
name|ArrayList
argument_list|<
name|License
argument_list|>
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getLicenseFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnFamilyResult
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnFamilyResult
init|=
name|this
operator|.
name|licenseTemplate
operator|.
name|queryColumns
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|licenses
operator|.
name|add
argument_list|(
operator|new
name|License
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|licenses
return|;
block|}
specifier|protected
name|void
name|recordDependencies
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|,
name|String
name|repositoryId
parameter_list|)
block|{
if|if
condition|(
name|dependencies
operator|==
literal|null
operator|||
name|dependencies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Mutator
argument_list|<
name|String
argument_list|>
name|dependencyMutator
init|=
name|this
operator|.
name|dependencyTemplate
operator|.
name|createMutator
argument_list|()
decl_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|dependencies
control|)
block|{
comment|// we don't care about the key as the real used one with the projectVersionMetadata
name|String
name|keyDependency
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|cfDependency
init|=
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|()
decl_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"classifier"
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"optional"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"scope"
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"systemPath"
argument_list|,
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"type"
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"artifactId"
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"groupId"
argument_list|,
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|addInsertion
argument_list|(
name|dependencyMutator
argument_list|,
name|keyDependency
argument_list|,
name|cfDependency
argument_list|,
literal|"version"
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dependencyMutator
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|removeDependencies
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"groupId"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|dependencyTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Dependency
argument_list|>
name|getDependencies
parameter_list|(
name|String
name|projectVersionMetadataKey
parameter_list|)
block|{
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<
name|Dependency
argument_list|>
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|,
name|projectVersionMetadataKey
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnFamilyResult
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnFamilyResult
init|=
name|this
operator|.
name|dependencyTemplate
operator|.
name|queryColumns
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dependency
operator|.
name|setClassifier
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"classifier"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"optional"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"scope"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setSystemPath
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"systemPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setArtifactId
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setGroupId
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
return|return
name|dependencies
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifactMeta
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|updateProject
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProject
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// exists?
name|boolean
name|exists
init|=
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
comment|// updater
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|updater
operator|.
name|setLong
argument_list|(
literal|"fileLastModified"
argument_list|,
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setLong
argument_list|(
literal|"whenGathered"
argument_list|,
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setLong
argument_list|(
literal|"size"
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"md5"
argument_list|,
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"sha1"
argument_list|,
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
decl_stmt|;
comment|// create
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"id"
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"project"
argument_list|,
name|artifactMeta
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"fileLastModified"
argument_list|,
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"size"
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"md5"
argument_list|,
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"sha1"
argument_list|,
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"whenGathered"
argument_list|,
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
comment|//
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withProjectVersion
argument_list|(
name|projectVersion
argument_list|)
comment|//
operator|.
name|withId
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
comment|//
operator|.
name|build
argument_list|()
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"version"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|exists
operator|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
decl_stmt|;
name|projectVersionMetadataTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setFileLastModified
argument_list|(
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
else|:
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// now facets
name|updateFacets
argument_list|(
name|artifactMeta
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"version"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|versions
return|;
block|}
comment|/**      * iterate over available facets to remove/add from the artifactMetadata      *      * @param facetedMetadata      * @param artifactMetadataModel only use for the key      */
specifier|private
name|void
name|updateFacets
parameter_list|(
specifier|final
name|FacetedMetadata
name|facetedMetadata
parameter_list|,
specifier|final
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|facetId
range|:
name|metadataFacetFactories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|facetedMetadata
operator|.
name|getFacet
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// clean first
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cf
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|metadataFacet
operator|.
name|toProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|withArtifactMetadataModel
argument_list|(
name|artifactMetadataModel
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|facetId
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Mutator
argument_list|<
name|String
argument_list|>
name|mutator
init|=
name|metadataFacetTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|artifactMetadataModel
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|artifactMetadataModel
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|artifactMetadataModel
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectVersion"
argument_list|,
name|artifactMetadataModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"key"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacet
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutator
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|facets
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
operator|!
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|getMetadataFacet
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"key"
argument_list|)
argument_list|,
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|metadataFacet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"facetId"
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
expr_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
decl_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"facetId"
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
decl_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"facetId"
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"key"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|addUpdateStringValue
argument_list|(
name|updater
argument_list|,
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|Date
name|startTime
parameter_list|,
specifier|final
name|Date
name|endTime
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|LongSerializer
name|ls
init|=
name|LongSerializer
operator|.
name|get
argument_list|()
decl_stmt|;
name|RangeSlicesQuery
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Long
argument_list|>
name|query
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ls
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|,
literal|"size"
argument_list|,
literal|"id"
argument_list|,
literal|"fileLastModified"
argument_list|,
literal|"md5"
argument_list|,
literal|"project"
argument_list|,
literal|"projectVersion"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"version"
argument_list|,
literal|"whenGathered"
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
comment|//
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|addGteExpression
argument_list|(
literal|"whenGathered"
argument_list|,
name|startTime
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|addLteExpression
argument_list|(
literal|"whenGathered"
argument_list|,
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Long
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|String
name|repositoryName
init|=
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"repositoryName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositoryName
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|mapArtifactMetadataLongColumnSlice
argument_list|(
name|columnSlice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|artifactMetadatas
return|;
block|}
specifier|protected
name|ArtifactMetadata
name|mapArtifactMetadataLongColumnSlice
parameter_list|(
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|columnSlice
parameter_list|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifactMetadata
operator|.
name|setNamespace
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"namespaceId"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSize
argument_list|(
name|getLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setId
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setFileLastModified
argument_list|(
name|getLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"fileLastModified"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setMd5
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"md5"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProject
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"project"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProjectVersion
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setRepositoryId
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"repositoryName"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSha1
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"sha1"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setVersion
argument_list|(
name|getAsStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|whenGathered
init|=
name|getLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"whenGathered"
argument_list|)
decl_stmt|;
if|if
condition|(
name|whenGathered
operator|!=
literal|null
condition|)
block|{
name|artifactMetadata
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|(
name|whenGathered
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifactMetadata
return|;
block|}
specifier|protected
name|ArtifactMetadata
name|mapArtifactMetadataStringColumnSlice
parameter_list|(
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
parameter_list|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifactMetadata
operator|.
name|setNamespace
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"namespaceId"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSize
argument_list|(
name|getAsLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setId
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setFileLastModified
argument_list|(
name|getAsLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"fileLastModified"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setMd5
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"md5"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProject
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"project"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProjectVersion
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setRepositoryId
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"repositoryName"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSha1
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"sha1"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setVersion
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|whenGathered
init|=
name|getAsLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"whenGathered"
argument_list|)
decl_stmt|;
if|if
condition|(
name|whenGathered
operator|!=
literal|null
condition|)
block|{
name|artifactMetadata
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|(
name|whenGathered
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifactMetadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|checksum
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// cql cannot run or in queries so running twice the query
name|Map
argument_list|<
name|String
argument_list|,
name|ArtifactMetadata
argument_list|>
name|artifactMetadataMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
name|RangeSlicesQuery
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|query
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|,
literal|"size"
argument_list|,
literal|"id"
argument_list|,
literal|"fileLastModified"
argument_list|,
literal|"md5"
argument_list|,
literal|"project"
argument_list|,
literal|"projectVersion"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"version"
argument_list|,
literal|"whenGathered"
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
comment|//
name|query
operator|=
name|query
operator|.
name|addEqualsExpression
argument_list|(
literal|"sha1"
argument_list|,
name|checksum
argument_list|)
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|artifactMetadataMap
operator|.
name|put
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapArtifactMetadataStringColumnSlice
argument_list|(
name|columnSlice
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|,
literal|"size"
argument_list|,
literal|"id"
argument_list|,
literal|"fileLastModified"
argument_list|,
literal|"md5"
argument_list|,
literal|"project"
argument_list|,
literal|"projectVersion"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"version"
argument_list|,
literal|"whenGathered"
argument_list|,
literal|"sha1"
argument_list|)
expr_stmt|;
comment|//
name|query
operator|=
name|query
operator|.
name|addEqualsExpression
argument_list|(
literal|"md5"
argument_list|,
name|checksum
argument_list|)
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|artifactMetadataMap
operator|.
name|put
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapArtifactMetadataStringColumnSlice
argument_list|(
name|columnSlice
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifactMetadataMap
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|repositoryId
argument_list|,
name|namespace
argument_list|,
name|project
argument_list|,
name|version
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withId
argument_list|(
name|id
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|version
argument_list|)
operator|.
name|withProject
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
comment|//
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
comment|//
operator|.
name|withProjectId
argument_list|(
name|project
argument_list|)
comment|//
operator|.
name|withProjectVersion
argument_list|(
name|version
argument_list|)
comment|//
operator|.
name|withId
argument_list|(
name|id
argument_list|)
comment|//
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|,
name|baseVersion
argument_list|,
name|artifactMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|baseVersion
argument_list|)
operator|.
name|withProject
argument_list|(
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|RangeSlicesQuery
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|query
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|)
decl_stmt|;
comment|//
name|query
operator|=
name|query
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"project"
argument_list|,
name|project
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|RangeSlicesQuery
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|query
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|,
literal|"size"
argument_list|,
literal|"id"
argument_list|,
literal|"fileLastModified"
argument_list|,
literal|"md5"
argument_list|,
literal|"project"
argument_list|,
literal|"projectVersion"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"version"
argument_list|,
literal|"whenGathered"
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
comment|//
name|query
operator|=
name|query
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|mapArtifactMetadataStringColumnSlice
argument_list|(
name|columnSlice
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|artifactMetadatas
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getDependencyFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectVersionMetadataModel.key"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"groupId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"artifactId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"version"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dependenciesIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
control|)
block|{
name|dependenciesIds
operator|.
name|add
argument_list|(
name|getStringValue
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
argument_list|,
literal|"projectVersionMetadataModel.key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectVersionReference
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|dependenciesIds
control|)
block|{
name|ColumnFamilyResult
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnFamilyResult
init|=
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|queryColumns
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|references
operator|.
name|add
argument_list|(
operator|new
name|ProjectVersionReference
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|,
comment|//
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"projectId"
argument_list|)
argument_list|,
comment|//
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"namespaceId"
argument_list|)
argument_list|,
comment|//
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"projectVersion"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"version"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
control|)
block|{
name|this
operator|.
name|projectVersionMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|removeMailingList
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|removeLicenses
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|removeDependencies
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RangeSlicesQuery
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|query
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|)
decl_stmt|;
comment|//
name|query
operator|=
name|query
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"project"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"id"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"namespaceId"
argument_list|,
literal|"project"
argument_list|,
literal|"projectVersion"
argument_list|,
literal|"version"
argument_list|,
literal|"fileLastModified"
argument_list|,
literal|"size"
argument_list|,
literal|"md5"
argument_list|,
literal|"sha1"
argument_list|,
literal|"whenGathered"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"project"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifactMetadata
operator|.
name|setNamespace
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"namespaceId"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSize
argument_list|(
name|getAsLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setId
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setFileLastModified
argument_list|(
name|getAsLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"fileLastModified"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setMd5
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"md5"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProject
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"project"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProjectVersion
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setRepositoryId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSha1
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"sha1"
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setVersion
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|whenGathered
init|=
name|getAsLongValue
argument_list|(
name|columnSlice
argument_list|,
literal|"whenGathered"
argument_list|)
decl_stmt|;
if|if
condition|(
name|whenGathered
operator|!=
literal|null
condition|)
block|{
name|artifactMetadata
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|(
name|whenGathered
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|,
name|ss
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"facetId"
argument_list|,
literal|"name"
argument_list|,
literal|"value"
argument_list|,
literal|"key"
argument_list|,
literal|"projectVersion"
argument_list|)
comment|//
operator|.
name|setRowCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
name|artifactMetadatas
return|;
block|}
specifier|final
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModels
init|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|MetadataFacetModel
name|metadataFacetModel
init|=
operator|new
name|MetadataFacetModel
argument_list|()
decl_stmt|;
name|metadataFacetModel
operator|.
name|setFacetId
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"facetId"
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setName
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setValue
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setKey
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModel
operator|.
name|setProjectVersion
argument_list|(
name|getStringValue
argument_list|(
name|columnSlice
argument_list|,
literal|"projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|metadataFacetModels
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
comment|// rebuild MetadataFacet for artifacts
for|for
control|(
specifier|final
name|ArtifactMetadata
name|artifactMetadata
range|:
name|artifactMetadatas
control|)
block|{
name|Iterable
argument_list|<
name|MetadataFacetModel
argument_list|>
name|metadataFacetModelIterable
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|metadataFacetModels
argument_list|,
operator|new
name|Predicate
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|MetadataFacetModel
name|metadataFacetModel
parameter_list|)
block|{
if|if
condition|(
name|metadataFacetModel
operator|!=
literal|null
condition|)
block|{
return|return
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactMetadata
operator|.
name|getVersion
argument_list|()
argument_list|,
name|metadataFacetModel
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|MetadataFacetModel
argument_list|>
name|iterator
init|=
name|metadataFacetModelIterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
name|metadataFacetValuesPerFacetId
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MetadataFacetModel
name|metadataFacetModel
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|values
init|=
name|metadataFacetValuesPerFacetId
operator|.
name|get
argument_list|(
name|metadataFacetModel
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|()
expr_stmt|;
name|metadataFacetValuesPerFacetId
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getFacetId
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|metadataFacetModel
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
argument_list|>
name|entry
range|:
name|metadataFacetValuesPerFacetId
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MetadataFacetModel
argument_list|>
name|facetModels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|facetModels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|facetModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MetadataFacetModel
name|metadataFacetModel
range|:
name|facetModels
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|metadataFacetModel
operator|.
name|getKey
argument_list|()
argument_list|,
name|metadataFacetModel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|addFacet
argument_list|(
name|metadataFacet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|artifactMetadatas
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revert
parameter_list|()
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"CassandraMetadataRepository cannot revert"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canObtainAccess
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|obtainAccess
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Access using "
operator|+
name|aClass
operator|+
literal|" is not supported on the cassandra metadata storage"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
class|class
name|ModelMapperHolder
block|{
specifier|private
specifier|static
name|ModelMapper
name|MODEL_MAPPER
init|=
operator|new
name|ModelMapper
argument_list|()
decl_stmt|;
block|}
specifier|protected
name|ModelMapper
name|getModelMapper
parameter_list|()
block|{
return|return
name|ModelMapperHolder
operator|.
name|MODEL_MAPPER
return|;
block|}
block|}
end_class

end_unit

