begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|serializers
operator|.
name|LongSerializer
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|serializers
operator|.
name|StringSerializer
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ColumnFamilyResult
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ColumnFamilyTemplate
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ColumnFamilyUpdater
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|cassandra
operator|.
name|service
operator|.
name|template
operator|.
name|ThriftColumnFamilyTemplate
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|Keyspace
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|beans
operator|.
name|ColumnSlice
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|beans
operator|.
name|OrderedRows
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|beans
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|exceptions
operator|.
name|HInvalidRequestException
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|factory
operator|.
name|HFactory
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|mutation
operator|.
name|MutationResult
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|mutation
operator|.
name|Mutator
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|me
operator|.
name|prettyprint
operator|.
name|hector
operator|.
name|api
operator|.
name|query
operator|.
name|RangeSlicesQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|FacetedMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ArtifactMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|MetadataFacetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|ProjectVersionMetadataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|model
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|modelmapper
operator|.
name|ModelMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|cassandra
operator|.
name|CassandraUtils
operator|.
name|column
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 2.0.0  */
end_comment

begin_class
specifier|public
class|class
name|CassandraMetadataRepository
implements|implements
name|MetadataRepository
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
decl_stmt|;
specifier|private
specifier|final
name|CassandraArchivaManager
name|cassandraArchivaManager
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|projectVersionMetadataModelTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|projectTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|artifactMetadataTemplate
decl_stmt|;
specifier|private
specifier|final
name|ColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadataFacetTemplate
decl_stmt|;
specifier|public
name|CassandraMetadataRepository
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
parameter_list|,
name|ArchivaConfiguration
name|configuration
parameter_list|,
name|CassandraArchivaManager
name|cassandraArchivaManager
parameter_list|)
block|{
name|this
operator|.
name|metadataFacetFactories
operator|=
name|metadataFacetFactories
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|cassandraArchivaManager
operator|=
name|cassandraArchivaManager
expr_stmt|;
name|this
operator|.
name|projectVersionMetadataModelTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataModelFamilyName
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifactMetadataTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataModelFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|=
operator|new
name|ThriftColumnFamilyTemplate
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * if the repository doesn't exist it will be created      *      * @param repositoryId      * @return      */
specifier|public
name|Repository
name|getOrCreateRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
decl_stmt|;
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cf
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|<
literal|1
condition|)
block|{
comment|// we need to create the repository
name|Repository
name|repository
init|=
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
try|try
block|{
name|MutationResult
name|mutationResult
init|=
name|HFactory
operator|.
name|createMutator
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|repositoryId
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
name|repository
return|;
block|}
catch|catch
parameter_list|(
name|HInvalidRequestException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Repository
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"repositoryName"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Repository
name|getRepository
parameter_list|(
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
operator|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Namespace
name|updateOrAddNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Repository
name|repository
init|=
name|getOrCreateRepository
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
decl_stmt|;
name|namespace
operator|=
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|HFactory
operator|.
name|createMutator
argument_list|(
name|keyspace
argument_list|,
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//  values
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"name"
argument_list|,
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|namespace
return|;
block|}
catch|catch
parameter_list|(
name|HInvalidRequestException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Namespace
name|getNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|,
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"name"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
return|return
operator|new
name|Namespace
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
comment|//
operator|new
name|Repository
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"repositoryName"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|String
name|key
init|=
operator|new
name|Namespace
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MutationResult
name|result
init|=
name|HFactory
operator|.
name|createMutator
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
operator|new
name|StringSerializer
argument_list|()
argument_list|)
comment|//
operator|.
name|addDeletion
argument_list|(
name|key
argument_list|,
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|HInvalidRequestException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// FIXME remove all datas attached to the repositoryId
comment|// retrieve and delete all namespace with this repositoryId
comment|// TODO use cql queries to delete all
name|List
argument_list|<
name|String
argument_list|>
name|namespacesKey
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|,
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
control|)
block|{
name|namespacesKey
operator|.
name|add
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HFactory
operator|.
name|createMutator
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
operator|new
name|StringSerializer
argument_list|()
argument_list|)
comment|//
operator|.
name|addDeletion
argument_list|(
name|namespacesKey
argument_list|,
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|//delete repositoryId
name|HFactory
operator|.
name|createMutator
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
operator|new
name|StringSerializer
argument_list|()
argument_list|)
comment|//
operator|.
name|addDeletion
argument_list|(
name|repositoryId
argument_list|,
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|/*         final List<ArtifactMetadataModel> artifactMetadataModels = new ArrayList<ArtifactMetadataModel>();          // remove data related to the repository         this.getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( artifactMetadataModel.getRepositoryId(), repositoryId ) )                     {                         artifactMetadataModels.add( artifactMetadataModel );                     }                 }                 return Boolean.TRUE;             }         } );          getArtifactMetadataModelEntityManager().remove( artifactMetadataModels );          final List<Namespace> namespaces = new ArrayList<Namespace>();          getNamespaceEntityManager().visitAll( new Function<Namespace, Boolean>()         {             @Override             public Boolean apply( Namespace namespace )             {                 if ( namespace != null )                 {                     if ( StringUtils.equals( namespace.getRepository().getId(), repositoryId ) )                     {                         namespaces.add( namespace );                     }                 }                 return Boolean.TRUE;             }         } );          getNamespaceEntityManager().remove( namespaces );          final List<Project> projects = new ArrayList<Project>();         getProjectEntityManager().visitAll( new Function<Project, Boolean>()         {             @Override             public Boolean apply( Project project )             {                 if ( project != null )                 {                     if ( StringUtils.equals( project.getNamespace().getRepository().getId(), repositoryId ) )                     {                         projects.add( project );                     }                 }                 return Boolean.TRUE;             }         } );          getProjectEntityManager().remove( projects );          // TODO  cleanup or not         //final List<MetadataFacetModel> metadataFacetModels = new ArrayList<MetadataFacetModel>(  );         //getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()          final List<ProjectVersionMetadataModel> projectVersionMetadataModels =             new ArrayList<ProjectVersionMetadataModel>();          getProjectVersionMetadataModelEntityManager().visitAll( new Function<ProjectVersionMetadataModel, Boolean>()         {             @Override             public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )             {                 if ( projectVersionMetadataModel != null )                 {                     if ( StringUtils.equals( projectVersionMetadataModel.getNamespace().getRepository().getId(),                                              repositoryId ) )                     {                         projectVersionMetadataModels.add( projectVersionMetadataModel );                     }                 }                 return Boolean.TRUE;             }         } );          getProjectVersionMetadataModelEntityManager().remove( projectVersionMetadataModels );          Repository repository = getRepositoryEntityManager().get( repositoryId );         if ( repository != null )         {             getRepositoryEntityManager().remove( repository );         }      */
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"getRepositories"
argument_list|)
expr_stmt|;
specifier|final
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|cResult
init|=
comment|//
name|HFactory
operator|.
name|createRangeSlicesQuery
argument_list|(
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getRepositoryFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"repositoryName"
argument_list|)
comment|//
operator|.
name|setRange
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repoIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cResult
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|cResult
operator|.
name|get
argument_list|()
control|)
block|{
name|repoIds
operator|.
name|add
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"repositoryName"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|repoIds
return|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|String
name|currentNamespace
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|currentNamespace
argument_list|,
name|namespaceId
argument_list|)
operator|&&
operator|(
name|StringUtils
operator|.
name|length
argument_list|(
name|currentNamespace
argument_list|)
operator|>
name|StringUtils
operator|.
name|length
argument_list|(
name|namespaceId
argument_list|)
operator|)
condition|)
block|{
comment|// store after namespaceId '.' but before next '.'
comment|// call org namespace org.apache.maven.shared -> stored apache
name|String
name|calledNamespace
init|=
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|namespaceId
argument_list|,
literal|"."
argument_list|)
condition|?
name|namespaceId
else|:
name|namespaceId
operator|+
literal|"."
decl_stmt|;
name|String
name|storedNamespace
init|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|currentNamespace
argument_list|,
name|calledNamespace
argument_list|)
decl_stmt|;
name|storedNamespace
operator|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|storedNamespace
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|storedNamespace
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|namespaces
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getNamespaceFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|ProjectMetadata
name|projectMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// project exists ? if yes return nothing to update here
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
else|else
block|{
name|Namespace
name|namespace
init|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withProjectId
argument_list|(
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
decl_stmt|;
name|projectTemplate
operator|.
name|createMutator
argument_list|()
comment|//  values
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|projectMetadata
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|CassandraUtils
operator|.
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|projectMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"projectId"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|projects
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProject
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespaceId
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|new
name|Project
operator|.
name|KeyBuilder
argument_list|()
comment|//
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
comment|//
operator|.
name|withNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
comment|//
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/*         HFactory.createMutator( cassandraArchivaManager.getKeyspace(), new StringSerializer() ) //             .addDeletion( key, cassandraArchivaManager.getProjectFamilyName() ) //             .execute();         */
name|this
operator|.
name|projectTemplate
operator|.
name|deleteRow
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"id"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|projectVersionMetadataModelTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO finish linked data to delete metadata
comment|/*        // cleanup ArtifactMetadataModel         final List<ArtifactMetadataModel> artifactMetadataModels = new ArrayList<ArtifactMetadataModel>();          getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( artifactMetadataModel.getRepositoryId(), repositoryId )&& StringUtils.equals( artifactMetadataModel.getNamespace(), namespaceId )&& StringUtils.equals( artifactMetadataModel.getProject(), projectId ) )                     {                         artifactMetadataModels.add( artifactMetadataModel );                     }                 }                 return Boolean.TRUE;             }         } );          getArtifactMetadataModelEntityManager().remove( artifactMetadataModels );      */
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"id"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|orderedRows
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|orderedRows
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|versions
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"projectId"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|id
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"getProject repoId: {}, namespace: {}, projectId: {} -> {}"
argument_list|,
name|repoId
argument_list|,
name|namespace
argument_list|,
name|id
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
return|return
name|projectMetadata
return|;
block|}
specifier|protected
name|ProjectVersionMetadataModel
name|map
parameter_list|(
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
parameter_list|)
block|{
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
operator|new
name|ProjectVersionMetadataModel
argument_list|()
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setId
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDescription
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"description"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setName
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"namespaceId"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
comment|//
operator|new
name|Repository
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"repositoryName"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIncomplete
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"incomplete"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"projectId"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setUrl
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"url"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|projectVersionMetadataModel
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getProject
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|,
name|projectId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|updateProject
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"id"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"id"
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
literal|null
decl_stmt|;
name|boolean
name|creation
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|projectVersionMetadataModel
operator|=
name|map
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnSlice
argument_list|()
argument_list|)
expr_stmt|;
name|creation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|projectVersionMetadataModel
operator|=
name|getModelMapper
argument_list|()
operator|.
name|map
argument_list|(
name|versionMetadata
argument_list|,
name|ProjectVersionMetadataModel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
operator|new
name|Namespace
argument_list|(
name|namespaceId
argument_list|,
operator|new
name|Repository
argument_list|(
name|repositoryId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setCiManagement
argument_list|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setIssueManagement
argument_list|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setOrganization
argument_list|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setScm
argument_list|(
name|versionMetadata
operator|.
name|getScm
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setMailingLists
argument_list|(
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setDependencies
argument_list|(
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setLicenses
argument_list|(
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't test of repository and namespace really exist !
name|String
name|key
init|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespaceId
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// FIXME nested objects to store!!!
if|if
condition|(
name|creation
condition|)
block|{
name|String
name|cf
init|=
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataModelFamilyName
argument_list|()
decl_stmt|;
name|Mutator
argument_list|<
name|String
argument_list|>
name|mutator
init|=
name|projectVersionMetadataModelTemplate
operator|.
name|createMutator
argument_list|()
comment|//  values
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"id"
argument_list|,
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//
if|if
condition|(
name|versionMetadata
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|=
name|mutator
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"description"
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|=
name|mutator
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"name"
argument_list|,
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutator
operator|=
name|mutator
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"incomplete"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionMetadata
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|=
name|mutator
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MutationResult
name|mutationResult
init|=
name|mutator
operator|.
name|execute
argument_list|()
decl_stmt|;
block|}
else|else
block|{
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|projectVersionMetadataModelTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"id"
argument_list|,
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"description"
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"incomplete"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|projectVersionMetadataModelTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
comment|// FIXME
comment|/*artifactMetadataModel.setArtifactMetadataModelId(             new ArtifactMetadataModel.KeyBuilder().withId( versionMetadata.getId() ).withRepositoryId(                 repositoryId ).withNamespace( namespaceId ).withProjectVersion(                 versionMetadata.getVersion() ).withProject( projectId ).build()         );*/
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|versionMetadata
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|updateFacets
argument_list|(
name|versionMetadata
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
comment|/*        String namespaceKey =             new Namespace.KeyBuilder().withRepositoryId( repositoryId ).withNamespace( namespaceId ).build();         Namespace namespace = getNamespaceEntityManager().get( namespaceKey );         if ( namespace == null )         {             namespace = updateOrAddNamespace( repositoryId, namespaceId );         }          String key = new Project.KeyBuilder().withNamespace( namespace ).withProjectId( projectId ).build();          Project project = getProjectEntityManager().get( key );         if ( project == null )         {             project = new Project( key, projectId, namespace );             getProjectEntityManager().put( project );         }          // we don't test of repository and namespace really exist !         key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repositoryId ).withNamespace(             namespaceId ).withProjectId( projectId ).withId( versionMetadata.getId() ).build();          ProjectVersionMetadataModel projectVersionMetadataModel =             getProjectVersionMetadataModelEntityManager().get( key );          if ( projectVersionMetadataModel == null )         {             projectVersionMetadataModel = getModelMapper().map( versionMetadata, ProjectVersionMetadataModel.class );             projectVersionMetadataModel.setRowId( key );         }         projectVersionMetadataModel.setProjectId( projectId );         projectVersionMetadataModel.setNamespace( new Namespace( namespaceId, new Repository( repositoryId ) ) );         projectVersionMetadataModel.setCiManagement( versionMetadata.getCiManagement() );         projectVersionMetadataModel.setIssueManagement( versionMetadata.getIssueManagement() );         projectVersionMetadataModel.setOrganization( versionMetadata.getOrganization() );         projectVersionMetadataModel.setScm( versionMetadata.getScm() );          projectVersionMetadataModel.setMailingLists( versionMetadata.getMailingLists() );         projectVersionMetadataModel.setDependencies( versionMetadata.getDependencies() );         projectVersionMetadataModel.setLicenses( versionMetadata.getLicenses() );          try         {             getProjectVersionMetadataModelEntityManager().put( projectVersionMetadataModel );              ArtifactMetadataModel artifactMetadataModel = new ArtifactMetadataModel();             artifactMetadataModel.setArtifactMetadataModelId(                 new ArtifactMetadataModel.KeyBuilder().withId( versionMetadata.getId() ).withRepositoryId(                     repositoryId ).withNamespace( namespaceId ).withProjectVersion(                     versionMetadata.getVersion() ).withProject( projectId ).build()             );             artifactMetadataModel.setRepositoryId( repositoryId );             artifactMetadataModel.setNamespace( namespaceId );             artifactMetadataModel.setProject( projectId );             artifactMetadataModel.setProjectVersion( versionMetadata.getVersion() );             artifactMetadataModel.setVersion( versionMetadata.getVersion() );             // facets etc...             updateFacets( versionMetadata, artifactMetadataModel );         }         catch ( PersistenceException e )         {             throw new MetadataRepositoryException( e.getMessage(), e );         }*/
block|}
annotation|@
name|Override
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|String
name|key
init|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repoId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ColumnFamilyResult
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnFamilyResult
init|=
name|this
operator|.
name|projectVersionMetadataModelTemplate
operator|.
name|queryColumns
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id"
argument_list|,
literal|"description"
argument_list|,
literal|"name"
argument_list|,
literal|"namespaceId"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"incomplete"
argument_list|,
literal|"projectId"
argument_list|,
literal|"url"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|columnFamilyResult
operator|.
name|hasResults
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProjectVersionMetadata
name|projectVersionMetadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|projectVersionMetadata
operator|.
name|setId
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setDescription
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setName
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setIncomplete
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"incomplete"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectVersionMetadata
operator|.
name|setUrl
argument_list|(
name|columnFamilyResult
operator|.
name|getString
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          ProjectVersionMetadataModel projectVersionMetadataModel =             getProjectVersionMetadataModelEntityManager().get( key );          if ( projectVersionMetadataModel == null )         {             logger.debug(                 "getProjectVersion repoId: '{}', namespace: '{}', projectId: '{}', projectVersion: {} -> not found",                 repoId, namespace, projectId, projectVersion );             return null;         }          ProjectVersionMetadata projectVersionMetadata =             getModelMapper().map( projectVersionMetadataModel, ProjectVersionMetadata.class );          logger.debug( "getProjectVersion repoId: '{}', namespace: '{}', projectId: '{}', projectVersion: {} -> {}",                       repoId, namespace, projectId, projectVersion, projectVersionMetadata );          projectVersionMetadata.setCiManagement( projectVersionMetadataModel.getCiManagement() );         projectVersionMetadata.setIssueManagement( projectVersionMetadataModel.getIssueManagement() );         projectVersionMetadata.setOrganization( projectVersionMetadataModel.getOrganization() );         projectVersionMetadata.setScm( projectVersionMetadataModel.getScm() );          // FIXME complete collections !!          // facets         final List<MetadataFacetModel> metadataFacetModels = new ArrayList<MetadataFacetModel>();         // FIXME use cql query         getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()         {             @Override             public Boolean apply( MetadataFacetModel metadataFacetModel )             {                 if ( metadataFacetModel != null )                 {                     if ( StringUtils.equals( repoId, metadataFacetModel.getArtifactMetadataModel().getRepositoryId() )&& StringUtils.equals( namespace, metadataFacetModel.getArtifactMetadataModel().getNamespace() )&& StringUtils.equals( projectId, metadataFacetModel.getArtifactMetadataModel().getProject() )&& StringUtils.equals( projectVersion,                                                metadataFacetModel.getArtifactMetadataModel().getProjectVersion() ) )                     {                         metadataFacetModels.add( metadataFacetModel );                     }                 }                 return Boolean.TRUE;             }         } );         Map<String, Map<String, String>> metadataFacetsPerFacetIds = new HashMap<String, Map<String, String>>();         for ( MetadataFacetModel metadataFacetModel : metadataFacetModels )         {              Map<String, String> metaValues = metadataFacetsPerFacetIds.get( metadataFacetModel.getFacetId() );             if ( metaValues == null )             {                 metaValues = new HashMap<String, String>();                 metadataFacetsPerFacetIds.put( metadataFacetModel.getFacetId(), metaValues );             }             metaValues.put( metadataFacetModel.getKey(), metadataFacetModel.getValue() );          }          if ( !metadataFacetsPerFacetIds.isEmpty() )         {             for ( Map.Entry<String, Map<String, String>> entry : metadataFacetsPerFacetIds.entrySet() )             {                 MetadataFacetFactory metadataFacetFactory = metadataFacetFactories.get( entry.getKey() );                 if ( metadataFacetFactory != null )                 {                     MetadataFacet metadataFacet = metadataFacetFactory.createMetadataFacet( repoId, entry.getKey() );                     metadataFacet.fromProperties( entry.getValue() );                     projectVersionMetadata.addFacet( metadataFacet );                 }             }         }         */
return|return
name|projectVersionMetadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespaceId
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifactMeta
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Namespace
name|namespace
init|=
name|getNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|updateOrAddNamespace
argument_list|(
name|repositoryId
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
block|}
name|ProjectMetadata
name|projectMetadata
init|=
operator|new
name|ProjectMetadata
argument_list|()
decl_stmt|;
name|projectMetadata
operator|.
name|setId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectMetadata
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|updateProject
argument_list|(
name|repositoryId
argument_list|,
name|projectMetadata
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|ArtifactMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProject
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withProjectVersion
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// exists?
name|boolean
name|exists
init|=
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
comment|// updater
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|updater
operator|.
name|setLong
argument_list|(
literal|"fileLastModified"
argument_list|,
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setLong
argument_list|(
literal|"whenGathered"
argument_list|,
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setLong
argument_list|(
literal|"size"
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"md5"
argument_list|,
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"sha1"
argument_list|,
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataModelFamilyName
argument_list|()
decl_stmt|;
comment|// create
name|this
operator|.
name|artifactMetadataTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"id"
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespaceId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"project"
argument_list|,
name|artifactMeta
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"projectVersion"
argument_list|,
name|artifactMeta
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"version"
argument_list|,
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"fileLastModified"
argument_list|,
name|artifactMeta
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"size"
argument_list|,
name|artifactMeta
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"md5"
argument_list|,
name|artifactMeta
operator|.
name|getMd5
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"sha1"
argument_list|,
name|artifactMeta
operator|.
name|getSha1
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
comment|//
name|cf
argument_list|,
comment|//
name|column
argument_list|(
literal|"whenGathered"
argument_list|,
name|artifactMeta
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|key
operator|=
operator|new
name|ProjectVersionMetadataModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepository
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|projectId
argument_list|)
operator|.
name|withId
argument_list|(
name|projectVersion
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|exists
operator|=
name|this
operator|.
name|projectVersionMetadataModelTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|ProjectVersionMetadataModel
name|projectVersionMetadataModel
init|=
operator|new
name|ProjectVersionMetadataModel
argument_list|()
decl_stmt|;
name|projectVersionMetadataModel
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|projectVersionMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getProjectVersionMetadataModelFamilyName
argument_list|()
decl_stmt|;
name|projectVersionMetadataModelTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"id"
argument_list|,
name|artifactMeta
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ArtifactMetadataModel
name|artifactMetadataModel
init|=
operator|new
name|ArtifactMetadataModel
argument_list|()
decl_stmt|;
comment|// FIXME
comment|/*artifactMetadataModel.setArtifactMetadataModelId(             new ArtifactMetadataModel.KeyBuilder().withId( versionMetadata.getId() ).withRepositoryId(                 repositoryId ).withNamespace( namespaceId ).withProjectVersion(                 versionMetadata.getVersion() ).withProject( projectId ).build()         );*/
name|artifactMetadataModel
operator|.
name|setRepositoryId
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setNamespace
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setProjectVersion
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|artifactMetadataModel
operator|.
name|setVersion
argument_list|(
name|artifactMeta
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// now facets
name|updateFacets
argument_list|(
name|artifactMeta
argument_list|,
name|artifactMetadataModel
argument_list|)
expr_stmt|;
comment|/*        String namespaceKey =             new Namespace.KeyBuilder().withRepositoryId( repositoryId ).withNamespace( namespaceId ).build();         // create the namespace if not exists         Namespace namespace = getNamespaceEntityManager().get( namespaceKey );         if ( namespace == null )         {             namespace = updateOrAddNamespace( repositoryId, namespaceId );         }          // create the project if not exist         String projectKey = new Project.KeyBuilder().withNamespace( namespace ).withProjectId( projectId ).build();          Project project = getProjectEntityManager().get( projectKey );         if ( project == null )         {             project = new Project( projectKey, projectId, namespace );             try             {                 getProjectEntityManager().put( project );             }             catch ( PersistenceException e )             {                 throw new MetadataRepositoryException( e.getMessage(), e );             }         }          String key = new ArtifactMetadataModel.KeyBuilder().withNamespace( namespace ).withProject( projectId ).withId(             artifactMeta.getId() ).withProjectVersion( projectVersion ).build();          ArtifactMetadataModel artifactMetadataModel = getArtifactMetadataModelEntityManager().get( key );         if ( artifactMetadataModel == null )         {             artifactMetadataModel = new ArtifactMetadataModel( key, artifactMeta.getId(), repositoryId, namespaceId,                                                                artifactMeta.getProject(), projectVersion,                                                                artifactMeta.getVersion(),                                                                artifactMeta.getFileLastModified(),                                                                artifactMeta.getSize(), artifactMeta.getMd5(),                                                                artifactMeta.getSha1(), artifactMeta.getWhenGathered() );          }         else         {             artifactMetadataModel.setFileLastModified( artifactMeta.getFileLastModified().getTime() );             artifactMetadataModel.setWhenGathered( artifactMeta.getWhenGathered().getTime() );             artifactMetadataModel.setSize( artifactMeta.getSize() );             artifactMetadataModel.setMd5( artifactMeta.getMd5() );             artifactMetadataModel.setSha1( artifactMeta.getSha1() );             artifactMetadataModel.setVersion( artifactMeta.getVersion() );         }          try         {             getArtifactMetadataModelEntityManager().put( artifactMetadataModel );         }         catch ( PersistenceException e )         {             throw new MetadataRepositoryException( e.getMessage(), e );         }          key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repositoryId ).withNamespace(             namespace ).withProjectId( projectId ).withId( projectVersion ).build();          ProjectVersionMetadataModel projectVersionMetadataModel =             getProjectVersionMetadataModelEntityManager().get( key );          if ( projectVersionMetadataModel == null )         {             projectVersionMetadataModel = new ProjectVersionMetadataModel();             projectVersionMetadataModel.setRowId( key );             projectVersionMetadataModel.setProjectId( projectId );             projectVersionMetadataModel.setId( projectVersion );             projectVersionMetadataModel.setNamespace( namespace );              getProjectVersionMetadataModelEntityManager().put( projectVersionMetadataModel );          }          // now facets         updateFacets( artifactMeta, artifactMetadataModel );*/
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"version"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repoId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"namespaceId"
argument_list|,
name|namespace
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectId"
argument_list|,
name|projectId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"projectVersion"
argument_list|,
name|projectVersion
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|versions
return|;
comment|/*        final Set<String> versions = new HashSet<String>();         // FIXME use cql query         getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( repoId, artifactMetadataModel.getRepositoryId() )&& StringUtils.equals(                         namespace, artifactMetadataModel.getNamespace() )&& StringUtils.equals( projectId,                                                                                                  artifactMetadataModel.getProject() )&& StringUtils.equals( projectVersion, artifactMetadataModel.getProjectVersion() ) )                     {                         versions.add( artifactMetadataModel.getVersion() );                     }                 }                 return Boolean.TRUE;             }         } );          return versions;*/
block|}
comment|/**      * iterate over available facets to remove/add from the artifactMetadata      *      * @param facetedMetadata      * @param artifactMetadataModel only use for the key      */
specifier|private
name|void
name|updateFacets
parameter_list|(
specifier|final
name|FacetedMetadata
name|facetedMetadata
parameter_list|,
specifier|final
name|ArtifactMetadataModel
name|artifactMetadataModel
parameter_list|)
block|{
comment|/*        for ( final String facetId : metadataFacetFactories.keySet() )         {             MetadataFacet metadataFacet = facetedMetadata.getFacet( facetId );             if ( metadataFacet == null )             {                 continue;             }             // clean first              final List<MetadataFacetModel> metadataFacetModels = new ArrayList<MetadataFacetModel>();              getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()             {                 @Override                 public Boolean apply( MetadataFacetModel metadataFacetModel )                 {                     ArtifactMetadataModel tmp = metadataFacetModel.getArtifactMetadataModel();                     if ( StringUtils.equals( metadataFacetModel.getFacetId(), facetId )&& StringUtils.equals(                         tmp.getRepositoryId(), artifactMetadataModel.getRepositoryId() )&& StringUtils.equals(                         tmp.getNamespace(), artifactMetadataModel.getNamespace() )&& StringUtils.equals(                         tmp.getProject(), artifactMetadataModel.getProject() ) )                     {                         metadataFacetModels.add( metadataFacetModel );                     }                     return Boolean.TRUE;                 }             } );              getMetadataFacetModelEntityManager().remove( metadataFacetModels );              Map<String, String> properties = metadataFacet.toProperties();              final List<MetadataFacetModel> metadataFacetModelsToAdd =                 new ArrayList<MetadataFacetModel>( properties.size() );              for ( Map.Entry<String, String> entry : properties.entrySet() )             {                 String key = new MetadataFacetModel.KeyBuilder().withKey( entry.getKey() ).withArtifactMetadataModel(                     artifactMetadataModel ).withFacetId( facetId ).withName( metadataFacet.getName() ).build();                 MetadataFacetModel metadataFacetModel =                     new MetadataFacetModel( key, artifactMetadataModel, facetId, entry.getKey(), entry.getValue(),                                             metadataFacet.getName() );                 metadataFacetModelsToAdd.add( metadataFacetModel );             }              getMetadataFacetModelEntityManager().put( metadataFacetModelsToAdd );         }*/
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"name"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|facets
operator|.
name|add
argument_list|(
name|row
operator|.
name|getColumnSlice
argument_list|()
operator|.
name|getColumnByName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
return|return
operator|!
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataFacet
name|getMetadataFacet
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MetadataFacet
name|metadataFacet
init|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"key"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"value"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|metadataFacet
return|;
comment|/*         final List<MetadataFacetModel> facets = new ArrayList<MetadataFacetModel>();         this.getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()         {             @Override             public Boolean apply( MetadataFacetModel metadataFacetModel )             {                 if ( metadataFacetModel != null )                 {                     if ( StringUtils.equals( metadataFacetModel.getArtifactMetadataModel().getRepositoryId(),                                              repositoryId )&& StringUtils.equals( metadataFacetModel.getFacetId(),                                                                                    facetId )&& StringUtils.equals(                         metadataFacetModel.getName(), name ) )                     {                         facets.add( metadataFacetModel );                     }                 }                 return Boolean.TRUE;             }         } );          if ( facets.isEmpty() )         {             return null;         }          MetadataFacetFactory metadataFacetFactory = metadataFacetFactories.get( facetId );         if ( metadataFacetFactory == null )         {             return null;         }         MetadataFacet metadataFacet = metadataFacetFactory.createMetadataFacet( repositoryId, name );         Map<String, String> map = new HashMap<String, String>( facets.size() );         for ( MetadataFacetModel metadataFacetModel : facets )         {             map.put( metadataFacetModel.getKey(), metadataFacetModel.getValue() );         }         metadataFacet.fromProperties( map );         return metadataFacet;*/
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
if|if
condition|(
name|metadataFacet
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"facetId"
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
decl_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"facetId"
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadataFacet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|new
name|MetadataFacetModel
operator|.
name|KeyBuilder
argument_list|()
operator|.
name|withRepositoryId
argument_list|(
name|repositoryId
argument_list|)
operator|.
name|withFacetId
argument_list|(
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|isColumnsExist
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
block|{
comment|//metadataFacetModel = new MetadataFacetModel();
comment|// we need to store the repositoryId
comment|//ArtifactMetadataModel artifactMetadataModel = new ArtifactMetadataModel();
comment|//artifactMetadataModel.setRepositoryId( repositoryId );
comment|//metadataFacetModel.setArtifactMetadataModel( artifactMetadataModel );
comment|//metadataFacetModel.setId( key );
comment|//metadataFacetModel.setKey( entry.getKey() );
comment|//metadataFacetModel.setFacetId( metadataFacet.getFacetId() );
comment|//metadataFacetModel.setName( metadataFacet.getName() );
name|String
name|cf
init|=
name|this
operator|.
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
decl_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createMutator
argument_list|()
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"facetId"
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"name"
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"key"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|addInsertion
argument_list|(
name|key
argument_list|,
name|cf
argument_list|,
name|column
argument_list|(
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ColumnFamilyUpdater
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updater
init|=
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|createUpdater
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|updater
operator|.
name|setString
argument_list|(
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|update
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|facetId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getMetadataFacetModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"repositoryName"
argument_list|,
name|repositoryId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"facetId"
argument_list|,
name|facetId
argument_list|)
comment|//
operator|.
name|addEqualsExpression
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
comment|//
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|metadataFacetTemplate
operator|.
name|deleteRow
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|Date
name|startTime
parameter_list|,
specifier|final
name|Date
name|endTime
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|Keyspace
name|keyspace
init|=
name|cassandraArchivaManager
operator|.
name|getKeyspace
argument_list|()
decl_stmt|;
name|RangeSlicesQuery
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Long
argument_list|>
name|query
init|=
name|HFactory
comment|//
operator|.
name|createRangeSlicesQuery
argument_list|(
name|keyspace
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|StringSerializer
operator|.
name|get
argument_list|()
argument_list|,
comment|//
name|LongSerializer
operator|.
name|get
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnFamily
argument_list|(
name|cassandraArchivaManager
operator|.
name|getArtifactMetadataModelFamilyName
argument_list|()
argument_list|)
comment|//
operator|.
name|setColumnNames
argument_list|(
literal|"namespaceId"
argument_list|,
literal|"size"
argument_list|,
literal|"id"
argument_list|,
literal|"fileLastModified"
argument_list|,
literal|"md5"
argument_list|,
literal|"project"
argument_list|,
literal|"projectVersion"
argument_list|,
literal|"repositoryName"
argument_list|,
literal|"version"
argument_list|,
literal|"whenGathered"
argument_list|,
literal|"sha1"
argument_list|)
decl_stmt|;
comment|//
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|addGteExpression
argument_list|(
literal|"whenGathered"
argument_list|,
name|startTime
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|addLteExpression
argument_list|(
literal|"whenGathered"
argument_list|,
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryResult
argument_list|<
name|OrderedRows
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|LongSerializer
name|ls
init|=
name|LongSerializer
operator|.
name|get
argument_list|()
decl_stmt|;
name|StringSerializer
name|ss
init|=
name|StringSerializer
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Long
argument_list|>
name|row
range|:
name|result
operator|.
name|get
argument_list|()
control|)
block|{
name|ColumnSlice
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|columnSlice
init|=
name|row
operator|.
name|getColumnSlice
argument_list|()
decl_stmt|;
name|String
name|repositoryName
init|=
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"repositoryName"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|repositoryName
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|ArtifactMetadata
name|artifactMetadata
init|=
operator|new
name|ArtifactMetadata
argument_list|()
decl_stmt|;
name|artifactMetadata
operator|.
name|setNamespace
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"namespaceId"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSize
argument_list|(
name|ls
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"size"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setId
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setFileLastModified
argument_list|(
name|ls
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"fileLastModified"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setMd5
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"md5"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProject
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"project"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setProjectVersion
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"projectVersion"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setRepositoryId
argument_list|(
name|repositoryName
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setSha1
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"sha1"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setVersion
argument_list|(
name|ss
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadata
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|(
name|ls
operator|.
name|fromByteBuffer
argument_list|(
name|columnSlice
operator|.
name|getColumnByName
argument_list|(
literal|"whenGathered"
argument_list|)
operator|.
name|getValueBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|artifactMetadatas
operator|.
name|add
argument_list|(
name|artifactMetadata
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|artifactMetadatas
return|;
block|}
specifier|protected
name|void
name|populateFacets
parameter_list|(
specifier|final
name|ArtifactMetadata
name|artifactMetadata
parameter_list|)
block|{
comment|/*        final List<MetadataFacetModel> metadataFacetModels = new ArrayList<MetadataFacetModel>();          getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()         {             @Override             public Boolean apply( MetadataFacetModel metadataFacetModel )             {                 if ( metadataFacetModel != null )                 {                     ArtifactMetadataModel artifactMetadataModel = metadataFacetModel.getArtifactMetadataModel();                     if ( artifactMetadataModel != null )                     {                         if ( StringUtils.equals( artifactMetadata.getRepositoryId(),                                                  artifactMetadataModel.getRepositoryId() )&& StringUtils.equals(                             artifactMetadata.getNamespace(), artifactMetadataModel.getNamespace() )&& StringUtils.equals( artifactMetadata.getRepositoryId(),                                                    artifactMetadataModel.getRepositoryId() )&& StringUtils.equals(                             artifactMetadata.getProject(), artifactMetadataModel.getProject() )&& StringUtils.equals(                             artifactMetadata.getId(), artifactMetadataModel.getId() ) )                         {                             metadataFacetModels.add( metadataFacetModel );                         }                     }                 }                 return Boolean.TRUE;             }         } );         Map<String, Map<String, String>> facetValuesPerFacet = new HashMap<String, Map<String, String>>();          for ( MetadataFacetModel model : metadataFacetModels )         {             Map<String, String> values = facetValuesPerFacet.get( model.getName() );             if ( values == null )             {                 values = new HashMap<String, String>();             }             values.put( model.getKey(), model.getValue() );             facetValuesPerFacet.put( model.getName(), values );         }          for ( Map.Entry<String, Map<String, String>> entry : facetValuesPerFacet.entrySet() )         {             MetadataFacetFactory factory = metadataFacetFactories.get( entry.getKey() );             if ( factory == null )             {                 continue;             }             MetadataFacet metadataFacet =                 factory.createMetadataFacet( artifactMetadata.getRepositoryId(), entry.getKey() );             metadataFacet.fromProperties( entry.getValue() );             artifactMetadata.addFacet( metadataFacet );         }*/
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|checksum
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|/*        final List<ArtifactMetadataModel> artifactMetadataModels = new ArrayList<ArtifactMetadataModel>();          if ( logger.isDebugEnabled() )         {             logger.debug( "all ArtifactMetadataModel: {}", getArtifactMetadataModelEntityManager().getAll() );         }          // FIXME cql query         getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( artifactMetadataModel.getRepositoryId(), repositoryId )&& artifactMetadataModel.getNamespace() != null&&                         artifactMetadataModel.getProject() != null&& artifactMetadataModel.getId() != null )                     {                          if ( StringUtils.equals( checksum, artifactMetadataModel.getMd5() ) || StringUtils.equals(                             checksum, artifactMetadataModel.getSha1() ) )                         {                             artifactMetadataModels.add( artifactMetadataModel );                         }                     }                 }                 return Boolean.TRUE;             }         } );         List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( artifactMetadataModels.size() );          for ( ArtifactMetadataModel model : artifactMetadataModels )         {             ArtifactMetadata artifactMetadata = getModelMapper().map( model, ArtifactMetadata.class );             populateFacets( artifactMetadata );             artifactMetadatas.add( artifactMetadata );         }          logger.debug( "getArtifactsByChecksum repositoryId: {}, checksum: {}, artifactMetadatas: {}", repositoryId,                       checksum, artifactMetadatas );          return artifactMetadatas;*/
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|/*        logger.debug( "removeArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'",                       repositoryId, namespace, project, version, id );         String key =             new ArtifactMetadataModel.KeyBuilder().withRepositoryId( repositoryId ).withNamespace( namespace ).withId(                 id ).withProjectVersion( version ).withProject( project ).build();          ArtifactMetadataModel artifactMetadataModel = new ArtifactMetadataModel();         artifactMetadataModel.setArtifactMetadataModelId( key );          getArtifactMetadataModelEntityManager().remove( artifactMetadataModel );          key =             new ProjectVersionMetadataModel.KeyBuilder().withId( version ).withRepository( repositoryId ).withNamespace(                 namespace ).withProjectId( project ).build();          ProjectVersionMetadataModel projectVersionMetadataModel = new ProjectVersionMetadataModel();         projectVersionMetadataModel.setRowId( key );          getProjectVersionMetadataModelEntityManager().remove( projectVersionMetadataModel );*/
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removeArtifact repositoryId: '{}', namespace: '{}', project: '{}', version: '{}', id: '{}'"
argument_list|,
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|artifactMetadata
operator|.
name|getProject
argument_list|()
argument_list|,
name|baseVersion
argument_list|,
name|artifactMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        String key =             new ArtifactMetadataModel.KeyBuilder().withRepositoryId( artifactMetadata.getRepositoryId() ).withNamespace(                 artifactMetadata.getNamespace() ).withId( artifactMetadata.getId() ).withProjectVersion(                 baseVersion ).withProject( artifactMetadata.getProject() ).build();          ArtifactMetadataModel artifactMetadataModel = new ArtifactMetadataModel();         artifactMetadataModel.setArtifactMetadataModelId( key );          getArtifactMetadataModelEntityManager().remove( artifactMetadataModel );*/
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifact
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|/*        final List<ArtifactMetadataModel> artifactMetadataModels = new ArrayList<ArtifactMetadataModel>();         getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( repositoryId, artifactMetadataModel.getRepositoryId() )&& StringUtils.equals( namespace, artifactMetadataModel.getNamespace() )&& StringUtils.equals(                         project, artifactMetadataModel.getProject() )&& StringUtils.equals( project,                                                                                              artifactMetadataModel.getVersion() ) )                     {                         artifactMetadataModels.add( artifactMetadataModel );                     }                 }                 return Boolean.TRUE;             }         } );         getArtifactMetadataModelEntityManager().remove( artifactMetadataModels );*/
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
specifier|final
name|String
name|repositoryId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|/*        final List<ArtifactMetadataModel> artifactMetadataModels = new ArrayList<ArtifactMetadataModel>();         // FIXME use cql query !         getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )            {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( repositoryId, artifactMetadataModel.getRepositoryId() ) )                     {                         artifactMetadataModels.add( artifactMetadataModel );                     }                 }                  return Boolean.TRUE;             }         } );          List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( artifactMetadataModels.size() );          for ( ArtifactMetadataModel model : artifactMetadataModels )         {             ArtifactMetadata artifactMetadata = getModelMapper().map( model, ArtifactMetadata.class );             populateFacets( artifactMetadata );             artifactMetadatas.add( artifactMetadata );         }          return artifactMetadatas;*/
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
comment|// FIXME implement this
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|/*         final List<ArtifactMetadataModel> artifactMetadataModels = new ArrayList<ArtifactMetadataModel>();          // FIXME use cql query          getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( repoId, artifactMetadataModel.getRepositoryId() )&& StringUtils.equals(                         namespace, artifactMetadataModel.getNamespace() )&& StringUtils.equals( projectId,                                                                                                  artifactMetadataModel.getProject() )&& StringUtils.equals( projectVersion, artifactMetadataModel.getProjectVersion() ) )                     {                         artifactMetadataModels.add( artifactMetadataModel );                     }                 }                 return Boolean.TRUE;             }         } );          logger.debug( "removeProjectVersions:{}", artifactMetadataModels );         if ( artifactMetadataModels.isEmpty() )         {             return;         }          getArtifactMetadataModelEntityManager().remove( artifactMetadataModels );          String key = new ProjectVersionMetadataModel.KeyBuilder().withProjectId( projectId ).withId(             projectVersion ).withRepository( repoId ).withNamespace( namespace ).build();          ProjectVersionMetadataModel projectVersionMetadataModel = new ProjectVersionMetadataModel();         projectVersionMetadataModel.setRowId( key );          getProjectVersionMetadataModelEntityManager().remove( projectVersionMetadataModel );         */
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
specifier|final
name|String
name|repoId
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|projectId
parameter_list|,
specifier|final
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataResolutionException
block|{
specifier|final
name|List
argument_list|<
name|ArtifactMetadataModel
argument_list|>
name|artifactMetadataModels
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadataModel
argument_list|>
argument_list|()
decl_stmt|;
comment|/*         // FIXME use cql query !         getArtifactMetadataModelEntityManager().visitAll( new Function<ArtifactMetadataModel, Boolean>()         {             @Override             public Boolean apply( ArtifactMetadataModel artifactMetadataModel )             {                 if ( artifactMetadataModel != null )                 {                     if ( StringUtils.equals( repoId, artifactMetadataModel.getRepositoryId() )&& StringUtils.equals(                         namespace, artifactMetadataModel.getNamespace() )&& StringUtils.equals( projectId,                                                                                                  artifactMetadataModel.getProject() )&& StringUtils.equals( projectVersion, artifactMetadataModel.getProjectVersion() ) )                     {                         artifactMetadataModels.add( artifactMetadataModel );                     }                 }                  return Boolean.TRUE;             }         } );         */
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifactMetadatas
init|=
operator|new
name|ArrayList
argument_list|<
name|ArtifactMetadata
argument_list|>
argument_list|(
name|artifactMetadataModels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|/*         for ( ArtifactMetadataModel model : artifactMetadataModels )         {             ArtifactMetadata artifactMetadata = getModelMapper().map( model, ArtifactMetadata.class );             populateFacets( artifactMetadata );             artifactMetadatas.add( artifactMetadata );         }          // retrieve facets         final List<MetadataFacetModel> metadataFacetModels = new ArrayList<MetadataFacetModel>();         getMetadataFacetModelEntityManager().visitAll( new Function<MetadataFacetModel, Boolean>()         {             @Override             public Boolean apply( MetadataFacetModel metadataFacetModel )             {                 if ( metadataFacetModel != null )                 {                     if ( StringUtils.equals( repoId, metadataFacetModel.getArtifactMetadataModel().getRepositoryId() )&& StringUtils.equals( namespace, metadataFacetModel.getArtifactMetadataModel().getNamespace() )&& StringUtils.equals( projectId, metadataFacetModel.getArtifactMetadataModel().getProject() )&& StringUtils.equals( projectVersion,                                                metadataFacetModel.getArtifactMetadataModel().getProjectVersion() ) )                     {                         metadataFacetModels.add( metadataFacetModel );                     }                  }                 return Boolean.TRUE;             }         } );          // rebuild MetadataFacet for artifacts          for ( final ArtifactMetadata artifactMetadata : artifactMetadatas )         {             Iterable<MetadataFacetModel> metadataFacetModelIterable =                 Iterables.filter( metadataFacetModels, new Predicate<MetadataFacetModel>()                 {                     @Override                     public boolean apply( MetadataFacetModel metadataFacetModel )                     {                         if ( metadataFacetModel != null )                         {                             return StringUtils.equals( artifactMetadata.getVersion(),                                                        metadataFacetModel.getArtifactMetadataModel().getVersion() );                         }                         return false;                     }                 } );             Iterator<MetadataFacetModel> iterator = metadataFacetModelIterable.iterator();             Map<String, List<MetadataFacetModel>> metadataFacetValuesPerFacetId =                 new HashMap<String, List<MetadataFacetModel>>();             while ( iterator.hasNext() )             {                 MetadataFacetModel metadataFacetModel = iterator.next();                 List<MetadataFacetModel> values = metadataFacetValuesPerFacetId.get( metadataFacetModel.getName() );                 if ( values == null )                 {                     values = new ArrayList<MetadataFacetModel>();                     metadataFacetValuesPerFacetId.put( metadataFacetModel.getFacetId(), values );                 }                 values.add( metadataFacetModel );              }              for ( Map.Entry<String, List<MetadataFacetModel>> entry : metadataFacetValuesPerFacetId.entrySet() )             {                 MetadataFacetFactory metadataFacetFactory = metadataFacetFactories.get( entry.getKey() );                 if ( metadataFacetFactory != null )                 {                     List<MetadataFacetModel> facetModels = entry.getValue();                     if ( !facetModels.isEmpty() )                     {                         MetadataFacet metadataFacet =                             metadataFacetFactory.createMetadataFacet( repoId, facetModels.get( 0 ).getName() );                         Map<String, String> props = new HashMap<String, String>( facetModels.size() );                         for ( MetadataFacetModel metadataFacetModel : facetModels )                         {                             props.put( metadataFacetModel.getKey(), metadataFacetModel.getValue() );                         }                         metadataFacet.fromProperties( props );                         artifactMetadata.addFacet( metadataFacet );                     }                 }             }           }         */
return|return
name|artifactMetadatas
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|MetadataRepositoryException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revert
parameter_list|()
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"CassandraMetadataRepository cannot revert"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canObtainAccess
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|obtainAccess
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Access using "
operator|+
name|aClass
operator|+
literal|" is not supported on the cassandra metadata storage"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
class|class
name|ModelMapperHolder
block|{
specifier|private
specifier|static
name|ModelMapper
name|MODEL_MAPPER
init|=
operator|new
name|ModelMapper
argument_list|()
decl_stmt|;
block|}
specifier|protected
name|ModelMapper
name|getModelMapper
parameter_list|()
block|{
return|return
name|ModelMapperHolder
operator|.
name|MODEL_MAPPER
return|;
block|}
block|}
end_class

end_unit

