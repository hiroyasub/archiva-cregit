begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|file
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|CiManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|IssueManagement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MailingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|MetadataFacetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Organization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ProjectVersionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|Scm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|MetadataRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
class|class
name|FileMetadataRepository
implements|implements
name|MetadataRepository
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
decl_stmt|;
specifier|private
specifier|final
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileMetadataRepository
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT_METADATA_KEY
init|=
literal|"project-metadata"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT_VERSION_METADATA_KEY
init|=
literal|"version-metadata"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE_METADATA_KEY
init|=
literal|"namespace-metadata"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METADATA_KEY
init|=
literal|"metadata"
decl_stmt|;
specifier|public
name|FileMetadataRepository
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFacetFactory
argument_list|>
name|metadataFacetFactories
parameter_list|,
name|ArchivaConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|metadataFacetFactories
operator|=
name|metadataFacetFactories
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
specifier|private
name|File
name|getBaseDirectory
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
comment|// TODO: should be configurable, like the index
name|String
name|basedir
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
operator|.
name|get
argument_list|(
name|repoId
argument_list|)
operator|.
name|getLocation
argument_list|()
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|".archiva"
argument_list|)
return|;
block|}
specifier|private
name|File
name|getDirectory
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
literal|"content"
argument_list|)
return|;
block|}
specifier|public
name|void
name|updateProject
parameter_list|(
name|String
name|repoId
parameter_list|,
name|ProjectMetadata
name|project
parameter_list|)
block|{
name|updateProject
argument_list|(
name|repoId
argument_list|,
name|project
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|project
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateProject
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|id
parameter_list|)
block|{
comment|// TODO: this is a more braindead implementation than we would normally expect, for prototyping purposes
name|updateNamespace
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|namespaceDirectory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"namespace"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|properties
argument_list|,
operator|new
name|File
argument_list|(
name|namespaceDirectory
argument_list|,
name|id
argument_list|)
argument_list|,
name|PROJECT_METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO!
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateProjectVersion
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|)
block|{
name|updateProject
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
comment|// remove properties that are not references or artifacts
for|for
control|(
name|Object
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"facetIds"
argument_list|)
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// clear the facet contents so old properties are no longer written
name|clearMetadataFacetProperties
argument_list|(
name|versionMetadata
operator|.
name|getFacetList
argument_list|()
argument_list|,
name|properties
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"name"
argument_list|,
name|versionMetadata
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"description"
argument_list|,
name|versionMetadata
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"url"
argument_list|,
name|versionMetadata
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"incomplete"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|versionMetadata
operator|.
name|isIncomplete
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"scm.connection"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"scm.developerConnection"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getDeveloperConnection
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"scm.url"
argument_list|,
name|versionMetadata
operator|.
name|getScm
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ci.system"
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ci.url"
argument_list|,
name|versionMetadata
operator|.
name|getCiManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"issue.system"
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"issue.url"
argument_list|,
name|versionMetadata
operator|.
name|getIssueManagement
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"org.name"
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"org.url"
argument_list|,
name|versionMetadata
operator|.
name|getOrganization
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|versionMetadata
operator|.
name|getLicenses
argument_list|()
control|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"license."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"license."
operator|+
name|i
operator|+
literal|".url"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|MailingList
name|mailingList
range|:
name|versionMetadata
operator|.
name|getMailingLists
argument_list|()
control|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".archive"
argument_list|,
name|mailingList
operator|.
name|getMainArchiveUrl
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|mailingList
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".post"
argument_list|,
name|mailingList
operator|.
name|getPostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".unsubscribe"
argument_list|,
name|mailingList
operator|.
name|getUnsubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".subscribe"
argument_list|,
name|mailingList
operator|.
name|getSubscribeAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"mailingList."
operator|+
name|i
operator|+
literal|".otherArchives"
argument_list|,
name|join
argument_list|(
name|mailingList
operator|.
name|getOtherArchives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
name|ProjectVersionReference
name|reference
init|=
operator|new
name|ProjectVersionReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setProjectId
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setProjectVersion
argument_list|(
name|versionMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setReferenceType
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|DEPENDENCY
argument_list|)
expr_stmt|;
for|for
control|(
name|Dependency
name|dependency
range|:
name|versionMetadata
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".classifier"
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".scope"
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".systemPath"
argument_list|,
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".artifactId"
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".groupId"
argument_list|,
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".version"
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".type"
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"dependency."
operator|+
name|i
operator|+
literal|".optional"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|dependency
operator|.
name|isOptional
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateProjectReference
argument_list|(
name|repoId
argument_list|,
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|facetIds
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|versionMetadata
operator|.
name|getFacetIds
argument_list|()
argument_list|)
decl_stmt|;
name|facetIds
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"facetIds"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"facetIds"
argument_list|,
name|join
argument_list|(
name|facetIds
argument_list|)
argument_list|)
expr_stmt|;
name|updateProjectVersionFacets
argument_list|(
name|versionMetadata
argument_list|,
name|properties
argument_list|)
expr_stmt|;
try|try
block|{
name|writeProperties
argument_list|(
name|properties
argument_list|,
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateProjectVersionFacets
parameter_list|(
name|ProjectVersionMetadata
name|versionMetadata
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
for|for
control|(
name|MetadataFacet
name|facet
range|:
name|versionMetadata
operator|.
name|getFacetList
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|facet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
operator|+
literal|":"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|clearMetadataFacetProperties
parameter_list|(
name|Collection
argument_list|<
name|MetadataFacet
argument_list|>
name|facetList
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|propsToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetadataFacet
name|facet
range|:
name|facetList
control|)
block|{
for|for
control|(
name|Object
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|keyString
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
name|keyString
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
name|facet
operator|.
name|getFacetId
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|propsToRemove
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Object
name|key
range|:
name|propsToRemove
control|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateProjectReference
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ProjectVersionReference
name|reference
parameter_list|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ref:lastReferenceNum"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
operator|+
literal|1
decl_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ref:lastReferenceNum"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".namespace"
argument_list|,
name|reference
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".projectId"
argument_list|,
name|reference
operator|.
name|getProjectId
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".projectVersion"
argument_list|,
name|reference
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|properties
argument_list|,
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".referenceType"
argument_list|,
name|reference
operator|.
name|getReferenceType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|writeProperties
argument_list|(
name|properties
argument_list|,
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateNamespace
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
try|try
block|{
name|File
name|namespaceDirectory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"namespace"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|properties
argument_list|,
name|namespaceDirectory
argument_list|,
name|NAMESPACE_METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO!
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataFacets
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|facetId
parameter_list|)
block|{
name|File
name|directory
init|=
name|getMetadataDirectory
argument_list|(
name|repoId
argument_list|,
name|facetId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|recurse
argument_list|(
name|facets
argument_list|,
literal|""
argument_list|,
name|directory
argument_list|)
expr_stmt|;
return|return
name|facets
return|;
block|}
specifier|public
name|boolean
name|hasMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
comment|// TODO could be improved a bit
return|return
operator|!
name|getMetadataFacets
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|void
name|recurse
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|facets
parameter_list|,
name|String
name|prefix
parameter_list|,
name|File
name|directory
parameter_list|)
block|{
name|File
index|[]
name|list
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|list
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|recurse
argument_list|(
name|facets
argument_list|,
name|prefix
operator|+
literal|"/"
operator|+
name|dir
operator|.
name|getName
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|METADATA_KEY
operator|+
literal|".properties"
argument_list|)
condition|)
block|{
name|facets
operator|.
name|add
argument_list|(
name|prefix
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|MetadataFacet
name|getMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Properties
name|properties
decl_stmt|;
try|try
block|{
name|properties
operator|=
name|readProperties
argument_list|(
operator|new
name|File
argument_list|(
name|getMetadataDirectory
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
argument_list|,
name|name
argument_list|)
argument_list|,
name|METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|MetadataFacet
name|metadataFacet
init|=
literal|null
decl_stmt|;
name|MetadataFacetFactory
name|metadataFacetFactory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFacetFactory
operator|!=
literal|null
condition|)
block|{
name|metadataFacet
operator|=
name|metadataFacetFactory
operator|.
name|createMetadataFacet
argument_list|(
name|repositoryId
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
operator|new
name|ArrayList
argument_list|(
name|properties
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadataFacet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|metadataFacet
return|;
block|}
specifier|public
name|void
name|addMetadataFacet
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|metadataFacet
operator|.
name|toProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getMetadataDirectory
argument_list|(
name|repositoryId
argument_list|,
name|metadataFacet
operator|.
name|getFacetId
argument_list|()
argument_list|)
argument_list|,
name|metadataFacet
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|writeProperties
argument_list|(
name|properties
argument_list|,
name|directory
argument_list|,
name|METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO!
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeMetadataFacets
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|facetId
parameter_list|)
block|{
name|File
name|dir
init|=
name|getMetadataDirectory
argument_list|(
name|repositoryId
argument_list|,
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot delete the metadata repository {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeMetadataFacet
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|facetId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|getMetadataDirectory
argument_list|(
name|repoId
argument_list|,
name|facetId
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot delete the metadata repository {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByDateRange
parameter_list|(
name|String
name|repoId
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
comment|// TODO: this is quite slow - if we are to persist with this repository implementation we should build an index
comment|//  of this information (eg. in Lucene, as before)
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|getRootNamespaces
argument_list|(
name|repoId
argument_list|)
control|)
block|{
name|getArtifactsByDateRange
argument_list|(
name|artifacts
argument_list|,
name|repoId
argument_list|,
name|ns
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|artifacts
argument_list|,
operator|new
name|ArtifactComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|artifacts
return|;
block|}
specifier|private
name|void
name|getArtifactsByDateRange
parameter_list|(
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|ns
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|getNamespaces
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|)
control|)
block|{
name|getArtifactsByDateRange
argument_list|(
name|artifacts
argument_list|,
name|repoId
argument_list|,
name|ns
operator|+
literal|"."
operator|+
name|namespace
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|project
range|:
name|getProjects
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|version
range|:
name|getProjectVersions
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|)
control|)
block|{
for|for
control|(
name|ArtifactMetadata
name|artifact
range|:
name|getArtifacts
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|,
name|version
argument_list|)
control|)
block|{
if|if
condition|(
name|startTime
operator|==
literal|null
operator|||
name|startTime
operator|.
name|before
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|endTime
operator|==
literal|null
operator|||
name|endTime
operator|.
name|after
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArtifactMetadata
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
operator|&&
literal|"artifact"
operator|.
name|equals
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|field
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ArtifactMetadata
name|artifact
init|=
name|artifacts
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|==
literal|null
condition|)
block|{
name|artifact
operator|=
operator|new
name|ArtifactMetadata
argument_list|()
expr_stmt|;
name|artifact
operator|.
name|setRepositoryId
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProject
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setProjectVersion
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"updated"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setFileLastModified
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setSize
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"whenGathered"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setWhenGathered
argument_list|(
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setVersion
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"md5"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setMd5
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"sha1"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|artifact
operator|.
name|setSha1
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"facetIds"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|propertyPrefix
init|=
literal|"artifact:facet:"
operator|+
name|id
operator|+
literal|":"
decl_stmt|;
for|for
control|(
name|String
name|facetId
range|:
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|MetadataFacetFactory
name|factory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Attempted to load unknown artifact metadata facet: "
operator|+
name|facetId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetadataFacet
name|facet
init|=
name|factory
operator|.
name|createMetadataFacet
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|propertyPrefix
operator|+
name|facet
operator|.
name|getFacetId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
operator|new
name|ArrayList
argument_list|(
name|properties
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|property
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|facet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updateArtifactFacets
argument_list|(
name|artifact
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|artifacts
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|void
name|save
parameter_list|()
block|{
comment|// it's all instantly persisted
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing additional to close
block|}
specifier|public
name|void
name|revert
parameter_list|()
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Attempted to revert a session, but the file-based repository storage doesn't support it"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canObtainAccess
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|obtainAccess
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Access using "
operator|+
name|aClass
operator|+
literal|" is not supported on the file metadata storage"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|updateArtifactFacets
parameter_list|(
name|ArtifactMetadata
name|artifact
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
name|String
name|propertyPrefix
init|=
literal|"artifact:facet:"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
operator|+
literal|":"
decl_stmt|;
for|for
control|(
name|MetadataFacet
name|facet
range|:
name|artifact
operator|.
name|getFacetList
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|facet
operator|.
name|toProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|propertyPrefix
operator|+
name|facet
operator|.
name|getFacetId
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ManagedRepositoryConfiguration
name|managedRepositoryConfiguration
range|:
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getManagedRepositories
argument_list|()
control|)
block|{
name|repositories
operator|.
name|add
argument_list|(
name|managedRepositoryConfiguration
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|repositories
return|;
block|}
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifactsByChecksum
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|checksum
parameter_list|)
block|{
comment|// TODO: this is quite slow - if we are to persist with this repository implementation we should build an index
comment|//  of this information (eg. in Lucene, as before)
comment|// alternatively, we could build a referential tree in the content repository, however it would need some levels
comment|// of depth to avoid being too broad to be useful (eg. /repository/checksums/a/ab/abcdef1234567)
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|getRootNamespaces
argument_list|(
name|repositoryId
argument_list|)
control|)
block|{
name|getArtifactsByChecksum
argument_list|(
name|artifacts
argument_list|,
name|repositoryId
argument_list|,
name|ns
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|project
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
try|try
block|{
name|File
name|namespaceDirectory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repositoryId
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|namespaceDirectory
argument_list|)
expr_stmt|;
comment|//Properties properties = new Properties();
comment|//properties.setProperty( "namespace", namespace );
comment|//writeProperties( properties, namespaceDirectory, NAMESPACE_METADATA_KEY );
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|ArtifactMetadata
name|artifactMetadata
parameter_list|,
name|String
name|baseVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|artifactMetadata
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
argument_list|,
name|artifactMetadata
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"/"
operator|+
name|artifactMetadata
operator|.
name|getProject
argument_list|()
operator|+
literal|"/"
operator|+
name|baseVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|artifactMetadata
operator|.
name|getId
argument_list|()
decl_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:updated:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:whenGathered:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:size:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:md5:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:sha1:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:version:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:facetIds:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"artifact:facet:"
operator|+
name|id
operator|+
literal|":"
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|writeProperties
argument_list|(
name|properties
argument_list|,
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|project
operator|+
literal|"/"
operator|+
name|version
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:updated:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:whenGathered:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:size:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:md5:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:sha1:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:version:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"artifact:facetIds:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"artifact:facet:"
operator|+
name|id
operator|+
literal|":"
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
comment|//writeProperties( properties, directory, PROJECT_VERSION_METADATA_KEY );
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * FIXME implements this !!!!      *      * @param repositoryId      * @param namespace      * @param project      * @param projectVersion      * @param metadataFacet  will remove artifacts which have this {@link MetadataFacet} using equals      * @throws MetadataRepositoryException      */
specifier|public
name|void
name|removeArtifact
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|MetadataFacet
name|metadataFacet
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|File
name|dir
init|=
name|getDirectory
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot delete repository {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getArtifactsByChecksum
parameter_list|(
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|checksum
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|getNamespaces
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|)
control|)
block|{
name|getArtifactsByChecksum
argument_list|(
name|artifacts
argument_list|,
name|repositoryId
argument_list|,
name|ns
operator|+
literal|"."
operator|+
name|namespace
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|project
range|:
name|getProjects
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|version
range|:
name|getProjectVersions
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|)
control|)
block|{
for|for
control|(
name|ArtifactMetadata
name|artifact
range|:
name|getArtifacts
argument_list|(
name|repositoryId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|,
name|version
argument_list|)
control|)
block|{
if|if
condition|(
name|checksum
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getMd5
argument_list|()
argument_list|)
operator|||
name|checksum
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getSha1
argument_list|()
argument_list|)
condition|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|File
name|getMetadataDirectory
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|facetId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
literal|"facets/"
operator|+
name|facetId
argument_list|)
return|;
block|}
specifier|private
name|String
name|join
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateArtifact
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|,
name|ArtifactMetadata
name|artifact
parameter_list|)
block|{
name|ProjectVersionMetadata
name|metadata
init|=
operator|new
name|ProjectVersionMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setId
argument_list|(
name|projectVersion
argument_list|)
expr_stmt|;
name|updateProjectVersion
argument_list|(
name|repoId
argument_list|,
name|namespace
argument_list|,
name|projectId
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|clearMetadataFacetProperties
argument_list|(
name|artifact
operator|.
name|getFacetList
argument_list|()
argument_list|,
name|properties
argument_list|,
literal|"artifact:facet:"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|artifact
operator|.
name|getId
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"artifact:updated:"
operator|+
name|id
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|artifact
operator|.
name|getFileLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"artifact:whenGathered:"
operator|+
name|id
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|artifact
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"artifact:size:"
operator|+
name|id
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|artifact
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getMd5
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"artifact:md5:"
operator|+
name|id
argument_list|,
name|artifact
operator|.
name|getMd5
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|getSha1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"artifact:sha1:"
operator|+
name|id
argument_list|,
name|artifact
operator|.
name|getSha1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"artifact:version:"
operator|+
name|id
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|facetIds
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|artifact
operator|.
name|getFacetIds
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|property
init|=
literal|"artifact:facetIds:"
operator|+
name|id
decl_stmt|;
name|facetIds
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|join
argument_list|(
name|facetIds
argument_list|)
argument_list|)
expr_stmt|;
name|updateArtifactFacets
argument_list|(
name|artifact
argument_list|,
name|properties
argument_list|)
expr_stmt|;
try|try
block|{
name|writeProperties
argument_list|(
name|properties
argument_list|,
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Properties
name|readOrCreateProperties
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
name|propertiesKey
parameter_list|)
block|{
try|try
block|{
return|return
name|readProperties
argument_list|(
name|directory
argument_list|,
name|propertiesKey
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore and return new properties
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Properties
argument_list|()
return|;
block|}
specifier|private
name|Properties
name|readProperties
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
name|propertiesKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|propertiesKey
operator|+
literal|".properties"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|public
name|ProjectMetadata
name|getProject
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_METADATA_KEY
argument_list|)
decl_stmt|;
name|ProjectMetadata
name|project
init|=
literal|null
decl_stmt|;
name|String
name|id
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|project
operator|=
operator|new
name|ProjectMetadata
argument_list|()
expr_stmt|;
name|project
operator|.
name|setNamespace
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|project
return|;
block|}
specifier|public
name|ProjectVersionMetadata
name|getProjectVersion
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|ProjectVersionMetadata
name|versionMetadata
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|versionMetadata
operator|=
operator|new
name|ProjectVersionMetadata
argument_list|()
expr_stmt|;
name|versionMetadata
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setDescription
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setUrl
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setIncomplete
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"incomplete"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|scmConnection
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"scm.connection"
argument_list|)
decl_stmt|;
name|String
name|scmDeveloperConnection
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"scm.developerConnection"
argument_list|)
decl_stmt|;
name|String
name|scmUrl
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"scm.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scmConnection
operator|!=
literal|null
operator|||
name|scmDeveloperConnection
operator|!=
literal|null
operator|||
name|scmUrl
operator|!=
literal|null
condition|)
block|{
name|Scm
name|scm
init|=
operator|new
name|Scm
argument_list|()
decl_stmt|;
name|scm
operator|.
name|setConnection
argument_list|(
name|scmConnection
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setDeveloperConnection
argument_list|(
name|scmDeveloperConnection
argument_list|)
expr_stmt|;
name|scm
operator|.
name|setUrl
argument_list|(
name|scmUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setScm
argument_list|(
name|scm
argument_list|)
expr_stmt|;
block|}
name|String
name|ciSystem
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ci.system"
argument_list|)
decl_stmt|;
name|String
name|ciUrl
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ci.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ciSystem
operator|!=
literal|null
operator|||
name|ciUrl
operator|!=
literal|null
condition|)
block|{
name|CiManagement
name|ci
init|=
operator|new
name|CiManagement
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setSystem
argument_list|(
name|ciSystem
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUrl
argument_list|(
name|ciUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setCiManagement
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|String
name|issueSystem
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"issue.system"
argument_list|)
decl_stmt|;
name|String
name|issueUrl
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"issue.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|issueSystem
operator|!=
literal|null
operator|||
name|issueUrl
operator|!=
literal|null
condition|)
block|{
name|IssueManagement
name|issueManagement
init|=
operator|new
name|IssueManagement
argument_list|()
decl_stmt|;
name|issueManagement
operator|.
name|setSystem
argument_list|(
name|issueSystem
argument_list|)
expr_stmt|;
name|issueManagement
operator|.
name|setUrl
argument_list|(
name|issueUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setIssueManagement
argument_list|(
name|issueManagement
argument_list|)
expr_stmt|;
block|}
name|String
name|orgName
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"org.name"
argument_list|)
decl_stmt|;
name|String
name|orgUrl
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"org.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orgName
operator|!=
literal|null
operator|||
name|orgUrl
operator|!=
literal|null
condition|)
block|{
name|Organization
name|org
init|=
operator|new
name|Organization
argument_list|()
decl_stmt|;
name|org
operator|.
name|setName
argument_list|(
name|orgName
argument_list|)
expr_stmt|;
name|org
operator|.
name|setUrl
argument_list|(
name|orgUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|setOrganization
argument_list|(
name|org
argument_list|)
expr_stmt|;
block|}
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|String
name|licenseName
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"license."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
decl_stmt|;
name|String
name|licenseUrl
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"license."
operator|+
name|i
operator|+
literal|".url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|licenseName
operator|!=
literal|null
operator|||
name|licenseUrl
operator|!=
literal|null
condition|)
block|{
name|License
name|license
init|=
operator|new
name|License
argument_list|()
decl_stmt|;
name|license
operator|.
name|setName
argument_list|(
name|licenseName
argument_list|)
expr_stmt|;
name|license
operator|.
name|setUrl
argument_list|(
name|licenseUrl
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addLicense
argument_list|(
name|license
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|done
operator|=
literal|false
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|String
name|mailingListName
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mailingListName
operator|!=
literal|null
condition|)
block|{
name|MailingList
name|mailingList
init|=
operator|new
name|MailingList
argument_list|()
decl_stmt|;
name|mailingList
operator|.
name|setName
argument_list|(
name|mailingListName
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setMainArchiveUrl
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".archive"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|p
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".otherArchives"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|p
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mailingList
operator|.
name|setOtherArchives
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mailingList
operator|.
name|setPostAddress
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".post"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setSubscribeAddress
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".subscribe"
argument_list|)
argument_list|)
expr_stmt|;
name|mailingList
operator|.
name|setUnsubscribeAddress
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mailingList."
operator|+
name|i
operator|+
literal|".unsubscribe"
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addMailingList
argument_list|(
name|mailingList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|done
operator|=
literal|false
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|String
name|dependencyArtifactId
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".artifactId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependencyArtifactId
operator|!=
literal|null
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dependency
operator|.
name|setArtifactId
argument_list|(
name|dependencyArtifactId
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setGroupId
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".groupId"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setClassifier
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".classifier"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".optional"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setScope
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".scope"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setSystemPath
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".systemPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setType
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".type"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setVersion
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".version"
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"dependency."
operator|+
name|i
operator|+
literal|".optional"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|String
name|facetIds
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"facetIds"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|facetId
range|:
name|facetIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|MetadataFacetFactory
name|factory
init|=
name|metadataFacetFactories
operator|.
name|get
argument_list|(
name|facetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Attempted to load unknown project version metadata facet: {}"
argument_list|,
name|facetId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetadataFacet
name|facet
init|=
name|factory
operator|.
name|createMetadataFacet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
operator|new
name|ArrayList
argument_list|(
name|properties
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|property
operator|.
name|substring
argument_list|(
name|facet
operator|.
name|getFacetId
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|facet
operator|.
name|fromProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|versionMetadata
operator|.
name|addFacet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updateProjectVersionFacets
argument_list|(
name|versionMetadata
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|versionMetadata
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"artifact:version:"
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|versions
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ProjectVersionReference
argument_list|>
name|getProjectReferences
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|readOrCreateProperties
argument_list|(
name|directory
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
argument_list|)
decl_stmt|;
name|int
name|numberOfRefs
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ref:lastReferenceNum"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
operator|+
literal|1
decl_stmt|;
name|List
argument_list|<
name|ProjectVersionReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRefs
condition|;
name|i
operator|++
control|)
block|{
name|ProjectVersionReference
name|reference
init|=
operator|new
name|ProjectVersionReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setProjectId
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".projectId"
argument_list|)
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setNamespace
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".namespace"
argument_list|)
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setProjectVersion
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".projectVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setReferenceType
argument_list|(
name|ProjectVersionReference
operator|.
name|ReferenceType
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ref:reference."
operator|+
name|i
operator|+
literal|".referenceType"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|references
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
return|return
name|references
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getRootNamespaces
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
return|return
name|getNamespaces
argument_list|(
name|repoId
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|baseNamespace
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allNamespaces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
name|getDirectory
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|namespace
range|:
name|files
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|namespace
argument_list|,
name|NAMESPACE_METADATA_KEY
operator|+
literal|".properties"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|allNamespaces
operator|.
name|add
argument_list|(
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|fromIndex
init|=
name|baseNamespace
operator|!=
literal|null
condition|?
name|baseNamespace
operator|.
name|length
argument_list|()
operator|+
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|allNamespaces
control|)
block|{
if|if
condition|(
name|baseNamespace
operator|==
literal|null
operator|||
name|namespace
operator|.
name|startsWith
argument_list|(
name|baseNamespace
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|namespace
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|fromIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|namespaces
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjects
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|project
range|:
name|files
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|project
argument_list|,
name|PROJECT_METADATA_KEY
operator|+
literal|".properties"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|projects
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProjectVersions
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|projectVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|projectVersion
range|:
name|files
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|projectVersion
argument_list|,
name|PROJECT_VERSION_METADATA_KEY
operator|+
literal|".properties"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|projectVersions
operator|.
name|add
argument_list|(
name|projectVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|projectVersions
return|;
block|}
specifier|public
name|void
name|removeProject
parameter_list|(
name|String
name|repositoryId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repositoryId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeProjectVersion
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|projectId
parameter_list|,
name|String
name|projectVersion
parameter_list|)
throws|throws
name|MetadataRepositoryException
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|getDirectory
argument_list|(
name|repoId
argument_list|)
argument_list|,
name|namespace
operator|+
literal|"/"
operator|+
name|projectId
operator|+
literal|"/"
operator|+
name|projectVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetadataRepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|writeProperties
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|propertiesKey
parameter_list|)
throws|throws
name|IOException
block|{
name|directory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|propertiesKey
operator|+
literal|".properties"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ArtifactComparator
implements|implements
name|Comparator
argument_list|<
name|ArtifactMetadata
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ArtifactMetadata
name|artifact1
parameter_list|,
name|ArtifactMetadata
name|artifact2
parameter_list|)
block|{
if|if
condition|(
name|artifact1
operator|.
name|getWhenGathered
argument_list|()
operator|==
name|artifact2
operator|.
name|getWhenGathered
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|artifact1
operator|.
name|getWhenGathered
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|artifact2
operator|.
name|getWhenGathered
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|artifact1
operator|.
name|getWhenGathered
argument_list|()
operator|.
name|compareTo
argument_list|(
name|artifact2
operator|.
name|getWhenGathered
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|getArtifacts
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|getRootNamespaces
argument_list|(
name|repoId
argument_list|)
control|)
block|{
name|getArtifacts
argument_list|(
name|artifacts
argument_list|,
name|repoId
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
return|return
name|artifacts
return|;
block|}
specifier|private
name|void
name|getArtifacts
parameter_list|(
name|List
argument_list|<
name|ArtifactMetadata
argument_list|>
name|artifacts
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|getNamespaces
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|)
control|)
block|{
name|getArtifacts
argument_list|(
name|artifacts
argument_list|,
name|repoId
argument_list|,
name|ns
operator|+
literal|"."
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|project
range|:
name|getProjects
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|version
range|:
name|getProjectVersions
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|)
control|)
block|{
for|for
control|(
name|ArtifactMetadata
name|artifact
range|:
name|getArtifacts
argument_list|(
name|repoId
argument_list|,
name|ns
argument_list|,
name|project
argument_list|,
name|version
argument_list|)
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

