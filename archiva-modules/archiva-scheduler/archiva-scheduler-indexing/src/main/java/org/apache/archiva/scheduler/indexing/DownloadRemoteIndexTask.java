begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|RepositoryAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|beans
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|admin
operator|.
name|model
operator|.
name|remote
operator|.
name|RemoteRepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|common
operator|.
name|WagonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|IOControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|client
operator|.
name|methods
operator|.
name|ZeroCopyConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncRequestProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|updater
operator|.
name|IndexUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|updater
operator|.
name|IndexUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|updater
operator|.
name|ResourceFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|events
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|events
operator|.
name|TransferListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M1  */
end_comment

begin_class
specifier|public
class|class
name|DownloadRemoteIndexTask
implements|implements
name|Runnable
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RemoteRepository
name|remoteRepository
decl_stmt|;
specifier|private
name|RemoteRepositoryAdmin
name|remoteRepositoryAdmin
decl_stmt|;
specifier|private
name|WagonFactory
name|wagonFactory
decl_stmt|;
specifier|private
name|NetworkProxy
name|networkProxy
decl_stmt|;
specifier|private
name|boolean
name|fullDownload
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|runningRemoteDownloadIds
decl_stmt|;
specifier|private
name|IndexUpdater
name|indexUpdater
decl_stmt|;
specifier|public
name|DownloadRemoteIndexTask
parameter_list|(
name|DownloadRemoteIndexTaskRequest
name|downloadRemoteIndexTaskRequest
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|runningRemoteDownloadIds
parameter_list|)
block|{
name|this
operator|.
name|remoteRepository
operator|=
name|downloadRemoteIndexTaskRequest
operator|.
name|getRemoteRepository
argument_list|()
expr_stmt|;
name|this
operator|.
name|wagonFactory
operator|=
name|downloadRemoteIndexTaskRequest
operator|.
name|getWagonFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|networkProxy
operator|=
name|downloadRemoteIndexTaskRequest
operator|.
name|getNetworkProxy
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullDownload
operator|=
name|downloadRemoteIndexTaskRequest
operator|.
name|isFullDownload
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningRemoteDownloadIds
operator|=
name|runningRemoteDownloadIds
expr_stmt|;
name|this
operator|.
name|indexUpdater
operator|=
name|downloadRemoteIndexTaskRequest
operator|.
name|getIndexUpdater
argument_list|()
expr_stmt|;
name|this
operator|.
name|remoteRepositoryAdmin
operator|=
name|downloadRemoteIndexTaskRequest
operator|.
name|getRemoteRepositoryAdmin
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// so short lock : not sure we need it
synchronized|synchronized
init|(
name|this
operator|.
name|runningRemoteDownloadIds
init|)
block|{
if|if
condition|(
name|this
operator|.
name|runningRemoteDownloadIds
operator|.
name|contains
argument_list|(
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip it as it's running
name|log
operator|.
name|info
argument_list|(
literal|"skip download index remote for repo {} it's already running"
argument_list|,
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|runningRemoteDownloadIds
operator|.
name|add
argument_list|(
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|tempIndexDirectory
init|=
literal|null
decl_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"start download remote index for remote repository {}"
argument_list|,
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|IndexingContext
name|indexingContext
init|=
name|remoteRepositoryAdmin
operator|.
name|createIndexContext
argument_list|(
name|this
operator|.
name|remoteRepository
argument_list|)
decl_stmt|;
comment|// create a temp directory to download files
name|tempIndexDirectory
operator|=
operator|new
name|File
argument_list|(
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
literal|".tmpIndex"
argument_list|)
expr_stmt|;
name|File
name|indexCacheDirectory
init|=
operator|new
name|File
argument_list|(
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
literal|".indexCache"
argument_list|)
decl_stmt|;
name|indexCacheDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|tempIndexDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tempIndexDirectory
argument_list|)
expr_stmt|;
block|}
name|tempIndexDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|tempIndexDirectory
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|baseIndexUrl
init|=
name|indexingContext
operator|.
name|getIndexUpdateUrl
argument_list|()
decl_stmt|;
comment|/*             String wagonProtocol = new URL( this.remoteRepository.getUrl() ).getProtocol();              final StreamWagon wagon = (StreamWagon) wagonFactory.getWagon(                 new WagonFactoryRequest( wagonProtocol, this.remoteRepository.getExtraHeaders() ).networkProxy(                     this.networkProxy ) );             int timeoutInMilliseconds = remoteRepository.getTimeout() * 1000;             // FIXME olamy having 2 config values             wagon.setReadTimeout( timeoutInMilliseconds );             wagon.setTimeout( timeoutInMilliseconds );              if ( wagon instanceof AbstractHttpClientWagon )             {                 HttpConfiguration httpConfiguration = new HttpConfiguration();                 HttpMethodConfiguration httpMethodConfiguration = new HttpMethodConfiguration();                 httpMethodConfiguration.setUsePreemptive( true );                 httpMethodConfiguration.setReadTimeout( timeoutInMilliseconds );                 httpConfiguration.setGet( httpMethodConfiguration );                 ( (AbstractHttpClientWagon) wagon ).setHttpConfiguration( httpConfiguration );             }              wagon.addTransferListener( new DownloadListener() );             ProxyInfo proxyInfo = null;             if ( this.networkProxy != null )             {                 proxyInfo = new ProxyInfo();                 proxyInfo.setHost( this.networkProxy.getHost() );                 proxyInfo.setPort( this.networkProxy.getPort() );                 proxyInfo.setUserName( this.networkProxy.getUsername() );                 proxyInfo.setPassword( this.networkProxy.getPassword() );             }             AuthenticationInfo authenticationInfo = null;             if ( this.remoteRepository.getUserName() != null )             {                 authenticationInfo = new AuthenticationInfo();                 authenticationInfo.setUserName( this.remoteRepository.getUserName() );                 authenticationInfo.setPassword( this.remoteRepository.getPassword() );             }             wagon.connect( new Repository( this.remoteRepository.getId(), baseIndexUrl ), authenticationInfo,                            proxyInfo );             */
comment|//---------------------------------------------
name|HttpAsyncClientBuilder
name|builder
init|=
name|HttpAsyncClientBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|networkProxy
operator|!=
literal|null
condition|)
block|{
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
name|this
operator|.
name|networkProxy
operator|.
name|getHost
argument_list|()
argument_list|,
name|this
operator|.
name|networkProxy
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|setProxy
argument_list|(
name|httpHost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|remoteRepository
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BasicCredentialsProvider
name|basicCredentialsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|basicCredentialsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|this
operator|.
name|remoteRepository
operator|.
name|getUserName
argument_list|()
argument_list|,
name|this
operator|.
name|remoteRepository
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|indexDirectory
init|=
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|indexDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|indexDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|CloseableHttpAsyncClient
name|closeableHttpAsyncClient
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|closeableHttpAsyncClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceFetcher
name|resourceFetcher
init|=
operator|new
name|ZeroCopyResourceFetcher
argument_list|(
name|log
argument_list|,
name|tempIndexDirectory
argument_list|,
name|remoteRepository
argument_list|,
name|closeableHttpAsyncClient
argument_list|,
name|baseIndexUrl
argument_list|)
decl_stmt|;
name|IndexUpdateRequest
name|request
init|=
operator|new
name|IndexUpdateRequest
argument_list|(
name|indexingContext
argument_list|,
name|resourceFetcher
argument_list|)
decl_stmt|;
name|request
operator|.
name|setForceFullUpdate
argument_list|(
name|this
operator|.
name|fullDownload
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLocalIndexCacheDir
argument_list|(
name|indexCacheDirectory
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexUpdater
operator|.
name|fetchAndUpdateIndex
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"time update index from remote for repository {}: {} s"
argument_list|,
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|stopWatch
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
comment|// index packing optionnal ??
comment|//IndexPackingRequest indexPackingRequest =
comment|//    new IndexPackingRequest( indexingContext, indexingContext.getIndexDirectoryFile() );
comment|//indexPacker.packIndex( indexPackingRequest );
name|indexingContext
operator|.
name|updateTimestamp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAdminException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|deleteDirectoryQuiet
argument_list|(
name|tempIndexDirectory
argument_list|)
expr_stmt|;
name|this
operator|.
name|runningRemoteDownloadIds
operator|.
name|remove
argument_list|(
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"end download remote index for remote repository "
operator|+
name|this
operator|.
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteDirectoryQuiet
parameter_list|(
name|File
name|f
parameter_list|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"skip error delete {} : {}"
argument_list|,
name|f
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DownloadListener
implements|implements
name|TransferListener
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|resourceName
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|transferInitiated
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resourceName
operator|=
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"initiate transfer of {}"
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transferStarted
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|this
operator|.
name|totalLength
operator|=
literal|0
expr_stmt|;
name|resourceName
operator|=
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"start transfer of {}"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"transfer of {} : {}/{}"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalLength
operator|+=
name|length
expr_stmt|;
block|}
specifier|public
name|void
name|transferCompleted
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|resourceName
operator|=
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"end of transfer file {} {} kb: {}s"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|totalLength
operator|/
literal|1024
argument_list|,
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transferError
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"error of transfer file {}: {}"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|transferEvent
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|transferEvent
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"transfer debug {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ZeroCopyResourceFetcher
implements|implements
name|ResourceFetcher
block|{
name|Logger
name|log
decl_stmt|;
name|File
name|tempIndexDirectory
decl_stmt|;
specifier|final
name|RemoteRepository
name|remoteRepository
decl_stmt|;
name|CloseableHttpAsyncClient
name|httpclient
decl_stmt|;
name|String
name|baseIndexUrl
decl_stmt|;
specifier|private
name|ZeroCopyResourceFetcher
parameter_list|(
name|Logger
name|log
parameter_list|,
name|File
name|tempIndexDirectory
parameter_list|,
name|RemoteRepository
name|remoteRepository
parameter_list|,
name|CloseableHttpAsyncClient
name|httpclient
parameter_list|,
name|String
name|baseIndexUrl
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|this
operator|.
name|tempIndexDirectory
operator|=
name|tempIndexDirectory
expr_stmt|;
name|this
operator|.
name|remoteRepository
operator|=
name|remoteRepository
expr_stmt|;
name|this
operator|.
name|httpclient
operator|=
name|httpclient
expr_stmt|;
name|this
operator|.
name|baseIndexUrl
operator|=
name|baseIndexUrl
expr_stmt|;
block|}
specifier|public
name|void
name|connect
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
comment|//no op
block|}
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no op
block|}
specifier|public
name|InputStream
name|retrieve
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"index update retrieve file, name:{}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tempIndexDirectory
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|ZeroCopyConsumer
argument_list|<
name|File
argument_list|>
name|consumer
init|=
operator|new
name|ZeroCopyConsumer
argument_list|<
name|File
argument_list|>
argument_list|(
name|file
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|File
name|process
parameter_list|(
specifier|final
name|HttpResponse
name|response
parameter_list|,
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|ContentType
name|contentType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
throw|throw
operator|new
name|ClientProtocolException
argument_list|(
literal|"Upload failed: "
operator|+
name|response
operator|.
name|getStatusLine
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onContentReceived
parameter_list|(
name|ContentDecoder
name|decoder
parameter_list|,
name|IOControl
name|ioctrl
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"onContentReceived"
argument_list|)
expr_stmt|;
name|super
operator|.
name|onContentReceived
argument_list|(
name|decoder
argument_list|,
name|ioctrl
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|URL
name|targetUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|remoteRepository
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|HttpHost
name|targetHost
init|=
operator|new
name|HttpHost
argument_list|(
name|targetUrl
operator|.
name|getHost
argument_list|()
argument_list|,
name|targetUrl
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|File
argument_list|>
name|httpResponseFuture
init|=
name|httpclient
operator|.
name|execute
argument_list|(
operator|new
name|HttpAsyncRequestProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpHost
name|getTarget
parameter_list|()
block|{
return|return
name|targetHost
return|;
block|}
annotation|@
name|Override
specifier|public
name|HttpRequest
name|generateRequest
parameter_list|()
throws|throws
name|IOException
throws|,
name|HttpException
block|{
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|(
name|baseIndexUrl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|baseIndexUrl
argument_list|,
literal|"/"
argument_list|)
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|url
operator|.
name|append
argument_list|(
name|addParameters
argument_list|(
name|name
argument_list|,
name|remoteRepository
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|httpGet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|produceContent
parameter_list|(
name|ContentEncoder
name|encoder
parameter_list|,
name|IOControl
name|ioctrl
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|void
name|requestCompleted
parameter_list|(
name|HttpContext
name|context
parameter_list|)
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"http request failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepeatable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetRequest
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no op
block|}
block|}
argument_list|,
name|consumer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|file
operator|=
name|httpResponseFuture
operator|.
name|get
argument_list|(
name|this
operator|.
name|remoteRepository
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
comment|// FIXME remove crappy copy/paste
specifier|protected
specifier|static
name|String
name|addParameters
parameter_list|(
name|String
name|path
parameter_list|,
name|RemoteRepository
name|remoteRepository
parameter_list|)
block|{
if|if
condition|(
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
name|boolean
name|question
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|==
literal|null
condition|?
literal|""
else|:
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|question
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

