begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|maven
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the Li  * cense is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|UnsupportedBaseContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|redback
operator|.
name|components
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|indexing
operator|.
name|ArtifactIndexingTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|DefaultScannerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|FlatSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|FlatSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|IndexerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|MAVEN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ScanningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ScanningResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|expr
operator|.
name|SourcedSearchExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPackingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index_shaded
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index_shaded
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * ArchivaIndexingTaskExecutor Executes all indexing tasks. Adding, updating and removing artifacts from the index are  * all performed by this executor. Add and update artifact in index tasks are added in the indexing task queue by the  * NexusIndexerConsumer while remove artifact from index tasks are added by the LuceneCleanupRemoveIndexedConsumer.  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"taskExecutor#indexing"
argument_list|)
specifier|public
class|class
name|ArchivaIndexingTaskExecutor
implements|implements
name|TaskExecutor
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaIndexingTaskExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|IndexPacker
name|indexPacker
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArtifactContextProducer
name|artifactContextProducer
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Indexer
name|indexer
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Scanner
name|scanner
decl_stmt|;
annotation|@
name|Inject
name|IndexerEngine
name|indexerEngine
decl_stmt|;
comment|/**      * depending on current {@link Task} you have.      * If {@link org.apache.archiva.scheduler.indexing.ArtifactIndexingTask.Action#FINISH}&amp;&amp; isExecuteOnEntireRepo:      * repository will be scanned.      *      * @param task      * @throws TaskExecutionException      */
annotation|@
name|Override
specifier|public
name|void
name|executeTask
parameter_list|(
name|Task
name|task
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
name|ArtifactIndexingTask
name|indexingTask
init|=
operator|(
name|ArtifactIndexingTask
operator|)
name|task
decl_stmt|;
name|ManagedRepository
name|repository
init|=
name|indexingTask
operator|.
name|getRepository
argument_list|( )
decl_stmt|;
name|ArchivaIndexingContext
name|archivaContext
init|=
name|indexingTask
operator|.
name|getContext
argument_list|( )
decl_stmt|;
name|IndexingContext
name|context
init|=
literal|null
decl_stmt|;
try|try
block|{
name|context
operator|=
name|archivaContext
operator|.
name|getBaseContext
argument_list|(
name|IndexingContext
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedBaseContextException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Bad repository type."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|FINISH
operator|.
name|equals
argument_list|(
name|indexingTask
operator|.
name|getAction
argument_list|( )
argument_list|)
operator|&&
name|indexingTask
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|( )
decl_stmt|;
try|try
block|{
name|context
operator|.
name|updateTimestamp
argument_list|( )
expr_stmt|;
name|DefaultScannerListener
name|listener
init|=
operator|new
name|DefaultScannerListener
argument_list|(
name|context
argument_list|,
name|indexerEngine
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ScanningRequest
name|request
init|=
operator|new
name|ScanningRequest
argument_list|(
name|context
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|ScanningResult
name|result
init|=
name|scanner
operator|.
name|scan
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasExceptions
argument_list|( )
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exceptions occured during index scan of "
operator|+
name|context
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|result
operator|.
name|getExceptions
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|limit
argument_list|(
literal|5
argument_list|)
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|log
operator|.
name|error
argument_list|(
literal|"Message: "
operator|+
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during context scan {}: {}"
argument_list|,
name|context
operator|.
name|getId
argument_list|( )
argument_list|,
name|context
operator|.
name|getIndexDirectory
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|( )
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"indexed maven repository: {}, onlyUpdate: {}, time {} ms"
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|,
name|indexingTask
operator|.
name|isOnlyUpdate
argument_list|( )
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Finishing indexing task on repo: {}"
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|finishIndexingTask
argument_list|(
name|indexingTask
argument_list|,
name|repository
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create context if not a repo scan request
if|if
condition|(
operator|!
name|indexingTask
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
condition|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating indexing context on resource: {}"
argument_list|,
comment|//
operator|(
name|indexingTask
operator|.
name|getResourceFile
argument_list|( )
operator|==
literal|null
condition|?
literal|"none"
else|:
name|indexingTask
operator|.
name|getResourceFile
argument_list|( )
operator|)
argument_list|)
expr_stmt|;
name|archivaContext
operator|=
name|repository
operator|.
name|getIndexingContext
argument_list|( )
expr_stmt|;
name|context
operator|=
name|archivaContext
operator|.
name|getBaseContext
argument_list|(
name|IndexingContext
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedBaseContextException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occurred while creating context: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Error occurred while creating context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getIndexDirectory
argument_list|( )
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Trying to index an artifact but the context is already closed"
argument_list|)
throw|;
block|}
try|try
block|{
name|Path
name|artifactFile
init|=
name|indexingTask
operator|.
name|getResourceFile
argument_list|( )
decl_stmt|;
if|if
condition|(
name|artifactFile
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"no artifact pass in indexing task so skip it"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArtifactContext
name|ac
init|=
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|context
argument_list|,
name|artifactFile
operator|.
name|toFile
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|ac
operator|!=
literal|null
condition|)
block|{
comment|// MRM-1779 pom must be indexed too
comment|// TODO make that configurable?
if|if
condition|(
name|artifactFile
operator|.
name|getFileName
argument_list|( )
operator|.
name|toString
argument_list|( )
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
condition|)
block|{
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|setFileExtension
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|setPackaging
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|setClassifier
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexingTask
operator|.
name|getAction
argument_list|( )
operator|.
name|equals
argument_list|(
name|ArtifactIndexingTask
operator|.
name|Action
operator|.
name|ADD
argument_list|)
condition|)
block|{
comment|//IndexSearcher s = context.getIndexSearcher();
comment|//String uinfo = ac.getArtifactInfo().getUinfo();
comment|//TopDocs d = s.search( new TermQuery( new Term( ArtifactInfo.UINFO, uinfo ) ), 1 );
name|BooleanQuery
operator|.
name|Builder
name|qb
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|GROUP_ID
argument_list|,
operator|new
name|SourcedSearchExpression
argument_list|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getGroupId
argument_list|( )
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|qb
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|ARTIFACT_ID
argument_list|,
operator|new
name|SourcedSearchExpression
argument_list|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|qb
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|VERSION
argument_list|,
operator|new
name|SourcedSearchExpression
argument_list|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
if|if
condition|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getClassifier
argument_list|( )
operator|!=
literal|null
condition|)
block|{
name|qb
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|CLASSIFIER
argument_list|,
operator|new
name|SourcedSearchExpression
argument_list|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getClassifier
argument_list|( )
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getPackaging
argument_list|( )
operator|!=
literal|null
condition|)
block|{
name|qb
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|constructQuery
argument_list|(
name|MAVEN
operator|.
name|PACKAGING
argument_list|,
operator|new
name|SourcedSearchExpression
argument_list|(
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
operator|.
name|getPackaging
argument_list|( )
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|FlatSearchRequest
name|flatSearchRequest
init|=
operator|new
name|FlatSearchRequest
argument_list|(
name|qb
operator|.
name|build
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|FlatSearchResponse
name|flatSearchResponse
init|=
name|indexer
operator|.
name|searchFlat
argument_list|(
name|flatSearchRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|flatSearchResponse
operator|.
name|getResults
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding artifact '{}' to index.."
argument_list|,
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
argument_list|)
expr_stmt|;
name|indexerEngine
operator|.
name|index
argument_list|(
name|context
argument_list|,
name|ac
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Updating artifact '{}' in index.."
argument_list|,
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
argument_list|)
expr_stmt|;
comment|// TODO check if update exists !!
name|indexerEngine
operator|.
name|update
argument_list|(
name|context
argument_list|,
name|ac
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|updateTimestamp
argument_list|( )
expr_stmt|;
name|context
operator|.
name|commit
argument_list|( )
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Removing artifact '{}' from index.."
argument_list|,
name|ac
operator|.
name|getArtifactInfo
argument_list|( )
argument_list|)
expr_stmt|;
name|indexerEngine
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|ac
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// close the context if not a repo scan request
if|if
condition|(
operator|!
name|indexingTask
operator|.
name|isExecuteOnEntireRepo
argument_list|( )
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Finishing indexing task on resource file : {}"
argument_list|,
name|indexingTask
operator|.
name|getResourceFile
argument_list|( )
operator|!=
literal|null
condition|?
name|indexingTask
operator|.
name|getResourceFile
argument_list|( )
else|:
literal|" none "
argument_list|)
expr_stmt|;
name|finishIndexingTask
argument_list|(
name|indexingTask
argument_list|,
name|repository
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occurred while executing indexing task '{}': {}"
argument_list|,
name|indexingTask
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Error occurred while executing indexing task '"
operator|+
name|indexingTask
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|finishIndexingTask
parameter_list|(
name|ArtifactIndexingTask
name|indexingTask
parameter_list|,
name|ManagedRepository
name|repository
parameter_list|,
name|IndexingContext
name|context
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Finishing indexing"
argument_list|)
expr_stmt|;
name|context
operator|.
name|optimize
argument_list|( )
expr_stmt|;
if|if
condition|(
name|repository
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|IndexCreationFeature
name|icf
init|=
name|repository
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|icf
operator|.
name|isSkipPackedIndexCreation
argument_list|( )
operator|&&
name|icf
operator|.
name|getLocalPackedIndexPath
argument_list|( )
operator|!=
literal|null
operator|&&
name|icf
operator|.
name|getLocalIndexPath
argument_list|()
operator|.
name|getFilePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating packed index from {} on {}"
argument_list|,
name|context
operator|.
name|getIndexDirectoryFile
argument_list|( )
argument_list|,
name|icf
operator|.
name|getLocalPackedIndexPath
argument_list|( )
argument_list|)
expr_stmt|;
name|IndexPackingRequest
name|request
init|=
operator|new
name|IndexPackingRequest
argument_list|(
name|context
argument_list|,
comment|//
name|context
operator|.
name|acquireIndexSearcher
argument_list|( )
operator|.
name|getIndexReader
argument_list|( )
argument_list|,
comment|//
name|icf
operator|.
name|getLocalPackedIndexPath
argument_list|( )
operator|.
name|getFilePath
argument_list|()
operator|.
name|toFile
argument_list|( )
argument_list|)
decl_stmt|;
name|indexPacker
operator|.
name|packIndex
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|context
operator|.
name|updateTimestamp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Index file packed at '{}'."
argument_list|,
name|icf
operator|.
name|getLocalPackedIndexPath
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"skip packed index creation"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"skip packed index creation"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occurred while executing indexing task '{}': {}"
argument_list|,
name|indexingTask
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
literal|"Error occurred while executing indexing task '"
operator|+
name|indexingTask
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setIndexPacker
parameter_list|(
name|IndexPacker
name|indexPacker
parameter_list|)
block|{
name|this
operator|.
name|indexPacker
operator|=
name|indexPacker
expr_stmt|;
block|}
block|}
end_class

end_unit

