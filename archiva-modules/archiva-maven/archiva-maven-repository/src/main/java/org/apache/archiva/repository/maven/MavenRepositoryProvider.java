begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|ArtifactCleanupFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|RemoteIndexFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|StagingRepositoryFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|BasicManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|base
operator|.
name|PasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|fs
operator|.
name|FilesystemStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Period
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
operator|.
name|DEFAULT_INDEX_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
operator|.
name|DEFAULT_PACKED_INDEX_PATH
import|;
end_import

begin_comment
comment|/**  * Provider for the maven2 repository implementations  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"mavenRepositoryProvider"
argument_list|)
specifier|public
class|class
name|MavenRepositoryProvider
implements|implements
name|RepositoryProvider
block|{
annotation|@
name|Inject
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|FileLockManager
name|fileLockManager
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MavenRepositoryProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Set
argument_list|<
name|RepositoryType
argument_list|>
name|TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|TYPES
operator|.
name|add
argument_list|(
name|RepositoryType
operator|.
name|MAVEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RepositoryType
argument_list|>
name|provides
parameter_list|()
block|{
return|return
name|TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|MavenManagedRepository
name|createManagedInstance
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|createManagedInstance
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|archivaConfiguration
operator|.
name|getRemoteRepositoryBaseDir
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|MavenManagedRepository
name|createManagedInstance
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|baseDir
parameter_list|)
block|{
name|FilesystemStorage
name|storage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|storage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
name|id
argument_list|)
argument_list|,
name|fileLockManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize fileystem for repository {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|MavenManagedRepository
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MavenRemoteRepository
name|createRemoteInstance
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|createRemoteInstance
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|archivaConfiguration
operator|.
name|getRemoteRepositoryBaseDir
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|MavenRemoteRepository
name|createRemoteInstance
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|baseDir
parameter_list|)
block|{
name|FilesystemStorage
name|storage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|storage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
name|id
argument_list|)
argument_list|,
name|fileLockManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize fileystem for repository {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|MavenRemoteRepository
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EditableRepositoryGroup
name|createRepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|createRepositoryGroup
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|archivaConfiguration
operator|.
name|getRepositoryBaseDir
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|MavenRepositoryGroup
name|createRepositoryGroup
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|baseDir
parameter_list|)
block|{
name|FilesystemStorage
name|storage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|storage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|baseDir
operator|.
name|resolve
argument_list|(
name|id
argument_list|)
argument_list|,
name|fileLockManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not initialize fileystem for repository {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|MavenRepositoryGroup
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storage
argument_list|)
return|;
block|}
specifier|private
name|URI
name|getURIFromString
parameter_list|(
name|String
name|uriStr
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|URI
name|uri
decl_stmt|;
try|try
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uriStr
argument_list|)
condition|)
block|{
return|return
operator|new
name|URI
argument_list|(
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|uriStr
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// only absolute paths are prepended with file scheme
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"file://"
operator|+
name|uriStr
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|uriStr
operator|.
name|contains
argument_list|(
literal|":\\"
argument_list|)
condition|)
block|{
comment|//windows absolute path drive
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"file:///"
operator|+
name|uriStr
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uriStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad URI scheme found: {}, URI={}"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The uri "
operator|+
name|uriStr
operator|+
literal|" is not valid. Only file:// URI is allowed for maven."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|String
name|newCfg
init|=
literal|"file://"
operator|+
name|uriStr
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|newCfg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create URI from {} -> "
argument_list|,
name|uriStr
argument_list|,
name|newCfg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The config entry "
operator|+
name|uriStr
operator|+
literal|" cannot be converted to URI."
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Setting location uri: {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|createManagedInstance
parameter_list|(
name|ManagedRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|MavenManagedRepository
name|repo
init|=
name|createManagedInstance
argument_list|(
name|cfg
operator|.
name|getId
argument_list|()
argument_list|,
name|cfg
operator|.
name|getName
argument_list|()
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|cfg
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|updateManagedInstance
argument_list|(
name|repo
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateManagedInstance
parameter_list|(
name|EditableManagedRepository
name|repo
parameter_list|,
name|ManagedRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|repo
operator|.
name|setLocation
argument_list|(
name|getURIFromString
argument_list|(
name|cfg
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedURIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The location entry is not a valid uri: "
operator|+
name|cfg
operator|.
name|getLocation
argument_list|()
argument_list|)
throw|;
block|}
name|setBaseConfig
argument_list|(
name|repo
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|Path
name|repoDir
init|=
name|repo
operator|.
name|getRoot
argument_list|()
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoDir
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating repo directory {}"
argument_list|,
name|repoDir
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create directory {} for repository {}"
argument_list|,
name|repoDir
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not create directory for repository "
operator|+
name|repoDir
argument_list|)
throw|;
block|}
block|}
name|repo
operator|.
name|setSchedulingDefinition
argument_list|(
name|cfg
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setBlocksRedeployment
argument_list|(
name|cfg
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setScanned
argument_list|(
name|cfg
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isReleases
argument_list|()
condition|)
block|{
name|repo
operator|.
name|addActiveReleaseScheme
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repo
operator|.
name|removeActiveReleaseScheme
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|isSnapshots
argument_list|()
condition|)
block|{
name|repo
operator|.
name|addActiveReleaseScheme
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repo
operator|.
name|removeActiveReleaseScheme
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
argument_list|)
expr_stmt|;
block|}
name|StagingRepositoryFeature
name|stagingRepositoryFeature
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|stagingRepositoryFeature
operator|.
name|setStageRepoNeeded
argument_list|(
name|cfg
operator|.
name|isStageRepoNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|indexCreationFeature
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|cfg
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|indexDir
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|cfg
operator|.
name|getIndexDir
argument_list|()
argument_list|)
condition|?
name|DEFAULT_INDEX_PATH
else|:
name|cfg
operator|.
name|getIndexDir
argument_list|()
decl_stmt|;
name|String
name|packedIndexDir
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|cfg
operator|.
name|getPackedIndexDir
argument_list|()
argument_list|)
condition|?
name|DEFAULT_PACKED_INDEX_PATH
else|:
name|cfg
operator|.
name|getPackedIndexDir
argument_list|()
decl_stmt|;
name|indexCreationFeature
operator|.
name|setIndexPath
argument_list|(
name|getURIFromString
argument_list|(
name|indexDir
argument_list|)
argument_list|)
expr_stmt|;
name|indexCreationFeature
operator|.
name|setPackedIndexPath
argument_list|(
name|getURIFromString
argument_list|(
name|packedIndexDir
argument_list|)
argument_list|)
expr_stmt|;
name|ArtifactCleanupFeature
name|artifactCleanupFeature
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|ArtifactCleanupFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|artifactCleanupFeature
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|cfg
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|artifactCleanupFeature
operator|.
name|setRetentionCount
argument_list|(
name|cfg
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|artifactCleanupFeature
operator|.
name|setRetentionPeriod
argument_list|(
name|Period
operator|.
name|ofDays
argument_list|(
name|cfg
operator|.
name|getRetentionPeriod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|createStagingInstance
parameter_list|(
name|ManagedRepositoryConfiguration
name|baseConfiguration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating staging instance for {}"
argument_list|,
name|baseConfiguration
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createManagedInstance
argument_list|(
name|getStageRepoConfig
argument_list|(
name|baseConfiguration
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepository
name|createRemoteInstance
parameter_list|(
name|RemoteRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|MavenRemoteRepository
name|repo
init|=
name|createRemoteInstance
argument_list|(
name|cfg
operator|.
name|getId
argument_list|()
argument_list|,
name|cfg
operator|.
name|getName
argument_list|()
argument_list|,
name|archivaConfiguration
operator|.
name|getRemoteRepositoryBaseDir
argument_list|()
argument_list|)
decl_stmt|;
name|updateRemoteInstance
argument_list|(
name|repo
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
name|String
name|convertUriToPath
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|uri
operator|.
name|getPath
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateRemoteInstance
parameter_list|(
name|EditableRemoteRepository
name|repo
parameter_list|,
name|RemoteRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|setBaseConfig
argument_list|(
name|repo
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setCheckPath
argument_list|(
name|cfg
operator|.
name|getCheckPath
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setSchedulingDefinition
argument_list|(
name|cfg
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|repo
operator|.
name|setLocation
argument_list|(
operator|new
name|URI
argument_list|(
name|cfg
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedURIException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set remote url "
operator|+
name|cfg
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The url config is not a valid uri: "
operator|+
name|cfg
operator|.
name|getUrl
argument_list|()
argument_list|)
throw|;
block|}
name|repo
operator|.
name|setTimeout
argument_list|(
name|Duration
operator|.
name|ofSeconds
argument_list|(
name|cfg
operator|.
name|getTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIndexFeature
name|remoteIndexFeature
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|remoteIndexFeature
operator|.
name|setDownloadRemoteIndex
argument_list|(
name|cfg
operator|.
name|isDownloadRemoteIndex
argument_list|()
argument_list|)
expr_stmt|;
name|remoteIndexFeature
operator|.
name|setDownloadRemoteIndexOnStartup
argument_list|(
name|cfg
operator|.
name|isDownloadRemoteIndexOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|remoteIndexFeature
operator|.
name|setDownloadTimeout
argument_list|(
name|Duration
operator|.
name|ofSeconds
argument_list|(
name|cfg
operator|.
name|getRemoteDownloadTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|remoteIndexFeature
operator|.
name|setProxyId
argument_list|(
name|cfg
operator|.
name|getRemoteDownloadNetworkProxyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isDownloadRemoteIndex
argument_list|()
condition|)
block|{
try|try
block|{
name|remoteIndexFeature
operator|.
name|setIndexUri
argument_list|(
operator|new
name|URI
argument_list|(
name|cfg
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set remote index url "
operator|+
name|cfg
operator|.
name|getRemoteIndexUrl
argument_list|()
argument_list|)
expr_stmt|;
name|remoteIndexFeature
operator|.
name|setDownloadRemoteIndex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteIndexFeature
operator|.
name|setDownloadRemoteIndexOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Object
name|key
range|:
name|cfg
operator|.
name|getExtraHeaders
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|repo
operator|.
name|addExtraHeader
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|cfg
operator|.
name|getExtraHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|key
range|:
name|cfg
operator|.
name|getExtraParameters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|repo
operator|.
name|addExtraParameter
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|cfg
operator|.
name|getExtraParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PasswordCredentials
name|credentials
init|=
operator|new
name|PasswordCredentials
argument_list|(
literal|""
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
operator|&&
name|cfg
operator|.
name|getUsername
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|.
name|setPassword
argument_list|(
name|cfg
operator|.
name|getPassword
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|setUsername
argument_list|(
name|cfg
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credentials
operator|.
name|setPassword
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getIndexDir
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|indexCreationFeature
operator|.
name|setIndexPath
argument_list|(
name|getURIFromString
argument_list|(
name|cfg
operator|.
name|getIndexDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getPackedIndexDir
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|indexCreationFeature
operator|.
name|setPackedIndexPath
argument_list|(
name|getURIFromString
argument_list|(
name|cfg
operator|.
name|getPackedIndexDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Updated remote instance {}"
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryGroup
name|createRepositoryGroup
parameter_list|(
name|RepositoryGroupConfiguration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Path
name|repositoryGroupBase
init|=
name|getArchivaConfiguration
argument_list|()
operator|.
name|getRepositoryGroupBaseDir
argument_list|()
decl_stmt|;
name|MavenRepositoryGroup
name|newGrp
init|=
name|createRepositoryGroup
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|configuration
operator|.
name|getName
argument_list|()
argument_list|,
name|repositoryGroupBase
argument_list|)
decl_stmt|;
name|updateRepositoryGroupInstance
argument_list|(
name|newGrp
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|newGrp
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateRepositoryGroupInstance
parameter_list|(
name|EditableRepositoryGroup
name|repositoryGroup
parameter_list|,
name|RepositoryGroupConfiguration
name|configuration
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|repositoryGroup
operator|.
name|setName
argument_list|(
name|repositoryGroup
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryGroup
operator|.
name|setMergedIndexTTL
argument_list|(
name|configuration
operator|.
name|getMergedIndexTtl
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryGroup
operator|.
name|setSchedulingDefinition
argument_list|(
name|configuration
operator|.
name|getCronExpression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryGroup
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|repositoryGroup
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|indexCreationFeature
operator|.
name|setIndexPath
argument_list|(
name|getURIFromString
argument_list|(
name|configuration
operator|.
name|getMergedIndexPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|localPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|configuration
operator|.
name|getMergedIndexPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|repoGroupPath
init|=
name|repositoryGroup
operator|.
name|getRoot
argument_list|()
operator|.
name|getFilePath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|localPath
operator|.
name|isAbsolute
argument_list|()
operator|&&
operator|!
name|localPath
operator|.
name|startsWith
argument_list|(
name|repoGroupPath
argument_list|)
condition|)
block|{
try|try
block|{
name|FilesystemStorage
name|storage
init|=
operator|new
name|FilesystemStorage
argument_list|(
name|localPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileLockManager
argument_list|)
decl_stmt|;
name|indexCreationFeature
operator|.
name|setLocalIndexPath
argument_list|(
name|storage
operator|.
name|getAsset
argument_list|(
name|localPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Could not initialize storage for index path "
operator|+
name|localPath
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|localPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|indexCreationFeature
operator|.
name|setLocalIndexPath
argument_list|(
name|repositoryGroup
operator|.
name|getAsset
argument_list|(
name|repoGroupPath
operator|.
name|relativize
argument_list|(
name|localPath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexCreationFeature
operator|.
name|setLocalIndexPath
argument_list|(
name|repositoryGroup
operator|.
name|getAsset
argument_list|(
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// References to other repositories are set filled by the registry
block|}
annotation|@
name|Override
specifier|public
name|RemoteRepositoryConfiguration
name|getRemoteConfiguration
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
operator|(
name|remoteRepository
operator|instanceof
name|MavenRemoteRepository
operator|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Wrong remote repository type "
operator|+
name|remoteRepository
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The given repository type cannot be handled by the maven provider: "
operator|+
name|remoteRepository
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|RemoteRepositoryConfiguration
name|cfg
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setType
argument_list|(
name|remoteRepository
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
name|remoteRepository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDescription
argument_list|(
name|remoteRepository
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setUrl
argument_list|(
name|remoteRepository
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setTimeout
argument_list|(
operator|(
name|int
operator|)
name|remoteRepository
operator|.
name|getTimeout
argument_list|()
operator|.
name|toMillis
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setCheckPath
argument_list|(
name|remoteRepository
operator|.
name|getCheckPath
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryCredentials
name|creds
init|=
name|remoteRepository
operator|.
name|getLoginCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|creds
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|creds
operator|instanceof
name|PasswordCredentials
condition|)
block|{
name|PasswordCredentials
name|pCreds
init|=
operator|(
name|PasswordCredentials
operator|)
name|creds
decl_stmt|;
name|cfg
operator|.
name|setPassword
argument_list|(
operator|new
name|String
argument_list|(
name|pCreds
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setUsername
argument_list|(
name|pCreds
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cfg
operator|.
name|setLayout
argument_list|(
name|remoteRepository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setExtraParameters
argument_list|(
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setExtraHeaders
argument_list|(
name|remoteRepository
operator|.
name|getExtraHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setRefreshCronExpression
argument_list|(
name|remoteRepository
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|remoteRepository
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setIndexDir
argument_list|(
name|convertUriToPath
argument_list|(
name|indexCreationFeature
operator|.
name|getIndexPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setPackedIndexDir
argument_list|(
name|convertUriToPath
argument_list|(
name|indexCreationFeature
operator|.
name|getPackedIndexPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIndexFeature
name|remoteIndexFeature
init|=
name|remoteRepository
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteIndexFeature
operator|.
name|getIndexUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|.
name|setRemoteIndexUrl
argument_list|(
name|remoteIndexFeature
operator|.
name|getIndexUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cfg
operator|.
name|setRemoteDownloadTimeout
argument_list|(
operator|(
name|int
operator|)
name|remoteIndexFeature
operator|.
name|getDownloadTimeout
argument_list|()
operator|.
name|get
argument_list|(
name|ChronoUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDownloadRemoteIndexOnStartup
argument_list|(
name|remoteIndexFeature
operator|.
name|isDownloadRemoteIndexOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDownloadRemoteIndex
argument_list|(
name|remoteIndexFeature
operator|.
name|isDownloadRemoteIndex
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
name|remoteIndexFeature
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|remoteIndexFeature
operator|.
name|getProxyId
argument_list|()
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
name|remoteIndexFeature
operator|.
name|getProxyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|setRemoteDownloadNetworkProxyId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepositoryConfiguration
name|getManagedConfiguration
parameter_list|(
name|ManagedRepository
name|managedRepository
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
operator|(
name|managedRepository
operator|instanceof
name|MavenManagedRepository
operator|||
name|managedRepository
operator|instanceof
name|BasicManagedRepository
operator|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Wrong remote repository type "
operator|+
name|managedRepository
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The given repository type cannot be handled by the maven provider: "
operator|+
name|managedRepository
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|ManagedRepositoryConfiguration
name|cfg
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setType
argument_list|(
name|managedRepository
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
name|managedRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
name|managedRepository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDescription
argument_list|(
name|managedRepository
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setLocation
argument_list|(
name|convertUriToPath
argument_list|(
name|managedRepository
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setLayout
argument_list|(
name|managedRepository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setRefreshCronExpression
argument_list|(
name|managedRepository
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setScanned
argument_list|(
name|managedRepository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBlockRedeployments
argument_list|(
name|managedRepository
operator|.
name|blocksRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|StagingRepositoryFeature
name|stagingRepositoryFeature
init|=
name|managedRepository
operator|.
name|getFeature
argument_list|(
name|StagingRepositoryFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setStageRepoNeeded
argument_list|(
name|stagingRepositoryFeature
operator|.
name|isStageRepoNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|managedRepository
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setIndexDir
argument_list|(
name|convertUriToPath
argument_list|(
name|indexCreationFeature
operator|.
name|getIndexPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setPackedIndexDir
argument_list|(
name|convertUriToPath
argument_list|(
name|indexCreationFeature
operator|.
name|getPackedIndexPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|indexCreationFeature
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactCleanupFeature
name|artifactCleanupFeature
init|=
name|managedRepository
operator|.
name|getFeature
argument_list|(
name|ArtifactCleanupFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setRetentionCount
argument_list|(
name|artifactCleanupFeature
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setRetentionPeriod
argument_list|(
name|artifactCleanupFeature
operator|.
name|getRetentionPeriod
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|artifactCleanupFeature
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|managedRepository
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|RELEASE
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|setReleases
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|setReleases
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|managedRepository
operator|.
name|getActiveReleaseSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|ReleaseScheme
operator|.
name|SNAPSHOT
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|setSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|setSnapshots
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryGroupConfiguration
name|getRepositoryGroupConfiguration
parameter_list|(
name|RepositoryGroup
name|repositoryGroup
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repositoryGroup
operator|.
name|getType
argument_list|()
operator|!=
name|RepositoryType
operator|.
name|MAVEN
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"The given repository group is not of MAVEN type"
argument_list|)
throw|;
block|}
name|RepositoryGroupConfiguration
name|cfg
init|=
operator|new
name|RepositoryGroupConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setId
argument_list|(
name|repositoryGroup
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setName
argument_list|(
name|repositoryGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryGroup
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|IndexCreationFeature
name|indexCreationFeature
init|=
name|repositoryGroup
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setMergedIndexPath
argument_list|(
name|indexCreationFeature
operator|.
name|getIndexPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cfg
operator|.
name|setMergedIndexTtl
argument_list|(
name|repositoryGroup
operator|.
name|getMergedIndexTTL
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setRepositories
argument_list|(
name|repositoryGroup
operator|.
name|getRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setCronExpression
argument_list|(
name|repositoryGroup
operator|.
name|getSchedulingDefinition
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|getStageRepoConfig
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|stagingRepository
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|stagingRepository
operator|.
name|setId
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
operator|+
name|StagingRepositoryFeature
operator|.
name|STAGING_REPO_POSTFIX
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setName
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
operator|+
name|StagingRepositoryFeature
operator|.
name|STAGING_REPO_POSTFIX
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setBlockRedeployments
argument_list|(
name|repository
operator|.
name|isBlockRedeployments
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setRetentionPeriod
argument_list|(
name|repository
operator|.
name|getRetentionPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setDeleteReleasedSnapshots
argument_list|(
name|repository
operator|.
name|isDeleteReleasedSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setStageRepoNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
name|path
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|stagingRepository
operator|.
name|setLocation
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
argument_list|)
operator|+
literal|"/"
operator|+
name|stagingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
condition|)
block|{
name|Path
name|indexDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexDir
operator|=
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file://"
argument_list|)
condition|?
name|repository
operator|.
name|getIndexDir
argument_list|()
else|:
literal|"file://"
operator|+
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|Path
name|newDir
init|=
name|indexDir
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|indexDir
operator|.
name|getFileName
argument_list|()
operator|+
name|StagingRepositoryFeature
operator|.
name|STAGING_REPO_POSTFIX
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Changing index directory {} -> {}"
argument_list|,
name|indexDir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setIndexDir
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Keeping index directory {}"
argument_list|,
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setIndexDir
argument_list|(
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not parse index path as uri {}"
argument_list|,
name|repository
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setIndexDir
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// in case of absolute dir do not use the same
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|repository
operator|.
name|getPackedIndexDir
argument_list|()
argument_list|)
condition|)
block|{
name|Path
name|packedIndexDir
init|=
literal|null
decl_stmt|;
name|packedIndexDir
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|repository
operator|.
name|getPackedIndexDir
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|packedIndexDir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|Path
name|newDir
init|=
name|packedIndexDir
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|packedIndexDir
operator|.
name|getFileName
argument_list|()
operator|+
name|StagingRepositoryFeature
operator|.
name|STAGING_REPO_POSTFIX
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Changing index directory {} -> {}"
argument_list|,
name|packedIndexDir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setPackedIndexDir
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Keeping index directory {}"
argument_list|,
name|repository
operator|.
name|getPackedIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setPackedIndexDir
argument_list|(
name|repository
operator|.
name|getPackedIndexDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// in case of absolute dir do not use the same
block|}
name|stagingRepository
operator|.
name|setRefreshCronExpression
argument_list|(
name|repository
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setReleases
argument_list|(
name|repository
operator|.
name|isReleases
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setRetentionCount
argument_list|(
name|repository
operator|.
name|getRetentionCount
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setScanned
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setSnapshots
argument_list|(
name|repository
operator|.
name|isSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|stagingRepository
operator|.
name|setSkipPackedIndexCreation
argument_list|(
name|repository
operator|.
name|isSkipPackedIndexCreation
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not duplicate description
comment|//stagingRepository.getDescription("")
return|return
name|stagingRepository
return|;
block|}
specifier|private
name|void
name|setBaseConfig
parameter_list|(
name|EditableRepository
name|repo
parameter_list|,
name|AbstractRepositoryConfiguration
name|cfg
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|URI
name|baseUri
init|=
name|archivaConfiguration
operator|.
name|getRepositoryBaseDir
argument_list|()
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|repo
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
name|cfg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setDescription
argument_list|(
name|repo
operator|.
name|getPrimaryLocale
argument_list|()
argument_list|,
name|cfg
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLayout
argument_list|(
name|cfg
operator|.
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArchivaConfiguration
name|getArchivaConfiguration
parameter_list|()
block|{
return|return
name|archivaConfiguration
return|;
block|}
specifier|public
name|void
name|setArchivaConfiguration
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|//
block|}
block|}
end_class

end_unit

