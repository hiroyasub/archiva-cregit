begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|content
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|FileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|FileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|maven
operator|.
name|MavenMetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryPathTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|BaseRepositoryContentLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ContentAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ItemDeleteStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContentLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ArtifactType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|BaseArtifactTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|DataItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|builder
operator|.
name|ArtifactOptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|metadata
operator|.
name|storage
operator|.
name|ArtifactMappingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|metadata
operator|.
name|storage
operator|.
name|DefaultArtifactMappingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|util
operator|.
name|StorageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * ManagedDefaultRepositoryContent  */
end_comment

begin_class
specifier|public
class|class
name|ManagedDefaultRepositoryContent
extends|extends
name|AbstractDefaultRepositoryContent
implements|implements
name|ManagedRepositoryContent
implements|,
name|BaseRepositoryContentLayout
block|{
comment|// attribute flag that marks version objects that point to a snapshot artifact version
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_ARTIFACT_VERSION
init|=
literal|"maven.snav"
decl_stmt|;
specifier|private
name|FileTypes
name|filetypes
decl_stmt|;
specifier|public
name|void
name|setFileTypes
parameter_list|(
name|FileTypes
name|fileTypes
parameter_list|)
block|{
name|this
operator|.
name|filetypes
operator|=
name|fileTypes
expr_stmt|;
block|}
specifier|private
name|ManagedRepository
name|repository
decl_stmt|;
specifier|private
name|FileLockManager
name|lockManager
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"repositoryPathTranslator#maven2"
argument_list|)
specifier|private
name|RepositoryPathTranslator
name|pathTranslator
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"metadataReader#maven"
argument_list|)
name|MavenMetadataReader
name|metadataReader
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"MavenContentHelper"
argument_list|)
name|MavenContentHelper
name|mavenContentHelper
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT
init|=
literal|"SNAPSHOT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|UNIQUE_SNAPSHOT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(SNAPSHOT|[0-9]{8}\\.[0-9]{6}-[0-9]+)(.*)"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|CLASSIFIER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^-([^.]+)(\\..*)"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|COMMON_EXTENSIONS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(jar|war|ear|dar|tar|zip|pom|xml)$"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|TIMESTAMP_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9]{8})\\.([0-9]{6})$"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|GENERIC_SNAPSHOT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*)-"
operator|+
name|SNAPSHOT
argument_list|)
decl_stmt|;
comment|/**      * We are caching content items in a weak reference map. To avoid always recreating the      * the hierarchical structure.      * TODO: Better use a object cache? E.g. our spring cache implementation?      */
specifier|private
name|ReferenceMap
argument_list|<
name|StorageAsset
argument_list|,
name|ContentItem
argument_list|>
name|itemMap
init|=
operator|new
name|ReferenceMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
name|ReferenceMap
argument_list|<
name|StorageAsset
argument_list|,
name|DataItem
argument_list|>
name|dataItemMap
init|=
operator|new
name|ReferenceMap
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|public
name|ManagedDefaultRepositoryContent
parameter_list|( )
block|{
name|super
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|DefaultArtifactMappingProvider
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ManagedDefaultRepositoryContent
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|,
name|FileTypes
name|fileTypes
parameter_list|,
name|FileLockManager
name|lockManager
parameter_list|)
block|{
name|super
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|DefaultArtifactMappingProvider
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
name|setFileTypes
argument_list|(
name|fileTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockManager
operator|=
name|lockManager
expr_stmt|;
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ManagedDefaultRepositoryContent
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ArtifactMappingProvider
argument_list|>
name|artifactMappingProviders
parameter_list|,
name|FileTypes
name|fileTypes
parameter_list|,
name|FileLockManager
name|lockManager
parameter_list|)
block|{
name|super
argument_list|(
name|artifactMappingProviders
operator|==
literal|null
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|DefaultArtifactMappingProvider
argument_list|( )
argument_list|)
else|:
name|artifactMappingProviders
argument_list|)
expr_stmt|;
name|setFileTypes
argument_list|(
name|fileTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockManager
operator|=
name|lockManager
expr_stmt|;
name|setRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StorageAsset
name|getAssetByPath
parameter_list|(
name|String
name|assetPath
parameter_list|)
block|{
return|return
name|getStorage
argument_list|( )
operator|.
name|getAsset
argument_list|(
name|assetPath
argument_list|)
return|;
block|}
specifier|private
name|StorageAsset
name|getAsset
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|String
name|namespacePath
init|=
name|formatAsDirectory
argument_list|(
name|namespace
operator|.
name|trim
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|namespacePath
argument_list|)
condition|)
block|{
name|namespacePath
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|getAssetByPath
argument_list|(
name|namespacePath
argument_list|)
return|;
block|}
specifier|private
name|StorageAsset
name|getAsset
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|)
block|{
return|return
name|getAsset
argument_list|(
name|namespace
argument_list|)
operator|.
name|resolve
argument_list|(
name|project
argument_list|)
return|;
block|}
specifier|private
name|StorageAsset
name|getAsset
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|getAsset
argument_list|(
name|namespace
argument_list|,
name|project
argument_list|)
operator|.
name|resolve
argument_list|(
name|version
argument_list|)
return|;
block|}
specifier|private
name|StorageAsset
name|getAsset
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|getAsset
argument_list|(
name|namespace
argument_list|,
name|project
argument_list|,
name|version
argument_list|)
operator|.
name|resolve
argument_list|(
name|fileName
argument_list|)
return|;
block|}
comment|/// ************* Start of new generation interface ******************
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|ContentItem
parameter_list|>
name|T
name|adaptItem
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ContentItem
name|item
parameter_list|)
throws|throws
name|LayoutException
block|{
try|try
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Version
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Version
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Version
operator|.
name|class
argument_list|,
name|createVersionFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|item
operator|.
name|adapt
argument_list|(
name|Version
operator|.
name|class
argument_list|)
return|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Project
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Project
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|createProjectFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|item
operator|.
name|adapt
argument_list|(
name|Project
operator|.
name|class
argument_list|)
return|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Namespace
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Namespace
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Namespace
operator|.
name|class
argument_list|,
name|createNamespaceFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|item
operator|.
name|adapt
argument_list|(
name|Namespace
operator|.
name|class
argument_list|)
return|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Artifact
operator|.
name|class
argument_list|,
name|createArtifactFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|item
operator|.
name|adapt
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LayoutRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Could not convert item to class "
operator|+
name|clazz
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllItems
parameter_list|(
name|ItemSelector
name|selector
parameter_list|,
name|Consumer
argument_list|<
name|ItemDeleteStatus
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
try|try
init|(
name|Stream
argument_list|<
name|?
extends|extends
name|ContentItem
argument_list|>
name|stream
init|=
name|newItemStream
argument_list|(
name|selector
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|stream
operator|.
name|forEach
argument_list|(
name|item
lambda|->
block|{
try|try
block|{
name|deleteItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
operator|new
name|ItemDeleteStatus
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|e
parameter_list|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
operator|new
name|ItemDeleteStatus
argument_list|(
name|item
argument_list|,
name|ItemDeleteStatus
operator|.
name|ITEM_NOT_FOUND
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
operator|new
name|ItemDeleteStatus
argument_list|(
name|item
argument_list|,
name|ItemDeleteStatus
operator|.
name|DELETION_FAILED
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
operator|new
name|ItemDeleteStatus
argument_list|(
name|item
argument_list|,
name|ItemDeleteStatus
operator|.
name|UNKNOWN
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes the item from the filesystem. For namespaces, projects and versions it deletes      * recursively.      * For namespaces you have to be careful, because maven repositories may have sub namespaces      * parallel to projects. Which means deleting a namespaces also deletes the sub namespaces and      * not only the projects of the given namespace. Better run the delete for each project of      * a namespace.      *<p>      * Artifacts are deleted as provided. No related artifacts will be deleted.      *      * @param item the item that should be removed      * @throws ItemNotFoundException  if the item does not exist      * @throws ContentAccessException if some error occurred while accessing the filesystem      */
annotation|@
name|Override
specifier|public
name|void
name|deleteItem
parameter_list|(
name|ContentItem
name|item
parameter_list|)
throws|throws
name|ItemNotFoundException
throws|,
name|ContentAccessException
block|{
specifier|final
name|Path
name|baseDirectory
init|=
name|getRepoDir
argument_list|( )
decl_stmt|;
specifier|final
name|Path
name|itemPath
init|=
name|item
operator|.
name|getAsset
argument_list|( )
operator|.
name|getFilePath
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|itemPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"The item "
operator|+
name|item
operator|.
name|toString
argument_list|( )
operator|+
literal|"does not exist in the repository "
operator|+
name|getId
argument_list|( )
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|itemPath
operator|.
name|toAbsolutePath
argument_list|( )
operator|.
name|startsWith
argument_list|(
name|baseDirectory
operator|.
name|toAbsolutePath
argument_list|( )
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The namespace {} to delete from repository {} is not a subdirectory of the repository base."
argument_list|,
name|item
argument_list|,
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Namespace directory: {}"
argument_list|,
name|itemPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Repository directory: {}"
argument_list|,
name|baseDirectory
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContentAccessException
argument_list|(
literal|"Inconsistent directories found. Could not delete namespace."
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|itemPath
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|itemPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|itemPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not delete item from path {}: {}"
argument_list|,
name|itemPath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContentAccessException
argument_list|(
literal|"Error occured while deleting item "
operator|+
name|item
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ContentItem
name|getItem
parameter_list|(
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|selector
operator|.
name|hasVersion
argument_list|( )
operator|&&
name|selector
operator|.
name|hasArtifactId
argument_list|( )
condition|)
block|{
return|return
name|getArtifact
argument_list|(
name|selector
argument_list|)
return|;
block|}
if|else if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|( )
operator|&&
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
return|return
name|getVersion
argument_list|(
name|selector
argument_list|)
return|;
block|}
if|else if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
return|return
name|getProject
argument_list|(
name|selector
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getNamespace
argument_list|(
name|selector
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Namespace
name|getNamespace
parameter_list|(
specifier|final
name|ItemSelector
name|namespaceSelector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
name|StorageAsset
name|nsPath
init|=
name|getAsset
argument_list|(
name|namespaceSelector
operator|.
name|getNamespace
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getNamespaceFromPath
argument_list|(
name|nsPath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid selector "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Project
name|getProject
parameter_list|(
specifier|final
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project id must be set"
argument_list|)
throw|;
block|}
specifier|final
name|StorageAsset
name|path
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getProjectFromPath
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid selector "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Version
name|getVersion
parameter_list|(
specifier|final
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project id must be set"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Version must be set"
argument_list|)
throw|;
block|}
specifier|final
name|StorageAsset
name|path
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getVersionFromPath
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid selector "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Artifact
name|createArtifact
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|,
specifier|final
name|ItemSelector
name|selector
parameter_list|,
specifier|final
name|String
name|classifier
parameter_list|)
block|{
name|Version
name|version
init|=
name|getVersion
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|ArtifactOptBuilder
name|builder
init|=
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaArtifact
operator|.
name|withAsset
argument_list|(
name|artifactPath
argument_list|)
operator|.
name|withVersion
argument_list|(
name|version
argument_list|)
operator|.
name|withId
argument_list|(
name|selector
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|.
name|withArtifactVersion
argument_list|(
name|mavenContentHelper
operator|.
name|getArtifactVersion
argument_list|(
name|artifactPath
argument_list|,
name|selector
argument_list|)
argument_list|)
operator|.
name|withClassifier
argument_list|(
name|classifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|hasType
argument_list|( )
condition|)
block|{
name|builder
operator|.
name|withType
argument_list|(
name|selector
operator|.
name|getType
argument_list|( )
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|public
name|Namespace
name|getNamespaceFromArtifactPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|artifactPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for artifact"
argument_list|)
throw|;
block|}
specifier|final
name|StorageAsset
name|namespacePath
init|=
name|artifactPath
operator|.
name|getParent
argument_list|( )
operator|.
name|getParent
argument_list|( )
operator|.
name|getParent
argument_list|( )
decl_stmt|;
return|return
name|getNamespaceFromPath
argument_list|(
name|namespacePath
argument_list|)
return|;
block|}
specifier|public
name|Namespace
name|getNamespaceFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|nsPath
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|nsPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for namespace"
argument_list|)
throw|;
block|}
name|ContentItem
name|item
decl_stmt|;
try|try
block|{
name|item
operator|=
name|itemMap
operator|.
name|computeIfAbsent
argument_list|(
name|nsPath
argument_list|,
name|path
lambda|->
name|createNamespaceFromPath
argument_list|(
name|nsPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Namespace
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Namespace
operator|.
name|class
argument_list|,
name|createNamespaceFromPath
argument_list|(
name|nsPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|item
operator|.
name|adapt
argument_list|(
name|Namespace
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|Namespace
name|createNamespaceFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|namespacePath
parameter_list|)
throws|throws
name|LayoutRuntimeException
block|{
if|if
condition|(
name|namespacePath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
literal|"Path null is not valid for namespace"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|namespace
init|=
name|MavenContentHelper
operator|.
name|getNamespaceFromNamespacePath
argument_list|(
name|namespacePath
argument_list|)
decl_stmt|;
return|return
name|ArchivaNamespace
operator|.
name|withRepository
argument_list|(
name|this
argument_list|)
operator|.
name|withAsset
argument_list|(
name|namespacePath
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|private
name|Project
name|getProjectFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|path
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for project"
argument_list|)
throw|;
block|}
name|ContentItem
name|item
decl_stmt|;
try|try
block|{
name|item
operator|=
name|itemMap
operator|.
name|computeIfAbsent
argument_list|(
name|path
argument_list|,
name|this
operator|::
name|createProjectFromPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
operator|.
name|getCause
argument_list|( )
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Project
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|createProjectFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|item
operator|.
name|adapt
argument_list|(
name|Project
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Project
name|createProjectFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|projectPath
parameter_list|)
throws|throws
name|LayoutRuntimeException
block|{
if|if
condition|(
name|projectPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
literal|"Path null is not valid for project"
argument_list|)
throw|;
block|}
name|Namespace
name|namespace
decl_stmt|;
try|try
block|{
name|namespace
operator|=
name|getNamespaceFromPath
argument_list|(
name|projectPath
operator|.
name|getParent
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ArchivaProject
operator|.
name|withRepository
argument_list|(
name|this
argument_list|)
operator|.
name|withAsset
argument_list|(
name|projectPath
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|namespace
argument_list|)
operator|.
name|withId
argument_list|(
name|projectPath
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|private
name|Project
name|getProjectFromArtifactPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|artifactPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for artifact"
argument_list|)
throw|;
block|}
specifier|final
name|StorageAsset
name|projectPath
init|=
name|artifactPath
operator|.
name|getParent
argument_list|( )
operator|.
name|getParent
argument_list|( )
decl_stmt|;
return|return
name|getProjectFromPath
argument_list|(
name|projectPath
argument_list|)
return|;
block|}
specifier|private
name|Version
name|getVersionFromArtifactPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|artifactPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for version"
argument_list|)
throw|;
block|}
specifier|final
name|StorageAsset
name|versionPath
init|=
name|artifactPath
operator|.
name|getParent
argument_list|( )
decl_stmt|;
return|return
name|getVersionFromPath
argument_list|(
name|versionPath
argument_list|)
return|;
block|}
specifier|private
name|Version
name|getVersionFromPath
parameter_list|(
name|StorageAsset
name|path
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for version"
argument_list|)
throw|;
block|}
name|ContentItem
name|item
decl_stmt|;
try|try
block|{
name|item
operator|=
name|itemMap
operator|.
name|computeIfAbsent
argument_list|(
name|path
argument_list|,
name|this
operator|::
name|createVersionFromPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
operator|.
name|getCause
argument_list|( )
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Version
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Version
operator|.
name|class
argument_list|,
name|createVersionFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|item
operator|.
name|adapt
argument_list|(
name|Version
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Version
name|createVersionFromPath
parameter_list|(
name|StorageAsset
name|path
parameter_list|)
throws|throws
name|LayoutRuntimeException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
literal|"Path null is not valid for version"
argument_list|)
throw|;
block|}
name|Project
name|proj
decl_stmt|;
try|try
block|{
name|proj
operator|=
name|getProjectFromPath
argument_list|(
name|path
operator|.
name|getParent
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ArchivaVersion
operator|.
name|withRepository
argument_list|(
name|this
argument_list|)
operator|.
name|withAsset
argument_list|(
name|path
argument_list|)
operator|.
name|withProject
argument_list|(
name|proj
argument_list|)
operator|.
name|withVersion
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|Artifact
argument_list|>
name|getOptionalArtifactFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getArtifactFromPath
argument_list|(
name|artifactPath
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get artifact from path {}"
argument_list|,
name|artifactPath
operator|.
name|getPath
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|( )
return|;
block|}
block|}
specifier|private
name|Artifact
name|getArtifactFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|artifactPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path null is not valid for artifact"
argument_list|)
throw|;
block|}
name|DataItem
name|item
decl_stmt|;
try|try
block|{
name|item
operator|=
name|dataItemMap
operator|.
name|computeIfAbsent
argument_list|(
name|artifactPath
argument_list|,
name|this
operator|::
name|createArtifactFromPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|item
operator|.
name|hasCharacteristic
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
condition|)
block|{
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Artifact
operator|.
name|class
argument_list|,
name|createArtifactFromPath
argument_list|(
name|artifactPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|item
operator|.
name|adapt
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|createArtifactFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
throws|throws
name|LayoutRuntimeException
block|{
if|if
condition|(
name|artifactPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
literal|"Path null is not valid for artifact"
argument_list|)
throw|;
block|}
specifier|final
name|Version
name|version
decl_stmt|;
try|try
block|{
name|version
operator|=
name|getVersionFromArtifactPath
argument_list|(
name|artifactPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|ArtifactInfo
name|info
init|=
name|getArtifactInfoFromPath
argument_list|(
name|version
operator|.
name|getId
argument_list|( )
argument_list|,
name|artifactPath
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaArtifact
operator|.
name|withAsset
argument_list|(
name|artifactPath
argument_list|)
operator|.
name|withVersion
argument_list|(
name|version
argument_list|)
operator|.
name|withId
argument_list|(
name|info
operator|.
name|id
argument_list|)
operator|.
name|withClassifier
argument_list|(
name|info
operator|.
name|classifier
argument_list|)
operator|.
name|withRemainder
argument_list|(
name|info
operator|.
name|remainder
argument_list|)
operator|.
name|withType
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|withArtifactVersion
argument_list|(
name|info
operator|.
name|version
argument_list|)
operator|.
name|withContentType
argument_list|(
name|info
operator|.
name|contentType
argument_list|)
operator|.
name|withArtifactType
argument_list|(
name|info
operator|.
name|artifactType
argument_list|)
operator|.
name|build
argument_list|( )
return|;
block|}
specifier|private
name|String
name|getContentType
parameter_list|(
name|StorageAsset
name|artifactPath
parameter_list|)
block|{
try|try
block|{
return|return
name|Files
operator|.
name|probeContentType
argument_list|(
name|artifactPath
operator|.
name|getFilePath
argument_list|( )
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|private
name|DataItem
name|getDataItemFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|artifactPath
parameter_list|)
block|{
specifier|final
name|String
name|contentType
init|=
name|getContentType
argument_list|(
name|artifactPath
argument_list|)
decl_stmt|;
return|return
name|dataItemMap
operator|.
name|computeIfAbsent
argument_list|(
name|artifactPath
argument_list|,
name|myArtifactPath
lambda|->
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaDataItem
operator|.
name|withAsset
argument_list|(
name|artifactPath
argument_list|)
operator|.
name|withId
argument_list|(
name|artifactPath
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|withContentType
argument_list|(
name|contentType
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
return|;
block|}
specifier|private
name|ContentItem
name|getItemFromPath
parameter_list|(
specifier|final
name|StorageAsset
name|itemPath
parameter_list|)
block|{
if|if
condition|(
name|itemPath
operator|.
name|isLeaf
argument_list|( )
condition|)
block|{
if|if
condition|(
name|dataItemMap
operator|.
name|containsKey
argument_list|(
name|itemPath
argument_list|)
condition|)
block|{
return|return
name|dataItemMap
operator|.
name|get
argument_list|(
name|itemPath
argument_list|)
return|;
block|}
return|return
name|getDataItemFromPath
argument_list|(
name|itemPath
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|itemMap
operator|.
name|containsKey
argument_list|(
name|itemPath
argument_list|)
condition|)
block|{
return|return
name|itemMap
operator|.
name|get
argument_list|(
name|itemPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ArchivaContentItem
operator|.
name|withRepository
argument_list|(
name|this
argument_list|)
operator|.
name|withAsset
argument_list|(
name|itemPath
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ManagedRepositoryContent
name|getGenericContent
parameter_list|( )
block|{
return|return
name|this
return|;
block|}
comment|// Simple object to hold artifact information
specifier|private
specifier|static
class|class
name|ArtifactInfo
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|String
name|extension
decl_stmt|;
specifier|private
name|String
name|remainder
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|String
name|classifier
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|StorageAsset
name|asset
decl_stmt|;
specifier|private
name|ArtifactType
name|artifactType
init|=
name|BaseArtifactTypes
operator|.
name|MAIN
decl_stmt|;
block|}
specifier|private
name|ArtifactInfo
name|getArtifactInfoFromPath
parameter_list|(
specifier|final
name|String
name|genericVersion
parameter_list|,
specifier|final
name|StorageAsset
name|path
parameter_list|)
block|{
specifier|final
name|ArtifactInfo
name|info
init|=
operator|new
name|ArtifactInfo
argument_list|( )
decl_stmt|;
name|info
operator|.
name|asset
operator|=
name|path
expr_stmt|;
name|info
operator|.
name|id
operator|=
name|path
operator|.
name|getParent
argument_list|( )
operator|.
name|getParent
argument_list|( )
operator|.
name|getName
argument_list|( )
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
name|path
operator|.
name|getName
argument_list|( )
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isGenericSnapshot
argument_list|(
name|genericVersion
argument_list|)
condition|)
block|{
name|String
name|baseVersion
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|genericVersion
argument_list|,
literal|"-"
operator|+
name|SNAPSHOT
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|info
operator|.
name|id
operator|+
literal|"-"
operator|+
name|baseVersion
operator|+
literal|"-"
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|versionPostfix
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileName
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|UNIQUE_SNAPSHOT_PATTERN
operator|.
name|matcher
argument_list|(
name|versionPostfix
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|info
operator|.
name|version
operator|=
name|baseVersion
operator|+
literal|"-"
operator|+
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|newPrefix
init|=
name|info
operator|.
name|id
operator|+
literal|"-"
operator|+
name|info
operator|.
name|version
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|newPrefix
argument_list|)
condition|)
block|{
name|String
name|classPostfix
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileName
argument_list|,
name|newPrefix
argument_list|)
decl_stmt|;
name|Matcher
name|cMatch
init|=
name|CLASSIFIER_PATTERN
operator|.
name|matcher
argument_list|(
name|classPostfix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cMatch
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|info
operator|.
name|classifier
operator|=
name|cMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|cMatch
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|classPostfix
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact does not match the maven name pattern {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|info
operator|.
name|artifactType
operator|=
name|BaseArtifactTypes
operator|.
name|UNKNOWN
expr_stmt|;
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|fileName
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact does not match the snapshot version pattern {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|info
operator|.
name|artifactType
operator|=
name|BaseArtifactTypes
operator|.
name|UNKNOWN
expr_stmt|;
comment|// This is just a guess. No guarantee to the get a usable version.
name|info
operator|.
name|version
operator|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileName
argument_list|,
name|info
operator|.
name|id
operator|+
literal|'-'
argument_list|)
expr_stmt|;
name|String
name|postfix
init|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|info
operator|.
name|version
argument_list|,
literal|"."
argument_list|)
operator|.
name|toLowerCase
argument_list|( )
decl_stmt|;
while|while
condition|(
name|COMMON_EXTENSIONS
operator|.
name|matcher
argument_list|(
name|postfix
argument_list|)
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|info
operator|.
name|version
operator|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|info
operator|.
name|version
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|postfix
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|info
operator|.
name|version
argument_list|,
literal|"."
argument_list|)
operator|.
name|toLowerCase
argument_list|( )
expr_stmt|;
block|}
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|fileName
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact does not match the maven name pattern: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|.
name|contains
argument_list|(
literal|"-"
operator|+
name|baseVersion
argument_list|)
condition|)
block|{
name|info
operator|.
name|id
operator|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|fileName
argument_list|,
literal|"-"
operator|+
name|baseVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|id
operator|=
name|fileName
expr_stmt|;
block|}
name|info
operator|.
name|artifactType
operator|=
name|BaseArtifactTypes
operator|.
name|UNKNOWN
expr_stmt|;
name|info
operator|.
name|version
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|fileName
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|prefix
init|=
name|info
operator|.
name|id
operator|+
literal|"-"
operator|+
name|genericVersion
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
literal|"-"
argument_list|)
condition|)
block|{
name|info
operator|.
name|version
operator|=
name|genericVersion
expr_stmt|;
name|String
name|classPostfix
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileName
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Matcher
name|cMatch
init|=
name|CLASSIFIER_PATTERN
operator|.
name|matcher
argument_list|(
name|classPostfix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cMatch
operator|.
name|matches
argument_list|( )
condition|)
block|{
name|info
operator|.
name|classifier
operator|=
name|cMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|cMatch
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|classPostfix
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|info
operator|.
name|version
operator|=
name|genericVersion
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileName
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
block|}
if|else if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|info
operator|.
name|id
operator|+
literal|"-"
argument_list|)
condition|)
block|{
name|String
name|postFix
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileName
argument_list|,
name|info
operator|.
name|id
operator|+
literal|"-"
argument_list|)
decl_stmt|;
name|String
name|versionPart
init|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|postFix
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|isVersion
argument_list|(
name|versionPart
argument_list|)
condition|)
block|{
name|info
operator|.
name|version
operator|=
name|versionPart
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|postFix
argument_list|,
name|versionPart
argument_list|)
expr_stmt|;
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|version
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|int
name|dotPos
init|=
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|info
operator|.
name|remainder
operator|=
name|fileName
operator|.
name|substring
argument_list|(
name|dotPos
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fileName
operator|.
name|contains
argument_list|(
literal|"-"
operator|+
name|genericVersion
argument_list|)
condition|)
block|{
name|info
operator|.
name|id
operator|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|fileName
argument_list|,
literal|"-"
operator|+
name|genericVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|id
operator|=
name|fileName
expr_stmt|;
name|info
operator|.
name|version
operator|=
literal|""
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Artifact does not match the version pattern {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|info
operator|.
name|artifactType
operator|=
name|BaseArtifactTypes
operator|.
name|UNKNOWN
expr_stmt|;
name|info
operator|.
name|classifier
operator|=
literal|""
expr_stmt|;
name|info
operator|.
name|remainder
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|fileName
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
name|info
operator|.
name|extension
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|fileName
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|info
operator|.
name|type
operator|=
name|MavenContentHelper
operator|.
name|getTypeFromClassifierAndExtension
argument_list|(
name|info
operator|.
name|classifier
argument_list|,
name|info
operator|.
name|extension
argument_list|)
expr_stmt|;
try|try
block|{
name|info
operator|.
name|contentType
operator|=
name|Files
operator|.
name|probeContentType
argument_list|(
name|path
operator|.
name|getFilePath
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|info
operator|.
name|contentType
operator|=
literal|""
expr_stmt|;
comment|//
block|}
if|if
condition|(
name|MavenContentHelper
operator|.
name|METADATA_FILENAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|info
operator|.
name|artifactType
operator|=
name|BaseArtifactTypes
operator|.
name|METADATA
expr_stmt|;
block|}
if|else if
condition|(
name|MavenContentHelper
operator|.
name|METADATA_REPOSITORY_FILENAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|info
operator|.
name|artifactType
operator|=
name|MavenTypes
operator|.
name|REPOSITORY_METADATA
expr_stmt|;
block|}
if|else if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|info
operator|.
name|remainder
argument_list|)
operator|&&
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|info
operator|.
name|remainder
argument_list|,
literal|"."
argument_list|)
operator|>=
literal|2
condition|)
block|{
name|String
name|mainFile
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|fileName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|getParent
argument_list|( )
operator|.
name|resolve
argument_list|(
name|mainFile
argument_list|)
operator|.
name|exists
argument_list|( )
condition|)
block|{
name|info
operator|.
name|artifactType
operator|=
name|BaseArtifactTypes
operator|.
name|RELATED
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|Artifact
name|getArtifact
parameter_list|(
specifier|final
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
block|{
if|if
condition|(
operator|!
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project id must be set"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Version must be set"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|selector
operator|.
name|hasArtifactId
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Artifact id must be set"
argument_list|)
throw|;
block|}
specifier|final
name|StorageAsset
name|artifactDir
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
decl_stmt|;
specifier|final
name|String
name|artifactVersion
init|=
name|mavenContentHelper
operator|.
name|getArtifactVersion
argument_list|(
name|artifactDir
argument_list|,
name|selector
argument_list|)
decl_stmt|;
specifier|final
name|String
name|classifier
init|=
name|MavenContentHelper
operator|.
name|getClassifier
argument_list|(
name|selector
argument_list|)
decl_stmt|;
specifier|final
name|String
name|extension
init|=
name|MavenContentHelper
operator|.
name|getArtifactExtension
argument_list|(
name|selector
argument_list|)
decl_stmt|;
specifier|final
name|String
name|artifactId
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|selector
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
condition|?
name|selector
operator|.
name|getProjectId
argument_list|( )
else|:
name|selector
operator|.
name|getArtifactId
argument_list|( )
decl_stmt|;
specifier|final
name|String
name|fileName
init|=
name|MavenContentHelper
operator|.
name|getArtifactFileName
argument_list|(
name|artifactId
argument_list|,
name|artifactVersion
argument_list|,
name|classifier
argument_list|,
name|extension
argument_list|)
decl_stmt|;
specifier|final
name|StorageAsset
name|path
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getArtifactFromPath
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The selector is not valid "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Artifact
name|getArtifact
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|LayoutException
throws|,
name|ContentAccessException
block|{
name|StorageAsset
name|asset
init|=
name|getAssetByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|getArtifactFromPath
argument_list|(
name|asset
argument_list|)
return|;
block|}
comment|/**      * Returns all the subdirectories of the given namespace directory as project.      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|getProjects
parameter_list|(
name|Namespace
name|namespace
parameter_list|)
block|{
return|return
name|namespace
operator|.
name|getAsset
argument_list|( )
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|StorageAsset
operator|::
name|isContainer
argument_list|)
operator|.
name|map
argument_list|(
name|a
lambda|->
block|{
try|try
block|{
return|return
name|getProjectFromPath
argument_list|(
name|a
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Not a valid project path "
operator|+
name|a
operator|.
name|getPath
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|getProjects
parameter_list|(
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
return|return
name|getProjects
argument_list|(
name|getNamespace
argument_list|(
name|selector
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a version object for each directory that is a direct child of the project directory.      *      * @param project the project for which the versions should be returned      * @return the list of versions or a empty list, if not version was found      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Version
argument_list|>
name|getVersions
parameter_list|(
specifier|final
name|Project
name|project
parameter_list|)
block|{
name|StorageAsset
name|asset
init|=
name|getAsset
argument_list|(
name|project
operator|.
name|getNamespace
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|,
name|project
operator|.
name|getId
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|asset
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|StorageAsset
operator|::
name|isContainer
argument_list|)
operator|.
name|map
argument_list|(
name|a
lambda|->
name|ArchivaVersion
operator|.
name|withAsset
argument_list|(
name|a
argument_list|)
operator|.
name|withProject
argument_list|(
name|project
argument_list|)
operator|.
name|withVersion
argument_list|(
name|a
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
comment|/**      * Returns the versions that can be found for the given selector.      *      * @param selector the item selector. At least namespace and projectId must be set.      * @return the list of version objects or a empty list, if the selector does not match a version      * @throws ContentAccessException   if the access to the underlying backend failed      * @throws IllegalArgumentException if the selector has no projectId specified      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Version
argument_list|>
name|getVersions
parameter_list|(
specifier|final
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad item selector for version list: {}"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project id not set, while retrieving versions."
argument_list|)
throw|;
block|}
specifier|final
name|Project
name|project
init|=
name|getProject
argument_list|(
name|selector
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
specifier|final
name|StorageAsset
name|asset
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|asset
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|a
lambda|->
name|getArtifactInfoFromPath
argument_list|(
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|,
name|a
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|ai
lambda|->
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ai
operator|.
name|version
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
block|{
lambda|try
block|{
return|return
name|getVersionFromArtifactPath
argument_list|(
name|v
operator|.
name|asset
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get version from asset "
operator|+
name|v
operator|.
name|asset
operator|.
name|getPath
argument_list|( )
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block_content|)
block|.filter( Objects::nonNull
block|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
expr_stmt|;
end_class

begin_block
unit|}         else
block|{
return|return
name|getVersions
argument_list|(
name|project
argument_list|)
return|;
block|}
end_block

begin_function
unit|}      public
name|List
argument_list|<
name|String
argument_list|>
name|getArtifactVersions
parameter_list|(
specifier|final
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad item selector for version list: {}"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Project id not set, while retrieving versions."
argument_list|)
throw|;
block|}
specifier|final
name|Project
name|project
init|=
name|getProject
argument_list|(
name|selector
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
specifier|final
name|StorageAsset
name|asset
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|asset
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|a
lambda|->
name|getArtifactInfoFromPath
argument_list|(
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|,
name|a
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|ai
lambda|->
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ai
operator|.
name|version
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|version
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|project
operator|.
name|getAsset
argument_list|( )
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|a
lambda|->
block|{
try|try
block|{
return|return
name|getVersionFromPath
argument_list|(
name|a
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get version from path "
operator|+
name|a
operator|.
name|getPath
argument_list|( )
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|flatMap
argument_list|(
name|v
lambda|->
name|v
operator|.
name|getAsset
argument_list|( )
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|a
lambda|->
name|getArtifactInfoFromPath
argument_list|(
name|v
operator|.
name|getId
argument_list|( )
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|ai
lambda|->
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|ai
operator|.
name|version
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|version
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * See {@link #newArtifactStream(ItemSelector)}. This method collects the stream into a list.      *      * @param selector the selector for the artifacts      * @return the list of artifacts      * @throws ContentAccessException if the access to the underlying filesystem failed      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|getArtifacts
parameter_list|(
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
block|{
try|try
init|(
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|stream
init|=
name|newArtifactStream
argument_list|(
name|selector
argument_list|)
init|)
block|{
return|return
name|stream
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/*      * File filter to select certain artifacts using the selector data.      */
end_comment

begin_function
specifier|private
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|getArtifactFileFilterFromSelector
parameter_list|(
specifier|final
name|ItemSelector
name|selector
parameter_list|)
block|{
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|p
init|=
name|StorageAsset
operator|::
name|isLeaf
decl_stmt|;
name|StringBuilder
name|fileNamePattern
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"^"
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|hasArtifactId
argument_list|( )
condition|)
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|selector
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"[A-Za-z0-9_\\-.]+-"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selector
operator|.
name|hasArtifactVersion
argument_list|( )
condition|)
block|{
if|if
condition|(
name|selector
operator|.
name|getArtifactVersion
argument_list|( )
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|StringUtils
operator|.
name|splitByWholeSeparator
argument_list|(
name|selector
operator|.
name|getArtifactVersion
argument_list|( )
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|currentToken
range|:
name|tokens
control|)
block|{
if|if
condition|(
operator|!
name|currentToken
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|currentToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"[A-Za-z0-9_\\-.]*"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|selector
operator|.
name|getArtifactVersion
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"[A-Za-z0-9_\\-.]+"
argument_list|)
expr_stmt|;
block|}
name|String
name|classifier
init|=
name|selector
operator|.
name|hasClassifier
argument_list|( )
condition|?
name|selector
operator|.
name|getClassifier
argument_list|( )
else|:
operator|(
name|selector
operator|.
name|hasType
argument_list|( )
condition|?
name|MavenContentHelper
operator|.
name|getClassifierFromType
argument_list|(
name|selector
operator|.
name|getType
argument_list|( )
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"(-[A-Za-z0-9]+)?\\."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|classifier
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\\."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"\\."
argument_list|)
expr_stmt|;
block|}
name|String
name|extension
init|=
name|selector
operator|.
name|hasExtension
argument_list|( )
condition|?
name|selector
operator|.
name|getExtension
argument_list|( )
else|:
operator|(
name|selector
operator|.
name|hasType
argument_list|( )
condition|?
name|MavenContentHelper
operator|.
name|getArtifactExtension
argument_list|(
name|selector
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|selector
operator|.
name|includeRelatedArtifacts
argument_list|( )
condition|)
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|extension
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"(\\.[A-Za-z0-9]+)?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|extension
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileNamePattern
operator|.
name|append
argument_list|(
literal|"[A-Za-z0-9.]+"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fileNamePattern
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|and
argument_list|(
name|a
lambda|->
name|pattern
operator|.
name|matcher
argument_list|(
name|a
operator|.
name|getName
argument_list|( )
argument_list|)
operator|.
name|matches
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the artifacts. The number of artifacts returned depend on the selector.      * If the selector sets the flag {@link ItemSelector#includeRelatedArtifacts()} to<code>true</code>,      * additional to the matching artifacts, related artifacts like hash values or signatures are included in the artifact      * stream.      * If the selector sets the flag {@link ItemSelector#recurse()} to<code>true</code>, artifacts of the given      * namespace and from all sub namespaces that start with the given namespace are returned.      *<ul>      *<li>If only a namespace is given, all artifacts with the given namespace or starting with the given      *     namespace (see {@link ItemSelector#recurse()} are returned.</li>      *<li>If a namespace and a project id, or artifact id is given, the artifacts of all versions of the given      *     namespace and project are returned.</li>      *<li>If a namespace and a project id or artifact id and a version is given, the artifacts of the given      *     version are returned</li>      *<li>If no artifact version or artifact id is given, it will return all "artifacts" found in the directory.      *     To select only artifacts that match the layout you should add the artifact id and artifact version      *     (can contain a '*' pattern).</li>      *</ul>      *<p>      * The '*' pattern can be used in classifiers and artifact versions and match zero or more characters.      *<p>      * There is no determinate order of the elements in the stream.      *<p>      * Returned streams are auto closable and should be used in a try-with-resources statement.      *      * @param selector the item selector      * @throws ContentAccessException if the access to the underlying filesystem failed      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|newArtifactStream
parameter_list|(
name|ItemSelector
name|selector
parameter_list|)
throws|throws
name|ContentAccessException
block|{
name|String
name|projectId
init|=
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|?
name|selector
operator|.
name|getProjectId
argument_list|( )
else|:
operator|(
name|selector
operator|.
name|hasArtifactId
argument_list|( )
condition|?
name|selector
operator|.
name|getArtifactId
argument_list|( )
else|:
literal|null
operator|)
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|filter
init|=
name|getArtifactFileFilterFromSelector
argument_list|(
name|selector
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectId
operator|!=
literal|null
operator|&&
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
return|return
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|projectId
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getOptionalArtifactFromPath
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
if|else if
condition|(
name|projectId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StorageAsset
name|projDir
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|projectId
argument_list|)
decl_stmt|;
return|return
name|projDir
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|isContainer
argument_list|( )
condition|?
name|a
operator|.
name|list
argument_list|( )
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|List
operator|::
name|stream
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getOptionalArtifactFromPath
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
else|else
block|{
name|StorageAsset
name|namespaceDir
init|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|recurse
argument_list|( )
condition|)
block|{
return|return
name|StorageUtil
operator|.
name|newAssetStream
argument_list|(
name|namespaceDir
argument_list|,
literal|true
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getOptionalArtifactFromPath
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
else|else
block|{
comment|// We descend into 2 subdirectories (project and version)
return|return
name|namespaceDir
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|isContainer
argument_list|( )
condition|?
name|a
operator|.
name|list
argument_list|( )
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|List
operator|::
name|stream
argument_list|)
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|isContainer
argument_list|( )
condition|?
name|a
operator|.
name|list
argument_list|( )
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|List
operator|::
name|stream
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getOptionalArtifactFromPath
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Same as {@link #newArtifactStream(ContentItem)} but returns the collected stream as list.      *      * @param item the item the parent item      * @return the list of artifacts or a empty list of no artifacts where found      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|getArtifacts
parameter_list|(
name|ContentItem
name|item
parameter_list|)
block|{
try|try
init|(
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|stream
init|=
name|newArtifactStream
argument_list|(
name|item
argument_list|)
init|)
block|{
return|return
name|stream
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Returns all artifacts      *      * @param item the namespace to search for artifacts      * @return the stream of artifacts      * @throws ContentAccessException if the access to the underlying storage failed      */
end_comment

begin_function
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|newArtifactStream
parameter_list|(
name|Namespace
name|item
parameter_list|)
throws|throws
name|ContentAccessException
block|{
return|return
name|newArtifactStream
argument_list|(
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|item
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|newArtifactStream
parameter_list|(
name|Project
name|item
parameter_list|)
throws|throws
name|ContentAccessException
block|{
return|return
name|newArtifactStream
argument_list|(
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|item
operator|.
name|getNamespace
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|item
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|newArtifactStream
parameter_list|(
name|Version
name|item
parameter_list|)
throws|throws
name|ContentAccessException
block|{
return|return
name|newArtifactStream
argument_list|(
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|item
operator|.
name|getProject
argument_list|( )
operator|.
name|getNamespace
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|item
operator|.
name|getProject
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|withVersion
argument_list|(
name|item
operator|.
name|getId
argument_list|( )
argument_list|)
operator|.
name|build
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns all related artifacts that match the given artifact. That means all artifacts that have      * the same filename plus an additional extension, e.g. ${fileName}.sha2      *      * @param item the artifact      * @return the stream of artifacts      * @throws ContentAccessException if access to the underlying storage failed      */
end_comment

begin_function
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|newArtifactStream
parameter_list|(
name|Artifact
name|item
parameter_list|)
throws|throws
name|ContentAccessException
block|{
specifier|final
name|Version
name|v
init|=
name|item
operator|.
name|getVersion
argument_list|( )
decl_stmt|;
specifier|final
name|String
name|fileName
init|=
name|item
operator|.
name|getFileName
argument_list|( )
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|filter
init|=
parameter_list|(
name|StorageAsset
name|a
parameter_list|)
lambda|->
name|a
operator|.
name|getName
argument_list|( )
operator|.
name|startsWith
argument_list|(
name|fileName
operator|+
literal|"."
argument_list|)
decl_stmt|;
return|return
name|v
operator|.
name|getAsset
argument_list|( )
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|a
lambda|->
block|{
try|try
block|{
return|return
name|getArtifactFromPath
argument_list|(
name|a
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LayoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Not a valid artifact path "
operator|+
name|a
operator|.
name|getPath
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the stream of artifacts that are children of the given item.      *      * @param item the item from where the artifacts should be returned      * @return the stream of artifacts      * @throws ContentAccessException if access to the underlying storage failed      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|Artifact
argument_list|>
name|newArtifactStream
parameter_list|(
name|ContentItem
name|item
parameter_list|)
throws|throws
name|ContentAccessException
block|{
if|if
condition|(
name|item
operator|instanceof
name|Namespace
condition|)
block|{
return|return
name|newArtifactStream
argument_list|(
operator|(
operator|(
name|Namespace
operator|)
name|item
operator|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|Project
condition|)
block|{
return|return
name|newArtifactStream
argument_list|(
operator|(
name|Project
operator|)
name|item
argument_list|)
return|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|Version
condition|)
block|{
return|return
name|newArtifactStream
argument_list|(
operator|(
name|Version
operator|)
name|item
argument_list|)
return|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|Artifact
condition|)
block|{
return|return
name|newArtifactStream
argument_list|(
operator|(
name|Artifact
operator|)
name|item
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"newArtifactStream for unsupported item requested: {}"
argument_list|,
name|item
operator|.
name|getClass
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|Stream
operator|.
name|empty
argument_list|( )
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|appendPatternRegex
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|patternArray
init|=
name|name
operator|.
name|split
argument_list|(
literal|"[*]"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patternArray
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|patternArray
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"[A-Za-z0-9_\\-]*"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|patternArray
index|[
name|patternArray
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|getItemFileFilterFromSelector
parameter_list|(
name|ItemSelector
name|selector
parameter_list|)
block|{
if|if
condition|(
operator|!
name|selector
operator|.
name|hasNamespace
argument_list|( )
operator|&&
operator|!
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Selector must have at least namespace and projectid"
argument_list|)
throw|;
block|}
name|StringBuilder
name|pathMatcher
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"^"
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|hasNamespace
argument_list|( )
condition|)
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|String
operator|.
name|join
argument_list|(
literal|"/"
argument_list|,
name|selector
operator|.
name|getNamespace
argument_list|( )
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|appendPatternRegex
argument_list|(
name|pathMatcher
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathMatcher
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
name|pathMatcher
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|.
name|getProjectId
argument_list|( )
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|appendPatternRegex
argument_list|(
name|pathMatcher
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathMatcher
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
name|pathMatcher
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|.
name|getVersion
argument_list|( )
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|appendPatternRegex
argument_list|(
name|pathMatcher
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathMatcher
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|selector
operator|.
name|getVersion
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|pathMatcher
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
specifier|final
name|Pattern
name|pathPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pathMatcher
operator|.
name|toString
argument_list|( )
argument_list|)
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|pathPredicate
init|=
parameter_list|(
name|StorageAsset
name|asset
parameter_list|)
lambda|->
name|pathPattern
operator|.
name|matcher
argument_list|(
name|asset
operator|.
name|getPath
argument_list|( )
argument_list|)
operator|.
name|matches
argument_list|( )
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|hasArtifactId
argument_list|( )
operator|||
name|selector
operator|.
name|hasArtifactVersion
argument_list|( )
operator|||
name|selector
operator|.
name|hasClassifier
argument_list|( )
operator|||
name|selector
operator|.
name|hasType
argument_list|( )
operator|||
name|selector
operator|.
name|hasExtension
argument_list|( )
condition|)
block|{
return|return
name|getArtifactFileFilterFromSelector
argument_list|(
name|selector
argument_list|)
operator|.
name|and
argument_list|(
name|pathPredicate
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|pathPredicate
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Returns a concatenation of the asset and its children as stream, if they exist.      * It descends<code>level+1</code> levels down.      *      * @param a the asset to start from      * @param level the number of child levels to descend. 0 means only the children of the given asset, 1 means the children of childrens of the given asset, ...      * @return the stream of storage assets      */
end_comment

begin_function
specifier|private
name|Stream
argument_list|<
name|StorageAsset
argument_list|>
name|getChildrenDF
parameter_list|(
name|StorageAsset
name|a
parameter_list|,
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|isContainer
argument_list|( )
condition|)
block|{
if|if
condition|(
name|level
operator|>
literal|0
condition|)
block|{
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|a
operator|.
name|list
argument_list|()
operator|.
name|stream
argument_list|( )
operator|.
name|flatMap
argument_list|(
name|ch
lambda|->
name|getChildrenDF
argument_list|(
name|ch
argument_list|,
name|level
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
name|a
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|a
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
name|a
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|a
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|?
extends|extends
name|ContentItem
argument_list|>
name|newItemStream
parameter_list|(
name|ItemSelector
name|selector
parameter_list|,
name|boolean
name|parallel
parameter_list|)
throws|throws
name|ContentAccessException
throws|,
name|IllegalArgumentException
block|{
specifier|final
name|Predicate
argument_list|<
name|StorageAsset
argument_list|>
name|filter
init|=
name|getItemFileFilterFromSelector
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|StorageAsset
name|startDir
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|getNamespace
argument_list|()
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|startDir
operator|=
name|getAsset
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|( )
operator|&&
name|selector
operator|.
name|getProjectId
argument_list|()
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|startDir
operator|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|()
operator|&&
name|selector
operator|.
name|hasVersion
argument_list|()
operator|&&
name|selector
operator|.
name|getVersion
argument_list|()
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|startDir
operator|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|( )
operator|&&
name|selector
operator|.
name|hasVersion
argument_list|( )
condition|)
block|{
name|startDir
operator|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|,
name|selector
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selector
operator|.
name|hasProjectId
argument_list|( )
condition|)
block|{
name|startDir
operator|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|,
name|selector
operator|.
name|getProjectId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startDir
operator|=
name|getAsset
argument_list|(
name|selector
operator|.
name|getNamespace
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|selector
operator|.
name|recurse
argument_list|( )
condition|)
block|{
comment|// We descend into 2 subdirectories (project and version)
return|return
name|startDir
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|flatMap
argument_list|(
name|a
lambda|->
name|getChildrenDF
argument_list|(
name|a
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getItemFromPath
argument_list|)
return|;
block|}
block|}
return|return
name|StorageUtil
operator|.
name|newAssetStream
argument_list|(
name|startDir
argument_list|,
name|parallel
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getItemFromPath
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Checks, if the asset/file queried by the given selector exists.      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|hasContent
parameter_list|(
name|ItemSelector
name|selector
parameter_list|)
block|{
return|return
name|getItem
argument_list|(
name|selector
argument_list|)
operator|.
name|getAsset
argument_list|( )
operator|.
name|exists
argument_list|( )
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ContentItem
name|getParent
parameter_list|(
name|ContentItem
name|item
parameter_list|)
block|{
return|return
name|getItemFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
operator|.
name|getParent
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|ContentItem
argument_list|>
name|getChildren
parameter_list|(
name|ContentItem
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|getAsset
argument_list|()
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|( )
return|;
block|}
else|else
block|{
return|return
name|item
operator|.
name|getAsset
argument_list|( )
operator|.
name|list
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|this
operator|::
name|getItemFromPath
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|( )
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|ContentItem
parameter_list|>
name|T
name|applyCharacteristic
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ContentItem
name|item
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|item
operator|.
name|getAsset
argument_list|()
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
condition|)
block|{
name|Artifact
name|artifact
init|=
name|getArtifactFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
decl_stmt|;
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Artifact
operator|.
name|class
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|artifact
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Could not adapt file to clazz "
operator|+
name|clazz
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Version
operator|.
name|class
argument_list|)
condition|)
block|{
name|Version
name|version
init|=
name|getVersionFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
decl_stmt|;
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Version
operator|.
name|class
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|version
return|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Project
operator|.
name|class
argument_list|)
condition|)
block|{
name|Project
name|project
init|=
name|getProjectFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
decl_stmt|;
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|project
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|project
return|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Namespace
operator|.
name|class
argument_list|)
condition|)
block|{
name|Namespace
name|ns
init|=
name|getNamespaceFromPath
argument_list|(
name|item
operator|.
name|getAsset
argument_list|( )
argument_list|)
decl_stmt|;
name|item
operator|.
name|setCharacteristic
argument_list|(
name|Namespace
operator|.
name|class
argument_list|,
name|ns
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|ns
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Cannot adapt directory to clazz "
operator|+
name|clazz
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|ManagedRepositoryContentLayout
parameter_list|>
name|T
name|getLayout
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Cannot convert to layout "
operator|+
name|clazz
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|ManagedRepositoryContentLayout
parameter_list|>
name|boolean
name|supportsLayout
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Moves the file to the artifact destination      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addArtifact
parameter_list|(
name|Path
name|sourceFile
parameter_list|,
name|Artifact
name|destination
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|ContentAccessException
block|{
try|try
block|{
name|StorageAsset
name|asset
init|=
name|destination
operator|.
name|getAsset
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|asset
operator|.
name|exists
argument_list|( )
condition|)
block|{
name|asset
operator|.
name|create
argument_list|( )
expr_stmt|;
block|}
name|asset
operator|.
name|replaceDataFromFile
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not push data to asset source={} destination={}. {}"
argument_list|,
name|sourceFile
argument_list|,
name|destination
operator|.
name|getAsset
argument_list|( )
operator|.
name|getFilePath
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContentAccessException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ContentItem
name|toItem
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|LayoutException
block|{
name|StorageAsset
name|asset
init|=
name|getRepository
argument_list|( )
operator|.
name|getAsset
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ContentItem
name|item
init|=
name|getItemFromPath
argument_list|(
name|asset
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|DataItem
condition|)
block|{
name|Artifact
name|artifact
init|=
name|adaptItem
argument_list|(
name|Artifact
operator|.
name|class
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|asset
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path too short for maven artifact "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|version
init|=
name|asset
operator|.
name|getParent
argument_list|( )
operator|.
name|getName
argument_list|( )
decl_stmt|;
if|if
condition|(
name|asset
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Path too short for maven artifact "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|project
init|=
name|item
operator|.
name|getAsset
argument_list|( )
operator|.
name|getParent
argument_list|( )
operator|.
name|getParent
argument_list|( )
operator|.
name|getName
argument_list|( )
decl_stmt|;
name|DataItem
name|dataItem
init|=
operator|(
name|DataItem
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dataItem
operator|.
name|getExtension
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Missing type on maven artifact"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|project
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"The maven artifact id "
operator|+
name|artifact
operator|.
name|getId
argument_list|()
operator|+
literal|" does not match the project id: "
operator|+
name|project
argument_list|)
throw|;
block|}
name|boolean
name|versionIsGenericSnapshot
init|=
name|VersionUtil
operator|.
name|isGenericSnapshot
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|boolean
name|artifactVersionIsSnapshot
init|=
name|VersionUtil
operator|.
name|isSnapshot
argument_list|(
name|artifact
operator|.
name|getArtifactVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionIsGenericSnapshot
operator|&&
operator|!
name|artifactVersionIsSnapshot
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"The maven artifact has no snapshot version in snapshot directory "
operator|+
name|dataItem
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|versionIsGenericSnapshot
operator|&&
name|artifactVersionIsSnapshot
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"The maven artifact version "
operator|+
name|artifact
operator|.
name|getArtifactVersion
argument_list|()
operator|+
literal|" is a snapshot version but inside a non snapshot directory "
operator|+
name|version
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|versionIsGenericSnapshot
operator|&&
operator|!
name|version
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactVersion
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"The maven artifact version "
operator|+
name|artifact
operator|.
name|getArtifactVersion
argument_list|()
operator|+
literal|" does not match the version directory "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
return|return
name|item
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ContentItem
name|toItem
parameter_list|(
name|StorageAsset
name|assetPath
parameter_list|)
throws|throws
name|LayoutException
block|{
return|return
name|toItem
argument_list|(
name|assetPath
operator|.
name|getPath
argument_list|( )
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// ************* End of new generation interface ******************
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|String
name|toPath
parameter_list|(
name|ContentItem
name|item
parameter_list|)
block|{
return|return
name|item
operator|.
name|getAsset
argument_list|( )
operator|.
name|getPath
argument_list|( )
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|DataItem
name|getMetadataItem
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|StorageAsset
name|metaPath
init|=
name|version
operator|.
name|getAsset
argument_list|( )
operator|.
name|resolve
argument_list|(
name|MAVEN_METADATA
argument_list|)
decl_stmt|;
return|return
name|getDataItemFromPath
argument_list|(
name|metaPath
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|DataItem
name|getMetadataItem
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|StorageAsset
name|metaPath
init|=
name|project
operator|.
name|getAsset
argument_list|( )
operator|.
name|resolve
argument_list|(
name|MAVEN_METADATA
argument_list|)
decl_stmt|;
return|return
name|getDataItemFromPath
argument_list|(
name|metaPath
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|( )
block|{
return|return
name|repository
operator|.
name|getId
argument_list|( )
return|;
block|}
end_function

begin_comment
comment|/*      * Create the filter for various combinations of classifier and type      */
end_comment

begin_function
specifier|private
name|Predicate
argument_list|<
name|ArtifactReference
argument_list|>
name|getChecker
parameter_list|(
name|ArtifactReference
name|referenceObject
parameter_list|,
name|String
name|extension
parameter_list|)
block|{
comment|// TODO: Check, if extension is the correct parameter here
comment|// We compare type with extension which works for artifacts like .jar.md5 but may
comment|// be not the best way.
if|if
condition|(
name|referenceObject
operator|.
name|getClassifier
argument_list|( )
operator|!=
literal|null
operator|&&
name|referenceObject
operator|.
name|getType
argument_list|( )
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
parameter_list|(
name|ArtifactReference
name|a
parameter_list|)
lambda|->
name|referenceObject
operator|.
name|getGroupId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getArtifactId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getVersion
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getVersion
argument_list|( )
argument_list|)
operator|&&
operator|(
operator|(
name|a
operator|.
name|getType
argument_list|( )
operator|==
literal|null
operator|)
operator|||
name|referenceObject
operator|.
name|getType
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|( )
argument_list|)
operator|||
name|a
operator|.
name|getType
argument_list|( )
operator|.
name|startsWith
argument_list|(
name|extension
argument_list|)
operator|)
operator|&&
name|referenceObject
operator|.
name|getClassifier
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getClassifier
argument_list|( )
argument_list|)
operator|)
return|;
block|}
if|else if
condition|(
name|referenceObject
operator|.
name|getClassifier
argument_list|( )
operator|!=
literal|null
operator|&&
name|referenceObject
operator|.
name|getType
argument_list|( )
operator|==
literal|null
condition|)
block|{
return|return
operator|(
parameter_list|(
name|ArtifactReference
name|a
parameter_list|)
lambda|->
name|referenceObject
operator|.
name|getGroupId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getArtifactId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getVersion
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getVersion
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getClassifier
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getClassifier
argument_list|( )
argument_list|)
operator|)
return|;
block|}
if|else if
condition|(
name|referenceObject
operator|.
name|getClassifier
argument_list|( )
operator|==
literal|null
operator|&&
name|referenceObject
operator|.
name|getType
argument_list|( )
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
parameter_list|(
name|ArtifactReference
name|a
parameter_list|)
lambda|->
name|referenceObject
operator|.
name|getGroupId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getArtifactId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getVersion
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getVersion
argument_list|( )
argument_list|)
operator|&&
operator|(
operator|(
name|a
operator|.
name|getType
argument_list|( )
operator|==
literal|null
operator|)
operator|||
name|referenceObject
operator|.
name|getType
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|( )
argument_list|)
operator|||
name|a
operator|.
name|getType
argument_list|( )
operator|.
name|startsWith
argument_list|(
name|extension
argument_list|)
operator|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
parameter_list|(
name|ArtifactReference
name|a
parameter_list|)
lambda|->
name|referenceObject
operator|.
name|getGroupId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getArtifactId
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|( )
argument_list|)
operator|&&
name|referenceObject
operator|.
name|getVersion
argument_list|( )
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getVersion
argument_list|( )
argument_list|)
operator|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|String
name|convertUriToPath
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|( )
operator|==
literal|null
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|uri
operator|.
name|getPath
argument_list|( )
argument_list|)
operator|.
name|toString
argument_list|( )
return|;
block|}
if|else if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|( )
argument_list|)
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|( )
return|;
block|}
else|else
block|{
return|return
name|uri
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ManagedRepository
name|getRepository
parameter_list|( )
block|{
return|return
name|repository
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setRepository
parameter_list|(
specifier|final
name|ManagedRepository
name|repo
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repo
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|repository
operator|instanceof
name|EditableManagedRepository
condition|)
block|{
operator|(
operator|(
name|EditableManagedRepository
operator|)
name|repository
operator|)
operator|.
name|setContent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|Path
name|getRepoDir
parameter_list|( )
block|{
return|return
name|repository
operator|.
name|getRoot
argument_list|()
operator|.
name|getFilePath
argument_list|( )
return|;
block|}
end_function

begin_function
specifier|private
name|RepositoryStorage
name|getStorage
parameter_list|( )
block|{
return|return
name|repository
operator|.
name|getRoot
argument_list|()
operator|.
name|getStorage
argument_list|( )
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setFiletypes
parameter_list|(
name|FileTypes
name|filetypes
parameter_list|)
block|{
name|this
operator|.
name|filetypes
operator|=
name|filetypes
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|setMavenContentHelper
parameter_list|(
name|MavenContentHelper
name|contentHelper
parameter_list|)
block|{
name|this
operator|.
name|mavenContentHelper
operator|=
name|contentHelper
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|MavenMetadataReader
name|getMetadataReader
parameter_list|( )
block|{
return|return
name|metadataReader
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setMetadataReader
parameter_list|(
name|MavenMetadataReader
name|metadataReader
parameter_list|)
block|{
name|this
operator|.
name|metadataReader
operator|=
name|metadataReader
expr_stmt|;
block|}
end_function

unit|}
end_unit

