begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|content
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|model
operator|.
name|ArtifactMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|maven
operator|.
name|model
operator|.
name|MavenArtifactFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|metadata
operator|.
name|repository
operator|.
name|storage
operator|.
name|RepositoryPathTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|metadata
operator|.
name|storage
operator|.
name|ArtifactMappingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|metadata
operator|.
name|storage
operator|.
name|DefaultArtifactMappingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|maven
operator|.
name|metadata
operator|.
name|storage
operator|.
name|Maven2RepositoryPathTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|LayoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|ItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|PathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|content
operator|.
name|base
operator|.
name|ArchivaItemSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * DefaultPathParser is a parser for maven 2 (default layout) paths to ArtifactReference.  *  * TODO: remove in favour of path translator, this is just delegating for the most part, but won't accommodate other  * extensions like NPanday  *  *  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"pathParser#default"
argument_list|)
specifier|public
class|class
name|DefaultPathParser
implements|implements
name|PathParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_ARTIFACT_PATH
init|=
literal|"Invalid path to Artifact: "
decl_stmt|;
specifier|private
name|RepositoryPathTranslator
name|pathTranslator
init|=
operator|new
name|Maven2RepositoryPathTranslator
argument_list|(
name|Collections
operator|.
expr|<
name|ArtifactMappingProvider
operator|>
name|singletonList
argument_list|(
operator|new
name|DefaultArtifactMappingProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ItemSelector
name|toItemSelector
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|LayoutException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
literal|"Unable to convert blank path."
argument_list|)
throw|;
block|}
try|try
block|{
name|ArtifactMetadata
name|metadata
init|=
name|pathTranslator
operator|.
name|getArtifactForPath
argument_list|(
literal|null
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ArchivaItemSelector
operator|.
name|Builder
name|builder
init|=
name|ArchivaItemSelector
operator|.
name|builder
argument_list|( )
operator|.
name|withNamespace
argument_list|(
name|metadata
operator|.
name|getNamespace
argument_list|( )
argument_list|)
operator|.
name|withProjectId
argument_list|(
name|metadata
operator|.
name|getProject
argument_list|( )
argument_list|)
operator|.
name|withVersion
argument_list|(
name|metadata
operator|.
name|getProjectVersion
argument_list|( )
argument_list|)
operator|.
name|withArtifactId
argument_list|(
name|metadata
operator|.
name|getProject
argument_list|( )
argument_list|)
operator|.
name|withArtifactVersion
argument_list|(
name|metadata
operator|.
name|getVersion
argument_list|( )
argument_list|)
decl_stmt|;
name|MavenArtifactFacet
name|facet
init|=
operator|(
name|MavenArtifactFacet
operator|)
name|metadata
operator|.
name|getFacet
argument_list|(
name|MavenArtifactFacet
operator|.
name|FACET_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|withClassifier
argument_list|(
name|facet
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withType
argument_list|(
name|facet
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|( )
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LayoutException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

