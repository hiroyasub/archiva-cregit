begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|index
operator|.
name|mock
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|filelock
operator|.
name|DefaultFileLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|PathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|ArchivaIndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexCreationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|IndexUpdateFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|UnsupportedBaseContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|ProxyRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|maven
operator|.
name|WagonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|maven
operator|.
name|WagonFactoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|maven
operator|.
name|WagonFactoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|EditableRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|PasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|UnsupportedRepositoryTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|FilesystemAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|FilesystemStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|storage
operator|.
name|StorageAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|IndexCreationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|repository
operator|.
name|features
operator|.
name|RemoteIndexFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ArtifactContextProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|DefaultScannerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|IndexerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ScanningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|ScanningResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|context
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|packer
operator|.
name|IndexPackingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|updater
operator|.
name|IndexUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index
operator|.
name|updater
operator|.
name|ResourceFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|index_shaded
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|ResourceDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|StreamWagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|TransferFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|Wagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authentication
operator|.
name|AuthenticationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|events
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|events
operator|.
name|TransferListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|proxy
operator|.
name|ProxyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|shared
operator|.
name|http
operator|.
name|AbstractHttpClientWagon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|shared
operator|.
name|http
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|shared
operator|.
name|http
operator|.
name|HttpMethodConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @author Martin Stockhammer<martin_s@apache.org>  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"archivaIndexManager#maven"
argument_list|)
specifier|public
class|class
name|ArchivaIndexManagerMock
implements|implements
name|ArchivaIndexManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArchivaIndexManagerMock
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Indexer
name|indexer
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|IndexerEngine
name|indexerEngine
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|IndexCreator
argument_list|>
name|indexCreators
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|IndexPacker
name|indexPacker
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Scanner
name|scanner
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|WagonFactory
name|wagonFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ArtifactContextProducer
name|artifactContextProducer
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ProxyRegistry
name|proxyRegistry
decl_stmt|;
specifier|private
name|ConcurrentSkipListSet
argument_list|<
name|Path
argument_list|>
name|activeContexts
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|( )
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_TIME
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_WAIT
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
name|IndexingContext
name|getMvnContext
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|)
throws|throws
name|UnsupportedBaseContextException
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|supports
argument_list|(
name|IndexingContext
operator|.
name|class
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The provided archiva index context does not support the maven IndexingContext"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedBaseContextException
argument_list|(
literal|"The context does not support the Maven IndexingContext"
argument_list|)
throw|;
block|}
return|return
name|context
operator|.
name|getBaseContext
argument_list|(
name|IndexingContext
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getIndexPath
parameter_list|(
name|ArchivaIndexingContext
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|getPath
argument_list|( )
operator|.
name|getFilePath
argument_list|()
return|;
block|}
annotation|@
name|FunctionalInterface
interface|interface
name|IndexUpdateConsumer
block|{
name|void
name|accept
parameter_list|(
name|IndexingContext
name|indexingContext
parameter_list|)
throws|throws
name|IndexUpdateFailedException
function_decl|;
block|}
comment|/*      * This method is used to do some actions around the update execution code. And to make sure, that no other      * method is running on the same index.      */
specifier|private
name|void
name|executeUpdateFunction
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|IndexUpdateConsumer
name|function
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
name|IndexingContext
name|indexingContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexingContext
operator|=
name|getMvnContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedBaseContextException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Maven index is not supported by this context"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|ctxPath
init|=
name|getIndexPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|int
name|loop
init|=
name|MAX_WAIT
decl_stmt|;
name|boolean
name|active
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|loop
operator|--
operator|>
literal|0
operator|&&
operator|!
name|active
condition|)
block|{
name|active
operator|=
name|activeContexts
operator|.
name|add
argument_list|(
name|ctxPath
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|( )
operator|.
name|sleep
argument_list|(
name|WAIT_TIME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore this
block|}
block|}
if|if
condition|(
name|active
condition|)
block|{
try|try
block|{
name|function
operator|.
name|accept
argument_list|(
name|indexingContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|activeContexts
operator|.
name|remove
argument_list|(
name|ctxPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Timeout while waiting for index release on context "
operator|+
name|context
operator|.
name|getId
argument_list|( )
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|pack
parameter_list|(
specifier|final
name|ArchivaIndexingContext
name|context
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
name|executeUpdateFunction
argument_list|(
name|context
argument_list|,
name|indexingContext
lambda|->
block|{
try|try
block|{
name|IndexPackingRequest
name|request
init|=
operator|new
name|IndexPackingRequest
argument_list|(
name|indexingContext
argument_list|,
name|indexingContext
operator|.
name|acquireIndexSearcher
argument_list|( )
operator|.
name|getIndexReader
argument_list|( )
argument_list|,
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|( )
argument_list|)
decl_stmt|;
name|indexPacker
operator|.
name|packIndex
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|indexingContext
operator|.
name|updateTimestamp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException while packing index of context "
operator|+
name|context
operator|.
name|getId
argument_list|( )
operator|+
operator|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
condition|?
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"IOException during update of "
operator|+
name|context
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scan
parameter_list|(
specifier|final
name|ArchivaIndexingContext
name|context
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
name|executeUpdateFunction
argument_list|(
name|context
argument_list|,
name|indexingContext
lambda|->
block|{
name|DefaultScannerListener
name|listener
init|=
operator|new
name|DefaultScannerListener
argument_list|(
name|indexingContext
argument_list|,
name|indexerEngine
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ScanningRequest
name|request
init|=
operator|new
name|ScanningRequest
argument_list|(
name|indexingContext
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|ScanningResult
name|result
init|=
name|scanner
operator|.
name|scan
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasExceptions
argument_list|( )
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exceptions occured during index scan of "
operator|+
name|context
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|result
operator|.
name|getExceptions
argument_list|( )
operator|.
name|stream
argument_list|( )
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
operator|.
name|distinct
argument_list|( )
operator|.
name|limit
argument_list|(
literal|5
argument_list|)
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|log
operator|.
name|error
argument_list|(
literal|"Message: "
operator|+
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|ArchivaIndexingContext
name|context
parameter_list|,
specifier|final
name|boolean
name|fullUpdate
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"start download remote index for remote repository {}"
argument_list|,
name|context
operator|.
name|getRepository
argument_list|( )
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|URI
name|remoteUpdateUri
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|context
operator|.
name|getRepository
argument_list|( )
operator|instanceof
name|RemoteRepository
operator|)
operator|||
operator|!
operator|(
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|supportsFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"The context is not associated to a remote repository with remote index "
operator|+
name|context
operator|.
name|getId
argument_list|( )
argument_list|)
throw|;
block|}
else|else
block|{
name|RemoteIndexFeature
name|rif
init|=
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|remoteUpdateUri
operator|=
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|resolve
argument_list|(
name|rif
operator|.
name|getIndexUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RemoteRepository
name|remoteRepository
init|=
operator|(
name|RemoteRepository
operator|)
name|context
operator|.
name|getRepository
argument_list|( )
decl_stmt|;
name|executeUpdateFunction
argument_list|(
name|context
argument_list|,
name|indexingContext
lambda|->
block|{
try|try
block|{
comment|// create a temp directory to download files
name|Path
name|tempIndexDirectory
init|=
name|Paths
operator|.
name|get
argument_list|(
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|( )
operator|.
name|getParent
argument_list|( )
argument_list|,
literal|".tmpIndex"
argument_list|)
decl_stmt|;
name|Path
name|indexCacheDirectory
init|=
name|Paths
operator|.
name|get
argument_list|(
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|( )
operator|.
name|getParent
argument_list|( )
argument_list|,
literal|".indexCache"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexCacheDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|tempIndexDirectory
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tempIndexDirectory
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|createDirectories
argument_list|(
name|tempIndexDirectory
argument_list|)
expr_stmt|;
name|tempIndexDirectory
operator|.
name|toFile
argument_list|( )
operator|.
name|deleteOnExit
argument_list|( )
expr_stmt|;
name|String
name|baseIndexUrl
init|=
name|indexingContext
operator|.
name|getIndexUpdateUrl
argument_list|( )
decl_stmt|;
name|String
name|wagonProtocol
init|=
name|remoteUpdateUri
operator|.
name|toURL
argument_list|( )
operator|.
name|getProtocol
argument_list|( )
decl_stmt|;
name|NetworkProxy
name|networkProxy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteRepository
operator|.
name|supportsFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|RemoteIndexFeature
name|rif
init|=
name|remoteRepository
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|( )
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|rif
operator|.
name|getProxyId
argument_list|( )
argument_list|)
condition|)
block|{
name|networkProxy
operator|=
name|proxyRegistry
operator|.
name|getNetworkProxy
argument_list|(
name|rif
operator|.
name|getProxyId
argument_list|( )
argument_list|)
expr_stmt|;
if|if
condition|(
name|networkProxy
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"your remote repository is configured to download remote index trought a proxy we cannot find id:{}"
argument_list|,
name|rif
operator|.
name|getProxyId
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|StreamWagon
name|wagon
init|=
operator|(
name|StreamWagon
operator|)
name|wagonFactory
operator|.
name|getWagon
argument_list|(
operator|new
name|WagonFactoryRequest
argument_list|(
name|wagonProtocol
argument_list|,
name|remoteRepository
operator|.
name|getExtraHeaders
argument_list|( )
argument_list|)
operator|.
name|networkProxy
argument_list|(
name|networkProxy
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|readTimeout
init|=
operator|(
name|int
operator|)
name|rif
operator|.
name|getDownloadTimeout
argument_list|( )
operator|.
name|toMillis
argument_list|( )
operator|*
literal|1000
decl_stmt|;
name|wagon
operator|.
name|setReadTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
name|wagon
operator|.
name|setTimeout
argument_list|(
operator|(
name|int
operator|)
name|remoteRepository
operator|.
name|getTimeout
argument_list|( )
operator|.
name|toMillis
argument_list|( )
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|wagon
operator|instanceof
name|AbstractHttpClientWagon
condition|)
block|{
name|HttpConfiguration
name|httpConfiguration
init|=
operator|new
name|HttpConfiguration
argument_list|( )
decl_stmt|;
name|HttpMethodConfiguration
name|httpMethodConfiguration
init|=
operator|new
name|HttpMethodConfiguration
argument_list|( )
decl_stmt|;
name|httpMethodConfiguration
operator|.
name|setUsePreemptive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|httpMethodConfiguration
operator|.
name|setReadTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
name|httpConfiguration
operator|.
name|setGet
argument_list|(
name|httpMethodConfiguration
argument_list|)
expr_stmt|;
name|AbstractHttpClientWagon
operator|.
name|class
operator|.
name|cast
argument_list|(
name|wagon
argument_list|)
operator|.
name|setHttpConfiguration
argument_list|(
name|httpConfiguration
argument_list|)
expr_stmt|;
block|}
name|wagon
operator|.
name|addTransferListener
argument_list|(
operator|new
name|DownloadListener
argument_list|( )
argument_list|)
expr_stmt|;
name|ProxyInfo
name|proxyInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|networkProxy
operator|!=
literal|null
condition|)
block|{
name|proxyInfo
operator|=
operator|new
name|ProxyInfo
argument_list|( )
expr_stmt|;
name|proxyInfo
operator|.
name|setType
argument_list|(
name|networkProxy
operator|.
name|getProtocol
argument_list|( )
argument_list|)
expr_stmt|;
name|proxyInfo
operator|.
name|setHost
argument_list|(
name|networkProxy
operator|.
name|getHost
argument_list|( )
argument_list|)
expr_stmt|;
name|proxyInfo
operator|.
name|setPort
argument_list|(
name|networkProxy
operator|.
name|getPort
argument_list|( )
argument_list|)
expr_stmt|;
name|proxyInfo
operator|.
name|setUserName
argument_list|(
name|networkProxy
operator|.
name|getUsername
argument_list|( )
argument_list|)
expr_stmt|;
name|proxyInfo
operator|.
name|setPassword
argument_list|(
name|networkProxy
operator|.
name|getPassword
argument_list|( )
argument_list|)
expr_stmt|;
block|}
name|AuthenticationInfo
name|authenticationInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteRepository
operator|.
name|getLoginCredentials
argument_list|( )
operator|!=
literal|null
operator|&&
operator|(
name|remoteRepository
operator|.
name|getLoginCredentials
argument_list|( )
operator|instanceof
name|PasswordCredentials
operator|)
condition|)
block|{
name|PasswordCredentials
name|creds
init|=
operator|(
name|PasswordCredentials
operator|)
name|remoteRepository
operator|.
name|getLoginCredentials
argument_list|( )
decl_stmt|;
name|authenticationInfo
operator|=
operator|new
name|AuthenticationInfo
argument_list|( )
expr_stmt|;
name|authenticationInfo
operator|.
name|setUserName
argument_list|(
name|creds
operator|.
name|getUsername
argument_list|( )
argument_list|)
expr_stmt|;
name|authenticationInfo
operator|.
name|setPassword
argument_list|(
operator|new
name|String
argument_list|(
name|creds
operator|.
name|getPassword
argument_list|( )
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wagon
operator|.
name|connect
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|repository
operator|.
name|Repository
argument_list|(
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|baseIndexUrl
argument_list|)
argument_list|,
name|authenticationInfo
argument_list|,
name|proxyInfo
argument_list|)
expr_stmt|;
name|Path
name|indexDirectory
init|=
name|indexingContext
operator|.
name|getIndexDirectoryFile
argument_list|( )
operator|.
name|toPath
argument_list|( )
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
name|ResourceFetcher
name|resourceFetcher
init|=
operator|new
name|WagonResourceFetcher
argument_list|(
name|log
argument_list|,
name|tempIndexDirectory
argument_list|,
name|wagon
argument_list|,
name|remoteRepository
argument_list|)
decl_stmt|;
name|IndexUpdateRequest
name|request
init|=
operator|new
name|IndexUpdateRequest
argument_list|(
name|indexingContext
argument_list|,
name|resourceFetcher
argument_list|)
decl_stmt|;
name|request
operator|.
name|setForceFullUpdate
argument_list|(
name|fullUpdate
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLocalIndexCacheDir
argument_list|(
name|indexCacheDirectory
operator|.
name|toFile
argument_list|( )
argument_list|)
expr_stmt|;
comment|// indexUpdater.fetchAndUpdateIndex( request );
name|indexingContext
operator|.
name|updateTimestamp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not login to the remote proxy for updating index of {}"
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Login in to proxy failed while updating remote repository "
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ConnectionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Connection error during index update for remote repository {}"
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Connection error during index update for remote repository "
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"URL for remote index update of remote repository {} is not correct {}"
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|remoteUpdateUri
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"URL for remote index update of repository is not correct "
operator|+
name|remoteUpdateUri
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException during index update of remote repository {}: {}"
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"IOException during index update of remote repository "
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|( )
operator|+
operator|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
condition|?
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
else|:
literal|""
operator|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|WagonFactoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Wagon for remote index download of {} could not be created: {}"
argument_list|,
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Error while updating the remote index of "
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addArtifactsToIndex
parameter_list|(
specifier|final
name|ArchivaIndexingContext
name|context
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|artifactReference
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
specifier|final
name|StorageAsset
name|ctxUri
init|=
name|context
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|executeUpdateFunction
argument_list|(
name|context
argument_list|,
name|indexingContext
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactContext
argument_list|>
name|artifacts
init|=
name|artifactReference
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|indexingContext
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|ctxUri
operator|.
name|getFilePath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|resolve
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|indexer
operator|.
name|addArtifactsToIndex
argument_list|(
name|artifacts
argument_list|,
name|indexingContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException while adding artifact {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Error occured while adding artifact to index of "
operator|+
name|context
operator|.
name|getId
argument_list|()
operator|+
operator|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|?
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeArtifactsFromIndex
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|Collection
argument_list|<
name|URI
argument_list|>
name|artifactReference
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
specifier|final
name|StorageAsset
name|ctxUri
init|=
name|context
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|executeUpdateFunction
argument_list|(
name|context
argument_list|,
name|indexingContext
lambda|->
block|{
name|Collection
argument_list|<
name|ArtifactContext
argument_list|>
name|artifacts
init|=
name|artifactReference
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|artifactContextProducer
operator|.
name|getArtifactContext
argument_list|(
name|indexingContext
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|ctxUri
operator|.
name|getFilePath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|resolve
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|indexer
operator|.
name|deleteArtifactsFromIndex
argument_list|(
name|artifacts
argument_list|,
name|indexingContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException while removing artifact {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Error occured while removing artifact from index of "
operator|+
name|context
operator|.
name|getId
argument_list|()
operator|+
operator|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|?
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsRepository
parameter_list|(
name|RepositoryType
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|RepositoryType
operator|.
name|MAVEN
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaIndexingContext
name|createContext
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|IndexCreationFailedException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating context for repo {}, type: {}"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|,
name|repository
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repository
operator|.
name|getType
argument_list|( )
operator|!=
name|RepositoryType
operator|.
name|MAVEN
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryTypeException
argument_list|(
name|repository
operator|.
name|getType
argument_list|( )
argument_list|)
throw|;
block|}
name|IndexingContext
name|mvnCtx
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repository
operator|instanceof
name|RemoteRepository
condition|)
block|{
name|mvnCtx
operator|=
name|createRemoteContext
argument_list|(
operator|(
name|RemoteRepository
operator|)
name|repository
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|repository
operator|instanceof
name|ManagedRepository
condition|)
block|{
name|mvnCtx
operator|=
name|createManagedContext
argument_list|(
operator|(
name|ManagedRepository
operator|)
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException during context creation "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexCreationFailedException
argument_list|(
literal|"Could not create index context for repository "
operator|+
name|repository
operator|.
name|getId
argument_list|( )
operator|+
operator|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
condition|?
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|( )
else|:
literal|""
operator|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|MavenIndexContextMock
name|context
init|=
literal|null
decl_stmt|;
try|try
block|{
name|context
operator|=
operator|new
name|MavenIndexContextMock
argument_list|(
name|repository
argument_list|,
name|mvnCtx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexCreationFailedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|context
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaIndexingContext
name|reset
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|)
throws|throws
name|IndexUpdateFailedException
block|{
name|ArchivaIndexingContext
name|ctx
decl_stmt|;
name|executeUpdateFunction
argument_list|(
name|context
argument_list|,
name|indexingContext
lambda|->
block|{
try|try
block|{
name|indexingContext
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Index close failed"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|context
operator|.
name|getPath
argument_list|()
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Could not delete index files"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|Repository
name|repo
init|=
name|context
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|ctx
operator|=
name|createContext
argument_list|(
name|context
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|instanceof
name|EditableRepository
condition|)
block|{
operator|(
operator|(
name|EditableRepository
operator|)
name|repo
operator|)
operator|.
name|setIndexingContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IndexCreationFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexUpdateFailedException
argument_list|(
literal|"Could not create index"
argument_list|)
throw|;
block|}
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArchivaIndexingContext
name|move
parameter_list|(
name|ArchivaIndexingContext
name|context
parameter_list|,
name|Repository
name|repo
parameter_list|)
throws|throws
name|IndexCreationFailedException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|supports
argument_list|(
name|IndexingContext
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|StorageAsset
name|newPath
init|=
name|getIndexPath
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|IndexingContext
name|ctx
init|=
name|context
operator|.
name|getBaseContext
argument_list|(
name|IndexingContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|oldPath
init|=
name|ctx
operator|.
name|getIndexDirectoryFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldPath
operator|.
name|equals
argument_list|(
name|newPath
argument_list|)
condition|)
block|{
comment|// Nothing to do, if path does not change
return|return
name|context
return|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|oldPath
argument_list|)
condition|)
block|{
return|return
name|createContext
argument_list|(
name|repo
argument_list|)
return|;
block|}
if|else if
condition|(
name|context
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|createContext
argument_list|(
name|repo
argument_list|)
return|;
block|}
else|else
block|{
name|context
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|oldPath
argument_list|,
name|newPath
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createContext
argument_list|(
name|repo
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException while moving index directory {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexCreationFailedException
argument_list|(
literal|"Could not recreated the index."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedBaseContextException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexCreationFailedException
argument_list|(
literal|"The given context, is not a maven context."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IndexCreationFailedException
argument_list|(
literal|"Bad context type. This is not a maven context."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateLocalIndexPath
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|IndexCreationFeature
name|icf
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|icf
operator|.
name|setLocalIndexPath
argument_list|(
name|getIndexPath
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set local index path for {}. New URI: {}"
argument_list|,
name|repo
operator|.
name|getId
argument_list|()
argument_list|,
name|icf
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ArchivaIndexingContext
name|mergeContexts
parameter_list|(
name|Repository
name|destinationRepo
parameter_list|,
name|List
argument_list|<
name|ArchivaIndexingContext
argument_list|>
name|contexts
parameter_list|,
name|boolean
name|packIndex
parameter_list|)
throws|throws
name|UnsupportedOperationException
throws|,
name|IndexCreationFailedException
block|{
return|return
literal|null
return|;
block|}
specifier|private
name|StorageAsset
name|getIndexPath
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexCreationFeature
name|icf
init|=
name|repo
operator|.
name|getFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Path
name|repoDir
init|=
name|repo
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
name|URI
name|indexDir
init|=
name|icf
operator|.
name|getIndexPath
argument_list|()
decl_stmt|;
name|String
name|indexPath
init|=
name|indexDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|indexDirectory
init|=
literal|null
decl_stmt|;
name|FilesystemStorage
name|fsStorage
init|=
operator|(
name|FilesystemStorage
operator|)
name|repo
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|getStorage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|( )
argument_list|)
condition|)
block|{
name|indexDirectory
operator|=
name|PathUtil
operator|.
name|getPathFromUri
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
comment|// not absolute so create it in repository directory
if|if
condition|(
name|indexDirectory
operator|.
name|isAbsolute
argument_list|( )
condition|)
block|{
name|indexPath
operator|=
name|indexDirectory
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|fsStorage
operator|=
operator|new
name|FilesystemStorage
argument_list|(
name|indexDirectory
operator|.
name|getParent
argument_list|()
argument_list|,
operator|new
name|DefaultFileLockManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexDirectory
operator|=
name|repoDir
operator|.
name|resolve
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|indexDirectory
operator|=
name|repoDir
operator|.
name|resolve
argument_list|(
literal|".index"
argument_list|)
expr_stmt|;
name|indexPath
operator|=
literal|".index"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FilesystemAsset
argument_list|(
name|fsStorage
argument_list|,
name|indexPath
argument_list|,
name|indexDirectory
argument_list|)
return|;
block|}
specifier|private
name|IndexingContext
name|createRemoteContext
parameter_list|(
name|RemoteRepository
name|remoteRepository
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appServerBase
init|=
name|archivaConfiguration
operator|.
name|getAppServerBaseDir
argument_list|( )
decl_stmt|;
name|String
name|contextKey
init|=
literal|"remote-"
operator|+
name|remoteRepository
operator|.
name|getId
argument_list|( )
decl_stmt|;
comment|// create remote repository path
name|Path
name|repoDir
init|=
name|remoteRepository
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repoDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repoDir
argument_list|)
expr_stmt|;
block|}
name|StorageAsset
name|indexDirectory
init|=
literal|null
decl_stmt|;
comment|// is there configured indexDirectory ?
if|if
condition|(
name|remoteRepository
operator|.
name|supportsFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|RemoteIndexFeature
name|rif
init|=
name|remoteRepository
operator|.
name|getFeature
argument_list|(
name|RemoteIndexFeature
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|( )
decl_stmt|;
name|indexDirectory
operator|=
name|getIndexPath
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
name|String
name|remoteIndexUrl
init|=
name|calculateIndexRemoteUrl
argument_list|(
name|remoteRepository
operator|.
name|getLocation
argument_list|( )
argument_list|,
name|rif
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getIndexingContext
argument_list|(
name|remoteRepository
argument_list|,
name|contextKey
argument_list|,
name|repoDir
argument_list|,
name|indexDirectory
argument_list|,
name|remoteIndexUrl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// existing index with an old lucene format so we need to delete it!!!
comment|// delete it first then recreate it.
name|log
operator|.
name|warn
argument_list|(
literal|"the index of repository {} is too old we have to delete and recreate it"
argument_list|,
comment|//
name|remoteRepository
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexDirectory
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getIndexingContext
argument_list|(
name|remoteRepository
argument_list|,
name|contextKey
argument_list|,
name|repoDir
argument_list|,
name|indexDirectory
argument_list|,
name|remoteIndexUrl
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No remote index defined"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|IndexingContext
name|getIndexingContext
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|String
name|contextKey
parameter_list|,
name|Path
name|repoDir
parameter_list|,
name|StorageAsset
name|indexDirectory
parameter_list|,
name|String
name|indexUrl
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|indexer
operator|.
name|createIndexingContext
argument_list|(
name|contextKey
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|,
name|repoDir
operator|.
name|toFile
argument_list|( )
argument_list|,
name|indexDirectory
operator|.
name|getFilePath
argument_list|()
operator|.
name|toFile
argument_list|( )
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|( )
operator|==
literal|null
condition|?
literal|null
else|:
name|repository
operator|.
name|getLocation
argument_list|( )
operator|.
name|toString
argument_list|( )
argument_list|,
name|indexUrl
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|indexCreators
argument_list|)
return|;
block|}
specifier|private
name|IndexingContext
name|createManagedContext
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexingContext
name|context
decl_stmt|;
comment|// take care first about repository location as can be relative
name|Path
name|repositoryDirectory
init|=
name|repository
operator|.
name|getAsset
argument_list|(
literal|""
argument_list|)
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|repositoryDirectory
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|repositoryDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create directory {}"
argument_list|,
name|repositoryDirectory
argument_list|)
expr_stmt|;
block|}
block|}
name|StorageAsset
name|indexDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repository
operator|.
name|supportsFeature
argument_list|(
name|IndexCreationFeature
operator|.
name|class
argument_list|)
condition|)
block|{
name|indexDirectory
operator|=
name|getIndexPath
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|String
name|indexUrl
init|=
name|repositoryDirectory
operator|.
name|toUri
argument_list|( )
operator|.
name|toURL
argument_list|( )
operator|.
name|toExternalForm
argument_list|( )
decl_stmt|;
try|try
block|{
name|context
operator|=
name|getIndexingContext
argument_list|(
name|repository
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|,
name|repositoryDirectory
argument_list|,
name|indexDirectory
argument_list|,
name|indexUrl
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSearchable
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|( )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// existing index with an old lucene format so we need to delete it!!!
comment|// delete it first then recreate it.
name|log
operator|.
name|warn
argument_list|(
literal|"the index of repository {} is too old we have to delete and recreate it"
argument_list|,
comment|//
name|repository
operator|.
name|getId
argument_list|( )
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexDirectory
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|getIndexingContext
argument_list|(
name|repository
argument_list|,
name|repository
operator|.
name|getId
argument_list|( )
argument_list|,
name|repositoryDirectory
argument_list|,
name|indexDirectory
argument_list|,
name|indexUrl
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSearchable
argument_list|(
name|repository
operator|.
name|isScanned
argument_list|( )
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No repository index defined"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|calculateIndexRemoteUrl
parameter_list|(
name|URI
name|baseUri
parameter_list|,
name|RemoteIndexFeature
name|rif
parameter_list|)
block|{
if|if
condition|(
name|rif
operator|.
name|getIndexUri
argument_list|( )
operator|==
literal|null
condition|)
block|{
return|return
name|baseUri
operator|.
name|resolve
argument_list|(
literal|".index"
argument_list|)
operator|.
name|toString
argument_list|( )
return|;
block|}
else|else
block|{
return|return
name|baseUri
operator|.
name|resolve
argument_list|(
name|rif
operator|.
name|getIndexUri
argument_list|( )
argument_list|)
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DownloadListener
implements|implements
name|TransferListener
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|( )
argument_list|)
decl_stmt|;
specifier|private
name|String
name|resourceName
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|transferInitiated
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|( )
expr_stmt|;
name|resourceName
operator|=
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"initiate transfer of {}"
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transferStarted
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|this
operator|.
name|totalLength
operator|=
literal|0
expr_stmt|;
name|resourceName
operator|=
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"start transfer of {}"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"transfer of {} : {}/{}"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalLength
operator|+=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transferCompleted
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|resourceName
operator|=
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|( )
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"end of transfer file {} {} kb: {}s"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|,
name|this
operator|.
name|totalLength
operator|/
literal|1024
argument_list|,
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transferError
parameter_list|(
name|TransferEvent
name|transferEvent
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"error of transfer file {}: {}"
argument_list|,
name|transferEvent
operator|.
name|getResource
argument_list|( )
operator|.
name|getName
argument_list|( )
argument_list|,
name|transferEvent
operator|.
name|getException
argument_list|( )
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|transferEvent
operator|.
name|getException
argument_list|( )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"transfer debug {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WagonResourceFetcher
implements|implements
name|ResourceFetcher
block|{
name|Logger
name|log
decl_stmt|;
name|Path
name|tempIndexDirectory
decl_stmt|;
name|Wagon
name|wagon
decl_stmt|;
name|RemoteRepository
name|remoteRepository
decl_stmt|;
specifier|private
name|WagonResourceFetcher
parameter_list|(
name|Logger
name|log
parameter_list|,
name|Path
name|tempIndexDirectory
parameter_list|,
name|Wagon
name|wagon
parameter_list|,
name|RemoteRepository
name|remoteRepository
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|this
operator|.
name|tempIndexDirectory
operator|=
name|tempIndexDirectory
expr_stmt|;
name|this
operator|.
name|wagon
operator|=
name|wagon
expr_stmt|;
name|this
operator|.
name|remoteRepository
operator|=
name|remoteRepository
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
comment|//no op
block|}
annotation|@
name|Override
specifier|public
name|void
name|disconnect
parameter_list|( )
throws|throws
name|IOException
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|retrieve
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"index update retrieve file, name:{}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|tempIndexDirectory
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|.
name|toFile
argument_list|( )
operator|.
name|deleteOnExit
argument_list|( )
expr_stmt|;
name|wagon
operator|.
name|get
argument_list|(
name|addParameters
argument_list|(
name|name
argument_list|,
name|remoteRepository
argument_list|)
argument_list|,
name|file
operator|.
name|toFile
argument_list|( )
argument_list|)
expr_stmt|;
return|return
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
decl||
name|TransferFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ResourceDoesNotExistException
name|e
parameter_list|)
block|{
name|FileNotFoundException
name|fnfe
init|=
operator|new
name|FileNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|( )
argument_list|)
decl_stmt|;
name|fnfe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|fnfe
throw|;
block|}
block|}
comment|// FIXME remove crappy copy/paste
specifier|protected
name|String
name|addParameters
parameter_list|(
name|String
name|path
parameter_list|,
name|RemoteRepository
name|remoteRepository
parameter_list|)
block|{
if|if
condition|(
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|( )
operator|.
name|isEmpty
argument_list|( )
condition|)
block|{
return|return
name|path
return|;
block|}
name|boolean
name|question
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|==
literal|null
condition|?
literal|""
else|:
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|remoteRepository
operator|.
name|getExtraParameters
argument_list|( )
operator|.
name|entrySet
argument_list|( )
control|)
block|{
if|if
condition|(
operator|!
name|question
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|( )
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|( )
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
operator|.
name|toString
argument_list|( )
return|;
block|}
block|}
block|}
end_class

end_unit

