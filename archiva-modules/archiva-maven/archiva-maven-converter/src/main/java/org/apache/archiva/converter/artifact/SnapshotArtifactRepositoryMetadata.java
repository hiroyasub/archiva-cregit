begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|converter
operator|.
name|artifact
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|AbstractRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Snapshot
import|;
end_import

begin_comment
comment|/**  *  * This is a copy of org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata  * from the maven-compat module, because this is the only class that we use from the compat module and  * we can get rid of the dependency.  *  * Metadata for the artifact version directory of the repository.  *  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|SnapshotArtifactRepositoryMetadata
extends|extends
name|AbstractRepositoryMetadata
block|{
specifier|private
name|Artifact
name|artifact
decl_stmt|;
specifier|public
name|SnapshotArtifactRepositoryMetadata
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|super
argument_list|(
name|createMetadata
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|SnapshotArtifactRepositoryMetadata
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|super
argument_list|(
name|createMetadata
argument_list|(
name|artifact
argument_list|,
name|createVersioning
argument_list|(
name|snapshot
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|boolean
name|storedInGroupDirectory
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|storedInArtifactVersionDirectory
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|getGroupId
argument_list|()
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|getArtifactId
argument_list|()
return|;
block|}
specifier|public
name|String
name|getBaseVersion
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|getBaseVersion
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
literal|"snapshot "
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSnapshot
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|isSnapshot
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNature
parameter_list|()
block|{
return|return
name|isSnapshot
argument_list|()
condition|?
name|SNAPSHOT
else|:
name|RELEASE
return|;
block|}
specifier|public
name|ArtifactRepository
name|getRepository
parameter_list|()
block|{
return|return
name|artifact
operator|.
name|getRepository
argument_list|()
return|;
block|}
specifier|public
name|void
name|setRepository
parameter_list|(
name|ArtifactRepository
name|remoteRepository
parameter_list|)
block|{
name|artifact
operator|.
name|setRepository
argument_list|(
name|remoteRepository
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

