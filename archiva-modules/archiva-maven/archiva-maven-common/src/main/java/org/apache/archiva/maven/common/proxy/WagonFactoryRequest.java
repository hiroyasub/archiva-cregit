begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|maven
operator|.
name|common
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|archiva
operator|.
name|proxy
operator|.
name|model
operator|.
name|NetworkProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Olivier Lamy  * @since 1.4-M4  */
end_comment

begin_class
specifier|public
class|class
name|WagonFactoryRequest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|USER_AGENT_SYSTEM_PROPERTY
init|=
literal|"archiva.userAgent"
decl_stmt|;
specifier|private
specifier|static
name|String
name|DEFAULT_USER_AGENT
init|=
literal|"Java-Archiva"
decl_stmt|;
comment|/**      * the protocol to find the Wagon for, which must be prefixed with<code>wagon#</code>, for example      *<code>wagon#http</code>.<b>to have a wagon supporting ntlm add -ntlm</b>      */
specifier|private
name|String
name|protocol
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|userAgent
init|=
name|DEFAULT_USER_AGENT
decl_stmt|;
static|static
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|USER_AGENT_SYSTEM_PROPERTY
argument_list|)
argument_list|)
condition|)
block|{
name|DEFAULT_USER_AGENT
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|USER_AGENT_SYSTEM_PROPERTY
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NetworkProxy
name|networkProxy
decl_stmt|;
specifier|public
name|WagonFactoryRequest
parameter_list|()
block|{
comment|// no op
block|}
specifier|public
name|WagonFactoryRequest
parameter_list|(
name|String
name|protocol
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
specifier|public
name|WagonFactoryRequest
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|headers
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|headers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
specifier|public
name|void
name|setHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
specifier|public
name|WagonFactoryRequest
name|headers
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getUserAgent
parameter_list|()
block|{
return|return
name|userAgent
return|;
block|}
specifier|public
name|void
name|setUserAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
block|}
specifier|public
name|WagonFactoryRequest
name|userAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NetworkProxy
name|getNetworkProxy
parameter_list|()
block|{
return|return
name|networkProxy
return|;
block|}
specifier|public
name|void
name|setNetworkProxy
parameter_list|(
name|NetworkProxy
name|networkProxy
parameter_list|)
block|{
name|this
operator|.
name|networkProxy
operator|=
name|networkProxy
expr_stmt|;
block|}
specifier|public
name|WagonFactoryRequest
name|networkProxy
parameter_list|(
name|NetworkProxy
name|networkProxy
parameter_list|)
block|{
name|this
operator|.
name|networkProxy
operator|=
name|networkProxy
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|WagonFactoryRequest
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WagonFactoryRequest
name|that
init|=
operator|(
name|WagonFactoryRequest
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|protocol
operator|!=
literal|null
condition|?
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|that
operator|.
name|protocol
argument_list|)
else|:
name|that
operator|.
name|protocol
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|userAgent
operator|!=
literal|null
condition|?
operator|!
name|userAgent
operator|.
name|equals
argument_list|(
name|that
operator|.
name|userAgent
argument_list|)
else|:
name|that
operator|.
name|userAgent
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|protocol
operator|!=
literal|null
condition|?
name|protocol
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|userAgent
operator|!=
literal|null
condition|?
name|userAgent
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"WagonFactoryRequest{"
operator|+
literal|"protocol='"
operator|+
name|protocol
operator|+
literal|'\''
operator|+
literal|", headers="
operator|+
name|headers
operator|+
literal|", userAgent='"
operator|+
name|userAgent
operator|+
literal|'\''
operator|+
literal|", networkProxy="
operator|+
name|networkProxy
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

