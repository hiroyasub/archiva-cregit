begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|OrPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|DatabaseScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|functors
operator|.
name|PermanentConsumerPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_comment
comment|/**  * DatabaseConsumers   *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseConsumers
implements|implements
name|ApplicationContextAware
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatabaseConsumers
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|private
name|Predicate
name|selectedCleanupConsumers
decl_stmt|;
specifier|private
name|Predicate
name|selectedUnprocessedConsumers
decl_stmt|;
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|public
name|DatabaseConsumers
parameter_list|(
name|ArchivaConfiguration
name|archivaConfiguration
parameter_list|)
block|{
name|this
operator|.
name|archivaConfiguration
operator|=
name|archivaConfiguration
expr_stmt|;
name|Predicate
name|permanentConsumers
init|=
operator|new
name|PermanentConsumerPredicate
argument_list|()
decl_stmt|;
name|selectedCleanupConsumers
operator|=
operator|new
name|OrPredicate
argument_list|(
name|permanentConsumers
argument_list|,
operator|new
name|SelectedCleanupConsumersPredicate
argument_list|()
argument_list|)
expr_stmt|;
name|selectedUnprocessedConsumers
operator|=
operator|new
name|OrPredicate
argument_list|(
name|permanentConsumers
argument_list|,
operator|new
name|SelectedUnprocessedConsumersPredicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
class|class
name|SelectedUnprocessedConsumersPredicate
implements|implements
name|Predicate
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|DatabaseUnprocessedArtifactConsumer
condition|)
block|{
name|DatabaseUnprocessedArtifactConsumer
name|consumer
init|=
operator|(
name|DatabaseUnprocessedArtifactConsumer
operator|)
name|object
decl_stmt|;
name|DatabaseScanningConfiguration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
return|return
name|config
operator|.
name|getUnprocessedConsumers
argument_list|()
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
class|class
name|SelectedCleanupConsumersPredicate
implements|implements
name|Predicate
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|DatabaseCleanupConsumer
condition|)
block|{
name|DatabaseCleanupConsumer
name|consumer
init|=
operator|(
name|DatabaseCleanupConsumer
operator|)
name|object
decl_stmt|;
name|DatabaseScanningConfiguration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
return|return
name|config
operator|.
name|getCleanupConsumers
argument_list|()
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
throws|throws
name|BeansException
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
comment|/**      * Get the {@link List} of {@link DatabaseUnprocessedArtifactConsumer} objects      * for those consumers selected due to the configuration.      *       * @return the list of selected {@link DatabaseUnprocessedArtifactConsumer} objects.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
name|getSelectedUnprocessedConsumers
parameter_list|()
block|{
name|List
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|CollectionUtils
operator|.
name|select
argument_list|(
name|getAvailableUnprocessedConsumers
argument_list|()
argument_list|,
name|selectedUnprocessedConsumers
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get the {@link List} of {@link DatabaseCleanupConsumer} objects for those      * consumers selected due to the configuration.      *       * @return the list of selected {@link DatabaseCleanupConsumer} objects.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
name|getSelectedCleanupConsumers
parameter_list|()
block|{
name|List
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|CollectionUtils
operator|.
name|select
argument_list|(
name|getAvailableCleanupConsumers
argument_list|()
argument_list|,
name|selectedCleanupConsumers
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get the complete {@link List} of {@link DatabaseUnprocessedArtifactConsumer} objects      * that are available in the system, regardless of configuration.      *       * @return the list of all available {@link DatabaseUnprocessedArtifactConsumer} objects.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|DatabaseUnprocessedArtifactConsumer
argument_list|>
name|getAvailableUnprocessedConsumers
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|DatabaseUnprocessedArtifactConsumer
argument_list|>
argument_list|(
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|DatabaseUnprocessedArtifactConsumer
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the complete {@link List} of {@link DatabaseCleanupConsumer} objects      * that are available in the system, regardless of configuration.      *       * @return the list of all available {@link DatabaseCleanupConsumer} objects.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|DatabaseCleanupConsumer
argument_list|>
name|getAvailableCleanupConsumers
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|DatabaseCleanupConsumer
argument_list|>
argument_list|(
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|DatabaseCleanupConsumer
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Execute the cleanup consumers to cleanup the specified artifact from the database and index.      *       * @param artifact      */
specifier|public
name|void
name|executeCleanupConsumer
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
block|{
name|List
argument_list|<
name|ArchivaArtifactConsumer
argument_list|>
name|consumers
init|=
name|getSelectedCleanupConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|ArchivaArtifactConsumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|beginScan
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|consumers
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"There are no selected consumers for artifact cleanup."
argument_list|)
expr_stmt|;
return|return;
block|}
name|ProcessArchivaArtifactClosure
name|processArtifactClosure
init|=
operator|new
name|ProcessArchivaArtifactClosure
argument_list|()
decl_stmt|;
name|processArtifactClosure
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|consumers
argument_list|,
name|processArtifactClosure
argument_list|)
expr_stmt|;
for|for
control|(
name|ArchivaArtifactConsumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|completeScan
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

