begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|OrPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|DatabaseScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|functors
operator|.
name|PermanentConsumerPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DatabaseConsumers   *  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.database.updater.DatabaseConsumers"  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseConsumers
implements|implements
name|Initializable
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer"      */
specifier|private
name|List
name|availableUnprocessedConsumers
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.consumers.DatabaseCleanupConsumer"      */
specifier|private
name|List
name|availableCleanupConsumers
decl_stmt|;
specifier|private
name|Predicate
name|selectedCleanupConsumers
decl_stmt|;
specifier|private
name|Predicate
name|selectedUnprocessedConsumers
decl_stmt|;
class|class
name|SelectedUnprocessedConsumersPredicate
implements|implements
name|Predicate
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|DatabaseUnprocessedArtifactConsumer
condition|)
block|{
name|DatabaseUnprocessedArtifactConsumer
name|consumer
init|=
operator|(
name|DatabaseUnprocessedArtifactConsumer
operator|)
name|object
decl_stmt|;
name|DatabaseScanningConfiguration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
return|return
name|config
operator|.
name|getUnprocessedConsumers
argument_list|()
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
class|class
name|SelectedCleanupConsumersPredicate
implements|implements
name|Predicate
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|boolean
name|satisfies
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|DatabaseCleanupConsumer
condition|)
block|{
name|DatabaseCleanupConsumer
name|consumer
init|=
operator|(
name|DatabaseCleanupConsumer
operator|)
name|object
decl_stmt|;
name|DatabaseScanningConfiguration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
return|return
name|config
operator|.
name|getCleanupConsumers
argument_list|()
operator|.
name|contains
argument_list|(
name|consumer
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|satisfies
return|;
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|Predicate
name|permanentConsumers
init|=
operator|new
name|PermanentConsumerPredicate
argument_list|()
decl_stmt|;
name|selectedCleanupConsumers
operator|=
operator|new
name|OrPredicate
argument_list|(
name|permanentConsumers
argument_list|,
operator|new
name|SelectedCleanupConsumersPredicate
argument_list|()
argument_list|)
expr_stmt|;
name|selectedUnprocessedConsumers
operator|=
operator|new
name|OrPredicate
argument_list|(
name|permanentConsumers
argument_list|,
operator|new
name|SelectedUnprocessedConsumersPredicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the {@link List} of {@link DatabaseUnprocessedArtifactConsumer} objects      * for those consumers selected due to the configuration.      *       * @return the list of selected {@link DatabaseUnprocessedArtifactConsumer} objects.      */
specifier|public
name|List
name|getSelectedUnprocessedConsumers
parameter_list|()
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|CollectionUtils
operator|.
name|select
argument_list|(
name|availableUnprocessedConsumers
argument_list|,
name|selectedUnprocessedConsumers
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get the {@link List} of {@link DatabaseCleanupConsumer} objects for those      * consumers selected due to the configuration.      *       * @return the list of selected {@link DatabaseCleanupConsumer} objects.      */
specifier|public
name|List
name|getSelectedCleanupConsumers
parameter_list|()
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|CollectionUtils
operator|.
name|select
argument_list|(
name|availableCleanupConsumers
argument_list|,
name|selectedCleanupConsumers
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get the complete {@link List} of {@link DatabaseUnprocessedArtifactConsumer} objects      * that are available in the system, regardless of configuration.      *       * @return the list of all available {@link DatabaseUnprocessedArtifactConsumer} objects.      */
specifier|public
name|List
name|getAvailableUnprocessedConsumers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|this
operator|.
name|availableUnprocessedConsumers
argument_list|)
return|;
block|}
comment|/**      * Get the complete {@link List} of {@link DatabaseCleanupConsumer} objects      * that are available in the system, regardless of configuration.      *       * @return the list of all available {@link DatabaseCleanupConsumer} objects.      */
specifier|public
name|List
name|getAvailableCleanupConsumers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|this
operator|.
name|availableCleanupConsumers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

