begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|events
operator|.
name|RepositoryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|spring
operator|.
name|PlexusToSpringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryDatabaseEventListenerTest
extends|extends
name|AbstractArchivaDatabaseTestCase
block|{
specifier|private
name|RepositoryListener
name|listener
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|listener
operator|=
operator|(
name|RepositoryListener
operator|)
name|lookup
argument_list|(
name|RepositoryListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"database"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testWiring
parameter_list|()
block|{
name|List
argument_list|<
name|RepositoryListener
argument_list|>
name|listeners
init|=
name|PlexusToSpringUtils
operator|.
name|lookupList
argument_list|(
name|PlexusToSpringUtils
operator|.
name|buildSpringId
argument_list|(
name|RepositoryListener
operator|.
name|class
argument_list|)
argument_list|,
name|getApplicationContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listeners
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|listener
argument_list|,
name|listeners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArchivaArtifact
name|createArtifact
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|ArtifactDAO
name|artifactDao
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|ArchivaArtifact
name|artifact
init|=
name|artifactDao
operator|.
name|createArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|""
argument_list|,
name|type
argument_list|,
literal|"testable_repo"
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setLastModified
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setRepositoryId
argument_list|(
literal|"testable_repo"
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|public
name|void
name|testDeleteArtifact
parameter_list|()
throws|throws
name|Exception
block|{
name|ArtifactDAO
name|artifactDao
init|=
operator|(
name|ArtifactDAO
operator|)
name|lookup
argument_list|(
name|ArtifactDAO
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|pomArtifact
init|=
name|createPom
argument_list|(
name|artifactDao
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|jarArtifact
init|=
name|createJar
argument_list|(
name|artifactDao
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pomArtifact
argument_list|,
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"pom"
argument_list|,
literal|"testable_repo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jarArtifact
argument_list|,
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"jar"
argument_list|,
literal|"testable_repo"
argument_list|)
argument_list|)
expr_stmt|;
name|jarArtifact
operator|=
operator|new
name|ArchivaArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"jar"
argument_list|,
literal|"testable_repo"
argument_list|)
expr_stmt|;
name|ManagedRepositoryContent
name|repository
init|=
operator|(
name|ManagedRepositoryContent
operator|)
name|lookup
argument_list|(
name|ManagedRepositoryContent
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ManagedRepositoryConfiguration
name|configuration
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setId
argument_list|(
literal|"testable_repo"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setRepository
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|repository
argument_list|,
name|jarArtifact
argument_list|)
expr_stmt|;
try|try
block|{
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"jar"
argument_list|,
literal|"testable_repo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not find artifact"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|pomArtifact
argument_list|,
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"pom"
argument_list|,
literal|"testable_repo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArchivaArtifact
name|createJar
parameter_list|(
name|ArtifactDAO
name|artifactDao
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
name|artifactDao
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|artifactDao
operator|.
name|saveArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|public
name|void
name|testDeletePomArtifact
parameter_list|()
throws|throws
name|Exception
block|{
name|ArtifactDAO
name|artifactDao
init|=
operator|(
name|ArtifactDAO
operator|)
name|lookup
argument_list|(
name|ArtifactDAO
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jdo"
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|pomArtifact
init|=
name|createPom
argument_list|(
name|artifactDao
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|jarArtifact
init|=
name|createJar
argument_list|(
name|artifactDao
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pomArtifact
argument_list|,
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"pom"
argument_list|,
literal|"testable_repo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jarArtifact
argument_list|,
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"jar"
argument_list|,
literal|"testable_repo"
argument_list|)
argument_list|)
expr_stmt|;
name|pomArtifact
operator|=
operator|new
name|ArchivaArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"pom"
argument_list|,
literal|"testable_repo"
argument_list|)
expr_stmt|;
name|ManagedRepositoryContent
name|repository
init|=
operator|(
name|ManagedRepositoryContent
operator|)
name|lookup
argument_list|(
name|ManagedRepositoryContent
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ManagedRepositoryConfiguration
name|configuration
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setId
argument_list|(
literal|"testable_repo"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setRepository
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|listener
operator|.
name|deleteArtifact
argument_list|(
name|repository
argument_list|,
name|pomArtifact
argument_list|)
expr_stmt|;
try|try
block|{
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"pom"
argument_list|,
literal|"testable_repo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not find artifact"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|jarArtifact
argument_list|,
name|artifactDao
operator|.
name|getArtifact
argument_list|(
literal|"org.apache.maven.archiva.test"
argument_list|,
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
literal|null
argument_list|,
literal|"jar"
argument_list|,
literal|"testable_repo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArchivaArtifact
name|createPom
parameter_list|(
name|ArtifactDAO
name|artifactDao
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|ArchivaArtifact
name|artifact
init|=
name|createArtifact
argument_list|(
literal|"test-artifact"
argument_list|,
literal|"1.0"
argument_list|,
name|artifactDao
argument_list|,
literal|"pom"
argument_list|)
decl_stmt|;
name|artifactDao
operator|.
name|saveArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
block|}
end_class

end_unit

