begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|tasks
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|ReverseListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * DependencyManagementStack   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|DependencyManagementStack
block|{
specifier|public
class|class
name|Rules
block|{
specifier|public
name|ArtifactReference
name|artifact
decl_stmt|;
specifier|public
name|String
name|scope
decl_stmt|;
specifier|public
name|Set
name|exclusions
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addAllExclusions
parameter_list|(
name|List
name|depExclusions
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|depExclusions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Exclusion
name|ref
init|=
operator|(
name|Exclusion
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|DependencyGraphKeys
operator|.
name|toManagementKey
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Stack
name|depmanStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|depMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|void
name|generateDepMap
parameter_list|()
block|{
name|depMap
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Using a reverse iterator to ensure that we read the
comment|// stack from last in to first in
name|ReverseListIterator
name|it
init|=
operator|new
name|ReverseListIterator
argument_list|(
name|depmanStack
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DependencyGraphNode
name|node
init|=
operator|(
name|DependencyGraphNode
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addDependencies
argument_list|(
name|node
operator|.
name|getDependencyManagement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addDependencies
parameter_list|(
name|List
name|dependencies
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|DependencyGraphKeys
operator|.
name|toManagementKey
argument_list|(
name|dep
argument_list|)
decl_stmt|;
name|Rules
name|merged
init|=
operator|(
name|Rules
operator|)
name|depMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|merged
operator|==
literal|null
condition|)
block|{
comment|// New map entry.
name|merged
operator|=
operator|new
name|Rules
argument_list|()
expr_stmt|;
name|merged
operator|.
name|artifact
operator|=
operator|new
name|ArtifactReference
argument_list|()
expr_stmt|;
name|merged
operator|.
name|artifact
operator|.
name|setGroupId
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|merged
operator|.
name|artifact
operator|.
name|setArtifactId
argument_list|(
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|merged
operator|.
name|artifact
operator|.
name|setClassifier
argument_list|(
name|dep
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|merged
operator|.
name|artifact
operator|.
name|setType
argument_list|(
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|merged
operator|.
name|artifact
operator|.
name|setVersion
argument_list|(
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|dep
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|merged
operator|.
name|scope
operator|=
name|dep
operator|.
name|getScope
argument_list|()
expr_stmt|;
block|}
name|merged
operator|.
name|addAllExclusions
argument_list|(
name|dep
operator|.
name|getExclusions
argument_list|()
argument_list|)
expr_stmt|;
name|depMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Rules
name|getRules
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
return|return
name|getRules
argument_list|(
name|edge
operator|.
name|getNodeTo
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Rules
name|getRules
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
return|return
name|getRules
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Rules
name|getRules
parameter_list|(
name|ArtifactReference
name|ref
parameter_list|)
block|{
name|String
name|key
init|=
name|DependencyGraphKeys
operator|.
name|toManagementKey
argument_list|(
name|ref
argument_list|)
decl_stmt|;
return|return
operator|(
name|Rules
operator|)
name|depMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|push
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|depmanStack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|generateDepMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DependencyGraphNode
name|pop
parameter_list|()
block|{
name|DependencyGraphNode
name|node
init|=
operator|(
name|DependencyGraphNode
operator|)
name|depmanStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|generateDepMap
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|depmanStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|depMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

