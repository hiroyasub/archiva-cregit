begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|AbstractMonitoredConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|DatabaseUnprocessedArtifactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|bytecode
operator|.
name|BytecodeRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|internal
operator|.
name|classfile
operator|.
name|ClassParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|internal
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|internal
operator|.
name|classfile
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_comment
comment|/**  * IndexJavaPublicMethodsConsumer   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  *<a href="mailto:oching@apache.org">Maria Odea Ching</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer"  *                   role-hint="index-public-methods"  *                   instantiation-strategy="per-lookup"  */
end_comment

begin_class
specifier|public
class|class
name|IndexJavaPublicMethodsConsumer
extends|extends
name|AbstractMonitoredConsumer
implements|implements
name|DatabaseUnprocessedArtifactConsumer
block|{
comment|/**      * @plexus.configuration default-value="index-public-methods"      */
specifier|private
name|String
name|id
decl_stmt|;
comment|/**      * @plexus.configuration default-value="Index the java public methods for Full Text Search."      */
specifier|private
name|String
name|description
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="lucene"      */
specifier|private
name|RepositoryContentIndexFactory
name|repoIndexFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryContentFactory
name|repoFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSES
init|=
literal|"classes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHODS
init|=
literal|"methods"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|includes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|IndexJavaPublicMethodsConsumer
parameter_list|()
block|{
name|includes
operator|.
name|add
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"war"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"ear"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"zip"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"tar.gz"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"tar.bz2"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"car"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"sar"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"mar"
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
literal|"rar"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|beginScan
parameter_list|()
block|{
comment|// TODO Auto-generated method stubx
block|}
specifier|public
name|void
name|completeScan
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncludedTypes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
specifier|public
name|void
name|processArchivaArtifact
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ConsumerException
block|{
try|try
block|{
name|ManagedRepositoryContent
name|repoContent
init|=
name|repoFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|getRepositoryId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repoContent
operator|.
name|getRepoRoot
argument_list|()
argument_list|,
name|repoContent
operator|.
name|toPath
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".war"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".ear"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tar.gz"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tar.bz2"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".car"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".sar"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".mar"
argument_list|)
operator|||
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".rar"
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|readFilesInArchive
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mapOfClassesAndMethods
init|=
name|getPublicClassesAndMethodsFromFiles
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|files
argument_list|)
decl_stmt|;
comment|// NOTE: what about public variables? should these be indexed too?
name|RepositoryContentIndex
name|bytecodeIndex
init|=
name|repoIndexFactory
operator|.
name|createBytecodeIndex
argument_list|(
name|repoContent
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setRepositoryId
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|BytecodeRecord
name|bytecodeRecord
init|=
operator|new
name|BytecodeRecord
argument_list|()
decl_stmt|;
name|bytecodeRecord
operator|.
name|setFilename
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bytecodeRecord
operator|.
name|setClasses
argument_list|(
name|mapOfClassesAndMethods
operator|.
name|get
argument_list|(
name|CLASSES
argument_list|)
argument_list|)
expr_stmt|;
name|bytecodeRecord
operator|.
name|setFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|bytecodeRecord
operator|.
name|setMethods
argument_list|(
name|mapOfClassesAndMethods
operator|.
name|get
argument_list|(
name|METHODS
argument_list|)
argument_list|)
expr_stmt|;
name|bytecodeRecord
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|bytecodeRecord
operator|.
name|setRepositoryId
argument_list|(
name|repoContent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|bytecodeIndex
operator|.
name|modifyRecord
argument_list|(
name|bytecodeRecord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Can't run index cleanup consumer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Error encountered while adding artifact to index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|"Error encountered while getting file contents: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|boolean
name|isPermanent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readFilesInArchive
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipFile
name|zipFile
init|=
operator|new
name|ZipFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
try|try
block|{
name|files
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|zipFile
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|entries
init|=
name|zipFile
operator|.
name|entries
argument_list|()
init|;
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
operator|(
name|ZipEntry
operator|)
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|zipFile
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
specifier|private
name|void
name|closeQuietly
parameter_list|(
name|ZipFile
name|zipFile
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|zipFile
operator|!=
literal|null
condition|)
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
operator|&&
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"$"
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPublicClassesAndMethodsFromFiles
parameter_list|(
name|String
name|zipFile
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|isClass
argument_list|(
name|file
argument_list|)
condition|)
block|{
try|try
block|{
name|ClassParser
name|parser
init|=
operator|new
name|ClassParser
argument_list|(
name|zipFile
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|JavaClass
name|javaClass
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
if|if
condition|(
name|javaClass
operator|.
name|isPublic
argument_list|()
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|javaClass
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Method
index|[]
name|methodsArr
init|=
name|javaClass
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methodsArr
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isPublic
argument_list|()
condition|)
block|{
name|methods
operator|.
name|add
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|CLASSES
argument_list|,
name|classes
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|METHODS
argument_list|,
name|methods
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

