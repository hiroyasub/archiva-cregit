begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|lucene
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Searchable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryContentIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|bytecode
operator|.
name|BytecodeHandlers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
operator|.
name|LuceneEntryConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
operator|.
name|LuceneQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|lucene
operator|.
name|LuceneRepositoryContentRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|SearchResultLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|SearchResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Searcher used for testing purposes only.  *   * @author<a href="mailto:oching@apache.org">Maria Odea Ching</a>  * @version  */
end_comment

begin_class
specifier|public
class|class
name|IndexJavaPublicMethodsCrossRepositorySearch
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexJavaPublicMethodsCrossRepositorySearch
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ManagedRepositoryConfiguration
name|localIndexedRepo
decl_stmt|;
specifier|private
name|RepositoryContentIndexFactory
name|indexFactory
decl_stmt|;
specifier|public
name|IndexJavaPublicMethodsCrossRepositorySearch
parameter_list|(
name|ManagedRepositoryConfiguration
name|localIndexedRepo
parameter_list|,
name|RepositoryContentIndexFactory
name|indexFactory
parameter_list|)
block|{
name|this
operator|.
name|localIndexedRepo
operator|=
name|localIndexedRepo
expr_stmt|;
name|this
operator|.
name|indexFactory
operator|=
name|indexFactory
expr_stmt|;
block|}
specifier|public
name|SearchResults
name|searchForBytecode
parameter_list|(
name|String
name|principal
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepos
parameter_list|,
name|String
name|term
parameter_list|,
name|SearchResultLimits
name|limits
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|RepositoryContentIndex
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryContentIndex
argument_list|>
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|add
argument_list|(
name|indexFactory
operator|.
name|createBytecodeIndex
argument_list|(
name|localIndexedRepo
argument_list|)
argument_list|)
expr_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|BytecodeHandlers
argument_list|()
operator|.
name|getQueryParser
argument_list|()
decl_stmt|;
name|LuceneQuery
name|query
init|=
operator|new
name|LuceneQuery
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|term
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResults
name|results
init|=
name|searchAll
argument_list|(
name|query
argument_list|,
name|limits
argument_list|,
name|indexes
argument_list|)
decl_stmt|;
name|results
operator|.
name|getRepositories
argument_list|()
operator|.
name|add
argument_list|(
name|localIndexedRepo
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|private
name|SearchResults
name|searchAll
parameter_list|(
name|LuceneQuery
name|luceneQuery
parameter_list|,
name|SearchResultLimits
name|limits
parameter_list|,
name|List
argument_list|<
name|RepositoryContentIndex
argument_list|>
name|indexes
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
name|specificQuery
init|=
name|luceneQuery
operator|.
name|getLuceneQuery
argument_list|()
decl_stmt|;
name|SearchResults
name|results
init|=
operator|new
name|SearchResults
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No point going any further.
return|return
name|results
return|;
block|}
comment|// Setup the converter
name|LuceneEntryConverter
name|converter
init|=
literal|null
decl_stmt|;
name|RepositoryContentIndex
name|index
init|=
name|indexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|converter
operator|=
name|index
operator|.
name|getEntryConverter
argument_list|()
expr_stmt|;
comment|// Process indexes into an array of Searchables.
name|List
argument_list|<
name|Searchable
argument_list|>
name|searchableList
init|=
name|toSearchables
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
name|Searchable
name|searchables
index|[]
init|=
operator|new
name|Searchable
index|[
name|searchableList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|searchableList
operator|.
name|toArray
argument_list|(
name|searchables
argument_list|)
expr_stmt|;
name|MultiSearcher
name|searcher
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create a multi-searcher for looking up the information.
name|searcher
operator|=
operator|new
name|MultiSearcher
argument_list|(
name|searchables
argument_list|)
expr_stmt|;
comment|// Perform the search.
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|specificQuery
argument_list|)
decl_stmt|;
name|int
name|hitCount
init|=
name|hits
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Now process the limits.
name|results
operator|.
name|setLimits
argument_list|(
name|limits
argument_list|)
expr_stmt|;
name|results
operator|.
name|setTotalHits
argument_list|(
name|hitCount
argument_list|)
expr_stmt|;
name|int
name|fetchCount
init|=
name|limits
operator|.
name|getPageSize
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|limits
operator|.
name|getSelectedPage
argument_list|()
operator|*
name|limits
operator|.
name|getPageSize
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|limits
operator|.
name|getSelectedPage
argument_list|()
operator|==
name|SearchResultLimits
operator|.
name|ALL_PAGES
condition|)
block|{
name|fetchCount
operator|=
name|hitCount
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
comment|// Goto offset.
if|if
condition|(
name|offset
operator|<
name|hitCount
condition|)
block|{
comment|// only process if the offset is within the hit count.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|fetchCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Stop fetching if we are past the total # of available hits.
if|if
condition|(
name|offset
operator|+
name|i
operator|>=
name|hitCount
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
name|offset
operator|+
name|i
argument_list|)
decl_stmt|;
name|LuceneRepositoryContentRecord
name|record
init|=
name|converter
operator|.
name|convert
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|results
operator|.
name|addHit
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|text
operator|.
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
specifier|private
name|List
argument_list|<
name|Searchable
argument_list|>
name|toSearchables
parameter_list|(
name|List
argument_list|<
name|RepositoryContentIndex
argument_list|>
name|indexes
parameter_list|)
block|{
name|List
argument_list|<
name|Searchable
argument_list|>
name|searchableList
init|=
operator|new
name|ArrayList
argument_list|<
name|Searchable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RepositoryContentIndex
name|contentIndex
range|:
name|indexes
control|)
block|{
try|try
block|{
name|searchableList
operator|.
name|add
argument_list|(
name|contentIndex
operator|.
name|getSearchable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryIndexSearchException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|searchableList
return|;
block|}
block|}
end_class

end_unit

