begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:james@atlassian.com">James William Dumay</a>  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryPathUtil
block|{
specifier|public
specifier|static
name|String
name|getLogicalResource
parameter_list|(
specifier|final
name|String
name|href
parameter_list|)
block|{
name|String
name|logicalResource
init|=
literal|null
decl_stmt|;
name|String
name|requestPathInfo
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|href
argument_list|)
decl_stmt|;
comment|//remove prefix ie /repository/blah becomes /blah
name|requestPathInfo
operator|=
name|removePrefix
argument_list|(
name|requestPathInfo
argument_list|)
expr_stmt|;
comment|// Remove prefixing slash as the repository id doesn't contain it;
if|if
condition|(
name|requestPathInfo
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|requestPathInfo
operator|=
name|requestPathInfo
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|slash
init|=
name|requestPathInfo
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|>
literal|0
condition|)
block|{
name|logicalResource
operator|=
name|requestPathInfo
operator|.
name|substring
argument_list|(
name|slash
argument_list|)
expr_stmt|;
if|if
condition|(
name|logicalResource
operator|.
name|endsWith
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
name|logicalResource
operator|+=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|logicalResource
operator|!=
literal|null
operator|&&
name|logicalResource
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|logicalResource
operator|=
name|logicalResource
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logicalResource
operator|==
literal|null
condition|)
block|{
name|logicalResource
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
else|else
block|{
name|logicalResource
operator|=
literal|"/"
expr_stmt|;
block|}
return|return
name|logicalResource
return|;
block|}
specifier|public
specifier|static
name|String
name|getRepositoryName
parameter_list|(
specifier|final
name|String
name|href
parameter_list|)
block|{
name|String
name|requestPathInfo
init|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|href
argument_list|)
decl_stmt|;
comment|//remove prefix ie /repository/blah becomes /blah
name|requestPathInfo
operator|=
name|removePrefix
argument_list|(
name|requestPathInfo
argument_list|)
expr_stmt|;
comment|// Remove prefixing slash as the repository id doesn't contain it;
if|if
condition|(
name|requestPathInfo
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|requestPathInfo
operator|=
name|requestPathInfo
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Find first element, if slash exists.
name|int
name|slash
init|=
name|requestPathInfo
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|>
literal|0
condition|)
block|{
comment|// Filtered: "central/org/apache/maven/" -> "central"
return|return
name|requestPathInfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
return|;
block|}
return|return
name|requestPathInfo
return|;
block|}
specifier|private
specifier|static
name|String
name|removePrefix
parameter_list|(
specifier|final
name|String
name|href
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|href
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|parts
operator|=
operator|(
name|String
index|[]
operator|)
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|parts
argument_list|,
literal|1
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
operator|||
name|parts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"/"
return|;
block|}
name|String
name|joinedString
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|parts
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|href
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|joinedString
operator|=
name|joinedString
operator|+
literal|"/"
expr_stmt|;
block|}
return|return
name|joinedString
return|;
block|}
block|}
end_class

end_unit

