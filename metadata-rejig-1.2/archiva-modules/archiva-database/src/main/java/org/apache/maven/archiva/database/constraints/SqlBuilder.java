begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * SqlBuilder - common sql building mechanisms.   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SqlBuilder
block|{
comment|/**      * Append a sql specific where clause within<code>"()"</code> braces that selects the specific      * repository ids provided.       *       * NOTE: This does not append the "WHERE" statement itself.      *       * @param sql the sql buffer to append to.      * @param fieldId the field id for the repository Id.      * @param selectedRepositoryIds the list of repository ids to provide.      */
specifier|public
specifier|static
name|void
name|appendWhereSelectedRepositories
parameter_list|(
name|StringBuffer
name|sql
parameter_list|,
name|String
name|fieldId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectedRepositoryIds
parameter_list|)
block|{
if|if
condition|(
name|fieldId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null field id is not allowed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|fieldId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Blank field id is not allowed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|selectedRepositoryIds
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Selected repositories cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|selectedRepositoryIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Selected repositories cannot be null."
argument_list|)
throw|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|boolean
name|multiple
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|selectedRepositoryIds
control|)
block|{
if|if
condition|(
name|multiple
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" || "
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|fieldId
argument_list|)
operator|.
name|append
argument_list|(
literal|" == \""
argument_list|)
operator|.
name|append
argument_list|(
name|repo
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|multiple
operator|=
literal|true
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

