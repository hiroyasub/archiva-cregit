begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_comment
comment|/**  * Gradually create a digest for a stream.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractStreamingDigester
implements|implements
name|StreamingDigester
block|{
specifier|protected
specifier|final
name|MessageDigest
name|md
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX_CHARS
init|=
literal|"0123456789ABCDEF"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HI_MASK
init|=
literal|0xF0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LO_MASK
init|=
literal|0x0F
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|32768
decl_stmt|;
specifier|protected
name|AbstractStreamingDigester
parameter_list|(
name|String
name|algorithm
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|md
operator|.
name|getAlgorithm
argument_list|()
return|;
block|}
specifier|public
name|String
name|calc
parameter_list|()
throws|throws
name|DigesterException
block|{
return|return
name|calc
argument_list|(
name|this
operator|.
name|md
argument_list|)
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|DigesterException
block|{
name|md
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|DigesterException
block|{
name|update
argument_list|(
name|is
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|String
name|calc
parameter_list|(
name|MessageDigest
name|md
parameter_list|)
block|{
name|byte
index|[]
name|digest
init|=
name|md
operator|.
name|digest
argument_list|()
decl_stmt|;
name|char
index|[]
name|hash
init|=
operator|new
name|char
index|[
name|digest
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|digest
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hash
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|HEX_CHARS
index|[
operator|(
name|digest
index|[
name|i
index|]
operator|&
name|HI_MASK
operator|)
operator|>>
literal|4
index|]
expr_stmt|;
name|hash
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|HEX_CHARS
index|[
operator|(
name|digest
index|[
name|i
index|]
operator|&
name|LO_MASK
operator|)
index|]
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|hash
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|void
name|update
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|MessageDigest
name|digest
parameter_list|)
throws|throws
name|DigesterException
block|{
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|size
init|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUFFER_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|size
operator|>=
literal|0
condition|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DigesterException
argument_list|(
literal|"Unable to update "
operator|+
name|digest
operator|.
name|getAlgorithm
argument_list|()
operator|+
literal|" hash: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

