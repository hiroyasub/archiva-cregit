begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|servlet
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Copyright 2001-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|servlet
operator|.
name|AbstractPlexusServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|policy
operator|.
name|AccountLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|policy
operator|.
name|MustChangePasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|system
operator|.
name|SecuritySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|filter
operator|.
name|authentication
operator|.
name|HttpAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVTransaction
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVUtilities
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * RepositoryAccess - access read/write to the repository.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  * @plexus.component role="org.apache.maven.archiva.web.servlet.PlexusServlet"  * role-hint="repositoryAccess"  * @todo CACHE REPOSITORY LIST  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryAccess
extends|extends
name|AbstractPlexusServlet
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ConfigurationStore
name|configurationStore
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|SecuritySystem
name|securitySystem
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="basic"      */
specifier|private
name|HttpAuthenticator
name|httpAuth
decl_stmt|;
comment|/**      * List of request methods that fall into the category of 'access' or 'read' of a repository.      * All other method requests are to be considered 'write' or 'upload' requests.      */
specifier|private
specifier|static
specifier|final
name|List
name|ACCESS_METHODS
decl_stmt|;
static|static
block|{
name|ACCESS_METHODS
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|ACCESS_METHODS
operator|.
name|add
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|ACCESS_METHODS
operator|.
name|add
argument_list|(
literal|"PROPFIND"
argument_list|)
expr_stmt|;
name|ACCESS_METHODS
operator|.
name|add
argument_list|(
literal|"OPTIONS"
argument_list|)
expr_stmt|;
name|ACCESS_METHODS
operator|.
name|add
argument_list|(
literal|"REPORT"
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|RequestPath
block|{
name|String
name|repoId
decl_stmt|;
name|String
name|path
decl_stmt|;
block|}
specifier|private
name|Map
name|davRepositoryMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getServletInfo
parameter_list|()
block|{
comment|// TODO: We could produce information about # of repositories being tracked, etc...
return|return
literal|"Archiva Repository Access Servlet"
return|;
block|}
specifier|public
name|void
name|servletRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Configuration
name|config
decl_stmt|;
try|try
block|{
name|config
operator|=
name|configurationStore
operator|.
name|getConfigurationFromStore
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationStoreException
name|e
parameter_list|)
block|{
comment|// TODO: should be a more pretty error to user. ;-)
comment|// TODO: can we determine if the incoming request is a real user, or just maven-wagon?
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to obtain configuration."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|RequestPath
name|reqpath
init|=
name|getRepositoryPath
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqpath
operator|==
literal|null
condition|)
block|{
name|routeToErrorPage
argument_list|(
name|response
argument_list|,
literal|"Invalid Repository URL."
argument_list|)
expr_stmt|;
return|return;
block|}
name|RepositoryConfiguration
name|repoconfig
init|=
name|config
operator|.
name|getRepositoryById
argument_list|(
name|reqpath
operator|.
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoconfig
operator|==
literal|null
condition|)
block|{
name|routeToErrorPage
argument_list|(
name|response
argument_list|,
literal|"Invalid Repository ID."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Authentication Tests.
name|AuthenticationResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|httpAuth
operator|.
name|getAuthenticationResult
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
comment|// Must Authenticate.
name|httpAuth
operator|.
name|challenge
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|"Repository "
operator|+
name|repoconfig
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AuthenticationException
argument_list|(
literal|"User Credentials Invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Fatal Http Authentication Error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Fatal Http Authentication Error."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccountLockedException
name|e
parameter_list|)
block|{
name|httpAuth
operator|.
name|challenge
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|"Repository "
operator|+
name|repoconfig
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AuthenticationException
argument_list|(
literal|"User account is locked"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MustChangePasswordException
name|e
parameter_list|)
block|{
name|httpAuth
operator|.
name|challenge
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|"Repository "
operator|+
name|repoconfig
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AuthenticationException
argument_list|(
literal|"You must change your password before you can attempt this again."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Authorization Tests.
name|boolean
name|isWriteRequest
init|=
operator|!
name|ACCESS_METHODS
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|SecuritySession
name|securitySession
init|=
name|httpAuth
operator|.
name|getSecuritySession
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|permission
init|=
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_ACCESS
decl_stmt|;
if|if
condition|(
name|isWriteRequest
condition|)
block|{
name|permission
operator|=
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_UPLOAD
expr_stmt|;
block|}
name|boolean
name|isAuthorized
init|=
name|securitySystem
operator|.
name|isAuthorized
argument_list|(
name|securitySession
argument_list|,
name|permission
argument_list|,
name|repoconfig
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthorized
condition|)
block|{
comment|// Issue HTTP Challenge.
name|httpAuth
operator|.
name|challenge
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|"Repository "
operator|+
name|repoconfig
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AuthenticationException
argument_list|(
literal|"Authorization Denied."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Fatal Authorization Subsystem Error."
argument_list|)
throw|;
block|}
comment|// Allow DAV To Handle Request.
name|RepositoryMapping
name|repo
init|=
name|getRepositoryMapping
argument_list|(
name|repoconfig
argument_list|)
decl_stmt|;
name|String
name|serverInfo
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|getServletContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|getServletContext
argument_list|()
operator|.
name|getServerInfo
argument_list|()
argument_list|)
condition|)
block|{
name|serverInfo
operator|=
name|getServletContext
argument_list|()
operator|.
name|getServerInfo
argument_list|()
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setHeader
argument_list|(
literal|"Server"
argument_list|,
name|serverInfo
operator|+
literal|" Archiva : "
operator|+
name|DAVUtilities
operator|.
name|SERVLET_SIGNATURE
argument_list|)
expr_stmt|;
name|DAVTransaction
name|transaction
init|=
operator|new
name|DAVTransaction
argument_list|(
operator|new
name|RepositoryRequest
argument_list|(
name|request
argument_list|,
name|repoconfig
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|response
argument_list|)
decl_stmt|;
try|try
block|{
name|repo
operator|.
name|getDavProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|exception
parameter_list|)
block|{
specifier|final
name|String
name|header
init|=
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|' '
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
operator|+
literal|' '
operator|+
name|request
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error processing: "
operator|+
name|header
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Exception processing DAV transaction"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
specifier|public
name|RepositoryMapping
name|getRepositoryMapping
parameter_list|(
name|RepositoryConfiguration
name|repoconfig
parameter_list|)
throws|throws
name|IOException
block|{
name|RepositoryMapping
name|repo
init|=
operator|(
name|RepositoryMapping
operator|)
name|davRepositoryMap
operator|.
name|get
argument_list|(
name|repoconfig
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|repo
operator|=
operator|new
name|RepositoryMapping
argument_list|(
name|repoconfig
argument_list|)
expr_stmt|;
name|davRepositoryMap
operator|.
name|put
argument_list|(
name|repoconfig
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|repo
return|;
block|}
specifier|public
name|RequestPath
name|getRepositoryPath
parameter_list|(
name|String
name|requestPathInfo
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|requestPathInfo
argument_list|)
operator|||
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|,
name|requestPathInfo
argument_list|)
condition|)
block|{
comment|// Got root url.  Can't do anything with this.
return|return
literal|null
return|;
block|}
name|RequestPath
name|ret
init|=
operator|new
name|RequestPath
argument_list|()
decl_stmt|;
comment|// Find the first 'path' of the pathInfo.
comment|// Default: "/pathid" -> "pathid"
name|ret
operator|.
name|repoId
operator|=
name|requestPathInfo
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
comment|// Find first element, if slash exists.
name|int
name|slash
init|=
name|requestPathInfo
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|>
literal|0
condition|)
block|{
comment|// Filtered: "/central/org/apache/maven/" -> "central"
name|ret
operator|.
name|repoId
operator|=
name|requestPathInfo
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|slash
argument_list|)
expr_stmt|;
name|String
name|repoPath
init|=
name|requestPathInfo
operator|.
name|substring
argument_list|(
name|slash
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoPath
operator|.
name|endsWith
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
name|repoPath
operator|+=
literal|"/"
expr_stmt|;
block|}
name|String
name|path
init|=
name|FileUtils
operator|.
name|normalize
argument_list|(
name|repoPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|routeToErrorPage
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|resetBuffer
argument_list|()
expr_stmt|;
comment|/* Since the primary user of this servlet will be Maven Wagon.          * Always return 404 on error to force the wagon to stop retrying.          */
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

