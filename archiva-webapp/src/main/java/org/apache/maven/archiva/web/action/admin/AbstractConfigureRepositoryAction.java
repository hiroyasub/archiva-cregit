begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ModelDriven
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|AbstractRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationChangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfigurationStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|InvalidConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|rbac
operator|.
name|RbacManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|rbac
operator|.
name|profile
operator|.
name|RoleProfileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|rbac
operator|.
name|profile
operator|.
name|RoleProfileManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Base action for repository configuration actions.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractConfigureRepositoryAction
extends|extends
name|PlexusActionSupport
implements|implements
name|ModelDriven
implements|,
name|Preparable
implements|,
name|SecureAction
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ConfigurationStore
name|configurationStore
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="archiva"      */
specifier|protected
name|RoleProfileManager
name|roleProfileManager
decl_stmt|;
comment|/**      * The repository.      */
specifier|private
name|AbstractRepositoryConfiguration
name|repository
decl_stmt|;
comment|/**      * The repository ID to lookup when editing a repository.      */
specifier|private
name|String
name|repoId
decl_stmt|;
comment|/**      * The previously read configuration.      */
specifier|protected
name|Configuration
name|configuration
decl_stmt|;
specifier|public
name|String
name|add
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
throws|,
name|RbacManagerException
throws|,
name|RoleProfileException
block|{
comment|// TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
name|AbstractRepositoryConfiguration
name|existingRepository
init|=
name|getRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingRepository
operator|!=
literal|null
condition|)
block|{
name|addFieldError
argument_list|(
literal|"id"
argument_list|,
literal|"A repository with that id already exists"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
return|return
name|saveConfiguration
argument_list|()
return|;
block|}
specifier|public
name|String
name|edit
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
throws|,
name|RbacManagerException
throws|,
name|RoleProfileException
block|{
comment|// TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
name|AbstractRepositoryConfiguration
name|existingRepository
init|=
name|getRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|removeRepository
argument_list|(
name|existingRepository
argument_list|)
expr_stmt|;
return|return
name|saveConfiguration
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|removeRepository
parameter_list|(
name|AbstractRepositoryConfiguration
name|existingRepository
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|AbstractRepositoryConfiguration
name|getRepository
parameter_list|(
name|String
name|id
parameter_list|)
function_decl|;
specifier|private
name|String
name|saveConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
throws|,
name|RbacManagerException
throws|,
name|RoleProfileException
block|{
name|addRepository
argument_list|()
expr_stmt|;
name|configurationStore
operator|.
name|storeConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// TODO: do we need to check if indexing is needed?
name|addActionMessage
argument_list|(
literal|"Successfully saved configuration"
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|addRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|RoleProfileException
function_decl|;
specifier|public
name|String
name|input
parameter_list|()
block|{
return|return
name|INPUT
return|;
block|}
specifier|public
name|Object
name|getModel
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|protected
specifier|abstract
name|AbstractRepositoryConfiguration
name|createRepository
parameter_list|()
function_decl|;
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|ConfigurationStoreException
block|{
name|configuration
operator|=
name|configurationStore
operator|.
name|getConfigurationFromStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|getRepository
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepository
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getRepoId
parameter_list|()
block|{
return|return
name|repoId
return|;
block|}
specifier|public
name|void
name|setRepoId
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|repoId
expr_stmt|;
block|}
specifier|protected
name|AbstractRepositoryConfiguration
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setRequiresAuthentication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRepoId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: this is not right. It needs to change based on method. But is this really the right way to restrict this area?
comment|// TODO: not right. We only care about this permission on managed repositories. Otherwise, it's configuration
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_EDIT_REPOSITORY
argument_list|,
name|getRepoId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
argument_list|,
name|Resource
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
block|}
return|return
name|bundle
return|;
block|}
block|}
end_class

end_unit

