begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
package|;
end_package

begin_comment
comment|/* * Copyright 2005 The Apache Software Foundation. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|util
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|system
operator|.
name|SecuritySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|user
operator|.
name|policy
operator|.
name|PasswordRuleViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|user
operator|.
name|policy
operator|.
name|PasswordRuleViolations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * LoginAction:  *  * @author Jesse McConnell<jmcconnell@apache.org>  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id:$  * @plexus.component role="com.opensymphony.xwork.Action"  * role-hint="newUser"  */
end_comment

begin_class
specifier|public
class|class
name|NewUserAction
extends|extends
name|PlexusActionSupport
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|SecuritySystem
name|securitySystem
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RoleManager
name|roleManager
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|passwordConfirm
decl_stmt|;
specifier|private
name|String
name|email
decl_stmt|;
specifier|private
name|String
name|fullName
decl_stmt|;
specifier|public
name|String
name|createUser
parameter_list|()
block|{
comment|// TODO: use commons-validator for these fields.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"User Name is required."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fullName
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Full Name is required."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|email
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Email Address is required."
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Validate Email Address (use commons-validator)
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|password
argument_list|,
name|passwordConfirm
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Passwords do not match."
argument_list|)
expr_stmt|;
block|}
name|UserManager
name|um
init|=
name|securitySystem
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|um
operator|.
name|userExists
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"User already exists!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|User
name|user
init|=
name|um
operator|.
name|createUser
argument_list|(
name|username
argument_list|,
name|fullName
argument_list|,
name|email
argument_list|)
decl_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
try|try
block|{
name|um
operator|.
name|addUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PasswordRuleViolationException
name|e
parameter_list|)
block|{
name|PasswordRuleViolations
name|violations
init|=
name|e
operator|.
name|getViolations
argument_list|()
decl_stmt|;
name|List
name|violationList
init|=
name|violations
operator|.
name|getLocalizedViolations
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|violationList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|roleManager
operator|.
name|addUser
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasActionErrors
argument_list|()
condition|)
block|{
return|return
name|ERROR
return|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|email
return|;
block|}
specifier|public
name|void
name|setEmail
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|this
operator|.
name|email
operator|=
name|email
expr_stmt|;
block|}
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
specifier|public
name|void
name|setFullName
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
name|this
operator|.
name|fullName
operator|=
name|fullName
expr_stmt|;
block|}
specifier|public
name|String
name|getPasswordConfirm
parameter_list|()
block|{
return|return
name|passwordConfirm
return|;
block|}
specifier|public
name|void
name|setPasswordConfirm
parameter_list|(
name|String
name|passwordConfirm
parameter_list|)
block|{
name|this
operator|.
name|passwordConfirm
operator|=
name|passwordConfirm
expr_stmt|;
block|}
block|}
end_class

end_unit

