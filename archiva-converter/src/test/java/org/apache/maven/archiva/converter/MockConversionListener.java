begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * MockConversionListener   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|MockConversionListener
implements|implements
name|ConversionListener
block|{
specifier|private
name|Map
name|warnings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|errors
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|exceptions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|List
name|processed
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|repositories
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|conversionEvent
parameter_list|(
name|ConversionEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ConversionEvent
operator|.
name|STARTED
case|:
name|addUnique
argument_list|(
name|repositories
argument_list|,
name|event
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConversionEvent
operator|.
name|PROCESSED
case|:
name|addUnique
argument_list|(
name|processed
argument_list|,
name|event
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConversionEvent
operator|.
name|WARNING
case|:
if|if
condition|(
name|event
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addObjectList
argument_list|(
name|exceptions
argument_list|,
name|toKey
argument_list|(
name|event
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addObjectList
argument_list|(
name|warnings
argument_list|,
name|toKey
argument_list|(
name|event
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ConversionEvent
operator|.
name|ERROR
case|:
if|if
condition|(
name|event
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addObjectList
argument_list|(
name|exceptions
argument_list|,
name|toKey
argument_list|(
name|event
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addObjectList
argument_list|(
name|errors
argument_list|,
name|toKey
argument_list|(
name|event
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ConversionEvent
operator|.
name|FINISHED
case|:
name|addUnique
argument_list|(
name|repositories
argument_list|,
name|event
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|String
name|toKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|addObjectList
parameter_list|(
name|Map
name|map
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|List
name|objlist
init|=
operator|(
name|List
operator|)
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|objlist
operator|==
literal|null
condition|)
block|{
name|objlist
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|objlist
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|objlist
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addUnique
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|contains
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|collection
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
name|getErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
specifier|public
name|Map
name|getExceptions
parameter_list|()
block|{
return|return
name|exceptions
return|;
block|}
specifier|public
name|List
name|getProcessed
parameter_list|()
block|{
return|return
name|processed
return|;
block|}
specifier|public
name|List
name|getRepositories
parameter_list|()
block|{
return|return
name|repositories
return|;
block|}
specifier|public
name|Map
name|getWarnings
parameter_list|()
block|{
return|return
name|warnings
return|;
block|}
specifier|private
name|int
name|getObjectListCount
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|objList
init|=
operator|(
name|List
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|objList
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getWarningMessageCount
parameter_list|()
block|{
return|return
name|getObjectListCount
argument_list|(
name|warnings
argument_list|)
return|;
block|}
specifier|public
name|int
name|getErrorMessageCount
parameter_list|()
block|{
return|return
name|getObjectListCount
argument_list|(
name|errors
argument_list|)
return|;
block|}
block|}
end_class

end_unit

