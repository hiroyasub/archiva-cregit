begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|artifact
operator|.
name|managed
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ManagedArtifactTypes - provides place to test an unknown artifact type.  *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ManagedArtifactTypes
block|{
specifier|public
specifier|static
specifier|final
name|int
name|GENERIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|JAVA
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EJB
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|List
name|javaArtifacts
decl_stmt|;
specifier|private
specifier|static
name|List
name|ejbArtifacts
decl_stmt|;
static|static
block|{
name|javaArtifacts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|javaArtifacts
operator|.
name|add
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|javaArtifacts
operator|.
name|add
argument_list|(
literal|"war"
argument_list|)
expr_stmt|;
name|javaArtifacts
operator|.
name|add
argument_list|(
literal|"sar"
argument_list|)
expr_stmt|;
name|javaArtifacts
operator|.
name|add
argument_list|(
literal|"rar"
argument_list|)
expr_stmt|;
name|javaArtifacts
operator|.
name|add
argument_list|(
literal|"ear"
argument_list|)
expr_stmt|;
name|ejbArtifacts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|ejbArtifacts
operator|.
name|add
argument_list|(
literal|"ejb"
argument_list|)
expr_stmt|;
name|ejbArtifacts
operator|.
name|add
argument_list|(
literal|"ejb-client"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|whichType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// TODO: is an empty type even possible?
return|return
name|GENERIC
return|;
block|}
name|type
operator|=
name|type
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|ejbArtifacts
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|EJB
return|;
block|}
if|if
condition|(
name|javaArtifacts
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|JAVA
return|;
block|}
return|return
name|GENERIC
return|;
block|}
block|}
end_class

end_unit

