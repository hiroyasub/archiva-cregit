begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|io
operator|.
name|xpp3
operator|.
name|ConfigurationXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|configuration
operator|.
name|io
operator|.
name|xpp3
operator|.
name|ConfigurationXpp3Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Load and store the configuration. No synchronization is used, but it is unnecessary as the old configuration object  * can continue to be used.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @todo would be great for plexus to do this for us - so the configuration would be a component itself rather than this store  * @todo would be good to monitor the store file for changes  * @todo support other implementations than XML file  * @plexus.component role="org.apache.maven.repository.configuration.ConfigurationStore"  */
end_comment

begin_class
specifier|public
class|class
name|DefaultConfigurationStore
extends|extends
name|AbstractLogEnabled
implements|implements
name|ConfigurationStore
block|{
comment|/**      * @plexus.configuration default-value="${configuration.store.file}"      */
specifier|private
name|File
name|file
decl_stmt|;
comment|/**      * The cached configuration.      */
specifier|private
name|Configuration
name|configuration
decl_stmt|;
comment|/**      * List of listeners to configuration changes.      */
specifier|private
name|List
comment|/*<ConfigurationChangeListener>*/
name|listeners
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|public
name|Configuration
name|getConfigurationFromStore
parameter_list|()
throws|throws
name|ConfigurationStoreException
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|ConfigurationXpp3Reader
name|reader
init|=
operator|new
name|ConfigurationXpp3Reader
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|"/.m2/repository-manager.xml"
argument_list|)
expr_stmt|;
block|}
name|FileReader
name|fileReader
decl_stmt|;
try|try
block|{
name|fileReader
operator|=
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Configuration file: "
operator|+
name|file
operator|+
literal|" not found. Using defaults."
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
return|return
name|configuration
return|;
block|}
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Reading configuration from "
operator|+
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|configuration
operator|=
name|reader
operator|.
name|read
argument_list|(
name|fileReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationStoreException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationStoreException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configuration
return|;
block|}
specifier|public
name|void
name|storeConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ConfigurationStoreException
throws|,
name|InvalidConfigurationException
throws|,
name|ConfigurationChangeException
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConfigurationChangeListener
name|listener
init|=
operator|(
name|ConfigurationChangeListener
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|notifyOfConfigurationChange
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
name|ConfigurationXpp3Writer
name|writer
init|=
operator|new
name|ConfigurationXpp3Writer
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Writing configuration to "
operator|+
name|file
argument_list|)
expr_stmt|;
name|FileWriter
name|fileWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileWriter
operator|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|fileWriter
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationStoreException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|fileWriter
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addChangeListener
parameter_list|(
name|ConfigurationChangeListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

