begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|AbstractArchivaDatabaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArtifactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ArtifactsProcessedConstraintTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ArtifactsProcessedConstraintTest
extends|extends
name|AbstractArchivaDatabaseTestCase
block|{
specifier|public
name|ArchivaArtifact
name|createArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|whenProcessed
parameter_list|)
throws|throws
name|Exception
block|{
name|ArchivaArtifact
name|artifact
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|createArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
literal|""
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Artifact should not be null."
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|Date
name|dateWhenProcessed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|whenProcessed
operator|!=
literal|null
condition|)
block|{
name|dateWhenProcessed
operator|=
name|toDate
argument_list|(
name|whenProcessed
argument_list|)
expr_stmt|;
block|}
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setWhenProcessed
argument_list|(
name|dateWhenProcessed
argument_list|)
expr_stmt|;
comment|// Satisfy table / column requirements.
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setLastModified
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|private
name|Date
name|toDate
parameter_list|(
name|String
name|txt
parameter_list|)
throws|throws
name|Exception
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy/MM/dd HH:mm:ss"
argument_list|)
decl_stmt|;
return|return
name|sdf
operator|.
name|parse
argument_list|(
name|txt
argument_list|)
return|;
block|}
specifier|public
name|void
name|assertResults
parameter_list|(
name|String
name|type
parameter_list|,
name|List
name|results
parameter_list|,
name|String
name|expectedArtifacts
index|[]
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Results["
operator|+
name|type
operator|+
literal|"] should not be null."
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Results["
operator|+
name|type
operator|+
literal|"].size"
argument_list|,
name|expectedArtifacts
operator|.
name|length
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedArtifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|artifactId
init|=
name|expectedArtifacts
index|[
name|i
index|]
decl_stmt|;
name|int
name|found
init|=
literal|0
decl_stmt|;
name|Iterator
name|it
init|=
name|results
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifact
name|artifact
init|=
operator|(
name|ArchivaArtifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactId
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
operator|<=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Results["
operator|+
name|type
operator|+
literal|"] - Did not find expected artifact ID ["
operator|+
name|artifactId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
operator|>
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Results["
operator|+
name|type
operator|+
literal|"] - Expected to find 1 copy of artifact ID ["
operator|+
name|artifactId
operator|+
literal|"], yet found<"
operator|+
name|found
operator|+
literal|"> instead."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ArtifactDAO
name|adao
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Artifact DAO should not be null."
argument_list|,
name|adao
argument_list|)
expr_stmt|;
name|adao
operator|.
name|saveArtifact
argument_list|(
name|createArtifact
argument_list|(
literal|"org.apache.maven.archiva"
argument_list|,
literal|"archiva-common"
argument_list|,
literal|"1.0-SNAPSHOT"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|adao
operator|.
name|saveArtifact
argument_list|(
name|createArtifact
argument_list|(
literal|"org.apache.maven.archiva"
argument_list|,
literal|"archiva-utils"
argument_list|,
literal|"1.0-SNAPSHOT"
argument_list|,
literal|"2006/08/22 19:01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|adao
operator|.
name|saveArtifact
argument_list|(
name|createArtifact
argument_list|(
literal|"org.apache.maven.archiva"
argument_list|,
literal|"archiva-old"
argument_list|,
literal|"0.1"
argument_list|,
literal|"2004/02/15 9:01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|adao
operator|.
name|saveArtifact
argument_list|(
name|createArtifact
argument_list|(
literal|"org.apache.maven.archiva"
argument_list|,
literal|"archiva-database"
argument_list|,
literal|"1.0-SNAPSHOT"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNotProcessed
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|results
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertResults
argument_list|(
literal|"not-processed"
argument_list|,
name|results
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"archiva-common"
block|,
literal|"archiva-database"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProcessed
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|results
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertResults
argument_list|(
literal|"processed"
argument_list|,
name|results
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"archiva-utils"
block|,
literal|"archiva-old"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSinceRecent
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|since
init|=
name|toDate
argument_list|(
literal|"2006/01/01 12:00:00"
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
name|since
argument_list|)
argument_list|)
decl_stmt|;
name|assertResults
argument_list|(
literal|"processed"
argument_list|,
name|results
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"archiva-utils"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSinceOld
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|since
init|=
name|toDate
argument_list|(
literal|"2001/01/01 12:00:00"
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
name|since
argument_list|)
argument_list|)
decl_stmt|;
name|assertResults
argument_list|(
literal|"processed"
argument_list|,
name|results
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"archiva-utils"
block|,
literal|"archiva-old"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

