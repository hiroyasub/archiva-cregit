begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|DatabaseCleanupConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|DatabaseUnprocessedArtifactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|TestDatabaseCleanupConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
operator|.
name|TestDatabaseUnprocessedConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|jdo
operator|.
name|DefaultConfigurableJdoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|jdo
operator|.
name|JdoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jpox
operator|.
name|SchemaTool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManagerFactory
import|;
end_import

begin_comment
comment|/**  * AbstractArchivaDatabaseTestCase   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractArchivaDatabaseTestCase
extends|extends
name|PlexusTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TIMESTAMP
init|=
literal|"yyyy/MM/dd HH:mm:ss"
decl_stmt|;
specifier|protected
name|ArchivaDAO
name|dao
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|DefaultConfigurableJdoFactory
name|jdoFactory
init|=
operator|(
name|DefaultConfigurableJdoFactory
operator|)
name|lookup
argument_list|(
name|JdoFactory
operator|.
name|ROLE
argument_list|,
literal|"archiva"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DefaultConfigurableJdoFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|jdoFactory
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setPersistenceManagerFactoryClass
argument_list|(
literal|"org.jpox.PersistenceManagerFactoryImpl"
argument_list|)
expr_stmt|;
comment|/* derby version          File derbyDbDir = new File( "target/plexus-home/testdb" );          if ( derbyDbDir.exists() )          {          FileUtils.deleteDirectory( derbyDbDir );          }           jdoFactory.setDriverName( System.getProperty( "jdo.test.driver", "org.apache.derby.jdbc.EmbeddedDriver" ) );             jdoFactory.setUrl( System.getProperty( "jdo.test.url", "jdbc:derby:" + derbyDbDir.getAbsolutePath() + ";create=true" ) );          */
name|jdoFactory
operator|.
name|setDriverName
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jdo.test.driver"
argument_list|,
literal|"org.hsqldb.jdbcDriver"
argument_list|)
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setUrl
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jdo.test.url"
argument_list|,
literal|"jdbc:hsqldb:mem:"
operator|+
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setUserName
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jdo.test.user"
argument_list|,
literal|"sa"
argument_list|)
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setPassword
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jdo.test.pass"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"org.jpox.transactionIsolation"
argument_list|,
literal|"READ_COMMITTED"
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"org.jpox.poid.transactionIsolation"
argument_list|,
literal|"READ_COMMITTED"
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"org.jpox.autoCreateSchema"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"javax.jdo.option.RetainValues"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"javax.jdo.option.RestoreValues"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// jdoFactory.setProperty( "org.jpox.autoCreateColumns", "true" );
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"org.jpox.validateTables"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"org.jpox.validateColumns"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jdoFactory
operator|.
name|setProperty
argument_list|(
literal|"org.jpox.validateConstraints"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
name|jdoFactory
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URL
name|jdoFileUrls
index|[]
init|=
operator|new
name|URL
index|[]
block|{
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/org/apache/maven/archiva/model/package.jdo"
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
operator|(
name|jdoFileUrls
operator|==
literal|null
operator|)
operator|||
operator|(
name|jdoFileUrls
index|[
literal|0
index|]
operator|==
literal|null
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to process test "
operator|+
name|getName
argument_list|()
operator|+
literal|" - missing package.jdo."
argument_list|)
expr_stmt|;
block|}
name|File
name|propsFile
init|=
literal|null
decl_stmt|;
comment|// intentional
name|boolean
name|verbose
init|=
literal|true
decl_stmt|;
name|SchemaTool
operator|.
name|deleteSchemaTables
argument_list|(
name|jdoFileUrls
argument_list|,
operator|new
name|URL
index|[]
block|{}
argument_list|,
name|propsFile
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|SchemaTool
operator|.
name|createSchemaTables
argument_list|(
name|jdoFileUrls
argument_list|,
operator|new
name|URL
index|[]
block|{}
argument_list|,
name|propsFile
argument_list|,
name|verbose
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PersistenceManagerFactory
name|pmf
init|=
name|jdoFactory
operator|.
name|getPersistenceManagerFactory
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pmf
argument_list|)
expr_stmt|;
name|PersistenceManager
name|pm
init|=
name|pmf
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
name|pm
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|dao
operator|=
operator|(
name|ArchivaDAO
operator|)
name|lookup
argument_list|(
name|ArchivaDAO
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jdo"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TestDatabaseCleanupConsumer
name|lookupTestCleanupConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestDatabaseCleanupConsumer
name|consumer
init|=
operator|(
name|TestDatabaseCleanupConsumer
operator|)
name|lookup
argument_list|(
name|DatabaseCleanupConsumer
operator|.
name|class
argument_list|,
literal|"test-db-cleanup"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test Database Cleanup Consumer should not be null."
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
specifier|protected
name|TestDatabaseUnprocessedConsumer
name|lookupTestUnprocessedConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestDatabaseUnprocessedConsumer
name|consumer
init|=
operator|(
name|TestDatabaseUnprocessedConsumer
operator|)
name|lookup
argument_list|(
name|DatabaseUnprocessedArtifactConsumer
operator|.
name|class
argument_list|,
literal|"test-db-unprocessed"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test Database Unprocessed Consumer should not be null."
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
specifier|protected
name|Date
name|toDate
parameter_list|(
name|String
name|txt
parameter_list|)
throws|throws
name|Exception
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|TIMESTAMP
argument_list|)
decl_stmt|;
return|return
name|sdf
operator|.
name|parse
argument_list|(
name|txt
argument_list|)
return|;
block|}
specifier|protected
name|String
name|fromDate
parameter_list|(
name|Date
name|date
parameter_list|)
throws|throws
name|Exception
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|TIMESTAMP
argument_list|)
decl_stmt|;
return|return
name|sdf
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|protected
name|VersionedReference
name|toVersionedReference
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|id
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 3 parts ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|VersionedReference
name|ref
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Group ID should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Artifact ID should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Version should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
specifier|protected
name|ArtifactReference
name|toArtifactReference
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|StringUtils
operator|.
name|splitPreserveAllTokens
argument_list|(
name|id
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 5 parts ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
literal|5
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArtifactReference
name|ref
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setGroupId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setArtifactId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setVersion
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setClassifier
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setType
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Group ID should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Artifact ID should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Version should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Blank string is ok for classifier, NULL is not.
name|assertNotNull
argument_list|(
literal|"Classifier should not be null ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Type should not be blank ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
block|}
end_class

end_unit

