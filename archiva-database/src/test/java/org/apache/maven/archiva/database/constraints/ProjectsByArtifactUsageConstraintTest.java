begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|AbstractArchivaDatabaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|DeclarativeConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaProjectModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ProjectsByArtifactUsageConstraintTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ProjectsByArtifactUsageConstraintTest
extends|extends
name|AbstractArchivaDatabaseTestCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|saveModel
parameter_list|(
name|String
name|modelId
parameter_list|,
name|String
name|deps
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|ArchivaProjectModel
name|model
init|=
operator|new
name|ArchivaProjectModel
argument_list|()
decl_stmt|;
comment|// Piece together a simple model.
name|VersionedReference
name|ref
init|=
name|toVersionedReference
argument_list|(
name|modelId
argument_list|)
decl_stmt|;
name|model
operator|.
name|setGroupId
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setArtifactId
argument_list|(
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setVersion
argument_list|(
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPackaging
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|model
operator|.
name|setOrigin
argument_list|(
literal|"testcase"
argument_list|)
expr_stmt|;
if|if
condition|(
name|deps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ArtifactReference
name|artiref
init|=
name|toArtifactReference
argument_list|(
name|deps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setGroupId
argument_list|(
name|artiref
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setArtifactId
argument_list|(
name|artiref
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setVersion
argument_list|(
name|artiref
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setClassifier
argument_list|(
name|artiref
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setClassifier
argument_list|(
name|artiref
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|addDependency
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|dao
operator|.
name|getProjectModelDAO
argument_list|()
operator|.
name|saveProjectModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArchivaArtifact
name|toArtifact
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ArtifactReference
name|ref
init|=
name|toArtifactReference
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ArchivaArtifact
name|artifact
init|=
operator|new
name|ArchivaArtifact
argument_list|(
name|ref
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|ref
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|ref
operator|.
name|getVersion
argument_list|()
argument_list|,
name|ref
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setLastModified
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setRepositoryId
argument_list|(
literal|"testable_repo"
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
specifier|public
name|void
name|testContraint
parameter_list|()
throws|throws
name|Exception
block|{
name|saveModel
argument_list|(
literal|"org.apache.maven.archiva:archiva-configuration:1.0"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org.codehaus.plexus:plexus-digest:1.0::jar"
block|}
argument_list|)
expr_stmt|;
name|saveModel
argument_list|(
literal|"org.apache.maven.archiva:archiva-common:1.0"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org.codehaus.plexus:plexus-digest:1.0::jar"
block|,
literal|"junit:junit:3.8.1::jar"
block|}
argument_list|)
expr_stmt|;
name|ArchivaArtifact
name|artifact
decl_stmt|;
name|artifact
operator|=
name|toArtifact
argument_list|(
literal|"org.foo:bar:4.0::jar"
argument_list|)
expr_stmt|;
name|assertConstraint
argument_list|(
literal|0
argument_list|,
operator|new
name|ProjectsByArtifactUsageConstraint
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|toArtifact
argument_list|(
literal|"org.codehaus.plexus:plexus-digest:1.0::jar"
argument_list|)
expr_stmt|;
name|assertConstraint
argument_list|(
literal|2
argument_list|,
operator|new
name|ProjectsByArtifactUsageConstraint
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertConstraint
parameter_list|(
name|int
name|expectedHits
parameter_list|,
name|DeclarativeConstraint
name|constraint
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|results
init|=
name|dao
operator|.
name|getProjectModelDAO
argument_list|()
operator|.
name|queryProjectModels
argument_list|(
name|constraint
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Projects By Artifact Usage: Not Null"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Projects By Artifact Usage: Results.size"
argument_list|,
name|expectedHits
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

