begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|key
operator|.
name|MetadataKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|ibatis
operator|.
name|PlexusIbatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibatis
operator|.
name|sqlmap
operator|.
name|client
operator|.
name|SqlMapClient
import|;
end_import

begin_comment
comment|/**  *   * IbatisMetadataStore   *  * @author<a href="mailto:jmcconnell@apache.com">Jesse McConnell</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.database.MetadataStore" role-hint="ibatis"  */
end_comment

begin_class
specifier|public
class|class
name|IbatisMetadataStore
extends|extends
name|AbstractLogEnabled
implements|implements
name|MetadataStore
implements|,
name|Initializable
block|{
comment|/**      * @plexus.requirement       */
specifier|private
name|PlexusIbatisHelper
name|ibatisHelper
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|Connection
name|con
init|=
name|sqlMap
operator|.
name|getCurrentConnection
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|databaseMetaData
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|databaseMetaData
operator|.
name|getTables
argument_list|(
name|con
operator|.
name|getCatalog
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// check if the index database exists in the database
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
comment|// if it does then we are already initialized
if|if
condition|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MetadataKeys"
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|// Create the tables
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating metadata keys instance table"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"initializeMetadataKeyTable"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating repository metadata instance table"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"initializeRepositoryMetadataTable"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating repository health metadata instance table"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"initializeHealthMetadataTable"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating repository versions metadata instance table"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"initializeVersionsMetadataTable"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while initializing database, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|InitializationException
argument_list|(
literal|"Error while setting up database."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addMetadataKey
parameter_list|(
name|MetadataKey
name|metadataKey
parameter_list|)
throws|throws
name|MetadataStoreException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding metadata key"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"addMetadataKey"
argument_list|,
name|metadataKey
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while adding metadata, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|MetadataStoreException
argument_list|(
literal|"Error while interacting with the database."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

