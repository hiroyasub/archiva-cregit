begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|ibatis
operator|.
name|sqlmap
operator|.
name|client
operator|.
name|SqlMapClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|key
operator|.
name|MetadataKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_comment
comment|/**  * RepositoryMetadataDatabase   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.database.RepositoryMetadataDatabase" role-hint="default"  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryMetadataDatabase
extends|extends
name|AbstractMetadataKeyDatabase
block|{
specifier|public
name|void
name|create
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding repository metadata"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"addRepositoryMetadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while executing statement, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ArchivaDatabaseException
argument_list|(
literal|"Error while executing statement."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|RepositoryMetadata
name|read
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Reading repository metadata"
argument_list|)
expr_stmt|;
name|RepositoryMetadata
name|repositoryMetadata
init|=
operator|(
name|RepositoryMetadata
operator|)
name|sqlMap
operator|.
name|queryForObject
argument_list|(
literal|"getRepositoryMetadata"
argument_list|,
operator|new
name|MetadataKey
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|repositoryMetadata
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while executing statement, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ArchivaDatabaseException
argument_list|(
literal|"Error while executing statement."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * not implemented yet      *       * @param metadata      * @throws ArchivaDatabaseException      */
specifier|public
name|void
name|update
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updating repository metadata"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"updateRepositoryMetadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while executing statement, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ArchivaDatabaseException
argument_list|(
literal|"Error while executing statement."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
comment|// FIXME is this right? baseVersion seems wrong but I don't know enough about the metadata to say
name|delete
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|metadata
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Removing repository metadata"
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
literal|"removeRepositoryMetadata"
argument_list|,
operator|new
name|MetadataKey
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while executing statement, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ArchivaDatabaseException
argument_list|(
literal|"Error while executing statement."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|super
operator|.
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
name|initializeTable
argument_list|(
literal|"RepositoryMetadata"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|ade
parameter_list|)
block|{
throw|throw
operator|new
name|InitializationException
argument_list|(
literal|"unable to initialize repository metadata table"
argument_list|,
name|ade
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

