begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|browsing
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * GroupIdFilter - utility methods for filtering groupIds.   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|GroupIdFilter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_SEPARATOR
init|=
literal|"."
decl_stmt|;
comment|/**      *<p>      * Filter out excessive groupId naming. (to provide a tree-ish view of the list of groupIds).      *</p>      *       *<pre>      *  // Input List      *  commons-lang      *  com.jsch      *  org.apache.apache      *  org.apache.maven      *  org.codehaus.modello      *  // Filtered List      *  commons-lang      *  com.jsch      *  org      *</pre>      *       *<pre>      *  // Input List      *  commons-lang      *  commons-io      *  commons-pool      *  com.jsch      *  com.jsch.lib      *  com.jsch.providers      *  org.apache.apache      *  org.apache.maven      *  org.apache.maven.archiva      *  org.apache.maven.shared      *  // Filtered List      *  commons-lang      *  commons-io      *  commons-pool      *  com.jsch      *  org.apache      *</pre>      *       * @param groups the list of groupIds.      * @return      */
specifier|public
specifier|static
name|List
name|filterGroups
parameter_list|(
name|List
name|groups
parameter_list|)
block|{
name|GroupTreeNode
name|tree
init|=
name|buildGroupTree
argument_list|(
name|groups
argument_list|)
decl_stmt|;
return|return
name|collateGroups
argument_list|(
name|tree
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|GroupTreeNode
name|buildGroupTree
parameter_list|(
name|List
name|groups
parameter_list|)
block|{
name|GroupTreeNode
name|rootNode
init|=
operator|new
name|GroupTreeNode
argument_list|()
decl_stmt|;
comment|// build a tree structure
for|for
control|(
name|Iterator
name|i
init|=
name|groups
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|groupId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|groupId
argument_list|,
name|GROUP_SEPARATOR
argument_list|)
decl_stmt|;
name|GroupTreeNode
name|node
init|=
name|rootNode
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|part
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|containsKey
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|GroupTreeNode
name|newNode
init|=
operator|new
name|GroupTreeNode
argument_list|(
name|part
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|node
operator|=
name|newNode
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rootNode
return|;
block|}
specifier|private
specifier|static
name|List
name|collateGroups
parameter_list|(
name|GroupTreeNode
name|rootNode
parameter_list|)
block|{
name|List
name|groups
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|rootNode
operator|.
name|getChildren
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|node
operator|=
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|groups
operator|.
name|add
argument_list|(
name|node
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
specifier|private
specifier|static
class|class
name|GroupTreeNode
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|fullName
decl_stmt|;
specifier|private
specifier|final
name|Map
name|children
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|GroupTreeNode
parameter_list|()
block|{
name|name
operator|=
literal|null
expr_stmt|;
name|fullName
operator|=
literal|null
expr_stmt|;
block|}
name|GroupTreeNode
parameter_list|(
name|String
name|name
parameter_list|,
name|GroupTreeNode
name|parent
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|parent
operator|.
name|fullName
operator|!=
literal|null
condition|?
name|parent
operator|.
name|fullName
operator|+
name|GROUP_SEPARATOR
operator|+
name|name
else|:
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
specifier|public
name|Map
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|void
name|addChild
parameter_list|(
name|GroupTreeNode
name|newNode
parameter_list|)
block|{
name|children
operator|.
name|put
argument_list|(
name|newNode
operator|.
name|name
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

