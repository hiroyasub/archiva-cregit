begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|ibatis
operator|.
name|sqlmap
operator|.
name|client
operator|.
name|SqlMapClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|ibatis
operator|.
name|PlexusIbatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_comment
comment|/**  * AbstractIbatisStore   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractIbatisStore
extends|extends
name|AbstractLogEnabled
implements|implements
name|Initializable
block|{
comment|/**      * @plexus.requirement       */
specifier|protected
name|PlexusIbatisHelper
name|ibatisHelper
decl_stmt|;
comment|/**      * @plexus.configuration default-value="create"      */
specifier|private
name|String
name|createPrefix
decl_stmt|;
comment|/**      * @plexus.configuration default-value="drop"      */
specifier|private
name|String
name|dropPrefix
decl_stmt|;
specifier|protected
specifier|abstract
name|String
index|[]
name|getTableNames
parameter_list|()
function_decl|;
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
try|try
block|{
name|String
name|tableNames
index|[]
init|=
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tableName
init|=
name|tableNames
index|[
name|i
index|]
decl_stmt|;
name|initializeTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InitializationException
argument_list|(
literal|"Unable to initialize the database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|initializeTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|Connection
name|con
init|=
name|sqlMap
operator|.
name|getCurrentConnection
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|databaseMetaData
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|databaseMetaData
operator|.
name|getTables
argument_list|(
name|con
operator|.
name|getCatalog
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// check if the index database exists in the database
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|dbTableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
comment|// if it does then we are already initialized
if|if
condition|(
name|dbTableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|// Create the tables
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
name|createPrefix
operator|+
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while initializing database, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ArchivaDatabaseException
argument_list|(
literal|"Error while setting up database."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|SqlMapClient
name|sqlMap
init|=
name|ibatisHelper
operator|.
name|getSqlMapClient
argument_list|()
decl_stmt|;
try|try
block|{
name|sqlMap
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Dropping table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|update
argument_list|(
name|dropPrefix
operator|+
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sqlMap
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while dropping database, showing all linked exceptions in SQLException."
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getNextException
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ArchivaDatabaseException
argument_list|(
literal|"Error while dropping database."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|sqlMap
operator|.
name|endTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

