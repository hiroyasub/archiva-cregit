begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|DatabaseScanningConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ArchivaArtifactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|ArtifactsProcessedConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * JdoDatabaseUpdater  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component  */
end_comment

begin_class
specifier|public
class|class
name|JdoDatabaseUpdater
extends|extends
name|AbstractLogEnabled
implements|implements
name|DatabaseUpdater
implements|,
name|RegistryListener
implements|,
name|Initializable
block|{
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
comment|/**      * The collection of available consumers.      * @plexus.requirement role="org.apache.maven.archiva.consumers.ArchivaArtifactConsumer"      */
specifier|private
name|Map
name|availableConsumers
decl_stmt|;
comment|/**      * The list of active consumers for unprocessed content.      */
specifier|private
name|List
name|activeUnprocessedConsumers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The list of active consumers for processed content.      */
specifier|private
name|List
name|activeProcessedConsumers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The list of registry (configuration) property names that will trigger a refresh of the activeConsumers list.      */
specifier|private
name|List
name|propertyNameTriggers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|update
parameter_list|()
throws|throws
name|ArchivaDatabaseException
block|{
name|updateAllUnprocessed
argument_list|()
expr_stmt|;
name|updateAllProcessed
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updateAllUnprocessed
parameter_list|()
throws|throws
name|ArchivaDatabaseException
block|{
name|List
name|unprocessedArtifacts
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|beginConsumerLifecycle
argument_list|(
name|this
operator|.
name|activeUnprocessedConsumers
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Process each consumer.
name|Iterator
name|it
init|=
name|unprocessedArtifacts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifact
name|artifact
init|=
operator|(
name|ArchivaArtifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|isProcessed
argument_list|()
condition|)
block|{
name|updateUnprocessed
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|consumerConsumerLifecycle
argument_list|(
name|this
operator|.
name|activeUnprocessedConsumers
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateAllProcessed
parameter_list|()
throws|throws
name|ArchivaDatabaseException
block|{
name|List
name|processedArtifacts
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|beginConsumerLifecycle
argument_list|(
name|this
operator|.
name|activeProcessedConsumers
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Process each consumer.
name|Iterator
name|it
init|=
name|processedArtifacts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifact
name|artifact
init|=
operator|(
name|ArchivaArtifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|isProcessed
argument_list|()
condition|)
block|{
name|updateProcessed
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|consumerConsumerLifecycle
argument_list|(
name|this
operator|.
name|activeProcessedConsumers
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|consumerConsumerLifecycle
parameter_list|(
name|List
name|consumers
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifactConsumer
name|consumer
init|=
operator|(
name|ArchivaArtifactConsumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|completeScan
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|beginConsumerLifecycle
parameter_list|(
name|List
name|consumers
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifactConsumer
name|consumer
init|=
operator|(
name|ArchivaArtifactConsumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|beginScan
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateUnprocessed
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|activeUnprocessedConsumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifactConsumer
name|consumer
init|=
operator|(
name|ArchivaArtifactConsumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|consumer
operator|.
name|processArchivaArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to consume (unprocessed) artifact: "
operator|+
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setWhenProcessed
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|saveArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateProcessed
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|activeProcessedConsumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifactConsumer
name|consumer
init|=
operator|(
name|ArchivaArtifactConsumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|consumer
operator|.
name|processArchivaArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to consume (processed)  artifact: "
operator|+
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateActiveConsumers
parameter_list|()
block|{
name|this
operator|.
name|activeUnprocessedConsumers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|activeProcessedConsumers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DatabaseScanningConfiguration
name|dbScanning
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDatabaseScanning
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbScanning
operator|==
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"No Database Consumers found!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|activeUnprocessedConsumers
operator|.
name|addAll
argument_list|(
name|getActiveConsumerList
argument_list|(
name|dbScanning
operator|.
name|getUnprocessedConsumers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeProcessedConsumers
operator|.
name|addAll
argument_list|(
name|getActiveConsumerList
argument_list|(
name|dbScanning
operator|.
name|getProcessedConsumers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
name|getActiveConsumerList
parameter_list|(
name|List
name|potentialConsumerList
parameter_list|)
block|{
if|if
condition|(
operator|(
name|potentialConsumerList
operator|==
literal|null
operator|)
operator|||
operator|(
name|potentialConsumerList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|potentialConsumerList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|consumerName
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|availableConsumers
operator|.
name|containsKey
argument_list|(
name|consumerName
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Requested Consumer ["
operator|+
name|consumerName
operator|+
literal|"] does not exist.  Disabling."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|consumerName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|propertyNameTriggers
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"databaseScanning"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"unprocessedConsumers"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"unprocessedConsumer"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"processedConsumers"
argument_list|)
expr_stmt|;
name|propertyNameTriggers
operator|.
name|add
argument_list|(
literal|"processedConsumer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateActiveConsumers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|afterConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|propertyNameTriggers
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|updateActiveConsumers
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|beforeConfigurationChange
parameter_list|(
name|Registry
name|registry
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
comment|/* nothing to do here */
block|}
block|}
end_class

end_unit

