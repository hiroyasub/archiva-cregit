begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|updater
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|IteratorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|NotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
operator|.
name|ArchivaArtifactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|constraints
operator|.
name|ArtifactsProcessedConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|functors
operator|.
name|UnprocessedArtifactPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * JdoDatabaseUpdater  *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.database.updater.DatabaseUpdater"   *   role-hint="jdo"   */
end_comment

begin_class
specifier|public
class|class
name|JdoDatabaseUpdater
extends|extends
name|AbstractLogEnabled
implements|implements
name|DatabaseUpdater
block|{
comment|/**      * @plexus.requirement role-hint="jdo"      */
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|DatabaseConsumers
name|dbConsumers
decl_stmt|;
specifier|private
name|ProcessArchivaArtifactClosure
name|processArtifactClosure
init|=
operator|new
name|ProcessArchivaArtifactClosure
argument_list|()
decl_stmt|;
specifier|public
name|void
name|update
parameter_list|()
throws|throws
name|ArchivaDatabaseException
block|{
name|updateAllUnprocessed
argument_list|()
expr_stmt|;
name|updateAllProcessed
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updateAllUnprocessed
parameter_list|()
throws|throws
name|ArchivaDatabaseException
block|{
name|List
name|unprocessedArtifacts
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|beginConsumerLifecycle
argument_list|(
name|dbConsumers
operator|.
name|getSelectedUnprocessedConsumers
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Process each consumer.
name|Predicate
name|predicate
init|=
name|UnprocessedArtifactPredicate
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|IteratorUtils
operator|.
name|filteredIterator
argument_list|(
name|unprocessedArtifacts
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifact
name|artifact
init|=
operator|(
name|ArchivaArtifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|updateUnprocessed
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|endConsumerLifecycle
argument_list|(
name|dbConsumers
operator|.
name|getSelectedUnprocessedConsumers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateAllProcessed
parameter_list|()
throws|throws
name|ArchivaDatabaseException
block|{
name|List
name|processedArtifacts
init|=
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|queryArtifacts
argument_list|(
operator|new
name|ArtifactsProcessedConstraint
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|beginConsumerLifecycle
argument_list|(
name|dbConsumers
operator|.
name|getSelectedCleanupConsumers
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Process each consumer.
name|Predicate
name|predicate
init|=
name|NotPredicate
operator|.
name|getInstance
argument_list|(
name|UnprocessedArtifactPredicate
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|IteratorUtils
operator|.
name|filteredIterator
argument_list|(
name|processedArtifacts
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifact
name|artifact
init|=
operator|(
name|ArchivaArtifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|updateProcessed
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|endConsumerLifecycle
argument_list|(
name|dbConsumers
operator|.
name|getSelectedCleanupConsumers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|endConsumerLifecycle
parameter_list|(
name|List
name|consumers
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifactConsumer
name|consumer
init|=
operator|(
name|ArchivaArtifactConsumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|completeScan
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|beginConsumerLifecycle
parameter_list|(
name|List
name|consumers
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|consumers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaArtifactConsumer
name|consumer
init|=
operator|(
name|ArchivaArtifactConsumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|beginScan
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateUnprocessed
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|List
name|consumers
init|=
name|dbConsumers
operator|.
name|getSelectedUnprocessedConsumers
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|consumers
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"There are no selected consumers for unprocessed artifacts."
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|processArtifactClosure
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|consumers
argument_list|,
name|this
operator|.
name|processArtifactClosure
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|getModel
argument_list|()
operator|.
name|setWhenProcessed
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|dao
operator|.
name|getArtifactDAO
argument_list|()
operator|.
name|saveArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateProcessed
parameter_list|(
name|ArchivaArtifact
name|artifact
parameter_list|)
throws|throws
name|ArchivaDatabaseException
block|{
name|List
name|consumers
init|=
name|dbConsumers
operator|.
name|getSelectedCleanupConsumers
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|consumers
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"There are no selected consumers for artifact cleanup."
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|processArtifactClosure
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|consumers
argument_list|,
name|this
operator|.
name|processArtifactClosure
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

