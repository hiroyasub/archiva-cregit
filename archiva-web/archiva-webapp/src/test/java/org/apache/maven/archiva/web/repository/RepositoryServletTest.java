begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|repository
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|GetMethodWebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|PutMethodWebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletUnitClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RemoteRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|webdav
operator|.
name|util
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_comment
comment|/**  * RepositoryServletTest   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryServletTest
extends|extends
name|PlexusTestCase
block|{
specifier|private
name|ServletUnitClient
name|sc
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_PATH
init|=
literal|"http://localhost/repository/internal/path/to/artifact.jar"
decl_stmt|;
specifier|private
name|File
name|repositoryLocation
decl_stmt|;
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_ID
init|=
literal|"internal"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_REPOSITORY_ID
init|=
literal|"new-id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_REPOSITORY_NAME
init|=
literal|"New Repository"
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|appserverBase
init|=
name|getTestFile
argument_list|(
literal|"target/appserver-base"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"appserver.base"
argument_list|,
name|appserverBase
argument_list|)
expr_stmt|;
name|File
name|testConf
init|=
name|getTestFile
argument_list|(
literal|"src/test/resources/repository-archiva.xml"
argument_list|)
decl_stmt|;
name|File
name|testConfDest
init|=
operator|new
name|File
argument_list|(
name|appserverBase
argument_list|,
literal|"conf/archiva.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|testConf
argument_list|,
name|testConfDest
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|(
name|ArchivaConfiguration
operator|)
name|lookup
argument_list|(
name|ArchivaConfiguration
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|repositoryLocation
operator|=
operator|new
name|File
argument_list|(
name|appserverBase
argument_list|,
literal|"data/repositories/internal"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addManagedRepository
argument_list|(
name|createManagedRepository
argument_list|(
literal|"internal"
argument_list|,
literal|"Internal Test Repo"
argument_list|,
name|repositoryLocation
argument_list|)
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|()
expr_stmt|;
name|ServletRunner
name|sr
init|=
operator|new
name|ServletRunner
argument_list|()
decl_stmt|;
name|sr
operator|.
name|registerServlet
argument_list|(
literal|"/repository/*"
argument_list|,
name|UnauthenticatedRepositoryServlet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|=
name|sr
operator|.
name|newClient
argument_list|()
expr_stmt|;
name|HttpSession
name|session
init|=
name|sc
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ServletContext
name|servletContext
init|=
name|session
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|PlexusConstants
operator|.
name|PLEXUS_KEY
argument_list|,
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPutWithMissingParentCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repositoryLocation
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|PutMethodWebRequest
argument_list|(
name|REQUEST_PATH
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/artifact.jar"
argument_list|)
argument_list|,
literal|"application/octet-stream"
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file contents"
argument_list|,
literal|"artifact.jar\n"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
literal|"path/to/artifact.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRepositoryAfterDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|removeManagedRepository
argument_list|(
name|c
operator|.
name|findManagedRepositoryById
argument_list|(
name|REPOSITORY_ID
argument_list|)
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|()
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|REPOSITORY_ID
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetRepositoryAfterAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedRepositoryConfiguration
name|repo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|NEW_REPOSITORY_ID
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|NEW_REPOSITORY_NAME
argument_list|)
expr_stmt|;
name|File
name|repoRoot
init|=
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
literal|"target/test-repository-root"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repoRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|repoRoot
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|repo
operator|.
name|setLocation
argument_list|(
name|repoRoot
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addManagedRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|()
expr_stmt|;
name|ManagedRepositoryConfiguration
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|NEW_REPOSITORY_ID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_REPOSITORY_NAME
argument_list|,
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check other is still intact
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBrowse
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
literal|"org/apache/archiva"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
literal|"net/sourceforge"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
literal|"commons-lang"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://machine.com/repository/internal/"
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// dumpResponse( response );
name|WebLink
name|links
index|[]
init|=
name|response
operator|.
name|getLinks
argument_list|()
decl_stmt|;
name|String
name|expectedLinks
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"./commons-lang/"
block|,
literal|"./net/"
block|,
literal|"./org/"
block|,
literal|"./path/"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Links.length"
argument_list|,
name|expectedLinks
operator|.
name|length
argument_list|,
name|links
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|links
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Link["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|expectedLinks
index|[
name|i
index|]
argument_list|,
name|links
index|[
name|i
index|]
operator|.
name|getURLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetNoProxyChecksumDefaultLayout
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
name|String
name|commonsLangSha1
init|=
literal|"commons-lang/commons-lang/2.1/commons-lang-2.1.jar.sha1"
decl_stmt|;
name|File
name|checksumFile
init|=
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
name|commonsLangSha1
argument_list|)
decl_stmt|;
name|checksumFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|checksumFile
argument_list|,
literal|"dummy-checksum"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://machine.com/repository/internal/"
operator|+
name|commonsLangSha1
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response OK"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected file contents"
argument_list|,
literal|"dummy-checksum"
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNoProxyChecksumLegacyLayout
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
name|String
name|commonsLangSha1
init|=
literal|"commons-lang/commons-lang/2.1/commons-lang-2.1.jar.sha1"
decl_stmt|;
name|File
name|checksumFile
init|=
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
name|commonsLangSha1
argument_list|)
decl_stmt|;
name|checksumFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|checksumFile
argument_list|,
literal|"dummy-checksum"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://machine.com/repository/internal/"
operator|+
literal|"commons-lang/jars/commons-lang-2.1.jar.sha1"
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response OK"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected file contents"
argument_list|,
literal|"dummy-checksum"
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNoProxyVersionedMetadataDefaultLayout
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
name|String
name|commonsLangMetadata
init|=
literal|"commons-lang/commons-lang/2.1/maven-metadata.xml"
decl_stmt|;
name|String
name|expectedMetadataContents
init|=
literal|"dummy-versioned-metadata"
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
name|commonsLangMetadata
argument_list|)
decl_stmt|;
name|metadataFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|metadataFile
argument_list|,
name|expectedMetadataContents
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://machine.com/repository/internal/"
operator|+
name|commonsLangMetadata
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response OK"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected file contents"
argument_list|,
name|expectedMetadataContents
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNoProxyProjectMetadataDefaultLayout
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
name|String
name|commonsLangMetadata
init|=
literal|"commons-lang/commons-lang/maven-metadata.xml"
decl_stmt|;
name|String
name|expectedMetadataContents
init|=
literal|"dummy-project-metadata"
decl_stmt|;
name|File
name|metadataFile
init|=
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
name|commonsLangMetadata
argument_list|)
decl_stmt|;
name|metadataFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|metadataFile
argument_list|,
name|expectedMetadataContents
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://machine.com/repository/internal/"
operator|+
name|commonsLangMetadata
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response OK"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected file contents"
argument_list|,
name|expectedMetadataContents
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNoProxyArtifactDefaultLayout
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryServlet
name|servlet
init|=
operator|(
name|RepositoryServlet
operator|)
name|sc
operator|.
name|newInvocation
argument_list|(
name|REQUEST_PATH
argument_list|)
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
name|assertRepositoryValid
argument_list|(
name|servlet
argument_list|,
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
name|String
name|commonsLangJar
init|=
literal|"commons-lang/commons-lang/2.1/commons-lang-2.1.jar"
decl_stmt|;
name|String
name|expectedArtifactContents
init|=
literal|"dummy-commons-lang-artifact"
decl_stmt|;
name|File
name|artifactFile
init|=
operator|new
name|File
argument_list|(
name|repositoryLocation
argument_list|,
name|commonsLangJar
argument_list|)
decl_stmt|;
name|artifactFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|artifactFile
argument_list|,
name|expectedArtifactContents
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|WebRequest
name|request
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
literal|"http://machine.com/repository/internal/"
operator|+
name|commonsLangJar
argument_list|)
decl_stmt|;
name|WebResponse
name|response
init|=
name|sc
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response OK"
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected file contents"
argument_list|,
name|expectedArtifactContents
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMimeTypesAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|MimeTypes
name|mimeTypes
init|=
operator|(
name|MimeTypes
operator|)
name|lookup
argument_list|(
name|MimeTypes
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mimeTypes
argument_list|)
expr_stmt|;
comment|// Test for some added types.
name|assertEquals
argument_list|(
literal|"sha1"
argument_list|,
literal|"text/plain"
argument_list|,
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
literal|"foo.sha1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"md5"
argument_list|,
literal|"text/plain"
argument_list|,
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
literal|"foo.md5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pgp"
argument_list|,
literal|"application/pgp-encrypted"
argument_list|,
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
literal|"foo.pgp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dumpResponse
parameter_list|(
name|WebResponse
name|response
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---(response)---"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|response
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" "
operator|+
name|response
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|headerNames
index|[]
init|=
name|response
operator|.
name|getHeaderFieldNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|headerNames
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[header] "
operator|+
name|headerName
operator|+
literal|": "
operator|+
name|response
operator|.
name|getHeaderField
argument_list|(
name|headerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---(text)---"
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"[Exception] : "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertRepositoryValid
parameter_list|(
name|RepositoryServlet
name|servlet
parameter_list|,
name|String
name|repoId
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repository
init|=
name|servlet
operator|.
name|getRepository
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Archiva Managed Repository id:<"
operator|+
name|repoId
operator|+
literal|"> should exist."
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|File
name|repoRoot
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Archiva Managed Repository id:<"
operator|+
name|repoId
operator|+
literal|"> should have a valid location on disk."
argument_list|,
name|repoRoot
operator|.
name|exists
argument_list|()
operator|&&
name|repoRoot
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|saveConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|save
argument_list|(
name|configuration
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO it would be better to use a mock configuration and "save" to more accurately reflect the calls made
comment|// RepositoryServlet servlet
comment|// servlet.configurationEvent( new ConfigurationEvent( ConfigurationEvent.SAVED ) );
block|}
specifier|private
name|ManagedRepositoryConfiguration
name|createManagedRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|location
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|repo
init|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setLocation
argument_list|(
name|location
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
name|RemoteRepositoryConfiguration
name|createRemoteRepository
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|RemoteRepositoryConfiguration
name|repo
init|=
operator|new
name|RemoteRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repo
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
block|}
end_class

end_unit

