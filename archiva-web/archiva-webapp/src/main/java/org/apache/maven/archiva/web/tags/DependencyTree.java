begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|tags
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|DependencyGraphFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|DependencyGraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|GraphTaskException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|BaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|DependencyGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|dependency
operator|.
name|graph
operator|.
name|walk
operator|.
name|WalkDepthFirstSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|DependencyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|VersionedReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|PageContext
import|;
end_import

begin_comment
comment|/**  * DependencyTree   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.web.tags.DependencyTree"   */
end_comment

begin_class
specifier|public
class|class
name|DependencyTree
extends|extends
name|AbstractLogEnabled
implements|implements
name|Initializable
block|{
comment|/**      * @plexus.requirement      *              role="org.apache.maven.archiva.dependency.graph.DependencyGraphBuilder"      *              role-hint="project-model"      */
specifier|private
name|DependencyGraphBuilder
name|graphBuilder
decl_stmt|;
specifier|private
name|DependencyGraphFactory
name|graphFactory
init|=
operator|new
name|DependencyGraphFactory
argument_list|()
decl_stmt|;
specifier|public
class|class
name|TreeEntry
block|{
specifier|private
name|String
name|pre
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|post
init|=
literal|""
decl_stmt|;
specifier|private
name|ArtifactReference
name|artifact
decl_stmt|;
specifier|public
name|void
name|setArtifact
parameter_list|(
name|ArtifactReference
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|public
name|ArtifactReference
name|getArtifact
parameter_list|()
block|{
return|return
name|artifact
return|;
block|}
specifier|public
name|String
name|getPost
parameter_list|()
block|{
return|return
name|post
return|;
block|}
specifier|public
name|void
name|setPost
parameter_list|(
name|String
name|post
parameter_list|)
block|{
name|this
operator|.
name|post
operator|=
name|post
expr_stmt|;
block|}
specifier|public
name|String
name|getPre
parameter_list|()
block|{
return|return
name|pre
return|;
block|}
specifier|public
name|void
name|setPre
parameter_list|(
name|String
name|pre
parameter_list|)
block|{
name|this
operator|.
name|pre
operator|=
name|pre
expr_stmt|;
block|}
specifier|public
name|void
name|appendPre
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|pre
operator|+=
name|string
expr_stmt|;
block|}
specifier|public
name|void
name|appendPost
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|post
operator|+=
name|string
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|gatherTreeList
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|modelVersion
parameter_list|,
name|String
name|nodevar
parameter_list|,
name|PageContext
name|pageContext
parameter_list|)
throws|throws
name|JspException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
name|String
name|emsg
init|=
literal|"Error generating dependency tree: groupId is blank."
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|emsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JspException
argument_list|(
name|emsg
argument_list|)
throw|;
block|}
name|DependencyGraph
name|graph
init|=
name|fetchGraph
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|modelVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|graph
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Graph is null."
argument_list|)
throw|;
block|}
name|TreeListVisitor
name|treeListVisitor
init|=
operator|new
name|TreeListVisitor
argument_list|()
decl_stmt|;
name|DependencyGraphWalker
name|walker
init|=
operator|new
name|WalkDepthFirstSearch
argument_list|()
decl_stmt|;
name|walker
operator|.
name|visit
argument_list|(
name|graph
argument_list|,
name|treeListVisitor
argument_list|)
expr_stmt|;
return|return
name|treeListVisitor
operator|.
name|getList
argument_list|()
return|;
block|}
class|class
name|TreeListVisitor
extends|extends
name|BaseVisitor
block|{
specifier|private
name|List
name|list
decl_stmt|;
specifier|private
name|int
name|walkDepth
decl_stmt|;
specifier|private
name|int
name|outputDepth
decl_stmt|;
specifier|private
name|Stack
name|entryStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|TreeEntry
name|currentEntry
decl_stmt|;
specifier|public
name|TreeListVisitor
parameter_list|()
block|{
name|this
operator|.
name|list
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
name|getList
parameter_list|()
block|{
return|return
name|this
operator|.
name|list
return|;
block|}
specifier|public
name|void
name|discoverGraph
parameter_list|(
name|DependencyGraph
name|graph
parameter_list|)
block|{
name|super
operator|.
name|discoverGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|this
operator|.
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|entryStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|walkDepth
operator|=
literal|0
expr_stmt|;
name|outputDepth
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|discoverNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|super
operator|.
name|discoverNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentEntry
operator|=
operator|new
name|TreeEntry
argument_list|()
expr_stmt|;
while|while
condition|(
name|walkDepth
operator|>
name|outputDepth
condition|)
block|{
name|currentEntry
operator|.
name|appendPre
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
name|outputDepth
operator|++
expr_stmt|;
block|}
name|currentEntry
operator|.
name|appendPre
argument_list|(
literal|"<li>"
argument_list|)
expr_stmt|;
name|currentEntry
operator|.
name|setArtifact
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|currentEntry
operator|.
name|appendPost
argument_list|(
literal|"</li>"
argument_list|)
expr_stmt|;
name|this
operator|.
name|list
operator|.
name|add
argument_list|(
name|currentEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|entryStack
operator|.
name|push
argument_list|(
name|currentEntry
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finishNode
parameter_list|(
name|DependencyGraphNode
name|node
parameter_list|)
block|{
name|super
operator|.
name|finishNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
while|while
condition|(
name|walkDepth
operator|<
name|outputDepth
condition|)
block|{
name|currentEntry
operator|.
name|appendPost
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|outputDepth
operator|--
expr_stmt|;
block|}
name|this
operator|.
name|entryStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|discoverEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
name|super
operator|.
name|discoverEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|walkDepth
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|finishEdge
parameter_list|(
name|DependencyGraphEdge
name|edge
parameter_list|)
block|{
name|super
operator|.
name|finishEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|walkDepth
operator|--
expr_stmt|;
block|}
block|}
specifier|private
name|DependencyGraph
name|fetchGraph
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|modelVersion
parameter_list|)
block|{
comment|// TODO Cache the results to disk, in XML format, in the same place as the artifact is located.
name|VersionedReference
name|projectRef
init|=
operator|new
name|VersionedReference
argument_list|()
decl_stmt|;
name|projectRef
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|projectRef
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|projectRef
operator|.
name|setVersion
argument_list|(
name|modelVersion
argument_list|)
expr_stmt|;
try|try
block|{
name|DependencyGraph
name|depGraph
init|=
name|graphFactory
operator|.
name|getGraph
argument_list|(
name|projectRef
argument_list|)
decl_stmt|;
return|return
name|depGraph
return|;
block|}
catch|catch
parameter_list|(
name|GraphTaskException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to get Graph: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|this
operator|.
name|graphFactory
operator|.
name|setGraphBuilder
argument_list|(
name|graphBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|graphFactory
operator|.
name|setDesiredScope
argument_list|(
name|DependencyScope
operator|.
name|TEST
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

