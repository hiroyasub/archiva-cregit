begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|check
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|rbac
operator|.
name|profile
operator|.
name|RoleProfileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|rbac
operator|.
name|profile
operator|.
name|RoleProfileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|system
operator|.
name|check
operator|.
name|EnvironmentCheck
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * RoleExistanceEnvironmentCheck:  *<p/>  * Under certain circumstances it is possible that the user store and/or role store  * have been wiped or reset and its important to see if there are repositories already  * configured in archiva that need to reinitialized in terms of having their roles created.  *  * @author: Jesse McConnell<jmcconnell@apache.org>  * @version: $ID:  * @plexus.component role="org.codehaus.plexus.security.system.check.EnvironmentCheck"  * role-hint="repository-role-check"  */
end_comment

begin_class
specifier|public
class|class
name|RoleExistanceEnvironmentCheck
extends|extends
name|AbstractLogEnabled
implements|implements
name|EnvironmentCheck
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="archiva"      */
specifier|private
name|RoleProfileManager
name|roleProfileManager
decl_stmt|;
specifier|private
name|boolean
name|checked
decl_stmt|;
specifier|public
name|void
name|validateEnvironment
parameter_list|(
name|List
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checked
condition|)
block|{
try|try
block|{
name|List
name|repos
init|=
name|dao
operator|.
name|getRepositoryDAO
argument_list|()
operator|.
name|getRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasManagedRepository
argument_list|(
name|repos
argument_list|)
condition|)
block|{
name|Iterator
name|it
init|=
name|repos
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryConfiguration
name|repository
init|=
operator|(
name|RepositoryConfiguration
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|roleProfileManager
operator|.
name|getDynamicRole
argument_list|(
literal|"archiva-repository-manager"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|roleProfileManager
operator|.
name|getDynamicRole
argument_list|(
literal|"archiva-repository-observer"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RoleProfileException
name|rpe
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"error initializing roles: "
operator|+
name|rpe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"error initializing roles"
argument_list|,
name|rpe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"error initializing roles (repository not found): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"error initializing roles"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaDatabaseException
name|e
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"error initializing roles (database error): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"error initializing roles"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|checked
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasManagedRepository
parameter_list|(
name|List
name|repos
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|repos
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaRepository
name|repo
init|=
operator|(
name|ArchivaRepository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isManaged
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

