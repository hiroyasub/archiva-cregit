begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|InvalidConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|role
operator|.
name|RoleManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|scheduler
operator|.
name|CronExpressionValidator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Configures the application repositories.  *  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="configureRepositoryAction"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigureRepositoryAction
extends|extends
name|AbstractConfigureRepositoryAction
implements|implements
name|Preparable
block|{
comment|/**      * The model for this action.      */
specifier|private
name|ManagedRepositoryConfiguration
name|repository
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|protected
name|RoleManager
name|roleManager
decl_stmt|;
specifier|public
name|String
name|add
parameter_list|()
block|{
name|this
operator|.
name|mode
operator|=
literal|"add"
expr_stmt|;
name|this
operator|.
name|repository
operator|.
name|setReleases
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|repository
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|delete
parameter_list|()
block|{
name|String
name|result
init|=
name|SUCCESS
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|mode
argument_list|,
literal|"delete-entry"
argument_list|)
operator|||
name|StringUtils
operator|.
name|equals
argument_list|(
name|mode
argument_list|,
literal|"delete-contents"
argument_list|)
condition|)
block|{
name|ManagedRepositoryConfiguration
name|existingRepository
init|=
name|repository
decl_stmt|;
if|if
condition|(
name|existingRepository
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"A repository with that id does not exist"
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
comment|// TODO: remove from index too!
try|try
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|removeRepository
argument_list|(
name|repoid
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|result
operator|=
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|equals
argument_list|(
name|SUCCESS
argument_list|)
condition|)
block|{
name|removeRepositoryRoles
argument_list|(
name|existingRepository
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|mode
argument_list|,
literal|"delete-contents"
argument_list|)
condition|)
block|{
name|removeContents
argument_list|(
name|existingRepository
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Unable to delete repository: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Unable to delete repository: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidConfigurationException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Unable to delete repository: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Unable to delete repository: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|ManagedRepositoryConfiguration
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|()
block|{
name|String
name|id
init|=
name|repoid
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|repository
operator|=
operator|new
name|ManagedRepositoryConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|repository
operator|.
name|setReleases
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|repository
operator|.
name|setIndexed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repository
operator|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findManagedRepositoryById
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|save
parameter_list|()
block|{
name|String
name|repoId
init|=
name|repository
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|containsError
init|=
name|validateFields
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|containsError
operator|&&
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"add"
argument_list|,
name|mode
argument_list|)
condition|)
block|{
return|return
name|INPUT
return|;
block|}
if|else if
condition|(
name|containsError
operator|&&
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|,
name|this
operator|.
name|mode
argument_list|)
condition|)
block|{
return|return
name|ERROR
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|,
name|this
operator|.
name|mode
argument_list|)
condition|)
block|{
name|removeRepository
argument_list|(
name|repoId
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
name|String
name|result
decl_stmt|;
try|try
block|{
name|addRepository
argument_list|(
name|repository
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|result
operator|=
name|saveConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"I/O Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RoleManagerException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Role Manager Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidConfigurationException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Invalid Configuration Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Configuration Registry Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|INPUT
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|validateFields
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|boolean
name|containsError
init|=
literal|false
decl_stmt|;
name|CronExpressionValidator
name|validator
init|=
operator|new
name|CronExpressionValidator
argument_list|()
decl_stmt|;
name|String
name|repoId
init|=
name|repository
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"repository.id"
argument_list|,
literal|"You must enter a repository identifier."
argument_list|)
expr_stmt|;
name|containsError
operator|=
literal|true
expr_stmt|;
block|}
comment|//if edit mode, do not validate existence of repoId
if|else if
condition|(
operator|(
name|config
operator|.
name|getManagedRepositoriesAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoId
argument_list|)
operator|||
name|config
operator|.
name|getRemoteRepositoriesAsMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|repoId
argument_list|)
operator|)
operator|&&
operator|!
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|mode
argument_list|,
literal|"edit"
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"repository.id"
argument_list|,
literal|"Unable to add new repository with id ["
operator|+
name|repoId
operator|+
literal|"], that id already exists."
argument_list|)
expr_stmt|;
name|containsError
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"repository.location"
argument_list|,
literal|"You must enter a directory."
argument_list|)
expr_stmt|;
name|containsError
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"repository.name"
argument_list|,
literal|"You must enter a repository name."
argument_list|)
expr_stmt|;
name|containsError
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validator
operator|.
name|validate
argument_list|(
name|repository
operator|.
name|getRefreshCronExpression
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"repository.refreshCronExpression"
argument_list|,
literal|"Invalid cron expression."
argument_list|)
expr_stmt|;
name|containsError
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|containsError
return|;
block|}
specifier|private
name|void
name|addRepository
parameter_list|(
name|ManagedRepositoryConfiguration
name|repository
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
throws|,
name|RoleManagerException
block|{
comment|// Normalize the path
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// TODO: error handling when this fails, or is not a directory!
block|}
name|configuration
operator|.
name|addManagedRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
comment|// TODO: double check these are configured on start up
comment|// TODO: belongs in the business logic
name|roleManager
operator|.
name|createTemplatedRole
argument_list|(
literal|"archiva-repository-manager"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|roleManager
operator|.
name|createTemplatedRole
argument_list|(
literal|"archiva-repository-observer"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeContents
parameter_list|(
name|ManagedRepositoryConfiguration
name|existingRepository
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|existingRepository
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeRepository
parameter_list|(
name|String
name|repoId
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|ManagedRepositoryConfiguration
name|toremove
init|=
name|configuration
operator|.
name|findManagedRepositoryById
argument_list|(
name|repoId
argument_list|)
decl_stmt|;
if|if
condition|(
name|toremove
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeManagedRepository
argument_list|(
name|toremove
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeRepositoryRoles
parameter_list|(
name|ManagedRepositoryConfiguration
name|existingRepository
parameter_list|)
throws|throws
name|RoleManagerException
block|{
name|roleManager
operator|.
name|removeTemplatedRole
argument_list|(
literal|"archiva-repository-manager"
argument_list|,
name|existingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|roleManager
operator|.
name|removeTemplatedRole
argument_list|(
literal|"archiva-repository-observer"
argument_list|,
name|existingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"removed user roles associated with repository "
operator|+
name|existingRepository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRoleManager
parameter_list|(
name|RoleManager
name|roleManager
parameter_list|)
block|{
name|this
operator|.
name|roleManager
operator|=
name|roleManager
expr_stmt|;
block|}
block|}
end_class

end_unit

