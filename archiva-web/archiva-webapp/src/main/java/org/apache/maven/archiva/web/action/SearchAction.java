begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|CrossRepositorySearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|SearchResultLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|search
operator|.
name|SearchResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_comment
comment|/**  * Search all indexed fields by the given criteria.  *  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="searchAction"  */
end_comment

begin_class
specifier|public
class|class
name|SearchAction
extends|extends
name|PlexusActionSupport
block|{
comment|/**      * Query string.      */
specifier|private
name|String
name|q
decl_stmt|;
comment|/**      * The Search Results.      */
specifier|private
name|SearchResults
name|results
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|private
name|CrossRepositorySearch
name|crossRepoSearch
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESULTS
init|=
literal|"results"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACT
init|=
literal|"artifact"
decl_stmt|;
specifier|public
name|String
name|quickSearch
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|RepositoryIndexException
throws|,
name|RepositoryIndexSearchException
block|{
comment|/* TODO: give action message if indexing is in progress.          * This should be based off a count of 'unprocessed' artifacts.          * This (yet to be written) routine could tell the user that X (unprocessed) artifacts are not yet           * present in the full text search.          */
assert|assert
name|q
operator|!=
literal|null
operator|&&
name|q
operator|.
name|length
argument_list|()
operator|!=
literal|0
assert|;
name|SearchResultLimits
name|limits
init|=
operator|new
name|SearchResultLimits
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|results
operator|=
name|crossRepoSearch
operator|.
name|searchForTerm
argument_list|(
name|q
argument_list|,
name|limits
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"No results found"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
comment|// TODO: filter / combine the artifacts by version? (is that even possible with non-artifact hits?)
comment|/* I don't think that we should, as I expect us to utilize the 'score' system in lucene in           * the future to return relevant links better.          * I expect the lucene scoring system to take multiple hits on different areas of a single document          * to result in a higher score.           *   - Joakim          */
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|findArtifact
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: give action message if indexing is in progress
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to search for a blank checksum"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|SearchResultLimits
name|limits
init|=
operator|new
name|SearchResultLimits
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|results
operator|=
name|crossRepoSearch
operator|.
name|searchForChecksum
argument_list|(
name|q
argument_list|,
name|limits
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
literal|"No results found"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
if|if
condition|(
name|results
operator|.
name|getHits
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// 1 hit? return it's information directly!
return|return
name|ARTIFACT
return|;
block|}
else|else
block|{
return|return
name|RESULTS
return|;
block|}
block|}
specifier|public
name|String
name|doInput
parameter_list|()
block|{
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|getQ
parameter_list|()
block|{
return|return
name|q
return|;
block|}
specifier|public
name|void
name|setQ
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
block|}
specifier|public
name|SearchResults
name|getResults
parameter_list|()
block|{
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

