begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|connectors
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|repositories
operator|.
name|AdminRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|xwork
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|xwork
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|xwork
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * ProxyConnectorsAction   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="com.opensymphony.xwork.Action" role-hint="proxyConnectorsAction"  */
end_comment

begin_class
specifier|public
class|class
name|ProxyConnectorsAction
extends|extends
name|PlexusActionSupport
implements|implements
name|SecureAction
implements|,
name|Preparable
block|{
comment|/**      * @plexus.requirement role-hint="adminrepoconfig"      */
specifier|private
name|Transformer
name|repoConfigToAdmin
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
specifier|private
name|Map
comment|/*<String,AdminRepositoryConfiguration>*/
name|repoMap
decl_stmt|;
comment|/**      * Map of Proxy Connectors.      */
specifier|private
name|Map
comment|/*<String,AdminProxyConnector>*/
name|proxyConnectorMap
decl_stmt|;
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|repoMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Closure
name|addToRepoMap
init|=
operator|new
name|Closure
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|RepositoryConfiguration
condition|)
block|{
name|AdminRepositoryConfiguration
name|arepo
init|=
operator|(
name|AdminRepositoryConfiguration
operator|)
name|repoConfigToAdmin
operator|.
name|transform
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|repoMap
operator|.
name|put
argument_list|(
name|arepo
operator|.
name|getId
argument_list|()
argument_list|,
name|arepo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|config
operator|.
name|getRepositories
argument_list|()
argument_list|,
name|addToRepoMap
argument_list|)
expr_stmt|;
name|proxyConnectorMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Closure
name|addToProxyConnectorMap
init|=
operator|new
name|Closure
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|ProxyConnectorConfiguration
condition|)
block|{
name|ProxyConnectorConfiguration
name|proxyConfig
init|=
operator|(
name|ProxyConnectorConfiguration
operator|)
name|input
decl_stmt|;
name|String
name|key
init|=
name|proxyConfig
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
name|List
name|connectors
init|=
operator|(
name|List
operator|)
name|proxyConnectorMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectors
operator|==
literal|null
condition|)
block|{
name|connectors
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|proxyConnectorMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|connectors
argument_list|)
expr_stmt|;
block|}
name|connectors
operator|.
name|add
argument_list|(
name|proxyConfig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|config
operator|.
name|getProxyConnectors
argument_list|()
argument_list|,
name|addToProxyConnectorMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setRequiresAuthentication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
argument_list|,
name|Resource
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|public
name|Map
name|getRepoMap
parameter_list|()
block|{
return|return
name|repoMap
return|;
block|}
specifier|public
name|void
name|setRepoMap
parameter_list|(
name|Map
name|repoMap
parameter_list|)
block|{
name|this
operator|.
name|repoMap
operator|=
name|repoMap
expr_stmt|;
block|}
specifier|public
name|Map
name|getProxyConnectorMap
parameter_list|()
block|{
return|return
name|proxyConnectorMap
return|;
block|}
specifier|public
name|void
name|setProxyConnectorMap
parameter_list|(
name|Map
name|proxyConnectorMap
parameter_list|)
block|{
name|this
operator|.
name|proxyConnectorMap
operator|=
name|proxyConnectorMap
expr_stmt|;
block|}
block|}
end_class

end_unit

