begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|tags
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|component
operator|.
name|repository
operator|.
name|exception
operator|.
name|ComponentLookupException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|tagext
operator|.
name|TagSupport
import|;
end_import

begin_comment
comment|/**  * CopyPasteSnippetTag   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|CopyPasteSnippetTag
extends|extends
name|TagSupport
block|{
specifier|private
name|Object
name|object
decl_stmt|;
specifier|public
name|void
name|release
parameter_list|()
block|{
name|object
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|doEndTag
parameter_list|()
throws|throws
name|JspException
block|{
name|CopyPasteSnippet
name|snippet
decl_stmt|;
try|try
block|{
name|snippet
operator|=
operator|(
name|CopyPasteSnippet
operator|)
name|PlexusTagUtil
operator|.
name|lookup
argument_list|(
name|pageContext
argument_list|,
name|CopyPasteSnippet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ComponentLookupException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Unable to lookup CopyPasteSnippet: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|snippet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Unable to process snippet.  Component not found."
argument_list|)
throw|;
block|}
name|snippet
operator|.
name|write
argument_list|(
name|object
argument_list|,
name|pageContext
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|doEndTag
argument_list|()
return|;
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
block|}
end_class

end_unit

