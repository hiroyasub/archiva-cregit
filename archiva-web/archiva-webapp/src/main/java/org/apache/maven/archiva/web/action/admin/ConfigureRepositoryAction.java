begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ModelDriven
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|InvalidConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|models
operator|.
name|AdminRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|rbac
operator|.
name|profile
operator|.
name|RoleProfileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|rbac
operator|.
name|profile
operator|.
name|RoleProfileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|rbac
operator|.
name|RbacManagerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Configures the application repositories.  *  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="configureRepositoryAction"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigureRepositoryAction
extends|extends
name|PlexusActionSupport
implements|implements
name|ModelDriven
implements|,
name|Preparable
implements|,
name|SecureAction
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="archiva"      */
specifier|private
name|RoleProfileManager
name|roleProfileManager
decl_stmt|;
comment|/**      * The repository.      */
specifier|private
name|AdminRepositoryConfiguration
name|repository
decl_stmt|;
comment|/**      * The repository ID to lookup when editing a repository.      */
specifier|private
name|String
name|repoId
decl_stmt|;
comment|/**      * The previously read configuration.      */
specifier|private
name|Configuration
name|configuration
decl_stmt|;
specifier|public
name|String
name|add
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidConfigurationException
throws|,
name|RbacManagerException
throws|,
name|RoleProfileException
throws|,
name|RegistryException
block|{
comment|// TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".add()"
argument_list|)
expr_stmt|;
name|AdminRepositoryConfiguration
name|existingRepository
init|=
name|getRepository
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingRepository
operator|!=
literal|null
condition|)
block|{
name|addFieldError
argument_list|(
literal|"id"
argument_list|,
literal|"A repository with that id already exists"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
return|return
name|saveConfiguration
argument_list|()
return|;
block|}
specifier|public
name|String
name|edit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidConfigurationException
throws|,
name|RbacManagerException
throws|,
name|RoleProfileException
throws|,
name|RegistryException
block|{
comment|// TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".edit()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"id"
argument_list|,
literal|"A repository with a blank id cannot be editted."
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
name|removeRepository
argument_list|(
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|addRepository
argument_list|()
expr_stmt|;
return|return
name|saveConfiguration
argument_list|()
return|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
specifier|public
name|Object
name|getModel
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".getModel()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepository
argument_list|()
expr_stmt|;
block|}
return|return
name|repository
return|;
block|}
specifier|public
name|String
name|getRepoId
parameter_list|()
block|{
return|return
name|repoId
return|;
block|}
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setRequiresAuthentication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRepoId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: this is not right. It needs to change based on method. But is this really the right way to restrict this area?
comment|// TODO: not right. We only care about this permission on managed repositories. Otherwise, it's configuration
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_EDIT_REPOSITORY
argument_list|,
name|getRepoId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
argument_list|,
name|Resource
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
block|}
return|return
name|bundle
return|;
block|}
specifier|public
name|String
name|input
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".input()"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|doDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".doDefault()"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|doDefault
argument_list|()
return|;
block|}
specifier|public
name|String
name|doInput
parameter_list|()
throws|throws
name|Exception
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".doInput()"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|doInput
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".validate()"
argument_list|)
expr_stmt|;
comment|// super.validate();
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".execute()"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|execute
argument_list|()
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".prepare()"
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|getRepository
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepository
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setRepoId
parameter_list|(
name|String
name|repoId
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|repoId
expr_stmt|;
block|}
specifier|private
name|void
name|addRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|RoleProfileException
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".addRepository()"
argument_list|)
expr_stmt|;
name|AdminRepositoryConfiguration
name|repository
init|=
operator|(
name|AdminRepositoryConfiguration
operator|)
name|getRepository
argument_list|()
decl_stmt|;
if|if
condition|(
name|repository
operator|.
name|isManaged
argument_list|()
condition|)
block|{
comment|// Normalize the path
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setDirectory
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// TODO: error handling when this fails, or is not a directory!
block|}
block|}
name|configuration
operator|.
name|addRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
comment|// TODO: double check these are configured on start up
name|roleProfileManager
operator|.
name|getDynamicRole
argument_list|(
literal|"archiva-repository-manager"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|roleProfileManager
operator|.
name|getDynamicRole
argument_list|(
literal|"archiva-repository-observer"
argument_list|,
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AdminRepositoryConfiguration
name|createRepository
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".createRepository()"
argument_list|)
expr_stmt|;
name|AdminRepositoryConfiguration
name|repository
init|=
operator|new
name|AdminRepositoryConfiguration
argument_list|()
decl_stmt|;
name|repository
operator|.
name|setIndexed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
specifier|private
name|AdminRepositoryConfiguration
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|private
name|AdminRepositoryConfiguration
name|getRepository
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".getRepository("
operator|+
name|id
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|RepositoryConfiguration
name|repoconfig
init|=
name|configuration
operator|.
name|findRepositoryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoconfig
operator|==
literal|null
condition|)
block|{
return|return
name|createRepository
argument_list|()
return|;
block|}
return|return
operator|new
name|AdminRepositoryConfiguration
argument_list|(
name|repoconfig
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|removeRepository
parameter_list|(
name|RepositoryConfiguration
name|existingRepository
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".removeRepository()"
argument_list|)
expr_stmt|;
name|RepositoryConfiguration
name|toremove
init|=
name|configuration
operator|.
name|findRepositoryById
argument_list|(
name|existingRepository
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toremove
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|removeRepository
argument_list|(
name|toremove
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|saveConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidConfigurationException
throws|,
name|RbacManagerException
throws|,
name|RoleProfileException
throws|,
name|RegistryException
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".saveConfiguration()"
argument_list|)
expr_stmt|;
name|addRepository
argument_list|()
expr_stmt|;
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// TODO: do we need to check if indexing is needed?
name|addActionMessage
argument_list|(
literal|"Successfully saved configuration"
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
block|}
end_class

end_unit

