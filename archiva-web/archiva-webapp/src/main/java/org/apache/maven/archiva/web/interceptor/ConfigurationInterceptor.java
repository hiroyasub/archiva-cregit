begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|interceptor
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionInvocation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|database
operator|.
name|ArchivaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An interceptor that makes the application configuration available  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  * @plexus.component role="com.opensymphony.xwork.interceptor.Interceptor"  * role-hint="configurationInterceptor"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationInterceptor
extends|extends
name|AbstractLogEnabled
implements|implements
name|Interceptor
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaDAO
name|dao
decl_stmt|;
comment|/**      * @param actionInvocation      * @return      * @throws Exception      */
specifier|public
name|String
name|intercept
parameter_list|(
name|ActionInvocation
name|actionInvocation
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|repos
init|=
name|dao
operator|.
name|getRepositoryDAO
argument_list|()
operator|.
name|getRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasManagedRepository
argument_list|(
name|repos
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"No repositories exist - forwarding to repository configuration page"
argument_list|)
expr_stmt|;
return|return
literal|"config-repository-needed"
return|;
block|}
else|else
block|{
return|return
name|actionInvocation
operator|.
name|invoke
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|// This space left intentionally blank
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|// This space left intentionally blank
block|}
specifier|public
name|boolean
name|hasManagedRepository
parameter_list|(
name|List
name|repos
parameter_list|)
block|{
if|if
condition|(
name|repos
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|repos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
name|it
init|=
name|repos
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArchivaRepository
name|repo
init|=
operator|(
name|ArchivaRepository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isManaged
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

