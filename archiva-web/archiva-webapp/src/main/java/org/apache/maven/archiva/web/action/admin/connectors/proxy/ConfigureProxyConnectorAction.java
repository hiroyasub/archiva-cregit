begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
operator|.
name|admin
operator|.
name|connectors
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Preparable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Validateable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|IfClosure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|functors
operator|.
name|NotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|InvalidConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|NetworkProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ProxyConnectorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|util
operator|.
name|ProxyConnectorSelectionPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|util
operator|.
name|RemoteRepositoryPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|util
operator|.
name|RepositoryIdListClosure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|policies
operator|.
name|DownloadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaRoleConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|registry
operator|.
name|RegistryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|rbac
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureActionBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|security
operator|.
name|ui
operator|.
name|web
operator|.
name|interceptor
operator|.
name|SecureActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * ConfigureProxyConnectorAction   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="com.opensymphony.xwork.Action" role-hint="configureProxyConnectorAction"  */
end_comment

begin_class
specifier|public
class|class
name|ConfigureProxyConnectorAction
extends|extends
name|PlexusActionSupport
implements|implements
name|SecureAction
implements|,
name|Preparable
implements|,
name|Validateable
implements|,
name|Initializable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_CONNECTION
init|=
literal|"(direct connection)"
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.policies.PreDownloadPolicy"      */
specifier|private
name|Map
name|preDownloadPolicyMap
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.policies.PostDownloadPolicy"      */
specifier|private
name|Map
name|postDownloadPolicyMap
decl_stmt|;
comment|/**      * The model for this action.      */
specifier|private
name|ProxyConnectorConfiguration
name|connector
decl_stmt|;
specifier|private
name|Map
name|policyMap
decl_stmt|;
specifier|private
name|String
name|source
decl_stmt|;
specifier|private
name|String
name|target
decl_stmt|;
specifier|private
name|String
name|mode
decl_stmt|;
specifier|private
name|String
name|propertyKey
decl_stmt|;
specifier|private
name|String
name|propertyValue
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
comment|/**      * The list of possible proxy ids.       */
specifier|private
name|List
name|proxyIdOptions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The list of local repository ids.      */
specifier|private
name|List
name|localRepoIdList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The list of remote repository ids.      */
specifier|private
name|List
name|remoteRepoIdList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The blacklist pattern to add.      */
specifier|private
name|String
name|blackListPattern
decl_stmt|;
comment|/**      * The whitelist pattern to add.      */
specifier|private
name|String
name|whiteListPattern
decl_stmt|;
specifier|public
name|String
name|add
parameter_list|()
block|{
name|this
operator|.
name|mode
operator|=
literal|"add"
expr_stmt|;
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|confirm
parameter_list|()
block|{
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|delete
parameter_list|()
block|{
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|addProperty
parameter_list|()
block|{
name|String
name|key
init|=
name|getPropertyKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|getPropertyValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to add property with blank key."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to add property with blank value."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasActionErrors
argument_list|()
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|setPropertyKey
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setPropertyValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|removeProperty
parameter_list|()
block|{
name|String
name|key
init|=
name|getPropertyKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Unable to remove property with blank key."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasActionErrors
argument_list|()
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|setPropertyKey
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setPropertyValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|addWhiteListPattern
parameter_list|()
block|{
name|String
name|pattern
init|=
name|getWhiteListPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Cannot add an blank white list pattern."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasActionErrors
argument_list|()
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|getWhiteListPatterns
argument_list|()
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|setWhiteListPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|removeWhiteListPattern
parameter_list|()
block|{
name|String
name|pattern
init|=
name|getPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Cannot remove an blank white list pattern."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasActionErrors
argument_list|()
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|getWhiteListPatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|setWhiteListPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|addBlackListPattern
parameter_list|()
block|{
name|String
name|pattern
init|=
name|getBlackListPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Cannot add an blank black list pattern."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasActionErrors
argument_list|()
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|getBlackListPatterns
argument_list|()
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|setBlackListPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|removeBlackListPattern
parameter_list|()
block|{
name|String
name|pattern
init|=
name|getBlackListPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Cannot remove an blank black list pattern."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasActionErrors
argument_list|()
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|getBlackListPatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|setBlackListPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|edit
parameter_list|()
block|{
name|this
operator|.
name|mode
operator|=
literal|"edit"
expr_stmt|;
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|getBlackListPattern
parameter_list|()
block|{
return|return
name|blackListPattern
return|;
block|}
specifier|public
name|ProxyConnectorConfiguration
name|getConnector
parameter_list|()
block|{
return|return
name|connector
return|;
block|}
specifier|public
name|List
name|getLocalRepoIdList
parameter_list|()
block|{
return|return
name|localRepoIdList
return|;
block|}
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mode
return|;
block|}
specifier|public
name|Map
name|getPolicyMap
parameter_list|()
block|{
return|return
name|policyMap
return|;
block|}
specifier|public
name|String
name|getPropertyKey
parameter_list|()
block|{
return|return
name|propertyKey
return|;
block|}
specifier|public
name|String
name|getPropertyValue
parameter_list|()
block|{
return|return
name|propertyValue
return|;
block|}
specifier|public
name|List
name|getProxyIdOptions
parameter_list|()
block|{
return|return
name|proxyIdOptions
return|;
block|}
specifier|public
name|List
name|getRemoteRepoIdList
parameter_list|()
block|{
return|return
name|remoteRepoIdList
return|;
block|}
specifier|public
name|SecureActionBundle
name|getSecureActionBundle
parameter_list|()
throws|throws
name|SecureActionException
block|{
name|SecureActionBundle
name|bundle
init|=
operator|new
name|SecureActionBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setRequiresAuthentication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|addRequiredAuthorization
argument_list|(
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
argument_list|,
name|Resource
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
specifier|public
name|String
name|getWhiteListPattern
parameter_list|()
block|{
return|return
name|whiteListPattern
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|InitializationException
block|{
name|policyMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|policyMap
operator|.
name|putAll
argument_list|(
name|preDownloadPolicyMap
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|putAll
argument_list|(
name|postDownloadPolicyMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|input
parameter_list|()
block|{
return|return
name|INPUT
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sourceId
init|=
name|getSource
argument_list|()
decl_stmt|;
name|String
name|targetId
init|=
name|getTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|sourceId
argument_list|)
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|targetId
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|connector
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|connector
operator|=
operator|new
name|ProxyConnectorConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|connector
operator|=
name|findProxyConnector
argument_list|(
name|sourceId
argument_list|,
name|targetId
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Gather Network Proxy Ids.
name|this
operator|.
name|proxyIdOptions
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxyIdOptions
operator|.
name|add
argument_list|(
name|DIRECT_CONNECTION
argument_list|)
expr_stmt|;
name|Closure
name|addProxyIds
init|=
operator|new
name|Closure
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|NetworkProxyConfiguration
condition|)
block|{
name|NetworkProxyConfiguration
name|netproxy
init|=
operator|(
name|NetworkProxyConfiguration
operator|)
name|input
decl_stmt|;
name|proxyIdOptions
operator|.
name|add
argument_list|(
name|netproxy
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|config
operator|.
name|getNetworkProxies
argument_list|()
argument_list|,
name|addProxyIds
argument_list|)
expr_stmt|;
comment|// Gather Local& Remote Repo Ids.
name|RepositoryIdListClosure
name|remoteRepoIdList
init|=
operator|new
name|RepositoryIdListClosure
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryIdListClosure
name|localRepoIdList
init|=
operator|new
name|RepositoryIdListClosure
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|Closure
name|repoIfClosure
init|=
name|IfClosure
operator|.
name|getInstance
argument_list|(
name|RemoteRepositoryPredicate
operator|.
name|getInstance
argument_list|()
argument_list|,
name|remoteRepoIdList
argument_list|,
name|localRepoIdList
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|forAllDo
argument_list|(
name|config
operator|.
name|getRepositories
argument_list|()
argument_list|,
name|repoIfClosure
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteRepoIdList
operator|=
name|remoteRepoIdList
operator|.
name|getList
argument_list|()
expr_stmt|;
name|this
operator|.
name|localRepoIdList
operator|=
name|localRepoIdList
operator|.
name|getList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|save
parameter_list|()
block|{
name|String
name|mode
init|=
name|getMode
argument_list|()
decl_stmt|;
name|String
name|sourceId
init|=
name|getConnector
argument_list|()
operator|.
name|getSourceRepoId
argument_list|()
decl_stmt|;
name|String
name|targetId
init|=
name|getConnector
argument_list|()
operator|.
name|getTargetRepoId
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|,
name|mode
argument_list|)
condition|)
block|{
name|removeConnector
argument_list|(
name|sourceId
argument_list|,
name|targetId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|DIRECT_CONNECTION
argument_list|,
name|getConnector
argument_list|()
operator|.
name|getProxyId
argument_list|()
argument_list|)
condition|)
block|{
name|getConnector
argument_list|()
operator|.
name|setProxyId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|addProxyConnector
argument_list|(
name|getConnector
argument_list|()
argument_list|)
expr_stmt|;
name|saveConfiguration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"I/O Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidConfigurationException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Invalid Configuration Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Configuration Registry Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|void
name|setBlackListPattern
parameter_list|(
name|String
name|blackListPattern
parameter_list|)
block|{
name|this
operator|.
name|blackListPattern
operator|=
name|blackListPattern
expr_stmt|;
block|}
specifier|public
name|void
name|setConnector
parameter_list|(
name|ProxyConnectorConfiguration
name|connector
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
block|}
specifier|public
name|void
name|setLocalRepoIdList
parameter_list|(
name|List
name|localRepoIdList
parameter_list|)
block|{
name|this
operator|.
name|localRepoIdList
operator|=
name|localRepoIdList
expr_stmt|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|void
name|setPropertyKey
parameter_list|(
name|String
name|propertyKey
parameter_list|)
block|{
name|this
operator|.
name|propertyKey
operator|=
name|propertyKey
expr_stmt|;
block|}
specifier|public
name|void
name|setPropertyValue
parameter_list|(
name|String
name|propertyValue
parameter_list|)
block|{
name|this
operator|.
name|propertyValue
operator|=
name|propertyValue
expr_stmt|;
block|}
specifier|public
name|void
name|setRemoteRepoIdList
parameter_list|(
name|List
name|remoteRepoIdList
parameter_list|)
block|{
name|this
operator|.
name|remoteRepoIdList
operator|=
name|remoteRepoIdList
expr_stmt|;
block|}
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|void
name|setTarget
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
specifier|public
name|void
name|setWhiteListPattern
parameter_list|(
name|String
name|whiteListPattern
parameter_list|)
block|{
name|this
operator|.
name|whiteListPattern
operator|=
name|whiteListPattern
expr_stmt|;
block|}
specifier|private
name|void
name|addProxyConnector
parameter_list|(
name|ProxyConnectorConfiguration
name|proxyConnector
parameter_list|)
throws|throws
name|IOException
block|{
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|addProxyConnector
argument_list|(
name|proxyConnector
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ProxyConnectorConfiguration
name|findProxyConnector
parameter_list|(
name|String
name|sourceId
parameter_list|,
name|String
name|targetId
parameter_list|)
block|{
name|Configuration
name|config
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ProxyConnectorSelectionPredicate
name|selectedProxy
init|=
operator|new
name|ProxyConnectorSelectionPredicate
argument_list|(
name|sourceId
argument_list|,
name|targetId
argument_list|)
decl_stmt|;
return|return
operator|(
name|ProxyConnectorConfiguration
operator|)
name|CollectionUtils
operator|.
name|find
argument_list|(
name|config
operator|.
name|getProxyConnectors
argument_list|()
argument_list|,
name|selectedProxy
argument_list|)
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|ProxyConnectorConfiguration
name|proxyConnector
init|=
name|getConnector
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxyConnector
operator|.
name|getPolicies
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addActionError
argument_list|(
literal|"Policies must be set."
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|it
init|=
name|policyMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|policyId
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DownloadPolicy
name|policy
init|=
operator|(
name|DownloadPolicy
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
name|options
init|=
name|policy
operator|.
name|getOptions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|proxyConnector
operator|.
name|getPolicies
argument_list|()
operator|.
name|containsKey
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Policy ["
operator|+
name|policyId
operator|+
literal|"] must be set (missing id)."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|arr
index|[]
init|=
operator|(
name|String
index|[]
operator|)
name|proxyConnector
operator|.
name|getPolicies
argument_list|()
operator|.
name|get
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|proxyConnector
operator|.
name|getPolicies
argument_list|()
operator|.
name|put
argument_list|(
name|policyId
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Policy ["
operator|+
name|policyId
operator|+
literal|"] must be set (missing value)."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"Value of ["
operator|+
name|value
operator|+
literal|"] is invalid for policy ["
operator|+
name|policyId
operator|+
literal|"], valid values: "
operator|+
name|options
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
specifier|private
name|void
name|removeConnector
parameter_list|(
name|String
name|sourceId
parameter_list|,
name|String
name|targetId
parameter_list|)
block|{
name|ProxyConnectorSelectionPredicate
name|selectedProxy
init|=
operator|new
name|ProxyConnectorSelectionPredicate
argument_list|(
name|sourceId
argument_list|,
name|targetId
argument_list|)
decl_stmt|;
name|NotPredicate
name|notSelectedProxy
init|=
operator|new
name|NotPredicate
argument_list|(
name|selectedProxy
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|filter
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProxyConnectors
argument_list|()
argument_list|,
name|notSelectedProxy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|saveConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidConfigurationException
throws|,
name|RegistryException
block|{
name|archivaConfiguration
operator|.
name|save
argument_list|(
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|addActionMessage
argument_list|(
literal|"Successfully saved configuration"
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
block|}
end_class

end_unit

