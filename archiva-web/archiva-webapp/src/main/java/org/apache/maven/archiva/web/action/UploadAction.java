begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|action
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|xwork
operator|.
name|action
operator|.
name|PlexusActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ManagedRepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|model
operator|.
name|ArtifactReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ManagedRepositoryContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|ArchivaUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|PrincipalNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
operator|.
name|UserRepositories
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|Validateable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Upload an artifact.  *   * @author Wendy Smoak  * @plexus.component role="com.opensymphony.xwork.Action" role-hint="uploadAction"  */
end_comment

begin_class
specifier|public
class|class
name|UploadAction
extends|extends
name|PlexusActionSupport
implements|implements
name|Validateable
block|{
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|String
name|artifactId
decl_stmt|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|String
name|packaging
decl_stmt|;
specifier|private
name|String
name|classifier
decl_stmt|;
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|String
name|filename
decl_stmt|;
specifier|private
name|String
name|repositoryId
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="xwork"      */
specifier|private
name|ArchivaUser
name|archivaUser
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|UserRepositories
name|userRepositories
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|private
name|ArchivaConfiguration
name|configuration
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryContentFactory
name|repositoryFactory
decl_stmt|;
specifier|public
name|void
name|setUpload
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setUploadContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
specifier|public
name|void
name|setUploadFileName
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|filename
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
specifier|public
name|void
name|setArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|String
name|getPackaging
parameter_list|()
block|{
return|return
name|packaging
return|;
block|}
specifier|public
name|void
name|setPackaging
parameter_list|(
name|String
name|packaging
parameter_list|)
block|{
name|this
operator|.
name|packaging
operator|=
name|packaging
expr_stmt|;
block|}
specifier|public
name|String
name|getClassifier
parameter_list|()
block|{
return|return
name|classifier
return|;
block|}
specifier|public
name|void
name|setClassifier
parameter_list|(
name|String
name|classifier
parameter_list|)
block|{
name|this
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
block|}
specifier|public
name|String
name|getRepositoryId
parameter_list|()
block|{
return|return
name|repositoryId
return|;
block|}
specifier|public
name|void
name|setRepositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|this
operator|.
name|repositoryId
operator|=
name|repositoryId
expr_stmt|;
block|}
specifier|public
name|String
name|upload
parameter_list|()
block|{
comment|// TODO populate repository id field
comment|// TODO form validation
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"upload"
argument_list|)
expr_stmt|;
return|return
name|INPUT
return|;
block|}
specifier|public
name|String
name|doUpload
parameter_list|()
block|{
try|try
block|{
name|ManagedRepositoryConfiguration
name|repoConfig
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|()
operator|.
name|findManagedRepositoryById
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|ArtifactReference
name|artifactReference
init|=
operator|new
name|ArtifactReference
argument_list|()
decl_stmt|;
name|artifactReference
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setClassifier
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|artifactReference
operator|.
name|setType
argument_list|(
name|packaging
argument_list|)
expr_stmt|;
name|ManagedRepositoryContent
name|repository
init|=
name|repositoryFactory
operator|.
name|getManagedRepositoryContent
argument_list|(
name|repositoryId
argument_list|)
decl_stmt|;
name|String
name|artifactPath
init|=
name|repository
operator|.
name|toPath
argument_list|(
name|artifactReference
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|artifactPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|File
name|targetPath
init|=
operator|new
name|File
argument_list|(
name|repoConfig
operator|.
name|getLocation
argument_list|()
argument_list|,
name|artifactPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetPath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|targetPath
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|copyFile
argument_list|(
name|targetPath
argument_list|,
name|artifactPath
operator|.
name|substring
argument_list|(
name|lastIndex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1. check if user has permission to deploy to the repository
comment|// - get writable user repositories (need to add new method
comment|// for this in DefaultUserRepositories)
comment|// 2. if user has write permission:
comment|// - get repository path (consider the layout -- default or legacy)
comment|// - if the artifact is not a pom, create pom file (use ProjectModel400Writer in archiva-repository-layer)
comment|// - create directories in the repository (groupId, artifactId, version)
comment|// - re-write uploaded jar file
comment|// - write generated pom
comment|// - update metadata
comment|// TODO delete temporary file (upload)
comment|// TODO improve action error messages below
return|return
name|SUCCESS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Error encountered while uploading file: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|re
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Target repository cannot be found: "
operator|+
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|rep
parameter_list|)
block|{
name|addActionError
argument_list|(
literal|"Repository exception: "
operator|+
name|rep
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ERROR
return|;
block|}
block|}
specifier|private
name|String
name|getPrincipal
parameter_list|()
block|{
return|return
name|archivaUser
operator|.
name|getActivePrincipal
argument_list|()
return|;
block|}
specifier|private
name|void
name|copyFile
parameter_list|(
name|File
name|targetPath
parameter_list|,
name|String
name|artifactFilename
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|targetPath
argument_list|,
name|artifactFilename
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|input
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generatePom
parameter_list|()
block|{
comment|// TODO: use ProjectModel400Writer
block|}
specifier|public
name|void
name|validate
parameter_list|()
block|{
try|try
block|{
comment|// is this enough check for the repository permission?
if|if
condition|(
operator|!
name|userRepositories
operator|.
name|isAuthorizedToUploadArtifacts
argument_list|(
name|getPrincipal
argument_list|()
argument_list|,
name|repositoryId
argument_list|)
condition|)
block|{
name|addActionError
argument_list|(
literal|"User is not authorized to upload in repository "
operator|+
name|repositoryId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PrincipalNotFoundException
name|pe
parameter_list|)
block|{
name|addActionError
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArchivaSecurityException
name|ae
parameter_list|)
block|{
name|addActionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

