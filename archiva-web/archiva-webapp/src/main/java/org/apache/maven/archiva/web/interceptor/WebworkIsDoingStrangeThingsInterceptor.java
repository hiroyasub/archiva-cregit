begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|web
operator|.
name|interceptor
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionInvocation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|ActionProxy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|opensymphony
operator|.
name|xwork
operator|.
name|interceptor
operator|.
name|PreResultListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * WebworkIsDoingStrangeThingsInterceptor   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  * @plexus.component role="com.opensymphony.xwork.interceptor.Interceptor"  *                   role-hint="webwork-is-doing-strange-things"  */
end_comment

begin_class
specifier|public
class|class
name|WebworkIsDoingStrangeThingsInterceptor
extends|extends
name|AbstractLogEnabled
implements|implements
name|Interceptor
implements|,
name|PreResultListener
block|{
specifier|private
name|String
name|hint
init|=
literal|"(nohint)"
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".init()"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|intercept
parameter_list|(
name|ActionInvocation
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuffer
name|dbg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|invocation
operator|.
name|addPreResultListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|hint
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|".intercept("
argument_list|)
operator|.
name|append
argument_list|(
name|invocation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n Action="
argument_list|)
operator|.
name|append
argument_list|(
name|invocation
operator|.
name|getAction
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ActionProxy
name|proxy
init|=
name|invocation
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n Proxy="
argument_list|)
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n    .namespace  ="
argument_list|)
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n    .actionName ="
argument_list|)
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getActionName
argument_list|()
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n    .method     ="
argument_list|)
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n    .execute result ="
argument_list|)
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getExecuteResult
argument_list|()
argument_list|)
expr_stmt|;
name|ActionContext
name|context
init|=
name|invocation
operator|.
name|getInvocationContext
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n InvocationContext="
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|appendMap
argument_list|(
literal|"\n    .session="
argument_list|,
name|dbg
argument_list|,
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|appendMap
argument_list|(
literal|"\n    .parameters="
argument_list|,
name|dbg
argument_list|,
name|context
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|invocation
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n ... result=\""
argument_list|)
operator|.
name|append
argument_list|(
name|result
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|", code="
argument_list|)
operator|.
name|append
argument_list|(
name|invocation
operator|.
name|getResultCode
argument_list|()
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
name|dbg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|appendMap
parameter_list|(
name|String
name|heading
parameter_list|,
name|StringBuffer
name|dbg
parameter_list|,
name|Map
name|map
parameter_list|)
block|{
name|dbg
operator|.
name|append
argument_list|(
name|heading
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|dbg
operator|.
name|append
argument_list|(
literal|"<null>"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dbg
operator|.
name|append
argument_list|(
literal|"<empty>"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Iterator
name|entries
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|append
argument_list|(
literal|"\n      ["
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|dbg
operator|.
name|append
argument_list|(
literal|"<null>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|dbg
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|dbg
operator|.
name|append
argument_list|(
literal|"<npe>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|".destroy()"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHint
parameter_list|(
name|String
name|hint
parameter_list|)
block|{
name|this
operator|.
name|hint
operator|=
name|hint
expr_stmt|;
block|}
specifier|public
name|void
name|beforeResult
parameter_list|(
name|ActionInvocation
name|invocation
parameter_list|,
name|String
name|resultCode
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"before result: invocation: "
operator|+
name|invocation
operator|+
literal|", resultCode: "
operator|+
name|resultCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

