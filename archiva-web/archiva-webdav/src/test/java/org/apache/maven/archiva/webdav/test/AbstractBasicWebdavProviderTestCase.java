begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|basic
operator|.
name|BasicWebDavServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|webdav
operator|.
name|lib
operator|.
name|WebdavResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * AbstractBasicWebdavProviderTestCase   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: AbstractBasicWebdavProviderTestCase.java 6000 2007-03-04 22:01:49Z joakime $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBasicWebdavProviderTestCase
extends|extends
name|AbstractWebdavProviderTestCase
block|{
specifier|private
name|File
name|serverRepoDir
decl_stmt|;
specifier|private
name|WebdavResource
name|davRepo
decl_stmt|;
comment|/** The Jetty Server. */
specifier|private
name|Server
name|server
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// Initialize server contents directory.
name|serverRepoDir
operator|=
name|getTestDir
argument_list|(
literal|"sandbox"
argument_list|)
expr_stmt|;
comment|// Setup the Jetty Server.
name|System
operator|.
name|setProperty
argument_list|(
literal|"DEBUG"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.mortbay.log.class"
argument_list|,
literal|"org.slf4j.impl.SimpleLogger"
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|PORT
argument_list|)
expr_stmt|;
name|WebAppContext
name|webAppConfig
init|=
operator|new
name|WebAppContext
argument_list|(
name|server
argument_list|,
name|getTestFile
argument_list|(
literal|"src/test/webapp"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|ServletHandler
name|servletHandler
init|=
name|webAppConfig
operator|.
name|getServletHandler
argument_list|()
decl_stmt|;
name|ServletHolder
name|holder
init|=
name|servletHandler
operator|.
name|addServletWithMapping
argument_list|(
name|BasicWebDavServlet
operator|.
name|class
argument_list|,
name|CONTEXT
operator|+
literal|"/*"
argument_list|)
decl_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"dav.root"
argument_list|,
name|serverRepoDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Setup Client Side
name|HttpURL
name|httpSandboxUrl
init|=
operator|new
name|HttpURL
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
name|CONTEXT
operator|+
literal|"/"
argument_list|)
decl_stmt|;
try|try
block|{
name|davRepo
operator|=
operator|new
name|WebdavResource
argument_list|(
name|httpSandboxUrl
argument_list|)
expr_stmt|;
name|davRepo
operator|.
name|setDebug
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|davRepo
operator|.
name|setPath
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|tearDown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|serverRepoDir
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
name|server
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|davRepo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|davRepo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
name|davRepo
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// --------------------------------------------------------------------
comment|// Actual Test Cases.
comment|// --------------------------------------------------------------------
specifier|public
name|void
name|testPutGet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Quote: Rocky
name|String
name|contents
init|=
literal|"yo!\n"
decl_stmt|;
name|assertDavTouchFile
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
argument_list|,
literal|"data.txt"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|InputStream
name|inputStream
init|=
name|davRepo
operator|.
name|getMethodData
argument_list|(
name|CONTEXT
operator|+
literal|"/data.txt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|contents
argument_list|,
name|IOUtil
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCollectionTasks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a few collections.
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar/foo"
argument_list|)
expr_stmt|;
comment|// Remove a collection
name|davRepo
operator|.
name|setPath
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|davRepo
operator|.
name|deleteMethod
argument_list|(
name|CONTEXT
operator|+
literal|"/bar/foo"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to remove<"
operator|+
name|CONTEXT
operator|+
literal|"/bar/foo> on<"
operator|+
name|davRepo
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"> due to<"
operator|+
name|davRepo
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|assertDavDirNotExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar/foo"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResourceCopy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Lyrics: Cool and the Gang - Celebrate Good Times
name|String
name|contents
init|=
literal|"we're gonna have a good time tonite. lets celebrate. it's a celebration. "
operator|+
literal|"cel-e-brate good times, come on!"
decl_stmt|;
comment|// Create a few collections.
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
comment|// Create a resource
name|assertDavTouchFile
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
comment|// Test for existance of resource
name|assertDavFileExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
name|assertDavFileNotExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/foo"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
comment|// Copy resource
name|String
name|source
init|=
name|CONTEXT
operator|+
literal|"/bar/data.txt"
decl_stmt|;
name|String
name|dest
init|=
name|CONTEXT
operator|+
literal|"/foo/data.txt"
decl_stmt|;
if|if
condition|(
operator|!
name|davRepo
operator|.
name|copyMethod
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to copy<"
operator|+
name|source
operator|+
literal|"> to<"
operator|+
name|dest
operator|+
literal|"> on<"
operator|+
name|davRepo
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"> due to<"
operator|+
name|davRepo
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|// Test for existance of resource
name|assertDavFileExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
name|assertDavFileExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/foo"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResourceMove
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Lyrics: Men At Work - Who Can It Be Now
name|String
name|contents
init|=
literal|"Who can it be knocking at my door?\n"
operator|+
literal|"Make no sound, tip-toe across the floor.\n"
operator|+
literal|"If he hears, he'll knock all day,\n"
operator|+
literal|"I'll be trapped, and here I'll have to stay.\n"
operator|+
literal|"I've done no harm, I keep to myself;\n"
operator|+
literal|"There's nothing wrong with my state of mental health.\n"
operator|+
literal|"I like it here with my childhood friend;\n"
operator|+
literal|"Here they come, those feelings again!\n"
decl_stmt|;
comment|// Create a few collections.
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
comment|// Create a resource
name|assertDavTouchFile
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
comment|// Test for existance of resource
name|assertDavFileExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
name|assertDavFileNotExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/foo"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
comment|// Copy resource
name|String
name|source
init|=
name|CONTEXT
operator|+
literal|"/bar/data.txt"
decl_stmt|;
name|String
name|dest
init|=
name|CONTEXT
operator|+
literal|"/foo/data.txt"
decl_stmt|;
if|if
condition|(
operator|!
name|davRepo
operator|.
name|moveMethod
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to move<"
operator|+
name|source
operator|+
literal|"> to<"
operator|+
name|dest
operator|+
literal|"> on<"
operator|+
name|davRepo
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"> due to<"
operator|+
name|davRepo
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|// Test for existance of resource
name|assertDavFileNotExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
name|assertDavFileExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/foo"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResourceDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Lyrics: Men At Work - Down Under
name|String
name|contents
init|=
literal|"Lying in a den in Bombay\n"
operator|+
literal|"With a slack jaw, and not much to say\n"
operator|+
literal|"I said to the man, \"Are you trying to tempt me\"\n"
operator|+
literal|"Because I come from the land of plenty?\n"
decl_stmt|;
comment|// Create a few collections.
name|assertDavMkDir
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|)
expr_stmt|;
comment|// Create a resource
name|assertDavTouchFile
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
comment|// Move resource
name|davRepo
operator|.
name|setPath
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|davRepo
operator|.
name|deleteMethod
argument_list|(
name|CONTEXT
operator|+
literal|"/bar/data.txt"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to remove<"
operator|+
name|CONTEXT
operator|+
literal|"/bar/data.txt> on<"
operator|+
name|davRepo
operator|.
name|getHttpURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"> due to<"
operator|+
name|davRepo
operator|.
name|getStatusMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|// Test for existance via webdav interface.
name|assertDavFileNotExists
argument_list|(
name|davRepo
argument_list|,
name|CONTEXT
operator|+
literal|"/bar"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

