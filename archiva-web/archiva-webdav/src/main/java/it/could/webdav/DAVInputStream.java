begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  *<p>A specialized {@link InputStream} to read from {@link DAVResource}s.</p>  *   *<p>This specialized {@link InputStream} never throws {@link IOException}s,  * but rather relies on the unchecked {@link DAVException} to notify the  * framework of the correct DAV errors.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVInputStream
extends|extends
name|InputStream
block|{
comment|/**<p>The {@link InputStream} of the source {@link File}.</p> */
specifier|protected
name|InputStream
name|input
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link DAVResource} associated with this instance.</p> */
specifier|private
name|DAVResource
name|resource
init|=
literal|null
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVInputStream} instance.</p>      */
specifier|protected
name|DAVInputStream
parameter_list|(
name|DAVResource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|init
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|DAVResource
name|resource
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|resource
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to read from resource"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Read data from this {@link InputStream}.</p>      */
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
return|return
name|input
operator|.
name|read
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't read data"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Read data from this {@link InputStream}.</p>      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
return|return
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't read data"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Read data from this {@link InputStream}.</p>      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
return|return
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't read data"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Skip a specified amount of data reading from this      * {@link InputStream}.</p>      */
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
return|return
name|input
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't skip over"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Return the number of bytes that can be read or skipped from this      * {@link InputStream} without blocking.</p>      */
specifier|public
name|int
name|available
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
return|return
name|input
operator|.
name|available
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't skip over"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Return the number of bytes that can be read or skipped from this      * {@link InputStream} without blocking.</p>      */
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|this
operator|.
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't close"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|input
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      *<p>Marks the current position in this {@link InputStream}.</p>      */
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
name|this
operator|.
name|input
operator|.
name|mark
argument_list|(
name|readlimit
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Repositions this stream to the position at the time the      * {@link #mark(int)} method was last called on this      * {@link InputStream}.</p>      */
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DAVException
argument_list|(
literal|403
argument_list|,
literal|"Can't reset"
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Tests if this {@link InputStream} supports the {@link #mark(int)}      * and {@link #reset()} methods.</p>      */
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|input
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
return|return
name|this
operator|.
name|input
operator|.
name|markSupported
argument_list|()
return|;
block|}
block|}
end_class

end_unit

