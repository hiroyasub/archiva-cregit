begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<p>A simple class representing a {@link File} based WebDAV repository.</p>   *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVRepository
block|{
comment|/**<p>A {@link String} of all acceptable characters in a URI.</p> */
specifier|private
specifier|static
specifier|final
name|String
name|ACCEPTABLE
init|=
literal|"ABCDEFGHIJLKMNOPQRSTUVWXYZ"
operator|+
comment|// ALPHA (UPPER)
literal|"abcdefghijklmnopqrstuvwxyz"
operator|+
comment|// ALPHA (LOWER)
literal|"0123456789"
operator|+
comment|// DIGIT
literal|"_-!.~'()*"
operator|+
comment|// UNRESERVED
literal|",;:$&+="
operator|+
comment|// PUNCT
literal|"?/[]@"
decl_stmt|;
comment|// RESERVED
comment|/**<p>The {@link File} identifying the root of this repository.</p> */
specifier|protected
name|File
name|root
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link URI} associated with the root of this repository.</p> */
specifier|protected
name|URI
name|base
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link Set} of all configured {@link DAVListener}s.</p> */
specifier|private
name|Set
name|listeners
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVRepository} instance.</p>      *      * @param root The {@link File} identifying the root of the repository.      * @throws IOException If the specified root is not a directory.      * @throws NullPointerExceptoin If the specified root was<b>null</b>.      */
specifier|public
name|DAVRepository
parameter_list|(
name|File
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|File
name|root
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null root"
argument_list|)
throw|;
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|this
operator|.
name|root
operator|=
name|root
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|this
operator|.
name|root
operator|.
name|toURI
argument_list|()
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Root \""
operator|+
name|root
operator|+
literal|"\" is not a directory"
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Return the {@link URI} representing the root directory of this      * {@link DAVRepository}.</p>      *       * @return a<b>non-null</b> {@link URI} instance.      */
specifier|protected
name|URI
name|getRepositoryURI
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|base
operator|)
return|;
block|}
comment|/**      *<p>Return the {@link DAVResource} associated with the given name.</p>      *       * @param name a {@link String} identifying the resource name.      * @return a<b>non-null</b> {@link DAVResource} instance.      * @throws IOException If the resource could not be resolved.      */
specifier|public
name|DAVResource
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
name|this
operator|.
name|getResource
argument_list|(
operator|(
name|URI
operator|)
literal|null
argument_list|)
return|;
try|try
block|{
comment|/* Encode the string into a URI */
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|byte
name|encoded
index|[]
init|=
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|encoded
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|ACCEPTABLE
operator|.
name|indexOf
argument_list|(
operator|(
name|int
operator|)
name|encoded
index|[
name|x
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|DAVUtilities
operator|.
name|toHexString
argument_list|(
name|encoded
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|encoded
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getResource
argument_list|(
operator|new
name|URI
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|exception
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Invalid resource name \""
operator|+
name|name
operator|+
literal|"\""
decl_stmt|;
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Return the {@link DAVResource} associated with a {@link URI}.</p>      *       *<p>If the specified {@link URI} is relative it will be resolved against      * the root of this {@link DAVRepository}.</p>      *       * @param uri an absolute or relative {@link URI} identifying the resource.      * @return a<b>non-null</b> {@link DAVResource} instance.      * @throws IOException If the resource could not be resolved.      */
specifier|public
name|DAVResource
name|getResource
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
return|return
operator|new
name|DAVResource
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|root
argument_list|)
return|;
if|if
condition|(
operator|!
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
name|uri
operator|=
name|this
operator|.
name|base
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
operator|.
name|normalize
argument_list|()
expr_stmt|;
return|return
operator|new
name|DAVResource
argument_list|(
name|this
argument_list|,
operator|new
name|File
argument_list|(
name|uri
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Add a new {@link DAVListener} to the list of instances notified by      * this {@link DAVRepository}.</p>      */
specifier|public
name|void
name|addListener
parameter_list|(
name|DAVListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Remove a {@link DAVListener} from the list of instances notified by      * this {@link DAVRepository}.</p>      */
specifier|public
name|void
name|removeListener
parameter_list|(
name|DAVListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Notify all configured {@link DAVListener}s of an event.</p>      */
specifier|protected
name|void
name|notify
parameter_list|(
name|DAVResource
name|resource
parameter_list|,
name|int
name|event
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null resource"
argument_list|)
throw|;
if|if
condition|(
name|resource
operator|.
name|getRepository
argument_list|()
operator|!=
name|this
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid resource"
argument_list|)
throw|;
name|Iterator
name|iterator
init|=
name|this
operator|.
name|listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
try|try
block|{
operator|(
operator|(
name|DAVListener
operator|)
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|.
name|notify
argument_list|(
name|resource
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|exception
parameter_list|)
block|{
comment|// Swallow any RuntimeException thrown by listeners.
block|}
block|}
block|}
end_class

end_unit

