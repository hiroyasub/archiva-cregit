begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ========================================================================== *  *         Copyright (C) 2004-2006, Pier Fumagalli<http://could.it/>         *  *                            All rights reserved.                            *  * ========================================================================== *  *                                                                            *  * Licensed under the  Apache License, Version 2.0  (the "License").  You may *  * not use this file except in compliance with the License.  You may obtain a *  * copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.       *  *                                                                            *  * Unless  required  by applicable  law or  agreed  to  in writing,  software *  * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT *  * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the *  * License for the  specific language  governing permissions  and limitations *  * under the License.                                                         *  *                                                                            *  * ========================================================================== */
end_comment

begin_package
package|package
name|it
operator|.
name|could
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  *<p>A specialized {@link OutputStream} to write to {@link DAVResource}s.</p>  *   *<p>When writing to this {@link OutputStream} the data will be written to  * a temporary file. This temporary file will be moved to its final destination  * (the original file identifying the resource) when the {@link #close()}  * method is called.</p>  *  *<p>This specialized {@link OutputStream} never throws {@link IOException}s,  * but rather relies on the unchecked {@link DAVException} to notify the  * framework of the correct DAV errors.</p>  *  * @author<a href="http://could.it/">Pier Fumagalli</a>  */
end_comment

begin_class
specifier|public
class|class
name|DAVOutputStream
extends|extends
name|OutputStream
block|{
comment|/**<p>The original resource {@link File}.</p> */
specifier|private
name|File
name|temporary
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link OutputStream} of the temporary {@link File}.</p> */
specifier|protected
name|OutputStream
name|output
init|=
literal|null
decl_stmt|;
comment|/**<p>The {@link DAVResource} associated with this instance.</p> */
specifier|private
name|DAVResource
name|resource
init|=
literal|null
decl_stmt|;
comment|/**      *<p>Create a new {@link DAVOutputStream} instance.</p>      */
specifier|protected
name|DAVOutputStream
parameter_list|(
name|DAVResource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|init
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|DAVResource
name|resource
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|temporary
operator|=
name|resource
operator|.
name|getParent
argument_list|()
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|temporary
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
name|DAVResource
operator|.
name|PREFIX
argument_list|,
name|DAVResource
operator|.
name|SUFFIX
argument_list|,
name|this
operator|.
name|temporary
argument_list|)
expr_stmt|;
name|this
operator|.
name|output
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|this
operator|.
name|temporary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to create temporary file"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Rename the temporary {@link File} to the original one.</p>      */
specifier|protected
name|void
name|rename
parameter_list|(
name|File
name|temporary
parameter_list|,
name|File
name|original
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|original
operator|.
name|exists
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|original
operator|.
name|delete
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete original file"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|temporary
operator|.
name|renameTo
argument_list|(
name|original
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename temporary file"
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Abort any data written to the temporary file and delete it.</p>      */
specifier|public
name|void
name|abort
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|temporary
operator|.
name|exists
argument_list|()
condition|)
name|this
operator|.
name|temporary
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|output
operator|!=
literal|null
condition|)
try|try
block|{
name|this
operator|.
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
comment|// Swallow the IOException on close
block|}
finally|finally
block|{
name|this
operator|.
name|output
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      *<p>Close this {@link OutputStream} {@link #rename(File,File) renaming}      * the temporary file to the {@link DAVResource#getFile() original} one.</p>      */
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|==
literal|null
condition|)
return|return;
try|try
block|{
comment|/* What kind of event should this invocation trigger? */
name|int
name|event
init|=
name|this
operator|.
name|resource
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|?
name|DAVListener
operator|.
name|RESOURCE_MODIFIED
else|:
name|DAVListener
operator|.
name|RESOURCE_CREATED
decl_stmt|;
comment|/* Make sure that everything is closed and named properly */
name|this
operator|.
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|output
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rename
argument_list|(
name|this
operator|.
name|temporary
argument_list|,
name|this
operator|.
name|resource
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Send notifications to all listeners of the repository */
name|this
operator|.
name|resource
operator|.
name|getRepository
argument_list|()
operator|.
name|notify
argument_list|(
name|this
operator|.
name|resource
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Error processing temporary file"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *<p>Flush any unwritten data to the disk.</p>      */
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abort
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Unable to flush buffers"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Write data to this {@link OutputStream}.</p>      */
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|output
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abort
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Unable to write data"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Write data to this {@link OutputStream}.</p>      */
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|output
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abort
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Unable to write data"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Write data to this {@link OutputStream}.</p>      */
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|o
parameter_list|,
name|int
name|l
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|output
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|o
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abort
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Unable to write data"
decl_stmt|;
throw|throw
operator|new
name|DAVException
argument_list|(
literal|507
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|this
operator|.
name|resource
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Finalize this {@link DAVOutputStream} instance.</p>      */
specifier|public
name|void
name|finalize
parameter_list|()
block|{
name|this
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

