begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|util
operator|.
name|StreamTools
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVException
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVInputStream
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVMethod
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVNotModified
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVResource
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVTransaction
import|;
end_import

begin_import
import|import
name|it
operator|.
name|could
operator|.
name|webdav
operator|.
name|DAVUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * ReplacementGetMethod   *  * @author Pier Fumagalli (Original it.could.webdav 0.4 version)  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a> (Replacement Version)  * @version $Id: ReplacementGetMethod.java 7002 2007-10-23 22:40:37Z joakime $  *   * @plexus.component   *              role="it.could.webdav.DAVMethod"  *              role-hint="get-with-indexing"  */
end_comment

begin_class
specifier|public
class|class
name|ReplacementGetMethod
implements|implements
name|DAVMethod
block|{
comment|/**<p>The encoding charset to repsesent collections.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|/**<p>The mime type that {@link ReplacementGetMethod} will use serving index.html files.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|HTML_MIME_TYPE
init|=
literal|"text/html"
decl_stmt|;
comment|/**<p>The mime type that {@link ReplacementGetMethod} will use serving collections.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_MIME_TYPE
init|=
name|HTML_MIME_TYPE
operator|+
literal|"; charset=\""
operator|+
name|ENCODING
operator|+
literal|"\""
decl_stmt|;
comment|/**<p>The header for content disposition.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_DISPOSITION
init|=
literal|"Content-Disposition"
decl_stmt|;
comment|/**<p>The content-disposition for fancy-indexing.</p> */
specifier|public
specifier|static
specifier|final
name|String
name|INLINE_INDEX_HTML
init|=
literal|"inline; filename=\"index.html\""
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|private
name|boolean
name|useIndexHtml
init|=
literal|false
decl_stmt|;
comment|/**      *<p>Create a new {@link ReplacementGetMethod} instance.</p>      */
specifier|public
name|ReplacementGetMethod
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Process the<code>GET</code> method.</p>      */
specifier|public
name|void
name|process
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Handle boilerplate
if|if
condition|(
name|resource
operator|.
name|isNull
argument_list|()
condition|)
throw|throw
operator|new
name|DAVException
argument_list|(
literal|404
argument_list|,
literal|"Not found"
argument_list|,
name|resource
argument_list|)
throw|;
name|notModified
argument_list|(
name|transaction
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|copyHeaders
argument_list|(
name|transaction
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// Process the request.
specifier|final
name|String
name|originalPath
init|=
name|transaction
operator|.
name|getOriginalPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|normalizedPath
init|=
name|transaction
operator|.
name|getNormalizedPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|current
decl_stmt|;
specifier|final
name|String
name|parent
decl_stmt|;
if|if
condition|(
name|originalPath
operator|.
name|equals
argument_list|(
name|normalizedPath
argument_list|)
condition|)
block|{
specifier|final
name|String
name|relativePath
init|=
name|resource
operator|.
name|getRelativePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|current
operator|=
name|transaction
operator|.
name|lookup
argument_list|(
name|resource
argument_list|)
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|relativePath
expr_stmt|;
block|}
name|parent
operator|=
literal|"./"
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|"./"
expr_stmt|;
name|parent
operator|=
literal|"../"
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|DAVResource
name|indexHtml
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useIndexHtml
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|resource
operator|.
name|getChildren
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DAVResource
name|child
init|=
operator|(
name|DAVResource
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|child
operator|.
name|getDisplayName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"index.html"
argument_list|,
name|name
argument_list|)
operator|||
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"index.htm"
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|indexHtml
operator|=
name|child
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|useIndexHtml
operator|&&
name|indexHtml
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setContentType
argument_list|(
name|COLLECTION_MIME_TYPE
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|setHeader
argument_list|(
name|CONTENT_DISPOSITION
argument_list|,
name|INLINE_INDEX_HTML
argument_list|)
expr_stmt|;
name|sendResource
argument_list|(
name|transaction
argument_list|,
name|indexHtml
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transaction
operator|.
name|setContentType
argument_list|(
name|COLLECTION_MIME_TYPE
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|setHeader
argument_list|(
name|CONTENT_DISPOSITION
argument_list|,
name|INLINE_INDEX_HTML
argument_list|)
expr_stmt|;
name|sendFancyIndex
argument_list|(
name|transaction
argument_list|,
name|resource
argument_list|,
name|current
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* Processing a normal resource request */
name|transaction
operator|.
name|setContentType
argument_list|(
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
name|resource
operator|.
name|getDisplayName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|setHeader
argument_list|(
name|CONTENT_DISPOSITION
argument_list|,
literal|"attachment; filename=\""
operator|+
name|resource
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|sendResource
argument_list|(
name|transaction
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyHeaders
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
block|{
comment|/* Get the headers of this method */
name|String
name|ctyp
init|=
name|resource
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|String
name|etag
init|=
name|resource
operator|.
name|getEntityTag
argument_list|()
decl_stmt|;
name|String
name|lmod
init|=
name|DAVUtilities
operator|.
name|formatHttpDate
argument_list|(
name|resource
operator|.
name|getLastModified
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clen
init|=
name|DAVUtilities
operator|.
name|formatNumber
argument_list|(
name|resource
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
comment|/* Set the normal headers that are required for a GET */
if|if
condition|(
name|ctyp
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setContentType
argument_list|(
name|ctyp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|etag
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setHeader
argument_list|(
literal|"ETag"
argument_list|,
name|etag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lmod
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|lmod
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clen
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|clen
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendResource
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
name|DAVInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|transaction
operator|.
name|write
argument_list|()
expr_stmt|;
name|in
operator|=
name|resource
operator|.
name|read
argument_list|()
expr_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|4096
operator|*
literal|16
index|]
decl_stmt|;
name|int
name|k
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|k
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|StreamTools
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|StreamTools
operator|.
name|close
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendFancyIndex
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|,
specifier|final
name|String
name|current
parameter_list|,
specifier|final
name|String
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|out
init|=
name|transaction
operator|.
name|write
argument_list|(
name|ENCODING
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|resource
operator|.
name|getRelativePath
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Collection: /"
operator|+
name|path
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<h2>Collection: /"
operator|+
name|path
operator|+
literal|"</h2>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
comment|/* Process the parent */
specifier|final
name|DAVResource
name|parentResource
init|=
name|resource
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentResource
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<li><a href=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|parentResource
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</a><i><small>(Parent)</small></i></li>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
block|}
comment|/* Process the children (in two sorted sets, for nice ordering) */
name|Set
name|resources
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Set
name|collections
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Iterator
name|iterator
init|=
name|resource
operator|.
name|getChildren
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DAVResource
name|child
init|=
operator|(
name|DAVResource
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|String
name|childPath
init|=
name|child
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"<li><a href=\""
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"</li>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|collections
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resources
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Spit out the collections first and the resources then */
for|for
control|(
name|Iterator
name|i
init|=
name|collections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|out
operator|.
name|println
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|resources
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|out
operator|.
name|println
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|notModified
parameter_list|(
name|DAVTransaction
name|transaction
parameter_list|,
name|DAVResource
name|resource
parameter_list|)
block|{
name|Date
name|ifmod
init|=
name|transaction
operator|.
name|getIfModifiedSince
argument_list|()
decl_stmt|;
name|Date
name|lsmod
init|=
name|resource
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|isResource
argument_list|()
operator|&&
operator|(
name|ifmod
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|lsmod
operator|!=
literal|null
operator|)
condition|)
block|{
comment|/* HTTP doesn't send milliseconds, but Java does, so, reset them */
name|lsmod
operator|=
operator|new
name|Date
argument_list|(
operator|(
operator|(
name|long
operator|)
operator|(
name|lsmod
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
operator|)
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ifmod
operator|.
name|before
argument_list|(
name|lsmod
argument_list|)
condition|)
throw|throw
operator|new
name|DAVNotModified
argument_list|(
name|resource
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isUseIndexHtml
parameter_list|()
block|{
return|return
name|useIndexHtml
return|;
block|}
specifier|public
name|void
name|setUseIndexHtml
parameter_list|(
name|boolean
name|useIndexHtml
parameter_list|)
block|{
name|this
operator|.
name|useIndexHtml
operator|=
name|useIndexHtml
expr_stmt|;
block|}
block|}
end_class

end_unit

