begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|DavServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|AbstractWebDavServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|servlet
operator|.
name|DavServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|webdav
operator|.
name|util
operator|.
name|WrappedRepositoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * BasicWebDavServlet - Basic implementation of a single WebDAV server as servlet.   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id: BasicWebDavServlet.java 6017 2007-03-06 00:39:53Z joakime $  */
end_comment

begin_class
specifier|public
class|class
name|BasicWebDavServlet
extends|extends
name|AbstractWebDavServlet
block|{
specifier|public
specifier|static
specifier|final
name|String
name|INIT_ROOT_DIRECTORY
init|=
literal|"dav.root"
decl_stmt|;
specifier|private
name|DavServerComponent
name|davServer
decl_stmt|;
comment|// -----------------------------------------------------------------------
comment|// Servlet Implementation
comment|// -----------------------------------------------------------------------
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
name|config
operator|.
name|getServletName
argument_list|()
decl_stmt|;
name|boolean
name|useIndexHtml
init|=
name|getUseIndexHtml
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|File
name|rootDir
init|=
name|getRootDirectory
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootDir
operator|!=
literal|null
operator|&&
operator|!
name|rootDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"Invalid configuration, the dav root "
operator|+
name|rootDir
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not a directory: ["
operator|+
name|rootDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|davServer
operator|=
name|davManager
operator|.
name|createServer
argument_list|(
name|prefix
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|davServer
operator|.
name|setUseIndexHtml
argument_list|(
name|useIndexHtml
argument_list|)
expr_stmt|;
name|davServer
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to create DAV Server component for prefix ["
operator|+
name|prefix
operator|+
literal|"] mapped to root directory ["
operator|+
name|rootDir
operator|.
name|getPath
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|File
name|getRootDirectory
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|rootDirName
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
name|INIT_ROOT_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|rootDirName
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"Init Parameter '"
operator|+
name|INIT_ROOT_DIRECTORY
operator|+
literal|"' is empty."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|rootDirName
argument_list|)
return|;
block|}
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|httpRequest
parameter_list|,
name|HttpServletResponse
name|httpResponse
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|DavServerRequest
name|davRequest
init|=
operator|new
name|BasicDavServerRequest
argument_list|(
operator|new
name|WrappedRepositoryRequest
argument_list|(
name|httpRequest
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|davServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to service DAV request due to unconfigured DavServerComponent."
argument_list|)
throw|;
block|}
name|requestDebug
argument_list|(
name|httpRequest
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthenticated
argument_list|(
name|davRequest
argument_list|,
name|httpResponse
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isAuthorized
argument_list|(
name|davRequest
argument_list|,
name|httpResponse
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|davServer
operator|.
name|process
argument_list|(
name|davRequest
argument_list|,
name|httpResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DavServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to process request."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setUseIndexHtml
parameter_list|(
name|boolean
name|useIndexHtml
parameter_list|)
block|{
name|davServer
operator|.
name|setUseIndexHtml
argument_list|(
name|useIndexHtml
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DavServerComponent
name|getDavServer
parameter_list|()
block|{
return|return
name|davServer
return|;
block|}
specifier|public
name|void
name|setDavServer
parameter_list|(
name|DavServerComponent
name|davServer
parameter_list|)
block|{
name|this
operator|.
name|davServer
operator|=
name|davServer
expr_stmt|;
block|}
block|}
end_class

end_unit

