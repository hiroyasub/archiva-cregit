begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|security
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|rbac
operator|.
name|RBACManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|redback
operator|.
name|system
operator|.
name|check
operator|.
name|EnvironmentCheck
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ArchivaStandardRolesCheck tests for the existance of expected / standard roles and permissions.   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.codehaus.plexus.redback.system.check.EnvironmentCheck"  *                   role-hint="required-roles"  */
end_comment

begin_class
specifier|public
class|class
name|ArchivaStandardRolesCheck
extends|extends
name|AbstractLogEnabled
implements|implements
name|EnvironmentCheck
block|{
comment|/**      * @plexus.requirement role-hint="cached"      */
specifier|private
name|RBACManager
name|rbacManager
decl_stmt|;
comment|/**      * boolean detailing if this environment check has been executed      */
specifier|private
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|validateEnvironment
parameter_list|(
name|List
name|violations
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checked
condition|)
block|{
name|String
name|expectedRoles
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|ArchivaRoleConstants
operator|.
name|SYSTEM_ADMINISTRATOR_ROLE
block|,
name|ArchivaRoleConstants
operator|.
name|GLOBAL_REPOSITORY_MANAGER_ROLE
block|,
name|ArchivaRoleConstants
operator|.
name|GLOBAL_REPOSITORY_OBSERVER_ROLE
block|,
name|ArchivaRoleConstants
operator|.
name|GUEST_ROLE
block|,
name|ArchivaRoleConstants
operator|.
name|REGISTERED_USER_ROLE
block|,
name|ArchivaRoleConstants
operator|.
name|USER_ADMINISTRATOR_ROLE
block|}
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Checking the existance of required roles."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|expectedRoles
control|)
block|{
if|if
condition|(
operator|!
name|rbacManager
operator|.
name|roleExists
argument_list|(
name|roleName
argument_list|)
condition|)
block|{
name|violations
operator|.
name|add
argument_list|(
literal|"Unable to validate the existances of the '"
operator|+
name|roleName
operator|+
literal|"' role."
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|expectedOperations
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_USERS
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_MANAGE_CONFIGURATION
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_REGENERATE_INDEX
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_RUN_INDEXER
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_ACCESS_REPORT
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_ADD_REPOSITORY
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_DELETE_REPOSITORY
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_ACCESS
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_EDIT_REPOSITORY
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_UPLOAD
block|,
name|ArchivaRoleConstants
operator|.
name|OPERATION_REPOSITORY_ACCESS
block|,
literal|"archiva-guest"
block|}
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Checking the existance of required operations."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|operation
range|:
name|expectedOperations
control|)
block|{
if|if
condition|(
operator|!
name|rbacManager
operator|.
name|operationExists
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|violations
operator|.
name|add
argument_list|(
literal|"Unable to validate the existances of the '"
operator|+
name|operation
operator|+
literal|"' operation."
argument_list|)
expr_stmt|;
block|}
block|}
name|checked
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

