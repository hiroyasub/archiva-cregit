begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|artifact
operator|.
name|builder
operator|.
name|BuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|artifact
operator|.
name|builder
operator|.
name|DefaultLayoutArtifactBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|artifact
operator|.
name|builder
operator|.
name|LayoutArtifactBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|artifact
operator|.
name|builder
operator|.
name|LegacyLayoutArtifactBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|BaseFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|consumer
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|consumer
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|LegacyRepositoryLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DefaultArtifactConsumer   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericArtifactConsumer
extends|extends
name|AbstractConsumer
implements|implements
name|Consumer
block|{
specifier|public
specifier|abstract
name|void
name|processArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|BaseFile
name|file
parameter_list|)
function_decl|;
specifier|private
name|Map
name|artifactBuilders
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
name|includePatterns
decl_stmt|;
static|static
block|{
name|includePatterns
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.pom"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.jar"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.war"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.ear"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.sar"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.zip"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.gz"
argument_list|)
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/*.bz2"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|layoutId
init|=
literal|"default"
decl_stmt|;
specifier|public
name|boolean
name|init
parameter_list|(
name|ArchivaRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|artifactBuilders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|artifactBuilders
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
operator|new
name|DefaultLayoutArtifactBuilder
argument_list|(
name|artifactFactory
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifactBuilders
operator|.
name|put
argument_list|(
literal|"legacy"
argument_list|,
operator|new
name|LegacyLayoutArtifactBuilder
argument_list|(
name|artifactFactory
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|repository
operator|.
name|getLayout
argument_list|()
operator|instanceof
name|LegacyRepositoryLayout
condition|)
block|{
name|this
operator|.
name|layoutId
operator|=
literal|"legacy"
expr_stmt|;
block|}
return|return
name|super
operator|.
name|init
argument_list|(
name|repository
argument_list|)
return|;
block|}
specifier|public
name|List
name|getIncludePatterns
parameter_list|()
block|{
return|return
name|includePatterns
return|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
name|ArtifactRepositoryLayout
name|layout
init|=
name|repository
operator|.
name|getLayout
argument_list|()
decl_stmt|;
return|return
operator|(
name|layout
operator|instanceof
name|DefaultRepositoryLayout
operator|)
operator|||
operator|(
name|layout
operator|instanceof
name|LegacyRepositoryLayout
operator|)
return|;
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|BaseFile
name|file
parameter_list|)
throws|throws
name|ConsumerException
block|{
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|processFileProblem
argument_list|(
name|file
argument_list|,
literal|"File is empty."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|processFileProblem
argument_list|(
name|file
argument_list|,
literal|"Not allowed to read file due to permission settings on file."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Artifact
name|artifact
init|=
name|buildArtifact
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|processArtifact
argument_list|(
name|artifact
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuilderException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|file
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Artifact
name|buildArtifact
parameter_list|(
name|BaseFile
name|file
parameter_list|)
throws|throws
name|BuilderException
block|{
name|LayoutArtifactBuilder
name|builder
init|=
operator|(
name|LayoutArtifactBuilder
operator|)
name|artifactBuilders
operator|.
name|get
argument_list|(
name|layoutId
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|builder
operator|.
name|build
argument_list|(
name|file
operator|.
name|getRelativePath
argument_list|()
argument_list|)
decl_stmt|;
comment|//        artifact.setRepository( repository );
name|artifact
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
block|}
end_class

end_unit

