begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|BaseFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|GroupRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|io
operator|.
name|xpp3
operator|.
name|MetadataXpp3Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|pull
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * GenericRepositoryMetadataConsumer - Consume any maven-metadata.xml files as {@link RepositoryMetadata} objects.   *  * @author<a href="mailto:joakime@apache.org">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericRepositoryMetadataConsumer
extends|extends
name|AbstractConsumer
implements|implements
name|Consumer
block|{
specifier|public
specifier|abstract
name|void
name|processRepositoryMetadata
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|,
name|BaseFile
name|file
parameter_list|)
function_decl|;
specifier|private
specifier|static
specifier|final
name|List
name|includePatterns
decl_stmt|;
static|static
block|{
name|includePatterns
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|includePatterns
operator|.
name|add
argument_list|(
literal|"**/maven-metadata.xml"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getIncludePatterns
parameter_list|()
block|{
return|return
name|includePatterns
return|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
comment|// the RepositoryMetadata objects only exist in 'default' layout repositories.
name|ArtifactRepositoryLayout
name|layout
init|=
name|repository
operator|.
name|getLayout
argument_list|()
decl_stmt|;
return|return
operator|(
name|layout
operator|instanceof
name|DefaultRepositoryLayout
operator|)
return|;
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|BaseFile
name|file
parameter_list|)
throws|throws
name|ConsumerException
block|{
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|file
argument_list|,
literal|"File is empty."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|file
argument_list|,
literal|"Not allowed to read file due to permission settings on file."
argument_list|)
throw|;
block|}
name|RepositoryMetadata
name|metadata
init|=
name|buildMetadata
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|processRepositoryMetadata
argument_list|(
name|metadata
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RepositoryMetadata
name|buildMetadata
parameter_list|(
name|BaseFile
name|metadataFile
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|Metadata
name|m
decl_stmt|;
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|FileReader
argument_list|(
name|metadataFile
argument_list|)
expr_stmt|;
name|MetadataXpp3Reader
name|metadataReader
init|=
operator|new
name|MetadataXpp3Reader
argument_list|()
decl_stmt|;
name|m
operator|=
name|metadataReader
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlPullParserException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|metadataFile
argument_list|,
literal|"Error parsing metadata file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|metadataFile
argument_list|,
literal|"Error reading metadata file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtil
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|RepositoryMetadata
name|repositoryMetadata
init|=
name|buildMetadata
argument_list|(
name|m
argument_list|,
name|metadataFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryMetadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|metadataFile
argument_list|,
literal|"Unable to build a repository metadata from path."
argument_list|)
throw|;
block|}
return|return
name|repositoryMetadata
return|;
block|}
comment|/**      * Builds a RepositoryMetadata object from a Metadata object and its path.      *      * @param m            Metadata      * @param metadataFile file information      * @return RepositoryMetadata if the parameters represent one; null if not      * @throws ConsumerException       */
specifier|private
name|RepositoryMetadata
name|buildMetadata
parameter_list|(
name|Metadata
name|m
parameter_list|,
name|BaseFile
name|metadataFile
parameter_list|)
throws|throws
name|ConsumerException
block|{
if|if
condition|(
name|artifactFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build metadata with a null artifactFactory."
argument_list|)
throw|;
block|}
name|String
name|metaGroupId
init|=
name|m
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
name|String
name|metaArtifactId
init|=
name|m
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|String
name|metaVersion
init|=
name|m
operator|.
name|getVersion
argument_list|()
decl_stmt|;
comment|// check if the groupId, artifactId and version is in the
comment|// metadataPath
comment|// parse the path, in reverse order
name|List
name|pathParts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|metadataFile
operator|.
name|getRelativePath
argument_list|()
argument_list|,
literal|"/\\"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|pathParts
operator|.
name|add
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|pathParts
argument_list|)
expr_stmt|;
comment|// remove the metadata file
name|pathParts
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|pathParts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|tmpDir
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
name|artifact
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|metaVersion
argument_list|)
condition|)
block|{
name|artifact
operator|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|metaGroupId
argument_list|,
name|metaArtifactId
argument_list|,
name|metaVersion
argument_list|)
expr_stmt|;
block|}
comment|// snapshotMetadata
name|RepositoryMetadata
name|metadata
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tmpDir
operator|!=
literal|null
operator|&&
name|tmpDir
operator|.
name|equals
argument_list|(
name|metaVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|tmpDir
operator|!=
literal|null
operator|&&
name|tmpDir
operator|.
name|equals
argument_list|(
name|metaArtifactId
argument_list|)
condition|)
block|{
comment|// artifactMetadata
if|if
condition|(
name|artifact
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|artifact
operator|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|metaGroupId
argument_list|,
name|metaArtifactId
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|groupDir
init|=
literal|""
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|it
operator|=
name|pathParts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctr
operator|==
literal|0
condition|)
block|{
name|groupDir
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|groupDir
operator|=
name|path
operator|+
literal|"."
operator|+
name|groupDir
expr_stmt|;
block|}
name|ctr
operator|++
expr_stmt|;
block|}
comment|// groupMetadata
if|if
condition|(
name|metaGroupId
operator|!=
literal|null
operator|&&
name|metaGroupId
operator|.
name|equals
argument_list|(
name|groupDir
argument_list|)
condition|)
block|{
name|metadata
operator|=
operator|new
name|GroupRepositoryMetadata
argument_list|(
name|metaGroupId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* If we reached this point, we have some bad metadata.                  * We have a metadata file, with values for groupId / artifactId / version.                  * But the information it is providing does not exist relative to the file location.                  *                   * See ${basedir}/src/test/repository/javax/maven-metadata.xml for example                  */
throw|throw
operator|new
name|ConsumerException
argument_list|(
name|metadataFile
argument_list|,
literal|"Contents of metadata are not appropriate for its location on disk."
argument_list|)
throw|;
block|}
block|}
return|return
name|metadata
return|;
block|}
block|}
end_class

end_unit

