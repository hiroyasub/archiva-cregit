begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|PlexusContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|context
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|context
operator|.
name|ContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|Contextualizable
import|;
end_import

begin_comment
comment|/**  * DiscovererConsumerFactory - factory for consumers.  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  * @plexus.component role="org.apache.maven.archiva.common.consumers.ConsumerFactory"  */
end_comment

begin_class
specifier|public
class|class
name|ConsumerFactory
extends|extends
name|AbstractLogEnabled
implements|implements
name|Contextualizable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROLE
init|=
name|ConsumerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|PlexusContainer
name|container
decl_stmt|;
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ConsumerException
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Attempting to create consumer ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Consumer
name|consumer
decl_stmt|;
try|try
block|{
name|consumer
operator|=
operator|(
name|Consumer
operator|)
name|container
operator|.
name|lookup
argument_list|(
name|Consumer
operator|.
name|ROLE
argument_list|,
name|name
argument_list|,
name|container
operator|.
name|getLookupRealm
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|emsg
init|=
literal|"Unable to create consumer ["
operator|+
name|name
operator|+
literal|"]: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConsumerException
argument_list|(
literal|null
argument_list|,
name|emsg
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created consumer ["
operator|+
name|name
operator|+
literal|"|"
operator|+
name|consumer
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
specifier|public
name|void
name|contextualize
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|ContextException
block|{
name|container
operator|=
operator|(
name|PlexusContainer
operator|)
name|context
operator|.
name|get
argument_list|(
name|PlexusConstants
operator|.
name|PLEXUS_KEY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

