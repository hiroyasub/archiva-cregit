begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|BaseFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|consumer
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * FileProblemsTracker  *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|FileProblemsTracker
block|{
specifier|private
name|Map
name|problemMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addProblem
parameter_list|(
name|BaseFile
name|file
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|String
name|path
init|=
name|file
operator|.
name|getRelativePath
argument_list|()
decl_stmt|;
name|addProblem
argument_list|(
name|path
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addProblem
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|path
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|path
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|List
name|problems
init|=
name|getProblems
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|problems
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|problemMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProblem
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|addProblem
argument_list|(
name|e
operator|.
name|getFile
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|addProblem
argument_list|(
literal|"|fatal|"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasProblems
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|problemMap
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// No tracking of path at all.
return|return
literal|false
return|;
block|}
name|List
name|problems
init|=
operator|(
name|List
operator|)
name|problemMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
comment|// found path, but no list.
return|return
literal|false
return|;
block|}
return|return
operator|!
name|problems
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Set
name|getPaths
parameter_list|()
block|{
return|return
name|problemMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|List
name|getProblems
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
name|problems
init|=
operator|(
name|List
operator|)
name|problemMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|problems
operator|==
literal|null
condition|)
block|{
name|problems
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
return|return
name|problems
return|;
block|}
specifier|public
name|int
name|getProblemCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|problemMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|problems
init|=
operator|(
name|List
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|problems
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

