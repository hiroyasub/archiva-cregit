begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|consumers
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|utils
operator|.
name|BaseFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|ArchivaRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|repository
operator|.
name|consumer
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * GenericArtifactConsumerTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|GenericArtifactConsumerTest
extends|extends
name|AbstractGenericConsumerTestCase
block|{
specifier|private
name|MockArtifactConsumer
name|getMockArtifactConsumer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|MockArtifactConsumer
operator|)
name|consumerFactory
operator|.
name|createConsumer
argument_list|(
literal|"mock-artifact"
argument_list|)
return|;
block|}
specifier|public
name|void
name|testScanLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|ArchivaRepository
name|repository
init|=
name|getLegacyRepository
argument_list|()
decl_stmt|;
name|List
name|consumers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|MockArtifactConsumer
name|mockConsumer
init|=
name|getMockArtifactConsumer
argument_list|()
decl_stmt|;
name|mockConsumer
operator|.
name|init
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|mockConsumer
argument_list|)
expr_stmt|;
name|List
name|files
init|=
name|getLegacyLayoutArtifactPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|mockConsumer
operator|.
name|processFile
argument_list|(
operator|new
name|BaseFile
argument_list|(
name|repository
operator|.
name|getRepositoryURL
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
name|mockConsumer
operator|.
name|getProblemsTracker
argument_list|()
operator|.
name|addProblem
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|consumers
argument_list|)
expr_stmt|;
name|FileProblemsTracker
name|tracker
init|=
name|mockConsumer
operator|.
name|getProblemsTracker
argument_list|()
decl_stmt|;
name|assertTracker
argument_list|(
name|tracker
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|assertHasFailureMessage
argument_list|(
literal|"Path does not match a legacy repository path for an artifact"
argument_list|,
literal|"invalid/invalid-1.0.jar"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|assertHasFailureMessage
argument_list|(
literal|"Path filename version is empty"
argument_list|,
literal|"invalid/jars/invalid.jar"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|assertHasFailureMessage
argument_list|(
literal|"Path does not match a legacy repository path for an artifact"
argument_list|,
literal|"invalid/jars/1.0/invalid-1.0.jar"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mockConsumer
operator|.
name|getArtifactMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testScanDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ArchivaRepository
name|repository
init|=
name|getDefaultRepository
argument_list|()
decl_stmt|;
name|List
name|consumers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|MockArtifactConsumer
name|mockConsumer
init|=
name|getMockArtifactConsumer
argument_list|()
decl_stmt|;
name|mockConsumer
operator|.
name|init
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|mockConsumer
argument_list|)
expr_stmt|;
name|List
name|files
init|=
name|getDefaultLayoutArtifactPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|mockConsumer
operator|.
name|processFile
argument_list|(
operator|new
name|BaseFile
argument_list|(
name|repository
operator|.
name|getRepositoryURL
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
name|mockConsumer
operator|.
name|getProblemsTracker
argument_list|()
operator|.
name|addProblem
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test gathered information from Mock consumer.
name|assertNotNull
argument_list|(
name|consumers
argument_list|)
expr_stmt|;
name|FileProblemsTracker
name|tracker
init|=
name|mockConsumer
operator|.
name|getProblemsTracker
argument_list|()
decl_stmt|;
name|assertTracker
argument_list|(
name|tracker
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|assertHasFailureMessage
argument_list|(
literal|"Failed to create a snapshot artifact: invalid:invalid:jar:1.0:runtime"
argument_list|,
literal|"invalid/invalid/1.0-SNAPSHOT/invalid-1.0.jar"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|assertHasFailureMessage
argument_list|(
literal|"Path is too short to build an artifact from."
argument_list|,
literal|"invalid/invalid-1.0.jar"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|assertHasFailureMessage
argument_list|(
literal|"Built artifact version does not match path version"
argument_list|,
literal|"invalid/invalid/1.0/invalid-2.0.jar"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|mockConsumer
operator|.
name|getArtifactMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test for known include artifacts
name|Collection
name|artifacts
init|=
name|mockConsumer
operator|.
name|getArtifactMap
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"testing"
argument_list|,
literal|"1.0"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"some-ejb"
argument_list|,
literal|"1.0"
argument_list|,
literal|"jar"
argument_list|,
literal|"client"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"testing"
argument_list|,
literal|"1.0"
argument_list|,
literal|"java-source"
argument_list|,
literal|"sources"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"testing"
argument_list|,
literal|"1.0"
argument_list|,
literal|"java-source"
argument_list|,
literal|"test-sources"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"testing"
argument_list|,
literal|"1.0"
argument_list|,
literal|"distribution-zip"
argument_list|,
literal|null
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"testing"
argument_list|,
literal|"1.0"
argument_list|,
literal|"distribution-tgz"
argument_list|,
literal|null
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"javax.sql"
argument_list|,
literal|"jdbc"
argument_list|,
literal|"2.0"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"test"
argument_list|,
literal|"1.0-20050611.112233-1"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|assertHasArtifact
argument_list|(
literal|"org.apache.maven"
argument_list|,
literal|"test"
argument_list|,
literal|"1.0-20050611.112233-1"
argument_list|,
literal|"jar"
argument_list|,
literal|"javadoc"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
comment|// Test for known excluded files and dirs to validate exclusions.
name|Iterator
name|it
init|=
name|mockConsumer
operator|.
name|getArtifactMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Artifact
name|a
init|=
operator|(
name|Artifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Artifact "
operator|+
name|a
operator|+
literal|" should have it's .getFile() set."
argument_list|,
name|a
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Artifact "
operator|+
name|a
operator|+
literal|" should have it's .getRepository() set."
argument_list|,
name|a
operator|.
name|getRepository
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Artifact "
operator|+
name|a
operator|+
literal|" should have non-null repository url."
argument_list|,
name|a
operator|.
name|getRepository
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check not CVS"
argument_list|,
name|a
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"CVS"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Check not .svn"
argument_list|,
name|a
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|".svn"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dumpProblems
parameter_list|(
name|FileProblemsTracker
name|tracker
parameter_list|)
block|{
name|int
name|problemNum
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- ProblemTracker dump -------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|itPaths
init|=
name|tracker
operator|.
name|getPaths
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|itPaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" ["
operator|+
name|problemNum
operator|+
literal|"]: "
operator|+
name|path
argument_list|)
expr_stmt|;
name|int
name|messageNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|itProblems
init|=
name|tracker
operator|.
name|getProblems
argument_list|(
name|path
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|itProblems
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|message
init|=
operator|(
name|String
operator|)
name|itProblems
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    ["
operator|+
name|messageNum
operator|+
literal|"]: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|messageNum
operator|++
expr_stmt|;
block|}
name|problemNum
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTracker
parameter_list|(
name|FileProblemsTracker
name|tracker
parameter_list|,
name|int
name|expectedProblemCount
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"ProblemsTracker should not be null."
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|int
name|actualProblemCount
init|=
name|tracker
operator|.
name|getProblemCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedProblemCount
operator|!=
name|actualProblemCount
condition|)
block|{
name|dumpProblems
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Problem count (across all paths) expected:<"
operator|+
name|expectedProblemCount
operator|+
literal|">, actual:<"
operator|+
name|actualProblemCount
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertHasFailureMessage
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|path
parameter_list|,
name|FileProblemsTracker
name|tracker
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tracker
operator|.
name|hasProblems
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"There are no messages for expected path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Unable to find message ["
operator|+
name|message
operator|+
literal|"] in path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|tracker
operator|.
name|getProblems
argument_list|(
name|path
argument_list|)
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertHasArtifact
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|classifier
parameter_list|,
name|Collection
name|collection
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|groupId
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|artifactId
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|type
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|classifier
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
comment|// Found it!
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Was unable to find artifact "
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
operator|+
literal|":"
operator|+
name|type
operator|+
literal|":"
operator|+
name|classifier
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

