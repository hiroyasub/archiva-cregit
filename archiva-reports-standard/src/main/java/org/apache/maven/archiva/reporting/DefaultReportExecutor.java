begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|ArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|DiscovererException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|MetadataDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|filter
operator|.
name|AcceptAllMetadataFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|InvalidArtifactRTException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|LegacyRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|ProjectBuildingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Report executor implementation.  *  * @todo should the report set be limitable by configuration?  * @plexus.component  */
end_comment

begin_class
specifier|public
class|class
name|DefaultReportExecutor
extends|extends
name|AbstractLogEnabled
implements|implements
name|ReportExecutor
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|MavenProjectBuilder
name|projectBuilder
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ReportingStore
name|reportingStore
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.discoverer.ArtifactDiscoverer"      */
specifier|private
name|Map
name|artifactDiscoverers
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.discoverer.MetadataDiscoverer"      */
specifier|private
name|Map
name|metadataDiscoverers
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ARTIFACT_BUFFER_SIZE
init|=
literal|1000
decl_stmt|;
specifier|public
name|void
name|runMetadataReports
parameter_list|(
name|ReportGroup
name|reportGroup
parameter_list|,
name|List
name|metadata
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|ReportingStoreException
block|{
name|ReportingDatabase
name|reporter
init|=
name|getReportDatabase
argument_list|(
name|repository
argument_list|,
name|reportGroup
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|metadata
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryMetadata
name|repositoryMetadata
init|=
operator|(
name|RepositoryMetadata
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|repository
operator|.
name|pathOfRemoteRepositoryMetadata
argument_list|(
name|repositoryMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|cleanMetadata
argument_list|(
name|repositoryMetadata
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|reportGroup
operator|.
name|processMetadata
argument_list|(
name|repositoryMetadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
name|reportingStore
operator|.
name|storeReports
argument_list|(
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runArtifactReports
parameter_list|(
name|ReportGroup
name|reportGroup
parameter_list|,
name|List
name|artifacts
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
throws|throws
name|ReportingStoreException
block|{
name|ReportingDatabase
name|reporter
init|=
name|getReportDatabase
argument_list|(
name|repository
argument_list|,
name|reportGroup
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Model
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Artifact
name|pomArtifact
init|=
name|artifactFactory
operator|.
name|createProjectArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|MavenProject
name|project
init|=
name|projectBuilder
operator|.
name|buildFromRepository
argument_list|(
name|pomArtifact
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|model
operator|=
name|project
operator|.
name|getModel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidArtifactRTException
name|e
parameter_list|)
block|{
name|reporter
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Invalid artifact ["
operator|+
name|artifact
operator|+
literal|"] : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProjectBuildingException
name|e
parameter_list|)
block|{
name|reporter
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Error reading project model: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|reporter
operator|.
name|removeArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|reportGroup
operator|.
name|processArtifact
argument_list|(
name|artifact
argument_list|,
name|model
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
name|reportingStore
operator|.
name|storeReports
argument_list|(
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReportingDatabase
name|getReportDatabase
parameter_list|(
name|ArtifactRepository
name|repository
parameter_list|,
name|ReportGroup
name|reportGroup
parameter_list|)
throws|throws
name|ReportingStoreException
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Reading previous report database "
operator|+
name|reportGroup
operator|.
name|getName
argument_list|()
operator|+
literal|" from repository "
operator|+
name|repository
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reportingStore
operator|.
name|getReportsFromStore
argument_list|(
name|repository
argument_list|,
name|reportGroup
argument_list|)
return|;
block|}
specifier|public
name|void
name|runReports
parameter_list|(
name|ReportGroup
name|reportGroup
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|,
name|List
name|blacklistedPatterns
parameter_list|,
name|ArtifactFilter
name|filter
parameter_list|)
throws|throws
name|DiscovererException
throws|,
name|ReportingStoreException
block|{
comment|// Flush (as in toilet, not store) the report database
name|ReportingDatabase
name|database
init|=
name|getReportDatabase
argument_list|(
name|repository
argument_list|,
name|reportGroup
argument_list|)
decl_stmt|;
name|database
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Discovery process
name|String
name|layoutProperty
init|=
name|getRepositoryLayout
argument_list|(
name|repository
operator|.
name|getLayout
argument_list|()
argument_list|)
decl_stmt|;
name|ArtifactDiscoverer
name|discoverer
init|=
operator|(
name|ArtifactDiscoverer
operator|)
name|artifactDiscoverers
operator|.
name|get
argument_list|(
name|layoutProperty
argument_list|)
decl_stmt|;
comment|// Save some memory by not tracking paths we won't use
comment|// TODO: Plexus CDC should be able to inject this configuration
name|discoverer
operator|.
name|setTrackOmittedPaths
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
name|artifacts
init|=
name|discoverer
operator|.
name|discoverArtifacts
argument_list|(
name|repository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifacts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Discovered "
operator|+
name|artifacts
operator|.
name|size
argument_list|()
operator|+
literal|" artifacts"
argument_list|)
expr_stmt|;
comment|// Work through these in batches, then flush the project cache.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|size
argument_list|()
condition|;
name|j
operator|+=
name|ARTIFACT_BUFFER_SIZE
control|)
block|{
name|int
name|end
init|=
name|j
operator|+
name|ARTIFACT_BUFFER_SIZE
decl_stmt|;
name|List
name|currentArtifacts
init|=
name|artifacts
operator|.
name|subList
argument_list|(
name|j
argument_list|,
name|end
operator|>
name|artifacts
operator|.
name|size
argument_list|()
condition|?
name|artifacts
operator|.
name|size
argument_list|()
else|:
name|end
argument_list|)
decl_stmt|;
comment|// TODO: proper queueing of this in case it was triggered externally (not harmful to do so at present, but not optimal)
comment|// run the reports.
name|runArtifactReports
argument_list|(
name|reportGroup
argument_list|,
name|currentArtifacts
argument_list|,
name|repository
argument_list|)
expr_stmt|;
comment|// MNG-142 - the project builder retains a lot of objects in its inflexible cache. This is a hack
comment|// around that. TODO: remove when it is configurable
name|flushProjectBuilderCacheHack
argument_list|()
expr_stmt|;
block|}
block|}
name|MetadataDiscoverer
name|metadataDiscoverer
init|=
operator|(
name|MetadataDiscoverer
operator|)
name|metadataDiscoverers
operator|.
name|get
argument_list|(
name|layoutProperty
argument_list|)
decl_stmt|;
name|List
name|metadata
init|=
name|metadataDiscoverer
operator|.
name|discoverMetadata
argument_list|(
name|repository
argument_list|,
name|blacklistedPatterns
argument_list|,
operator|new
name|AcceptAllMetadataFilter
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Discovered "
operator|+
name|metadata
operator|.
name|size
argument_list|()
operator|+
literal|" metadata files"
argument_list|)
expr_stmt|;
comment|// run the reports
name|runMetadataReports
argument_list|(
name|reportGroup
argument_list|,
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRepositoryLayout
parameter_list|(
name|ArtifactRepositoryLayout
name|layout
parameter_list|)
block|{
comment|// gross limitation that there is no reverse lookup of the hint for the layout.
if|if
condition|(
name|layout
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|DefaultRepositoryLayout
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|"default"
return|;
block|}
if|else if
condition|(
name|layout
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|LegacyRepositoryLayout
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|"legacy"
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown layout: "
operator|+
name|layout
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|flushProjectBuilderCacheHack
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|projectBuilder
operator|!=
literal|null
condition|)
block|{
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|f
init|=
name|projectBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"rawProjectCache"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
name|cache
init|=
operator|(
name|Map
operator|)
name|f
operator|.
name|get
argument_list|(
name|projectBuilder
argument_list|)
decl_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|f
operator|=
name|projectBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"processedProjectCache"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|(
name|Map
operator|)
name|f
operator|.
name|get
argument_list|(
name|projectBuilder
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

