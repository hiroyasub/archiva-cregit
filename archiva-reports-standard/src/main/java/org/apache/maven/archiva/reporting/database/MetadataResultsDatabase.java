begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|MetadataResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|MetadataResultsKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|ResultReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOObjectNotFoundException
import|;
end_import

begin_comment
comment|/**  * MetadataResultsDatabase   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.apache.maven.archiva.reporting.database.MetadataResultsDatabase"  */
end_comment

begin_class
specifier|public
class|class
name|MetadataResultsDatabase
extends|extends
name|AbstractResultsDatabase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROLE
init|=
name|MetadataResultsDatabase
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addFailure
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|,
name|String
name|processor
parameter_list|,
name|String
name|problem
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|MetadataResults
name|results
init|=
name|getMetadataResults
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|ResultReason
name|result
init|=
name|createResultReason
argument_list|(
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|contains
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|results
operator|.
name|addFailure
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|saveObject
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWarning
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|,
name|String
name|processor
parameter_list|,
name|String
name|problem
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|MetadataResults
name|results
init|=
name|getMetadataResults
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|ResultReason
name|result
init|=
name|createResultReason
argument_list|(
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|contains
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|results
operator|.
name|addWarning
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|saveObject
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNotice
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|,
name|String
name|processor
parameter_list|,
name|String
name|problem
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|MetadataResults
name|results
init|=
name|getMetadataResults
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|ResultReason
name|result
init|=
name|createResultReason
argument_list|(
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|contains
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|results
operator|.
name|addNotice
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|saveObject
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearResults
parameter_list|(
name|MetadataResults
name|results
parameter_list|)
block|{
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|saveObject
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getAllMetadataResults
parameter_list|()
block|{
return|return
name|getAllObjects
argument_list|(
name|MetadataResults
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|getIterator
parameter_list|()
block|{
name|List
name|allmetadatas
init|=
name|getAllMetadataResults
argument_list|()
decl_stmt|;
if|if
condition|(
name|allmetadatas
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
operator|.
name|iterator
argument_list|()
return|;
block|}
return|return
name|allmetadatas
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|MetadataResults
name|results
parameter_list|)
block|{
name|removeObject
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
block|{
try|try
block|{
name|MetadataResults
name|results
init|=
name|lookupMetadataResults
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOObjectNotFoundException
name|e
parameter_list|)
block|{
comment|// nothing to do.
block|}
block|}
specifier|public
name|MetadataResults
name|getMetadataResults
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
block|{
name|MetadataResults
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|lookupMetadataResults
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOObjectNotFoundException
name|e
parameter_list|)
block|{
name|results
operator|=
name|createMetadataResults
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|MetadataResults
name|createMetadataResults
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
block|{
comment|/* The funky StringUtils.defaultString() is used because of database constraints.          * The MetadataResults object has a complex primary key consisting of groupId, artifactId, and version.          * This also means that none of those fields may be null.  however, that doesn't eliminate the          * ability to have an empty string in place of a null.          */
name|MetadataResults
name|results
init|=
operator|new
name|MetadataResults
argument_list|()
decl_stmt|;
name|results
operator|.
name|setGroupId
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|setArtifactId
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|setVersion
argument_list|(
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|metadata
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|private
name|MetadataResults
name|lookupMetadataResults
parameter_list|(
name|RepositoryMetadata
name|metadata
parameter_list|)
block|{
comment|/* The funky StringUtils.defaultString() is used because of database constraints.          * The MetadataResults object has a complex primary key consisting of groupId, artifactId, and version.          * This also means that none of those fields may be null.  however, that doesn't eliminate the          * ability to have an empty string in place of a null.          */
name|MetadataResultsKey
name|key
init|=
operator|new
name|MetadataResultsKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|groupId
operator|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|key
operator|.
name|artifactId
operator|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|key
operator|.
name|version
operator|=
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|metadata
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
name|MetadataResults
operator|)
name|getObjectByKey
argument_list|(
name|MetadataResults
operator|.
name|class
argument_list|,
name|key
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumFailures
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getNumNotices
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getNumWarnings
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

