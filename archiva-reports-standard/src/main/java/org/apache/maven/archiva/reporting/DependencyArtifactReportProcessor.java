begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|layer
operator|.
name|RepositoryQueryLayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|layer
operator|.
name|RepositoryQueryLayerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|InvalidVersionSpecificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @plexus.component role="org.apache.maven.archiva.reporting.ArtifactReportProcessor" role-hint="dependency"  */
end_comment

begin_class
specifier|public
class|class
name|DependencyArtifactReportProcessor
implements|implements
name|ArtifactReportProcessor
block|{
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryQueryLayerFactory
name|layerFactory
decl_stmt|;
specifier|public
name|void
name|processArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Model
name|model
parameter_list|,
name|ReportingDatabase
name|reporter
parameter_list|)
block|{
name|RepositoryQueryLayer
name|queryLayer
init|=
name|layerFactory
operator|.
name|createRepositoryQueryLayer
argument_list|(
name|artifact
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|processArtifact
argument_list|(
name|artifact
argument_list|,
name|reporter
argument_list|,
name|queryLayer
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|List
name|dependencies
init|=
name|model
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|processDependencies
argument_list|(
name|dependencies
argument_list|,
name|reporter
argument_list|,
name|queryLayer
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ReportingDatabase
name|reporter
parameter_list|,
name|RepositoryQueryLayer
name|repositoryQueryLayer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|repositoryQueryLayer
operator|.
name|containsArtifact
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|reporter
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
literal|"Artifact does not exist in the repository"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processDependencies
parameter_list|(
name|List
name|dependencies
parameter_list|,
name|ReportingDatabase
name|reporter
parameter_list|,
name|RepositoryQueryLayer
name|repositoryQueryLayer
parameter_list|,
name|Artifact
name|sourceArtifact
parameter_list|)
block|{
if|if
condition|(
name|dependencies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|iterator
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Artifact
name|artifact
init|=
name|createArtifact
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryQueryLayer
operator|.
name|containsArtifact
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|String
name|reason
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Artifact''s dependency {0} does not exist in the repository"
argument_list|,
operator|new
name|String
index|[]
block|{
name|dependency
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|addFailure
argument_list|(
name|sourceArtifact
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidVersionSpecificationException
name|e
parameter_list|)
block|{
name|String
name|reason
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Artifact''s dependency {0} contains an invalid version {1}"
argument_list|,
operator|new
name|String
index|[]
block|{
name|dependency
operator|.
name|toString
argument_list|()
block|,
name|dependency
operator|.
name|getVersion
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|addFailure
argument_list|(
name|sourceArtifact
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Artifact
name|createArtifact
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
throws|throws
name|InvalidVersionSpecificationException
block|{
return|return
name|artifactFactory
operator|.
name|createDependencyArtifact
argument_list|(
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|VersionRange
operator|.
name|createFromVersionSpec
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|dependency
operator|.
name|getType
argument_list|()
argument_list|,
name|dependency
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

