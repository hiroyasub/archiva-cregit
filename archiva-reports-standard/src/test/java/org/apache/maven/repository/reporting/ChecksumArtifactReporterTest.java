begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|reporting
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|ArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|DefaultArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|GroupRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|SnapshotArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|digest
operator|.
name|DigesterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * This class tests the ChecksumArtifactReporter.  * It extends the AbstractChecksumArtifactReporterTestCase class.  */
end_comment

begin_class
specifier|public
class|class
name|ChecksumArtifactReporterTest
extends|extends
name|AbstractChecksumArtifactReporterTestCase
block|{
specifier|private
name|ArtifactReportProcessor
name|artifactReportProcessor
decl_stmt|;
specifier|private
name|ArtifactReporter
name|reporter
init|=
operator|new
name|MockArtifactReporter
argument_list|()
decl_stmt|;
specifier|private
name|MetadataReportProcessor
name|metadataReportProcessor
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|artifactReportProcessor
operator|=
operator|(
name|ArtifactReportProcessor
operator|)
name|lookup
argument_list|(
name|ArtifactReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"checksum"
argument_list|)
expr_stmt|;
name|metadataReportProcessor
operator|=
operator|(
name|MetadataReportProcessor
operator|)
name|lookup
argument_list|(
name|MetadataReportProcessor
operator|.
name|ROLE
argument_list|,
literal|"checksum-metadata"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the ChecksumArtifactReporter when the checksum files are valid.      */
specifier|public
name|void
name|testChecksumArtifactReporterSuccess
parameter_list|()
throws|throws
name|ReportProcessorException
throws|,
name|IOException
throws|,
name|DigesterException
block|{
name|createChecksumFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|createChecksumFile
argument_list|(
literal|"INVALID"
argument_list|)
expr_stmt|;
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
literal|null
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reporter
operator|.
name|getSuccesses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the ChecksumArtifactReporter when the checksum files are invalid.      */
specifier|public
name|void
name|testChecksumArtifactReporterFailed
parameter_list|()
throws|throws
name|ReportProcessorException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"invalidArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
literal|null
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reporter
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the valid checksum of a metadata file.      * The reporter should report 2 success validation.      */
specifier|public
name|void
name|testChecksumMetadataReporterSuccess
parameter_list|()
throws|throws
name|ReportProcessorException
throws|,
name|DigesterException
throws|,
name|IOException
block|{
name|createMetadataFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|createMetadataFile
argument_list|(
literal|"INVALID"
argument_list|)
expr_stmt|;
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
comment|//Version level metadata
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
comment|//Artifact level metadata
name|metadata
operator|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
comment|//Group level metadata
name|metadata
operator|=
operator|new
name|GroupRepositoryMetadata
argument_list|(
literal|"checksumTest"
argument_list|)
expr_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getRepositoryMetadataSuccessIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check if there is a success"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the corrupted checksum of a metadata file.      * The reporter must report 2 failures.      */
specifier|public
name|void
name|testChecksumMetadataReporterFailure
parameter_list|()
throws|throws
name|ReportProcessorException
block|{
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"invalidArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getRepositoryMetadataFailureIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check if there is a failure"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the checksum of an artifact located in a remote location.      */
comment|/*   public void testChecksumArtifactRemote()     {         ArtifactHandler handler = new DefaultArtifactHandler( remoteArtifactType );         VersionRange version = VersionRange.createFromVersion( remoteArtifactVersion );         Artifact artifact = new DefaultArtifact( remoteArtifactGroup, remoteArtifactId, version, remoteArtifactScope,                                                  remoteArtifactType, "", handler );         ArtifactRepository repository = new DefaultArtifactRepository( remoteRepoId, remoteRepoUrl,                                                                        new DefaultRepositoryLayout() );          artifactReportProcessor.processArtifact( null, artifact, reporter, repository );         if ( reporter.getFailures() == 2 )             assertTrue( reporter.getFailures() == 2 );          if ( reporter.getSuccesses() == 2 )             assertTrue( reporter.getSuccesses() == 2 );      }     */
comment|/**      * Test the checksum of a metadata file located in a remote location.      */
comment|/*   public void testChecksumMetadataRemote()     {          try         {             ArtifactHandler handler = new DefaultArtifactHandler( remoteArtifactType );             VersionRange version = VersionRange.createFromVersion( remoteArtifactVersion );             Artifact artifact = new DefaultArtifact( remoteArtifactGroup, remoteArtifactId, version,                                                      remoteArtifactScope, remoteArtifactType, "", handler );             ArtifactRepository repository = new DefaultArtifactRepository( remoteRepoId, remoteRepoUrl,                                                                            new DefaultRepositoryLayout() );              RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata( artifact );              metadataReportProcessor.processMetadata( metadata, repository, reporter );             Iterator iter = reporter.getRepositoryMetadataFailureIterator();             if ( iter.hasNext() )                 assertTrue( "check if there is a failure", iter.hasNext() );              iter = reporter.getRepositoryMetadataSuccessIterator();             if ( iter.hasNext() )                 assertTrue( "check if there is a success", iter.hasNext() );          }         catch ( Exception e )         {             e.printStackTrace();         }     }     */
comment|/**      * Test the conditional when the checksum files of the artifact& metadata do not exist.      */
specifier|public
name|void
name|testChecksumFilesDoNotExist
parameter_list|()
throws|throws
name|ReportProcessorException
throws|,
name|DigesterException
throws|,
name|IOException
block|{
name|createChecksumFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|createMetadataFile
argument_list|(
literal|"VALID"
argument_list|)
expr_stmt|;
name|deleteChecksumFiles
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|ArtifactHandler
name|handler
init|=
operator|new
name|DefaultArtifactHandler
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|VersionRange
name|version
init|=
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"checksumTest"
argument_list|,
literal|"validArtifact"
argument_list|,
name|version
argument_list|,
literal|"compile"
argument_list|,
literal|"jar"
argument_list|,
literal|""
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|artifactReportProcessor
operator|.
name|processArtifact
argument_list|(
literal|null
argument_list|,
name|artifact
argument_list|,
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reporter
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryMetadata
name|metadata
init|=
operator|new
name|SnapshotArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|metadataReportProcessor
operator|.
name|processMetadata
argument_list|(
name|metadata
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|reporter
operator|.
name|getRepositoryMetadataFailureIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check if there is a failure"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|deleteTestDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|repository
operator|.
name|getBasedir
argument_list|()
operator|+
literal|"checksumTest"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

