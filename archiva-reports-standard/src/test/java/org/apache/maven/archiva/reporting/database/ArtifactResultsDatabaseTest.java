begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|AbstractRepositoryReportsTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|ArtifactResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ArtifactResultsDatabaseTest   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ArtifactResultsDatabaseTest
extends|extends
name|AbstractRepositoryReportsTestCase
block|{
specifier|private
name|Artifact
name|artifact
decl_stmt|;
specifier|private
name|String
name|processor
decl_stmt|,
name|problem
decl_stmt|,
name|reason
decl_stmt|;
specifier|private
name|ArtifactResultsDatabase
name|database
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|database
operator|=
operator|(
name|ArtifactResultsDatabase
operator|)
name|lookup
argument_list|(
name|ArtifactResultsDatabase
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|artifact
operator|=
operator|new
name|DefaultArtifact
argument_list|(
literal|"group"
argument_list|,
literal|"artifact"
argument_list|,
name|VersionRange
operator|.
name|createFromVersion
argument_list|(
literal|"1.0"
argument_list|)
argument_list|,
literal|"scope"
argument_list|,
literal|"type"
argument_list|,
literal|"classifier"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|processor
operator|=
literal|"processor"
expr_stmt|;
name|problem
operator|=
literal|"problem"
expr_stmt|;
name|reason
operator|=
literal|"reason"
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|release
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testAddNoticeArtifactStringStringString
parameter_list|()
block|{
name|database
operator|.
name|addNotice
argument_list|(
name|artifact
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|ArtifactResults
name|artifactResults
init|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|database
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactResults
operator|.
name|getNotices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|addNotice
argument_list|(
name|artifact
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|artifactResults
operator|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|database
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactResults
operator|.
name|getNotices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddWarningArtifactStringStringString
parameter_list|()
block|{
name|database
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|ArtifactResults
name|artifactResults
init|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|database
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactResults
operator|.
name|getWarnings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|artifactResults
operator|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|database
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactResults
operator|.
name|getWarnings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddFailureArtifactStringStringString
parameter_list|()
block|{
name|database
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|ArtifactResults
name|artifactResults
init|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|database
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactResults
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|artifactResults
operator|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|database
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifactResults
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFindArtifactResults
parameter_list|()
block|{
name|String
name|groupId
init|=
literal|"org.test.group"
decl_stmt|;
name|Artifact
name|bar
init|=
name|createArtifact
argument_list|(
literal|"org.bar"
argument_list|,
literal|"bar"
argument_list|,
literal|"2.0"
argument_list|)
decl_stmt|;
name|Artifact
name|foo
init|=
name|createArtifact
argument_list|(
name|groupId
argument_list|,
literal|"foo"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Artifact
name|fooSources
init|=
name|createArtifactWithClassifier
argument_list|(
name|groupId
argument_list|,
literal|"foo"
argument_list|,
literal|"1.0"
argument_list|,
literal|"jar"
argument_list|,
literal|"sources"
argument_list|)
decl_stmt|;
name|Artifact
name|fooJavadoc
init|=
name|createArtifactWithClassifier
argument_list|(
name|groupId
argument_list|,
literal|"foo"
argument_list|,
literal|"1.0"
argument_list|,
literal|"jar"
argument_list|,
literal|"javadoc"
argument_list|)
decl_stmt|;
name|database
operator|.
name|addFailure
argument_list|(
name|bar
argument_list|,
name|processor
argument_list|,
name|problem
argument_list|,
literal|"A reason that should not be found."
argument_list|)
expr_stmt|;
name|String
name|testprocessor
init|=
literal|"test-processor"
decl_stmt|;
name|String
name|testproblem
init|=
literal|"test-problem"
decl_stmt|;
name|database
operator|.
name|addFailure
argument_list|(
name|foo
argument_list|,
name|testprocessor
argument_list|,
name|testproblem
argument_list|,
literal|"Test Reason on main jar."
argument_list|)
expr_stmt|;
name|database
operator|.
name|addFailure
argument_list|(
name|foo
argument_list|,
name|testprocessor
argument_list|,
name|testproblem
argument_list|,
literal|"Someone mistook this for an actual reason."
argument_list|)
expr_stmt|;
name|database
operator|.
name|addWarning
argument_list|(
name|foo
argument_list|,
name|testprocessor
argument_list|,
name|testproblem
argument_list|,
literal|"Congrats you have a test reason."
argument_list|)
expr_stmt|;
name|database
operator|.
name|addFailure
argument_list|(
name|fooSources
argument_list|,
name|testprocessor
argument_list|,
name|testproblem
argument_list|,
literal|"Sources do not seem to match classes."
argument_list|)
expr_stmt|;
name|database
operator|.
name|addWarning
argument_list|(
name|fooJavadoc
argument_list|,
name|testprocessor
argument_list|,
name|testproblem
argument_list|,
literal|"Javadoc content makes no sense."
argument_list|)
expr_stmt|;
name|ArtifactResults
name|artifactResults
init|=
name|database
operator|.
name|getArtifactResults
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|database
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artifactResults
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|hits
init|=
name|database
operator|.
name|findArtifactResults
argument_list|(
name|groupId
argument_list|,
literal|"foo"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|hits
argument_list|)
expr_stmt|;
comment|//        for ( Iterator it = hits.iterator(); it.hasNext(); )
comment|//        {
comment|//            ArtifactResults result = (ArtifactResults) it.next();
comment|//            System.out.println( " result: " + result.getGroupId() + ":" + result.getArtifactId() + ":"
comment|//                + result.getVersion() + ":" + result.getClassifier() + ":" + result.getType() );
comment|//
comment|//            for ( Iterator itmsgs = result.getFailures().iterator(); itmsgs.hasNext(); )
comment|//            {
comment|//                Result res = (Result) itmsgs.next();
comment|//                String msg = (String) res.getReason();
comment|//                System.out.println( "    failure: " + msg );
comment|//            }
comment|//
comment|//            for ( Iterator itmsgs = result.getWarnings().iterator(); itmsgs.hasNext(); )
comment|//            {
comment|//                Result res = (Result) itmsgs.next();
comment|//                String msg = (String) res.getReason();
comment|//                System.out.println( "    warning: " + msg );
comment|//            }
comment|//
comment|//            for ( Iterator itmsgs = result.getNotices().iterator(); itmsgs.hasNext(); )
comment|//            {
comment|//                Result res = (Result) itmsgs.next();
comment|//                String msg = (String) res.getReason();
comment|//                System.out.println( "    notice: " + msg );
comment|//            }
comment|//        }
name|assertEquals
argument_list|(
literal|"Should find 3 artifacts"
argument_list|,
literal|3
argument_list|,
name|hits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 artifacts
block|}
block|}
end_class

end_unit

