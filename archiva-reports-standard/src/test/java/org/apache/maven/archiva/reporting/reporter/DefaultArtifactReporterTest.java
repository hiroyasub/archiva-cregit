begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|reporter
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|AbstractRepositoryReportsTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
operator|.
name|ReportingDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|group
operator|.
name|ReportGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|ArtifactResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|MetadataResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|model
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|ArtifactRepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|RepositoryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|metadata
operator|.
name|Versioning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultArtifactReporterTest
extends|extends
name|AbstractRepositoryReportsTestCase
block|{
specifier|private
name|ReportingDatabase
name|reportingDatabase
decl_stmt|;
specifier|private
name|RepositoryMetadata
name|metadata
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROCESSOR
init|=
literal|"processor"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROBLEM
init|=
literal|"problem"
decl_stmt|;
specifier|private
name|Artifact
name|artifact
decl_stmt|;
specifier|public
name|void
name|testEmptyArtifactReporter
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"No failures"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No warnings"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No artifact failures"
argument_list|,
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No metadata failures"
argument_list|,
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataSingleFailure
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addFailure
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Single Failure Reason"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failures count"
argument_list|,
literal|1
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|failures
init|=
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|failures
operator|=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMetadata
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Single Failure Reason"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more failures"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMetadata
parameter_list|(
name|MetadataResults
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|metadata
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|metadata
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|result
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|metadata
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|result
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataMultipleFailures
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addFailure
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"First Failure Reason"
argument_list|)
expr_stmt|;
name|reportingDatabase
operator|.
name|addFailure
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Second Failure Reason"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failures count"
argument_list|,
literal|2
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|failures
init|=
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|failures
operator|=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMetadata
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"First Failure Reason"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"must have 2nd failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Result
operator|)
name|failures
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Second Failure Reason"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more failures"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataSingleWarning
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addWarning
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Single Warning Message"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|1
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMetadata
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Single Warning Message"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataMultipleWarnings
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addWarning
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"First Warning"
argument_list|)
expr_stmt|;
name|reportingDatabase
operator|.
name|addWarning
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Second Warning"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|2
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMetadata
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"First Warning"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"must have 2nd warning"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Second Warning"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataSingleNotice
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addNotice
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Single Notice Message"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failure count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check notices"
argument_list|,
literal|1
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMetadata
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Single Notice Message"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadataMultipleNotices
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addNotice
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"First Notice"
argument_list|)
expr_stmt|;
name|reportingDatabase
operator|.
name|addNotice
argument_list|(
name|metadata
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Second Notice"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|2
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getMetadataIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataResults
name|results
init|=
operator|(
name|MetadataResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMetadata
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"First Notice"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"must have 2nd warning"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Second Notice"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArtifactSingleFailure
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Single Failure Reason"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failures count"
argument_list|,
literal|1
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|failures
init|=
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResults
name|results
init|=
operator|(
name|ArtifactResults
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|failures
operator|=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertArtifact
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Single Failure Reason"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more failures"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertArtifact
parameter_list|(
name|ArtifactResults
name|results
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|results
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|results
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|results
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|results
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure cause"
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|results
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArtifactMultipleFailures
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"First Failure Reason"
argument_list|)
expr_stmt|;
name|reportingDatabase
operator|.
name|addFailure
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Second Failure Reason"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failures count"
argument_list|,
literal|2
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|failures
init|=
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResults
name|results
init|=
operator|(
name|ArtifactResults
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|failures
operator|=
name|results
operator|.
name|getFailures
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertArtifact
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"First Failure Reason"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"must have 2nd failure"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Result
operator|)
name|failures
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Second Failure Reason"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more failures"
argument_list|,
name|failures
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArtifactSingleWarning
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Single Warning Message"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|1
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResults
name|results
init|=
operator|(
name|ArtifactResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertArtifact
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Single Warning Message"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArtifactMultipleWarnings
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"First Warning"
argument_list|)
expr_stmt|;
name|reportingDatabase
operator|.
name|addWarning
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Second Warning"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|2
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResults
name|results
init|=
operator|(
name|ArtifactResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getWarnings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertArtifact
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"First Warning"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"must have 2nd warning"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Second Warning"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArtifactSingleNotice
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addNotice
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Single Notice Message"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failure count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check notices"
argument_list|,
literal|1
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResults
name|results
init|=
operator|(
name|ArtifactResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertArtifact
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Single Notice Message"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArtifactMultipleNotices
parameter_list|()
block|{
name|reportingDatabase
operator|.
name|addNotice
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"First Notice"
argument_list|)
expr_stmt|;
name|reportingDatabase
operator|.
name|addNotice
argument_list|(
name|artifact
argument_list|,
name|PROCESSOR
argument_list|,
name|PROBLEM
argument_list|,
literal|"Second Notice"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"warnings count"
argument_list|,
literal|0
argument_list|,
name|reportingDatabase
operator|.
name|getNumWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check no notices"
argument_list|,
literal|2
argument_list|,
name|reportingDatabase
operator|.
name|getNumNotices
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|warnings
init|=
name|reportingDatabase
operator|.
name|getArtifactIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResults
name|results
init|=
operator|(
name|ArtifactResults
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|warnings
operator|=
name|results
operator|.
name|getNotices
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check there is a failure"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertArtifact
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"First Notice"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"must have 2nd warning"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Result
operator|)
name|warnings
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure reason"
argument_list|,
literal|"Second Notice"
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROCESSOR
argument_list|,
name|result
operator|.
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check failure parameters"
argument_list|,
name|PROBLEM
argument_list|,
name|result
operator|.
name|getProblem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more warnings"
argument_list|,
name|warnings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ArtifactFactory
name|artifactFactory
init|=
operator|(
name|ArtifactFactory
operator|)
name|lookup
argument_list|(
name|ArtifactFactory
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|artifact
operator|=
name|artifactFactory
operator|.
name|createBuildArtifact
argument_list|(
literal|"groupId"
argument_list|,
literal|"artifactId"
argument_list|,
literal|"1.0-alpha-1"
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|Versioning
name|versioning
init|=
operator|new
name|Versioning
argument_list|()
decl_stmt|;
name|versioning
operator|.
name|addVersion
argument_list|(
literal|"1.0-alpha-1"
argument_list|)
expr_stmt|;
name|versioning
operator|.
name|addVersion
argument_list|(
literal|"1.0-alpha-2"
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|ArtifactRepositoryMetadata
argument_list|(
name|artifact
argument_list|,
name|versioning
argument_list|)
expr_stmt|;
name|ReportGroup
name|reportGroup
init|=
operator|(
name|ReportGroup
operator|)
name|lookup
argument_list|(
name|ReportGroup
operator|.
name|ROLE
argument_list|,
literal|"health"
argument_list|)
decl_stmt|;
name|reportingDatabase
operator|=
operator|new
name|ReportingDatabase
argument_list|(
name|reportGroup
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

