begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|proxy
package|;
end_package

begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|wagon
operator|.
name|proxy
operator|.
name|ProxyInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A set of information to store for a group of proxies.  *  * @author<a href="mailto:brett@apache.org">Brett Porter</a>  */
end_comment

begin_class
specifier|public
class|class
name|ProxiedRepositoryGroup
block|{
comment|/**      * The locally managed repository that caches proxied artifacts.      */
specifier|private
name|ArtifactRepository
name|managedRepository
decl_stmt|;
comment|/**      * The remote repositories that are being proxied.      */
specifier|private
name|List
comment|/*<ArtifactRepository>*/
name|proxiedRepositories
decl_stmt|;
comment|/**      * A wagon proxy to communicate to the proxy repository over a proxy (eg, http proxy)... TerminologyOverflowException      */
specifier|private
specifier|final
name|ProxyInfo
name|wagonProxy
decl_stmt|;
comment|/**      * Constructor.      *      * @param proxiedRepositories the proxied repository      * @param managedRepository   the locally managed repository      * @param wagonProxy          the network proxy to use      */
specifier|public
name|ProxiedRepositoryGroup
parameter_list|(
name|List
comment|/*<ArtifactRepository>*/
name|proxiedRepositories
parameter_list|,
name|ArtifactRepository
name|managedRepository
parameter_list|,
name|ProxyInfo
name|wagonProxy
parameter_list|)
block|{
name|this
operator|.
name|proxiedRepositories
operator|=
name|proxiedRepositories
expr_stmt|;
name|this
operator|.
name|managedRepository
operator|=
name|managedRepository
expr_stmt|;
name|this
operator|.
name|wagonProxy
operator|=
name|wagonProxy
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param proxiedRepositories the proxied repository      * @param managedRepository   the locally managed repository      */
specifier|public
name|ProxiedRepositoryGroup
parameter_list|(
name|List
comment|/*<ArtifactRepository>*/
name|proxiedRepositories
parameter_list|,
name|ArtifactRepository
name|managedRepository
parameter_list|)
block|{
name|this
argument_list|(
name|proxiedRepositories
argument_list|,
name|managedRepository
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArtifactRepository
name|getManagedRepository
parameter_list|()
block|{
return|return
name|managedRepository
return|;
block|}
specifier|public
name|List
name|getProxiedRepositories
parameter_list|()
block|{
return|return
name|proxiedRepositories
return|;
block|}
specifier|public
name|ProxyInfo
name|getWagonProxy
parameter_list|()
block|{
return|return
name|wagonProxy
return|;
block|}
block|}
end_class

end_unit

