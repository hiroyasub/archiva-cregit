begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|executors
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|consumers
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|consumers
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|common
operator|.
name|consumers
operator|.
name|ConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfiguredRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|Discoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|DiscovererException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|DiscovererStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|task
operator|.
name|DataRefreshTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DataRefreshExecutor   *  * @author<a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>  * @version $Id$  *   * @plexus.component role="org.codehaus.plexus.taskqueue.execution.TaskExecutor"   *      role-hint="data-refresh"  */
end_comment

begin_class
specifier|public
class|class
name|DataRefreshExecutor
extends|extends
name|AbstractLogEnabled
implements|implements
name|TaskExecutor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DATAREFRESH_FILE
init|=
literal|".datarefresh"
decl_stmt|;
comment|/**      * Configuration store.      *      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ConfiguredRepositoryFactory
name|repoFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|DataRefreshConsumers
name|consumerNames
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|Discoverer
name|discoverer
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ConsumerFactory
name|consumerFactory
decl_stmt|;
specifier|public
name|void
name|executeTask
parameter_list|(
name|Task
name|task
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
name|DataRefreshTask
name|indexerTask
init|=
operator|(
name|DataRefreshTask
operator|)
name|task
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Executing task from queue with job name: "
operator|+
name|indexerTask
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|TaskExecutionException
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
name|consumers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|consumerNames
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Consumer
name|consumer
init|=
name|consumerFactory
operator|.
name|createConsumer
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configuration
operator|.
name|getRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryConfiguration
name|repositoryConfiguration
init|=
operator|(
name|RepositoryConfiguration
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryConfiguration
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ArtifactRepository
name|repository
init|=
name|repoFactory
operator|.
name|createRepository
argument_list|(
name|repositoryConfiguration
argument_list|)
decl_stmt|;
name|List
name|filteredConsumers
init|=
name|filterConsumers
argument_list|(
name|consumers
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|DiscovererStatistics
name|lastRunStats
init|=
operator|new
name|DiscovererStatistics
argument_list|(
name|repository
argument_list|)
decl_stmt|;
try|try
block|{
name|lastRunStats
operator|.
name|load
argument_list|(
name|DATAREFRESH_FILE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Unable to load last run statistics for repository ["
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DiscovererStatistics
name|stats
init|=
name|discoverer
operator|.
name|walkRepository
argument_list|(
name|repository
argument_list|,
name|filteredConsumers
argument_list|,
name|repositoryConfiguration
operator|.
name|isIncludeSnapshots
argument_list|()
argument_list|,
name|lastRunStats
operator|.
name|getTimestampFinished
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|stats
operator|.
name|dump
argument_list|(
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|save
argument_list|(
name|DATAREFRESH_FILE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"Unable to run data refresh against repository ["
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to save last run statistics for repository ["
operator|+
name|repository
operator|.
name|getId
argument_list|()
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Finished data refresh process in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Not all consumers work with all repositories.      * This will filter out those incompatible consumers based on the provided repository.      *       * @param consumers the initial list of consumers.      * @param repository the repository to test consumer against.      * @return the filtered list of consumers.      */
specifier|private
name|List
name|filterConsumers
parameter_list|(
name|List
name|consumers
parameter_list|,
name|ArtifactRepository
name|repository
parameter_list|)
block|{
name|List
name|filtered
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|consumers
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Consumer
name|consumer
init|=
operator|(
name|Consumer
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumer
operator|.
name|init
argument_list|(
name|repository
argument_list|)
condition|)
block|{
comment|// Approved!
name|filtered
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Disabling consumer ["
operator|+
name|consumer
operator|.
name|getName
argument_list|()
operator|+
literal|"] for repository "
operator|+
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filtered
return|;
block|}
block|}
end_class

end_unit

