begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|conversion
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|RepositoryConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|converter
operator|.
name|RepositoryConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|ArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|DiscovererException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|filter
operator|.
name|AcceptAllArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|filter
operator|.
name|SnapshotArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
operator|.
name|ReportingDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|group
operator|.
name|ReportGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|store
operator|.
name|ReportingStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|store
operator|.
name|ReportingStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author Jason van Zyl  * @plexus.component  * @todo turn this into a general conversion component and hide all this crap here.  * @todo it should be possible to move this to the converter module without causing it to gain additional dependencies  */
end_comment

begin_class
specifier|public
class|class
name|DefaultLegacyRepositoryConverter
implements|implements
name|LegacyRepositoryConverter
block|{
comment|/**      * @plexus.requirement role-hint="legacy"      */
specifier|private
name|ArtifactDiscoverer
name|artifactDiscoverer
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="legacy"      */
specifier|private
name|ArtifactRepositoryLayout
name|legacyLayout
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="default"      */
specifier|private
name|ArtifactRepositoryLayout
name|defaultLayout
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ArtifactRepositoryFactory
name|artifactRepositoryFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryConverter
name|repositoryConverter
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ReportingStore
name|reportingStore
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="health"      */
specifier|private
name|ReportGroup
name|reportGroup
decl_stmt|;
specifier|public
name|void
name|convertLegacyRepository
parameter_list|(
name|File
name|legacyRepositoryDirectory
parameter_list|,
name|File
name|repositoryDirectory
parameter_list|,
name|List
name|blacklistedPatterns
parameter_list|,
name|boolean
name|includeSnapshots
parameter_list|)
throws|throws
name|RepositoryConversionException
throws|,
name|DiscovererException
block|{
name|ArtifactRepository
name|legacyRepository
decl_stmt|;
name|ArtifactRepository
name|repository
decl_stmt|;
try|try
block|{
name|legacyRepository
operator|=
name|artifactRepositoryFactory
operator|.
name|createArtifactRepository
argument_list|(
literal|"legacy"
argument_list|,
name|legacyRepositoryDirectory
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|legacyLayout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|repository
operator|=
name|artifactRepositoryFactory
operator|.
name|createArtifactRepository
argument_list|(
literal|"default"
argument_list|,
name|repositoryDirectory
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|defaultLayout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Error convering legacy repository."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ArtifactFilter
name|filter
init|=
name|includeSnapshots
condition|?
operator|new
name|AcceptAllArtifactFilter
argument_list|()
else|:
operator|(
name|ArtifactFilter
operator|)
operator|new
name|SnapshotArtifactFilter
argument_list|()
decl_stmt|;
name|List
name|legacyArtifacts
init|=
name|artifactDiscoverer
operator|.
name|discoverArtifacts
argument_list|(
name|legacyRepository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|ReportingDatabase
name|reporter
decl_stmt|;
try|try
block|{
name|reporter
operator|=
name|reportingStore
operator|.
name|getReportsFromStore
argument_list|(
name|repository
argument_list|,
name|reportGroup
argument_list|)
expr_stmt|;
name|repositoryConverter
operator|.
name|convert
argument_list|(
name|legacyArtifacts
argument_list|,
name|repository
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|reportingStore
operator|.
name|storeReports
argument_list|(
name|reporter
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReportingStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryConversionException
argument_list|(
literal|"Error convering legacy repository."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

