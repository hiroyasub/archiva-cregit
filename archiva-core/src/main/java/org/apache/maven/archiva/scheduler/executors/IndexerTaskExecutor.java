begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|executors
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ArchivaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|ConfiguredRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|ArtifactDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|DiscovererException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|MetadataDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|filter
operator|.
name|MetadataFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|discoverer
operator|.
name|filter
operator|.
name|SnapshotArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryArtifactIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryArtifactIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|RepositoryIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|record
operator|.
name|IndexRecordExistsArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|indexer
operator|.
name|record
operator|.
name|RepositoryIndexRecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|database
operator|.
name|ReportingDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|executor
operator|.
name|ReportExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|filter
operator|.
name|ReportingMetadataFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|group
operator|.
name|ReportGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|reporting
operator|.
name|store
operator|.
name|ReportingStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiva
operator|.
name|scheduler
operator|.
name|task
operator|.
name|IndexerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|AndArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|taskqueue
operator|.
name|execution
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Edwin Punzalan  * @plexus.component role="org.codehaus.plexus.taskqueue.execution.TaskExecutor" role-hint="indexer"  */
end_comment

begin_class
specifier|public
class|class
name|IndexerTaskExecutor
extends|extends
name|AbstractLogEnabled
implements|implements
name|TaskExecutor
block|{
comment|/**      * Configuration store.      *      * @plexus.requirement      */
specifier|private
name|ArchivaConfiguration
name|archivaConfiguration
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|RepositoryArtifactIndexFactory
name|indexFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ConfiguredRepositoryFactory
name|repoFactory
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.discoverer.ArtifactDiscoverer"      */
specifier|private
name|Map
name|artifactDiscoverers
decl_stmt|;
comment|/**      * @plexus.requirement role="org.apache.maven.archiva.discoverer.MetadataDiscoverer"      */
specifier|private
name|Map
name|metadataDiscoverers
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="standard"      */
specifier|private
name|RepositoryIndexRecordFactory
name|recordFactory
decl_stmt|;
comment|/**      * @plexus.requirement      */
specifier|private
name|ReportExecutor
name|reportExecutor
decl_stmt|;
comment|/**      * @plexus.requirement role-hint="health"      */
specifier|private
name|ReportGroup
name|reportGroup
decl_stmt|;
specifier|private
name|long
name|lastIndexingTime
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ARTIFACT_BUFFER_SIZE
init|=
literal|1000
decl_stmt|;
specifier|public
name|long
name|getLastIndexingTime
parameter_list|()
block|{
return|return
name|lastIndexingTime
return|;
block|}
specifier|public
name|void
name|executeTask
parameter_list|(
name|Task
name|task
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
name|IndexerTask
name|indexerTask
init|=
operator|(
name|IndexerTask
operator|)
name|task
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Executing task from queue with job name: "
operator|+
name|indexerTask
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|TaskExecutionException
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|File
name|indexPath
init|=
operator|new
name|File
argument_list|(
name|configuration
operator|.
name|getIndexPath
argument_list|()
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|configuration
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|executeNowIfNeeded
parameter_list|()
throws|throws
name|TaskExecutionException
block|{
name|Configuration
name|configuration
init|=
name|archivaConfiguration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|File
name|indexPath
init|=
operator|new
name|File
argument_list|(
name|configuration
operator|.
name|getIndexPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|RepositoryArtifactIndex
name|artifactIndex
init|=
name|indexFactory
operator|.
name|createStandardIndex
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifactIndex
operator|.
name|exists
argument_list|()
condition|)
block|{
name|execute
argument_list|(
name|configuration
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|File
name|indexPath
parameter_list|)
throws|throws
name|TaskExecutionException
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Starting repository indexing process"
argument_list|)
expr_stmt|;
name|RepositoryArtifactIndex
name|index
init|=
name|indexFactory
operator|.
name|createStandardIndex
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
name|Collection
name|keys
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|exists
argument_list|()
condition|)
block|{
name|keys
operator|=
name|index
operator|.
name|getAllRecordKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|keys
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|configuration
operator|.
name|getRepositories
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RepositoryConfiguration
name|repositoryConfiguration
init|=
operator|(
name|RepositoryConfiguration
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryConfiguration
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
name|List
name|blacklistedPatterns
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|repositoryConfiguration
operator|.
name|getBlackListPatterns
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blacklistedPatterns
operator|.
name|addAll
argument_list|(
name|repositoryConfiguration
operator|.
name|getBlackListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getGlobalBlackListPatterns
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blacklistedPatterns
operator|.
name|addAll
argument_list|(
name|configuration
operator|.
name|getGlobalBlackListPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|includeSnapshots
init|=
name|repositoryConfiguration
operator|.
name|isIncludeSnapshots
argument_list|()
decl_stmt|;
name|ArtifactRepository
name|repository
init|=
name|repoFactory
operator|.
name|createRepository
argument_list|(
name|repositoryConfiguration
argument_list|)
decl_stmt|;
name|ReportingDatabase
name|reporter
init|=
name|reportExecutor
operator|.
name|getReportDatabase
argument_list|(
name|repository
argument_list|,
name|reportGroup
argument_list|)
decl_stmt|;
comment|// keep original value in case there is another process under way
name|long
name|origStartTime
init|=
name|reporter
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Discovery process
name|String
name|layoutProperty
init|=
name|repositoryConfiguration
operator|.
name|getLayout
argument_list|()
decl_stmt|;
name|ArtifactDiscoverer
name|discoverer
init|=
operator|(
name|ArtifactDiscoverer
operator|)
name|artifactDiscoverers
operator|.
name|get
argument_list|(
name|layoutProperty
argument_list|)
decl_stmt|;
name|AndArtifactFilter
name|filter
init|=
operator|new
name|AndArtifactFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|IndexRecordExistsArtifactFilter
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|includeSnapshots
condition|)
block|{
name|filter
operator|.
name|add
argument_list|(
operator|new
name|SnapshotArtifactFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Save some memory by not tracking paths we won't use
comment|// TODO: Plexus CDC should be able to inject this configuration
name|discoverer
operator|.
name|setTrackOmittedPaths
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Searching repository "
operator|+
name|repositoryConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|artifacts
init|=
name|discoverer
operator|.
name|discoverArtifacts
argument_list|(
name|repository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifacts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Discovered "
operator|+
name|artifacts
operator|.
name|size
argument_list|()
operator|+
literal|" unindexed artifacts"
argument_list|)
expr_stmt|;
comment|// Work through these in batches, then flush the project cache.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|size
argument_list|()
condition|;
name|j
operator|+=
name|ARTIFACT_BUFFER_SIZE
control|)
block|{
name|int
name|end
init|=
name|j
operator|+
name|ARTIFACT_BUFFER_SIZE
decl_stmt|;
name|List
name|currentArtifacts
init|=
name|artifacts
operator|.
name|subList
argument_list|(
name|j
argument_list|,
name|end
operator|>
name|artifacts
operator|.
name|size
argument_list|()
condition|?
name|artifacts
operator|.
name|size
argument_list|()
else|:
name|end
argument_list|)
decl_stmt|;
comment|// TODO: proper queueing of this in case it was triggered externally (not harmful to do so at present, but not optimal)
comment|// run the reports. Done intermittently to avoid losing track of what is indexed since
comment|// that is what the filter is based on.
name|reportExecutor
operator|.
name|runArtifactReports
argument_list|(
name|reportGroup
argument_list|,
name|currentArtifacts
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|index
operator|.
name|indexArtifacts
argument_list|(
name|currentArtifacts
argument_list|,
name|recordFactory
argument_list|)
expr_stmt|;
comment|// MRM-142 - the project builder retains a lot of objects in its inflexible cache. This is a hack
comment|// around that. TODO: remove when it is configurable
name|flushProjectBuilderCacheHack
argument_list|()
expr_stmt|;
block|}
block|}
name|MetadataFilter
name|metadataFilter
init|=
operator|new
name|ReportingMetadataFilter
argument_list|(
name|reporter
argument_list|)
decl_stmt|;
name|MetadataDiscoverer
name|metadataDiscoverer
init|=
operator|(
name|MetadataDiscoverer
operator|)
name|metadataDiscoverers
operator|.
name|get
argument_list|(
name|layoutProperty
argument_list|)
decl_stmt|;
name|List
name|metadata
init|=
name|metadataDiscoverer
operator|.
name|discoverMetadata
argument_list|(
name|repository
argument_list|,
name|blacklistedPatterns
argument_list|,
name|metadataFilter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Discovered "
operator|+
name|metadata
operator|.
name|size
argument_list|()
operator|+
literal|" unprocessed metadata files"
argument_list|)
expr_stmt|;
comment|// run the reports
name|reportExecutor
operator|.
name|runMetadataReports
argument_list|(
name|reportGroup
argument_list|,
name|metadata
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
name|reporter
operator|.
name|setStartTime
argument_list|(
name|origStartTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DiscovererException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ReportingStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TaskExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|lastIndexingTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Finished repository indexing process in "
operator|+
name|time
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @todo remove when no longer needed (MRM-142)      * @plexus.requirement      */
specifier|private
name|MavenProjectBuilder
name|projectBuilder
decl_stmt|;
specifier|private
name|void
name|flushProjectBuilderCacheHack
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|projectBuilder
operator|!=
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"projectBuilder is type "
operator|+
name|projectBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|f
init|=
name|projectBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"rawProjectCache"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
name|cache
init|=
operator|(
name|Map
operator|)
name|f
operator|.
name|get
argument_list|(
name|projectBuilder
argument_list|)
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"projectBuilder.raw is type "
operator|+
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|f
operator|=
name|projectBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"processedProjectCache"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|(
name|Map
operator|)
name|f
operator|.
name|get
argument_list|(
name|projectBuilder
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"projectBuilder.processed is type "
operator|+
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

